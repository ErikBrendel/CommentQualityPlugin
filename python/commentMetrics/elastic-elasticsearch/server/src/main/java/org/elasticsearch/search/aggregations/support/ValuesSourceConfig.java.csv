# id;timestamp;commentText;codeText;commentWords;codeWords
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             DateTimeZone timeZone,             String format);1524684173;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            DateTimeZone timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                @SuppressWarnings("unchecked")_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<VS>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,date,time,zone,time,zone,string,format,if,field,null,if,script,null,suppress,warnings,unchecked,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,vs,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             DateTimeZone timeZone,             String format);1528762805;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            DateTimeZone timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                @SuppressWarnings("unchecked")_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<VS>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,date,time,zone,time,zone,string,format,if,field,null,if,script,null,suppress,warnings,unchecked,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,vs,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             DateTimeZone timeZone,             String format);1532353780;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            DateTimeZone timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<VS>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,date,time,zone,time,zone,string,format,if,field,null,if,script,null,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,vs,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             DateTimeZone timeZone,             String format);1539723533;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            DateTimeZone timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<VS>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,date,time,zone,time,zone,string,format,if,field,null,if,script,null,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,vs,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             DateTimeZone timeZone,             String format);1540583181;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            DateTimeZone timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,date,time,zone,time,zone,string,format,if,field,null,if,script,null,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             DateTimeZone timeZone,             String format);1541668945;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            DateTimeZone timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType, timeZone))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType, timeZone))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType, timeZone))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,date,time,zone,time,zone,string,format,if,field,null,if,script,null,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,time,zone,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,time,zone,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,time,zone,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             DateTimeZone timeZone,             String format);1544600864;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            DateTimeZone timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType, timeZone))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType, timeZone))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType, timeZone))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,date,time,zone,time,zone,string,format,if,field,null,if,script,null,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,time,zone,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,time,zone,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,time,zone,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context);1540583181;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context);1541668945;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context);1544600864;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context);1548236405;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context);1549276276;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> private VS originalValuesSource() throws IOException;1524684173;Return the original values source, before we apply `missing`.;private VS originalValuesSource() throws IOException {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,throws,ioexception,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> private VS originalValuesSource() throws IOException;1528762805;Return the original values source, before we apply `missing`.;private VS originalValuesSource() throws IOException {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,throws,ioexception,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> private VS originalValuesSource() throws IOException;1532353780;Return the original values source, before we apply `missing`.;private VS originalValuesSource() throws IOException {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,throws,ioexception,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> private VS originalValuesSource() throws IOException;1539723533;Return the original values source, before we apply `missing`.;private VS originalValuesSource() throws IOException {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,throws,ioexception,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> private VS originalValuesSource();1540583181;Return the original values source, before we apply `missing`.;private VS originalValuesSource() {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> private VS originalValuesSource();1541668945;Return the original values source, before we apply `missing`.;private VS originalValuesSource() {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> private VS originalValuesSource();1544600864;Return the original values source, before we apply `missing`.;private VS originalValuesSource() {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> private VS originalValuesSource();1548236405;Return the original values source, before we apply `missing`.;private VS originalValuesSource() {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> private VS originalValuesSource();1549276276;Return the original values source, before we apply `missing`.;private VS originalValuesSource() {_        if (fieldContext() == null) {_            if (valueSourceType() == ValuesSourceType.NUMERIC) {_                return (VS) numericScript()__            }_            if (valueSourceType() == ValuesSourceType.BYTES) {_                return (VS) bytesScript()__            }_            throw new AggregationExecutionException("value source of type [" + valueSourceType().name()_                    + "] is not supported by scripts")__        }__        if (valueSourceType() == ValuesSourceType.NUMERIC) {_            return (VS) numericField()__        }_        if (valueSourceType() == ValuesSourceType.GEOPOINT) {_            return (VS) geoPointField()__        }_        _        return (VS) bytesField()__    };return,the,original,values,source,before,we,apply,missing;private,vs,original,values,source,if,field,context,null,if,value,source,type,values,source,type,numeric,return,vs,numeric,script,if,value,source,type,values,source,type,bytes,return,vs,bytes,script,throw,new,aggregation,execution,exception,value,source,of,type,value,source,type,name,is,not,supported,by,scripts,if,value,source,type,values,source,type,numeric,return,vs,numeric,field,if,value,source,type,values,source,type,geopoint,return,vs,geo,point,field,return,vs,bytes,field
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context) throws IOException;1524684173;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) throws IOException {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,throws,ioexception,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context) throws IOException;1528762805;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) throws IOException {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,throws,ioexception,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context) throws IOException;1532353780;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) throws IOException {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,throws,ioexception,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> @Nullable     public VS toValuesSource(QueryShardContext context) throws IOException;1539723533;Get a value source given its configuration. A return value of null indicates that_no value source could be built.;@Nullable_    public VS toValuesSource(QueryShardContext context) throws IOException {_        if (!valid()) {_            throw new IllegalStateException(_                    "value source config is invalid_ must have either a field context or a script or marked as unwrapped")__        }__        final VS vs__        if (unmapped()) {_            if (missing() == null) {_                _                vs = null__            } else if (valueSourceType() == ValuesSourceType.NUMERIC) {_                vs = (VS) ValuesSource.Numeric.EMPTY__            } else if (valueSourceType() == ValuesSourceType.GEOPOINT) {_                vs = (VS) ValuesSource.GeoPoint.EMPTY__            } else if (valueSourceType() == ValuesSourceType.ANY || valueSourceType() == ValuesSourceType.BYTES) {_                vs = (VS) ValuesSource.Bytes.WithOrdinals.EMPTY__            } else {_                throw new IllegalArgumentException("Can't deal with unmapped ValuesSource type " + valueSourceType())__            }_        } else {_            vs = originalValuesSource()__        }__        if (missing() == null) {_            return vs__        }__        if (vs instanceof ValuesSource.Bytes) {_            final BytesRef missing = format.parseBytesRef(missing().toString())__            if (vs instanceof ValuesSource.Bytes.WithOrdinals) {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals) vs, missing)__            } else {_                return (VS) MissingValues.replaceMissing((ValuesSource.Bytes) vs, missing)__            }_        } else if (vs instanceof ValuesSource.Numeric) {_            Number missing = format.parseDouble(missing().toString(), false, context::nowInMillis)__            return (VS) MissingValues.replaceMissing((ValuesSource.Numeric) vs, missing)__        } else if (vs instanceof ValuesSource.GeoPoint) {_            _            final GeoPoint missing = new GeoPoint(missing().toString())__            return (VS) MissingValues.replaceMissing((ValuesSource.GeoPoint) vs, missing)__        } else {_            _            throw new IllegalArgumentException("Can't apply missing values on a " + vs.getClass())__        }_    };get,a,value,source,given,its,configuration,a,return,value,of,null,indicates,that,no,value,source,could,be,built;nullable,public,vs,to,values,source,query,shard,context,context,throws,ioexception,if,valid,throw,new,illegal,state,exception,value,source,config,is,invalid,must,have,either,a,field,context,or,a,script,or,marked,as,unwrapped,final,vs,vs,if,unmapped,if,missing,null,vs,null,else,if,value,source,type,values,source,type,numeric,vs,vs,values,source,numeric,empty,else,if,value,source,type,values,source,type,geopoint,vs,vs,values,source,geo,point,empty,else,if,value,source,type,values,source,type,any,value,source,type,values,source,type,bytes,vs,vs,values,source,bytes,with,ordinals,empty,else,throw,new,illegal,argument,exception,can,t,deal,with,unmapped,values,source,type,value,source,type,else,vs,original,values,source,if,missing,null,return,vs,if,vs,instanceof,values,source,bytes,final,bytes,ref,missing,format,parse,bytes,ref,missing,to,string,if,vs,instanceof,values,source,bytes,with,ordinals,return,vs,missing,values,replace,missing,values,source,bytes,with,ordinals,vs,missing,else,return,vs,missing,values,replace,missing,values,source,bytes,vs,missing,else,if,vs,instanceof,values,source,numeric,number,missing,format,parse,double,missing,to,string,false,context,now,in,millis,return,vs,missing,values,replace,missing,values,source,numeric,vs,missing,else,if,vs,instanceof,values,source,geo,point,final,geo,point,missing,new,geo,point,missing,to,string,return,vs,missing,values,replace,missing,values,source,geo,point,vs,missing,else,throw,new,illegal,argument,exception,can,t,apply,missing,values,on,a,vs,get,class
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             ZoneId timeZone,             String format);1548236405;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            ZoneId timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType, timeZone))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType, timeZone))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType, timeZone))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,zone,id,time,zone,string,format,if,field,null,if,script,null,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,time,zone,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,time,zone,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,time,zone,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
ValuesSourceConfig -> public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(             QueryShardContext context,             ValueType valueType,             String field, Script script,             Object missing,             ZoneId timeZone,             String format);1549276276;Resolve a {@link ValuesSourceConfig} given configuration parameters.;public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(_            QueryShardContext context,_            ValueType valueType,_            String field, Script script,_            Object missing,_            ZoneId timeZone,_            String format) {__        if (field == null) {_            if (script == null) {_                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY)__                config.format(resolveFormat(null, valueType, timeZone))__                return config__            }_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            if (valuesSourceType == ValuesSourceType.ANY) {_                _                _                _                _                valuesSourceType = ValuesSourceType.BYTES__            }_            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType, timeZone))__            config.script(createScript(script, context))__            config.scriptValueType(valueType)__            return config__        }__        MappedFieldType fieldType = context.fieldMapper(field)__        if (fieldType == null) {_            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY__            ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(valuesSourceType)__            config.missing(missing)__            config.timezone(timeZone)__            config.format(resolveFormat(format, valueType, timeZone))__            config.unmapped(true)__            if (valueType != null) {_                _                config.scriptValueType(valueType)__            }_            return config__        }__        IndexFieldData<?> indexFieldData = context.getForField(fieldType)___        ValuesSourceConfig<VS> config__        if (valueType == null) {_            if (indexFieldData instanceof IndexNumericFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.NUMERIC)__            } else if (indexFieldData instanceof IndexGeoPointFieldData) {_                config = new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT)__            } else {_                config = new ValuesSourceConfig<>(ValuesSourceType.BYTES)__            }_        } else {_            config = new ValuesSourceConfig<>(valueType.getValuesSourceType())__        }__        config.fieldContext(new FieldContext(field, indexFieldData, fieldType))__        config.missing(missing)__        config.timezone(timeZone)__        config.script(createScript(script, context))__        config.format(fieldType.docValueFormat(format, timeZone))__        return config__    };resolve,a,link,values,source,config,given,configuration,parameters;public,static,vs,extends,values,source,values,source,config,vs,resolve,query,shard,context,context,value,type,value,type,string,field,script,script,object,missing,zone,id,time,zone,string,format,if,field,null,if,script,null,values,source,config,vs,config,new,values,source,config,values,source,type,any,config,format,resolve,format,null,value,type,time,zone,return,config,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,if,values,source,type,values,source,type,any,values,source,type,values,source,type,bytes,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,time,zone,config,script,create,script,script,context,config,script,value,type,value,type,return,config,mapped,field,type,field,type,context,field,mapper,field,if,field,type,null,values,source,type,values,source,type,value,type,null,value,type,get,values,source,type,values,source,type,any,values,source,config,vs,config,new,values,source,config,values,source,type,config,missing,missing,config,timezone,time,zone,config,format,resolve,format,format,value,type,time,zone,config,unmapped,true,if,value,type,null,config,script,value,type,value,type,return,config,index,field,data,index,field,data,context,get,for,field,field,type,values,source,config,vs,config,if,value,type,null,if,index,field,data,instanceof,index,numeric,field,data,config,new,values,source,config,values,source,type,numeric,else,if,index,field,data,instanceof,index,geo,point,field,data,config,new,values,source,config,values,source,type,geopoint,else,config,new,values,source,config,values,source,type,bytes,else,config,new,values,source,config,value,type,get,values,source,type,config,field,context,new,field,context,field,index,field,data,field,type,config,missing,missing,config,timezone,time,zone,config,script,create,script,script,context,config,format,field,type,doc,value,format,format,time,zone,return,config
