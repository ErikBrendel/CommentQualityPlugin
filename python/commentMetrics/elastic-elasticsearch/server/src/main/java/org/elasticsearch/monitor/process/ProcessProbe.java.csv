commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static ProcessProbe getInstance() {     return ProcessProbeHolder.INSTANCE. }
true;public;0;10;/**  * Returns the maximum number of file descriptors allowed on the system, or -1 if not supported.  */ ;/**  * Returns the maximum number of file descriptors allowed on the system, or -1 if not supported.  */ public long getMaxFileDescriptorCount() {     if (getMaxFileDescriptorCountField == null) {         return -1.     }     try {         return (Long) getMaxFileDescriptorCountField.invoke(osMxBean).     } catch (Exception t) {         return -1.     } }
true;public;0;10;/**  * Returns the number of opened file descriptors associated with the current process, or -1 if not supported.  */ ;/**  * Returns the number of opened file descriptors associated with the current process, or -1 if not supported.  */ public long getOpenFileDescriptorCount() {     if (getOpenFileDescriptorCountField == null) {         return -1.     }     try {         return (Long) getOpenFileDescriptorCountField.invoke(osMxBean).     } catch (Exception t) {         return -1.     } }
true;public;0;3;/**  * Returns the process CPU usage in percent  */ ;/**  * Returns the process CPU usage in percent  */ public short getProcessCpuPercent() {     return Probes.getLoadAndScaleToPercent(getProcessCpuLoad, osMxBean). }
true;public;0;13;/**  * Returns the CPU time (in milliseconds) used by the process on which the Java virtual machine is running, or -1 if not supported.  */ ;/**  * Returns the CPU time (in milliseconds) used by the process on which the Java virtual machine is running, or -1 if not supported.  */ public long getProcessCpuTotalTime() {     if (getProcessCpuTime != null) {         try {             long time = (long) getProcessCpuTime.invoke(osMxBean).             if (time >= 0) {                 return (time / 1_000_000L).             }         } catch (Exception t) {             return -1.         }     }     return -1. }
true;public;0;13;/**  * Returns the size (in bytes) of virtual memory that is guaranteed to be available to the running process  */ ;/**  * Returns the size (in bytes) of virtual memory that is guaranteed to be available to the running process  */ public long getTotalVirtualMemorySize() {     if (getCommittedVirtualMemorySize != null) {         try {             long virtual = (long) getCommittedVirtualMemorySize.invoke(osMxBean).             if (virtual >= 0) {                 return virtual.             }         } catch (Exception t) {             return -1.         }     }     return -1. }
false;public;1;3;;public ProcessInfo processInfo(long refreshInterval) {     return new ProcessInfo(jvmInfo().pid(), BootstrapInfo.isMemoryLocked(), refreshInterval). }
false;public;0;5;;public ProcessStats processStats() {     ProcessStats.Cpu cpu = new ProcessStats.Cpu(getProcessCpuPercent(), getProcessCpuTotalTime()).     ProcessStats.Mem mem = new ProcessStats.Mem(getTotalVirtualMemorySize()).     return new ProcessStats(System.currentTimeMillis(), getOpenFileDescriptorCount(), getMaxFileDescriptorCount(), cpu, mem). }
true;private,static;1;8;/**  * Returns a given method of the OperatingSystemMXBean,  * or null if the method is not found or unavailable.  */ ;/**  * Returns a given method of the OperatingSystemMXBean,  * or null if the method is not found or unavailable.  */ private static Method getMethod(String methodName) {     try {         return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName).     } catch (Exception t) {         // not available         return null.     } }
true;private,static;1;8;/**  * Returns a given method of the UnixOperatingSystemMXBean,  * or null if the method is not found or unavailable.  */ ;/**  * Returns a given method of the UnixOperatingSystemMXBean,  * or null if the method is not found or unavailable.  */ private static Method getUnixMethod(String methodName) {     try {         return Class.forName("com.sun.management.UnixOperatingSystemMXBean").getMethod(methodName).     } catch (Exception t) {         // not available         return null.     } }
