# id;timestamp;commentText;codeText;commentWords;codeWords
SettingsModule -> private void registerSetting(Setting<?> setting);1524684173;Registers a new setting. This method should be used by plugins in order to expose any custom settings the plugin defines._Unless a setting is registered the setting is unusable. If a setting is never the less specified the node will reject_the setting during startup.;private void registerSetting(Setting<?> setting) {_        if (setting.isFiltered()) {_            if (settingsFilterPattern.contains(setting.getKey()) == false) {_                registerSettingsFilter(setting.getKey())__            }_        }_        if (setting.hasNodeScope() || setting.hasIndexScope()) {_            if (setting.hasNodeScope()) {_                Setting<?> existingSetting = nodeSettings.get(setting.getKey())__                if (existingSetting != null) {_                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice")__                }_                nodeSettings.put(setting.getKey(), setting)__            }_            if (setting.hasIndexScope()) {_                Setting<?> existingSetting = indexSettings.get(setting.getKey())__                if (existingSetting != null) {_                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice")__                }_                indexSettings.put(setting.getKey(), setting)__            }_        } else {_            throw new IllegalArgumentException("No scope found for setting [" + setting.getKey() + "]")__        }_    };registers,a,new,setting,this,method,should,be,used,by,plugins,in,order,to,expose,any,custom,settings,the,plugin,defines,unless,a,setting,is,registered,the,setting,is,unusable,if,a,setting,is,never,the,less,specified,the,node,will,reject,the,setting,during,startup;private,void,register,setting,setting,setting,if,setting,is,filtered,if,settings,filter,pattern,contains,setting,get,key,false,register,settings,filter,setting,get,key,if,setting,has,node,scope,setting,has,index,scope,if,setting,has,node,scope,setting,existing,setting,node,settings,get,setting,get,key,if,existing,setting,null,throw,new,illegal,argument,exception,cannot,register,setting,setting,get,key,twice,node,settings,put,setting,get,key,setting,if,setting,has,index,scope,setting,existing,setting,index,settings,get,setting,get,key,if,existing,setting,null,throw,new,illegal,argument,exception,cannot,register,setting,setting,get,key,twice,index,settings,put,setting,get,key,setting,else,throw,new,illegal,argument,exception,no,scope,found,for,setting,setting,get,key
SettingsModule -> private void registerSetting(Setting<?> setting);1536611444;Registers a new setting. This method should be used by plugins in order to expose any custom settings the plugin defines._Unless a setting is registered the setting is unusable. If a setting is never the less specified the node will reject_the setting during startup.;private void registerSetting(Setting<?> setting) {_        if (setting.isFiltered()) {_            if (settingsFilterPattern.contains(setting.getKey()) == false) {_                registerSettingsFilter(setting.getKey())__            }_        }_        if (setting.hasNodeScope() || setting.hasIndexScope()) {_            if (setting.hasNodeScope()) {_                Setting<?> existingSetting = nodeSettings.get(setting.getKey())__                if (existingSetting != null) {_                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice")__                }_                nodeSettings.put(setting.getKey(), setting)__            }_            if (setting.hasIndexScope()) {_                Setting<?> existingSetting = indexSettings.get(setting.getKey())__                if (existingSetting != null) {_                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice")__                }_                indexSettings.put(setting.getKey(), setting)__            }_        } else {_            throw new IllegalArgumentException("No scope found for setting [" + setting.getKey() + "]")__        }_    };registers,a,new,setting,this,method,should,be,used,by,plugins,in,order,to,expose,any,custom,settings,the,plugin,defines,unless,a,setting,is,registered,the,setting,is,unusable,if,a,setting,is,never,the,less,specified,the,node,will,reject,the,setting,during,startup;private,void,register,setting,setting,setting,if,setting,is,filtered,if,settings,filter,pattern,contains,setting,get,key,false,register,settings,filter,setting,get,key,if,setting,has,node,scope,setting,has,index,scope,if,setting,has,node,scope,setting,existing,setting,node,settings,get,setting,get,key,if,existing,setting,null,throw,new,illegal,argument,exception,cannot,register,setting,setting,get,key,twice,node,settings,put,setting,get,key,setting,if,setting,has,index,scope,setting,existing,setting,index,settings,get,setting,get,key,if,existing,setting,null,throw,new,illegal,argument,exception,cannot,register,setting,setting,get,key,twice,index,settings,put,setting,get,key,setting,else,throw,new,illegal,argument,exception,no,scope,found,for,setting,setting,get,key
SettingsModule -> private void registerSetting(Setting<?> setting);1537806831;Registers a new setting. This method should be used by plugins in order to expose any custom settings the plugin defines._Unless a setting is registered the setting is unusable. If a setting is never the less specified the node will reject_the setting during startup.;private void registerSetting(Setting<?> setting) {_        if (setting.isFiltered()) {_            if (settingsFilterPattern.contains(setting.getKey()) == false) {_                registerSettingsFilter(setting.getKey())__            }_        }_        if (setting.hasNodeScope() || setting.hasIndexScope()) {_            if (setting.hasNodeScope()) {_                Setting<?> existingSetting = nodeSettings.get(setting.getKey())__                if (existingSetting != null) {_                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice")__                }_                nodeSettings.put(setting.getKey(), setting)__            }_            if (setting.hasIndexScope()) {_                Setting<?> existingSetting = indexSettings.get(setting.getKey())__                if (existingSetting != null) {_                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice")__                }_                indexSettings.put(setting.getKey(), setting)__            }_        } else {_            throw new IllegalArgumentException("No scope found for setting [" + setting.getKey() + "]")__        }_    };registers,a,new,setting,this,method,should,be,used,by,plugins,in,order,to,expose,any,custom,settings,the,plugin,defines,unless,a,setting,is,registered,the,setting,is,unusable,if,a,setting,is,never,the,less,specified,the,node,will,reject,the,setting,during,startup;private,void,register,setting,setting,setting,if,setting,is,filtered,if,settings,filter,pattern,contains,setting,get,key,false,register,settings,filter,setting,get,key,if,setting,has,node,scope,setting,has,index,scope,if,setting,has,node,scope,setting,existing,setting,node,settings,get,setting,get,key,if,existing,setting,null,throw,new,illegal,argument,exception,cannot,register,setting,setting,get,key,twice,node,settings,put,setting,get,key,setting,if,setting,has,index,scope,setting,existing,setting,index,settings,get,setting,get,key,if,existing,setting,null,throw,new,illegal,argument,exception,cannot,register,setting,setting,get,key,twice,index,settings,put,setting,get,key,setting,else,throw,new,illegal,argument,exception,no,scope,found,for,setting,setting,get,key
SettingsModule -> private void registerSetting(Setting<?> setting);1541092382;Registers a new setting. This method should be used by plugins in order to expose any custom settings the plugin defines._Unless a setting is registered the setting is unusable. If a setting is never the less specified the node will reject_the setting during startup.;private void registerSetting(Setting<?> setting) {_        if (setting.isFiltered()) {_            if (settingsFilterPattern.contains(setting.getKey()) == false) {_                registerSettingsFilter(setting.getKey())__            }_        }_        if (setting.hasNodeScope() || setting.hasIndexScope()) {_            if (setting.hasNodeScope()) {_                Setting<?> existingSetting = nodeSettings.get(setting.getKey())__                if (existingSetting != null) {_                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice")__                }_                nodeSettings.put(setting.getKey(), setting)__            }_            if (setting.hasIndexScope()) {_                Setting<?> existingSetting = indexSettings.get(setting.getKey())__                if (existingSetting != null) {_                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice")__                }_                indexSettings.put(setting.getKey(), setting)__            }_        } else {_            throw new IllegalArgumentException("No scope found for setting [" + setting.getKey() + "]")__        }_    };registers,a,new,setting,this,method,should,be,used,by,plugins,in,order,to,expose,any,custom,settings,the,plugin,defines,unless,a,setting,is,registered,the,setting,is,unusable,if,a,setting,is,never,the,less,specified,the,node,will,reject,the,setting,during,startup;private,void,register,setting,setting,setting,if,setting,is,filtered,if,settings,filter,pattern,contains,setting,get,key,false,register,settings,filter,setting,get,key,if,setting,has,node,scope,setting,has,index,scope,if,setting,has,node,scope,setting,existing,setting,node,settings,get,setting,get,key,if,existing,setting,null,throw,new,illegal,argument,exception,cannot,register,setting,setting,get,key,twice,node,settings,put,setting,get,key,setting,if,setting,has,index,scope,setting,existing,setting,index,settings,get,setting,get,key,if,existing,setting,null,throw,new,illegal,argument,exception,cannot,register,setting,setting,get,key,twice,index,settings,put,setting,get,key,setting,else,throw,new,illegal,argument,exception,no,scope,found,for,setting,setting,get,key
SettingsModule -> private void registerSettingsFilter(String filter);1524684173;Registers a settings filter pattern that allows to filter out certain settings that for instance contain sensitive information_or if a setting is for internal purposes only. The given pattern must either be a valid settings key or a simple regexp pattern.;private void registerSettingsFilter(String filter) {_        if (SettingsFilter.isValidPattern(filter) == false) {_            throw new IllegalArgumentException("filter [" + filter +"] is invalid must be either a key or a regex pattern")__        }_        if (settingsFilterPattern.contains(filter)) {_            throw new IllegalArgumentException("filter [" + filter + "] has already been registered")__        }_        settingsFilterPattern.add(filter)__    };registers,a,settings,filter,pattern,that,allows,to,filter,out,certain,settings,that,for,instance,contain,sensitive,information,or,if,a,setting,is,for,internal,purposes,only,the,given,pattern,must,either,be,a,valid,settings,key,or,a,simple,regexp,pattern;private,void,register,settings,filter,string,filter,if,settings,filter,is,valid,pattern,filter,false,throw,new,illegal,argument,exception,filter,filter,is,invalid,must,be,either,a,key,or,a,regex,pattern,if,settings,filter,pattern,contains,filter,throw,new,illegal,argument,exception,filter,filter,has,already,been,registered,settings,filter,pattern,add,filter
SettingsModule -> private void registerSettingsFilter(String filter);1536611444;Registers a settings filter pattern that allows to filter out certain settings that for instance contain sensitive information_or if a setting is for internal purposes only. The given pattern must either be a valid settings key or a simple regexp pattern.;private void registerSettingsFilter(String filter) {_        if (SettingsFilter.isValidPattern(filter) == false) {_            throw new IllegalArgumentException("filter [" + filter +"] is invalid must be either a key or a regex pattern")__        }_        if (settingsFilterPattern.contains(filter)) {_            throw new IllegalArgumentException("filter [" + filter + "] has already been registered")__        }_        settingsFilterPattern.add(filter)__    };registers,a,settings,filter,pattern,that,allows,to,filter,out,certain,settings,that,for,instance,contain,sensitive,information,or,if,a,setting,is,for,internal,purposes,only,the,given,pattern,must,either,be,a,valid,settings,key,or,a,simple,regexp,pattern;private,void,register,settings,filter,string,filter,if,settings,filter,is,valid,pattern,filter,false,throw,new,illegal,argument,exception,filter,filter,is,invalid,must,be,either,a,key,or,a,regex,pattern,if,settings,filter,pattern,contains,filter,throw,new,illegal,argument,exception,filter,filter,has,already,been,registered,settings,filter,pattern,add,filter
SettingsModule -> private void registerSettingsFilter(String filter);1537806831;Registers a settings filter pattern that allows to filter out certain settings that for instance contain sensitive information_or if a setting is for internal purposes only. The given pattern must either be a valid settings key or a simple regexp pattern.;private void registerSettingsFilter(String filter) {_        if (SettingsFilter.isValidPattern(filter) == false) {_            throw new IllegalArgumentException("filter [" + filter +"] is invalid must be either a key or a regex pattern")__        }_        if (settingsFilterPattern.contains(filter)) {_            throw new IllegalArgumentException("filter [" + filter + "] has already been registered")__        }_        settingsFilterPattern.add(filter)__    };registers,a,settings,filter,pattern,that,allows,to,filter,out,certain,settings,that,for,instance,contain,sensitive,information,or,if,a,setting,is,for,internal,purposes,only,the,given,pattern,must,either,be,a,valid,settings,key,or,a,simple,regexp,pattern;private,void,register,settings,filter,string,filter,if,settings,filter,is,valid,pattern,filter,false,throw,new,illegal,argument,exception,filter,filter,is,invalid,must,be,either,a,key,or,a,regex,pattern,if,settings,filter,pattern,contains,filter,throw,new,illegal,argument,exception,filter,filter,has,already,been,registered,settings,filter,pattern,add,filter
SettingsModule -> private void registerSettingsFilter(String filter);1541092382;Registers a settings filter pattern that allows to filter out certain settings that for instance contain sensitive information_or if a setting is for internal purposes only. The given pattern must either be a valid settings key or a simple regexp pattern.;private void registerSettingsFilter(String filter) {_        if (SettingsFilter.isValidPattern(filter) == false) {_            throw new IllegalArgumentException("filter [" + filter +"] is invalid must be either a key or a regex pattern")__        }_        if (settingsFilterPattern.contains(filter)) {_            throw new IllegalArgumentException("filter [" + filter + "] has already been registered")__        }_        settingsFilterPattern.add(filter)__    };registers,a,settings,filter,pattern,that,allows,to,filter,out,certain,settings,that,for,instance,contain,sensitive,information,or,if,a,setting,is,for,internal,purposes,only,the,given,pattern,must,either,be,a,valid,settings,key,or,a,simple,regexp,pattern;private,void,register,settings,filter,string,filter,if,settings,filter,is,valid,pattern,filter,false,throw,new,illegal,argument,exception,filter,filter,is,invalid,must,be,either,a,key,or,a,regex,pattern,if,settings,filter,pattern,contains,filter,throw,new,illegal,argument,exception,filter,filter,has,already,been,registered,settings,filter,pattern,add,filter
