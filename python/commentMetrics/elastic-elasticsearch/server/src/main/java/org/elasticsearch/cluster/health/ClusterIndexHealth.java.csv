commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getIndex() {     return index. }
false;public;0;3;;public int getNumberOfShards() {     return numberOfShards. }
false;public;0;3;;public int getNumberOfReplicas() {     return numberOfReplicas. }
false;public;0;3;;public int getActiveShards() {     return activeShards. }
false;public;0;3;;public int getRelocatingShards() {     return relocatingShards. }
false;public;0;3;;public int getActivePrimaryShards() {     return activePrimaryShards. }
false;public;0;3;;public int getInitializingShards() {     return initializingShards. }
false;public;0;3;;public int getUnassignedShards() {     return unassignedShards. }
false;public;0;3;;public ClusterHealthStatus getStatus() {     return status. }
false;public;0;3;;public Map<Integer, ClusterShardHealth> getShards() {     return this.shards. }
false;public;0;4;;@Override public Iterator<ClusterShardHealth> iterator() {     return shards.values().iterator(). }
false;public;1;17;;@Override public void writeTo(final StreamOutput out) throws IOException {     out.writeString(index).     out.writeVInt(numberOfShards).     out.writeVInt(numberOfReplicas).     out.writeVInt(activePrimaryShards).     out.writeVInt(activeShards).     out.writeVInt(relocatingShards).     out.writeVInt(initializingShards).     out.writeVInt(unassignedShards).     out.writeByte(status.value()).     out.writeVInt(shards.size()).     for (ClusterShardHealth shardHealth : this) {         shardHealth.writeTo(out).     } }
false;public;2;22;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject(getIndex()).     builder.field(STATUS, getStatus().name().toLowerCase(Locale.ROOT)).     builder.field(NUMBER_OF_SHARDS, getNumberOfShards()).     builder.field(NUMBER_OF_REPLICAS, getNumberOfReplicas()).     builder.field(ACTIVE_PRIMARY_SHARDS, getActivePrimaryShards()).     builder.field(ACTIVE_SHARDS, getActiveShards()).     builder.field(RELOCATING_SHARDS, getRelocatingShards()).     builder.field(INITIALIZING_SHARDS, getInitializingShards()).     builder.field(UNASSIGNED_SHARDS, getUnassignedShards()).     if ("shards".equals(params.param("level", "indices"))) {         builder.startObject(SHARDS).         for (ClusterShardHealth shardHealth : shards.values()) {             shardHealth.toXContent(builder, params).         }         builder.endObject().     }     builder.endObject().     return builder. }
false;public,static;2;3;;public static ClusterIndexHealth innerFromXContent(XContentParser parser, String index) {     return PARSER.apply(parser, index). }
false;public,static;1;9;;public static ClusterIndexHealth fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     XContentParser.Token token = parser.nextToken().     ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation).     String index = parser.currentName().     ClusterIndexHealth parsed = innerFromXContent(parser, index).     ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation).     return parsed. }
false;public;0;15;;@Override public String toString() {     return "ClusterIndexHealth{" + "index='" + index + '\'' + ", numberOfShards=" + numberOfShards + ", numberOfReplicas=" + numberOfReplicas + ", activeShards=" + activeShards + ", relocatingShards=" + relocatingShards + ", initializingShards=" + initializingShards + ", unassignedShards=" + unassignedShards + ", activePrimaryShards=" + activePrimaryShards + ", status=" + status + ", shards.size=" + (shards == null ? "null" : shards.size()) + '}'. }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ClusterIndexHealth that = (ClusterIndexHealth) o.     return Objects.equals(index, that.index) && numberOfShards == that.numberOfShards && numberOfReplicas == that.numberOfReplicas && activeShards == that.activeShards && relocatingShards == that.relocatingShards && initializingShards == that.initializingShards && unassignedShards == that.unassignedShards && activePrimaryShards == that.activePrimaryShards && status == that.status && Objects.equals(shards, that.shards). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(index, numberOfShards, numberOfReplicas, activeShards, relocatingShards, initializingShards, unassignedShards, activePrimaryShards, status, shards). }
