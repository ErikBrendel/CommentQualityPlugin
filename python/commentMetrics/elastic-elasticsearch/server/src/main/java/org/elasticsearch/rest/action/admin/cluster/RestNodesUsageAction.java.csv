commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public RestResponse buildResponse(NodesUsageResponse response, XContentBuilder builder) throws Exception {     builder.startObject().     RestActions.buildNodesHeader(builder, channel.request(), response).     builder.field("cluster_name", response.getClusterName().value()).     response.toXContent(builder, channel.request()).     builder.endObject().     return new BytesRestResponse(RestStatus.OK, builder). }
false;protected;2;32;;@Override protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {     String[] nodesIds = Strings.splitStringByCommaToArray(request.param("nodeId")).     Set<String> metrics = Strings.tokenizeByCommaToSet(request.param("metric", "_all")).     NodesUsageRequest nodesUsageRequest = new NodesUsageRequest(nodesIds).     nodesUsageRequest.timeout(request.param("timeout")).     if (metrics.size() == 1 && metrics.contains("_all")) {         nodesUsageRequest.all().     } else if (metrics.contains("_all")) {         throw new IllegalArgumentException(String.format(Locale.ROOT, "request [%s] contains _all and individual metrics [%s]", request.path(), request.param("metric"))).     } else {         nodesUsageRequest.clear().         nodesUsageRequest.restActions(metrics.contains("rest_actions")).     }     return channel -> client.admin().cluster().nodesUsage(nodesUsageRequest, new RestBuilderListener<NodesUsageResponse>(channel) {          @Override         public RestResponse buildResponse(NodesUsageResponse response, XContentBuilder builder) throws Exception {             builder.startObject().             RestActions.buildNodesHeader(builder, channel.request(), response).             builder.field("cluster_name", response.getClusterName().value()).             response.toXContent(builder, channel.request()).             builder.endObject().             return new BytesRestResponse(RestStatus.OK, builder).         }     }). }
false;public;0;4;;@Override public String getName() {     return "nodes_usage_action". }
false;public;0;4;;@Override public boolean canTripCircuitBreaker() {     return false. }
