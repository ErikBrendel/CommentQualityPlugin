commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the name of the index that the request alias was pointing to  */ ;/**  * Returns the name of the index that the request alias was pointing to  */ public String getOldIndex() {     return oldIndex. }
true;public;0;3;/**  * Returns the name of the index that the request alias currently points to  */ ;/**  * Returns the name of the index that the request alias currently points to  */ public String getNewIndex() {     return newIndex. }
true;public;0;3;/**  * Returns the statuses of all the request conditions  */ ;/**  * Returns the statuses of all the request conditions  */ public Map<String, Boolean> getConditionStatus() {     return conditionStatus. }
true;public;0;3;/**  * Returns if the rollover execution was skipped even when conditions were met  */ ;/**  * Returns if the rollover execution was skipped even when conditions were met  */ public boolean isDryRun() {     return dryRun. }
true;public;0;3;/**  * Returns true if the rollover was not simulated and the conditions were met  */ ;/**  * Returns true if the rollover was not simulated and the conditions were met  */ public boolean isRolledOver() {     return rolledOver. }
false;public;1;28;;@Override public void readFrom(StreamInput in) throws IOException {     if (in.getVersion().onOrAfter(Version.V_6_4_0)) {         super.readFrom(in).         oldIndex = in.readString().         newIndex = in.readString().         int conditionSize = in.readVInt().         conditionStatus = new HashMap<>(conditionSize).         for (int i = 0. i < conditionSize. i++) {             conditionStatus.put(in.readString(), in.readBoolean()).         }         dryRun = in.readBoolean().         rolledOver = in.readBoolean().         readShardsAcknowledged(in).     } else {         oldIndex = in.readString().         newIndex = in.readString().         int conditionSize = in.readVInt().         conditionStatus = new HashMap<>(conditionSize).         for (int i = 0. i < conditionSize. i++) {             conditionStatus.put(in.readString(), in.readBoolean()).         }         dryRun = in.readBoolean().         rolledOver = in.readBoolean().         acknowledged = in.readBoolean().         readShardsAcknowledged(in).     } }
false;public;1;28;;@Override public void writeTo(StreamOutput out) throws IOException {     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         super.writeTo(out).         out.writeString(oldIndex).         out.writeString(newIndex).         out.writeVInt(conditionStatus.size()).         for (Map.Entry<String, Boolean> entry : conditionStatus.entrySet()) {             out.writeString(entry.getKey()).             out.writeBoolean(entry.getValue()).         }         out.writeBoolean(dryRun).         out.writeBoolean(rolledOver).         writeShardsAcknowledged(out).     } else {         out.writeString(oldIndex).         out.writeString(newIndex).         out.writeVInt(conditionStatus.size()).         for (Map.Entry<String, Boolean> entry : conditionStatus.entrySet()) {             out.writeString(entry.getKey()).             out.writeBoolean(entry.getValue()).         }         out.writeBoolean(dryRun).         out.writeBoolean(rolledOver).         out.writeBoolean(acknowledged).         writeShardsAcknowledged(out).     } }
false;protected;2;13;;@Override protected void addCustomFields(XContentBuilder builder, Params params) throws IOException {     super.addCustomFields(builder, params).     builder.field(OLD_INDEX.getPreferredName(), oldIndex).     builder.field(NEW_INDEX.getPreferredName(), newIndex).     builder.field(ROLLED_OVER.getPreferredName(), rolledOver).     builder.field(DRY_RUN.getPreferredName(), dryRun).     builder.startObject(CONDITIONS.getPreferredName()).     for (Map.Entry<String, Boolean> entry : conditionStatus.entrySet()) {         builder.field(entry.getKey(), entry.getValue()).     }     builder.endObject(). }
false;public,static;1;3;;public static RolloverResponse fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;1;12;;@Override public boolean equals(Object o) {     if (super.equals(o)) {         RolloverResponse that = (RolloverResponse) o.         return dryRun == that.dryRun && rolledOver == that.rolledOver && Objects.equals(oldIndex, that.oldIndex) && Objects.equals(newIndex, that.newIndex) && Objects.equals(conditionStatus, that.conditionStatus).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), oldIndex, newIndex, conditionStatus, dryRun, rolledOver). }
