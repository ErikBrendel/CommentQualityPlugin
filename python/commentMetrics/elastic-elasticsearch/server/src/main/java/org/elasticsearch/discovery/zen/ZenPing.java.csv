commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;void start().
false;;2;1;;void ping(Consumer<PingCollection> resultsConsumer, TimeValue timeout).
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     clusterName.writeTo(out).     node.writeTo(out).     out.writeOptionalWriteable(master).     out.writeLong(clusterStateVersion).     out.writeLong(id). }
true;public;0;3;/**  * an always increasing unique identifier for this ping response.  * lower values means older pings.  */ ;/**  * an always increasing unique identifier for this ping response.  * lower values means older pings.  */ public long id() {     return this.id. }
true;public;0;3;/**  * the name of the cluster this node belongs to  */ ;/**  * the name of the cluster this node belongs to  */ public ClusterName clusterName() {     return this.clusterName. }
true;public;0;3;/**  * the node which this ping describes  */ ;/**  * the node which this ping describes  */ public DiscoveryNode node() {     return node. }
true;public;0;3;/**  * the current master of the node  */ ;/**  * the current master of the node  */ public DiscoveryNode master() {     return master. }
true;public;0;3;/**  * the current cluster state version of that node ({@link ElectMasterService.MasterCandidate#UNRECOVERED_CLUSTER_VERSION}  * for not recovered)  */ ;/**  * the current cluster state version of that node ({@link ElectMasterService.MasterCandidate#UNRECOVERED_CLUSTER_VERSION}  * for not recovered)  */ public long getClusterStateVersion() {     return clusterStateVersion. }
false;public;0;5;;@Override public String toString() {     return "ping_response{node [" + node + "], id[" + id + "], master [" + master + "]," + "cluster_state_version [" + clusterStateVersion + "], cluster_name[" + clusterName.value() + "]}". }
true;public,synchronized;1;10;/**  * adds a ping if newer than previous pings from the same node  *  * @return true if added, false o.w.  */ ;/**  * adds a ping if newer than previous pings from the same node  *  * @return true if added, false o.w.  */ public synchronized boolean addPing(PingResponse ping) {     PingResponse existingResponse = pings.get(ping.node()).     // from nodes from version <1.4.0) we prefer to use the last added one.     if (existingResponse == null || existingResponse.id() <= ping.id()) {         pings.put(ping.node(), ping).         return true.     }     return false. }
true;public,synchronized;0;3;/**  * serialize current pings to a list. It is guaranteed that the list contains one ping response per node  */ ;/**  * serialize current pings to a list. It is guaranteed that the list contains one ping response per node  */ public synchronized List<PingResponse> toList() {     return new ArrayList<>(pings.values()). }
true;public,synchronized;0;3;/**  * the number of nodes for which there are known pings  */ ;/**  * the number of nodes for which there are known pings  */ public synchronized int size() {     return pings.size(). }
