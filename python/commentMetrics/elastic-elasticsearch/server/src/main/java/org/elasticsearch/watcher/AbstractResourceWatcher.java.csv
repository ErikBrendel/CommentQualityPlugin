commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void init() throws IOException {     if (!initialized) {         doInit().         initialized = true.     } }
false;public;0;5;;@Override public void checkAndNotify() throws IOException {     init().     doCheckAndNotify(). }
true;public;1;3;/**  * Registers new listener  */ ;/**  * Registers new listener  */ public void addListener(Listener listener) {     listeners.add(listener). }
true;public;1;3;/**  * Unregisters a listener  */ ;/**  * Unregisters a listener  */ public void remove(Listener listener) {     listeners.remove(listener). }
true;protected;0;3;/**  * Returns a list of listeners  */ ;/**  * Returns a list of listeners  */ protected List<Listener> listeners() {     return listeners. }
true;protected,abstract;0;1;/**  * Will be called once on initialization  */ ;/**  * Will be called once on initialization  */ protected abstract void doInit() throws IOException.
true;protected,abstract;0;1;/**  * Will be called periodically  * <p>  * Implementing watcher should check resource and notify all {@link #listeners()}.  */ ;/**  * Will be called periodically  * <p>  * Implementing watcher should check resource and notify all {@link #listeners()}.  */ protected abstract void doCheckAndNotify() throws IOException.
