commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;5;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ ;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ @SuppressWarnings("unchecked") public final Request timeout(TimeValue timeout) {     this.timeout = timeout.     return (Request) this. }
true;public,final;1;3;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ ;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ public final Request timeout(String timeout) {     return timeout(TimeValue.parseTimeValue(timeout, null, getClass().getSimpleName() + ".timeout")). }
false;public;0;3;;public TimeValue timeout() {     return timeout. }
false;public;0;3;;public String index() {     return this.index. }
false;public,final;1;5;;@SuppressWarnings("unchecked") public final Request index(String index) {     this.index = index.     return (Request) this. }
false;public;0;4;;@Override public String[] indices() {     return new String[] { index }. }
false;public;0;4;;@Override public IndicesOptions indicesOptions() {     return IndicesOptions.strictSingleIndexNoExpandForbidClosed(). }
false;public;0;3;;public ActiveShardCount waitForActiveShards() {     return this.waitForActiveShards. }
true;public;0;4;/**  * @return the shardId of the shard where this operation should be executed on.  * can be null if the shardID has not yet been resolved  */ ;/**  * @return the shardId of the shard where this operation should be executed on.  * can be null if the shardID has not yet been resolved  */ @Nullable public ShardId shardId() {     return shardId. }
true;public,final;1;5;/**  * Sets the number of shard copies that must be active before proceeding with the replication  * operation. Defaults to {@link ActiveShardCount#DEFAULT}, which requires one shard copy  * (the primary) to be active. Set this value to {@link ActiveShardCount#ALL} to  * wait for all shards (primary and all replicas) to be active. Otherwise, use  * {@link ActiveShardCount#from(int)} to set this value to any non-negative integer, up to the  * total number of shard copies (number of replicas + 1).  */ ;/**  * Sets the number of shard copies that must be active before proceeding with the replication  * operation. Defaults to {@link ActiveShardCount#DEFAULT}, which requires one shard copy  * (the primary) to be active. Set this value to {@link ActiveShardCount#ALL} to  * wait for all shards (primary and all replicas) to be active. Otherwise, use  * {@link ActiveShardCount#from(int)} to set this value to any non-negative integer, up to the  * total number of shard copies (number of replicas + 1).  */ @SuppressWarnings("unchecked") public final Request waitForActiveShards(ActiveShardCount waitForActiveShards) {     this.waitForActiveShards = waitForActiveShards.     return (Request) this. }
true;public,final;1;3;/**  * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ ;/**  * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ public final Request waitForActiveShards(final int waitForActiveShards) {     return waitForActiveShards(ActiveShardCount.from(waitForActiveShards)). }
true;;1;5;/**  * Sets the minimum version of the cluster state that is required on the next node before we redirect to another primary.  * Used to prevent redirect loops, see also {@link TransportReplicationAction.ReroutePhase#doRun()}  */ ;/**  * Sets the minimum version of the cluster state that is required on the next node before we redirect to another primary.  * Used to prevent redirect loops, see also {@link TransportReplicationAction.ReroutePhase#doRun()}  */ @SuppressWarnings("unchecked") Request routedBasedOnClusterVersion(long routedBasedOnClusterVersion) {     this.routedBasedOnClusterVersion = routedBasedOnClusterVersion.     return (Request) this. }
false;;0;3;;long routedBasedOnClusterVersion() {     return routedBasedOnClusterVersion. }
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (index == null) {         validationException = addValidationError("index is missing", validationException).     }     return validationException. }
false;public;1;13;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.readBoolean()) {         shardId = ShardId.readShardId(in).     } else {         shardId = null.     }     waitForActiveShards = ActiveShardCount.readFrom(in).     timeout = in.readTimeValue().     index = in.readString().     routedBasedOnClusterVersion = in.readVLong(). }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (shardId != null) {         out.writeBoolean(true).         shardId.writeTo(out).     } else {         out.writeBoolean(false).     }     waitForActiveShards.writeTo(out).     out.writeTimeValue(timeout).     out.writeString(index).     out.writeVLong(routedBasedOnClusterVersion). }
false;public;5;4;;@Override public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {     return new ReplicationTask(id, type, action, getDescription(), parentTaskId, headers). }
true;public;1;5;/**  * Sets the target shard id for the request. The shard id is set when a  * index/delete request is resolved by the transport action  */ ;/**  * Sets the target shard id for the request. The shard id is set when a  * index/delete request is resolved by the transport action  */ @SuppressWarnings("unchecked") public Request setShardId(ShardId shardId) {     this.shardId = shardId.     return (Request) this. }
false;public,abstract;0;2;;@Override public abstract String toString().
false;public;0;4;;@Override public String getDescription() {     return toString(). }
true;public;0;3;/**  * This method is called before this replication request is retried  * the first time.  */ ;/**  * This method is called before this replication request is retried  * the first time.  */ public void onRetry() { // nothing by default }
