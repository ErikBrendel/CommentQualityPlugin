commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getActiveShards() {     return activeShards. }
false;public;0;3;;public int getRelocatingShards() {     return relocatingShards. }
false;public;0;3;;public int getActivePrimaryShards() {     return activePrimaryShards. }
false;public;0;3;;public int getInitializingShards() {     return initializingShards. }
false;public;0;3;;public int getUnassignedShards() {     return unassignedShards. }
false;public;0;3;;public int getNumberOfNodes() {     return this.numberOfNodes. }
false;public;0;3;;public int getNumberOfDataNodes() {     return this.numberOfDataNodes. }
false;public;0;3;;public ClusterHealthStatus getStatus() {     return status. }
false;public;0;3;;public Map<String, ClusterIndexHealth> getIndices() {     return Collections.unmodifiableMap(indices). }
false;public;0;3;;public double getActiveShardsPercent() {     return activeShardsPercent. }
false;public;0;4;;@Override public Iterator<ClusterIndexHealth> iterator() {     return indices.values().iterator(). }
false;public;1;16;;@Override public void writeTo(final StreamOutput out) throws IOException {     out.writeVInt(activePrimaryShards).     out.writeVInt(activeShards).     out.writeVInt(relocatingShards).     out.writeVInt(initializingShards).     out.writeVInt(unassignedShards).     out.writeVInt(numberOfNodes).     out.writeVInt(numberOfDataNodes).     out.writeByte(status.value()).     out.writeVInt(indices.size()).     for (ClusterIndexHealth indexHealth : this) {         indexHealth.writeTo(out).     }     out.writeDouble(activeShardsPercent). }
false;public;0;15;;@Override public String toString() {     return "ClusterStateHealth{" + "numberOfNodes=" + numberOfNodes + ", numberOfDataNodes=" + numberOfDataNodes + ", activeShards=" + activeShards + ", relocatingShards=" + relocatingShards + ", activePrimaryShards=" + activePrimaryShards + ", initializingShards=" + initializingShards + ", unassignedShards=" + unassignedShards + ", activeShardsPercent=" + activeShardsPercent + ", status=" + status + ", indices.size=" + (indices == null ? "null" : indices.size()) + '}'. }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ClusterStateHealth that = (ClusterStateHealth) o.     return numberOfNodes == that.numberOfNodes && numberOfDataNodes == that.numberOfDataNodes && activeShards == that.activeShards && relocatingShards == that.relocatingShards && activePrimaryShards == that.activePrimaryShards && initializingShards == that.initializingShards && unassignedShards == that.unassignedShards && Double.compare(that.activeShardsPercent, activeShardsPercent) == 0 && status == that.status && Objects.equals(indices, that.indices). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(numberOfNodes, numberOfDataNodes, activeShards, relocatingShards, activePrimaryShards, initializingShards, unassignedShards, activeShardsPercent, status, indices). }
