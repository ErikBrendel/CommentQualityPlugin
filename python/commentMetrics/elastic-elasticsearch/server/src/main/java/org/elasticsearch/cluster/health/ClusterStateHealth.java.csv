# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterStateHealth -> public ClusterStateHealth(final ClusterState clusterState, final String[] concreteIndices);1524684173;Creates a new <code>ClusterStateHealth</code> instance considering the current cluster state and the provided index names.__@param clusterState    The current cluster state. Must not be null._@param concreteIndices An array of index names to consider. Must not be null but may be empty.;public ClusterStateHealth(final ClusterState clusterState, final String[] concreteIndices) {_        numberOfNodes = clusterState.nodes().getSize()__        numberOfDataNodes = clusterState.nodes().getDataNodes().size()___        for (String index : concreteIndices) {_            IndexRoutingTable indexRoutingTable = clusterState.routingTable().index(index)__            IndexMetaData indexMetaData = clusterState.metaData().index(index)__            if (indexRoutingTable == null) {_                continue__            }__            ClusterIndexHealth indexHealth = new ClusterIndexHealth(indexMetaData, indexRoutingTable)___            indices.put(indexHealth.getIndex(), indexHealth)__        }__        ClusterHealthStatus computeStatus = ClusterHealthStatus.GREEN__        int computeActivePrimaryShards = 0__        int computeActiveShards = 0__        int computeRelocatingShards = 0__        int computeInitializingShards = 0__        int computeUnassignedShards = 0___        for (ClusterIndexHealth indexHealth : indices.values()) {_            computeActivePrimaryShards += indexHealth.getActivePrimaryShards()__            computeActiveShards += indexHealth.getActiveShards()__            computeRelocatingShards += indexHealth.getRelocatingShards()__            computeInitializingShards += indexHealth.getInitializingShards()__            computeUnassignedShards += indexHealth.getUnassignedShards()__            if (indexHealth.getStatus() == ClusterHealthStatus.RED) {_                computeStatus = ClusterHealthStatus.RED__            } else if (indexHealth.getStatus() == ClusterHealthStatus.YELLOW && computeStatus != ClusterHealthStatus.RED) {_                computeStatus = ClusterHealthStatus.YELLOW__            }_        }__        if (clusterState.blocks().hasGlobalBlock(RestStatus.SERVICE_UNAVAILABLE)) {_            computeStatus = ClusterHealthStatus.RED__        }__        this.status = computeStatus__        this.activePrimaryShards = computeActivePrimaryShards__        this.activeShards = computeActiveShards__        this.relocatingShards = computeRelocatingShards__        this.initializingShards = computeInitializingShards__        this.unassignedShards = computeUnassignedShards___        _        if (computeStatus.equals(ClusterHealthStatus.GREEN)) {_            this.activeShardsPercent = 100__        } else {_            List<ShardRouting> shardRoutings = clusterState.getRoutingTable().allShards()__            int activeShardCount = 0__            int totalShardCount = 0__            for (ShardRouting shardRouting : shardRoutings) {_                if (shardRouting.active()) activeShardCount++__                totalShardCount++__            }_            this.activeShardsPercent = (((double) activeShardCount) / totalShardCount) * 100__        }_    };creates,a,new,code,cluster,state,health,code,instance,considering,the,current,cluster,state,and,the,provided,index,names,param,cluster,state,the,current,cluster,state,must,not,be,null,param,concrete,indices,an,array,of,index,names,to,consider,must,not,be,null,but,may,be,empty;public,cluster,state,health,final,cluster,state,cluster,state,final,string,concrete,indices,number,of,nodes,cluster,state,nodes,get,size,number,of,data,nodes,cluster,state,nodes,get,data,nodes,size,for,string,index,concrete,indices,index,routing,table,index,routing,table,cluster,state,routing,table,index,index,index,meta,data,index,meta,data,cluster,state,meta,data,index,index,if,index,routing,table,null,continue,cluster,index,health,index,health,new,cluster,index,health,index,meta,data,index,routing,table,indices,put,index,health,get,index,index,health,cluster,health,status,compute,status,cluster,health,status,green,int,compute,active,primary,shards,0,int,compute,active,shards,0,int,compute,relocating,shards,0,int,compute,initializing,shards,0,int,compute,unassigned,shards,0,for,cluster,index,health,index,health,indices,values,compute,active,primary,shards,index,health,get,active,primary,shards,compute,active,shards,index,health,get,active,shards,compute,relocating,shards,index,health,get,relocating,shards,compute,initializing,shards,index,health,get,initializing,shards,compute,unassigned,shards,index,health,get,unassigned,shards,if,index,health,get,status,cluster,health,status,red,compute,status,cluster,health,status,red,else,if,index,health,get,status,cluster,health,status,yellow,compute,status,cluster,health,status,red,compute,status,cluster,health,status,yellow,if,cluster,state,blocks,has,global,block,rest,status,compute,status,cluster,health,status,red,this,status,compute,status,this,active,primary,shards,compute,active,primary,shards,this,active,shards,compute,active,shards,this,relocating,shards,compute,relocating,shards,this,initializing,shards,compute,initializing,shards,this,unassigned,shards,compute,unassigned,shards,if,compute,status,equals,cluster,health,status,green,this,active,shards,percent,100,else,list,shard,routing,shard,routings,cluster,state,get,routing,table,all,shards,int,active,shard,count,0,int,total,shard,count,0,for,shard,routing,shard,routing,shard,routings,if,shard,routing,active,active,shard,count,total,shard,count,this,active,shards,percent,double,active,shard,count,total,shard,count,100
ClusterStateHealth -> public ClusterStateHealth(final ClusterState clusterState, final String[] concreteIndices);1528804324;Creates a new <code>ClusterStateHealth</code> instance considering the current cluster state and the provided index names.__@param clusterState    The current cluster state. Must not be null._@param concreteIndices An array of index names to consider. Must not be null but may be empty.;public ClusterStateHealth(final ClusterState clusterState, final String[] concreteIndices) {_        numberOfNodes = clusterState.nodes().getSize()__        numberOfDataNodes = clusterState.nodes().getDataNodes().size()__        indices = new HashMap<>()__        for (String index : concreteIndices) {_            IndexRoutingTable indexRoutingTable = clusterState.routingTable().index(index)__            IndexMetaData indexMetaData = clusterState.metaData().index(index)__            if (indexRoutingTable == null) {_                continue__            }__            ClusterIndexHealth indexHealth = new ClusterIndexHealth(indexMetaData, indexRoutingTable)___            indices.put(indexHealth.getIndex(), indexHealth)__        }__        ClusterHealthStatus computeStatus = ClusterHealthStatus.GREEN__        int computeActivePrimaryShards = 0__        int computeActiveShards = 0__        int computeRelocatingShards = 0__        int computeInitializingShards = 0__        int computeUnassignedShards = 0___        for (ClusterIndexHealth indexHealth : indices.values()) {_            computeActivePrimaryShards += indexHealth.getActivePrimaryShards()__            computeActiveShards += indexHealth.getActiveShards()__            computeRelocatingShards += indexHealth.getRelocatingShards()__            computeInitializingShards += indexHealth.getInitializingShards()__            computeUnassignedShards += indexHealth.getUnassignedShards()__            if (indexHealth.getStatus() == ClusterHealthStatus.RED) {_                computeStatus = ClusterHealthStatus.RED__            } else if (indexHealth.getStatus() == ClusterHealthStatus.YELLOW && computeStatus != ClusterHealthStatus.RED) {_                computeStatus = ClusterHealthStatus.YELLOW__            }_        }__        if (clusterState.blocks().hasGlobalBlock(RestStatus.SERVICE_UNAVAILABLE)) {_            computeStatus = ClusterHealthStatus.RED__        }__        this.status = computeStatus__        this.activePrimaryShards = computeActivePrimaryShards__        this.activeShards = computeActiveShards__        this.relocatingShards = computeRelocatingShards__        this.initializingShards = computeInitializingShards__        this.unassignedShards = computeUnassignedShards___        _        if (computeStatus.equals(ClusterHealthStatus.GREEN)) {_            this.activeShardsPercent = 100__        } else {_            List<ShardRouting> shardRoutings = clusterState.getRoutingTable().allShards()__            int activeShardCount = 0__            int totalShardCount = 0__            for (ShardRouting shardRouting : shardRoutings) {_                if (shardRouting.active()) activeShardCount++__                totalShardCount++__            }_            this.activeShardsPercent = (((double) activeShardCount) / totalShardCount) * 100__        }_    };creates,a,new,code,cluster,state,health,code,instance,considering,the,current,cluster,state,and,the,provided,index,names,param,cluster,state,the,current,cluster,state,must,not,be,null,param,concrete,indices,an,array,of,index,names,to,consider,must,not,be,null,but,may,be,empty;public,cluster,state,health,final,cluster,state,cluster,state,final,string,concrete,indices,number,of,nodes,cluster,state,nodes,get,size,number,of,data,nodes,cluster,state,nodes,get,data,nodes,size,indices,new,hash,map,for,string,index,concrete,indices,index,routing,table,index,routing,table,cluster,state,routing,table,index,index,index,meta,data,index,meta,data,cluster,state,meta,data,index,index,if,index,routing,table,null,continue,cluster,index,health,index,health,new,cluster,index,health,index,meta,data,index,routing,table,indices,put,index,health,get,index,index,health,cluster,health,status,compute,status,cluster,health,status,green,int,compute,active,primary,shards,0,int,compute,active,shards,0,int,compute,relocating,shards,0,int,compute,initializing,shards,0,int,compute,unassigned,shards,0,for,cluster,index,health,index,health,indices,values,compute,active,primary,shards,index,health,get,active,primary,shards,compute,active,shards,index,health,get,active,shards,compute,relocating,shards,index,health,get,relocating,shards,compute,initializing,shards,index,health,get,initializing,shards,compute,unassigned,shards,index,health,get,unassigned,shards,if,index,health,get,status,cluster,health,status,red,compute,status,cluster,health,status,red,else,if,index,health,get,status,cluster,health,status,yellow,compute,status,cluster,health,status,red,compute,status,cluster,health,status,yellow,if,cluster,state,blocks,has,global,block,rest,status,compute,status,cluster,health,status,red,this,status,compute,status,this,active,primary,shards,compute,active,primary,shards,this,active,shards,compute,active,shards,this,relocating,shards,compute,relocating,shards,this,initializing,shards,compute,initializing,shards,this,unassigned,shards,compute,unassigned,shards,if,compute,status,equals,cluster,health,status,green,this,active,shards,percent,100,else,list,shard,routing,shard,routings,cluster,state,get,routing,table,all,shards,int,active,shard,count,0,int,total,shard,count,0,for,shard,routing,shard,routing,shard,routings,if,shard,routing,active,active,shard,count,total,shard,count,this,active,shards,percent,double,active,shard,count,total,shard,count,100
ClusterStateHealth -> public ClusterStateHealth(final ClusterState clusterState, final String[] concreteIndices);1546850547;Creates a new <code>ClusterStateHealth</code> instance considering the current cluster state and the provided index names.__@param clusterState    The current cluster state. Must not be null._@param concreteIndices An array of index names to consider. Must not be null but may be empty.;public ClusterStateHealth(final ClusterState clusterState, final String[] concreteIndices) {_        numberOfNodes = clusterState.nodes().getSize()__        numberOfDataNodes = clusterState.nodes().getDataNodes().size()__        indices = new HashMap<>()__        for (String index : concreteIndices) {_            IndexRoutingTable indexRoutingTable = clusterState.routingTable().index(index)__            IndexMetaData indexMetaData = clusterState.metaData().index(index)__            if (indexRoutingTable == null) {_                continue__            }__            ClusterIndexHealth indexHealth = new ClusterIndexHealth(indexMetaData, indexRoutingTable)___            indices.put(indexHealth.getIndex(), indexHealth)__        }__        ClusterHealthStatus computeStatus = ClusterHealthStatus.GREEN__        int computeActivePrimaryShards = 0__        int computeActiveShards = 0__        int computeRelocatingShards = 0__        int computeInitializingShards = 0__        int computeUnassignedShards = 0___        for (ClusterIndexHealth indexHealth : indices.values()) {_            computeActivePrimaryShards += indexHealth.getActivePrimaryShards()__            computeActiveShards += indexHealth.getActiveShards()__            computeRelocatingShards += indexHealth.getRelocatingShards()__            computeInitializingShards += indexHealth.getInitializingShards()__            computeUnassignedShards += indexHealth.getUnassignedShards()__            if (indexHealth.getStatus() == ClusterHealthStatus.RED) {_                computeStatus = ClusterHealthStatus.RED__            } else if (indexHealth.getStatus() == ClusterHealthStatus.YELLOW && computeStatus != ClusterHealthStatus.RED) {_                computeStatus = ClusterHealthStatus.YELLOW__            }_        }__        if (clusterState.blocks().hasGlobalBlockWithStatus(RestStatus.SERVICE_UNAVAILABLE)) {_            computeStatus = ClusterHealthStatus.RED__        }__        this.status = computeStatus__        this.activePrimaryShards = computeActivePrimaryShards__        this.activeShards = computeActiveShards__        this.relocatingShards = computeRelocatingShards__        this.initializingShards = computeInitializingShards__        this.unassignedShards = computeUnassignedShards___        _        if (computeStatus.equals(ClusterHealthStatus.GREEN)) {_            this.activeShardsPercent = 100__        } else {_            List<ShardRouting> shardRoutings = clusterState.getRoutingTable().allShards()__            int activeShardCount = 0__            int totalShardCount = 0__            for (ShardRouting shardRouting : shardRoutings) {_                if (shardRouting.active()) activeShardCount++__                totalShardCount++__            }_            this.activeShardsPercent = (((double) activeShardCount) / totalShardCount) * 100__        }_    };creates,a,new,code,cluster,state,health,code,instance,considering,the,current,cluster,state,and,the,provided,index,names,param,cluster,state,the,current,cluster,state,must,not,be,null,param,concrete,indices,an,array,of,index,names,to,consider,must,not,be,null,but,may,be,empty;public,cluster,state,health,final,cluster,state,cluster,state,final,string,concrete,indices,number,of,nodes,cluster,state,nodes,get,size,number,of,data,nodes,cluster,state,nodes,get,data,nodes,size,indices,new,hash,map,for,string,index,concrete,indices,index,routing,table,index,routing,table,cluster,state,routing,table,index,index,index,meta,data,index,meta,data,cluster,state,meta,data,index,index,if,index,routing,table,null,continue,cluster,index,health,index,health,new,cluster,index,health,index,meta,data,index,routing,table,indices,put,index,health,get,index,index,health,cluster,health,status,compute,status,cluster,health,status,green,int,compute,active,primary,shards,0,int,compute,active,shards,0,int,compute,relocating,shards,0,int,compute,initializing,shards,0,int,compute,unassigned,shards,0,for,cluster,index,health,index,health,indices,values,compute,active,primary,shards,index,health,get,active,primary,shards,compute,active,shards,index,health,get,active,shards,compute,relocating,shards,index,health,get,relocating,shards,compute,initializing,shards,index,health,get,initializing,shards,compute,unassigned,shards,index,health,get,unassigned,shards,if,index,health,get,status,cluster,health,status,red,compute,status,cluster,health,status,red,else,if,index,health,get,status,cluster,health,status,yellow,compute,status,cluster,health,status,red,compute,status,cluster,health,status,yellow,if,cluster,state,blocks,has,global,block,with,status,rest,status,compute,status,cluster,health,status,red,this,status,compute,status,this,active,primary,shards,compute,active,primary,shards,this,active,shards,compute,active,shards,this,relocating,shards,compute,relocating,shards,this,initializing,shards,compute,initializing,shards,this,unassigned,shards,compute,unassigned,shards,if,compute,status,equals,cluster,health,status,green,this,active,shards,percent,100,else,list,shard,routing,shard,routings,cluster,state,get,routing,table,all,shards,int,active,shard,count,0,int,total,shard,count,0,for,shard,routing,shard,routing,shard,routings,if,shard,routing,active,active,shard,count,total,shard,count,this,active,shards,percent,double,active,shard,count,total,shard,count,100
ClusterStateHealth -> public ClusterStateHealth(int activePrimaryShards, int activeShards, int relocatingShards, int initializingShards, int unassignedShards,             int numberOfNodes, int numberOfDataNodes, double activeShardsPercent, ClusterHealthStatus status,         Map<String, ClusterIndexHealth> indices);1528804324;For ClusterHealthResponse's XContent Parser;public ClusterStateHealth(int activePrimaryShards, int activeShards, int relocatingShards, int initializingShards, int unassignedShards,_            int numberOfNodes, int numberOfDataNodes, double activeShardsPercent, ClusterHealthStatus status,_        Map<String, ClusterIndexHealth> indices) {_        this.activePrimaryShards = activePrimaryShards__        this.activeShards = activeShards__        this.relocatingShards = relocatingShards__        this.initializingShards = initializingShards__        this.unassignedShards = unassignedShards__        this.numberOfNodes = numberOfNodes__        this.numberOfDataNodes = numberOfDataNodes__        this.activeShardsPercent = activeShardsPercent__        this.status = status__        this.indices = indices__    };for,cluster,health,response,s,xcontent,parser;public,cluster,state,health,int,active,primary,shards,int,active,shards,int,relocating,shards,int,initializing,shards,int,unassigned,shards,int,number,of,nodes,int,number,of,data,nodes,double,active,shards,percent,cluster,health,status,status,map,string,cluster,index,health,indices,this,active,primary,shards,active,primary,shards,this,active,shards,active,shards,this,relocating,shards,relocating,shards,this,initializing,shards,initializing,shards,this,unassigned,shards,unassigned,shards,this,number,of,nodes,number,of,nodes,this,number,of,data,nodes,number,of,data,nodes,this,active,shards,percent,active,shards,percent,this,status,status,this,indices,indices
ClusterStateHealth -> public ClusterStateHealth(int activePrimaryShards, int activeShards, int relocatingShards, int initializingShards, int unassignedShards,             int numberOfNodes, int numberOfDataNodes, double activeShardsPercent, ClusterHealthStatus status,         Map<String, ClusterIndexHealth> indices);1546850547;For ClusterHealthResponse's XContent Parser;public ClusterStateHealth(int activePrimaryShards, int activeShards, int relocatingShards, int initializingShards, int unassignedShards,_            int numberOfNodes, int numberOfDataNodes, double activeShardsPercent, ClusterHealthStatus status,_        Map<String, ClusterIndexHealth> indices) {_        this.activePrimaryShards = activePrimaryShards__        this.activeShards = activeShards__        this.relocatingShards = relocatingShards__        this.initializingShards = initializingShards__        this.unassignedShards = unassignedShards__        this.numberOfNodes = numberOfNodes__        this.numberOfDataNodes = numberOfDataNodes__        this.activeShardsPercent = activeShardsPercent__        this.status = status__        this.indices = indices__    };for,cluster,health,response,s,xcontent,parser;public,cluster,state,health,int,active,primary,shards,int,active,shards,int,relocating,shards,int,initializing,shards,int,unassigned,shards,int,number,of,nodes,int,number,of,data,nodes,double,active,shards,percent,cluster,health,status,status,map,string,cluster,index,health,indices,this,active,primary,shards,active,primary,shards,this,active,shards,active,shards,this,relocating,shards,relocating,shards,this,initializing,shards,initializing,shards,this,unassigned,shards,unassigned,shards,this,number,of,nodes,number,of,nodes,this,number,of,data,nodes,number,of,data,nodes,this,active,shards,percent,active,shards,percent,this,status,status,this,indices,indices
ClusterStateHealth -> public ClusterStateHealth(final ClusterState clusterState);1524684173;Creates a new <code>ClusterStateHealth</code> instance considering the current cluster state and all indices in the cluster.__@param clusterState The current cluster state. Must not be null.;public ClusterStateHealth(final ClusterState clusterState) {_        this(clusterState, clusterState.metaData().getConcreteAllIndices())__    };creates,a,new,code,cluster,state,health,code,instance,considering,the,current,cluster,state,and,all,indices,in,the,cluster,param,cluster,state,the,current,cluster,state,must,not,be,null;public,cluster,state,health,final,cluster,state,cluster,state,this,cluster,state,cluster,state,meta,data,get,concrete,all,indices
ClusterStateHealth -> public ClusterStateHealth(final ClusterState clusterState);1528804324;Creates a new <code>ClusterStateHealth</code> instance considering the current cluster state and all indices in the cluster.__@param clusterState The current cluster state. Must not be null.;public ClusterStateHealth(final ClusterState clusterState) {_        this(clusterState, clusterState.metaData().getConcreteAllIndices())__    };creates,a,new,code,cluster,state,health,code,instance,considering,the,current,cluster,state,and,all,indices,in,the,cluster,param,cluster,state,the,current,cluster,state,must,not,be,null;public,cluster,state,health,final,cluster,state,cluster,state,this,cluster,state,cluster,state,meta,data,get,concrete,all,indices
ClusterStateHealth -> public ClusterStateHealth(final ClusterState clusterState);1546850547;Creates a new <code>ClusterStateHealth</code> instance considering the current cluster state and all indices in the cluster.__@param clusterState The current cluster state. Must not be null.;public ClusterStateHealth(final ClusterState clusterState) {_        this(clusterState, clusterState.metaData().getConcreteAllIndices())__    };creates,a,new,code,cluster,state,health,code,instance,considering,the,current,cluster,state,and,all,indices,in,the,cluster,param,cluster,state,the,current,cluster,state,must,not,be,null;public,cluster,state,health,final,cluster,state,cluster,state,this,cluster,state,cluster,state,meta,data,get,concrete,all,indices
