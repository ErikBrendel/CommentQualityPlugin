commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public DeferringBucketCollector getDeferringCollector() {     bdd = new DiverseDocsDeferringCollector().     return bdd. }
false;protected;1;4;;@Override protected TopDocsCollector<ScoreDocKey> createTopDocsCollector(int size) {     return new ValuesDiversifiedTopDocsCollector(size, maxDocsPerValue). }
false;public;1;4;;@Override public boolean advanceExact(int target) throws IOException {     return singleValues.advanceExact(target). }
false;public;0;4;;@Override public int docID() {     return singleValues.docID(). }
false;public;0;4;;@Override public long longValue() throws IOException {     return singleValues.ordValue(). }
false;public;1;15;;@Override public boolean advanceExact(int target) throws IOException {     if (globalOrds.advanceExact(target)) {         value = globalOrds.nextOrd().         // document         if (globalOrds.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {             throw new IllegalArgumentException("Sample diversifying key must be a single valued-field").         }         return true.     } else {         return false.     } }
false;public;0;4;;@Override public int docID() {     return globalOrds.docID(). }
false;public;0;4;;@Override public long longValue() throws IOException {     return value. }
false;protected;1;55;;@Override protected NumericDocValues getKeys(LeafReaderContext context) {     final SortedSetDocValues globalOrds = valuesSource.globalOrdinalsValues(context).     final SortedDocValues singleValues = DocValues.unwrapSingleton(globalOrds).     if (singleValues != null) {         return new AbstractNumericDocValues() {              @Override             public boolean advanceExact(int target) throws IOException {                 return singleValues.advanceExact(target).             }              @Override             public int docID() {                 return singleValues.docID().             }              @Override             public long longValue() throws IOException {                 return singleValues.ordValue().             }         }.     }     return new AbstractNumericDocValues() {          long value.          @Override         public boolean advanceExact(int target) throws IOException {             if (globalOrds.advanceExact(target)) {                 value = globalOrds.nextOrd().                 // document                 if (globalOrds.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {                     throw new IllegalArgumentException("Sample diversifying key must be a single valued-field").                 }                 return true.             } else {                 return false.             }         }          @Override         public int docID() {             return globalOrds.docID().         }          @Override         public long longValue() throws IOException {             return value.         }     }. }
