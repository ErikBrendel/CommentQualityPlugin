# id;timestamp;commentText;codeText;commentWords;codeWords
StreamOutput -> public void setVersion(Version version);1524684173;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1526449283;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1527878678;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1532456624;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1537202470;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1544786574;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1547519308;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1548236405;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1548265937;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1548420339;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1548943934;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void setVersion(Version version);1549336917;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamOutput -> public void writeVLong(long i) throws IOException;1524684173;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1526449283;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1527878678;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1532456624;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1537202470;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1544786574;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1547519308;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1548236405;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1548265937;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1548420339;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1548943934;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void writeVLong(long i) throws IOException;1549336917;Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative_numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for_negative numbers.;public void writeVLong(long i) throws IOException {_        if (i < 0) {_            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]")__        }_        writeVLongNoCheck(i)__    };writes,a,non,negative,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,use,ten,bytes,and,trip,assertions,if,running,in,tests,so,prefer,link,write,long,long,or,link,write,zlong,long,for,negative,numbers;public,void,write,vlong,long,i,throws,ioexception,if,i,0,throw,new,illegal,state,exception,negative,longs,unsupported,use,write,long,or,write,zlong,for,negative,numbers,i,write,vlong,no,check,i
StreamOutput -> public void setFeatures(final Set<String> features);1527878678;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1532456624;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1537202470;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1544786574;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1547519308;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1548236405;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1548265937;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1548420339;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1548943934;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void setFeatures(final Set<String> features);1549336917;Set the features on the stream. See {@link StreamOutput#hasFeature(String)}.__@param features the features on the stream;public void setFeatures(final Set<String> features) {_        assert this.features.isEmpty() : this.features__        this.features = Collections.unmodifiableSet(new HashSet<>(features))__    };set,the,features,on,the,stream,see,link,stream,output,has,feature,string,param,features,the,features,on,the,stream;public,void,set,features,final,set,string,features,assert,this,features,is,empty,this,features,this,features,collections,unmodifiable,set,new,hash,set,features
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1524684173;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1526449283;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1527878678;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1532456624;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1537202470;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1544786574;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1547519308;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1548236405;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1548265937;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1548420339;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1548943934;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public void writeGenericValue(@Nullable Object value) throws IOException;1549336917;Notice: when serialization a map, the stream out map with the stream in map maybe have the_different key-value orders, they will maybe have different stream order._If want to keep stream out map and stream in map have the same stream order when stream,_can use {@code writeMapWithConsistentOrder};public void writeGenericValue(@Nullable Object value) throws IOException {_        if (value == null) {_            writeByte((byte) -1)__            return__        }_        final Class type__        if (value instanceof List) {_            type = List.class__        } else if (value instanceof Object[]) {_            type = Object[].class__        } else if (value instanceof Map) {_            type = Map.class__        } else if (value instanceof ReadableInstant) {_            type = ReadableInstant.class__        } else if (value instanceof BytesReference) {_            type = BytesReference.class__        } else {_            type = value.getClass()__        }_        final Writer writer = WRITERS.get(type)__        if (writer != null) {_            writer.write(this, value)__        } else {_            throw new IOException("can not write type [" + type + "]")__        }_    };notice,when,serialization,a,map,the,stream,out,map,with,the,stream,in,map,maybe,have,the,different,key,value,orders,they,will,maybe,have,different,stream,order,if,want,to,keep,stream,out,map,and,stream,in,map,have,the,same,stream,order,when,stream,can,use,code,write,map,with,consistent,order;public,void,write,generic,value,nullable,object,value,throws,ioexception,if,value,null,write,byte,byte,1,return,final,class,type,if,value,instanceof,list,type,list,class,else,if,value,instanceof,object,type,object,class,else,if,value,instanceof,map,type,map,class,else,if,value,instanceof,readable,instant,type,readable,instant,class,else,if,value,instanceof,bytes,reference,type,bytes,reference,class,else,type,value,get,class,final,writer,writer,writers,get,type,if,writer,null,writer,write,this,value,else,throw,new,ioexception,can,not,write,type,type
StreamOutput -> public <T extends Writeable> void writeArray(T[] array) throws IOException;1544786574;Writes the specified array of {@link Writeable}s. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.;public <T extends Writeable> void writeArray(T[] array) throws IOException {_        writeArray((out, value) -> value.writeTo(out), array)__    };writes,the,specified,array,of,link,writeable,s,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream;public,t,extends,writeable,void,write,array,t,array,throws,ioexception,write,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeArray(T[] array) throws IOException;1547519308;Writes the specified array of {@link Writeable}s. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.;public <T extends Writeable> void writeArray(T[] array) throws IOException {_        writeArray((out, value) -> value.writeTo(out), array)__    };writes,the,specified,array,of,link,writeable,s,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream;public,t,extends,writeable,void,write,array,t,array,throws,ioexception,write,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeArray(T[] array) throws IOException;1548236405;Writes the specified array of {@link Writeable}s. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.;public <T extends Writeable> void writeArray(T[] array) throws IOException {_        writeArray((out, value) -> value.writeTo(out), array)__    };writes,the,specified,array,of,link,writeable,s,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream;public,t,extends,writeable,void,write,array,t,array,throws,ioexception,write,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeArray(T[] array) throws IOException;1548265937;Writes the specified array of {@link Writeable}s. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.;public <T extends Writeable> void writeArray(T[] array) throws IOException {_        writeArray((out, value) -> value.writeTo(out), array)__    };writes,the,specified,array,of,link,writeable,s,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream;public,t,extends,writeable,void,write,array,t,array,throws,ioexception,write,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeArray(T[] array) throws IOException;1548420339;Writes the specified array of {@link Writeable}s. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.;public <T extends Writeable> void writeArray(T[] array) throws IOException {_        writeArray((out, value) -> value.writeTo(out), array)__    };writes,the,specified,array,of,link,writeable,s,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream;public,t,extends,writeable,void,write,array,t,array,throws,ioexception,write,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeArray(T[] array) throws IOException;1548943934;Writes the specified array of {@link Writeable}s. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.;public <T extends Writeable> void writeArray(T[] array) throws IOException {_        writeArray((out, value) -> value.writeTo(out), array)__    };writes,the,specified,array,of,link,writeable,s,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream;public,t,extends,writeable,void,write,array,t,array,throws,ioexception,write,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeArray(T[] array) throws IOException;1549336917;Writes the specified array of {@link Writeable}s. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.;public <T extends Writeable> void writeArray(T[] array) throws IOException {_        writeArray((out, value) -> value.writeTo(out), array)__    };writes,the,specified,array,of,link,writeable,s,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream;public,t,extends,writeable,void,write,array,t,array,throws,ioexception,write,array,out,value,value,write,to,out,array
StreamOutput -> public void writeZoneId(ZoneId timeZone) throws IOException;1548236405;Write a {@linkplain ZoneId} to the stream.;public void writeZoneId(ZoneId timeZone) throws IOException {_        writeString(timeZone.getId())__    };write,a,linkplain,zone,id,to,the,stream;public,void,write,zone,id,zone,id,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeZoneId(ZoneId timeZone) throws IOException;1548265937;Write a {@linkplain ZoneId} to the stream.;public void writeZoneId(ZoneId timeZone) throws IOException {_        writeString(timeZone.getId())__    };write,a,linkplain,zone,id,to,the,stream;public,void,write,zone,id,zone,id,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeZoneId(ZoneId timeZone) throws IOException;1548420339;Write a {@linkplain ZoneId} to the stream.;public void writeZoneId(ZoneId timeZone) throws IOException {_        writeString(timeZone.getId())__    };write,a,linkplain,zone,id,to,the,stream;public,void,write,zone,id,zone,id,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeZoneId(ZoneId timeZone) throws IOException;1548943934;Write a {@linkplain ZoneId} to the stream.;public void writeZoneId(ZoneId timeZone) throws IOException {_        writeString(timeZone.getId())__    };write,a,linkplain,zone,id,to,the,stream;public,void,write,zone,id,zone,id,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeZoneId(ZoneId timeZone) throws IOException;1549336917;Write a {@linkplain ZoneId} to the stream.;public void writeZoneId(ZoneId timeZone) throws IOException {_        writeString(timeZone.getId())__    };write,a,linkplain,zone,id,to,the,stream;public,void,write,zone,id,zone,id,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1524684173;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1526449283;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1527878678;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1532456624;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1537202470;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1544786574;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1547519308;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1548236405;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1548265937;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1548420339;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1548943934;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException;1549336917;Writes a list of {@link NamedWriteable} objects.;public void writeNamedWriteableList(List<? extends NamedWriteable> list) throws IOException {_        writeVInt(list.size())__        for (NamedWriteable obj: list) {_            writeNamedWriteable(obj)__        }_    };writes,a,list,of,link,named,writeable,objects;public,void,write,named,writeable,list,list,extends,named,writeable,list,throws,ioexception,write,vint,list,size,for,named,writeable,obj,list,write,named,writeable,obj
StreamOutput -> public boolean hasFeature(final String feature);1527878678;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1532456624;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1537202470;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1544786574;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1547519308;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1548236405;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1548265937;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1548420339;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1548943934;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public boolean hasFeature(final String feature);1549336917;Test if the stream has the specified feature. Features are used when serializing {@link ClusterState.Custom} or_{@link MetaData.Custom}_ see also {@link ClusterState.FeatureAware}.__@param feature the feature to test_@return true if the stream has the specified feature;public boolean hasFeature(final String feature) {_        return this.features.contains(feature)__    };test,if,the,stream,has,the,specified,feature,features,are,used,when,serializing,link,cluster,state,custom,or,link,meta,data,custom,see,also,link,cluster,state,feature,aware,param,feature,the,feature,to,test,return,true,if,the,stream,has,the,specified,feature;public,boolean,has,feature,final,string,feature,return,this,features,contains,feature
StreamOutput -> public void writeInt(int i) throws IOException;1524684173;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1526449283;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1527878678;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1532456624;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1537202470;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1544786574;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1547519308;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1548236405;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1548265937;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1548420339;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1548943934;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeInt(int i) throws IOException;1549336917;Writes an int as four bytes.;public void writeInt(int i) throws IOException {_        writeByte((byte) (i >> 24))__        writeByte((byte) (i >> 16))__        writeByte((byte) (i >> 8))__        writeByte((byte) i)__    };writes,an,int,as,four,bytes;public,void,write,int,int,i,throws,ioexception,write,byte,byte,i,24,write,byte,byte,i,16,write,byte,byte,i,8,write,byte,byte,i
StreamOutput -> public void writeOptionalInt(@Nullable Integer integer) throws IOException;1548420339;Writes an optional {@link Integer}.;public void writeOptionalInt(@Nullable Integer integer) throws IOException {_        if (integer == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeInt(integer)__        }_    };writes,an,optional,link,integer;public,void,write,optional,int,nullable,integer,integer,throws,ioexception,if,integer,null,write,boolean,false,else,write,boolean,true,write,int,integer
StreamOutput -> public void writeOptionalInt(@Nullable Integer integer) throws IOException;1548943934;Writes an optional {@link Integer}.;public void writeOptionalInt(@Nullable Integer integer) throws IOException {_        if (integer == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeInt(integer)__        }_    };writes,an,optional,link,integer;public,void,write,optional,int,nullable,integer,integer,throws,ioexception,if,integer,null,write,boolean,false,else,write,boolean,true,write,int,integer
StreamOutput -> public void writeOptionalInt(@Nullable Integer integer) throws IOException;1549336917;Writes an optional {@link Integer}.;public void writeOptionalInt(@Nullable Integer integer) throws IOException {_        if (integer == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeInt(integer)__        }_    };writes,an,optional,link,integer;public,void,write,optional,int,nullable,integer,integer,throws,ioexception,if,integer,null,write,boolean,false,else,write,boolean,true,write,int,integer
StreamOutput -> public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException;1532456624;Writes a collection of generic objects via a {@link Writer};public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,generic,objects,via,a,link,writer;public,t,void,write,collection,collection,t,collection,writer,t,writer,throws,ioexception,write,vint,collection,size,for,t,val,collection,writer,write,this,val
StreamOutput -> public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException;1537202470;Writes a collection of generic objects via a {@link Writer};public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,generic,objects,via,a,link,writer;public,t,void,write,collection,collection,t,collection,writer,t,writer,throws,ioexception,write,vint,collection,size,for,t,val,collection,writer,write,this,val
StreamOutput -> public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException;1544786574;Writes a collection of generic objects via a {@link Writer};public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,generic,objects,via,a,link,writer;public,t,void,write,collection,collection,t,collection,writer,t,writer,throws,ioexception,write,vint,collection,size,for,t,val,collection,writer,write,this,val
StreamOutput -> public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException;1547519308;Writes a collection of generic objects via a {@link Writer};public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,generic,objects,via,a,link,writer;public,t,void,write,collection,collection,t,collection,writer,t,writer,throws,ioexception,write,vint,collection,size,for,t,val,collection,writer,write,this,val
StreamOutput -> public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException;1548236405;Writes a collection of generic objects via a {@link Writer};public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,generic,objects,via,a,link,writer;public,t,void,write,collection,collection,t,collection,writer,t,writer,throws,ioexception,write,vint,collection,size,for,t,val,collection,writer,write,this,val
StreamOutput -> public void writeCollection(final Collection<? extends Writeable> collection) throws IOException;1547519308;Writes a collection to this stream. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection to write to this stream_@throws IOException if an I/O exception occurs writing the collection;public void writeCollection(final Collection<? extends Writeable> collection) throws IOException {_        writeCollection(collection, (o, v) -> v.writeTo(o))__    };writes,a,collection,to,this,stream,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,to,write,to,this,stream,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,collection,final,collection,extends,writeable,collection,throws,ioexception,write,collection,collection,o,v,v,write,to,o
StreamOutput -> public void writeCollection(final Collection<? extends Writeable> collection) throws IOException;1548236405;Writes a collection to this stream. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection to write to this stream_@throws IOException if an I/O exception occurs writing the collection;public void writeCollection(final Collection<? extends Writeable> collection) throws IOException {_        writeCollection(collection, (o, v) -> v.writeTo(o))__    };writes,a,collection,to,this,stream,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,to,write,to,this,stream,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,collection,final,collection,extends,writeable,collection,throws,ioexception,write,collection,collection,o,v,v,write,to,o
StreamOutput -> public void writeCollection(final Collection<? extends Writeable> collection) throws IOException;1548265937;Writes a collection to this stream. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection to write to this stream_@throws IOException if an I/O exception occurs writing the collection;public void writeCollection(final Collection<? extends Writeable> collection) throws IOException {_        writeCollection(collection, (o, v) -> v.writeTo(o))__    };writes,a,collection,to,this,stream,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,to,write,to,this,stream,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,collection,final,collection,extends,writeable,collection,throws,ioexception,write,collection,collection,o,v,v,write,to,o
StreamOutput -> public void writeCollection(final Collection<? extends Writeable> collection) throws IOException;1548420339;Writes a collection to this stream. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection to write to this stream_@throws IOException if an I/O exception occurs writing the collection;public void writeCollection(final Collection<? extends Writeable> collection) throws IOException {_        writeCollection(collection, (o, v) -> v.writeTo(o))__    };writes,a,collection,to,this,stream,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,to,write,to,this,stream,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,collection,final,collection,extends,writeable,collection,throws,ioexception,write,collection,collection,o,v,v,write,to,o
StreamOutput -> public void writeCollection(final Collection<? extends Writeable> collection) throws IOException;1548943934;Writes a collection to this stream. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection to write to this stream_@throws IOException if an I/O exception occurs writing the collection;public void writeCollection(final Collection<? extends Writeable> collection) throws IOException {_        writeCollection(collection, (o, v) -> v.writeTo(o))__    };writes,a,collection,to,this,stream,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,to,write,to,this,stream,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,collection,final,collection,extends,writeable,collection,throws,ioexception,write,collection,collection,o,v,v,write,to,o
StreamOutput -> public void writeCollection(final Collection<? extends Writeable> collection) throws IOException;1549336917;Writes a collection to this stream. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection to write to this stream_@throws IOException if an I/O exception occurs writing the collection;public void writeCollection(final Collection<? extends Writeable> collection) throws IOException {_        writeCollection(collection, (o, v) -> v.writeTo(o))__    };writes,a,collection,to,this,stream,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,to,write,to,this,stream,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,collection,final,collection,extends,writeable,collection,throws,ioexception,write,collection,collection,o,v,v,write,to,o
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1524684173;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1526449283;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1527878678;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1532456624;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1537202470;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1544786574;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1547519308;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1548236405;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1548265937;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1548420339;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1548943934;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public void writeBytes(byte[] b, int length) throws IOException;1549336917;Writes an array of bytes.__@param b      the bytes to write_@param length the number of bytes to write;public void writeBytes(byte[] b, int length) throws IOException {_        writeBytes(b, 0, length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write,param,length,the,number,of,bytes,to,write;public,void,write,bytes,byte,b,int,length,throws,ioexception,write,bytes,b,0,length
StreamOutput -> public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException;1544786574;Same as {@link #writeArray(Writeable[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException {_        writeOptionalArray((out, value) -> value.writeTo(out), array)__    };same,as,link,write,array,writeable,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,extends,writeable,void,write,optional,array,nullable,t,array,throws,ioexception,write,optional,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException;1547519308;Same as {@link #writeArray(Writeable[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException {_        writeOptionalArray((out, value) -> value.writeTo(out), array)__    };same,as,link,write,array,writeable,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,extends,writeable,void,write,optional,array,nullable,t,array,throws,ioexception,write,optional,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException;1548236405;Same as {@link #writeArray(Writeable[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException {_        writeOptionalArray((out, value) -> value.writeTo(out), array)__    };same,as,link,write,array,writeable,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,extends,writeable,void,write,optional,array,nullable,t,array,throws,ioexception,write,optional,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException;1548265937;Same as {@link #writeArray(Writeable[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException {_        writeOptionalArray((out, value) -> value.writeTo(out), array)__    };same,as,link,write,array,writeable,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,extends,writeable,void,write,optional,array,nullable,t,array,throws,ioexception,write,optional,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException;1548420339;Same as {@link #writeArray(Writeable[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException {_        writeOptionalArray((out, value) -> value.writeTo(out), array)__    };same,as,link,write,array,writeable,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,extends,writeable,void,write,optional,array,nullable,t,array,throws,ioexception,write,optional,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException;1548943934;Same as {@link #writeArray(Writeable[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException {_        writeOptionalArray((out, value) -> value.writeTo(out), array)__    };same,as,link,write,array,writeable,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,extends,writeable,void,write,optional,array,nullable,t,array,throws,ioexception,write,optional,array,out,value,value,write,to,out,array
StreamOutput -> public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException;1549336917;Same as {@link #writeArray(Writeable[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T extends Writeable> void writeOptionalArray(@Nullable T[] array) throws IOException {_        writeOptionalArray((out, value) -> value.writeTo(out), array)__    };same,as,link,write,array,writeable,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,extends,writeable,void,write,optional,array,nullable,t,array,throws,ioexception,write,optional,array,out,value,value,write,to,out,array
StreamOutput -> public void writeLong(long i) throws IOException;1524684173;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1526449283;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1527878678;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1532456624;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1537202470;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1544786574;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1547519308;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1548236405;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1548265937;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1548420339;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1548943934;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> public void writeLong(long i) throws IOException;1549336917;Writes a long as eight bytes.;public void writeLong(long i) throws IOException {_        writeInt((int) (i >> 32))__        writeInt((int) i)__    };writes,a,long,as,eight,bytes;public,void,write,long,long,i,throws,ioexception,write,int,int,i,32,write,int,int,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1524684173;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1526449283;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1527878678;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1532456624;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1537202470;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1544786574;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1547519308;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1548236405;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1548265937;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1548420339;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1548943934;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> void writeVLongNoCheck(long i) throws IOException;1549336917;Writes a long in a variable-length format without first checking if it is negative. Package private for testing. Use_{@link #writeVLong(long)} instead.;void writeVLongNoCheck(long i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,a,long,in,a,variable,length,format,without,first,checking,if,it,is,negative,package,private,for,testing,use,link,write,vlong,long,instead;void,write,vlong,no,check,long,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1524684173;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1526449283;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1527878678;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1532456624;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1537202470;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1544786574;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1547519308;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1548236405;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1548265937;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1548420339;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1548943934;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeBytesReference(@Nullable BytesReference bytes) throws IOException;1549336917;Writes the bytes reference, including a length header.;public void writeBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length())__        bytes.writeTo(this)__    };writes,the,bytes,reference,including,a,length,header;public,void,write,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,bytes,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1524684173;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1526449283;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1527878678;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1532456624;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1537202470;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1544786574;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1547519308;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1548236405;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1548265937;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1548420339;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1548943934;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeStreamableList(List<? extends Streamable> list) throws IOException;1549336917;Writes a list of {@link Streamable} objects;public void writeStreamableList(List<? extends Streamable> list) throws IOException {_        writeVInt(list.size())__        for (Streamable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,streamable,objects;public,void,write,streamable,list,list,extends,streamable,list,throws,ioexception,write,vint,list,size,for,streamable,obj,list,obj,write,to,this
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1524684173;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1526449283;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1527878678;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1532456624;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1537202470;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1544786574;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1547519308;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1548236405;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1548265937;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1548420339;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1548943934;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public void writeGeoPoint(GeoPoint geoPoint) throws IOException;1549336917;Writes the given {@link GeoPoint} to the stream;public void writeGeoPoint(GeoPoint geoPoint) throws IOException {_        writeDouble(geoPoint.lat())__        writeDouble(geoPoint.lon())__    };writes,the,given,link,geo,point,to,the,stream;public,void,write,geo,point,geo,point,geo,point,throws,ioexception,write,double,geo,point,lat,write,double,geo,point,lon
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1524684173;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1526449283;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1527878678;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1532456624;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1537202470;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1544786574;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1547519308;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1548236405;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1548265937;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1548420339;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1548943934;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException;1549336917;Writes the specified array to the stream using the specified {@link Writer} for each element in the array. This method can be seen as_writer version of {@link StreamInput#readArray(Writeable.Reader, IntFunction)}. The length of array encoded as a variable-length_integer is first written to the stream, and then the elements of the array are written to the stream.__@param writer the writer used to write individual elements_@param array  the array_@param <T>    the type of the elements of the array_@throws IOException if an I/O exception occurs while writing the array;public <T> void writeArray(final Writer<T> writer, final T[] array) throws IOException {_        writeVInt(array.length)__        for (T value : array) {_            writer.write(this, value)__        }_    };writes,the,specified,array,to,the,stream,using,the,specified,link,writer,for,each,element,in,the,array,this,method,can,be,seen,as,writer,version,of,link,stream,input,read,array,writeable,reader,int,function,the,length,of,array,encoded,as,a,variable,length,integer,is,first,written,to,the,stream,and,then,the,elements,of,the,array,are,written,to,the,stream,param,writer,the,writer,used,to,write,individual,elements,param,array,the,array,param,t,the,type,of,the,elements,of,the,array,throws,ioexception,if,an,i,o,exception,occurs,while,writing,the,array;public,t,void,write,array,final,writer,t,writer,final,t,array,throws,ioexception,write,vint,array,length,for,t,value,array,writer,write,this,value
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1524684173;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1526449283;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1527878678;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1532456624;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1537202470;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1544786574;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1547519308;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1548236405;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1548265937;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1548420339;Writes an enum with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1548943934;Writes an enum with type E based on its ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,based,on,its,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException;1549336917;Writes an enum with type E based on its ordinal value;public <E extends Enum<E>> void writeEnum(E enumValue) throws IOException {_        writeVInt(enumValue.ordinal())__    };writes,an,enum,with,type,e,based,on,its,ordinal,value;public,e,extends,enum,e,void,write,enum,e,enum,value,throws,ioexception,write,vint,enum,value,ordinal
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1524684173;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1526449283;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1527878678;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1532456624;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1537202470;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1544786574;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1547519308;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1548236405;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1548265937;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1548420339;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1548943934;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;1549336917;Writes an array of bytes.__@param b      the bytes to write_@param offset the offset in the byte array_@param length the number of bytes to write;public abstract void writeBytes(byte[] b, int offset, int length) throws IOException_;writes,an,array,of,bytes,param,b,the,bytes,to,write,param,offset,the,offset,in,the,byte,array,param,length,the,number,of,bytes,to,write;public,abstract,void,write,bytes,byte,b,int,offset,int,length,throws,ioexception
StreamOutput -> public Version getVersion();1524684173;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1526449283;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1527878678;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1532456624;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1537202470;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1544786574;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1547519308;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1548236405;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1548265937;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1548420339;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1548943934;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> public Version getVersion();1549336917;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamOutput -> @Override     public abstract void close() throws IOException_;1524684173;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1526449283;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1527878678;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1532456624;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1537202470;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1544786574;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1547519308;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1548236405;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1548265937;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1548420339;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1548943934;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> @Override     public abstract void close() throws IOException_;1549336917;Closes this stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,this,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamOutput -> public void writeZLong(long i) throws IOException;1524684173;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1526449283;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1527878678;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1532456624;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1537202470;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1544786574;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1547519308;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1548236405;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1548265937;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1548420339;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1548943934;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeZLong(long i) throws IOException;1549336917;Writes a long in a variable-length format. Writes between one and ten bytes._Values are remapped by sliding the sign bit into the lsb and then encoded as an unsigned number_e.g., 0 -_&gt_ 0, -1 -_&gt_ 1, 1 -_&gt_ 2, ..., Long.MIN_VALUE -_&gt_ -1, Long.MAX_VALUE -_&gt_ -2_Numbers with small absolute value will have a small encoding_If the numbers are known to be non-negative, use {@link #writeVLong(long)};public void writeZLong(long i) throws IOException {_        _        long value = BitUtil.zigZagEncode(i)__        while ((value & 0xFFFFFFFFFFFFFF80L) != 0L) {_            writeByte((byte)((value & 0x7F) | 0x80))__            value >>>= 7__        }_        writeByte((byte) (value & 0x7F))__    };writes,a,long,in,a,variable,length,format,writes,between,one,and,ten,bytes,values,are,remapped,by,sliding,the,sign,bit,into,the,lsb,and,then,encoded,as,an,unsigned,number,e,g,0,gt,0,1,gt,1,1,gt,2,long,gt,1,long,gt,2,numbers,with,small,absolute,value,will,have,a,small,encoding,if,the,numbers,are,known,to,be,non,negative,use,link,write,vlong,long;public,void,write,zlong,long,i,throws,ioexception,long,value,bit,util,zig,zag,encode,i,while,value,0x,ffffffffffffff80l,0l,write,byte,byte,value,0x7f,0x80,value,7,write,byte,byte,value,0x7f
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1524684173;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1526449283;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1527878678;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1532456624;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1537202470;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1544786574;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1547519308;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1548236405;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1548265937;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1548420339;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1548943934;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException;1549336917;Write an optional {@link NamedWriteable} to the stream.;public void writeOptionalNamedWriteable(@Nullable NamedWriteable namedWriteable) throws IOException {_        if (namedWriteable == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeNamedWriteable(namedWriteable)__        }_    };write,an,optional,link,named,writeable,to,the,stream;public,void,write,optional,named,writeable,nullable,named,writeable,named,writeable,throws,ioexception,if,named,writeable,null,write,boolean,false,else,write,boolean,true,write,named,writeable,named,writeable
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1524684173;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1526449283;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1527878678;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1532456624;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1537202470;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1544786574;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1547519308;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1548236405;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1548265937;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1548420339;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1548943934;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException;1549336917;Serializes a potential null value.;public void writeOptionalStreamable(@Nullable Streamable streamable) throws IOException {_        if (streamable != null) {_            writeBoolean(true)__            streamable.writeTo(this)__        } else {_            writeBoolean(false)__        }_    };serializes,a,potential,null,value;public,void,write,optional,streamable,nullable,streamable,streamable,throws,ioexception,if,streamable,null,write,boolean,true,streamable,write,to,this,else,write,boolean,false
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1524684173;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1526449283;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1527878678;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1532456624;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1537202470;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1544786574;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1547519308;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1548236405;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1548265937;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1548420339;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1548943934;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeStringArrayNullable(@Nullable String[] array) throws IOException;1549336917;Writes a string array, for nullable string, writes it as 0 (empty string).;public void writeStringArrayNullable(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeVInt(0)__        } else {_            writeVInt(array.length)__            for (String s : array) {_                writeString(s)__            }_        }_    };writes,a,string,array,for,nullable,string,writes,it,as,0,empty,string;public,void,write,string,array,nullable,nullable,string,array,throws,ioexception,if,array,null,write,vint,0,else,write,vint,array,length,for,string,s,array,write,string,s
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1524684173;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1526449283;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1527878678;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1532456624;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1537202470;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1544786574;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1547519308;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1548236405;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1548265937;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1548420339;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1548943934;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException;1549336917;Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes_references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.;public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {_        if (bytes == null) {_            writeVInt(0)__            return__        }_        writeVInt(bytes.length() + 1)__        bytes.writeTo(this)__    };writes,an,optional,bytes,reference,including,a,length,header,use,this,if,you,need,to,differentiate,between,null,and,empty,bytes,references,use,link,write,bytes,reference,bytes,reference,and,link,stream,input,read,bytes,reference,if,you,do,not;public,void,write,optional,bytes,reference,nullable,bytes,reference,bytes,throws,ioexception,if,bytes,null,write,vint,0,return,write,vint,bytes,length,1,bytes,write,to,this
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1524684173;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1526449283;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1527878678;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1532456624;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1537202470;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1544786574;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1547519308;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1548236405;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1548265937;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1548420339;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1548943934;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public abstract void writeByte(byte b) throws IOException_;1549336917;Writes a single byte.;public abstract void writeByte(byte b) throws IOException_;writes,a,single,byte;public,abstract,void,write,byte,byte,b,throws,ioexception
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1524684173;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1526449283;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1527878678;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1532456624;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1537202470;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1544786574;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1547519308;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1548236405;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1548265937;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1548420339;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1548943934;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeBoolean(boolean b) throws IOException;1549336917;Writes a boolean.;public void writeBoolean(boolean b) throws IOException {_        writeByte(b ? ONE : ZERO)__    };writes,a,boolean;public,void,write,boolean,boolean,b,throws,ioexception,write,byte,b,one,zero
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1524684173;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1526449283;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1527878678;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1532456624;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1537202470;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1544786574;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1547519308;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1548236405;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1548265937;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1548420339;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1548943934;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)         throws IOException;1549336917;write map to stream with consistent order_to make sure every map generated bytes order are same._This method is compatible with {@code StreamInput.readMap} and {@code StreamInput.readGenericValue}_This method only will handle the map keys order, not maps contained within the map;public void writeMapWithConsistentOrder(@Nullable Map<String, ? extends Object> map)_        throws IOException {_        if (map == null) {_            writeByte((byte) -1)__            return__        }_        assert false == (map instanceof LinkedHashMap)__        this.writeByte((byte) 10)__        this.writeVInt(map.size())__        Iterator<? extends Map.Entry<String, ?>> iterator =_            map.entrySet().stream().sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator()__        while (iterator.hasNext()) {_            Map.Entry<String, ?> next = iterator.next()__            this.writeString(next.getKey())__            this.writeGenericValue(next.getValue())__        }_    };write,map,to,stream,with,consistent,order,to,make,sure,every,map,generated,bytes,order,are,same,this,method,is,compatible,with,code,stream,input,read,map,and,code,stream,input,read,generic,value,this,method,only,will,handle,the,map,keys,order,not,maps,contained,within,the,map;public,void,write,map,with,consistent,order,nullable,map,string,extends,object,map,throws,ioexception,if,map,null,write,byte,byte,1,return,assert,false,map,instanceof,linked,hash,map,this,write,byte,byte,10,this,write,vint,map,size,iterator,extends,map,entry,string,iterator,map,entry,set,stream,sorted,a,b,a,get,key,compare,to,b,get,key,iterator,while,iterator,has,next,map,entry,string,next,iterator,next,this,write,string,next,get,key,this,write,generic,value,next,get,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1524684173;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1526449283;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1527878678;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1532456624;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1537202470;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1544786574;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1547519308;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1548236405;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1548265937;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1548420339;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1548943934;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)             throws IOException;1549336917;Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = ...__out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_            throws IOException {_        writeMap(map, keyWriter, (stream, list) -> {_            writeVInt(list.size())__            for (final V value : list) {_                valueWriter.write(this, value)__            }_        })__    };write,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,out,write,map,of,lists,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,of,lists,final,map,k,list,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,map,map,key,writer,stream,list,write,vint,list,size,for,final,v,value,list,value,writer,write,this,value
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1524684173;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1526449283;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1527878678;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1532456624;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1537202470;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1544786574;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1547519308;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1548236405;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1548265937;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1548420339;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1548943934;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException;1549336917;Writes a {@link NamedWriteable} to the current stream, by first writing its name and then the object itself;public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {_        writeString(namedWriteable.getWriteableName())__        namedWriteable.writeTo(this)__    };writes,a,link,named,writeable,to,the,current,stream,by,first,writing,its,name,and,then,the,object,itself;public,void,write,named,writeable,named,writeable,named,writeable,throws,ioexception,write,string,named,writeable,get,writeable,name,named,writeable,write,to,this
StreamOutput -> public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException;1548236405;Write an optional {@linkplain ZoneId} to the stream.;public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeZoneId(timeZone)__        }_    };write,an,optional,linkplain,zone,id,to,the,stream;public,void,write,optional,zone,id,nullable,zone,id,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,zone,id,time,zone
StreamOutput -> public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException;1548265937;Write an optional {@linkplain ZoneId} to the stream.;public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeZoneId(timeZone)__        }_    };write,an,optional,linkplain,zone,id,to,the,stream;public,void,write,optional,zone,id,nullable,zone,id,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,zone,id,time,zone
StreamOutput -> public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException;1548420339;Write an optional {@linkplain ZoneId} to the stream.;public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeZoneId(timeZone)__        }_    };write,an,optional,linkplain,zone,id,to,the,stream;public,void,write,optional,zone,id,nullable,zone,id,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,zone,id,time,zone
StreamOutput -> public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException;1548943934;Write an optional {@linkplain ZoneId} to the stream.;public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeZoneId(timeZone)__        }_    };write,an,optional,linkplain,zone,id,to,the,stream;public,void,write,optional,zone,id,nullable,zone,id,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,zone,id,time,zone
StreamOutput -> public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException;1549336917;Write an optional {@linkplain ZoneId} to the stream.;public void writeOptionalZoneId(@Nullable ZoneId timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeZoneId(timeZone)__        }_    };write,an,optional,linkplain,zone,id,to,the,stream;public,void,write,optional,zone,id,nullable,zone,id,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,zone,id,time,zone
StreamOutput -> public void writeVInt(int i) throws IOException;1524684173;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1526449283;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1527878678;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1532456624;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1537202470;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1544786574;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1547519308;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1548236405;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1548265937;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1548420339;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1548943934;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeVInt(int i) throws IOException;1549336917;Writes an int in a variable-length format.  Writes between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #writeInt};public void writeVInt(int i) throws IOException {_        while ((i & ~0x7F) != 0) {_            writeByte((byte) ((i & 0x7f) | 0x80))__            i >>>= 7__        }_        writeByte((byte) i)__    };writes,an,int,in,a,variable,length,format,writes,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,write,int;public,void,write,vint,int,i,throws,ioexception,while,i,0x7f,0,write,byte,byte,i,0x7f,0x80,i,7,write,byte,byte,i
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1524684173;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1526449283;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1527878678;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1532456624;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1537202470;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1544786574;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1547519308;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1548236405;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1548265937;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1548420339;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1548943934;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeTimeValue(TimeValue timeValue) throws IOException;1549336917;Write a {@link TimeValue} to the stream;public void writeTimeValue(TimeValue timeValue) throws IOException {_        writeZLong(timeValue.duration())__        writeByte(TIME_UNIT_BYTE_MAP.get(timeValue.timeUnit()))__    };write,a,link,time,value,to,the,stream;public,void,write,time,value,time,value,time,value,throws,ioexception,write,zlong,time,value,duration,write,byte,get,time,value,time,unit
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1524684173;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1526449283;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1527878678;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1532456624;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1537202470;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1544786574;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1547519308;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1548236405;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1548265937;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1548420339;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1548943934;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public void writeOptionalStringArray(@Nullable String[] array) throws IOException;1549336917;Writes a string array, for nullable string, writes false.;public void writeOptionalStringArray(@Nullable String[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeStringArray(array)__        }_    };writes,a,string,array,for,nullable,string,writes,false;public,void,write,optional,string,array,nullable,string,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,string,array,array
StreamOutput -> public <T> void writeCollection(final Collection<T> collection, final Writer<T> writer) throws IOException;1548265937;Writes a collection of objects via a {@link Writer}.__@param collection the collection of objects_@throws IOException if an I/O exception occurs writing the collection;public <T> void writeCollection(final Collection<T> collection, final Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (final T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,objects,via,a,link,writer,param,collection,the,collection,of,objects,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,t,void,write,collection,final,collection,t,collection,final,writer,t,writer,throws,ioexception,write,vint,collection,size,for,final,t,val,collection,writer,write,this,val
StreamOutput -> public <T> void writeCollection(final Collection<T> collection, final Writer<T> writer) throws IOException;1548420339;Writes a collection of objects via a {@link Writer}.__@param collection the collection of objects_@throws IOException if an I/O exception occurs writing the collection;public <T> void writeCollection(final Collection<T> collection, final Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (final T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,objects,via,a,link,writer,param,collection,the,collection,of,objects,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,t,void,write,collection,final,collection,t,collection,final,writer,t,writer,throws,ioexception,write,vint,collection,size,for,final,t,val,collection,writer,write,this,val
StreamOutput -> public <T> void writeCollection(final Collection<T> collection, final Writer<T> writer) throws IOException;1548943934;Writes a collection of objects via a {@link Writer}.__@param collection the collection of objects_@throws IOException if an I/O exception occurs writing the collection;public <T> void writeCollection(final Collection<T> collection, final Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (final T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,objects,via,a,link,writer,param,collection,the,collection,of,objects,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,t,void,write,collection,final,collection,t,collection,final,writer,t,writer,throws,ioexception,write,vint,collection,size,for,final,t,val,collection,writer,write,this,val
StreamOutput -> public <T> void writeCollection(final Collection<T> collection, final Writer<T> writer) throws IOException;1549336917;Writes a collection of objects via a {@link Writer}.__@param collection the collection of objects_@throws IOException if an I/O exception occurs writing the collection;public <T> void writeCollection(final Collection<T> collection, final Writer<T> writer) throws IOException {_        writeVInt(collection.size())__        for (final T val: collection) {_            writer.write(this, val)__        }_    };writes,a,collection,of,objects,via,a,link,writer,param,collection,the,collection,of,objects,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,t,void,write,collection,final,collection,t,collection,final,writer,t,writer,throws,ioexception,write,vint,collection,size,for,final,t,val,collection,writer,write,this,val
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1524684173;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1526449283;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1527878678;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1532456624;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1537202470;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1544786574;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1547519308;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1548236405;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1548265937;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1548420339;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1548943934;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public void writeBytes(byte[] b) throws IOException;1549336917;Writes an array of bytes.__@param b the bytes to write;public void writeBytes(byte[] b) throws IOException {_        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,bytes,byte,b,throws,ioexception,write,bytes,b,0,b,length
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1524684173;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1526449283;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1527878678;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1532456624;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1537202470;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1544786574;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1547519308;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1548236405;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1548265937;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1548420339;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1548943934;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)         throws IOException;1549336917;Write a {@link Map} of {@code K}-type keys to {@code V}-type._<pre><code>_Map&lt_String, String&gt_ map = ...__out.writeMap(map, StreamOutput::writeString, StreamOutput::writeString)__</code></pre>__@param keyWriter The key writer_@param valueWriter The value writer;public final <K, V> void writeMap(final Map<K, V> map, final Writer<K> keyWriter, final Writer<V> valueWriter)_        throws IOException {_        writeVInt(map.size())__        for (final Map.Entry<K, V> entry : map.entrySet()) {_            keyWriter.write(this, entry.getKey())__            valueWriter.write(this, entry.getValue())__        }_    };write,a,link,map,of,code,k,type,keys,to,code,v,type,pre,code,map,lt,string,string,gt,map,out,write,map,map,stream,output,write,string,stream,output,write,string,code,pre,param,key,writer,the,key,writer,param,value,writer,the,value,writer;public,final,k,v,void,write,map,final,map,k,v,map,final,writer,k,key,writer,final,writer,v,value,writer,throws,ioexception,write,vint,map,size,for,final,map,entry,k,v,entry,map,entry,set,key,writer,write,this,entry,get,key,value,writer,write,this,entry,get,value
StreamOutput -> public void writeStringCollection(final Collection<String> collection) throws IOException;1548265937;Writes a collection of a strings. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection of strings_@throws IOException if an I/O exception occurs writing the collection;public void writeStringCollection(final Collection<String> collection) throws IOException {_        writeCollection(collection, StreamOutput::writeString)__    };writes,a,collection,of,a,strings,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,of,strings,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,string,collection,final,collection,string,collection,throws,ioexception,write,collection,collection,stream,output,write,string
StreamOutput -> public void writeStringCollection(final Collection<String> collection) throws IOException;1548420339;Writes a collection of a strings. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection of strings_@throws IOException if an I/O exception occurs writing the collection;public void writeStringCollection(final Collection<String> collection) throws IOException {_        writeCollection(collection, StreamOutput::writeString)__    };writes,a,collection,of,a,strings,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,of,strings,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,string,collection,final,collection,string,collection,throws,ioexception,write,collection,collection,stream,output,write,string
StreamOutput -> public void writeStringCollection(final Collection<String> collection) throws IOException;1548943934;Writes a collection of a strings. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection of strings_@throws IOException if an I/O exception occurs writing the collection;public void writeStringCollection(final Collection<String> collection) throws IOException {_        writeCollection(collection, StreamOutput::writeString)__    };writes,a,collection,of,a,strings,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,of,strings,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,string,collection,final,collection,string,collection,throws,ioexception,write,collection,collection,stream,output,write,string
StreamOutput -> public void writeStringCollection(final Collection<String> collection) throws IOException;1549336917;Writes a collection of a strings. The corresponding collection can be read from a stream input using_{@link StreamInput#readList(Writeable.Reader)}.__@param collection the collection of strings_@throws IOException if an I/O exception occurs writing the collection;public void writeStringCollection(final Collection<String> collection) throws IOException {_        writeCollection(collection, StreamOutput::writeString)__    };writes,a,collection,of,a,strings,the,corresponding,collection,can,be,read,from,a,stream,input,using,link,stream,input,read,list,writeable,reader,param,collection,the,collection,of,strings,throws,ioexception,if,an,i,o,exception,occurs,writing,the,collection;public,void,write,string,collection,final,collection,string,collection,throws,ioexception,write,collection,collection,stream,output,write,string
StreamOutput -> public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException;1544786574;Same as {@link #writeArray(Writer, Object[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeArray(writer, array)__        }_    };same,as,link,write,array,writer,object,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,void,write,optional,array,final,writer,t,writer,final,nullable,t,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,array,writer,array
StreamOutput -> public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException;1547519308;Same as {@link #writeArray(Writer, Object[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeArray(writer, array)__        }_    };same,as,link,write,array,writer,object,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,void,write,optional,array,final,writer,t,writer,final,nullable,t,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,array,writer,array
StreamOutput -> public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException;1548236405;Same as {@link #writeArray(Writer, Object[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeArray(writer, array)__        }_    };same,as,link,write,array,writer,object,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,void,write,optional,array,final,writer,t,writer,final,nullable,t,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,array,writer,array
StreamOutput -> public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException;1548265937;Same as {@link #writeArray(Writer, Object[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeArray(writer, array)__        }_    };same,as,link,write,array,writer,object,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,void,write,optional,array,final,writer,t,writer,final,nullable,t,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,array,writer,array
StreamOutput -> public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException;1548420339;Same as {@link #writeArray(Writer, Object[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeArray(writer, array)__        }_    };same,as,link,write,array,writer,object,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,void,write,optional,array,final,writer,t,writer,final,nullable,t,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,array,writer,array
StreamOutput -> public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException;1548943934;Same as {@link #writeArray(Writer, Object[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeArray(writer, array)__        }_    };same,as,link,write,array,writer,object,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,void,write,optional,array,final,writer,t,writer,final,nullable,t,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,array,writer,array
StreamOutput -> public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException;1549336917;Same as {@link #writeArray(Writer, Object[])} but the provided array may be null. An additional boolean value is_serialized to indicate whether the array was null or not.;public <T> void writeOptionalArray(final Writer<T> writer, final @Nullable T[] array) throws IOException {_        if (array == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeArray(writer, array)__        }_    };same,as,link,write,array,writer,object,but,the,provided,array,may,be,null,an,additional,boolean,value,is,serialized,to,indicate,whether,the,array,was,null,or,not;public,t,void,write,optional,array,final,writer,t,writer,final,nullable,t,array,throws,ioexception,if,array,null,write,boolean,false,else,write,boolean,true,write,array,writer,array
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1526449283;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1527878678;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1532456624;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1537202470;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1544786574;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1547519308;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1548236405;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1548265937;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1548420339;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1548943934;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException;1549336917;Writes an EnumSet with type E that by serialized it based on it's ordinal value;public <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumSet) throws IOException {_        writeVInt(enumSet.size())__        for (E e : enumSet) {_            writeEnum(e)__        }_    };writes,an,enum,set,with,type,e,that,by,serialized,it,based,on,it,s,ordinal,value;public,e,extends,enum,e,void,write,enum,set,enum,set,e,enum,set,throws,ioexception,write,vint,enum,set,size,for,e,e,enum,set,write,enum,e
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1524684173;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1526449283;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1527878678;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1532456624;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1537202470;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1544786574;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1547519308;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1548236405;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1548265937;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1548420339;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1548943934;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeTimeZone(DateTimeZone timeZone) throws IOException;1549336917;Write a {@linkplain DateTimeZone} to the stream.;public void writeTimeZone(DateTimeZone timeZone) throws IOException {_        writeString(timeZone.getID())__    };write,a,linkplain,date,time,zone,to,the,stream;public,void,write,time,zone,date,time,zone,time,zone,throws,ioexception,write,string,time,zone,get,id
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1524684173;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeVInt(list.size())__        for (Writeable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,vint,list,size,for,writeable,obj,list,obj,write,to,this
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1526449283;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeVInt(list.size())__        for (Writeable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,vint,list,size,for,writeable,obj,list,obj,write,to,this
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1527878678;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeVInt(list.size())__        for (Writeable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,vint,list,size,for,writeable,obj,list,obj,write,to,this
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1532456624;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeVInt(list.size())__        for (Writeable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,vint,list,size,for,writeable,obj,list,obj,write,to,this
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1537202470;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeVInt(list.size())__        for (Writeable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,vint,list,size,for,writeable,obj,list,obj,write,to,this
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1544786574;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeVInt(list.size())__        for (Writeable obj: list) {_            obj.writeTo(this)__        }_    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,vint,list,size,for,writeable,obj,list,obj,write,to,this
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1547519308;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeCollection(list)__    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,collection,list
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1548236405;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeCollection(list)__    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,collection,list
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1548265937;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeCollection(list)__    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,collection,list
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1548420339;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeCollection(list)__    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,collection,list
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1548943934;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeCollection(list)__    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,collection,list
StreamOutput -> public void writeList(List<? extends Writeable> list) throws IOException;1549336917;Writes a list of {@link Writeable} objects;public void writeList(List<? extends Writeable> list) throws IOException {_        writeCollection(list)__    };writes,a,list,of,link,writeable,objects;public,void,write,list,list,extends,writeable,list,throws,ioexception,write,collection,list
StreamOutput -> @Override     public abstract void flush() throws IOException_;1524684173;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1526449283;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1527878678;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1532456624;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1537202470;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1544786574;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1547519308;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1548236405;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1548265937;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1548420339;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1548943934;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> @Override     public abstract void flush() throws IOException_;1549336917;Forces any buffered output to be written.;@Override_    public abstract void flush() throws IOException_;forces,any,buffered,output,to,be,written;override,public,abstract,void,flush,throws,ioexception
StreamOutput -> public void writeStringList(List<String> list) throws IOException;1524684173;Writes a list of strings;public void writeStringList(List<String> list) throws IOException {_        writeVInt(list.size())__        for (String string: list) {_            this.writeString(string)__        }_    };writes,a,list,of,strings;public,void,write,string,list,list,string,list,throws,ioexception,write,vint,list,size,for,string,string,list,this,write,string,string
StreamOutput -> public void writeStringList(List<String> list) throws IOException;1526449283;Writes a list of strings;public void writeStringList(List<String> list) throws IOException {_        writeVInt(list.size())__        for (String string: list) {_            this.writeString(string)__        }_    };writes,a,list,of,strings;public,void,write,string,list,list,string,list,throws,ioexception,write,vint,list,size,for,string,string,list,this,write,string,string
StreamOutput -> public void writeStringList(List<String> list) throws IOException;1527878678;Writes a list of strings;public void writeStringList(List<String> list) throws IOException {_        writeVInt(list.size())__        for (String string: list) {_            this.writeString(string)__        }_    };writes,a,list,of,strings;public,void,write,string,list,list,string,list,throws,ioexception,write,vint,list,size,for,string,string,list,this,write,string,string
StreamOutput -> public void writeStringList(List<String> list) throws IOException;1532456624;Writes a list of strings;public void writeStringList(List<String> list) throws IOException {_        writeVInt(list.size())__        for (String string: list) {_            this.writeString(string)__        }_    };writes,a,list,of,strings;public,void,write,string,list,list,string,list,throws,ioexception,write,vint,list,size,for,string,string,list,this,write,string,string
StreamOutput -> public void writeStringList(List<String> list) throws IOException;1537202470;Writes a list of strings;public void writeStringList(List<String> list) throws IOException {_        writeVInt(list.size())__        for (String string: list) {_            this.writeString(string)__        }_    };writes,a,list,of,strings;public,void,write,string,list,list,string,list,throws,ioexception,write,vint,list,size,for,string,string,list,this,write,string,string
StreamOutput -> public void writeStringList(List<String> list) throws IOException;1544786574;Writes a list of strings;public void writeStringList(List<String> list) throws IOException {_        writeVInt(list.size())__        for (String string: list) {_            this.writeString(string)__        }_    };writes,a,list,of,strings;public,void,write,string,list,list,string,list,throws,ioexception,write,vint,list,size,for,string,string,list,this,write,string,string
StreamOutput -> public void writeStringList(List<String> list) throws IOException;1547519308;Writes a list of strings;public void writeStringList(List<String> list) throws IOException {_        writeVInt(list.size())__        for (String string: list) {_            this.writeString(string)__        }_    };writes,a,list,of,strings;public,void,write,string,list,list,string,list,throws,ioexception,write,vint,list,size,for,string,string,list,this,write,string,string
StreamOutput -> public void writeStringList(List<String> list) throws IOException;1548236405;Writes a list of strings;public void writeStringList(List<String> list) throws IOException {_        writeVInt(list.size())__        for (String string: list) {_            this.writeString(string)__        }_    };writes,a,list,of,strings;public,void,write,string,list,list,string,list,throws,ioexception,write,vint,list,size,for,string,string,list,this,write,string,string
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1524684173;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1526449283;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1527878678;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1532456624;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1537202470;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1544786574;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1547519308;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1548236405;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1548265937;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1548420339;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1548943934;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException;1549336917;Write an optional {@linkplain DateTimeZone} to the stream.;public void writeOptionalTimeZone(@Nullable DateTimeZone timeZone) throws IOException {_        if (timeZone == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeZone(timeZone)__        }_    };write,an,optional,linkplain,date,time,zone,to,the,stream;public,void,write,optional,time,zone,nullable,date,time,zone,time,zone,throws,ioexception,if,time,zone,null,write,boolean,false,else,write,boolean,true,write,time,zone,time,zone
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1524684173;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1526449283;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1527878678;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1532456624;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1537202470;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1544786574;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1547519308;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1548236405;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1548265937;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1548420339;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1548943934;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeByteArray(byte[] b) throws IOException;1549336917;Writes an array of bytes.__@param b the bytes to write;public void writeByteArray(byte[] b) throws IOException {_        writeVInt(b.length)__        writeBytes(b, 0, b.length)__    };writes,an,array,of,bytes,param,b,the,bytes,to,write;public,void,write,byte,array,byte,b,throws,ioexception,write,vint,b,length,write,bytes,b,0,b,length
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1524684173;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1526449283;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1527878678;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1532456624;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1537202470;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1544786574;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1547519308;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1548236405;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1548265937;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1548420339;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1548943934;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
StreamOutput -> public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException;1549336917;Write an optional {@link TimeValue} to the stream.;public void writeOptionalTimeValue(@Nullable TimeValue timeValue) throws IOException {_        if (timeValue == null) {_            writeBoolean(false)__        } else {_            writeBoolean(true)__            writeTimeValue(timeValue)__        }_    };write,an,optional,link,time,value,to,the,stream;public,void,write,optional,time,value,nullable,time,value,time,value,throws,ioexception,if,time,value,null,write,boolean,false,else,write,boolean,true,write,time,value,time,value
