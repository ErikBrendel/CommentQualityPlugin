commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CombineFunction getDefaultScoreCombiner() {     return scoreCombiner. }
false;public,abstract;1;1;;public abstract LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) throws IOException.
true;public,abstract;0;1;/**  * Indicates if document scores are needed by this function.  *  * @return {@code true} if scores are needed.  */ ;/**  * Indicates if document scores are needed by this function.  *  * @return {@code true} if scores are needed.  */ public abstract boolean needsScores().
false;public,final;1;13;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ScoreFunction other = (ScoreFunction) obj.     return Objects.equals(scoreCombiner, other.scoreCombiner) && doEquals(other). }
false;public;0;3;;public float getWeight() {     return 1.0f. }
true;protected,abstract;1;1;/**  * Indicates whether some other {@link ScoreFunction} object of the same type is "equal to" this one.  */ ;/**  * Indicates whether some other {@link ScoreFunction} object of the same type is "equal to" this one.  */ protected abstract boolean doEquals(ScoreFunction other).
false;public,final;0;8;;@Override public final int hashCode() {     /*          * Override hashCode here and forward to an abstract method to force extensions of this class to override hashCode in the same          * way that we force them to override equals. This also prevents false positives in CheckStyle's EqualsHashCode check.          */     return Objects.hash(scoreCombiner, doHashCode()). }
false;protected,abstract;0;1;;protected abstract int doHashCode().
false;protected;1;3;;protected ScoreFunction rewrite(IndexReader reader) throws IOException {     return this. }
