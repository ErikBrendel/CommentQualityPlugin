commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the {@link BlobPath} that defines the implementation specific paths to where the blobs are contained.  *  * @return  the BlobPath where the blobs are contained  */ ;/**  * Gets the {@link BlobPath} that defines the implementation specific paths to where the blobs are contained.  *  * @return  the BlobPath where the blobs are contained  */ BlobPath path().
true;;1;1;/**  * Tests whether a blob with the given blob name exists in the container.  *  * @param   blobName  *          The name of the blob whose existence is to be determined.  * @return  {@code true} if a blob exists in the {@link BlobContainer} with the given name, and {@code false} otherwise.  */ ;/**  * Tests whether a blob with the given blob name exists in the container.  *  * @param   blobName  *          The name of the blob whose existence is to be determined.  * @return  {@code true} if a blob exists in the {@link BlobContainer} with the given name, and {@code false} otherwise.  */ boolean blobExists(String blobName).
true;;1;1;/**  * Creates a new {@link InputStream} for the given blob name.  *  * @param   blobName  *          The name of the blob to get an {@link InputStream} for.  * @return  The {@code InputStream} to read the blob.  * @throws  NoSuchFileException if the blob does not exist  * @throws  IOException if the blob can not be read.  */ ;/**  * Creates a new {@link InputStream} for the given blob name.  *  * @param   blobName  *          The name of the blob to get an {@link InputStream} for.  * @return  The {@code InputStream} to read the blob.  * @throws  NoSuchFileException if the blob does not exist  * @throws  IOException if the blob can not be read.  */ InputStream readBlob(String blobName) throws IOException.
true;;4;1;/**  * Reads blob content from the input stream and writes it to the container in a new blob with the given name.  * This method assumes the container does not already contain a blob of the same blobName.  If a blob by the  * same name already exists, the operation will fail and an {@link IOException} will be thrown.  *  * @param   blobName  *          The name of the blob to write the contents of the input stream to.  * @param   inputStream  *          The input stream from which to retrieve the bytes to write to the blob.  * @param   blobSize  *          The size of the blob to be written, in bytes.  It is implementation dependent whether  *          this value is used in writing the blob to the repository.  * @param   failIfAlreadyExists  *          whether to throw a FileAlreadyExistsException if the given blob already exists  * @throws  FileAlreadyExistsException if failIfAlreadyExists is true and a blob by the same name already exists  * @throws  IOException if the input stream could not be read, or the target blob could not be written to.  */ ;/**  * Reads blob content from the input stream and writes it to the container in a new blob with the given name.  * This method assumes the container does not already contain a blob of the same blobName.  If a blob by the  * same name already exists, the operation will fail and an {@link IOException} will be thrown.  *  * @param   blobName  *          The name of the blob to write the contents of the input stream to.  * @param   inputStream  *          The input stream from which to retrieve the bytes to write to the blob.  * @param   blobSize  *          The size of the blob to be written, in bytes.  It is implementation dependent whether  *          this value is used in writing the blob to the repository.  * @param   failIfAlreadyExists  *          whether to throw a FileAlreadyExistsException if the given blob already exists  * @throws  FileAlreadyExistsException if failIfAlreadyExists is true and a blob by the same name already exists  * @throws  IOException if the input stream could not be read, or the target blob could not be written to.  */ void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException.
true;;4;1;/**  * Reads blob content from the input stream and writes it to the container in a new blob with the given name,  * using an atomic write operation if the implementation supports it.  *  * This method assumes the container does not already contain a blob of the same blobName.  If a blob by the  * same name already exists, the operation will fail and an {@link IOException} will be thrown.  *  * @param   blobName  *          The name of the blob to write the contents of the input stream to.  * @param   inputStream  *          The input stream from which to retrieve the bytes to write to the blob.  * @param   blobSize  *          The size of the blob to be written, in bytes.  It is implementation dependent whether  *          this value is used in writing the blob to the repository.  * @param   failIfAlreadyExists  *          whether to throw a FileAlreadyExistsException if the given blob already exists  * @throws  FileAlreadyExistsException if failIfAlreadyExists is true and a blob by the same name already exists  * @throws  IOException if the input stream could not be read, or the target blob could not be written to.  */ ;/**  * Reads blob content from the input stream and writes it to the container in a new blob with the given name,  * using an atomic write operation if the implementation supports it.  *  * This method assumes the container does not already contain a blob of the same blobName.  If a blob by the  * same name already exists, the operation will fail and an {@link IOException} will be thrown.  *  * @param   blobName  *          The name of the blob to write the contents of the input stream to.  * @param   inputStream  *          The input stream from which to retrieve the bytes to write to the blob.  * @param   blobSize  *          The size of the blob to be written, in bytes.  It is implementation dependent whether  *          this value is used in writing the blob to the repository.  * @param   failIfAlreadyExists  *          whether to throw a FileAlreadyExistsException if the given blob already exists  * @throws  FileAlreadyExistsException if failIfAlreadyExists is true and a blob by the same name already exists  * @throws  IOException if the input stream could not be read, or the target blob could not be written to.  */ void writeBlobAtomic(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException.
true;;1;1;/**  * Deletes a blob with giving name, if the blob exists. If the blob does not exist,  * this method throws a NoSuchFileException.  *  * @param   blobName  *          The name of the blob to delete.  * @throws  NoSuchFileException if the blob does not exist  * @throws  IOException if the blob exists but could not be deleted.  */ ;/**  * Deletes a blob with giving name, if the blob exists. If the blob does not exist,  * this method throws a NoSuchFileException.  *  * @param   blobName  *          The name of the blob to delete.  * @throws  NoSuchFileException if the blob does not exist  * @throws  IOException if the blob exists but could not be deleted.  */ void deleteBlob(String blobName) throws IOException.
true;default;1;7;/**  * Deletes a blob with giving name, ignoring if the blob does not exist.  *  * @param   blobName  *          The name of the blob to delete.  * @throws  IOException if the blob exists but could not be deleted.  */ ;/**  * Deletes a blob with giving name, ignoring if the blob does not exist.  *  * @param   blobName  *          The name of the blob to delete.  * @throws  IOException if the blob exists but could not be deleted.  */ default void deleteBlobIgnoringIfNotExists(String blobName) throws IOException {     try {         deleteBlob(blobName).     } catch (final NoSuchFileException ignored) {     // This exception is ignored     } }
true;;0;1;/**  * Lists all blobs in the container.  *  * @return  A map of all the blobs in the container.  The keys in the map are the names of the blobs and  *          the values are {@link BlobMetaData}, containing basic information about each blob.  * @throws  IOException if there were any failures in reading from the blob container.  */ ;/**  * Lists all blobs in the container.  *  * @return  A map of all the blobs in the container.  The keys in the map are the names of the blobs and  *          the values are {@link BlobMetaData}, containing basic information about each blob.  * @throws  IOException if there were any failures in reading from the blob container.  */ Map<String, BlobMetaData> listBlobs() throws IOException.
true;;1;1;/**  * Lists all blobs in the container that match the specified prefix.  *  * @param   blobNamePrefix  *          The prefix to match against blob names in the container.  * @return  A map of the matching blobs in the container.  The keys in the map are the names of the blobs  *          and the values are {@link BlobMetaData}, containing basic information about each blob.  * @throws  IOException if there were any failures in reading from the blob container.  */ ;/**  * Lists all blobs in the container that match the specified prefix.  *  * @param   blobNamePrefix  *          The prefix to match against blob names in the container.  * @return  A map of the matching blobs in the container.  The keys in the map are the names of the blobs  *          and the values are {@link BlobMetaData}, containing basic information about each blob.  * @throws  IOException if there were any failures in reading from the blob container.  */ Map<String, BlobMetaData> listBlobsByPrefix(String blobNamePrefix) throws IOException.
