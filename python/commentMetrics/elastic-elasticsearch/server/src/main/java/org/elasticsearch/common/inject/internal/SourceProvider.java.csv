commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Returns a new instance that also skips {@code moreClassesToSkip}.  */ ;/**  * Returns a new instance that also skips {@code moreClassesToSkip}.  */ @SuppressWarnings("rawtypes") public SourceProvider plusSkippedClasses(Class... moreClassesToSkip) {     return new SourceProvider(this, moreClassesToSkip). }
true;public;0;9;/**  * Returns the calling line of code. The selected line is the nearest to the top of the stack that  * is not skipped.  */ ;/**  * Returns the calling line of code. The selected line is the nearest to the top of the stack that  * is not skipped.  */ public StackTraceElement get() {     for (final StackTraceElement element : new Throwable().getStackTrace()) {         String className = element.getClassName().         if (!classNamesToSkip.contains(className)) {             return element.         }     }     throw new AssertionError(). }
