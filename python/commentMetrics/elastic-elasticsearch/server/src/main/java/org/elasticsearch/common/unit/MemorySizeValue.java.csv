commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;17;/**  * Parse the provided string as a memory size. This method either accepts absolute values such as  *  {@code 42} (default assumed unit is byte) or {@code 2mb}, or percentages of the heap size: if  *  the heap is 1G, {@code 10%} will be parsed as {@code 100mb}.  */ ;/**  * Parse the provided string as a memory size. This method either accepts absolute values such as  *  {@code 42} (default assumed unit is byte) or {@code 2mb}, or percentages of the heap size: if  *  the heap is 1G, {@code 10%} will be parsed as {@code 100mb}.  */ public static ByteSizeValue parseBytesSizeValueOrHeapRatio(String sValue, String settingName) {     settingName = Objects.requireNonNull(settingName).     if (sValue != null && sValue.endsWith("%")) {         final String percentAsString = sValue.substring(0, sValue.length() - 1).         try {             final double percent = Double.parseDouble(percentAsString).             if (percent < 0 || percent > 100) {                 throw new ElasticsearchParseException("percentage should be in [0-100], got [{}]", percentAsString).             }             return new ByteSizeValue((long) ((percent / 100) * JvmInfo.jvmInfo().getMem().getHeapMax().getBytes()), ByteSizeUnit.BYTES).         } catch (NumberFormatException e) {             throw new ElasticsearchParseException("failed to parse [{}] as a double", e, percentAsString).         }     } else {         return parseBytesSizeValue(sValue, settingName).     } }
