commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     shardSearchLocalRequest.innerWriteTo(out, false).     OriginalIndices.writeOriginalIndices(originalIndices, out). }
false;public;0;7;;@Override public String[] indices() {     if (originalIndices == null) {         return null.     }     return originalIndices.indices(). }
false;public;0;7;;@Override public IndicesOptions indicesOptions() {     if (originalIndices == null) {         return null.     }     return originalIndices.indicesOptions(). }
false;public;0;4;;@Override public ShardId shardId() {     return shardSearchLocalRequest.shardId(). }
false;public;0;4;;@Override public String[] types() {     return shardSearchLocalRequest.types(). }
false;public;0;4;;@Override public SearchSourceBuilder source() {     return shardSearchLocalRequest.source(). }
false;public;0;4;;@Override public AliasFilter getAliasFilter() {     return shardSearchLocalRequest.getAliasFilter(). }
false;public;1;4;;@Override public void setAliasFilter(AliasFilter filter) {     shardSearchLocalRequest.setAliasFilter(filter). }
false;public;1;4;;@Override public void source(SearchSourceBuilder source) {     shardSearchLocalRequest.source(source). }
false;public;0;4;;@Override public int numberOfShards() {     return shardSearchLocalRequest.numberOfShards(). }
false;public;0;4;;@Override public SearchType searchType() {     return shardSearchLocalRequest.searchType(). }
false;public;0;4;;@Override public float indexBoost() {     return shardSearchLocalRequest.indexBoost(). }
false;public;0;4;;@Override public long nowInMillis() {     return shardSearchLocalRequest.nowInMillis(). }
false;public;0;4;;@Override public Boolean requestCache() {     return shardSearchLocalRequest.requestCache(). }
false;public;0;4;;@Override public boolean allowPartialSearchResults() {     return shardSearchLocalRequest.allowPartialSearchResults(). }
false;public;0;4;;@Override public Scroll scroll() {     return shardSearchLocalRequest.scroll(). }
false;public;0;4;;@Override public String[] indexRoutings() {     return shardSearchLocalRequest.indexRoutings(). }
false;public;0;4;;@Override public String preference() {     return shardSearchLocalRequest.preference(). }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public BytesReference cacheKey() throws IOException {     return shardSearchLocalRequest.cacheKey(). }
false;public;5;4;;@Override public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {     return new SearchTask(id, type, action, getDescription(), parentTaskId, headers). }
false;public;0;5;;@Override public String getDescription() {     // Shard id is enough here, the request itself can be found by looking at the parent task description     return "shardId[" + shardSearchLocalRequest.shardId() + "]". }
false;public;0;4;;@Override public String getClusterAlias() {     return shardSearchLocalRequest.getClusterAlias(). }
false;public;0;4;;@Override public Rewriteable<Rewriteable> getRewriteable() {     return shardSearchLocalRequest.getRewriteable(). }
