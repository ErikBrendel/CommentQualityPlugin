# id;timestamp;commentText;codeText;commentWords;codeWords
ActionListener -> static <Response> ActionListener<Response> runAfter(ActionListener<Response> delegate, Runnable runAfter);1547195586;Wraps a given listener and returns a new listener which executes the provided {@code runAfter}_callback when the listener is notified via either {@code #onResponse} or {@code #onFailure}.;static <Response> ActionListener<Response> runAfter(ActionListener<Response> delegate, Runnable runAfter) {_        return new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                try {_                    delegate.onResponse(response)__                } finally {_                    runAfter.run()__                }_            }__            @Override_            public void onFailure(Exception e) {_                try {_                    delegate.onFailure(e)__                } finally {_                    runAfter.run()__                }_            }_        }__    };wraps,a,given,listener,and,returns,a,new,listener,which,executes,the,provided,code,run,after,callback,when,the,listener,is,notified,via,either,code,on,response,or,code,on,failure;static,response,action,listener,response,run,after,action,listener,response,delegate,runnable,run,after,return,new,action,listener,response,override,public,void,on,response,response,response,try,delegate,on,response,response,finally,run,after,run,override,public,void,on,failure,exception,e,try,delegate,on,failure,e,finally,run,after,run
ActionListener -> static <Response> ActionListener<Response> runAfter(ActionListener<Response> delegate, Runnable runAfter);1547508054;Wraps a given listener and returns a new listener which executes the provided {@code runAfter}_callback when the listener is notified via either {@code #onResponse} or {@code #onFailure}.;static <Response> ActionListener<Response> runAfter(ActionListener<Response> delegate, Runnable runAfter) {_        return new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                try {_                    delegate.onResponse(response)__                } finally {_                    runAfter.run()__                }_            }__            @Override_            public void onFailure(Exception e) {_                try {_                    delegate.onFailure(e)__                } finally {_                    runAfter.run()__                }_            }_        }__    };wraps,a,given,listener,and,returns,a,new,listener,which,executes,the,provided,code,run,after,callback,when,the,listener,is,notified,via,either,code,on,response,or,code,on,failure;static,response,action,listener,response,run,after,action,listener,response,delegate,runnable,run,after,return,new,action,listener,response,override,public,void,on,response,response,response,try,delegate,on,response,response,finally,run,after,run,override,public,void,on,failure,exception,e,try,delegate,on,failure,e,finally,run,after,run
ActionListener -> void onResponse(Response response)_;1524684173;Handle action response. This response may constitute a failure or a_success but it is up to the listener to make that decision.;void onResponse(Response response)_;handle,action,response,this,response,may,constitute,a,failure,or,a,success,but,it,is,up,to,the,listener,to,make,that,decision;void,on,response,response,response
ActionListener -> void onResponse(Response response)_;1527207653;Handle action response. This response may constitute a failure or a_success but it is up to the listener to make that decision.;void onResponse(Response response)_;handle,action,response,this,response,may,constitute,a,failure,or,a,success,but,it,is,up,to,the,listener,to,make,that,decision;void,on,response,response,response
ActionListener -> void onResponse(Response response)_;1547195586;Handle action response. This response may constitute a failure or a_success but it is up to the listener to make that decision.;void onResponse(Response response)_;handle,action,response,this,response,may,constitute,a,failure,or,a,success,but,it,is,up,to,the,listener,to,make,that,decision;void,on,response,response,response
ActionListener -> void onResponse(Response response)_;1547508054;Handle action response. This response may constitute a failure or a_success but it is up to the listener to make that decision.;void onResponse(Response response)_;handle,action,response,this,response,may,constitute,a,failure,or,a,success,but,it,is,up,to,the,listener,to,make,that,decision;void,on,response,response,response
ActionListener -> static <Response> BiConsumer<Response, Exception> toBiConsumer(ActionListener<Response> listener);1527207653;Converts a listener to a {@link BiConsumer} for compatibility with the {@link java.util.concurrent.CompletableFuture}_api.__@param listener that will be wrapped_@param <Response> the type of the response_@return a bi consumer that will complete the wrapped listener;static <Response> BiConsumer<Response, Exception> toBiConsumer(ActionListener<Response> listener) {_        return (response, throwable) -> {_            if (throwable == null) {_                listener.onResponse(response)__            } else {_                listener.onFailure(throwable)__            }_        }__    };converts,a,listener,to,a,link,bi,consumer,for,compatibility,with,the,link,java,util,concurrent,completable,future,api,param,listener,that,will,be,wrapped,param,response,the,type,of,the,response,return,a,bi,consumer,that,will,complete,the,wrapped,listener;static,response,bi,consumer,response,exception,to,bi,consumer,action,listener,response,listener,return,response,throwable,if,throwable,null,listener,on,response,response,else,listener,on,failure,throwable
ActionListener -> static <Response> BiConsumer<Response, Exception> toBiConsumer(ActionListener<Response> listener);1547195586;Converts a listener to a {@link BiConsumer} for compatibility with the {@link java.util.concurrent.CompletableFuture}_api.__@param listener that will be wrapped_@param <Response> the type of the response_@return a bi consumer that will complete the wrapped listener;static <Response> BiConsumer<Response, Exception> toBiConsumer(ActionListener<Response> listener) {_        return (response, throwable) -> {_            if (throwable == null) {_                listener.onResponse(response)__            } else {_                listener.onFailure(throwable)__            }_        }__    };converts,a,listener,to,a,link,bi,consumer,for,compatibility,with,the,link,java,util,concurrent,completable,future,api,param,listener,that,will,be,wrapped,param,response,the,type,of,the,response,return,a,bi,consumer,that,will,complete,the,wrapped,listener;static,response,bi,consumer,response,exception,to,bi,consumer,action,listener,response,listener,return,response,throwable,if,throwable,null,listener,on,response,response,else,listener,on,failure,throwable
ActionListener -> static <Response> BiConsumer<Response, Exception> toBiConsumer(ActionListener<Response> listener);1547508054;Converts a listener to a {@link BiConsumer} for compatibility with the {@link java.util.concurrent.CompletableFuture}_api.__@param listener that will be wrapped_@param <Response> the type of the response_@return a bi consumer that will complete the wrapped listener;static <Response> BiConsumer<Response, Exception> toBiConsumer(ActionListener<Response> listener) {_        return (response, throwable) -> {_            if (throwable == null) {_                listener.onResponse(response)__            } else {_                listener.onFailure(throwable)__            }_        }__    };converts,a,listener,to,a,link,bi,consumer,for,compatibility,with,the,link,java,util,concurrent,completable,future,api,param,listener,that,will,be,wrapped,param,response,the,type,of,the,response,return,a,bi,consumer,that,will,complete,the,wrapped,listener;static,response,bi,consumer,response,exception,to,bi,consumer,action,listener,response,listener,return,response,throwable,if,throwable,null,listener,on,response,response,else,listener,on,failure,throwable
ActionListener -> void onFailure(Exception e)_;1524684173;A failure caused by an exception at some phase of the task.;void onFailure(Exception e)_;a,failure,caused,by,an,exception,at,some,phase,of,the,task;void,on,failure,exception,e
ActionListener -> void onFailure(Exception e)_;1527207653;A failure caused by an exception at some phase of the task.;void onFailure(Exception e)_;a,failure,caused,by,an,exception,at,some,phase,of,the,task;void,on,failure,exception,e
ActionListener -> void onFailure(Exception e)_;1547195586;A failure caused by an exception at some phase of the task.;void onFailure(Exception e)_;a,failure,caused,by,an,exception,at,some,phase,of,the,task;void,on,failure,exception,e
ActionListener -> void onFailure(Exception e)_;1547508054;A failure caused by an exception at some phase of the task.;void onFailure(Exception e)_;a,failure,caused,by,an,exception,at,some,phase,of,the,task;void,on,failure,exception,e
ActionListener -> static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure);1524684173;Notifies every given listener with the failure passed to {@link #onFailure(Exception)}. If a listener itself throws an exception_all remaining listeners will be processed and the caught exception will be re-thrown.;static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure) {_        List<Exception> exceptionList = new ArrayList<>()__        for (ActionListener<Response> listener : listeners) {_            try {_                listener.onFailure(failure)__            } catch (Exception ex) {_                exceptionList.add(ex)__            }_        }_        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList)__    };notifies,every,given,listener,with,the,failure,passed,to,link,on,failure,exception,if,a,listener,itself,throws,an,exception,all,remaining,listeners,will,be,processed,and,the,caught,exception,will,be,re,thrown;static,response,void,on,failure,iterable,action,listener,response,listeners,exception,failure,list,exception,exception,list,new,array,list,for,action,listener,response,listener,listeners,try,listener,on,failure,failure,catch,exception,ex,exception,list,add,ex,exceptions,helper,maybe,throw,runtime,and,suppress,exception,list
ActionListener -> static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure);1527207653;Notifies every given listener with the failure passed to {@link #onFailure(Exception)}. If a listener itself throws an exception_all remaining listeners will be processed and the caught exception will be re-thrown.;static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure) {_        List<Exception> exceptionList = new ArrayList<>()__        for (ActionListener<Response> listener : listeners) {_            try {_                listener.onFailure(failure)__            } catch (Exception ex) {_                exceptionList.add(ex)__            }_        }_        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList)__    };notifies,every,given,listener,with,the,failure,passed,to,link,on,failure,exception,if,a,listener,itself,throws,an,exception,all,remaining,listeners,will,be,processed,and,the,caught,exception,will,be,re,thrown;static,response,void,on,failure,iterable,action,listener,response,listeners,exception,failure,list,exception,exception,list,new,array,list,for,action,listener,response,listener,listeners,try,listener,on,failure,failure,catch,exception,ex,exception,list,add,ex,exceptions,helper,maybe,throw,runtime,and,suppress,exception,list
ActionListener -> static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure);1547195586;Notifies every given listener with the failure passed to {@link #onFailure(Exception)}. If a listener itself throws an exception_all remaining listeners will be processed and the caught exception will be re-thrown.;static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure) {_        List<Exception> exceptionList = new ArrayList<>()__        for (ActionListener<Response> listener : listeners) {_            try {_                listener.onFailure(failure)__            } catch (Exception ex) {_                exceptionList.add(ex)__            }_        }_        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList)__    };notifies,every,given,listener,with,the,failure,passed,to,link,on,failure,exception,if,a,listener,itself,throws,an,exception,all,remaining,listeners,will,be,processed,and,the,caught,exception,will,be,re,thrown;static,response,void,on,failure,iterable,action,listener,response,listeners,exception,failure,list,exception,exception,list,new,array,list,for,action,listener,response,listener,listeners,try,listener,on,failure,failure,catch,exception,ex,exception,list,add,ex,exceptions,helper,maybe,throw,runtime,and,suppress,exception,list
ActionListener -> static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure);1547508054;Notifies every given listener with the failure passed to {@link #onFailure(Exception)}. If a listener itself throws an exception_all remaining listeners will be processed and the caught exception will be re-thrown.;static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure) {_        List<Exception> exceptionList = new ArrayList<>()__        for (ActionListener<Response> listener : listeners) {_            try {_                listener.onFailure(failure)__            } catch (Exception ex) {_                exceptionList.add(ex)__            }_        }_        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList)__    };notifies,every,given,listener,with,the,failure,passed,to,link,on,failure,exception,if,a,listener,itself,throws,an,exception,all,remaining,listeners,will,be,processed,and,the,caught,exception,will,be,re,thrown;static,response,void,on,failure,iterable,action,listener,response,listeners,exception,failure,list,exception,exception,list,new,array,list,for,action,listener,response,listener,listeners,try,listener,on,failure,failure,catch,exception,ex,exception,list,add,ex,exceptions,helper,maybe,throw,runtime,and,suppress,exception,list
ActionListener -> static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response);1524684173;Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception_the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining_listeners will be processed and the caught exception will be re-thrown.;static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response) {_        List<Exception> exceptionList = new ArrayList<>()__        for (ActionListener<Response> listener : listeners) {_            try {_                listener.onResponse(response)__            } catch (Exception ex) {_                try {_                    listener.onFailure(ex)__                } catch (Exception ex1) {_                    exceptionList.add(ex1)__                }_            }_        }_        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList)__    };notifies,every,given,listener,with,the,response,passed,to,link,on,response,object,if,a,listener,itself,throws,an,exception,the,exception,is,forwarded,to,link,on,failure,exception,if,in,turn,link,on,failure,exception,fails,all,remaining,listeners,will,be,processed,and,the,caught,exception,will,be,re,thrown;static,response,void,on,response,iterable,action,listener,response,listeners,response,response,list,exception,exception,list,new,array,list,for,action,listener,response,listener,listeners,try,listener,on,response,response,catch,exception,ex,try,listener,on,failure,ex,catch,exception,ex1,exception,list,add,ex1,exceptions,helper,maybe,throw,runtime,and,suppress,exception,list
ActionListener -> static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response);1527207653;Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception_the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining_listeners will be processed and the caught exception will be re-thrown.;static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response) {_        List<Exception> exceptionList = new ArrayList<>()__        for (ActionListener<Response> listener : listeners) {_            try {_                listener.onResponse(response)__            } catch (Exception ex) {_                try {_                    listener.onFailure(ex)__                } catch (Exception ex1) {_                    exceptionList.add(ex1)__                }_            }_        }_        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList)__    };notifies,every,given,listener,with,the,response,passed,to,link,on,response,object,if,a,listener,itself,throws,an,exception,the,exception,is,forwarded,to,link,on,failure,exception,if,in,turn,link,on,failure,exception,fails,all,remaining,listeners,will,be,processed,and,the,caught,exception,will,be,re,thrown;static,response,void,on,response,iterable,action,listener,response,listeners,response,response,list,exception,exception,list,new,array,list,for,action,listener,response,listener,listeners,try,listener,on,response,response,catch,exception,ex,try,listener,on,failure,ex,catch,exception,ex1,exception,list,add,ex1,exceptions,helper,maybe,throw,runtime,and,suppress,exception,list
ActionListener -> static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response);1547195586;Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception_the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining_listeners will be processed and the caught exception will be re-thrown.;static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response) {_        List<Exception> exceptionList = new ArrayList<>()__        for (ActionListener<Response> listener : listeners) {_            try {_                listener.onResponse(response)__            } catch (Exception ex) {_                try {_                    listener.onFailure(ex)__                } catch (Exception ex1) {_                    exceptionList.add(ex1)__                }_            }_        }_        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList)__    };notifies,every,given,listener,with,the,response,passed,to,link,on,response,object,if,a,listener,itself,throws,an,exception,the,exception,is,forwarded,to,link,on,failure,exception,if,in,turn,link,on,failure,exception,fails,all,remaining,listeners,will,be,processed,and,the,caught,exception,will,be,re,thrown;static,response,void,on,response,iterable,action,listener,response,listeners,response,response,list,exception,exception,list,new,array,list,for,action,listener,response,listener,listeners,try,listener,on,response,response,catch,exception,ex,try,listener,on,failure,ex,catch,exception,ex1,exception,list,add,ex1,exceptions,helper,maybe,throw,runtime,and,suppress,exception,list
ActionListener -> static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response);1547508054;Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception_the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining_listeners will be processed and the caught exception will be re-thrown.;static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response) {_        List<Exception> exceptionList = new ArrayList<>()__        for (ActionListener<Response> listener : listeners) {_            try {_                listener.onResponse(response)__            } catch (Exception ex) {_                try {_                    listener.onFailure(ex)__                } catch (Exception ex1) {_                    exceptionList.add(ex1)__                }_            }_        }_        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList)__    };notifies,every,given,listener,with,the,response,passed,to,link,on,response,object,if,a,listener,itself,throws,an,exception,the,exception,is,forwarded,to,link,on,failure,exception,if,in,turn,link,on,failure,exception,fails,all,remaining,listeners,will,be,processed,and,the,caught,exception,will,be,re,thrown;static,response,void,on,response,iterable,action,listener,response,listeners,response,response,list,exception,exception,list,new,array,list,for,action,listener,response,listener,listeners,try,listener,on,response,response,catch,exception,ex,try,listener,on,failure,ex,catch,exception,ex1,exception,list,add,ex1,exceptions,helper,maybe,throw,runtime,and,suppress,exception,list
ActionListener -> static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse,             Consumer<Exception> onFailure);1524684173;Creates a listener that listens for a response (or failure) and executes the_corresponding consumer when the response (or failure) is received.__@param onResponse the checked consumer of the response, when the listener receives one_@param onFailure the consumer of the failure, when the listener receives one_@param <Response> the type of the response_@return a listener that listens for responses and invokes the consumer when received;static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse,_            Consumer<Exception> onFailure) {_        return new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                try {_                    onResponse.accept(response)__                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                onFailure.accept(e)__            }_        }__    };creates,a,listener,that,listens,for,a,response,or,failure,and,executes,the,corresponding,consumer,when,the,response,or,failure,is,received,param,on,response,the,checked,consumer,of,the,response,when,the,listener,receives,one,param,on,failure,the,consumer,of,the,failure,when,the,listener,receives,one,param,response,the,type,of,the,response,return,a,listener,that,listens,for,responses,and,invokes,the,consumer,when,received;static,response,action,listener,response,wrap,checked,consumer,response,extends,exception,on,response,consumer,exception,on,failure,return,new,action,listener,response,override,public,void,on,response,response,response,try,on,response,accept,response,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,on,failure,accept,e
ActionListener -> static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse,             Consumer<Exception> onFailure);1527207653;Creates a listener that listens for a response (or failure) and executes the_corresponding consumer when the response (or failure) is received.__@param onResponse the checked consumer of the response, when the listener receives one_@param onFailure the consumer of the failure, when the listener receives one_@param <Response> the type of the response_@return a listener that listens for responses and invokes the consumer when received;static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse,_            Consumer<Exception> onFailure) {_        return new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                try {_                    onResponse.accept(response)__                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                onFailure.accept(e)__            }_        }__    };creates,a,listener,that,listens,for,a,response,or,failure,and,executes,the,corresponding,consumer,when,the,response,or,failure,is,received,param,on,response,the,checked,consumer,of,the,response,when,the,listener,receives,one,param,on,failure,the,consumer,of,the,failure,when,the,listener,receives,one,param,response,the,type,of,the,response,return,a,listener,that,listens,for,responses,and,invokes,the,consumer,when,received;static,response,action,listener,response,wrap,checked,consumer,response,extends,exception,on,response,consumer,exception,on,failure,return,new,action,listener,response,override,public,void,on,response,response,response,try,on,response,accept,response,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,on,failure,accept,e
ActionListener -> static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse,             Consumer<Exception> onFailure);1547195586;Creates a listener that listens for a response (or failure) and executes the_corresponding consumer when the response (or failure) is received.__@param onResponse the checked consumer of the response, when the listener receives one_@param onFailure the consumer of the failure, when the listener receives one_@param <Response> the type of the response_@return a listener that listens for responses and invokes the consumer when received;static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse,_            Consumer<Exception> onFailure) {_        return new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                try {_                    onResponse.accept(response)__                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                onFailure.accept(e)__            }_        }__    };creates,a,listener,that,listens,for,a,response,or,failure,and,executes,the,corresponding,consumer,when,the,response,or,failure,is,received,param,on,response,the,checked,consumer,of,the,response,when,the,listener,receives,one,param,on,failure,the,consumer,of,the,failure,when,the,listener,receives,one,param,response,the,type,of,the,response,return,a,listener,that,listens,for,responses,and,invokes,the,consumer,when,received;static,response,action,listener,response,wrap,checked,consumer,response,extends,exception,on,response,consumer,exception,on,failure,return,new,action,listener,response,override,public,void,on,response,response,response,try,on,response,accept,response,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,on,failure,accept,e
ActionListener -> static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse,             Consumer<Exception> onFailure);1547508054;Creates a listener that listens for a response (or failure) and executes the_corresponding consumer when the response (or failure) is received.__@param onResponse the checked consumer of the response, when the listener receives one_@param onFailure the consumer of the failure, when the listener receives one_@param <Response> the type of the response_@return a listener that listens for responses and invokes the consumer when received;static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse,_            Consumer<Exception> onFailure) {_        return new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                try {_                    onResponse.accept(response)__                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                onFailure.accept(e)__            }_        }__    };creates,a,listener,that,listens,for,a,response,or,failure,and,executes,the,corresponding,consumer,when,the,response,or,failure,is,received,param,on,response,the,checked,consumer,of,the,response,when,the,listener,receives,one,param,on,failure,the,consumer,of,the,failure,when,the,listener,receives,one,param,response,the,type,of,the,response,return,a,listener,that,listens,for,responses,and,invokes,the,consumer,when,received;static,response,action,listener,response,wrap,checked,consumer,response,extends,exception,on,response,consumer,exception,on,failure,return,new,action,listener,response,override,public,void,on,response,response,response,try,on,response,accept,response,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,on,failure,accept,e
ActionListener -> static <Response> ActionListener<Response> notifyOnce(ActionListener<Response> delegate);1547195586;Wraps a given listener and returns a new listener which makes sure {@link #onResponse(Object)}_and {@link #onFailure(Exception)} of the provided listener will be called at most once.;static <Response> ActionListener<Response> notifyOnce(ActionListener<Response> delegate) {_        return new NotifyOnceListener<Response>() {_            @Override_            protected void innerOnResponse(Response response) {_                delegate.onResponse(response)__            }__            @Override_            protected void innerOnFailure(Exception e) {_                delegate.onFailure(e)__            }_        }__    };wraps,a,given,listener,and,returns,a,new,listener,which,makes,sure,link,on,response,object,and,link,on,failure,exception,of,the,provided,listener,will,be,called,at,most,once;static,response,action,listener,response,notify,once,action,listener,response,delegate,return,new,notify,once,listener,response,override,protected,void,inner,on,response,response,response,delegate,on,response,response,override,protected,void,inner,on,failure,exception,e,delegate,on,failure,e
ActionListener -> static <Response> ActionListener<Response> notifyOnce(ActionListener<Response> delegate);1547508054;Wraps a given listener and returns a new listener which makes sure {@link #onResponse(Object)}_and {@link #onFailure(Exception)} of the provided listener will be called at most once.;static <Response> ActionListener<Response> notifyOnce(ActionListener<Response> delegate) {_        return new NotifyOnceListener<Response>() {_            @Override_            protected void innerOnResponse(Response response) {_                delegate.onResponse(response)__            }__            @Override_            protected void innerOnFailure(Exception e) {_                delegate.onFailure(e)__            }_        }__    };wraps,a,given,listener,and,returns,a,new,listener,which,makes,sure,link,on,response,object,and,link,on,failure,exception,of,the,provided,listener,will,be,called,at,most,once;static,response,action,listener,response,notify,once,action,listener,response,delegate,return,new,notify,once,listener,response,override,protected,void,inner,on,response,response,response,delegate,on,response,response,override,protected,void,inner,on,failure,exception,e,delegate,on,failure,e
ActionListener -> static <Response> ActionListener<Response> wrap(Runnable runnable);1524684173;Creates a listener that listens for a response (or failure) and executes the_corresponding runnable when the response (or failure) is received.__@param runnable the runnable that will be called in event of success or failure_@param <Response> the type of the response_@return a listener that listens for responses and invokes the runnable when received;static <Response> ActionListener<Response> wrap(Runnable runnable) {_        return wrap(r -> runnable.run(), e -> runnable.run())__    };creates,a,listener,that,listens,for,a,response,or,failure,and,executes,the,corresponding,runnable,when,the,response,or,failure,is,received,param,runnable,the,runnable,that,will,be,called,in,event,of,success,or,failure,param,response,the,type,of,the,response,return,a,listener,that,listens,for,responses,and,invokes,the,runnable,when,received;static,response,action,listener,response,wrap,runnable,runnable,return,wrap,r,runnable,run,e,runnable,run
ActionListener -> static <Response> ActionListener<Response> wrap(Runnable runnable);1527207653;Creates a listener that listens for a response (or failure) and executes the_corresponding runnable when the response (or failure) is received.__@param runnable the runnable that will be called in event of success or failure_@param <Response> the type of the response_@return a listener that listens for responses and invokes the runnable when received;static <Response> ActionListener<Response> wrap(Runnable runnable) {_        return wrap(r -> runnable.run(), e -> runnable.run())__    };creates,a,listener,that,listens,for,a,response,or,failure,and,executes,the,corresponding,runnable,when,the,response,or,failure,is,received,param,runnable,the,runnable,that,will,be,called,in,event,of,success,or,failure,param,response,the,type,of,the,response,return,a,listener,that,listens,for,responses,and,invokes,the,runnable,when,received;static,response,action,listener,response,wrap,runnable,runnable,return,wrap,r,runnable,run,e,runnable,run
ActionListener -> static <Response> ActionListener<Response> wrap(Runnable runnable);1547195586;Creates a listener that listens for a response (or failure) and executes the_corresponding runnable when the response (or failure) is received.__@param runnable the runnable that will be called in event of success or failure_@param <Response> the type of the response_@return a listener that listens for responses and invokes the runnable when received;static <Response> ActionListener<Response> wrap(Runnable runnable) {_        return wrap(r -> runnable.run(), e -> runnable.run())__    };creates,a,listener,that,listens,for,a,response,or,failure,and,executes,the,corresponding,runnable,when,the,response,or,failure,is,received,param,runnable,the,runnable,that,will,be,called,in,event,of,success,or,failure,param,response,the,type,of,the,response,return,a,listener,that,listens,for,responses,and,invokes,the,runnable,when,received;static,response,action,listener,response,wrap,runnable,runnable,return,wrap,r,runnable,run,e,runnable,run
ActionListener -> static <Response> ActionListener<Response> wrap(Runnable runnable);1547508054;Creates a listener that listens for a response (or failure) and executes the_corresponding runnable when the response (or failure) is received.__@param runnable the runnable that will be called in event of success or failure_@param <Response> the type of the response_@return a listener that listens for responses and invokes the runnable when received;static <Response> ActionListener<Response> wrap(Runnable runnable) {_        return wrap(r -> runnable.run(), e -> runnable.run())__    };creates,a,listener,that,listens,for,a,response,or,failure,and,executes,the,corresponding,runnable,when,the,response,or,failure,is,received,param,runnable,the,runnable,that,will,be,called,in,event,of,success,or,failure,param,response,the,type,of,the,response,return,a,listener,that,listens,for,responses,and,invokes,the,runnable,when,received;static,response,action,listener,response,wrap,runnable,runnable,return,wrap,r,runnable,run,e,runnable,run
