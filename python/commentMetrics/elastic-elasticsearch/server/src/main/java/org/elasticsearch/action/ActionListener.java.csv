commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Handle action response. This response may constitute a failure or a  * success but it is up to the listener to make that decision.  */ ;/**  * Handle action response. This response may constitute a failure or a  * success but it is up to the listener to make that decision.  */ void onResponse(Response response).
true;;1;1;/**  * A failure caused by an exception at some phase of the task.  */ ;/**  * A failure caused by an exception at some phase of the task.  */ void onFailure(Exception e).
false;public;1;8;;@Override public void onResponse(Response response) {     try {         onResponse.accept(response).     } catch (Exception e) {         onFailure(e).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     onFailure.accept(e). }
true;static;2;18;/**  * Creates a listener that listens for a response (or failure) and executes the  * corresponding consumer when the response (or failure) is received.  *  * @param onResponse the checked consumer of the response, when the listener receives one  * @param onFailure the consumer of the failure, when the listener receives one  * @param <Response> the type of the response  * @return a listener that listens for responses and invokes the consumer when received  */ ;/**  * Creates a listener that listens for a response (or failure) and executes the  * corresponding consumer when the response (or failure) is received.  *  * @param onResponse the checked consumer of the response, when the listener receives one  * @param onFailure the consumer of the failure, when the listener receives one  * @param <Response> the type of the response  * @return a listener that listens for responses and invokes the consumer when received  */ static <Response> ActionListener<Response> wrap(CheckedConsumer<Response, ? extends Exception> onResponse, Consumer<Exception> onFailure) {     return new ActionListener<Response>() {          @Override         public void onResponse(Response response) {             try {                 onResponse.accept(response).             } catch (Exception e) {                 onFailure(e).             }         }          @Override         public void onFailure(Exception e) {             onFailure.accept(e).         }     }. }
true;static;1;3;/**  * Creates a listener that listens for a response (or failure) and executes the  * corresponding runnable when the response (or failure) is received.  *  * @param runnable the runnable that will be called in event of success or failure  * @param <Response> the type of the response  * @return a listener that listens for responses and invokes the runnable when received  */ ;/**  * Creates a listener that listens for a response (or failure) and executes the  * corresponding runnable when the response (or failure) is received.  *  * @param runnable the runnable that will be called in event of success or failure  * @param <Response> the type of the response  * @return a listener that listens for responses and invokes the runnable when received  */ static <Response> ActionListener<Response> wrap(Runnable runnable) {     return wrap(r -> runnable.run(), e -> runnable.run()). }
true;static;1;9;/**  * Converts a listener to a {@link BiConsumer} for compatibility with the {@link java.util.concurrent.CompletableFuture}  * api.  *  * @param listener that will be wrapped  * @param <Response> the type of the response  * @return a bi consumer that will complete the wrapped listener  */ ;/**  * Converts a listener to a {@link BiConsumer} for compatibility with the {@link java.util.concurrent.CompletableFuture}  * api.  *  * @param listener that will be wrapped  * @param <Response> the type of the response  * @return a bi consumer that will complete the wrapped listener  */ static <Response> BiConsumer<Response, Exception> toBiConsumer(ActionListener<Response> listener) {     return (response, throwable) -> {         if (throwable == null) {             listener.onResponse(response).         } else {             listener.onFailure(throwable).         }     }. }
true;static;2;15;/**  * Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception  * the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining  * listeners will be processed and the caught exception will be re-thrown.  */ ;/**  * Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception  * the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining  * listeners will be processed and the caught exception will be re-thrown.  */ static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response) {     List<Exception> exceptionList = new ArrayList<>().     for (ActionListener<Response> listener : listeners) {         try {             listener.onResponse(response).         } catch (Exception ex) {             try {                 listener.onFailure(ex).             } catch (Exception ex1) {                 exceptionList.add(ex1).             }         }     }     ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList). }
true;static;2;11;/**  * Notifies every given listener with the failure passed to {@link #onFailure(Exception)}. If a listener itself throws an exception  * all remaining listeners will be processed and the caught exception will be re-thrown.  */ ;/**  * Notifies every given listener with the failure passed to {@link #onFailure(Exception)}. If a listener itself throws an exception  * all remaining listeners will be processed and the caught exception will be re-thrown.  */ static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure) {     List<Exception> exceptionList = new ArrayList<>().     for (ActionListener<Response> listener : listeners) {         try {             listener.onFailure(failure).         } catch (Exception ex) {             exceptionList.add(ex).         }     }     ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList). }
false;public;1;8;;@Override public void onResponse(Response response) {     try {         delegate.onResponse(response).     } finally {         runAfter.run().     } }
false;public;1;8;;@Override public void onFailure(Exception e) {     try {         delegate.onFailure(e).     } finally {         runAfter.run().     } }
true;static;2;21;/**  * Wraps a given listener and returns a new listener which executes the provided {@code runAfter}  * callback when the listener is notified via either {@code #onResponse} or {@code #onFailure}.  */ ;/**  * Wraps a given listener and returns a new listener which executes the provided {@code runAfter}  * callback when the listener is notified via either {@code #onResponse} or {@code #onFailure}.  */ static <Response> ActionListener<Response> runAfter(ActionListener<Response> delegate, Runnable runAfter) {     return new ActionListener<Response>() {          @Override         public void onResponse(Response response) {             try {                 delegate.onResponse(response).             } finally {                 runAfter.run().             }         }          @Override         public void onFailure(Exception e) {             try {                 delegate.onFailure(e).             } finally {                 runAfter.run().             }         }     }. }
false;protected;1;4;;@Override protected void innerOnResponse(Response response) {     delegate.onResponse(response). }
false;protected;1;4;;@Override protected void innerOnFailure(Exception e) {     delegate.onFailure(e). }
true;static;1;13;/**  * Wraps a given listener and returns a new listener which makes sure {@link #onResponse(Object)}  * and {@link #onFailure(Exception)} of the provided listener will be called at most once.  */ ;/**  * Wraps a given listener and returns a new listener which makes sure {@link #onResponse(Object)}  * and {@link #onFailure(Exception)} of the provided listener will be called at most once.  */ static <Response> ActionListener<Response> notifyOnce(ActionListener<Response> delegate) {     return new NotifyOnceListener<Response>() {          @Override         protected void innerOnResponse(Response response) {             delegate.onResponse(response).         }          @Override         protected void innerOnFailure(Exception e) {             delegate.onFailure(e).         }     }. }
true;static;2;7;/**  * Completes the given listener with the result from the provided supplier accordingly.  * This method is mainly used to complete a listener with a block of synchronous code.  */ ;/**  * Completes the given listener with the result from the provided supplier accordingly.  * This method is mainly used to complete a listener with a block of synchronous code.  */ static <Response> void completeWith(ActionListener<Response> listener, CheckedSupplier<Response, ? extends Exception> supplier) {     try {         listener.onResponse(supplier.get()).     } catch (Exception e) {         listener.onFailure(e).     } }
