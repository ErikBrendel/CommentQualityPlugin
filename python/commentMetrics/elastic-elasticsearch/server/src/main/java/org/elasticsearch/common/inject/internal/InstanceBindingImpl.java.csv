commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Provider<T> getProvider() {     return this.provider. }
false;public;1;4;;@Override public <V> V acceptTargetVisitor(BindingTargetVisitor<? super T, V> visitor) {     return visitor.visit(this). }
false;public;0;4;;@Override public T getInstance() {     return instance. }
false;public;0;4;;@Override public Set<InjectionPoint> getInjectionPoints() {     return injectionPoints. }
false;public;0;6;;@Override public Set<Dependency<?>> getDependencies() {     return instance instanceof HasDependencies ? unmodifiableSet(new HashSet<>((((HasDependencies) instance).getDependencies()))) : Dependency.forInjectionPoints(injectionPoints). }
false;public;1;4;;@Override public BindingImpl<T> withScoping(Scoping scoping) {     return new InstanceBindingImpl<>(getSource(), getKey(), scoping, injectionPoints, instance). }
false;public;1;4;;@Override public BindingImpl<T> withKey(Key<T> key) {     return new InstanceBindingImpl<>(getSource(), key, getScoping(), injectionPoints, instance). }
false;public;1;5;;@Override public void applyTo(Binder binder) {     // instance bindings aren't scoped     binder.withSource(getSource()).bind(getKey()).toInstance(instance). }
false;public;0;8;;@Override public String toString() {     return new ToStringBuilder(InstanceBinding.class).add("key", getKey()).add("source", getSource()).add("instance", instance).toString(). }
