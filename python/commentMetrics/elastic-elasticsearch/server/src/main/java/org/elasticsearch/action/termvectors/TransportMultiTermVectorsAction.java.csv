commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;45;;@Override protected void doExecute(Task task, final MultiTermVectorsRequest request, final ActionListener<MultiTermVectorsResponse> listener) {     ClusterState clusterState = clusterService.state().     clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ).     final AtomicArray<MultiTermVectorsItemResponse> responses = new AtomicArray<>(request.requests.size()).     Map<ShardId, MultiTermVectorsShardRequest> shardRequests = new HashMap<>().     for (int i = 0. i < request.requests.size(). i++) {         TermVectorsRequest termVectorsRequest = request.requests.get(i).         termVectorsRequest.routing(clusterState.metaData().resolveIndexRouting(termVectorsRequest.routing(), termVectorsRequest.index())).         if (!clusterState.metaData().hasConcreteIndex(termVectorsRequest.index())) {             responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(termVectorsRequest.index(), termVectorsRequest.type(), termVectorsRequest.id(), new IndexNotFoundException(termVectorsRequest.index())))).             continue.         }         String concreteSingleIndex = indexNameExpressionResolver.concreteSingleIndex(clusterState, termVectorsRequest).getName().         if (termVectorsRequest.routing() == null && clusterState.getMetaData().routingRequired(concreteSingleIndex)) {             responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(concreteSingleIndex, termVectorsRequest.type(), termVectorsRequest.id(), new RoutingMissingException(concreteSingleIndex, termVectorsRequest.type(), termVectorsRequest.id())))).             continue.         }         ShardId shardId = clusterService.operationRouting().shardId(clusterState, concreteSingleIndex, termVectorsRequest.id(), termVectorsRequest.routing()).         MultiTermVectorsShardRequest shardRequest = shardRequests.get(shardId).         if (shardRequest == null) {             shardRequest = new MultiTermVectorsShardRequest(shardId.getIndexName(), shardId.id()).             shardRequest.preference(request.preference).             shardRequests.put(shardId, shardRequest).         }         shardRequest.add(i, termVectorsRequest).     }     if (shardRequests.size() == 0) {         // only failures..         listener.onResponse(new MultiTermVectorsResponse(responses.toArray(new MultiTermVectorsItemResponse[responses.length()]))).     }     executeShardAction(listener, responses, shardRequests). }
false;public;1;10;;@Override public void onResponse(MultiTermVectorsShardResponse response) {     for (int i = 0. i < response.locations.size(). i++) {         responses.set(response.locations.get(i), new MultiTermVectorsItemResponse(response.responses.get(i), response.failures.get(i))).     }     if (counter.decrementAndGet() == 0) {         finishHim().     } }
false;public;1;13;;@Override public void onFailure(Exception e) {     // create failures for all relevant requests     for (int i = 0. i < shardRequest.locations.size(). i++) {         TermVectorsRequest termVectorsRequest = shardRequest.requests.get(i).         responses.set(shardRequest.locations.get(i), new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(shardRequest.index(), termVectorsRequest.type(), termVectorsRequest.id(), e))).     }     if (counter.decrementAndGet() == 0) {         finishHim().     } }
false;private;0;4;;private void finishHim() {     listener.onResponse(new MultiTermVectorsResponse(responses.toArray(new MultiTermVectorsItemResponse[responses.length()]))). }
false;protected;3;39;;protected void executeShardAction(ActionListener<MultiTermVectorsResponse> listener, AtomicArray<MultiTermVectorsItemResponse> responses, Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {     final AtomicInteger counter = new AtomicInteger(shardRequests.size()).     for (final MultiTermVectorsShardRequest shardRequest : shardRequests.values()) {         shardAction.execute(shardRequest, new ActionListener<MultiTermVectorsShardResponse>() {              @Override             public void onResponse(MultiTermVectorsShardResponse response) {                 for (int i = 0. i < response.locations.size(). i++) {                     responses.set(response.locations.get(i), new MultiTermVectorsItemResponse(response.responses.get(i), response.failures.get(i))).                 }                 if (counter.decrementAndGet() == 0) {                     finishHim().                 }             }              @Override             public void onFailure(Exception e) {                 // create failures for all relevant requests                 for (int i = 0. i < shardRequest.locations.size(). i++) {                     TermVectorsRequest termVectorsRequest = shardRequest.requests.get(i).                     responses.set(shardRequest.locations.get(i), new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(shardRequest.index(), termVectorsRequest.type(), termVectorsRequest.id(), e))).                 }                 if (counter.decrementAndGet() == 0) {                     finishHim().                 }             }              private void finishHim() {                 listener.onResponse(new MultiTermVectorsResponse(responses.toArray(new MultiTermVectorsItemResponse[responses.length()]))).             }         }).     } }
