# id;timestamp;commentText;codeText;commentWords;codeWords
AggregatorBase -> @Override     public String name();1524684173;@return  The name of the aggregation.;@Override_    public String name() {_        return name__    };return,the,name,of,the,aggregation;override,public,string,name,return,name
AggregatorBase -> @Override     public String name();1535965276;@return  The name of the aggregation.;@Override_    public String name() {_        return name__    };return,the,name,of,the,aggregation;override,public,string,name,return,name
AggregatorBase -> @Override     public String name();1536314350;@return  The name of the aggregation.;@Override_    public String name() {_        return name__    };return,the,name,of,the,aggregation;override,public,string,name,return,name
AggregatorBase -> protected AggregatorBase(String name, AggregatorFactories factories, SearchContext context, Aggregator parent,             List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException;1524684173;Constructs a new Aggregator.__@param name                  The name of the aggregation_@param factories             The factories for all the sub-aggregators under this aggregator_@param context               The aggregation context_@param parent                The parent aggregator (may be {@code null} for top level aggregators)_@param metaData              The metaData associated with this aggregator;protected AggregatorBase(String name, AggregatorFactories factories, SearchContext context, Aggregator parent,_            List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {_        this.name = name__        this.pipelineAggregators = pipelineAggregators__        this.metaData = metaData__        this.parent = parent__        this.context = context__        this.breakerService = context.bigArrays().breakerService()__        assert factories != null : "sub-factories provided to BucketAggregator must not be null, use AggragatorFactories.EMPTY instead"__        this.subAggregators = factories.createSubAggregators(this)__        context.addReleasable(this, Lifetime.PHASE)__        _        collectableSubAggregators = new BucketCollector() {_            void badState(){_                throw new QueryPhaseExecutionException(AggregatorBase.this.context,_                        "preCollection not called on new Aggregator before use", null)__            }_            @Override_            public LeafBucketCollector getLeafCollector(LeafReaderContext reader) {_                badState()__                assert false__                return null_ _            }__            @Override_            public void preCollection() throws IOException {_                badState()__            }__            @Override_            public void postCollection() throws IOException {_                badState()__            }_            @Override_            public boolean needsScores() {_                badState()__                return false_ _            }_        }__        addRequestCircuitBreakerBytes(DEFAULT_WEIGHT)__    };constructs,a,new,aggregator,param,name,the,name,of,the,aggregation,param,factories,the,factories,for,all,the,sub,aggregators,under,this,aggregator,param,context,the,aggregation,context,param,parent,the,parent,aggregator,may,be,code,null,for,top,level,aggregators,param,meta,data,the,meta,data,associated,with,this,aggregator;protected,aggregator,base,string,name,aggregator,factories,factories,search,context,context,aggregator,parent,list,pipeline,aggregator,pipeline,aggregators,map,string,object,meta,data,throws,ioexception,this,name,name,this,pipeline,aggregators,pipeline,aggregators,this,meta,data,meta,data,this,parent,parent,this,context,context,this,breaker,service,context,big,arrays,breaker,service,assert,factories,null,sub,factories,provided,to,bucket,aggregator,must,not,be,null,use,aggragator,factories,empty,instead,this,sub,aggregators,factories,create,sub,aggregators,this,context,add,releasable,this,lifetime,phase,collectable,sub,aggregators,new,bucket,collector,void,bad,state,throw,new,query,phase,execution,exception,aggregator,base,this,context,pre,collection,not,called,on,new,aggregator,before,use,null,override,public,leaf,bucket,collector,get,leaf,collector,leaf,reader,context,reader,bad,state,assert,false,return,null,override,public,void,pre,collection,throws,ioexception,bad,state,override,public,void,post,collection,throws,ioexception,bad,state,override,public,boolean,needs,scores,bad,state,return,false,add,request,circuit,breaker,bytes
AggregatorBase -> protected AggregatorBase(String name, AggregatorFactories factories, SearchContext context, Aggregator parent,             List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException;1535965276;Constructs a new Aggregator.__@param name                  The name of the aggregation_@param factories             The factories for all the sub-aggregators under this aggregator_@param context               The aggregation context_@param parent                The parent aggregator (may be {@code null} for top level aggregators)_@param metaData              The metaData associated with this aggregator;protected AggregatorBase(String name, AggregatorFactories factories, SearchContext context, Aggregator parent,_            List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {_        this.name = name__        this.pipelineAggregators = pipelineAggregators__        this.metaData = metaData__        this.parent = parent__        this.context = context__        this.breakerService = context.bigArrays().breakerService()__        assert factories != null : "sub-factories provided to BucketAggregator must not be null, use AggragatorFactories.EMPTY instead"__        this.subAggregators = factories.createSubAggregators(this)__        context.addReleasable(this, Lifetime.PHASE)__        _        collectableSubAggregators = new BucketCollector() {_            void badState(){_                throw new QueryPhaseExecutionException(AggregatorBase.this.context,_                        "preCollection not called on new Aggregator before use", null)__            }_            @Override_            public LeafBucketCollector getLeafCollector(LeafReaderContext reader) {_                badState()__                assert false__                return null_ _            }__            @Override_            public void preCollection() throws IOException {_                badState()__            }__            @Override_            public void postCollection() throws IOException {_                badState()__            }_            @Override_            public boolean needsScores() {_                badState()__                return false_ _            }_        }__        addRequestCircuitBreakerBytes(DEFAULT_WEIGHT)__    };constructs,a,new,aggregator,param,name,the,name,of,the,aggregation,param,factories,the,factories,for,all,the,sub,aggregators,under,this,aggregator,param,context,the,aggregation,context,param,parent,the,parent,aggregator,may,be,code,null,for,top,level,aggregators,param,meta,data,the,meta,data,associated,with,this,aggregator;protected,aggregator,base,string,name,aggregator,factories,factories,search,context,context,aggregator,parent,list,pipeline,aggregator,pipeline,aggregators,map,string,object,meta,data,throws,ioexception,this,name,name,this,pipeline,aggregators,pipeline,aggregators,this,meta,data,meta,data,this,parent,parent,this,context,context,this,breaker,service,context,big,arrays,breaker,service,assert,factories,null,sub,factories,provided,to,bucket,aggregator,must,not,be,null,use,aggragator,factories,empty,instead,this,sub,aggregators,factories,create,sub,aggregators,this,context,add,releasable,this,lifetime,phase,collectable,sub,aggregators,new,bucket,collector,void,bad,state,throw,new,query,phase,execution,exception,aggregator,base,this,context,pre,collection,not,called,on,new,aggregator,before,use,null,override,public,leaf,bucket,collector,get,leaf,collector,leaf,reader,context,reader,bad,state,assert,false,return,null,override,public,void,pre,collection,throws,ioexception,bad,state,override,public,void,post,collection,throws,ioexception,bad,state,override,public,boolean,needs,scores,bad,state,return,false,add,request,circuit,breaker,bytes
AggregatorBase -> protected AggregatorBase(String name, AggregatorFactories factories, SearchContext context, Aggregator parent,             List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException;1536314350;Constructs a new Aggregator.__@param name                  The name of the aggregation_@param factories             The factories for all the sub-aggregators under this aggregator_@param context               The aggregation context_@param parent                The parent aggregator (may be {@code null} for top level aggregators)_@param metaData              The metaData associated with this aggregator;protected AggregatorBase(String name, AggregatorFactories factories, SearchContext context, Aggregator parent,_            List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {_        this.name = name__        this.pipelineAggregators = pipelineAggregators__        this.metaData = metaData__        this.parent = parent__        this.context = context__        this.breakerService = context.bigArrays().breakerService()__        assert factories != null : "sub-factories provided to BucketAggregator must not be null, use AggragatorFactories.EMPTY instead"__        this.subAggregators = factories.createSubAggregators(this)__        context.addReleasable(this, Lifetime.PHASE)__        _        collectableSubAggregators = new BucketCollector() {_            void badState(){_                throw new QueryPhaseExecutionException(AggregatorBase.this.context,_                        "preCollection not called on new Aggregator before use", null)__            }_            @Override_            public LeafBucketCollector getLeafCollector(LeafReaderContext reader) {_                badState()__                assert false__                return null_ _            }__            @Override_            public void preCollection() throws IOException {_                badState()__            }__            @Override_            public void postCollection() throws IOException {_                badState()__            }_            @Override_            public ScoreMode scoreMode() {_                badState()__                return ScoreMode.COMPLETE_ _            }_        }__        addRequestCircuitBreakerBytes(DEFAULT_WEIGHT)__    };constructs,a,new,aggregator,param,name,the,name,of,the,aggregation,param,factories,the,factories,for,all,the,sub,aggregators,under,this,aggregator,param,context,the,aggregation,context,param,parent,the,parent,aggregator,may,be,code,null,for,top,level,aggregators,param,meta,data,the,meta,data,associated,with,this,aggregator;protected,aggregator,base,string,name,aggregator,factories,factories,search,context,context,aggregator,parent,list,pipeline,aggregator,pipeline,aggregators,map,string,object,meta,data,throws,ioexception,this,name,name,this,pipeline,aggregators,pipeline,aggregators,this,meta,data,meta,data,this,parent,parent,this,context,context,this,breaker,service,context,big,arrays,breaker,service,assert,factories,null,sub,factories,provided,to,bucket,aggregator,must,not,be,null,use,aggragator,factories,empty,instead,this,sub,aggregators,factories,create,sub,aggregators,this,context,add,releasable,this,lifetime,phase,collectable,sub,aggregators,new,bucket,collector,void,bad,state,throw,new,query,phase,execution,exception,aggregator,base,this,context,pre,collection,not,called,on,new,aggregator,before,use,null,override,public,leaf,bucket,collector,get,leaf,collector,leaf,reader,context,reader,bad,state,assert,false,return,null,override,public,void,pre,collection,throws,ioexception,bad,state,override,public,void,post,collection,throws,ioexception,bad,state,override,public,score,mode,score,mode,bad,state,return,score,mode,complete,add,request,circuit,breaker,bytes
AggregatorBase -> @Override     public final void postCollection() throws IOException;1524684173;Called after collection of all document is done.;@Override_    public final void postCollection() throws IOException {_        _        doPostCollection()__        collectableSubAggregators.postCollection()__    };called,after,collection,of,all,document,is,done;override,public,final,void,post,collection,throws,ioexception,do,post,collection,collectable,sub,aggregators,post,collection
AggregatorBase -> @Override     public final void postCollection() throws IOException;1535965276;Called after collection of all document is done.;@Override_    public final void postCollection() throws IOException {_        _        doPostCollection()__        collectableSubAggregators.postCollection()__    };called,after,collection,of,all,document,is,done;override,public,final,void,post,collection,throws,ioexception,do,post,collection,collectable,sub,aggregators,post,collection
AggregatorBase -> @Override     public final void postCollection() throws IOException;1536314350;Called after collection of all document is done.;@Override_    public final void postCollection() throws IOException {_        _        doPostCollection()__        collectableSubAggregators.postCollection()__    };called,after,collection,of,all,document,is,done;override,public,final,void,post,collection,throws,ioexception,do,post,collection,collectable,sub,aggregators,post,collection
AggregatorBase -> protected void doPreCollection() throws IOException;1524684173;Can be overridden by aggregator implementation to be called back when the collection phase starts.;protected void doPreCollection() throws IOException {_    };can,be,overridden,by,aggregator,implementation,to,be,called,back,when,the,collection,phase,starts;protected,void,do,pre,collection,throws,ioexception
AggregatorBase -> protected void doPreCollection() throws IOException;1535965276;Can be overridden by aggregator implementation to be called back when the collection phase starts.;protected void doPreCollection() throws IOException {_    };can,be,overridden,by,aggregator,implementation,to,be,called,back,when,the,collection,phase,starts;protected,void,do,pre,collection,throws,ioexception
AggregatorBase -> protected void doPreCollection() throws IOException;1536314350;Can be overridden by aggregator implementation to be called back when the collection phase starts.;protected void doPreCollection() throws IOException {_    };can,be,overridden,by,aggregator,implementation,to,be,called,back,when,the,collection,phase,starts;protected,void,do,pre,collection,throws,ioexception
AggregatorBase -> protected abstract LeafBucketCollector getLeafCollector(LeafReaderContext ctx, LeafBucketCollector sub) throws IOException_;1524684173;Get a {@link LeafBucketCollector} for the given ctx, which should_delegate to the given collector.;protected abstract LeafBucketCollector getLeafCollector(LeafReaderContext ctx, LeafBucketCollector sub) throws IOException_;get,a,link,leaf,bucket,collector,for,the,given,ctx,which,should,delegate,to,the,given,collector;protected,abstract,leaf,bucket,collector,get,leaf,collector,leaf,reader,context,ctx,leaf,bucket,collector,sub,throws,ioexception
AggregatorBase -> protected abstract LeafBucketCollector getLeafCollector(LeafReaderContext ctx, LeafBucketCollector sub) throws IOException_;1535965276;Get a {@link LeafBucketCollector} for the given ctx, which should_delegate to the given collector.;protected abstract LeafBucketCollector getLeafCollector(LeafReaderContext ctx, LeafBucketCollector sub) throws IOException_;get,a,link,leaf,bucket,collector,for,the,given,ctx,which,should,delegate,to,the,given,collector;protected,abstract,leaf,bucket,collector,get,leaf,collector,leaf,reader,context,ctx,leaf,bucket,collector,sub,throws,ioexception
AggregatorBase -> protected abstract LeafBucketCollector getLeafCollector(LeafReaderContext ctx, LeafBucketCollector sub) throws IOException_;1536314350;Get a {@link LeafBucketCollector} for the given ctx, which should_delegate to the given collector.;protected abstract LeafBucketCollector getLeafCollector(LeafReaderContext ctx, LeafBucketCollector sub) throws IOException_;get,a,link,leaf,bucket,collector,for,the,given,ctx,which,should,delegate,to,the,given,collector;protected,abstract,leaf,bucket,collector,get,leaf,collector,leaf,reader,context,ctx,leaf,bucket,collector,sub,throws,ioexception
AggregatorBase -> protected void doPostCollection() throws IOException;1524684173;Can be overridden by aggregator implementation to be called back when the collection phase ends.;protected void doPostCollection() throws IOException {_    };can,be,overridden,by,aggregator,implementation,to,be,called,back,when,the,collection,phase,ends;protected,void,do,post,collection,throws,ioexception
AggregatorBase -> protected void doPostCollection() throws IOException;1535965276;Can be overridden by aggregator implementation to be called back when the collection phase ends.;protected void doPostCollection() throws IOException {_    };can,be,overridden,by,aggregator,implementation,to,be,called,back,when,the,collection,phase,ends;protected,void,do,post,collection,throws,ioexception
AggregatorBase -> protected void doPostCollection() throws IOException;1536314350;Can be overridden by aggregator implementation to be called back when the collection phase ends.;protected void doPostCollection() throws IOException {_    };can,be,overridden,by,aggregator,implementation,to,be,called,back,when,the,collection,phase,ends;protected,void,do,post,collection,throws,ioexception
AggregatorBase -> @Override     public boolean needsScores();1524684173;Most aggregators don't need scores, make sure to extend this method if_your aggregator needs them.;@Override_    public boolean needsScores() {_        for (Aggregator agg : subAggregators) {_            if (agg.needsScores()) {_                return true__            }_        }_        return false__    };most,aggregators,don,t,need,scores,make,sure,to,extend,this,method,if,your,aggregator,needs,them;override,public,boolean,needs,scores,for,aggregator,agg,sub,aggregators,if,agg,needs,scores,return,true,return,false
AggregatorBase -> @Override     public boolean needsScores();1535965276;Most aggregators don't need scores, make sure to extend this method if_your aggregator needs them.;@Override_    public boolean needsScores() {_        for (Aggregator agg : subAggregators) {_            if (agg.needsScores()) {_                return true__            }_        }_        return false__    };most,aggregators,don,t,need,scores,make,sure,to,extend,this,method,if,your,aggregator,needs,them;override,public,boolean,needs,scores,for,aggregator,agg,sub,aggregators,if,agg,needs,scores,return,true,return,false
AggregatorBase -> @Override     public Aggregator parent();1524684173;@return  The parent aggregator of this aggregator. The addAggregation are hierarchical in the sense that some can_be composed out of others (more specifically, bucket addAggregation can define other addAggregation that will_be aggregated per bucket). This method returns the direct parent aggregator that contains this aggregator, or_{@code null} if there is none (meaning, this aggregator is a top level one);@Override_    public Aggregator parent() {_        return parent__    };return,the,parent,aggregator,of,this,aggregator,the,add,aggregation,are,hierarchical,in,the,sense,that,some,can,be,composed,out,of,others,more,specifically,bucket,add,aggregation,can,define,other,add,aggregation,that,will,be,aggregated,per,bucket,this,method,returns,the,direct,parent,aggregator,that,contains,this,aggregator,or,code,null,if,there,is,none,meaning,this,aggregator,is,a,top,level,one;override,public,aggregator,parent,return,parent
AggregatorBase -> @Override     public Aggregator parent();1535965276;@return  The parent aggregator of this aggregator. The addAggregation are hierarchical in the sense that some can_be composed out of others (more specifically, bucket addAggregation can define other addAggregation that will_be aggregated per bucket). This method returns the direct parent aggregator that contains this aggregator, or_{@code null} if there is none (meaning, this aggregator is a top level one);@Override_    public Aggregator parent() {_        return parent__    };return,the,parent,aggregator,of,this,aggregator,the,add,aggregation,are,hierarchical,in,the,sense,that,some,can,be,composed,out,of,others,more,specifically,bucket,add,aggregation,can,define,other,add,aggregation,that,will,be,aggregated,per,bucket,this,method,returns,the,direct,parent,aggregator,that,contains,this,aggregator,or,code,null,if,there,is,none,meaning,this,aggregator,is,a,top,level,one;override,public,aggregator,parent,return,parent
AggregatorBase -> @Override     public Aggregator parent();1536314350;@return  The parent aggregator of this aggregator. The addAggregation are hierarchical in the sense that some can_be composed out of others (more specifically, bucket addAggregation can define other addAggregation that will_be aggregated per bucket). This method returns the direct parent aggregator that contains this aggregator, or_{@code null} if there is none (meaning, this aggregator is a top level one);@Override_    public Aggregator parent() {_        return parent__    };return,the,parent,aggregator,of,this,aggregator,the,add,aggregation,are,hierarchical,in,the,sense,that,some,can,be,composed,out,of,others,more,specifically,bucket,add,aggregation,can,define,other,add,aggregation,that,will,be,aggregated,per,bucket,this,method,returns,the,direct,parent,aggregator,that,contains,this,aggregator,or,code,null,if,there,is,none,meaning,this,aggregator,is,a,top,level,one;override,public,aggregator,parent,return,parent
AggregatorBase -> protected long addRequestCircuitBreakerBytes(long bytes);1524684173;Increment or decrement the number of bytes that have been allocated to service_this request and potentially trigger a {@link CircuitBreakingException}. The_number of bytes allocated is automatically decremented with the circuit breaker_service on closure of this aggregator._If memory has been returned, decrement it without tripping the breaker._For performance reasons subclasses should not call this millions of times_each with small increments and instead batch up into larger allocations.__@param bytes the number of bytes to register or negative to deregister the bytes_@return the cumulative size in bytes allocated by this aggregator to service this request;protected long addRequestCircuitBreakerBytes(long bytes) {_        _        if (bytes > 0) {_            this.breakerService_                    .getBreaker(CircuitBreaker.REQUEST)_                    .addEstimateBytesAndMaybeBreak(bytes, "<agg [" + name + "]>")__        } else {_            this.breakerService_                    .getBreaker(CircuitBreaker.REQUEST)_                    .addWithoutBreaking(bytes)__        }_        this.requestBytesUsed += bytes__        return requestBytesUsed__    };increment,or,decrement,the,number,of,bytes,that,have,been,allocated,to,service,this,request,and,potentially,trigger,a,link,circuit,breaking,exception,the,number,of,bytes,allocated,is,automatically,decremented,with,the,circuit,breaker,service,on,closure,of,this,aggregator,if,memory,has,been,returned,decrement,it,without,tripping,the,breaker,for,performance,reasons,subclasses,should,not,call,this,millions,of,times,each,with,small,increments,and,instead,batch,up,into,larger,allocations,param,bytes,the,number,of,bytes,to,register,or,negative,to,deregister,the,bytes,return,the,cumulative,size,in,bytes,allocated,by,this,aggregator,to,service,this,request;protected,long,add,request,circuit,breaker,bytes,long,bytes,if,bytes,0,this,breaker,service,get,breaker,circuit,breaker,request,add,estimate,bytes,and,maybe,break,bytes,agg,name,else,this,breaker,service,get,breaker,circuit,breaker,request,add,without,breaking,bytes,this,request,bytes,used,bytes,return,request,bytes,used
AggregatorBase -> protected long addRequestCircuitBreakerBytes(long bytes);1535965276;Increment or decrement the number of bytes that have been allocated to service_this request and potentially trigger a {@link CircuitBreakingException}. The_number of bytes allocated is automatically decremented with the circuit breaker_service on closure of this aggregator._If memory has been returned, decrement it without tripping the breaker._For performance reasons subclasses should not call this millions of times_each with small increments and instead batch up into larger allocations.__@param bytes the number of bytes to register or negative to deregister the bytes_@return the cumulative size in bytes allocated by this aggregator to service this request;protected long addRequestCircuitBreakerBytes(long bytes) {_        _        if (bytes > 0) {_            this.breakerService_                    .getBreaker(CircuitBreaker.REQUEST)_                    .addEstimateBytesAndMaybeBreak(bytes, "<agg [" + name + "]>")__        } else {_            this.breakerService_                    .getBreaker(CircuitBreaker.REQUEST)_                    .addWithoutBreaking(bytes)__        }_        this.requestBytesUsed += bytes__        return requestBytesUsed__    };increment,or,decrement,the,number,of,bytes,that,have,been,allocated,to,service,this,request,and,potentially,trigger,a,link,circuit,breaking,exception,the,number,of,bytes,allocated,is,automatically,decremented,with,the,circuit,breaker,service,on,closure,of,this,aggregator,if,memory,has,been,returned,decrement,it,without,tripping,the,breaker,for,performance,reasons,subclasses,should,not,call,this,millions,of,times,each,with,small,increments,and,instead,batch,up,into,larger,allocations,param,bytes,the,number,of,bytes,to,register,or,negative,to,deregister,the,bytes,return,the,cumulative,size,in,bytes,allocated,by,this,aggregator,to,service,this,request;protected,long,add,request,circuit,breaker,bytes,long,bytes,if,bytes,0,this,breaker,service,get,breaker,circuit,breaker,request,add,estimate,bytes,and,maybe,break,bytes,agg,name,else,this,breaker,service,get,breaker,circuit,breaker,request,add,without,breaking,bytes,this,request,bytes,used,bytes,return,request,bytes,used
AggregatorBase -> protected long addRequestCircuitBreakerBytes(long bytes);1536314350;Increment or decrement the number of bytes that have been allocated to service_this request and potentially trigger a {@link CircuitBreakingException}. The_number of bytes allocated is automatically decremented with the circuit breaker_service on closure of this aggregator._If memory has been returned, decrement it without tripping the breaker._For performance reasons subclasses should not call this millions of times_each with small increments and instead batch up into larger allocations.__@param bytes the number of bytes to register or negative to deregister the bytes_@return the cumulative size in bytes allocated by this aggregator to service this request;protected long addRequestCircuitBreakerBytes(long bytes) {_        _        if (bytes > 0) {_            this.breakerService_                    .getBreaker(CircuitBreaker.REQUEST)_                    .addEstimateBytesAndMaybeBreak(bytes, "<agg [" + name + "]>")__        } else {_            this.breakerService_                    .getBreaker(CircuitBreaker.REQUEST)_                    .addWithoutBreaking(bytes)__        }_        this.requestBytesUsed += bytes__        return requestBytesUsed__    };increment,or,decrement,the,number,of,bytes,that,have,been,allocated,to,service,this,request,and,potentially,trigger,a,link,circuit,breaking,exception,the,number,of,bytes,allocated,is,automatically,decremented,with,the,circuit,breaker,service,on,closure,of,this,aggregator,if,memory,has,been,returned,decrement,it,without,tripping,the,breaker,for,performance,reasons,subclasses,should,not,call,this,millions,of,times,each,with,small,increments,and,instead,batch,up,into,larger,allocations,param,bytes,the,number,of,bytes,to,register,or,negative,to,deregister,the,bytes,return,the,cumulative,size,in,bytes,allocated,by,this,aggregator,to,service,this,request;protected,long,add,request,circuit,breaker,bytes,long,bytes,if,bytes,0,this,breaker,service,get,breaker,circuit,breaker,request,add,estimate,bytes,and,maybe,break,bytes,agg,name,else,this,breaker,service,get,breaker,circuit,breaker,request,add,without,breaking,bytes,this,request,bytes,used,bytes,return,request,bytes,used
AggregatorBase -> protected void preGetSubLeafCollectors() throws IOException;1524684173;Can be overridden by aggregator implementations that like the perform an operation before the leaf collectors_of children aggregators are instantiated for the next segment.;protected void preGetSubLeafCollectors() throws IOException {_    };can,be,overridden,by,aggregator,implementations,that,like,the,perform,an,operation,before,the,leaf,collectors,of,children,aggregators,are,instantiated,for,the,next,segment;protected,void,pre,get,sub,leaf,collectors,throws,ioexception
AggregatorBase -> protected void preGetSubLeafCollectors() throws IOException;1535965276;Can be overridden by aggregator implementations that like the perform an operation before the leaf collectors_of children aggregators are instantiated for the next segment.;protected void preGetSubLeafCollectors() throws IOException {_    };can,be,overridden,by,aggregator,implementations,that,like,the,perform,an,operation,before,the,leaf,collectors,of,children,aggregators,are,instantiated,for,the,next,segment;protected,void,pre,get,sub,leaf,collectors,throws,ioexception
AggregatorBase -> protected void preGetSubLeafCollectors() throws IOException;1536314350;Can be overridden by aggregator implementations that like the perform an operation before the leaf collectors_of children aggregators are instantiated for the next segment.;protected void preGetSubLeafCollectors() throws IOException {_    };can,be,overridden,by,aggregator,implementations,that,like,the,perform,an,operation,before,the,leaf,collectors,of,children,aggregators,are,instantiated,for,the,next,segment;protected,void,pre,get,sub,leaf,collectors,throws,ioexception
AggregatorBase -> @Override     public SearchContext context();1524684173;@return  The current aggregation context.;@Override_    public SearchContext context() {_        return context__    };return,the,current,aggregation,context;override,public,search,context,context,return,context
AggregatorBase -> @Override     public SearchContext context();1535965276;@return  The current aggregation context.;@Override_    public SearchContext context() {_        return context__    };return,the,current,aggregation,context;override,public,search,context,context,return,context
AggregatorBase -> @Override     public SearchContext context();1536314350;@return  The current aggregation context.;@Override_    public SearchContext context() {_        return context__    };return,the,current,aggregation,context;override,public,search,context,context,return,context
AggregatorBase -> @Override     public void close();1524684173;Called upon release of the aggregator.;@Override_    public void close() {_        try {_            doClose()__        } finally {_            this.breakerService.getBreaker(CircuitBreaker.REQUEST).addWithoutBreaking(-this.requestBytesUsed)__        }_    };called,upon,release,of,the,aggregator;override,public,void,close,try,do,close,finally,this,breaker,service,get,breaker,circuit,breaker,request,add,without,breaking,this,request,bytes,used
AggregatorBase -> @Override     public void close();1535965276;Called upon release of the aggregator.;@Override_    public void close() {_        try {_            doClose()__        } finally {_            this.breakerService.getBreaker(CircuitBreaker.REQUEST).addWithoutBreaking(-this.requestBytesUsed)__        }_    };called,upon,release,of,the,aggregator;override,public,void,close,try,do,close,finally,this,breaker,service,get,breaker,circuit,breaker,request,add,without,breaking,this,request,bytes,used
AggregatorBase -> @Override     public void close();1536314350;Called upon release of the aggregator.;@Override_    public void close() {_        try {_            doClose()__        } finally {_            this.breakerService.getBreaker(CircuitBreaker.REQUEST).addWithoutBreaking(-this.requestBytesUsed)__        }_    };called,upon,release,of,the,aggregator;override,public,void,close,try,do,close,finally,this,breaker,service,get,breaker,circuit,breaker,request,add,without,breaking,this,request,bytes,used
AggregatorBase -> protected void doClose();1524684173;Release instance-specific data.;protected void doClose() {};release,instance,specific,data;protected,void,do,close
AggregatorBase -> protected void doClose();1535965276;Release instance-specific data.;protected void doClose() {};release,instance,specific,data;protected,void,do,close
AggregatorBase -> protected void doClose();1536314350;Release instance-specific data.;protected void doClose() {};release,instance,specific,data;protected,void,do,close
