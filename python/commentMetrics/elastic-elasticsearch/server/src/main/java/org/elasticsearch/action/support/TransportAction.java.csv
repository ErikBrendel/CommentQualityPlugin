# id;timestamp;commentText;codeText;commentWords;codeWords
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1524684173;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1528893677;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1528977744;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1529487105;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1529658035;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1529916082;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1531179852;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1541092382;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1541419698;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final Task execute(Request request, TaskListener<Response> listener);1548401719;Execute the transport action on the local node, returning the {@link Task} used to track its execution and accepting a_{@link TaskListener} which listens for the completion of the action.;public final Task execute(Request request, TaskListener<Response> listener) {_        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onResponse(task, response)__            }__            @Override_            public void onFailure(Exception e) {_                if (task != null) {_                    taskManager.unregister(task)__                }_                listener.onFailure(task, e)__            }_        })__        return task__    };execute,the,transport,action,on,the,local,node,returning,the,link,task,used,to,track,its,execution,and,accepting,a,link,task,listener,which,listens,for,the,completion,of,the,action;public,final,task,execute,request,request,task,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,if,task,null,task,manager,unregister,task,listener,on,response,task,response,override,public,void,on,failure,exception,e,if,task,null,task,manager,unregister,task,listener,on,failure,task,e,return,task
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1524684173;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1528893677;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1528977744;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1529487105;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1529658035;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1529916082;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1531179852;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1541092382;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1541419698;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final void execute(Task task, Request request, ActionListener<Response> listener);1548401719;Use this method when the transport action should continue to run in the context of the current task;public final void execute(Task task, Request request, ActionListener<Response> listener) {_        ActionRequestValidationException validationException = request.validate()__        if (validationException != null) {_            listener.onFailure(validationException)__            return__        }__        if (task != null && request.getShouldStoreResult()) {_            listener = new TaskResultStoringActionListener<>(taskManager, task, listener)__        }__        RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger)__        requestFilterChain.proceed(task, actionName, request, listener)__    };use,this,method,when,the,transport,action,should,continue,to,run,in,the,context,of,the,current,task;public,final,void,execute,task,task,request,request,action,listener,response,listener,action,request,validation,exception,validation,exception,request,validate,if,validation,exception,null,listener,on,failure,validation,exception,return,if,task,null,request,get,should,store,result,listener,new,task,result,storing,action,listener,task,manager,task,listener,request,filter,chain,request,response,request,filter,chain,new,request,filter,chain,this,logger,request,filter,chain,proceed,task,action,name,request,listener
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1524684173;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        if (task == null) {_            execute(null, request, listener)__        } else {_            execute(task, request, new ActionListener<Response>() {_                @Override_                public void onResponse(Response response) {_                    taskManager.unregister(task)__                    listener.onResponse(response)__                }__                @Override_                public void onFailure(Exception e) {_                    taskManager.unregister(task)__                    listener.onFailure(e)__                }_            })__        }_        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,if,task,null,execute,null,request,listener,else,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1528893677;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        if (task == null) {_            execute(null, request, listener)__        } else {_            execute(task, request, new ActionListener<Response>() {_                @Override_                public void onResponse(Response response) {_                    taskManager.unregister(task)__                    listener.onResponse(response)__                }__                @Override_                public void onFailure(Exception e) {_                    taskManager.unregister(task)__                    listener.onFailure(e)__                }_            })__        }_        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,if,task,null,execute,null,request,listener,else,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1528977744;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        if (task == null) {_            execute(null, request, listener)__        } else {_            execute(task, request, new ActionListener<Response>() {_                @Override_                public void onResponse(Response response) {_                    taskManager.unregister(task)__                    listener.onResponse(response)__                }__                @Override_                public void onFailure(Exception e) {_                    taskManager.unregister(task)__                    listener.onFailure(e)__                }_            })__        }_        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,if,task,null,execute,null,request,listener,else,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1529487105;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        if (task == null) {_            execute(null, request, listener)__        } else {_            execute(task, request, new ActionListener<Response>() {_                @Override_                public void onResponse(Response response) {_                    taskManager.unregister(task)__                    listener.onResponse(response)__                }__                @Override_                public void onFailure(Exception e) {_                    taskManager.unregister(task)__                    listener.onFailure(e)__                }_            })__        }_        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,if,task,null,execute,null,request,listener,else,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1529658035;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        if (task == null) {_            execute(null, request, listener)__        } else {_            execute(task, request, new ActionListener<Response>() {_                @Override_                public void onResponse(Response response) {_                    taskManager.unregister(task)__                    listener.onResponse(response)__                }__                @Override_                public void onFailure(Exception e) {_                    taskManager.unregister(task)__                    listener.onFailure(e)__                }_            })__        }_        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,if,task,null,execute,null,request,listener,else,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1529916082;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        if (task == null) {_            execute(null, request, listener)__        } else {_            execute(task, request, new ActionListener<Response>() {_                @Override_                public void onResponse(Response response) {_                    taskManager.unregister(task)__                    listener.onResponse(response)__                }__                @Override_                public void onFailure(Exception e) {_                    taskManager.unregister(task)__                    listener.onFailure(e)__                }_            })__        }_        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,if,task,null,execute,null,request,listener,else,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1531179852;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                taskManager.unregister(task)__                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                taskManager.unregister(task)__                listener.onFailure(e)__            }_        })__        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1541092382;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                taskManager.unregister(task)__                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                taskManager.unregister(task)__                listener.onFailure(e)__            }_        })__        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1541419698;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                taskManager.unregister(task)__                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                taskManager.unregister(task)__                listener.onFailure(e)__            }_        })__        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
TransportAction -> public final Task execute(Request request, ActionListener<Response> listener);1548401719;Use this method when the transport action call should result in creation of a new task associated with the call.__This is a typical behavior.;public final Task execute(Request request, ActionListener<Response> listener) {_        _        Task task = taskManager.register("transport", actionName, request)__        execute(task, request, new ActionListener<Response>() {_            @Override_            public void onResponse(Response response) {_                taskManager.unregister(task)__                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                taskManager.unregister(task)__                listener.onFailure(e)__            }_        })__        return task__    };use,this,method,when,the,transport,action,call,should,result,in,creation,of,a,new,task,associated,with,the,call,this,is,a,typical,behavior;public,final,task,execute,request,request,action,listener,response,listener,task,task,task,manager,register,transport,action,name,request,execute,task,request,new,action,listener,response,override,public,void,on,response,response,response,task,manager,unregister,task,listener,on,response,response,override,public,void,on,failure,exception,e,task,manager,unregister,task,listener,on,failure,e,return,task
