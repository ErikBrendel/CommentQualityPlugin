# id;timestamp;commentText;codeText;commentWords;codeWords
TaskManager -> public Task getTask(long id);1524684173;Returns a task with given id, or null if the task is not found.;public Task getTask(long id) {_        Task task = tasks.get(id)__        if (task != null) {_            return task__        } else {_            return getCancellableTask(id)__        }_    };returns,a,task,with,given,id,or,null,if,the,task,is,not,found;public,task,get,task,long,id,task,task,tasks,get,id,if,task,null,return,task,else,return,get,cancellable,task,id
TaskManager -> public Task getTask(long id);1531179852;Returns a task with given id, or null if the task is not found.;public Task getTask(long id) {_        Task task = tasks.get(id)__        if (task != null) {_            return task__        } else {_            return getCancellableTask(id)__        }_    };returns,a,task,with,given,id,or,null,if,the,task,is,not,found;public,task,get,task,long,id,task,task,tasks,get,id,if,task,null,return,task,else,return,get,cancellable,task,id
TaskManager -> public Task getTask(long id);1541092382;Returns a task with given id, or null if the task is not found.;public Task getTask(long id) {_        Task task = tasks.get(id)__        if (task != null) {_            return task__        } else {_            return getCancellableTask(id)__        }_    };returns,a,task,with,given,id,or,null,if,the,task,is,not,found;public,task,get,task,long,id,task,task,tasks,get,id,if,task,null,return,task,else,return,get,cancellable,task,id
TaskManager -> public Task getTask(long id);1542402632;Returns a task with given id, or null if the task is not found.;public Task getTask(long id) {_        Task task = tasks.get(id)__        if (task != null) {_            return task__        } else {_            return getCancellableTask(id)__        }_    };returns,a,task,with,given,id,or,null,if,the,task,is,not,found;public,task,get,task,long,id,task,task,tasks,get,id,if,task,null,return,task,else,return,get,cancellable,task,id
TaskManager -> public <Response extends ActionResponse> void storeResult(Task task, Response response, ActionListener<Response> listener);1524684173;Stores the task result;public <Response extends ActionResponse> void storeResult(Task task, Response response, ActionListener<Response> listener) {_        DiscoveryNode localNode = lastDiscoveryNodes.getLocalNode()__        if (localNode == null) {_            _            logger.warn("couldn't store response {}, the node didn't join the cluster yet", response)__            listener.onResponse(response)__            return__        }_        final TaskResult taskResult__        try {_            taskResult = task.result(localNode, response)__        } catch (IOException ex) {_            logger.warn(() -> new ParameterizedMessage("couldn't store response {}", response), ex)__            listener.onFailure(ex)__            return__        }__        taskResultsService.storeResult(taskResult, new ActionListener<Void>() {_            @Override_            public void onResponse(Void aVoid) {_                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("couldn't store response {}", response), e)__                listener.onFailure(e)__            }_        })__    };stores,the,task,result;public,response,extends,action,response,void,store,result,task,task,response,response,action,listener,response,listener,discovery,node,local,node,last,discovery,nodes,get,local,node,if,local,node,null,logger,warn,couldn,t,store,response,the,node,didn,t,join,the,cluster,yet,response,listener,on,response,response,return,final,task,result,task,result,try,task,result,task,result,local,node,response,catch,ioexception,ex,logger,warn,new,parameterized,message,couldn,t,store,response,response,ex,listener,on,failure,ex,return,task,results,service,store,result,task,result,new,action,listener,void,override,public,void,on,response,void,a,void,listener,on,response,response,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,couldn,t,store,response,response,e,listener,on,failure,e
TaskManager -> public <Response extends ActionResponse> void storeResult(Task task, Response response, ActionListener<Response> listener);1531179852;Stores the task result;public <Response extends ActionResponse> void storeResult(Task task, Response response, ActionListener<Response> listener) {_        DiscoveryNode localNode = lastDiscoveryNodes.getLocalNode()__        if (localNode == null) {_            _            logger.warn("couldn't store response {}, the node didn't join the cluster yet", response)__            listener.onResponse(response)__            return__        }_        final TaskResult taskResult__        try {_            taskResult = task.result(localNode, response)__        } catch (IOException ex) {_            logger.warn(() -> new ParameterizedMessage("couldn't store response {}", response), ex)__            listener.onFailure(ex)__            return__        }__        taskResultsService.storeResult(taskResult, new ActionListener<Void>() {_            @Override_            public void onResponse(Void aVoid) {_                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("couldn't store response {}", response), e)__                listener.onFailure(e)__            }_        })__    };stores,the,task,result;public,response,extends,action,response,void,store,result,task,task,response,response,action,listener,response,listener,discovery,node,local,node,last,discovery,nodes,get,local,node,if,local,node,null,logger,warn,couldn,t,store,response,the,node,didn,t,join,the,cluster,yet,response,listener,on,response,response,return,final,task,result,task,result,try,task,result,task,result,local,node,response,catch,ioexception,ex,logger,warn,new,parameterized,message,couldn,t,store,response,response,ex,listener,on,failure,ex,return,task,results,service,store,result,task,result,new,action,listener,void,override,public,void,on,response,void,a,void,listener,on,response,response,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,couldn,t,store,response,response,e,listener,on,failure,e
TaskManager -> public <Response extends ActionResponse> void storeResult(Task task, Response response, ActionListener<Response> listener);1541092382;Stores the task result;public <Response extends ActionResponse> void storeResult(Task task, Response response, ActionListener<Response> listener) {_        DiscoveryNode localNode = lastDiscoveryNodes.getLocalNode()__        if (localNode == null) {_            _            logger.warn("couldn't store response {}, the node didn't join the cluster yet", response)__            listener.onResponse(response)__            return__        }_        final TaskResult taskResult__        try {_            taskResult = task.result(localNode, response)__        } catch (IOException ex) {_            logger.warn(() -> new ParameterizedMessage("couldn't store response {}", response), ex)__            listener.onFailure(ex)__            return__        }__        taskResultsService.storeResult(taskResult, new ActionListener<Void>() {_            @Override_            public void onResponse(Void aVoid) {_                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("couldn't store response {}", response), e)__                listener.onFailure(e)__            }_        })__    };stores,the,task,result;public,response,extends,action,response,void,store,result,task,task,response,response,action,listener,response,listener,discovery,node,local,node,last,discovery,nodes,get,local,node,if,local,node,null,logger,warn,couldn,t,store,response,the,node,didn,t,join,the,cluster,yet,response,listener,on,response,response,return,final,task,result,task,result,try,task,result,task,result,local,node,response,catch,ioexception,ex,logger,warn,new,parameterized,message,couldn,t,store,response,response,ex,listener,on,failure,ex,return,task,results,service,store,result,task,result,new,action,listener,void,override,public,void,on,response,void,a,void,listener,on,response,response,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,couldn,t,store,response,response,e,listener,on,failure,e
TaskManager -> public <Response extends ActionResponse> void storeResult(Task task, Response response, ActionListener<Response> listener);1542402632;Stores the task result;public <Response extends ActionResponse> void storeResult(Task task, Response response, ActionListener<Response> listener) {_        DiscoveryNode localNode = lastDiscoveryNodes.getLocalNode()__        if (localNode == null) {_            _            logger.warn("couldn't store response {}, the node didn't join the cluster yet", response)__            listener.onResponse(response)__            return__        }_        final TaskResult taskResult__        try {_            taskResult = task.result(localNode, response)__        } catch (IOException ex) {_            logger.warn(() -> new ParameterizedMessage("couldn't store response {}", response), ex)__            listener.onFailure(ex)__            return__        }__        taskResultsService.storeResult(taskResult, new ActionListener<Void>() {_            @Override_            public void onResponse(Void aVoid) {_                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("couldn't store response {}", response), e)__                listener.onFailure(e)__            }_        })__    };stores,the,task,result;public,response,extends,action,response,void,store,result,task,task,response,response,action,listener,response,listener,discovery,node,local,node,last,discovery,nodes,get,local,node,if,local,node,null,logger,warn,couldn,t,store,response,the,node,didn,t,join,the,cluster,yet,response,listener,on,response,response,return,final,task,result,task,result,try,task,result,task,result,local,node,response,catch,ioexception,ex,logger,warn,new,parameterized,message,couldn,t,store,response,response,ex,listener,on,failure,ex,return,task,results,service,store,result,task,result,new,action,listener,void,override,public,void,on,response,void,a,void,listener,on,response,response,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,couldn,t,store,response,response,e,listener,on,failure,e
TaskManager -> public CancellableTask getCancellableTask(long id);1524684173;Returns a cancellable task with given id, or null if the task is not found.;public CancellableTask getCancellableTask(long id) {_        CancellableTaskHolder holder = cancellableTasks.get(id)__        if (holder != null) {_            return holder.getTask()__        } else {_            return null__        }_    };returns,a,cancellable,task,with,given,id,or,null,if,the,task,is,not,found;public,cancellable,task,get,cancellable,task,long,id,cancellable,task,holder,holder,cancellable,tasks,get,id,if,holder,null,return,holder,get,task,else,return,null
TaskManager -> public CancellableTask getCancellableTask(long id);1531179852;Returns a cancellable task with given id, or null if the task is not found.;public CancellableTask getCancellableTask(long id) {_        CancellableTaskHolder holder = cancellableTasks.get(id)__        if (holder != null) {_            return holder.getTask()__        } else {_            return null__        }_    };returns,a,cancellable,task,with,given,id,or,null,if,the,task,is,not,found;public,cancellable,task,get,cancellable,task,long,id,cancellable,task,holder,holder,cancellable,tasks,get,id,if,holder,null,return,holder,get,task,else,return,null
TaskManager -> public CancellableTask getCancellableTask(long id);1541092382;Returns a cancellable task with given id, or null if the task is not found.;public CancellableTask getCancellableTask(long id) {_        CancellableTaskHolder holder = cancellableTasks.get(id)__        if (holder != null) {_            return holder.getTask()__        } else {_            return null__        }_    };returns,a,cancellable,task,with,given,id,or,null,if,the,task,is,not,found;public,cancellable,task,get,cancellable,task,long,id,cancellable,task,holder,holder,cancellable,tasks,get,id,if,holder,null,return,holder,get,task,else,return,null
TaskManager -> public CancellableTask getCancellableTask(long id);1542402632;Returns a cancellable task with given id, or null if the task is not found.;public CancellableTask getCancellableTask(long id) {_        CancellableTaskHolder holder = cancellableTasks.get(id)__        if (holder != null) {_            return holder.getTask()__        } else {_            return null__        }_    };returns,a,cancellable,task,with,given,id,or,null,if,the,task,is,not,found;public,cancellable,task,get,cancellable,task,long,id,cancellable,task,holder,holder,cancellable,tasks,get,id,if,holder,null,return,holder,get,task,else,return,null
TaskManager -> CancellableTaskHolder -> public boolean cancel(String reason);1524684173;Marks task as cancelled._<p>_Returns true if cancellation was successful, false otherwise.;public boolean cancel(String reason) {_            return cancel(reason, null)__        };marks,task,as,cancelled,p,returns,true,if,cancellation,was,successful,false,otherwise;public,boolean,cancel,string,reason,return,cancel,reason,null
TaskManager -> CancellableTaskHolder -> public boolean cancel(String reason);1531179852;Marks task as cancelled._<p>_Returns true if cancellation was successful, false otherwise.;public boolean cancel(String reason) {_            return cancel(reason, null)__        };marks,task,as,cancelled,p,returns,true,if,cancellation,was,successful,false,otherwise;public,boolean,cancel,string,reason,return,cancel,reason,null
TaskManager -> CancellableTaskHolder -> public boolean cancel(String reason);1541092382;Marks task as cancelled._<p>_Returns true if cancellation was successful, false otherwise.;public boolean cancel(String reason) {_            return cancel(reason, null)__        };marks,task,as,cancelled,p,returns,true,if,cancellation,was,successful,false,otherwise;public,boolean,cancel,string,reason,return,cancel,reason,null
TaskManager -> CancellableTaskHolder -> public boolean cancel(String reason);1542402632;Marks task as cancelled._<p>_Returns true if cancellation was successful, false otherwise.;public boolean cancel(String reason) {_            return cancel(reason, null)__        };marks,task,as,cancelled,p,returns,true,if,cancellation,was,successful,false,otherwise;public,boolean,cancel,string,reason,return,cancel,reason,null
TaskManager -> public Map<Long, Task> getTasks();1524684173;Returns the list of currently running tasks on the node;public Map<Long, Task> getTasks() {_        HashMap<Long, Task> taskHashMap = new HashMap<>(this.tasks)__        for (CancellableTaskHolder holder : cancellableTasks.values()) {_            taskHashMap.put(holder.getTask().getId(), holder.getTask())__        }_        return Collections.unmodifiableMap(taskHashMap)__    };returns,the,list,of,currently,running,tasks,on,the,node;public,map,long,task,get,tasks,hash,map,long,task,task,hash,map,new,hash,map,this,tasks,for,cancellable,task,holder,holder,cancellable,tasks,values,task,hash,map,put,holder,get,task,get,id,holder,get,task,return,collections,unmodifiable,map,task,hash,map
TaskManager -> public Map<Long, Task> getTasks();1531179852;Returns the list of currently running tasks on the node;public Map<Long, Task> getTasks() {_        HashMap<Long, Task> taskHashMap = new HashMap<>(this.tasks)__        for (CancellableTaskHolder holder : cancellableTasks.values()) {_            taskHashMap.put(holder.getTask().getId(), holder.getTask())__        }_        return Collections.unmodifiableMap(taskHashMap)__    };returns,the,list,of,currently,running,tasks,on,the,node;public,map,long,task,get,tasks,hash,map,long,task,task,hash,map,new,hash,map,this,tasks,for,cancellable,task,holder,holder,cancellable,tasks,values,task,hash,map,put,holder,get,task,get,id,holder,get,task,return,collections,unmodifiable,map,task,hash,map
TaskManager -> public Map<Long, Task> getTasks();1541092382;Returns the list of currently running tasks on the node;public Map<Long, Task> getTasks() {_        HashMap<Long, Task> taskHashMap = new HashMap<>(this.tasks)__        for (CancellableTaskHolder holder : cancellableTasks.values()) {_            taskHashMap.put(holder.getTask().getId(), holder.getTask())__        }_        return Collections.unmodifiableMap(taskHashMap)__    };returns,the,list,of,currently,running,tasks,on,the,node;public,map,long,task,get,tasks,hash,map,long,task,task,hash,map,new,hash,map,this,tasks,for,cancellable,task,holder,holder,cancellable,tasks,values,task,hash,map,put,holder,get,task,get,id,holder,get,task,return,collections,unmodifiable,map,task,hash,map
TaskManager -> public Map<Long, Task> getTasks();1542402632;Returns the list of currently running tasks on the node;public Map<Long, Task> getTasks() {_        HashMap<Long, Task> taskHashMap = new HashMap<>(this.tasks)__        for (CancellableTaskHolder holder : cancellableTasks.values()) {_            taskHashMap.put(holder.getTask().getId(), holder.getTask())__        }_        return Collections.unmodifiableMap(taskHashMap)__    };returns,the,list,of,currently,running,tasks,on,the,node;public,map,long,task,get,tasks,hash,map,long,task,task,hash,map,new,hash,map,this,tasks,for,cancellable,task,holder,holder,cancellable,tasks,values,task,hash,map,put,holder,get,task,get,id,holder,get,task,return,collections,unmodifiable,map,task,hash,map
TaskManager -> public boolean cancel(CancellableTask task, String reason, Runnable listener);1524684173;Cancels a task_<p>_Returns true if cancellation was started successful, null otherwise.__After starting cancellation on the parent task, the task manager tries to cancel all children tasks_of the current task. Once cancellation of the children tasks is done, the listener is triggered.;public boolean cancel(CancellableTask task, String reason, Runnable listener) {_        CancellableTaskHolder holder = cancellableTasks.get(task.getId())__        if (holder != null) {_            logger.trace("cancelling task with id {}", task.getId())__            return holder.cancel(reason, listener)__        }_        return false__    };cancels,a,task,p,returns,true,if,cancellation,was,started,successful,null,otherwise,after,starting,cancellation,on,the,parent,task,the,task,manager,tries,to,cancel,all,children,tasks,of,the,current,task,once,cancellation,of,the,children,tasks,is,done,the,listener,is,triggered;public,boolean,cancel,cancellable,task,task,string,reason,runnable,listener,cancellable,task,holder,holder,cancellable,tasks,get,task,get,id,if,holder,null,logger,trace,cancelling,task,with,id,task,get,id,return,holder,cancel,reason,listener,return,false
TaskManager -> public boolean cancel(CancellableTask task, String reason, Runnable listener);1531179852;Cancels a task_<p>_Returns true if cancellation was started successful, null otherwise.__After starting cancellation on the parent task, the task manager tries to cancel all children tasks_of the current task. Once cancellation of the children tasks is done, the listener is triggered.;public boolean cancel(CancellableTask task, String reason, Runnable listener) {_        CancellableTaskHolder holder = cancellableTasks.get(task.getId())__        if (holder != null) {_            logger.trace("cancelling task with id {}", task.getId())__            return holder.cancel(reason, listener)__        }_        return false__    };cancels,a,task,p,returns,true,if,cancellation,was,started,successful,null,otherwise,after,starting,cancellation,on,the,parent,task,the,task,manager,tries,to,cancel,all,children,tasks,of,the,current,task,once,cancellation,of,the,children,tasks,is,done,the,listener,is,triggered;public,boolean,cancel,cancellable,task,task,string,reason,runnable,listener,cancellable,task,holder,holder,cancellable,tasks,get,task,get,id,if,holder,null,logger,trace,cancelling,task,with,id,task,get,id,return,holder,cancel,reason,listener,return,false
TaskManager -> public boolean cancel(CancellableTask task, String reason, Runnable listener);1541092382;Cancels a task_<p>_Returns true if cancellation was started successful, null otherwise.__After starting cancellation on the parent task, the task manager tries to cancel all children tasks_of the current task. Once cancellation of the children tasks is done, the listener is triggered.;public boolean cancel(CancellableTask task, String reason, Runnable listener) {_        CancellableTaskHolder holder = cancellableTasks.get(task.getId())__        if (holder != null) {_            logger.trace("cancelling task with id {}", task.getId())__            return holder.cancel(reason, listener)__        }_        return false__    };cancels,a,task,p,returns,true,if,cancellation,was,started,successful,null,otherwise,after,starting,cancellation,on,the,parent,task,the,task,manager,tries,to,cancel,all,children,tasks,of,the,current,task,once,cancellation,of,the,children,tasks,is,done,the,listener,is,triggered;public,boolean,cancel,cancellable,task,task,string,reason,runnable,listener,cancellable,task,holder,holder,cancellable,tasks,get,task,get,id,if,holder,null,logger,trace,cancelling,task,with,id,task,get,id,return,holder,cancel,reason,listener,return,false
TaskManager -> public boolean cancel(CancellableTask task, String reason, Runnable listener);1542402632;Cancels a task_<p>_Returns true if cancellation was started successful, null otherwise.__After starting cancellation on the parent task, the task manager tries to cancel all children tasks_of the current task. Once cancellation of the children tasks is done, the listener is triggered.;public boolean cancel(CancellableTask task, String reason, Runnable listener) {_        CancellableTaskHolder holder = cancellableTasks.get(task.getId())__        if (holder != null) {_            logger.trace("cancelling task with id {}", task.getId())__            return holder.cancel(reason, listener)__        }_        return false__    };cancels,a,task,p,returns,true,if,cancellation,was,started,successful,null,otherwise,after,starting,cancellation,on,the,parent,task,the,task,manager,tries,to,cancel,all,children,tasks,of,the,current,task,once,cancellation,of,the,children,tasks,is,done,the,listener,is,triggered;public,boolean,cancel,cancellable,task,task,string,reason,runnable,listener,cancellable,task,holder,holder,cancellable,tasks,get,task,get,id,if,holder,null,logger,trace,cancelling,task,with,id,task,get,id,return,holder,cancel,reason,listener,return,false
TaskManager -> public Task register(String type, String action, TaskAwareRequest request);1524684173;Registers a task without parent task_<p>_Returns the task manager tracked task or null if the task doesn't support the task manager;public Task register(String type, String action, TaskAwareRequest request) {_        Map<String, String> headers = new HashMap<>()__        long headerSize = 0__        long maxSize = maxHeaderSize.getBytes()__        ThreadContext threadContext = threadPool.getThreadContext()__        for (String key : taskHeaders) {_            String httpHeader = threadContext.getHeader(key)__            if (httpHeader != null) {_                headerSize += key.length() * 2 + httpHeader.length() * 2__                if (headerSize > maxSize) {_                    throw new IllegalArgumentException("Request exceeded the maximum size of task headers " + maxHeaderSize)__                }_                headers.put(key, httpHeader)__            }_        }_        Task task = request.createTask(taskIdGenerator.incrementAndGet(), type, action, request.getParentTask(), headers)__        if (task == null) {_            return null__        }_        assert task.getParentTaskId().equals(request.getParentTask()) : "Request [ " + request + "] didn't preserve it parentTaskId"__        if (logger.isTraceEnabled()) {_            logger.trace("register {} [{}] [{}] [{}]", task.getId(), type, action, task.getDescription())__        }__        if (task instanceof CancellableTask) {_            registerCancellableTask(task)__        } else {_            Task previousTask = tasks.put(task.getId(), task)__            assert previousTask == null__        }_        return task__    };registers,a,task,without,parent,task,p,returns,the,task,manager,tracked,task,or,null,if,the,task,doesn,t,support,the,task,manager;public,task,register,string,type,string,action,task,aware,request,request,map,string,string,headers,new,hash,map,long,header,size,0,long,max,size,max,header,size,get,bytes,thread,context,thread,context,thread,pool,get,thread,context,for,string,key,task,headers,string,http,header,thread,context,get,header,key,if,http,header,null,header,size,key,length,2,http,header,length,2,if,header,size,max,size,throw,new,illegal,argument,exception,request,exceeded,the,maximum,size,of,task,headers,max,header,size,headers,put,key,http,header,task,task,request,create,task,task,id,generator,increment,and,get,type,action,request,get,parent,task,headers,if,task,null,return,null,assert,task,get,parent,task,id,equals,request,get,parent,task,request,request,didn,t,preserve,it,parent,task,id,if,logger,is,trace,enabled,logger,trace,register,task,get,id,type,action,task,get,description,if,task,instanceof,cancellable,task,register,cancellable,task,task,else,task,previous,task,tasks,put,task,get,id,task,assert,previous,task,null,return,task
TaskManager -> public Task register(String type, String action, TaskAwareRequest request);1531179852;Registers a task without parent task;public Task register(String type, String action, TaskAwareRequest request) {_        Map<String, String> headers = new HashMap<>()__        long headerSize = 0__        long maxSize = maxHeaderSize.getBytes()__        ThreadContext threadContext = threadPool.getThreadContext()__        for (String key : taskHeaders) {_            String httpHeader = threadContext.getHeader(key)__            if (httpHeader != null) {_                headerSize += key.length() * 2 + httpHeader.length() * 2__                if (headerSize > maxSize) {_                    throw new IllegalArgumentException("Request exceeded the maximum size of task headers " + maxHeaderSize)__                }_                headers.put(key, httpHeader)__            }_        }_        Task task = request.createTask(taskIdGenerator.incrementAndGet(), type, action, request.getParentTask(), headers)__        Objects.requireNonNull(task)__        assert task.getParentTaskId().equals(request.getParentTask()) : "Request [ " + request + "] didn't preserve it parentTaskId"__        if (logger.isTraceEnabled()) {_            logger.trace("register {} [{}] [{}] [{}]", task.getId(), type, action, task.getDescription())__        }__        if (task instanceof CancellableTask) {_            registerCancellableTask(task)__        } else {_            Task previousTask = tasks.put(task.getId(), task)__            assert previousTask == null__        }_        return task__    };registers,a,task,without,parent,task;public,task,register,string,type,string,action,task,aware,request,request,map,string,string,headers,new,hash,map,long,header,size,0,long,max,size,max,header,size,get,bytes,thread,context,thread,context,thread,pool,get,thread,context,for,string,key,task,headers,string,http,header,thread,context,get,header,key,if,http,header,null,header,size,key,length,2,http,header,length,2,if,header,size,max,size,throw,new,illegal,argument,exception,request,exceeded,the,maximum,size,of,task,headers,max,header,size,headers,put,key,http,header,task,task,request,create,task,task,id,generator,increment,and,get,type,action,request,get,parent,task,headers,objects,require,non,null,task,assert,task,get,parent,task,id,equals,request,get,parent,task,request,request,didn,t,preserve,it,parent,task,id,if,logger,is,trace,enabled,logger,trace,register,task,get,id,type,action,task,get,description,if,task,instanceof,cancellable,task,register,cancellable,task,task,else,task,previous,task,tasks,put,task,get,id,task,assert,previous,task,null,return,task
TaskManager -> public Task register(String type, String action, TaskAwareRequest request);1541092382;Registers a task without parent task;public Task register(String type, String action, TaskAwareRequest request) {_        Map<String, String> headers = new HashMap<>()__        long headerSize = 0__        long maxSize = maxHeaderSize.getBytes()__        ThreadContext threadContext = threadPool.getThreadContext()__        for (String key : taskHeaders) {_            String httpHeader = threadContext.getHeader(key)__            if (httpHeader != null) {_                headerSize += key.length() * 2 + httpHeader.length() * 2__                if (headerSize > maxSize) {_                    throw new IllegalArgumentException("Request exceeded the maximum size of task headers " + maxHeaderSize)__                }_                headers.put(key, httpHeader)__            }_        }_        Task task = request.createTask(taskIdGenerator.incrementAndGet(), type, action, request.getParentTask(), headers)__        Objects.requireNonNull(task)__        assert task.getParentTaskId().equals(request.getParentTask()) : "Request [ " + request + "] didn't preserve it parentTaskId"__        if (logger.isTraceEnabled()) {_            logger.trace("register {} [{}] [{}] [{}]", task.getId(), type, action, task.getDescription())__        }__        if (task instanceof CancellableTask) {_            registerCancellableTask(task)__        } else {_            Task previousTask = tasks.put(task.getId(), task)__            assert previousTask == null__        }_        return task__    };registers,a,task,without,parent,task;public,task,register,string,type,string,action,task,aware,request,request,map,string,string,headers,new,hash,map,long,header,size,0,long,max,size,max,header,size,get,bytes,thread,context,thread,context,thread,pool,get,thread,context,for,string,key,task,headers,string,http,header,thread,context,get,header,key,if,http,header,null,header,size,key,length,2,http,header,length,2,if,header,size,max,size,throw,new,illegal,argument,exception,request,exceeded,the,maximum,size,of,task,headers,max,header,size,headers,put,key,http,header,task,task,request,create,task,task,id,generator,increment,and,get,type,action,request,get,parent,task,headers,objects,require,non,null,task,assert,task,get,parent,task,id,equals,request,get,parent,task,request,request,didn,t,preserve,it,parent,task,id,if,logger,is,trace,enabled,logger,trace,register,task,get,id,type,action,task,get,description,if,task,instanceof,cancellable,task,register,cancellable,task,task,else,task,previous,task,tasks,put,task,get,id,task,assert,previous,task,null,return,task
TaskManager -> public Task register(String type, String action, TaskAwareRequest request);1542402632;Registers a task without parent task;public Task register(String type, String action, TaskAwareRequest request) {_        Map<String, String> headers = new HashMap<>()__        long headerSize = 0__        long maxSize = maxHeaderSize.getBytes()__        ThreadContext threadContext = threadPool.getThreadContext()__        for (String key : taskHeaders) {_            String httpHeader = threadContext.getHeader(key)__            if (httpHeader != null) {_                headerSize += key.length() * 2 + httpHeader.length() * 2__                if (headerSize > maxSize) {_                    throw new IllegalArgumentException("Request exceeded the maximum size of task headers " + maxHeaderSize)__                }_                headers.put(key, httpHeader)__            }_        }_        Task task = request.createTask(taskIdGenerator.incrementAndGet(), type, action, request.getParentTask(), headers)__        Objects.requireNonNull(task)__        assert task.getParentTaskId().equals(request.getParentTask()) : "Request [ " + request + "] didn't preserve it parentTaskId"__        if (logger.isTraceEnabled()) {_            logger.trace("register {} [{}] [{}] [{}]", task.getId(), type, action, task.getDescription())__        }__        if (task instanceof CancellableTask) {_            registerCancellableTask(task)__        } else {_            Task previousTask = tasks.put(task.getId(), task)__            assert previousTask == null__        }_        return task__    };registers,a,task,without,parent,task;public,task,register,string,type,string,action,task,aware,request,request,map,string,string,headers,new,hash,map,long,header,size,0,long,max,size,max,header,size,get,bytes,thread,context,thread,context,thread,pool,get,thread,context,for,string,key,task,headers,string,http,header,thread,context,get,header,key,if,http,header,null,header,size,key,length,2,http,header,length,2,if,header,size,max,size,throw,new,illegal,argument,exception,request,exceeded,the,maximum,size,of,task,headers,max,header,size,headers,put,key,http,header,task,task,request,create,task,task,id,generator,increment,and,get,type,action,request,get,parent,task,headers,objects,require,non,null,task,assert,task,get,parent,task,id,equals,request,get,parent,task,request,request,didn,t,preserve,it,parent,task,id,if,logger,is,trace,enabled,logger,trace,register,task,get,id,type,action,task,get,description,if,task,instanceof,cancellable,task,register,cancellable,task,task,else,task,previous,task,tasks,put,task,get,id,task,assert,previous,task,null,return,task
TaskManager -> public <Response extends ActionResponse> void storeResult(Task task, Exception error, ActionListener<Response> listener);1524684173;Stores the task failure;public <Response extends ActionResponse> void storeResult(Task task, Exception error, ActionListener<Response> listener) {_        DiscoveryNode localNode = lastDiscoveryNodes.getLocalNode()__        if (localNode == null) {_            _            listener.onFailure(error)__            return__        }_        final TaskResult taskResult__        try {_            taskResult = task.result(localNode, error)__        } catch (IOException ex) {_            logger.warn(() -> new ParameterizedMessage("couldn't store error {}", ExceptionsHelper.detailedMessage(error)), ex)__            listener.onFailure(ex)__            return__        }_        taskResultsService.storeResult(taskResult, new ActionListener<Void>() {_            @Override_            public void onResponse(Void aVoid) {_                listener.onFailure(error)__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("couldn't store error {}", ExceptionsHelper.detailedMessage(error)), e)__                listener.onFailure(e)__            }_        })__    };stores,the,task,failure;public,response,extends,action,response,void,store,result,task,task,exception,error,action,listener,response,listener,discovery,node,local,node,last,discovery,nodes,get,local,node,if,local,node,null,listener,on,failure,error,return,final,task,result,task,result,try,task,result,task,result,local,node,error,catch,ioexception,ex,logger,warn,new,parameterized,message,couldn,t,store,error,exceptions,helper,detailed,message,error,ex,listener,on,failure,ex,return,task,results,service,store,result,task,result,new,action,listener,void,override,public,void,on,response,void,a,void,listener,on,failure,error,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,couldn,t,store,error,exceptions,helper,detailed,message,error,e,listener,on,failure,e
TaskManager -> public <Response extends ActionResponse> void storeResult(Task task, Exception error, ActionListener<Response> listener);1531179852;Stores the task failure;public <Response extends ActionResponse> void storeResult(Task task, Exception error, ActionListener<Response> listener) {_        DiscoveryNode localNode = lastDiscoveryNodes.getLocalNode()__        if (localNode == null) {_            _            listener.onFailure(error)__            return__        }_        final TaskResult taskResult__        try {_            taskResult = task.result(localNode, error)__        } catch (IOException ex) {_            logger.warn(() -> new ParameterizedMessage("couldn't store error {}", ExceptionsHelper.detailedMessage(error)), ex)__            listener.onFailure(ex)__            return__        }_        taskResultsService.storeResult(taskResult, new ActionListener<Void>() {_            @Override_            public void onResponse(Void aVoid) {_                listener.onFailure(error)__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("couldn't store error {}", ExceptionsHelper.detailedMessage(error)), e)__                listener.onFailure(e)__            }_        })__    };stores,the,task,failure;public,response,extends,action,response,void,store,result,task,task,exception,error,action,listener,response,listener,discovery,node,local,node,last,discovery,nodes,get,local,node,if,local,node,null,listener,on,failure,error,return,final,task,result,task,result,try,task,result,task,result,local,node,error,catch,ioexception,ex,logger,warn,new,parameterized,message,couldn,t,store,error,exceptions,helper,detailed,message,error,ex,listener,on,failure,ex,return,task,results,service,store,result,task,result,new,action,listener,void,override,public,void,on,response,void,a,void,listener,on,failure,error,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,couldn,t,store,error,exceptions,helper,detailed,message,error,e,listener,on,failure,e
TaskManager -> public <Response extends ActionResponse> void storeResult(Task task, Exception error, ActionListener<Response> listener);1541092382;Stores the task failure;public <Response extends ActionResponse> void storeResult(Task task, Exception error, ActionListener<Response> listener) {_        DiscoveryNode localNode = lastDiscoveryNodes.getLocalNode()__        if (localNode == null) {_            _            listener.onFailure(error)__            return__        }_        final TaskResult taskResult__        try {_            taskResult = task.result(localNode, error)__        } catch (IOException ex) {_            logger.warn(() -> new ParameterizedMessage("couldn't store error {}", ExceptionsHelper.detailedMessage(error)), ex)__            listener.onFailure(ex)__            return__        }_        taskResultsService.storeResult(taskResult, new ActionListener<Void>() {_            @Override_            public void onResponse(Void aVoid) {_                listener.onFailure(error)__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("couldn't store error {}", ExceptionsHelper.detailedMessage(error)), e)__                listener.onFailure(e)__            }_        })__    };stores,the,task,failure;public,response,extends,action,response,void,store,result,task,task,exception,error,action,listener,response,listener,discovery,node,local,node,last,discovery,nodes,get,local,node,if,local,node,null,listener,on,failure,error,return,final,task,result,task,result,try,task,result,task,result,local,node,error,catch,ioexception,ex,logger,warn,new,parameterized,message,couldn,t,store,error,exceptions,helper,detailed,message,error,ex,listener,on,failure,ex,return,task,results,service,store,result,task,result,new,action,listener,void,override,public,void,on,response,void,a,void,listener,on,failure,error,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,couldn,t,store,error,exceptions,helper,detailed,message,error,e,listener,on,failure,e
TaskManager -> public <Response extends ActionResponse> void storeResult(Task task, Exception error, ActionListener<Response> listener);1542402632;Stores the task failure;public <Response extends ActionResponse> void storeResult(Task task, Exception error, ActionListener<Response> listener) {_        DiscoveryNode localNode = lastDiscoveryNodes.getLocalNode()__        if (localNode == null) {_            _            listener.onFailure(error)__            return__        }_        final TaskResult taskResult__        try {_            taskResult = task.result(localNode, error)__        } catch (IOException ex) {_            logger.warn(() -> new ParameterizedMessage("couldn't store error {}", ExceptionsHelper.detailedMessage(error)), ex)__            listener.onFailure(ex)__            return__        }_        taskResultsService.storeResult(taskResult, new ActionListener<Void>() {_            @Override_            public void onResponse(Void aVoid) {_                listener.onFailure(error)__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("couldn't store error {}", ExceptionsHelper.detailedMessage(error)), e)__                listener.onFailure(e)__            }_        })__    };stores,the,task,failure;public,response,extends,action,response,void,store,result,task,task,exception,error,action,listener,response,listener,discovery,node,local,node,last,discovery,nodes,get,local,node,if,local,node,null,listener,on,failure,error,return,final,task,result,task,result,try,task,result,task,result,local,node,error,catch,ioexception,ex,logger,warn,new,parameterized,message,couldn,t,store,error,exceptions,helper,detailed,message,error,ex,listener,on,failure,ex,return,task,results,service,store,result,task,result,new,action,listener,void,override,public,void,on,response,void,a,void,listener,on,failure,error,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,couldn,t,store,error,exceptions,helper,detailed,message,error,e,listener,on,failure,e
TaskManager -> public void waitForTaskCompletion(Task task, long untilInNanos);1524684173;Blocks the calling thread, waiting for the task to vanish from the TaskManager.;public void waitForTaskCompletion(Task task, long untilInNanos) {_        while (System.nanoTime() - untilInNanos < 0) {_            if (getTask(task.getId()) == null) {_                return__            }_            try {_                Thread.sleep(WAIT_FOR_COMPLETION_POLL.millis())__            } catch (InterruptedException e) {_                throw new ElasticsearchException("Interrupted waiting for completion of [{}]", e, task)__            }_        }_        throw new ElasticsearchTimeoutException("Timed out waiting for completion of [{}]", task)__    };blocks,the,calling,thread,waiting,for,the,task,to,vanish,from,the,task,manager;public,void,wait,for,task,completion,task,task,long,until,in,nanos,while,system,nano,time,until,in,nanos,0,if,get,task,task,get,id,null,return,try,thread,sleep,millis,catch,interrupted,exception,e,throw,new,elasticsearch,exception,interrupted,waiting,for,completion,of,e,task,throw,new,elasticsearch,timeout,exception,timed,out,waiting,for,completion,of,task
TaskManager -> public void waitForTaskCompletion(Task task, long untilInNanos);1531179852;Blocks the calling thread, waiting for the task to vanish from the TaskManager.;public void waitForTaskCompletion(Task task, long untilInNanos) {_        while (System.nanoTime() - untilInNanos < 0) {_            if (getTask(task.getId()) == null) {_                return__            }_            try {_                Thread.sleep(WAIT_FOR_COMPLETION_POLL.millis())__            } catch (InterruptedException e) {_                throw new ElasticsearchException("Interrupted waiting for completion of [{}]", e, task)__            }_        }_        throw new ElasticsearchTimeoutException("Timed out waiting for completion of [{}]", task)__    };blocks,the,calling,thread,waiting,for,the,task,to,vanish,from,the,task,manager;public,void,wait,for,task,completion,task,task,long,until,in,nanos,while,system,nano,time,until,in,nanos,0,if,get,task,task,get,id,null,return,try,thread,sleep,millis,catch,interrupted,exception,e,throw,new,elasticsearch,exception,interrupted,waiting,for,completion,of,e,task,throw,new,elasticsearch,timeout,exception,timed,out,waiting,for,completion,of,task
TaskManager -> public void waitForTaskCompletion(Task task, long untilInNanos);1541092382;Blocks the calling thread, waiting for the task to vanish from the TaskManager.;public void waitForTaskCompletion(Task task, long untilInNanos) {_        while (System.nanoTime() - untilInNanos < 0) {_            if (getTask(task.getId()) == null) {_                return__            }_            try {_                Thread.sleep(WAIT_FOR_COMPLETION_POLL.millis())__            } catch (InterruptedException e) {_                throw new ElasticsearchException("Interrupted waiting for completion of [{}]", e, task)__            }_        }_        throw new ElasticsearchTimeoutException("Timed out waiting for completion of [{}]", task)__    };blocks,the,calling,thread,waiting,for,the,task,to,vanish,from,the,task,manager;public,void,wait,for,task,completion,task,task,long,until,in,nanos,while,system,nano,time,until,in,nanos,0,if,get,task,task,get,id,null,return,try,thread,sleep,millis,catch,interrupted,exception,e,throw,new,elasticsearch,exception,interrupted,waiting,for,completion,of,e,task,throw,new,elasticsearch,timeout,exception,timed,out,waiting,for,completion,of,task
TaskManager -> public void waitForTaskCompletion(Task task, long untilInNanos);1542402632;Blocks the calling thread, waiting for the task to vanish from the TaskManager.;public void waitForTaskCompletion(Task task, long untilInNanos) {_        while (System.nanoTime() - untilInNanos < 0) {_            if (getTask(task.getId()) == null) {_                return__            }_            try {_                Thread.sleep(WAIT_FOR_COMPLETION_POLL.millis())__            } catch (InterruptedException e) {_                throw new ElasticsearchException("Interrupted waiting for completion of [{}]", e, task)__            }_        }_        throw new ElasticsearchTimeoutException("Timed out waiting for completion of [{}]", task)__    };blocks,the,calling,thread,waiting,for,the,task,to,vanish,from,the,task,manager;public,void,wait,for,task,completion,task,task,long,until,in,nanos,while,system,nano,time,until,in,nanos,0,if,get,task,task,get,id,null,return,try,thread,sleep,millis,catch,interrupted,exception,e,throw,new,elasticsearch,exception,interrupted,waiting,for,completion,of,e,task,throw,new,elasticsearch,timeout,exception,timed,out,waiting,for,completion,of,task
TaskManager -> public void removeBan(TaskId parentTaskId);1524684173;Removes the ban for the specified parent task._<p>_This method is called when a previously banned task finally cancelled;public void removeBan(TaskId parentTaskId) {_        logger.trace("removing ban for the parent task {}", parentTaskId)__        banedParents.remove(parentTaskId)__    };removes,the,ban,for,the,specified,parent,task,p,this,method,is,called,when,a,previously,banned,task,finally,cancelled;public,void,remove,ban,task,id,parent,task,id,logger,trace,removing,ban,for,the,parent,task,parent,task,id,baned,parents,remove,parent,task,id
TaskManager -> public void removeBan(TaskId parentTaskId);1531179852;Removes the ban for the specified parent task._<p>_This method is called when a previously banned task finally cancelled;public void removeBan(TaskId parentTaskId) {_        logger.trace("removing ban for the parent task {}", parentTaskId)__        banedParents.remove(parentTaskId)__    };removes,the,ban,for,the,specified,parent,task,p,this,method,is,called,when,a,previously,banned,task,finally,cancelled;public,void,remove,ban,task,id,parent,task,id,logger,trace,removing,ban,for,the,parent,task,parent,task,id,baned,parents,remove,parent,task,id
TaskManager -> public void removeBan(TaskId parentTaskId);1541092382;Removes the ban for the specified parent task._<p>_This method is called when a previously banned task finally cancelled;public void removeBan(TaskId parentTaskId) {_        logger.trace("removing ban for the parent task {}", parentTaskId)__        banedParents.remove(parentTaskId)__    };removes,the,ban,for,the,specified,parent,task,p,this,method,is,called,when,a,previously,banned,task,finally,cancelled;public,void,remove,ban,task,id,parent,task,id,logger,trace,removing,ban,for,the,parent,task,parent,task,id,baned,parents,remove,parent,task,id
TaskManager -> public void removeBan(TaskId parentTaskId);1542402632;Removes the ban for the specified parent task._<p>_This method is called when a previously banned task finally cancelled;public void removeBan(TaskId parentTaskId) {_        logger.trace("removing ban for the parent task {}", parentTaskId)__        banedParents.remove(parentTaskId)__    };removes,the,ban,for,the,specified,parent,task,p,this,method,is,called,when,a,previously,banned,task,finally,cancelled;public,void,remove,ban,task,id,parent,task,id,logger,trace,removing,ban,for,the,parent,task,parent,task,id,baned,parents,remove,parent,task,id
TaskManager -> CancellableTaskHolder -> public void finish();1524684173;Marks task as finished.;public void finish() {_            Runnable listener = null__            synchronized (this) {_                if (cancellationReason != null) {_                    _                    if (cancellationListener != null) {_                        listener = cancellationListener__                        cancellationListener = null__                    }_                } else {_                    cancellationReason = TASK_FINISHED_MARKER__                }_            }_            _            _            if (listener != null) {_                listener.run()__            }__        };marks,task,as,finished;public,void,finish,runnable,listener,null,synchronized,this,if,cancellation,reason,null,if,cancellation,listener,null,listener,cancellation,listener,cancellation,listener,null,else,cancellation,reason,if,listener,null,listener,run
TaskManager -> CancellableTaskHolder -> public void finish();1531179852;Marks task as finished.;public void finish() {_            Runnable listener = null__            synchronized (this) {_                if (cancellationReason != null) {_                    _                    if (cancellationListener != null) {_                        listener = cancellationListener__                        cancellationListener = null__                    }_                } else {_                    cancellationReason = TASK_FINISHED_MARKER__                }_            }_            _            _            if (listener != null) {_                listener.run()__            }__        };marks,task,as,finished;public,void,finish,runnable,listener,null,synchronized,this,if,cancellation,reason,null,if,cancellation,listener,null,listener,cancellation,listener,cancellation,listener,null,else,cancellation,reason,if,listener,null,listener,run
TaskManager -> CancellableTaskHolder -> public void finish();1541092382;Marks task as finished.;public void finish() {_            Runnable listener = null__            synchronized (this) {_                if (cancellationReason != null) {_                    _                    if (cancellationListener != null) {_                        listener = cancellationListener__                        cancellationListener = null__                    }_                } else {_                    cancellationReason = TASK_FINISHED_MARKER__                }_            }_            _            _            if (listener != null) {_                listener.run()__            }__        };marks,task,as,finished;public,void,finish,runnable,listener,null,synchronized,this,if,cancellation,reason,null,if,cancellation,listener,null,listener,cancellation,listener,cancellation,listener,null,else,cancellation,reason,if,listener,null,listener,run
TaskManager -> CancellableTaskHolder -> public void finish();1542402632;Marks task as finished.;public void finish() {_            Runnable listener = null__            synchronized (this) {_                if (cancellationReason != null) {_                    _                    if (cancellationListener != null) {_                        listener = cancellationListener__                        cancellationListener = null__                    }_                } else {_                    cancellationReason = TASK_FINISHED_MARKER__                }_            }_            _            _            if (listener != null) {_                listener.run()__            }__        };marks,task,as,finished;public,void,finish,runnable,listener,null,synchronized,this,if,cancellation,reason,null,if,cancellation,listener,null,listener,cancellation,listener,cancellation,listener,null,else,cancellation,reason,if,listener,null,listener,run
TaskManager -> public Task unregister(Task task);1524684173;Unregister the task;public Task unregister(Task task) {_        logger.trace("unregister task for id: {}", task.getId())__        if (task instanceof CancellableTask) {_            CancellableTaskHolder holder = cancellableTasks.remove(task.getId())__            if (holder != null) {_                holder.finish()__                return holder.getTask()__            } else {_                return null__            }_        } else {_            return tasks.remove(task.getId())__        }_    };unregister,the,task;public,task,unregister,task,task,logger,trace,unregister,task,for,id,task,get,id,if,task,instanceof,cancellable,task,cancellable,task,holder,holder,cancellable,tasks,remove,task,get,id,if,holder,null,holder,finish,return,holder,get,task,else,return,null,else,return,tasks,remove,task,get,id
TaskManager -> public Task unregister(Task task);1531179852;Unregister the task;public Task unregister(Task task) {_        logger.trace("unregister task for id: {}", task.getId())__        if (task instanceof CancellableTask) {_            CancellableTaskHolder holder = cancellableTasks.remove(task.getId())__            if (holder != null) {_                holder.finish()__                return holder.getTask()__            } else {_                return null__            }_        } else {_            return tasks.remove(task.getId())__        }_    };unregister,the,task;public,task,unregister,task,task,logger,trace,unregister,task,for,id,task,get,id,if,task,instanceof,cancellable,task,cancellable,task,holder,holder,cancellable,tasks,remove,task,get,id,if,holder,null,holder,finish,return,holder,get,task,else,return,null,else,return,tasks,remove,task,get,id
TaskManager -> public Task unregister(Task task);1541092382;Unregister the task;public Task unregister(Task task) {_        logger.trace("unregister task for id: {}", task.getId())__        if (task instanceof CancellableTask) {_            CancellableTaskHolder holder = cancellableTasks.remove(task.getId())__            if (holder != null) {_                holder.finish()__                return holder.getTask()__            } else {_                return null__            }_        } else {_            return tasks.remove(task.getId())__        }_    };unregister,the,task;public,task,unregister,task,task,logger,trace,unregister,task,for,id,task,get,id,if,task,instanceof,cancellable,task,cancellable,task,holder,holder,cancellable,tasks,remove,task,get,id,if,holder,null,holder,finish,return,holder,get,task,else,return,null,else,return,tasks,remove,task,get,id
TaskManager -> public Task unregister(Task task);1542402632;Unregister the task;public Task unregister(Task task) {_        logger.trace("unregister task for id: {}", task.getId())__        if (task instanceof CancellableTask) {_            CancellableTaskHolder holder = cancellableTasks.remove(task.getId())__            if (holder != null) {_                holder.finish()__                return holder.getTask()__            } else {_                return null__            }_        } else {_            return tasks.remove(task.getId())__        }_    };unregister,the,task;public,task,unregister,task,task,logger,trace,unregister,task,for,id,task,get,id,if,task,instanceof,cancellable,task,cancellable,task,holder,holder,cancellable,tasks,remove,task,get,id,if,holder,null,holder,finish,return,holder,get,task,else,return,null,else,return,tasks,remove,task,get,id
TaskManager -> public Map<Long, CancellableTask> getCancellableTasks();1524684173;Returns the list of currently running tasks on the node that can be cancelled;public Map<Long, CancellableTask> getCancellableTasks() {_        HashMap<Long, CancellableTask> taskHashMap = new HashMap<>()__        for (CancellableTaskHolder holder : cancellableTasks.values()) {_            taskHashMap.put(holder.getTask().getId(), holder.getTask())__        }_        return Collections.unmodifiableMap(taskHashMap)__    };returns,the,list,of,currently,running,tasks,on,the,node,that,can,be,cancelled;public,map,long,cancellable,task,get,cancellable,tasks,hash,map,long,cancellable,task,task,hash,map,new,hash,map,for,cancellable,task,holder,holder,cancellable,tasks,values,task,hash,map,put,holder,get,task,get,id,holder,get,task,return,collections,unmodifiable,map,task,hash,map
TaskManager -> public Map<Long, CancellableTask> getCancellableTasks();1531179852;Returns the list of currently running tasks on the node that can be cancelled;public Map<Long, CancellableTask> getCancellableTasks() {_        HashMap<Long, CancellableTask> taskHashMap = new HashMap<>()__        for (CancellableTaskHolder holder : cancellableTasks.values()) {_            taskHashMap.put(holder.getTask().getId(), holder.getTask())__        }_        return Collections.unmodifiableMap(taskHashMap)__    };returns,the,list,of,currently,running,tasks,on,the,node,that,can,be,cancelled;public,map,long,cancellable,task,get,cancellable,tasks,hash,map,long,cancellable,task,task,hash,map,new,hash,map,for,cancellable,task,holder,holder,cancellable,tasks,values,task,hash,map,put,holder,get,task,get,id,holder,get,task,return,collections,unmodifiable,map,task,hash,map
TaskManager -> public Map<Long, CancellableTask> getCancellableTasks();1541092382;Returns the list of currently running tasks on the node that can be cancelled;public Map<Long, CancellableTask> getCancellableTasks() {_        HashMap<Long, CancellableTask> taskHashMap = new HashMap<>()__        for (CancellableTaskHolder holder : cancellableTasks.values()) {_            taskHashMap.put(holder.getTask().getId(), holder.getTask())__        }_        return Collections.unmodifiableMap(taskHashMap)__    };returns,the,list,of,currently,running,tasks,on,the,node,that,can,be,cancelled;public,map,long,cancellable,task,get,cancellable,tasks,hash,map,long,cancellable,task,task,hash,map,new,hash,map,for,cancellable,task,holder,holder,cancellable,tasks,values,task,hash,map,put,holder,get,task,get,id,holder,get,task,return,collections,unmodifiable,map,task,hash,map
TaskManager -> public Map<Long, CancellableTask> getCancellableTasks();1542402632;Returns the list of currently running tasks on the node that can be cancelled;public Map<Long, CancellableTask> getCancellableTasks() {_        HashMap<Long, CancellableTask> taskHashMap = new HashMap<>()__        for (CancellableTaskHolder holder : cancellableTasks.values()) {_            taskHashMap.put(holder.getTask().getId(), holder.getTask())__        }_        return Collections.unmodifiableMap(taskHashMap)__    };returns,the,list,of,currently,running,tasks,on,the,node,that,can,be,cancelled;public,map,long,cancellable,task,get,cancellable,tasks,hash,map,long,cancellable,task,task,hash,map,new,hash,map,for,cancellable,task,holder,holder,cancellable,tasks,values,task,hash,map,put,holder,get,task,get,id,holder,get,task,return,collections,unmodifiable,map,task,hash,map
TaskManager -> public void setBan(TaskId parentTaskId, String reason);1524684173;Bans all tasks with the specified parent task from execution, cancels all tasks that are currently executing._<p>_This method is called when a parent task that has children is cancelled.;public void setBan(TaskId parentTaskId, String reason) {_        logger.trace("setting ban for the parent task {} {}", parentTaskId, reason)___        _        synchronized (banedParents) {_            if (lastDiscoveryNodes.nodeExists(parentTaskId.getNodeId())) {_                _                banedParents.put(parentTaskId, reason)__            }_        }__        _        for (Map.Entry<Long, CancellableTaskHolder> taskEntry : cancellableTasks.entrySet()) {_            CancellableTaskHolder holder = taskEntry.getValue()__            if (holder.hasParent(parentTaskId)) {_                holder.cancel(reason)__            }_        }_    };bans,all,tasks,with,the,specified,parent,task,from,execution,cancels,all,tasks,that,are,currently,executing,p,this,method,is,called,when,a,parent,task,that,has,children,is,cancelled;public,void,set,ban,task,id,parent,task,id,string,reason,logger,trace,setting,ban,for,the,parent,task,parent,task,id,reason,synchronized,baned,parents,if,last,discovery,nodes,node,exists,parent,task,id,get,node,id,baned,parents,put,parent,task,id,reason,for,map,entry,long,cancellable,task,holder,task,entry,cancellable,tasks,entry,set,cancellable,task,holder,holder,task,entry,get,value,if,holder,has,parent,parent,task,id,holder,cancel,reason
TaskManager -> public void setBan(TaskId parentTaskId, String reason);1531179852;Bans all tasks with the specified parent task from execution, cancels all tasks that are currently executing._<p>_This method is called when a parent task that has children is cancelled.;public void setBan(TaskId parentTaskId, String reason) {_        logger.trace("setting ban for the parent task {} {}", parentTaskId, reason)___        _        synchronized (banedParents) {_            if (lastDiscoveryNodes.nodeExists(parentTaskId.getNodeId())) {_                _                banedParents.put(parentTaskId, reason)__            }_        }__        _        for (Map.Entry<Long, CancellableTaskHolder> taskEntry : cancellableTasks.entrySet()) {_            CancellableTaskHolder holder = taskEntry.getValue()__            if (holder.hasParent(parentTaskId)) {_                holder.cancel(reason)__            }_        }_    };bans,all,tasks,with,the,specified,parent,task,from,execution,cancels,all,tasks,that,are,currently,executing,p,this,method,is,called,when,a,parent,task,that,has,children,is,cancelled;public,void,set,ban,task,id,parent,task,id,string,reason,logger,trace,setting,ban,for,the,parent,task,parent,task,id,reason,synchronized,baned,parents,if,last,discovery,nodes,node,exists,parent,task,id,get,node,id,baned,parents,put,parent,task,id,reason,for,map,entry,long,cancellable,task,holder,task,entry,cancellable,tasks,entry,set,cancellable,task,holder,holder,task,entry,get,value,if,holder,has,parent,parent,task,id,holder,cancel,reason
TaskManager -> public void setBan(TaskId parentTaskId, String reason);1541092382;Bans all tasks with the specified parent task from execution, cancels all tasks that are currently executing._<p>_This method is called when a parent task that has children is cancelled.;public void setBan(TaskId parentTaskId, String reason) {_        logger.trace("setting ban for the parent task {} {}", parentTaskId, reason)___        _        synchronized (banedParents) {_            if (lastDiscoveryNodes.nodeExists(parentTaskId.getNodeId())) {_                _                banedParents.put(parentTaskId, reason)__            }_        }__        _        for (Map.Entry<Long, CancellableTaskHolder> taskEntry : cancellableTasks.entrySet()) {_            CancellableTaskHolder holder = taskEntry.getValue()__            if (holder.hasParent(parentTaskId)) {_                holder.cancel(reason)__            }_        }_    };bans,all,tasks,with,the,specified,parent,task,from,execution,cancels,all,tasks,that,are,currently,executing,p,this,method,is,called,when,a,parent,task,that,has,children,is,cancelled;public,void,set,ban,task,id,parent,task,id,string,reason,logger,trace,setting,ban,for,the,parent,task,parent,task,id,reason,synchronized,baned,parents,if,last,discovery,nodes,node,exists,parent,task,id,get,node,id,baned,parents,put,parent,task,id,reason,for,map,entry,long,cancellable,task,holder,task,entry,cancellable,tasks,entry,set,cancellable,task,holder,holder,task,entry,get,value,if,holder,has,parent,parent,task,id,holder,cancel,reason
TaskManager -> public void setBan(TaskId parentTaskId, String reason);1542402632;Bans all tasks with the specified parent task from execution, cancels all tasks that are currently executing._<p>_This method is called when a parent task that has children is cancelled.;public void setBan(TaskId parentTaskId, String reason) {_        logger.trace("setting ban for the parent task {} {}", parentTaskId, reason)___        _        synchronized (banedParents) {_            if (lastDiscoveryNodes.nodeExists(parentTaskId.getNodeId())) {_                _                banedParents.put(parentTaskId, reason)__            }_        }__        _        for (Map.Entry<Long, CancellableTaskHolder> taskEntry : cancellableTasks.entrySet()) {_            CancellableTaskHolder holder = taskEntry.getValue()__            if (holder.hasParent(parentTaskId)) {_                holder.cancel(reason)__            }_        }_    };bans,all,tasks,with,the,specified,parent,task,from,execution,cancels,all,tasks,that,are,currently,executing,p,this,method,is,called,when,a,parent,task,that,has,children,is,cancelled;public,void,set,ban,task,id,parent,task,id,string,reason,logger,trace,setting,ban,for,the,parent,task,parent,task,id,reason,synchronized,baned,parents,if,last,discovery,nodes,node,exists,parent,task,id,get,node,id,baned,parents,put,parent,task,id,reason,for,map,entry,long,cancellable,task,holder,task,entry,cancellable,tasks,entry,set,cancellable,task,holder,holder,task,entry,get,value,if,holder,has,parent,parent,task,id,holder,cancel,reason
TaskManager -> CancellableTaskHolder -> public boolean cancel(String reason, Runnable listener);1524684173;Marks task as cancelled._<p>_Returns true if cancellation was successful, false otherwise.;public boolean cancel(String reason, Runnable listener) {_            final boolean cancelled__            synchronized (this) {_                assert reason != null__                if (cancellationReason == null) {_                    cancellationReason = reason__                    cancellationListener = listener__                    cancelled = true__                } else {_                    _                    cancelled = false__                }_            }_            if (cancelled) {_                task.cancel(reason)__            }_            return cancelled__        };marks,task,as,cancelled,p,returns,true,if,cancellation,was,successful,false,otherwise;public,boolean,cancel,string,reason,runnable,listener,final,boolean,cancelled,synchronized,this,assert,reason,null,if,cancellation,reason,null,cancellation,reason,reason,cancellation,listener,listener,cancelled,true,else,cancelled,false,if,cancelled,task,cancel,reason,return,cancelled
TaskManager -> CancellableTaskHolder -> public boolean cancel(String reason, Runnable listener);1531179852;Marks task as cancelled._<p>_Returns true if cancellation was successful, false otherwise.;public boolean cancel(String reason, Runnable listener) {_            final boolean cancelled__            synchronized (this) {_                assert reason != null__                if (cancellationReason == null) {_                    cancellationReason = reason__                    cancellationListener = listener__                    cancelled = true__                } else {_                    _                    cancelled = false__                }_            }_            if (cancelled) {_                task.cancel(reason)__            }_            return cancelled__        };marks,task,as,cancelled,p,returns,true,if,cancellation,was,successful,false,otherwise;public,boolean,cancel,string,reason,runnable,listener,final,boolean,cancelled,synchronized,this,assert,reason,null,if,cancellation,reason,null,cancellation,reason,reason,cancellation,listener,listener,cancelled,true,else,cancelled,false,if,cancelled,task,cancel,reason,return,cancelled
TaskManager -> CancellableTaskHolder -> public boolean cancel(String reason, Runnable listener);1541092382;Marks task as cancelled._<p>_Returns true if cancellation was successful, false otherwise.;public boolean cancel(String reason, Runnable listener) {_            final boolean cancelled__            synchronized (this) {_                assert reason != null__                if (cancellationReason == null) {_                    cancellationReason = reason__                    cancellationListener = listener__                    cancelled = true__                } else {_                    _                    cancelled = false__                }_            }_            if (cancelled) {_                task.cancel(reason)__            }_            return cancelled__        };marks,task,as,cancelled,p,returns,true,if,cancellation,was,successful,false,otherwise;public,boolean,cancel,string,reason,runnable,listener,final,boolean,cancelled,synchronized,this,assert,reason,null,if,cancellation,reason,null,cancellation,reason,reason,cancellation,listener,listener,cancelled,true,else,cancelled,false,if,cancelled,task,cancel,reason,return,cancelled
TaskManager -> CancellableTaskHolder -> public boolean cancel(String reason, Runnable listener);1542402632;Marks task as cancelled._<p>_Returns true if cancellation was successful, false otherwise.;public boolean cancel(String reason, Runnable listener) {_            final boolean cancelled__            synchronized (this) {_                assert reason != null__                if (cancellationReason == null) {_                    cancellationReason = reason__                    cancellationListener = listener__                    cancelled = true__                } else {_                    _                    cancelled = false__                }_            }_            if (cancelled) {_                task.cancel(reason)__            }_            return cancelled__        };marks,task,as,cancelled,p,returns,true,if,cancellation,was,successful,false,otherwise;public,boolean,cancel,string,reason,runnable,listener,final,boolean,cancelled,synchronized,this,assert,reason,null,if,cancellation,reason,null,cancellation,reason,reason,cancellation,listener,listener,cancelled,true,else,cancelled,false,if,cancelled,task,cancel,reason,return,cancelled
TaskManager -> public int getBanCount();1524684173;Returns the number of currently banned tasks._<p>_Will be used in task manager stats and for debugging.;public int getBanCount() {_        return banedParents.size()__    };returns,the,number,of,currently,banned,tasks,p,will,be,used,in,task,manager,stats,and,for,debugging;public,int,get,ban,count,return,baned,parents,size
TaskManager -> public int getBanCount();1531179852;Returns the number of currently banned tasks._<p>_Will be used in task manager stats and for debugging.;public int getBanCount() {_        return banedParents.size()__    };returns,the,number,of,currently,banned,tasks,p,will,be,used,in,task,manager,stats,and,for,debugging;public,int,get,ban,count,return,baned,parents,size
TaskManager -> public int getBanCount();1541092382;Returns the number of currently banned tasks._<p>_Will be used in task manager stats and for debugging.;public int getBanCount() {_        return banedParents.size()__    };returns,the,number,of,currently,banned,tasks,p,will,be,used,in,task,manager,stats,and,for,debugging;public,int,get,ban,count,return,baned,parents,size
TaskManager -> public int getBanCount();1542402632;Returns the number of currently banned tasks._<p>_Will be used in task manager stats and for debugging.;public int getBanCount() {_        return banedParents.size()__    };returns,the,number,of,currently,banned,tasks,p,will,be,used,in,task,manager,stats,and,for,debugging;public,int,get,ban,count,return,baned,parents,size
