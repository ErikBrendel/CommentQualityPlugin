commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected String executor() {     // all in memory work here...     return ThreadPool.Names.SAME. }
false;protected;2;5;;@Override protected ClusterBlockException checkBlock(ClusterSearchShardsRequest request, ClusterState state) {     return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ, indexNameExpressionResolver.concreteIndexNames(state, request)). }
false;protected;0;4;;@Override protected ClusterSearchShardsResponse newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;protected;1;4;;@Override protected ClusterSearchShardsResponse read(StreamInput in) throws IOException {     return new ClusterSearchShardsResponse(in). }
false;protected;3;38;;@Override protected void masterOperation(final ClusterSearchShardsRequest request, final ClusterState state, final ActionListener<ClusterSearchShardsResponse> listener) {     ClusterState clusterState = clusterService.state().     String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(clusterState, request).     Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(state, request.routing(), request.indices()).     Map<String, AliasFilter> indicesAndFilters = new HashMap<>().     for (String index : concreteIndices) {         final AliasFilter aliasFilter = indicesService.buildAliasFilter(clusterState, index, request.indices()).         final String[] aliases = indexNameExpressionResolver.indexAliases(clusterState, index, aliasMetadata -> true, true, request.indices()).         indicesAndFilters.put(index, new AliasFilter(aliasFilter.getQueryBuilder(), aliases)).     }     Set<String> nodeIds = new HashSet<>().     GroupShardsIterator<ShardIterator> groupShardsIterator = clusterService.operationRouting().searchShards(clusterState, concreteIndices, routingMap, request.preference()).     ShardRouting shard.     ClusterSearchShardsGroup[] groupResponses = new ClusterSearchShardsGroup[groupShardsIterator.size()].     int currentGroup = 0.     for (ShardIterator shardIt : groupShardsIterator) {         ShardId shardId = shardIt.shardId().         ShardRouting[] shardRoutings = new ShardRouting[shardIt.size()].         int currentShard = 0.         shardIt.reset().         while ((shard = shardIt.nextOrNull()) != null) {             shardRoutings[currentShard++] = shard.             nodeIds.add(shard.currentNodeId()).         }         groupResponses[currentGroup++] = new ClusterSearchShardsGroup(shardId, shardRoutings).     }     DiscoveryNode[] nodes = new DiscoveryNode[nodeIds.size()].     int currentNode = 0.     for (String nodeId : nodeIds) {         nodes[currentNode++] = clusterState.getNodes().get(nodeId).     }     listener.onResponse(new ClusterSearchShardsResponse(groupResponses, nodes, indicesAndFilters)). }
