commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the field capabilities map.  */ ;/**  * Get the field capabilities map.  */ public Map<String, Map<String, FieldCapabilities>> get() {     return responseMap. }
true;;0;3;/**  * Returns the actual per-index field caps responses  */ ;/**  * Returns the actual per-index field caps responses  */ List<FieldCapabilitiesIndexResponse> getIndexResponses() {     return indexResponses. }
true;public;1;3;/**  * Get the field capabilities per type for the provided {@code field}.  */ ;/**  * Get the field capabilities per type for the provided {@code field}.  */ public Map<String, FieldCapabilities> getField(String field) {     return responseMap.get(field). }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     this.responseMap = in.readMap(StreamInput::readString, FieldCapabilitiesResponse::readField).     indexResponses = in.readList(FieldCapabilitiesIndexResponse::new). }
false;private,static;1;3;;private static Map<String, FieldCapabilities> readField(StreamInput in) throws IOException {     return in.readMap(StreamInput::readString, FieldCapabilities::new). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeMap(responseMap, StreamOutput::writeString, FieldCapabilitiesResponse::writeField).     out.writeList(indexResponses). }
false;private,static;2;4;;private static void writeField(StreamOutput out, Map<String, FieldCapabilities> map) throws IOException {     out.writeMap(map, StreamOutput::writeString, (valueOut, fc) -> fc.writeTo(valueOut)). }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject().field(FIELDS_FIELD.getPreferredName(), responseMap).endObject(). }
false;public,static;1;3;;public static FieldCapabilitiesResponse fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;private,static;2;13;;private static Map<String, FieldCapabilities> parseTypeToCapabilities(XContentParser parser, String name) throws IOException {     Map<String, FieldCapabilities> typeToCapabilities = new HashMap<>().     XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation).         String type = parser.currentName().         FieldCapabilities capabilities = FieldCapabilities.fromXContent(name, parser).         typeToCapabilities.put(type, capabilities).     }     return typeToCapabilities. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     FieldCapabilitiesResponse that = (FieldCapabilitiesResponse) o.     return responseMap.equals(that.responseMap). }
false;public;0;4;;@Override public int hashCode() {     return responseMap.hashCode(). }
