commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Map<String, T> getRegistry() {     return registry. }
false;public;2;7;;public void register(String name, T t) {     requireNonNull(name, "name is required").     requireNonNull(t, targetName + " is required").     if (registry.putIfAbsent(name, t) != null) {         throw new IllegalArgumentException(targetName + " for name [" + name + "] already registered").     } }
false;public;2;7;;public <P> void extractAndRegister(List<P> plugins, Function<P, Map<String, T>> lookup) {     for (P plugin : plugins) {         for (Map.Entry<String, T> entry : lookup.apply(plugin).entrySet()) {             register(entry.getKey(), entry.getValue()).         }     } }
