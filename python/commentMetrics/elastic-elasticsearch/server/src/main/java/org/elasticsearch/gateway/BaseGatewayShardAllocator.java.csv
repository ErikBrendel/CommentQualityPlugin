# id;timestamp;commentText;codeText;commentWords;codeWords
BaseGatewayShardAllocator -> protected List<NodeAllocationResult> buildDecisionsForAllNodes(ShardRouting shard, RoutingAllocation allocation);1524684173;Builds decisions for all nodes in the cluster, so that the explain API can provide information on_allocation decisions for each node, while still waiting to allocate the shard (e.g. due to fetching shard data).;protected List<NodeAllocationResult> buildDecisionsForAllNodes(ShardRouting shard, RoutingAllocation allocation) {_        List<NodeAllocationResult> results = new ArrayList<>()__        for (RoutingNode node : allocation.routingNodes()) {_            Decision decision = allocation.deciders().canAllocate(shard, node, allocation)__            results.add(new NodeAllocationResult(node.node(), null, decision))__        }_        return results__    };builds,decisions,for,all,nodes,in,the,cluster,so,that,the,explain,api,can,provide,information,on,allocation,decisions,for,each,node,while,still,waiting,to,allocate,the,shard,e,g,due,to,fetching,shard,data;protected,list,node,allocation,result,build,decisions,for,all,nodes,shard,routing,shard,routing,allocation,allocation,list,node,allocation,result,results,new,array,list,for,routing,node,node,allocation,routing,nodes,decision,decision,allocation,deciders,can,allocate,shard,node,allocation,results,add,new,node,allocation,result,node,node,null,decision,return,results
BaseGatewayShardAllocator -> protected List<NodeAllocationResult> buildDecisionsForAllNodes(ShardRouting shard, RoutingAllocation allocation);1541092382;Builds decisions for all nodes in the cluster, so that the explain API can provide information on_allocation decisions for each node, while still waiting to allocate the shard (e.g. due to fetching shard data).;protected List<NodeAllocationResult> buildDecisionsForAllNodes(ShardRouting shard, RoutingAllocation allocation) {_        List<NodeAllocationResult> results = new ArrayList<>()__        for (RoutingNode node : allocation.routingNodes()) {_            Decision decision = allocation.deciders().canAllocate(shard, node, allocation)__            results.add(new NodeAllocationResult(node.node(), null, decision))__        }_        return results__    };builds,decisions,for,all,nodes,in,the,cluster,so,that,the,explain,api,can,provide,information,on,allocation,decisions,for,each,node,while,still,waiting,to,allocate,the,shard,e,g,due,to,fetching,shard,data;protected,list,node,allocation,result,build,decisions,for,all,nodes,shard,routing,shard,routing,allocation,allocation,list,node,allocation,result,results,new,array,list,for,routing,node,node,allocation,routing,nodes,decision,decision,allocation,deciders,can,allocate,shard,node,allocation,results,add,new,node,allocation,result,node,node,null,decision,return,results
BaseGatewayShardAllocator -> protected List<NodeAllocationResult> buildDecisionsForAllNodes(ShardRouting shard, RoutingAllocation allocation);1542402632;Builds decisions for all nodes in the cluster, so that the explain API can provide information on_allocation decisions for each node, while still waiting to allocate the shard (e.g. due to fetching shard data).;protected List<NodeAllocationResult> buildDecisionsForAllNodes(ShardRouting shard, RoutingAllocation allocation) {_        List<NodeAllocationResult> results = new ArrayList<>()__        for (RoutingNode node : allocation.routingNodes()) {_            Decision decision = allocation.deciders().canAllocate(shard, node, allocation)__            results.add(new NodeAllocationResult(node.node(), null, decision))__        }_        return results__    };builds,decisions,for,all,nodes,in,the,cluster,so,that,the,explain,api,can,provide,information,on,allocation,decisions,for,each,node,while,still,waiting,to,allocate,the,shard,e,g,due,to,fetching,shard,data;protected,list,node,allocation,result,build,decisions,for,all,nodes,shard,routing,shard,routing,allocation,allocation,list,node,allocation,result,results,new,array,list,for,routing,node,node,allocation,routing,nodes,decision,decision,allocation,deciders,can,allocate,shard,node,allocation,results,add,new,node,allocation,result,node,node,null,decision,return,results
BaseGatewayShardAllocator -> public abstract AllocateUnassignedDecision makeAllocationDecision(ShardRouting unassignedShard,                                                                       RoutingAllocation allocation,                                                                       Logger logger)_;1524684173;Make a decision on the allocation of an unassigned shard.  This method is used by_{@link #allocateUnassigned(RoutingAllocation)} to make decisions about whether or not_the shard can be allocated by this allocator and if so, to which node it will be allocated.__@param unassignedShard  the unassigned shard to allocate_@param allocation       the current routing state_@param logger           the logger_@return an {@link AllocateUnassignedDecision} with the final decision of whether to allocate and details of the decision;public abstract AllocateUnassignedDecision makeAllocationDecision(ShardRouting unassignedShard,_                                                                      RoutingAllocation allocation,_                                                                      Logger logger)_;make,a,decision,on,the,allocation,of,an,unassigned,shard,this,method,is,used,by,link,allocate,unassigned,routing,allocation,to,make,decisions,about,whether,or,not,the,shard,can,be,allocated,by,this,allocator,and,if,so,to,which,node,it,will,be,allocated,param,unassigned,shard,the,unassigned,shard,to,allocate,param,allocation,the,current,routing,state,param,logger,the,logger,return,an,link,allocate,unassigned,decision,with,the,final,decision,of,whether,to,allocate,and,details,of,the,decision;public,abstract,allocate,unassigned,decision,make,allocation,decision,shard,routing,unassigned,shard,routing,allocation,allocation,logger,logger
BaseGatewayShardAllocator -> public abstract AllocateUnassignedDecision makeAllocationDecision(ShardRouting unassignedShard,                                                                       RoutingAllocation allocation,                                                                       Logger logger)_;1541092382;Make a decision on the allocation of an unassigned shard.  This method is used by_{@link #allocateUnassigned(RoutingAllocation)} to make decisions about whether or not_the shard can be allocated by this allocator and if so, to which node it will be allocated.__@param unassignedShard  the unassigned shard to allocate_@param allocation       the current routing state_@param logger           the logger_@return an {@link AllocateUnassignedDecision} with the final decision of whether to allocate and details of the decision;public abstract AllocateUnassignedDecision makeAllocationDecision(ShardRouting unassignedShard,_                                                                      RoutingAllocation allocation,_                                                                      Logger logger)_;make,a,decision,on,the,allocation,of,an,unassigned,shard,this,method,is,used,by,link,allocate,unassigned,routing,allocation,to,make,decisions,about,whether,or,not,the,shard,can,be,allocated,by,this,allocator,and,if,so,to,which,node,it,will,be,allocated,param,unassigned,shard,the,unassigned,shard,to,allocate,param,allocation,the,current,routing,state,param,logger,the,logger,return,an,link,allocate,unassigned,decision,with,the,final,decision,of,whether,to,allocate,and,details,of,the,decision;public,abstract,allocate,unassigned,decision,make,allocation,decision,shard,routing,unassigned,shard,routing,allocation,allocation,logger,logger
BaseGatewayShardAllocator -> public abstract AllocateUnassignedDecision makeAllocationDecision(ShardRouting unassignedShard,                                                                       RoutingAllocation allocation,                                                                       Logger logger)_;1542402632;Make a decision on the allocation of an unassigned shard.  This method is used by_{@link #allocateUnassigned(RoutingAllocation)} to make decisions about whether or not_the shard can be allocated by this allocator and if so, to which node it will be allocated.__@param unassignedShard  the unassigned shard to allocate_@param allocation       the current routing state_@param logger           the logger_@return an {@link AllocateUnassignedDecision} with the final decision of whether to allocate and details of the decision;public abstract AllocateUnassignedDecision makeAllocationDecision(ShardRouting unassignedShard,_                                                                      RoutingAllocation allocation,_                                                                      Logger logger)_;make,a,decision,on,the,allocation,of,an,unassigned,shard,this,method,is,used,by,link,allocate,unassigned,routing,allocation,to,make,decisions,about,whether,or,not,the,shard,can,be,allocated,by,this,allocator,and,if,so,to,which,node,it,will,be,allocated,param,unassigned,shard,the,unassigned,shard,to,allocate,param,allocation,the,current,routing,state,param,logger,the,logger,return,an,link,allocate,unassigned,decision,with,the,final,decision,of,whether,to,allocate,and,details,of,the,decision;public,abstract,allocate,unassigned,decision,make,allocation,decision,shard,routing,unassigned,shard,routing,allocation,allocation,logger,logger
BaseGatewayShardAllocator -> public void allocateUnassigned(RoutingAllocation allocation);1524684173;Allocate unassigned shards to nodes (if any) where valid copies of the shard already exist._It is up to the individual implementations of {@link #makeAllocationDecision(ShardRouting, RoutingAllocation, Logger)}_to make decisions on assigning shards to nodes.__@param allocation the allocation state container object;public void allocateUnassigned(RoutingAllocation allocation) {_        final RoutingNodes routingNodes = allocation.routingNodes()__        final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()__        while (unassignedIterator.hasNext()) {_            final ShardRouting shard = unassignedIterator.next()__            final AllocateUnassignedDecision allocateUnassignedDecision = makeAllocationDecision(shard, allocation, logger)___            if (allocateUnassignedDecision.isDecisionTaken() == false) {_                _                continue__            }__            if (allocateUnassignedDecision.getAllocationDecision() == AllocationDecision.YES) {_                unassignedIterator.initialize(allocateUnassignedDecision.getTargetNode().getId(),_                    allocateUnassignedDecision.getAllocationId(),_                    shard.primary() ? ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE :_                                      allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE),_                    allocation.changes())__            } else {_                unassignedIterator.removeAndIgnore(allocateUnassignedDecision.getAllocationStatus(), allocation.changes())__            }_        }_    };allocate,unassigned,shards,to,nodes,if,any,where,valid,copies,of,the,shard,already,exist,it,is,up,to,the,individual,implementations,of,link,make,allocation,decision,shard,routing,routing,allocation,logger,to,make,decisions,on,assigning,shards,to,nodes,param,allocation,the,allocation,state,container,object;public,void,allocate,unassigned,routing,allocation,allocation,final,routing,nodes,routing,nodes,allocation,routing,nodes,final,routing,nodes,unassigned,shards,unassigned,iterator,unassigned,iterator,routing,nodes,unassigned,iterator,while,unassigned,iterator,has,next,final,shard,routing,shard,unassigned,iterator,next,final,allocate,unassigned,decision,allocate,unassigned,decision,make,allocation,decision,shard,allocation,logger,if,allocate,unassigned,decision,is,decision,taken,false,continue,if,allocate,unassigned,decision,get,allocation,decision,allocation,decision,yes,unassigned,iterator,initialize,allocate,unassigned,decision,get,target,node,get,id,allocate,unassigned,decision,get,allocation,id,shard,primary,shard,routing,allocation,cluster,info,get,shard,size,shard,shard,routing,allocation,changes,else,unassigned,iterator,remove,and,ignore,allocate,unassigned,decision,get,allocation,status,allocation,changes
BaseGatewayShardAllocator -> public void allocateUnassigned(RoutingAllocation allocation);1541092382;Allocate unassigned shards to nodes (if any) where valid copies of the shard already exist._It is up to the individual implementations of {@link #makeAllocationDecision(ShardRouting, RoutingAllocation, Logger)}_to make decisions on assigning shards to nodes.__@param allocation the allocation state container object;public void allocateUnassigned(RoutingAllocation allocation) {_        final RoutingNodes routingNodes = allocation.routingNodes()__        final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()__        while (unassignedIterator.hasNext()) {_            final ShardRouting shard = unassignedIterator.next()__            final AllocateUnassignedDecision allocateUnassignedDecision = makeAllocationDecision(shard, allocation, logger)___            if (allocateUnassignedDecision.isDecisionTaken() == false) {_                _                continue__            }__            if (allocateUnassignedDecision.getAllocationDecision() == AllocationDecision.YES) {_                unassignedIterator.initialize(allocateUnassignedDecision.getTargetNode().getId(),_                    allocateUnassignedDecision.getAllocationId(),_                    shard.primary() ? ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE :_                                      allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE),_                    allocation.changes())__            } else {_                unassignedIterator.removeAndIgnore(allocateUnassignedDecision.getAllocationStatus(), allocation.changes())__            }_        }_    };allocate,unassigned,shards,to,nodes,if,any,where,valid,copies,of,the,shard,already,exist,it,is,up,to,the,individual,implementations,of,link,make,allocation,decision,shard,routing,routing,allocation,logger,to,make,decisions,on,assigning,shards,to,nodes,param,allocation,the,allocation,state,container,object;public,void,allocate,unassigned,routing,allocation,allocation,final,routing,nodes,routing,nodes,allocation,routing,nodes,final,routing,nodes,unassigned,shards,unassigned,iterator,unassigned,iterator,routing,nodes,unassigned,iterator,while,unassigned,iterator,has,next,final,shard,routing,shard,unassigned,iterator,next,final,allocate,unassigned,decision,allocate,unassigned,decision,make,allocation,decision,shard,allocation,logger,if,allocate,unassigned,decision,is,decision,taken,false,continue,if,allocate,unassigned,decision,get,allocation,decision,allocation,decision,yes,unassigned,iterator,initialize,allocate,unassigned,decision,get,target,node,get,id,allocate,unassigned,decision,get,allocation,id,shard,primary,shard,routing,allocation,cluster,info,get,shard,size,shard,shard,routing,allocation,changes,else,unassigned,iterator,remove,and,ignore,allocate,unassigned,decision,get,allocation,status,allocation,changes
BaseGatewayShardAllocator -> public void allocateUnassigned(RoutingAllocation allocation);1542402632;Allocate unassigned shards to nodes (if any) where valid copies of the shard already exist._It is up to the individual implementations of {@link #makeAllocationDecision(ShardRouting, RoutingAllocation, Logger)}_to make decisions on assigning shards to nodes.__@param allocation the allocation state container object;public void allocateUnassigned(RoutingAllocation allocation) {_        final RoutingNodes routingNodes = allocation.routingNodes()__        final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()__        while (unassignedIterator.hasNext()) {_            final ShardRouting shard = unassignedIterator.next()__            final AllocateUnassignedDecision allocateUnassignedDecision = makeAllocationDecision(shard, allocation, logger)___            if (allocateUnassignedDecision.isDecisionTaken() == false) {_                _                continue__            }__            if (allocateUnassignedDecision.getAllocationDecision() == AllocationDecision.YES) {_                unassignedIterator.initialize(allocateUnassignedDecision.getTargetNode().getId(),_                    allocateUnassignedDecision.getAllocationId(),_                    shard.primary() ? ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE :_                                      allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE),_                    allocation.changes())__            } else {_                unassignedIterator.removeAndIgnore(allocateUnassignedDecision.getAllocationStatus(), allocation.changes())__            }_        }_    };allocate,unassigned,shards,to,nodes,if,any,where,valid,copies,of,the,shard,already,exist,it,is,up,to,the,individual,implementations,of,link,make,allocation,decision,shard,routing,routing,allocation,logger,to,make,decisions,on,assigning,shards,to,nodes,param,allocation,the,allocation,state,container,object;public,void,allocate,unassigned,routing,allocation,allocation,final,routing,nodes,routing,nodes,allocation,routing,nodes,final,routing,nodes,unassigned,shards,unassigned,iterator,unassigned,iterator,routing,nodes,unassigned,iterator,while,unassigned,iterator,has,next,final,shard,routing,shard,unassigned,iterator,next,final,allocate,unassigned,decision,allocate,unassigned,decision,make,allocation,decision,shard,allocation,logger,if,allocate,unassigned,decision,is,decision,taken,false,continue,if,allocate,unassigned,decision,get,allocation,decision,allocation,decision,yes,unassigned,iterator,initialize,allocate,unassigned,decision,get,target,node,get,id,allocate,unassigned,decision,get,allocation,id,shard,primary,shard,routing,allocation,cluster,info,get,shard,size,shard,shard,routing,allocation,changes,else,unassigned,iterator,remove,and,ignore,allocate,unassigned,decision,get,allocation,status,allocation,changes
