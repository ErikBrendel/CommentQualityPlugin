commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;public void add(FieldDataStats stats) {     this.memorySize += stats.memorySize.     this.evictions += stats.evictions.     if (stats.fields != null) {         if (fields == null) {             fields = stats.fields.copy().         } else {             fields.add(stats.fields).         }     } }
false;public;0;3;;public long getMemorySizeInBytes() {     return this.memorySize. }
false;public;0;3;;public ByteSizeValue getMemorySize() {     return new ByteSizeValue(memorySize). }
false;public;0;3;;public long getEvictions() {     return this.evictions. }
false;public;0;4;;@Nullable public FieldMemoryStats getFields() {     return fields. }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     memorySize = in.readVLong().     evictions = in.readVLong().     fields = in.readOptionalWriteable(FieldMemoryStats::new). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(memorySize).     out.writeVLong(evictions).     out.writeOptionalWriteable(fields). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(FIELDDATA).     builder.humanReadableField(MEMORY_SIZE_IN_BYTES, MEMORY_SIZE, getMemorySize()).     builder.field(EVICTIONS, getEvictions()).     if (fields != null) {         fields.toXContent(builder, FIELDS, MEMORY_SIZE_IN_BYTES, MEMORY_SIZE).     }     builder.endObject().     return builder. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     FieldDataStats that = (FieldDataStats) o.     return memorySize == that.memorySize && evictions == that.evictions && Objects.equals(fields, that.fields). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(memorySize, evictions, fields). }
