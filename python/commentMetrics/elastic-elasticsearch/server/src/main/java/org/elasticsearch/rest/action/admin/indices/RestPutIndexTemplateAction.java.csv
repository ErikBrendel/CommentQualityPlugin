commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "put_index_template_action". }
false;public;2;26;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     boolean includeTypeName = request.paramAsBoolean(INCLUDE_TYPE_NAME_PARAMETER, DEFAULT_INCLUDE_TYPE_NAME_POLICY).     PutIndexTemplateRequest putRequest = new PutIndexTemplateRequest(request.param("name")).     if (request.hasParam(INCLUDE_TYPE_NAME_PARAMETER)) {         deprecationLogger.deprecatedAndMaybeLog("put_index_template_with_types", TYPES_DEPRECATION_MESSAGE).     }     if (request.hasParam("template")) {         deprecationLogger.deprecated("Deprecated parameter[template] used, replaced by [index_patterns]").         putRequest.patterns(Collections.singletonList(request.param("template"))).     } else {         putRequest.patterns(Arrays.asList(request.paramAsStringArray("index_patterns", Strings.EMPTY_ARRAY))).     }     putRequest.order(request.paramAsInt("order", putRequest.order())).     putRequest.masterNodeTimeout(request.paramAsTime("master_timeout", putRequest.masterNodeTimeout())).     putRequest.create(request.paramAsBoolean("create", false)).     putRequest.cause(request.param("cause", "")).     Map<String, Object> sourceAsMap = XContentHelper.convertToMap(request.requiredContent(), false, request.getXContentType()).v2().     sourceAsMap = RestCreateIndexAction.prepareMappings(sourceAsMap, includeTypeName).     putRequest.source(sourceAsMap).     return channel -> client.admin().indices().putTemplate(putRequest, new RestToXContentListener<>(channel)). }
