commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected String executor() {     // we go async right away...     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(PutIndexTemplateRequest request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
false;public;1;4;;@Override public void onResponse(MetaDataIndexTemplateService.PutResponse response) {     listener.onResponse(new AcknowledgedResponse(response.acknowledged())). }
false;public;1;5;;@Override public void onFailure(Exception e) {     logger.debug(() -> new ParameterizedMessage("failed to put template [{}]", request.name()), e).     listener.onFailure(e). }
false;protected;3;33;;@Override protected void masterOperation(final PutIndexTemplateRequest request, final ClusterState state, final ActionListener<AcknowledgedResponse> listener) {     String cause = request.cause().     if (cause.length() == 0) {         cause = "api".     }     final Settings.Builder templateSettingsBuilder = Settings.builder().     templateSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).     // templates must be consistent with regards to dependencies     indexScopedSettings.validate(templateSettingsBuilder.build(), true).     indexTemplateService.putTemplate(new MetaDataIndexTemplateService.PutRequest(cause, request.name()).patterns(request.patterns()).order(request.order()).settings(templateSettingsBuilder.build()).mappings(request.mappings()).aliases(request.aliases()).create(request.create()).masterTimeout(request.masterNodeTimeout()).version(request.version()), new MetaDataIndexTemplateService.PutListener() {          @Override         public void onResponse(MetaDataIndexTemplateService.PutResponse response) {             listener.onResponse(new AcknowledgedResponse(response.acknowledged())).         }          @Override         public void onFailure(Exception e) {             logger.debug(() -> new ParameterizedMessage("failed to put template [{}]", request.name()), e).             listener.onFailure(e).         }     }). }
