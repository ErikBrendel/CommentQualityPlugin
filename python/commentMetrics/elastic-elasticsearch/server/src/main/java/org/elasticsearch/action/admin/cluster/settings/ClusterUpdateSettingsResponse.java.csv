commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     if (in.getVersion().onOrAfter(Version.V_6_4_0)) {         super.readFrom(in).         transientSettings = Settings.readSettingsFromStream(in).         persistentSettings = Settings.readSettingsFromStream(in).     } else {         transientSettings = Settings.readSettingsFromStream(in).         persistentSettings = Settings.readSettingsFromStream(in).         acknowledged = in.readBoolean().     } }
false;public;0;3;;public Settings getTransientSettings() {     return transientSettings. }
false;public;0;3;;public Settings getPersistentSettings() {     return persistentSettings. }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         super.writeTo(out).         Settings.writeSettingsToStream(transientSettings, out).         Settings.writeSettingsToStream(persistentSettings, out).     } else {         Settings.writeSettingsToStream(transientSettings, out).         Settings.writeSettingsToStream(persistentSettings, out).         out.writeBoolean(acknowledged).     } }
false;protected;2;9;;@Override protected void addCustomFields(XContentBuilder builder, Params params) throws IOException {     builder.startObject(PERSISTENT.getPreferredName()).     persistentSettings.toXContent(builder, params).     builder.endObject().     builder.startObject(TRANSIENT.getPreferredName()).     transientSettings.toXContent(builder, params).     builder.endObject(). }
false;public,static;1;3;;public static ClusterUpdateSettingsResponse fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;1;9;;@Override public boolean equals(Object o) {     if (super.equals(o)) {         ClusterUpdateSettingsResponse that = (ClusterUpdateSettingsResponse) o.         return Objects.equals(transientSettings, that.transientSettings) && Objects.equals(persistentSettings, that.persistentSettings).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), transientSettings, persistentSettings). }
