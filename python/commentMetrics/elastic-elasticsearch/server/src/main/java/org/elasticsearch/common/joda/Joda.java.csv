# id;timestamp;commentText;codeText;commentWords;codeWords
Joda -> public static FormatDateTimeFormatter forPattern(String input, Locale locale);1524684173;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static FormatDateTimeFormatter forPattern(String input, Locale locale) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new FormatDateTimeFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC), locale)__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false), new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true), new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new FormatDateTimeFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC), locale)__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else if (Strings.hasLength(input) && input.contains("||")) {_                String[] formats = Strings.delimitedListToStringArray(input, "||")__                DateTimeParser[] parsers = new DateTimeParser[formats.length]___                if (formats.length == 1) {_                    formatter = forPattern(input, locale).parser()__                } else {_                    DateTimeFormatter dateTimeFormatter = null__                    for (int i = 0_ i < formats.length_ i++) {_                        FormatDateTimeFormatter currentFormatter = forPattern(formats[i], locale)__                        DateTimeFormatter currentParser = currentFormatter.parser()__                        if (dateTimeFormatter == null) {_                            dateTimeFormatter = currentFormatter.printer()__                        }_                        parsers[i] = currentParser.getParser()__                    }__                    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder().append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers)__                    formatter = builder.toFormatter()__                }_        } else {_            try {_                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        return new FormatDateTimeFormatter(input, formatter.withZone(DateTimeZone.UTC), locale)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,format,date,time,formatter,for,pattern,string,input,locale,locale,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,format,date,time,formatter,input,isodate,time,format,date,optional,time,parser,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,zone,date,time,zone,utc,locale,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,format,date,time,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,zone,date,time,zone,utc,locale,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,if,strings,has,length,input,input,contains,string,formats,strings,delimited,list,to,string,array,input,date,time,parser,parsers,new,date,time,parser,formats,length,if,formats,length,1,formatter,for,pattern,input,locale,parser,else,date,time,formatter,date,time,formatter,null,for,int,i,0,i,formats,length,i,format,date,time,formatter,current,formatter,for,pattern,formats,i,locale,date,time,formatter,current,parser,current,formatter,parser,if,date,time,formatter,null,date,time,formatter,current,formatter,printer,parsers,i,current,parser,get,parser,date,time,formatter,builder,builder,new,date,time,formatter,builder,append,date,time,formatter,with,zone,date,time,zone,utc,get,printer,parsers,formatter,builder,to,formatter,else,try,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,return,new,format,date,time,formatter,input,formatter,with,zone,date,time,zone,utc,locale
Joda -> public static FormatDateTimeFormatter forPattern(String input, Locale locale);1540583181;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static FormatDateTimeFormatter forPattern(String input, Locale locale) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new FormatDateTimeFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC), locale)__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new FormatDateTimeFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC), locale)__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else if (Strings.hasLength(input) && input.contains("||")) {_                String[] formats = Strings.delimitedListToStringArray(input, "||")__                DateTimeParser[] parsers = new DateTimeParser[formats.length]___                if (formats.length == 1) {_                    formatter = forPattern(input, locale).parser()__                } else {_                    DateTimeFormatter dateTimeFormatter = null__                    for (int i = 0_ i < formats.length_ i++) {_                        FormatDateTimeFormatter currentFormatter = forPattern(formats[i], locale)__                        DateTimeFormatter currentParser = currentFormatter.parser()__                        if (dateTimeFormatter == null) {_                            dateTimeFormatter = currentFormatter.printer()__                        }_                        parsers[i] = currentParser.getParser()__                    }__                    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()_                        .append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers)__                    formatter = builder.toFormatter()__                }_        } else {_            try {_                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        return new FormatDateTimeFormatter(input, formatter.withZone(DateTimeZone.UTC), locale)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,format,date,time,formatter,for,pattern,string,input,locale,locale,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,format,date,time,formatter,input,isodate,time,format,date,optional,time,parser,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,zone,date,time,zone,utc,locale,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,format,date,time,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,zone,date,time,zone,utc,locale,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,if,strings,has,length,input,input,contains,string,formats,strings,delimited,list,to,string,array,input,date,time,parser,parsers,new,date,time,parser,formats,length,if,formats,length,1,formatter,for,pattern,input,locale,parser,else,date,time,formatter,date,time,formatter,null,for,int,i,0,i,formats,length,i,format,date,time,formatter,current,formatter,for,pattern,formats,i,locale,date,time,formatter,current,parser,current,formatter,parser,if,date,time,formatter,null,date,time,formatter,current,formatter,printer,parsers,i,current,parser,get,parser,date,time,formatter,builder,builder,new,date,time,formatter,builder,append,date,time,formatter,with,zone,date,time,zone,utc,get,printer,parsers,formatter,builder,to,formatter,else,try,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,return,new,format,date,time,formatter,input,formatter,with,zone,date,time,zone,utc,locale
Joda -> public static FormatDateTimeFormatter forPattern(String input, Locale locale);1544232221;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static FormatDateTimeFormatter forPattern(String input, Locale locale) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new FormatDateTimeFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(locale).withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withLocale(locale).withZone(DateTimeZone.UTC))__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new FormatDateTimeFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withLocale(locale).withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withLocale(locale).withZone(DateTimeZone.UTC))__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else if (Strings.hasLength(input) && input.contains("||")) {_                String[] formats = Strings.delimitedListToStringArray(input, "||")__                DateTimeParser[] parsers = new DateTimeParser[formats.length]___                if (formats.length == 1) {_                    formatter = forPattern(input, locale).parser()__                } else {_                    DateTimeFormatter dateTimeFormatter = null__                    for (int i = 0_ i < formats.length_ i++) {_                        FormatDateTimeFormatter currentFormatter = forPattern(formats[i], locale)__                        DateTimeFormatter currentParser = currentFormatter.parser()__                        if (dateTimeFormatter == null) {_                            dateTimeFormatter = currentFormatter.printer()__                        }_                        parsers[i] = currentParser.getParser()__                    }__                    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()_                        .append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers)__                    formatter = builder.toFormatter()__                }_        } else {_            try {_                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        formatter = formatter.withLocale(locale).withZone(DateTimeZone.UTC)__        return new FormatDateTimeFormatter(input, formatter, formatter)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,format,date,time,formatter,for,pattern,string,input,locale,locale,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,format,date,time,formatter,input,isodate,time,format,date,optional,time,parser,with,locale,locale,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,locale,locale,with,zone,date,time,zone,utc,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,format,date,time,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,locale,locale,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,locale,locale,with,zone,date,time,zone,utc,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,if,strings,has,length,input,input,contains,string,formats,strings,delimited,list,to,string,array,input,date,time,parser,parsers,new,date,time,parser,formats,length,if,formats,length,1,formatter,for,pattern,input,locale,parser,else,date,time,formatter,date,time,formatter,null,for,int,i,0,i,formats,length,i,format,date,time,formatter,current,formatter,for,pattern,formats,i,locale,date,time,formatter,current,parser,current,formatter,parser,if,date,time,formatter,null,date,time,formatter,current,formatter,printer,parsers,i,current,parser,get,parser,date,time,formatter,builder,builder,new,date,time,formatter,builder,append,date,time,formatter,with,zone,date,time,zone,utc,get,printer,parsers,formatter,builder,to,formatter,else,try,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,formatter,formatter,with,locale,locale,with,zone,date,time,zone,utc,return,new,format,date,time,formatter,input,formatter,formatter
Joda -> public static JodaDateFormatter forPattern(String input, Locale locale);1544458001;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static JodaDateFormatter forPattern(String input, Locale locale) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(locale).withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withLocale(locale).withZone(DateTimeZone.UTC))__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withLocale(locale).withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withLocale(locale).withZone(DateTimeZone.UTC))__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else if (Strings.hasLength(input) && input.contains("||")) {_                String[] formats = Strings.delimitedListToStringArray(input, "||")__                DateTimeParser[] parsers = new DateTimeParser[formats.length]___                if (formats.length == 1) {_                    formatter = forPattern(input, locale).parser__                } else {_                    DateTimeFormatter dateTimeFormatter = null__                    for (int i = 0_ i < formats.length_ i++) {_                        JodaDateFormatter currentFormatter = forPattern(formats[i], locale)__                        DateTimeFormatter currentParser = currentFormatter.parser__                        if (dateTimeFormatter == null) {_                            dateTimeFormatter = currentFormatter.printer__                        }_                        parsers[i] = currentParser.getParser()__                    }__                    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()_                        .append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers)__                    formatter = builder.toFormatter()__                }_        } else {_            try {_                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        formatter = formatter.withLocale(locale).withZone(DateTimeZone.UTC)__        return new JodaDateFormatter(input, formatter, formatter)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,joda,date,formatter,for,pattern,string,input,locale,locale,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,isodate,time,format,date,optional,time,parser,with,locale,locale,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,locale,locale,with,zone,date,time,zone,utc,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,locale,locale,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,locale,locale,with,zone,date,time,zone,utc,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,if,strings,has,length,input,input,contains,string,formats,strings,delimited,list,to,string,array,input,date,time,parser,parsers,new,date,time,parser,formats,length,if,formats,length,1,formatter,for,pattern,input,locale,parser,else,date,time,formatter,date,time,formatter,null,for,int,i,0,i,formats,length,i,joda,date,formatter,current,formatter,for,pattern,formats,i,locale,date,time,formatter,current,parser,current,formatter,parser,if,date,time,formatter,null,date,time,formatter,current,formatter,printer,parsers,i,current,parser,get,parser,date,time,formatter,builder,builder,new,date,time,formatter,builder,append,date,time,formatter,with,zone,date,time,zone,utc,get,printer,parsers,formatter,builder,to,formatter,else,try,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,formatter,formatter,with,locale,locale,with,zone,date,time,zone,utc,return,new,joda,date,formatter,input,formatter,formatter
Joda -> public static JodaDateFormatter forPattern(String input, Locale locale);1544600864;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static JodaDateFormatter forPattern(String input, Locale locale) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(locale).withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withLocale(locale).withZone(DateTimeZone.UTC))__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withLocale(locale).withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withLocale(locale).withZone(DateTimeZone.UTC))__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()___        } else {_            try {_                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        formatter = formatter.withLocale(locale).withZone(DateTimeZone.UTC)__        return new JodaDateFormatter(input, formatter, formatter)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,joda,date,formatter,for,pattern,string,input,locale,locale,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,isodate,time,format,date,optional,time,parser,with,locale,locale,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,locale,locale,with,zone,date,time,zone,utc,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,locale,locale,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,locale,locale,with,zone,date,time,zone,utc,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,try,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,formatter,formatter,with,locale,locale,with,zone,date,time,zone,utc,return,new,joda,date,formatter,input,formatter,formatter
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1524684173;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1540583181;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1544232221;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1544458001;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1544600864;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1544732811;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1545155463;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1545247235;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1545293826;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale);1548420619;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone, Locale locale) {_            if (hasMilliSecondPrecision) {_                buf.append(instant - displayOffset)__            } else {_                buf.append((instant  - displayOffset) / 1000)__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,string,buffer,buf,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,if,has,milli,second,precision,buf,append,instant,display,offset,else,buf,append,instant,display,offset,1000
Joda -> public static JodaDateFormatter forPattern(String input);1544732811;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static JodaDateFormatter forPattern(String input) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC))__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC))__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else {_            try {_                maybeLogJodaDeprecation(input)__                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        formatter = formatter.withLocale(Locale.ROOT).withZone(DateTimeZone.UTC)__        return new JodaDateFormatter(input, formatter, formatter)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,joda,date,formatter,for,pattern,string,input,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,try,maybe,log,joda,deprecation,input,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,formatter,formatter,with,locale,locale,root,with,zone,date,time,zone,utc,return,new,joda,date,formatter,input,formatter,formatter
Joda -> public static JodaDateFormatter forPattern(String input);1545155463;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static JodaDateFormatter forPattern(String input) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC))__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC))__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else {_            try {_                maybeLogJodaDeprecation(input)__                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        formatter = formatter.withLocale(Locale.ROOT).withZone(DateTimeZone.UTC)__        return new JodaDateFormatter(input, formatter, formatter)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,joda,date,formatter,for,pattern,string,input,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,try,maybe,log,joda,deprecation,input,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,formatter,formatter,with,locale,locale,root,with,zone,date,time,zone,utc,return,new,joda,date,formatter,input,formatter,formatter
Joda -> public static JodaDateFormatter forPattern(String input);1545247235;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static JodaDateFormatter forPattern(String input) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC))__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC))__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else if (Strings.hasLength(input) && input.contains("||")) {_            String[] formats = Strings.delimitedListToStringArray(input, "||")__            DateTimeParser[] parsers = new DateTimeParser[formats.length]___            if (formats.length == 1) {_                formatter = forPattern(input).parser__            } else {_                DateTimeFormatter dateTimeFormatter = null__                for (int i = 0_ i < formats.length_ i++) {_                    JodaDateFormatter currentFormatter = forPattern(formats[i])__                    DateTimeFormatter currentParser = currentFormatter.parser__                    if (dateTimeFormatter == null) {_                        dateTimeFormatter = currentFormatter.printer__                    }_                    parsers[i] = currentParser.getParser()__                }__                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()_                    .append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers)__                formatter = builder.toFormatter()__            }_        } else {_            try {_                maybeLogJodaDeprecation(input)__                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        formatter = formatter.withLocale(Locale.ROOT).withZone(DateTimeZone.UTC)__        return new JodaDateFormatter(input, formatter, formatter)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,joda,date,formatter,for,pattern,string,input,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,if,strings,has,length,input,input,contains,string,formats,strings,delimited,list,to,string,array,input,date,time,parser,parsers,new,date,time,parser,formats,length,if,formats,length,1,formatter,for,pattern,input,parser,else,date,time,formatter,date,time,formatter,null,for,int,i,0,i,formats,length,i,joda,date,formatter,current,formatter,for,pattern,formats,i,date,time,formatter,current,parser,current,formatter,parser,if,date,time,formatter,null,date,time,formatter,current,formatter,printer,parsers,i,current,parser,get,parser,date,time,formatter,builder,builder,new,date,time,formatter,builder,append,date,time,formatter,with,zone,date,time,zone,utc,get,printer,parsers,formatter,builder,to,formatter,else,try,maybe,log,joda,deprecation,input,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,formatter,formatter,with,locale,locale,root,with,zone,date,time,zone,utc,return,new,joda,date,formatter,input,formatter,formatter
Joda -> public static JodaDateFormatter forPattern(String input);1545293826;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static JodaDateFormatter forPattern(String input) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC),_                    ISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC))__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC),_                    StrictISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC))__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else if (Strings.hasLength(input) && input.contains("||")) {_            String[] formats = Strings.delimitedListToStringArray(input, "||")__            DateTimeParser[] parsers = new DateTimeParser[formats.length]___            if (formats.length == 1) {_                formatter = forPattern(input).parser__            } else {_                DateTimeFormatter dateTimeFormatter = null__                for (int i = 0_ i < formats.length_ i++) {_                    JodaDateFormatter currentFormatter = forPattern(formats[i])__                    DateTimeFormatter currentParser = currentFormatter.parser__                    if (dateTimeFormatter == null) {_                        dateTimeFormatter = currentFormatter.printer__                    }_                    parsers[i] = currentParser.getParser()__                }__                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()_                    .append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers)__                formatter = builder.toFormatter()__            }_        } else {_            try {_                maybeLogJodaDeprecation(input)__                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        formatter = formatter.withLocale(Locale.ROOT).withZone(DateTimeZone.UTC)__        return new JodaDateFormatter(input, formatter, formatter)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,joda,date,formatter,for,pattern,string,input,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,strict,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,if,strings,has,length,input,input,contains,string,formats,strings,delimited,list,to,string,array,input,date,time,parser,parsers,new,date,time,parser,formats,length,if,formats,length,1,formatter,for,pattern,input,parser,else,date,time,formatter,date,time,formatter,null,for,int,i,0,i,formats,length,i,joda,date,formatter,current,formatter,for,pattern,formats,i,date,time,formatter,current,parser,current,formatter,parser,if,date,time,formatter,null,date,time,formatter,current,formatter,printer,parsers,i,current,parser,get,parser,date,time,formatter,builder,builder,new,date,time,formatter,builder,append,date,time,formatter,with,zone,date,time,zone,utc,get,printer,parsers,formatter,builder,to,formatter,else,try,maybe,log,joda,deprecation,input,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,formatter,formatter,with,locale,locale,root,with,zone,date,time,zone,utc,return,new,joda,date,formatter,input,formatter,formatter
Joda -> public static JodaDateFormatter forPattern(String input);1548420619;Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).;public static JodaDateFormatter forPattern(String input) {_        if (Strings.hasLength(input)) {_            input = input.trim()__        }_        if (input == null || input.length() == 0) {_            throw new IllegalArgumentException("No date pattern provided")__        }__        DateTimeFormatter formatter__        if ("basicDate".equals(input) || "basic_date".equals(input)) {_            formatter = ISODateTimeFormat.basicDate()__        } else if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTime()__        } else if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicDateTimeNoMillis()__        } else if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDate()__        } else if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTime()__        } else if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicOrdinalDateTimeNoMillis()__        } else if ("basicTime".equals(input) || "basic_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTime()__        } else if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTimeNoMillis()__        } else if ("basicTTime".equals(input) || "basic_t_time".equals(input)) {_            formatter = ISODateTimeFormat.basicTTime()__        } else if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicTTimeNoMillis()__        } else if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDate()__        } else if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTime()__        } else if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("date".equals(input)) {_            formatter = ISODateTimeFormat.date()__        } else if ("dateHour".equals(input) || "date_hour".equals(input)) {_            formatter = ISODateTimeFormat.dateHour()__        } else if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinute()__        } else if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecond()__        } else if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC).withDefaultYear(1970),_                    ISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC).withDefaultYear(1970))__        } else if ("dateTime".equals(input) || "date_time".equals(input)) {_            formatter = ISODateTimeFormat.dateTime()__        } else if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.dateTimeNoMillis()__        } else if ("hour".equals(input)) {_            formatter = ISODateTimeFormat.hour()__        } else if ("hourMinute".equals(input) || "hour_minute".equals(input)) {_            formatter = ISODateTimeFormat.hourMinute()__        } else if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecond()__        } else if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {_            formatter = ISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDate()__        } else if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTime()__        } else if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("time".equals(input)) {_            formatter = ISODateTimeFormat.time()__        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.timeNoMillis()__        } else if ("tTime".equals(input) || "t_time".equals(input)) {_            formatter = ISODateTimeFormat.tTime()__        } else if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.tTimeNoMillis()__        } else if ("weekDate".equals(input) || "week_date".equals(input)) {_            formatter = ISODateTimeFormat.weekDate()__        } else if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTime()__        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {_            formatter = ISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("weekyear".equals(input) || "week_year".equals(input)) {_            formatter = ISODateTimeFormat.weekyear()__        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeek()__        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {_            formatter = ISODateTimeFormat.weekyearWeekDay()__        } else if ("year".equals(input)) {_            formatter = ISODateTimeFormat.year()__        } else if ("yearMonth".equals(input) || "year_month".equals(input)) {_            formatter = ISODateTimeFormat.yearMonth()__        } else if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {_            formatter = ISODateTimeFormat.yearMonthDay()__        } else if ("epoch_second".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),_                new EpochTimeParser(false)).toFormatter()__        } else if ("epoch_millis".equals(input)) {_            formatter = new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),_                new EpochTimeParser(true)).toFormatter()__        _        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDate()__        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTime()__        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis()__        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {_            formatter = StrictISODateTimeFormat.date()__        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHour()__        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinute()__        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecond()__        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction()__        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis()__        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {_            _            _            return new JodaDateFormatter(input,_                    StrictISODateTimeFormat.dateOptionalTimeParser().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC)_                        .withDefaultYear(1970),_                    StrictISODateTimeFormat.dateTime().withLocale(Locale.ROOT).withZone(DateTimeZone.UTC).withDefaultYear(1970))__        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTime()__        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.dateTimeNoMillis()__        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {_            formatter = StrictISODateTimeFormat.hour()__        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinute()__        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecond()__        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction()__        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis()__        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDate()__        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTime()__        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis()__        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {_            formatter = StrictISODateTimeFormat.time()__        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.timeNoMillis()__        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {_            formatter = StrictISODateTimeFormat.tTime()__        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.tTimeNoMillis()__        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDate()__        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTime()__        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {_            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis()__        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyear()__        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeek()__        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {_            formatter = StrictISODateTimeFormat.weekyearWeekDay()__        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {_            formatter = StrictISODateTimeFormat.year()__        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonth()__        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {_            formatter = StrictISODateTimeFormat.yearMonthDay()__        } else if (Strings.hasLength(input) && input.contains("||")) {_            String[] formats = Strings.delimitedListToStringArray(input, "||")__            DateTimeParser[] parsers = new DateTimeParser[formats.length]___            if (formats.length == 1) {_                formatter = forPattern(input).parser__            } else {_                DateTimeFormatter dateTimeFormatter = null__                for (int i = 0_ i < formats.length_ i++) {_                    JodaDateFormatter currentFormatter = forPattern(formats[i])__                    DateTimeFormatter currentParser = currentFormatter.parser__                    if (dateTimeFormatter == null) {_                        dateTimeFormatter = currentFormatter.printer__                    }_                    parsers[i] = currentParser.getParser()__                }__                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()_                    .append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers)__                formatter = builder.toFormatter()__            }_        } else {_            try {_                maybeLogJodaDeprecation(input)__                formatter = DateTimeFormat.forPattern(input)__            } catch (IllegalArgumentException e) {_                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e)__            }_        }__        formatter = formatter.withLocale(Locale.ROOT).withZone(DateTimeZone.UTC).withDefaultYear(1970)__        return new JodaDateFormatter(input, formatter, formatter)__    };parses,a,joda,based,pattern,including,some,named,ones,similar,to,the,built,in,joda,iso,ones;public,static,joda,date,formatter,for,pattern,string,input,if,strings,has,length,input,input,input,trim,if,input,null,input,length,0,throw,new,illegal,argument,exception,no,date,pattern,provided,date,time,formatter,formatter,if,basic,date,equals,input,equals,input,formatter,isodate,time,format,basic,date,else,if,basic,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,else,if,basic,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,date,time,no,millis,else,if,basic,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,else,if,basic,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,else,if,basic,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ordinal,date,time,no,millis,else,if,basic,time,equals,input,equals,input,formatter,isodate,time,format,basic,time,else,if,basic,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,time,no,millis,else,if,basic,ttime,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,else,if,basic,ttime,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,ttime,no,millis,else,if,basic,week,date,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,else,if,basic,week,date,time,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,else,if,basic,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,basic,week,date,time,no,millis,else,if,date,equals,input,formatter,isodate,time,format,date,else,if,date,hour,equals,input,equals,input,formatter,isodate,time,format,date,hour,else,if,date,hour,minute,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,else,if,date,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,else,if,date,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,fraction,else,if,date,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,date,hour,minute,second,millis,else,if,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,with,default,year,1970,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,with,default,year,1970,else,if,date,time,equals,input,equals,input,formatter,isodate,time,format,date,time,else,if,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,date,time,no,millis,else,if,hour,equals,input,formatter,isodate,time,format,hour,else,if,hour,minute,equals,input,equals,input,formatter,isodate,time,format,hour,minute,else,if,hour,minute,second,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,else,if,hour,minute,second,fraction,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,fraction,else,if,hour,minute,second,millis,equals,input,equals,input,formatter,isodate,time,format,hour,minute,second,millis,else,if,ordinal,date,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,else,if,ordinal,date,time,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,else,if,ordinal,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,ordinal,date,time,no,millis,else,if,time,equals,input,formatter,isodate,time,format,time,else,if,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,time,no,millis,else,if,t,time,equals,input,equals,input,formatter,isodate,time,format,t,time,else,if,t,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,t,time,no,millis,else,if,week,date,equals,input,equals,input,formatter,isodate,time,format,week,date,else,if,week,date,time,equals,input,equals,input,formatter,isodate,time,format,week,date,time,else,if,week,date,time,no,millis,equals,input,equals,input,formatter,isodate,time,format,week,date,time,no,millis,else,if,weekyear,equals,input,equals,input,formatter,isodate,time,format,weekyear,else,if,weekyear,week,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,else,if,weekyear,week,day,equals,input,equals,input,formatter,isodate,time,format,weekyear,week,day,else,if,year,equals,input,formatter,isodate,time,format,year,else,if,year,month,equals,input,equals,input,formatter,isodate,time,format,year,month,else,if,year,month,day,equals,input,equals,input,formatter,isodate,time,format,year,month,day,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,false,new,epoch,time,parser,false,to,formatter,else,if,equals,input,formatter,new,date,time,formatter,builder,append,new,epoch,time,printer,true,new,epoch,time,parser,true,to,formatter,else,if,strict,basic,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,else,if,strict,basic,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,else,if,strict,basic,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,basic,week,date,time,no,millis,else,if,strict,date,equals,input,equals,input,formatter,strict,isodate,time,format,date,else,if,strict,date,hour,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,else,if,strict,date,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,else,if,strict,date,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,else,if,strict,date,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,fraction,else,if,strict,date,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,hour,minute,second,millis,else,if,strict,date,optional,time,equals,input,equals,input,return,new,joda,date,formatter,input,strict,isodate,time,format,date,optional,time,parser,with,locale,locale,root,with,zone,date,time,zone,utc,with,default,year,1970,strict,isodate,time,format,date,time,with,locale,locale,root,with,zone,date,time,zone,utc,with,default,year,1970,else,if,strict,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,else,if,strict,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,date,time,no,millis,else,if,strict,hour,equals,input,equals,input,formatter,strict,isodate,time,format,hour,else,if,strict,hour,minute,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,else,if,strict,hour,minute,second,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,else,if,strict,hour,minute,second,fraction,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,fraction,else,if,strict,hour,minute,second,millis,equals,input,equals,input,formatter,strict,isodate,time,format,hour,minute,second,millis,else,if,strict,ordinal,date,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,else,if,strict,ordinal,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,else,if,strict,ordinal,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,ordinal,date,time,no,millis,else,if,strict,time,equals,input,equals,input,formatter,strict,isodate,time,format,time,else,if,strict,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,time,no,millis,else,if,strict,ttime,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,else,if,strict,ttime,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,t,time,no,millis,else,if,strict,week,date,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,else,if,strict,week,date,time,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,else,if,strict,week,date,time,no,millis,equals,input,equals,input,formatter,strict,isodate,time,format,week,date,time,no,millis,else,if,strict,weekyear,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,else,if,strict,weekyear,week,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,else,if,strict,weekyear,week,day,equals,input,equals,input,formatter,strict,isodate,time,format,weekyear,week,day,else,if,strict,year,equals,input,equals,input,formatter,strict,isodate,time,format,year,else,if,strict,year,month,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,else,if,strict,year,month,day,equals,input,equals,input,formatter,strict,isodate,time,format,year,month,day,else,if,strings,has,length,input,input,contains,string,formats,strings,delimited,list,to,string,array,input,date,time,parser,parsers,new,date,time,parser,formats,length,if,formats,length,1,formatter,for,pattern,input,parser,else,date,time,formatter,date,time,formatter,null,for,int,i,0,i,formats,length,i,joda,date,formatter,current,formatter,for,pattern,formats,i,date,time,formatter,current,parser,current,formatter,parser,if,date,time,formatter,null,date,time,formatter,current,formatter,printer,parsers,i,current,parser,get,parser,date,time,formatter,builder,builder,new,date,time,formatter,builder,append,date,time,formatter,with,zone,date,time,zone,utc,get,printer,parsers,formatter,builder,to,formatter,else,try,maybe,log,joda,deprecation,input,formatter,date,time,format,for,pattern,input,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,invalid,format,input,e,get,message,e,formatter,formatter,with,locale,locale,root,with,zone,date,time,zone,utc,with,default,year,1970,return,new,joda,date,formatter,input,formatter,formatter
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1540583181;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1544232221;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1544458001;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1544600864;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1544732811;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1545155463;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1545247235;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1545293826;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
Joda -> EpochTimePrinter -> @Override         public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,                             DateTimeZone displayZone, Locale locale) throws IOException;1548420619;We adjust the instant by displayOffset to adjust for the offset that might have been added in_{@link DateTimeFormatter#printTo(Appendable, long, Chronology)} when using a time zone.;@Override_        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,_                            DateTimeZone displayZone, Locale locale) throws IOException {_            if (hasMilliSecondPrecision) {_                out.write(String.valueOf(instant - displayOffset))__            } else {_                out.append(String.valueOf((instant - displayOffset) / 1000))__            }_        };we,adjust,the,instant,by,display,offset,to,adjust,for,the,offset,that,might,have,been,added,in,link,date,time,formatter,print,to,appendable,long,chronology,when,using,a,time,zone;override,public,void,print,to,writer,out,long,instant,chronology,chrono,int,display,offset,date,time,zone,display,zone,locale,locale,throws,ioexception,if,has,milli,second,precision,out,write,string,value,of,instant,display,offset,else,out,append,string,value,of,instant,display,offset,1000
