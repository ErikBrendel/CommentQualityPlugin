commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void innerWriteTo(StreamOutput out) throws IOException {     out.writeDoubleArray(percents).     if (out.getVersion().onOrAfter(Version.V_7_0_0)) {         out.writeBoolean(keyed).     } }
false;public;0;4;;@Override public String getWriteableName() {     return PercentilesBucketPipelineAggregationBuilder.NAME. }
false;protected;0;4;;@Override protected void preCollection() {     data = new ArrayList<>(1024). }
false;protected;2;4;;@Override protected void collectBucketValue(String bucketKey, Double bucketValue) {     data.add(bucketValue). }
false;protected;2;23;;@Override protected InternalAggregation buildAggregation(List<PipelineAggregator> pipelineAggregators, Map<String, Object> metadata) {     // Perform the sorting and percentile collection now that all the data     // has been collected.     Collections.sort(data).     double[] percentiles = new double[percents.length].     if (data.size() == 0) {         for (int i = 0. i < percents.length. i++) {             percentiles[i] = Double.NaN.         }     } else {         for (int i = 0. i < percents.length. i++) {             int index = (int) Math.round((percents[i] / 100.0) * (data.size() - 1)).             percentiles[i] = data.get(index).         }     }     return new InternalPercentilesBucket(name(), percents, percentiles, keyed, format, pipelineAggregators, metadata). }
