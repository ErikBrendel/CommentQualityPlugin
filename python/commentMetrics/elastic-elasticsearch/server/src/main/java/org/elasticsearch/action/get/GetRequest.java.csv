commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = super.validateNonNullIndex().     if (Strings.isEmpty(type)) {         validationException = addValidationError("type is missing", validationException).     }     if (Strings.isEmpty(id)) {         validationException = addValidationError("id is missing", validationException).     }     if (versionType.validateVersionForReads(version) == false) {         validationException = ValidateActions.addValidationError("illegal version value [" + version + "] for version type [" + versionType.name() + "]", validationException).     }     if (versionType == VersionType.FORCE) {         validationException = ValidateActions.addValidationError("version type [force] may no longer be used", validationException).     }     return validationException. }
true;public;1;8;/**  * Sets the type of the document to fetch.  * @deprecated Types are in the process of being removed.  */ ;/**  * Sets the type of the document to fetch.  * @deprecated Types are in the process of being removed.  */ @Deprecated public GetRequest type(@Nullable String type) {     if (type == null) {         type = MapperService.SINGLE_MAPPING_NAME.     }     this.type = type.     return this. }
true;public;1;4;/**  * Sets the id of the document to fetch.  */ ;/**  * Sets the id of the document to fetch.  */ public GetRequest id(String id) {     this.id = id.     return this. }
true;public;1;4;/**  * Controls the shard routing of the request. Using this value to hash the shard  * and not the id.  */ ;/**  * Controls the shard routing of the request. Using this value to hash the shard  * and not the id.  */ public GetRequest routing(String routing) {     this.routing = routing.     return this. }
true;public;1;4;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ ;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ public GetRequest preference(String preference) {     this.preference = preference.     return this. }
true;public;0;4;/**  * @deprecated Types are in the process of being removed.  */ ;/**  * @deprecated Types are in the process of being removed.  */ @Deprecated public String type() {     return type. }
false;public;0;3;;public String id() {     return id. }
false;public;0;3;;public String routing() {     return this.routing. }
false;public;0;3;;public String preference() {     return this.preference. }
true;public;1;4;/**  * Allows setting the {@link FetchSourceContext} for this request, controlling if and how _source should be returned.  */ ;/**  * Allows setting the {@link FetchSourceContext} for this request, controlling if and how _source should be returned.  */ public GetRequest fetchSourceContext(FetchSourceContext context) {     this.fetchSourceContext = context.     return this. }
false;public;0;3;;public FetchSourceContext fetchSourceContext() {     return fetchSourceContext. }
true;public;1;4;/**  * Explicitly specify the stored fields that will be returned. By default, the {@code _source}  * field will be returned.  */ ;/**  * Explicitly specify the stored fields that will be returned. By default, the {@code _source}  * field will be returned.  */ public GetRequest storedFields(String... fields) {     this.storedFields = fields.     return this. }
true;public;0;3;/**  * Explicitly specify the stored fields that will be returned. By default, the {@code _source}  * field will be returned.  */ ;/**  * Explicitly specify the stored fields that will be returned. By default, the {@code _source}  * field will be returned.  */ public String[] storedFields() {     return this.storedFields. }
true;public;1;4;/**  * Should a refresh be executed before this get operation causing the operation to  * return the latest value. Note, heavy get should not set this to {@code true}. Defaults  * to {@code false}.  */ ;/**  * Should a refresh be executed before this get operation causing the operation to  * return the latest value. Note, heavy get should not set this to {@code true}. Defaults  * to {@code false}.  */ public GetRequest refresh(boolean refresh) {     this.refresh = refresh.     return this. }
false;public;0;3;;public boolean refresh() {     return this.refresh. }
false;public;0;3;;public boolean realtime() {     return this.realtime. }
false;public;1;5;;@Override public GetRequest realtime(boolean realtime) {     this.realtime = realtime.     return this. }
true;public;0;3;/**  * Sets the version, which will cause the get operation to only be performed if a matching  * version exists and no changes happened on the doc since then.  */ ;/**  * Sets the version, which will cause the get operation to only be performed if a matching  * version exists and no changes happened on the doc since then.  */ public long version() {     return version. }
false;public;1;4;;public GetRequest version(long version) {     this.version = version.     return this. }
true;public;1;4;/**  * Sets the versioning type. Defaults to {@link org.elasticsearch.index.VersionType#INTERNAL}.  */ ;/**  * Sets the versioning type. Defaults to {@link org.elasticsearch.index.VersionType#INTERNAL}.  */ public GetRequest versionType(VersionType versionType) {     this.versionType = versionType.     return this. }
false;public;0;3;;public VersionType versionType() {     return this.versionType. }
false;public;1;18;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     type = in.readString().     id = in.readString().     routing = in.readOptionalString().     if (in.getVersion().before(Version.V_7_0_0)) {         in.readOptionalString().     }     preference = in.readOptionalString().     refresh = in.readBoolean().     storedFields = in.readOptionalStringArray().     realtime = in.readBoolean().     this.versionType = VersionType.fromValue(in.readByte()).     this.version = in.readLong().     fetchSourceContext = in.readOptionalWriteable(FetchSourceContext::new). }
false;public;1;18;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(type).     out.writeString(id).     out.writeOptionalString(routing).     if (out.getVersion().before(Version.V_7_0_0)) {         out.writeOptionalString(null).     }     out.writeOptionalString(preference).     out.writeBoolean(refresh).     out.writeOptionalStringArray(storedFields).     out.writeBoolean(realtime).     out.writeByte(versionType.getValue()).     out.writeLong(version).     out.writeOptionalWriteable(fetchSourceContext). }
false;public;0;4;;@Override public String toString() {     return "get [" + index + "][" + type + "][" + id + "]: routing [" + routing + "]". }
