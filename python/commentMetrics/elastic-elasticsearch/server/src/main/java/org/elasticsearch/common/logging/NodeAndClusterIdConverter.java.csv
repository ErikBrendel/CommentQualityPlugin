commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Called by log4j2 to initialize this converter.  */ ;/**  * Called by log4j2 to initialize this converter.  */ public static NodeAndClusterIdConverter newInstance(@SuppressWarnings("unused") final String[] options) {     return new NodeAndClusterIdConverter(). }
true;public,static;2;3;/**  * Updates only once the clusterID and nodeId.  * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.  *  * @param nodeId      a nodeId received from cluster state update  * @param clusterUUID a clusterId received from cluster state update  */ ;/**  * Updates only once the clusterID and nodeId.  * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.  *  * @param nodeId      a nodeId received from cluster state update  * @param clusterUUID a clusterId received from cluster state update  */ public static void setNodeIdAndClusterId(String nodeId, String clusterUUID) {     nodeAndClusterId.set(formatIds(clusterUUID, nodeId)). }
true;public;2;7;/**  * Formats the node.id and cluster.uuid into json fields.  *  * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format  */ ;/**  * Formats the node.id and cluster.uuid into json fields.  *  * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format  */ @Override public void format(LogEvent event, StringBuilder toAppendTo) {     if (nodeAndClusterId.get() != null) {         toAppendTo.append(nodeAndClusterId.get()).     } // nodeId/clusterUuid not received yet, not appending }
false;private,static;2;3;;private static String formatIds(String clusterUUID, String nodeId) {     return String.format(Locale.ROOT, "\"cluster.uuid\": \"%s\", \"node.id\": \"%s\"", clusterUUID, nodeId). }
