commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private void setMaxBucket(int maxBucket) {     this.maxBucket = maxBucket. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeInt(maxBuckets). }
false;public;0;3;;public int getMaxBuckets() {     return maxBuckets. }
false;public;0;4;;@Override public RestStatus status() {     return RestStatus.SERVICE_UNAVAILABLE. }
false;protected;2;4;;@Override protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("max_buckets", maxBuckets). }
false;public;1;9;;@Override public void accept(int value) {     count += value.     if (count > limit) {         throw new TooManyBucketsException("Trying to create too many buckets. Must be less than or equal to: [" + limit + "] but was [" + count + "]. This limit can be set by changing the [" + MAX_BUCKET_SETTING.getKey() + "] cluster level setting.", limit).     } }
false;public;0;3;;public void reset() {     this.count = 0. }
false;public;0;3;;public int getCount() {     return count. }
false;public;0;3;;public int getLimit() {     return limit. }
false;public;0;3;;public MultiBucketConsumer create() {     return new MultiBucketConsumer(maxBucket). }
