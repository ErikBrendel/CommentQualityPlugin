commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(index).     out.writeString(type).     out.writeString(id).     out.writeVLong(docVersion).     final boolean docExists = isExists().     out.writeBoolean(docExists).     out.writeBoolean(artificial).     out.writeVLong(tookInMillis).     out.writeBoolean(hasTermVectors()).     if (hasTermVectors()) {         out.writeBytesReference(headerRef).         out.writeBytesReference(termVectors).     } }
false;private;0;4;;private boolean hasTermVectors() {     assert (headerRef == null && termVectors == null) || (headerRef != null && termVectors != null).     return headerRef != null. }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     index = in.readString().     type = in.readString().     id = in.readString().     docVersion = in.readVLong().     exists = in.readBoolean().     artificial = in.readBoolean().     tookInMillis = in.readVLong().     if (in.readBoolean()) {         headerRef = in.readBytesReference().         termVectors = in.readBytesReference().     } }
false;public;0;4;;@Override public Iterator<String> iterator() {     return Collections.emptyIterator(). }
false;public;1;4;;@Override public Terms terms(String field) throws IOException {     return null. }
false;public;0;4;;@Override public int size() {     return 0. }
false;public;0;28;;public Fields getFields() throws IOException {     if (hasTermVectors() && isExists()) {         if (!sourceCopied) {             // make the bytes safe             headerRef = new BytesArray(headerRef.toBytesRef(), true).             termVectors = new BytesArray(termVectors.toBytesRef(), true).         }         TermVectorsFields termVectorsFields = new TermVectorsFields(headerRef, termVectors).         hasScores = termVectorsFields.hasScores.         return termVectorsFields.     } else {         return new Fields() {              @Override             public Iterator<String> iterator() {                 return Collections.emptyIterator().             }              @Override             public Terms terms(String field) throws IOException {                 return null.             }              @Override             public int size() {                 return 0.             }         }.     } }
false;public;2;27;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     assert index != null.     assert type != null.     assert id != null.     builder.startObject().     builder.field(FieldStrings._INDEX, index).     builder.field(FieldStrings._TYPE, type).     if (!isArtificial()) {         builder.field(FieldStrings._ID, id).     }     builder.field(FieldStrings._VERSION, docVersion).     builder.field(FieldStrings.FOUND, isExists()).     builder.field(FieldStrings.TOOK, tookInMillis).     if (isExists()) {         builder.startObject(FieldStrings.TERM_VECTORS).         final CharsRefBuilder spare = new CharsRefBuilder().         Fields theFields = getFields().         Iterator<String> fieldIter = theFields.iterator().         while (fieldIter.hasNext()) {             buildField(builder, spare, theFields, fieldIter).         }         builder.endObject().     }     builder.endObject().     return builder. }
false;private;4;16;;private void buildField(XContentBuilder builder, final CharsRefBuilder spare, Fields theFields, Iterator<String> fieldIter) throws IOException {     String fieldName = fieldIter.next().     builder.startObject(fieldName).     Terms curTerms = theFields.terms(fieldName).     // write field statistics     buildFieldStatistics(builder, curTerms).     builder.startObject(FieldStrings.TERMS).     TermsEnum termIter = curTerms.iterator().     BoostAttribute boostAtt = termIter.attributes().addAttribute(BoostAttribute.class).     for (int i = 0. i < curTerms.size(). i++) {         buildTerm(builder, spare, curTerms, termIter, boostAtt).     }     builder.endObject().     builder.endObject(). }
false;private;5;17;;private void buildTerm(XContentBuilder builder, final CharsRefBuilder spare, Terms curTerms, TermsEnum termIter, BoostAttribute boostAtt) throws IOException {     // start term, optimized writing     BytesRef term = termIter.next().     spare.copyUTF8Bytes(term).     builder.startObject(spare.toString()).     buildTermStatistics(builder, termIter).     // finally write the term vectors     PostingsEnum posEnum = termIter.postings(null, PostingsEnum.ALL).     int termFreq = posEnum.freq().     builder.field(FieldStrings.TERM_FREQ, termFreq).     initMemory(curTerms, termFreq).     initValues(curTerms, posEnum, termFreq).     buildValues(builder, curTerms, termFreq).     buildScore(builder, boostAtt).     builder.endObject(). }
false;private;2;13;;private void buildTermStatistics(XContentBuilder builder, TermsEnum termIter) throws IOException {     // <= 0.     assert (((termIter.docFreq() > 0) && (termIter.totalTermFreq() > 0)) || ((termIter.docFreq() == -1) && (termIter.totalTermFreq() == -1))).     int docFreq = termIter.docFreq().     if (docFreq > 0) {         builder.field(FieldStrings.DOC_FREQ, docFreq).         builder.field(FieldStrings.TTF, termIter.totalTermFreq()).     } }
false;private;3;23;;private void buildValues(XContentBuilder builder, Terms curTerms, int termFreq) throws IOException {     if (!(curTerms.hasPayloads() || curTerms.hasOffsets() || curTerms.hasPositions())) {         return.     }     builder.startArray(FieldStrings.TOKENS).     for (int i = 0. i < termFreq. i++) {         builder.startObject().         if (curTerms.hasPositions()) {             builder.field(FieldStrings.POS, currentPositions[i]).         }         if (curTerms.hasOffsets()) {             builder.field(FieldStrings.START_OFFSET, currentStartOffset[i]).             builder.field(FieldStrings.END_OFFSET, currentEndOffset[i]).         }         if (curTerms.hasPayloads() && (currentPayloads[i].length() > 0)) {             BytesRef bytesRef = currentPayloads[i].toBytesRef().             builder.field(FieldStrings.PAYLOAD, bytesRef.bytes, bytesRef.offset, bytesRef.length).         }         builder.endObject().     }     builder.endArray(). }
false;private;3;20;;private void initValues(Terms curTerms, PostingsEnum posEnum, int termFreq) throws IOException {     for (int j = 0. j < termFreq. j++) {         int nextPos = posEnum.nextPosition().         if (curTerms.hasPositions()) {             currentPositions[j] = nextPos.         }         if (curTerms.hasOffsets()) {             currentStartOffset[j] = posEnum.startOffset().             currentEndOffset[j] = posEnum.endOffset().         }         if (curTerms.hasPayloads()) {             BytesRef curPayload = posEnum.getPayload().             if (curPayload != null) {                 currentPayloads[j] = new BytesArray(curPayload.bytes, 0, curPayload.length).             } else {                 currentPayloads[j] = null.             }         }     } }
false;private;2;13;;private void initMemory(Terms curTerms, int termFreq) {     // init memory for performance reasons     if (curTerms.hasPositions()) {         currentPositions = ArrayUtil.grow(currentPositions, termFreq).     }     if (curTerms.hasOffsets()) {         currentStartOffset = ArrayUtil.grow(currentStartOffset, termFreq).         currentEndOffset = ArrayUtil.grow(currentEndOffset, termFreq).     }     if (curTerms.hasPayloads()) {         currentPayloads = new BytesArray[termFreq].     } }
false;private;2;24;;private void buildFieldStatistics(XContentBuilder builder, Terms curTerms) throws IOException {     long sumDocFreq = curTerms.getSumDocFreq().     int docCount = curTerms.getDocCount().     long sumTotalTermFrequencies = curTerms.getSumTotalTermFreq().     if (docCount >= 0) {         assert ((sumDocFreq >= 0)) : "docCount >= 0 but sumDocFreq ain't!".         assert ((sumTotalTermFrequencies >= 0)) : "docCount >= 0 but sumTotalTermFrequencies ain't!".         builder.startObject(FieldStrings.FIELD_STATISTICS).         builder.field(FieldStrings.SUM_DOC_FREQ, sumDocFreq).         builder.field(FieldStrings.DOC_COUNT, docCount).         builder.field(FieldStrings.SUM_TTF, sumTotalTermFrequencies).         builder.endObject().     } else if (docCount == -1) {         // this case all 3 values should be -1         assert ((sumDocFreq == -1)) : "docCount was -1 but sumDocFreq ain't!".         assert ((sumTotalTermFrequencies == -1)) : "docCount was -1 but sumTotalTermFrequencies ain't!".     } else {         throw new IllegalStateException("Something is wrong with the field statistics of the term vector request: Values are " + "\n" + FieldStrings.SUM_DOC_FREQ + " " + sumDocFreq + "\n" + FieldStrings.DOC_COUNT + " " + docCount + "\n" + FieldStrings.SUM_TTF + " " + sumTotalTermFrequencies).     } }
false;public;1;3;;public void setTookInMillis(long tookInMillis) {     this.tookInMillis = tookInMillis. }
false;public;0;3;;public TimeValue getTook() {     return new TimeValue(tookInMillis). }
false;private;2;5;;private void buildScore(XContentBuilder builder, BoostAttribute boostAtt) throws IOException {     if (hasScores) {         builder.field(FieldStrings.SCORE, boostAtt.getBoost()).     } }
false;public;0;3;;public boolean isExists() {     return exists. }
false;public;1;3;;public void setExists(boolean exists) {     this.exists = exists. }
false;public;4;4;;public void setFields(Fields termVectorsByField, Set<String> selectedFields, EnumSet<Flag> flags, Fields topLevelFields) throws IOException {     setFields(termVectorsByField, selectedFields, flags, topLevelFields, null, null). }
false;public;6;8;;public void setFields(Fields termVectorsByField, Set<String> selectedFields, EnumSet<Flag> flags, Fields topLevelFields, @Nullable AggregatedDfs dfs, TermVectorsFilter termVectorsFilter) throws IOException {     TermVectorsWriter tvw = new TermVectorsWriter(this).     if (termVectorsByField != null) {         tvw.setFields(termVectorsByField, selectedFields, flags, topLevelFields, dfs, termVectorsFilter).     } }
false;public;1;3;;public void setTermVectorsField(BytesStreamOutput output) {     termVectors = output.bytes(). }
false;public;1;3;;public void setHeader(BytesReference header) {     headerRef = header. }
false;public;1;4;;public void setDocVersion(long version) {     this.docVersion = version. }
false;public;0;3;;public Long getVersion() {     return docVersion. }
false;public;0;3;;public String getIndex() {     return index. }
false;public;0;3;;public String getType() {     return type. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public boolean isArtificial() {     return artificial. }
false;public;1;3;;public void setArtificial(boolean artificial) {     this.artificial = artificial. }
