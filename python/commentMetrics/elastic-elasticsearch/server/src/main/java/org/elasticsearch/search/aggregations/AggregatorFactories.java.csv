# id;timestamp;commentText;codeText;commentWords;codeWords
AggregatorFactories -> public static AggregatorFactories.Builder parseAggregators(XContentParser parser) throws IOException;1524684173;Parses the aggregation request recursively generating aggregator_factories in turn.;public static AggregatorFactories.Builder parseAggregators(XContentParser parser) throws IOException {_        return parseAggregators(parser, 0)__    };parses,the,aggregation,request,recursively,generating,aggregator,factories,in,turn;public,static,aggregator,factories,builder,parse,aggregators,xcontent,parser,parser,throws,ioexception,return,parse,aggregators,parser,0
AggregatorFactories -> public static AggregatorFactories.Builder parseAggregators(XContentParser parser) throws IOException;1538067637;Parses the aggregation request recursively generating aggregator_factories in turn.;public static AggregatorFactories.Builder parseAggregators(XContentParser parser) throws IOException {_        return parseAggregators(parser, 0)__    };parses,the,aggregation,request,recursively,generating,aggregator,factories,in,turn;public,static,aggregator,factories,builder,parse,aggregators,xcontent,parser,parser,throws,ioexception,return,parse,aggregators,parser,0
AggregatorFactories -> public static AggregatorFactories.Builder parseAggregators(XContentParser parser) throws IOException;1538170812;Parses the aggregation request recursively generating aggregator_factories in turn.;public static AggregatorFactories.Builder parseAggregators(XContentParser parser) throws IOException {_        return parseAggregators(parser, 0)__    };parses,the,aggregation,request,recursively,generating,aggregator,factories,in,turn;public,static,aggregator,factories,builder,parse,aggregators,xcontent,parser,parser,throws,ioexception,return,parse,aggregators,parser,0
AggregatorFactories -> public static AggregatorFactories.Builder parseAggregators(XContentParser parser) throws IOException;1544110272;Parses the aggregation request recursively generating aggregator_factories in turn.;public static AggregatorFactories.Builder parseAggregators(XContentParser parser) throws IOException {_        return parseAggregators(parser, 0)__    };parses,the,aggregation,request,recursively,generating,aggregator,factories,in,turn;public,static,aggregator,factories,builder,parse,aggregators,xcontent,parser,parser,throws,ioexception,return,parse,aggregators,parser,0
AggregatorFactories -> public int countPipelineAggregators();1524684173;@return the number of pipeline aggregator factories;public int countPipelineAggregators() {_        return pipelineAggregatorFactories.size()__    };return,the,number,of,pipeline,aggregator,factories;public,int,count,pipeline,aggregators,return,pipeline,aggregator,factories,size
AggregatorFactories -> public int countPipelineAggregators();1538067637;@return the number of pipeline aggregator factories;public int countPipelineAggregators() {_        return pipelineAggregatorFactories.size()__    };return,the,number,of,pipeline,aggregator,factories;public,int,count,pipeline,aggregators,return,pipeline,aggregator,factories,size
AggregatorFactories -> public int countPipelineAggregators();1538170812;@return the number of pipeline aggregator factories;public int countPipelineAggregators() {_        return pipelineAggregatorFactories.size()__    };return,the,number,of,pipeline,aggregator,factories;public,int,count,pipeline,aggregators,return,pipeline,aggregator,factories,size
AggregatorFactories -> public int countPipelineAggregators();1544110272;@return the number of pipeline aggregator factories;public int countPipelineAggregators() {_        return pipelineAggregatorFactories.size()__    };return,the,number,of,pipeline,aggregator,factories;public,int,count,pipeline,aggregators,return,pipeline,aggregator,factories,size
AggregatorFactories -> public Aggregator[] createSubAggregators(Aggregator parent) throws IOException;1524684173;Create all aggregators so that they can be consumed with multiple_buckets.;public Aggregator[] createSubAggregators(Aggregator parent) throws IOException {_        Aggregator[] aggregators = new Aggregator[countAggregators()]__        for (int i = 0_ i < factories.length_ ++i) {_            _            _            _            _            final boolean collectsFromSingleBucket = false__            Aggregator factory = factories[i].create(parent, collectsFromSingleBucket)__            Profilers profilers = factory.context().getProfilers()__            if (profilers != null) {_                factory = new ProfilingAggregator(factory, profilers.getAggregationProfiler())__            }_            aggregators[i] = factory__        }_        return aggregators__    };create,all,aggregators,so,that,they,can,be,consumed,with,multiple,buckets;public,aggregator,create,sub,aggregators,aggregator,parent,throws,ioexception,aggregator,aggregators,new,aggregator,count,aggregators,for,int,i,0,i,factories,length,i,final,boolean,collects,from,single,bucket,false,aggregator,factory,factories,i,create,parent,collects,from,single,bucket,profilers,profilers,factory,context,get,profilers,if,profilers,null,factory,new,profiling,aggregator,factory,profilers,get,aggregation,profiler,aggregators,i,factory,return,aggregators
AggregatorFactories -> public Aggregator[] createSubAggregators(Aggregator parent) throws IOException;1538067637;Create all aggregators so that they can be consumed with multiple_buckets.;public Aggregator[] createSubAggregators(Aggregator parent) throws IOException {_        Aggregator[] aggregators = new Aggregator[countAggregators()]__        for (int i = 0_ i < factories.length_ ++i) {_            _            _            _            _            final boolean collectsFromSingleBucket = false__            Aggregator factory = factories[i].create(parent, collectsFromSingleBucket)__            Profilers profilers = factory.context().getProfilers()__            if (profilers != null) {_                factory = new ProfilingAggregator(factory, profilers.getAggregationProfiler())__            }_            aggregators[i] = factory__        }_        return aggregators__    };create,all,aggregators,so,that,they,can,be,consumed,with,multiple,buckets;public,aggregator,create,sub,aggregators,aggregator,parent,throws,ioexception,aggregator,aggregators,new,aggregator,count,aggregators,for,int,i,0,i,factories,length,i,final,boolean,collects,from,single,bucket,false,aggregator,factory,factories,i,create,parent,collects,from,single,bucket,profilers,profilers,factory,context,get,profilers,if,profilers,null,factory,new,profiling,aggregator,factory,profilers,get,aggregation,profiler,aggregators,i,factory,return,aggregators
AggregatorFactories -> public Aggregator[] createSubAggregators(Aggregator parent) throws IOException;1538170812;Create all aggregators so that they can be consumed with multiple_buckets.;public Aggregator[] createSubAggregators(Aggregator parent) throws IOException {_        Aggregator[] aggregators = new Aggregator[countAggregators()]__        for (int i = 0_ i < factories.length_ ++i) {_            _            _            _            _            final boolean collectsFromSingleBucket = false__            Aggregator factory = factories[i].create(parent, collectsFromSingleBucket)__            Profilers profilers = factory.context().getProfilers()__            if (profilers != null) {_                factory = new ProfilingAggregator(factory, profilers.getAggregationProfiler())__            }_            aggregators[i] = factory__        }_        return aggregators__    };create,all,aggregators,so,that,they,can,be,consumed,with,multiple,buckets;public,aggregator,create,sub,aggregators,aggregator,parent,throws,ioexception,aggregator,aggregators,new,aggregator,count,aggregators,for,int,i,0,i,factories,length,i,final,boolean,collects,from,single,bucket,false,aggregator,factory,factories,i,create,parent,collects,from,single,bucket,profilers,profilers,factory,context,get,profilers,if,profilers,null,factory,new,profiling,aggregator,factory,profilers,get,aggregation,profiler,aggregators,i,factory,return,aggregators
AggregatorFactories -> public Aggregator[] createSubAggregators(Aggregator parent) throws IOException;1544110272;Create all aggregators so that they can be consumed with multiple_buckets.;public Aggregator[] createSubAggregators(Aggregator parent) throws IOException {_        Aggregator[] aggregators = new Aggregator[countAggregators()]__        for (int i = 0_ i < factories.length_ ++i) {_            _            _            _            _            final boolean collectsFromSingleBucket = false__            Aggregator factory = factories[i].create(parent, collectsFromSingleBucket)__            Profilers profilers = factory.context().getProfilers()__            if (profilers != null) {_                factory = new ProfilingAggregator(factory, profilers.getAggregationProfiler())__            }_            aggregators[i] = factory__        }_        return aggregators__    };create,all,aggregators,so,that,they,can,be,consumed,with,multiple,buckets;public,aggregator,create,sub,aggregators,aggregator,parent,throws,ioexception,aggregator,aggregators,new,aggregator,count,aggregators,for,int,i,0,i,factories,length,i,final,boolean,collects,from,single,bucket,false,aggregator,factory,factories,i,create,parent,collects,from,single,bucket,profilers,profilers,factory,context,get,profilers,if,profilers,null,factory,new,profiling,aggregator,factory,profilers,get,aggregation,profiler,aggregators,i,factory,return,aggregators
AggregatorFactories -> Builder -> public Builder();1524684173;Create an empty builder.;public Builder() {_        };create,an,empty,builder;public,builder
AggregatorFactories -> Builder -> public Builder();1538067637;Create an empty builder.;public Builder() {_        };create,an,empty,builder;public,builder
AggregatorFactories -> Builder -> public Builder();1538170812;Create an empty builder.;public Builder() {_        };create,an,empty,builder;public,builder
AggregatorFactories -> Builder -> public Builder();1544110272;Create an empty builder.;public Builder() {_        };create,an,empty,builder;public,builder
AggregatorFactories -> Builder -> Builder skipResolveOrder();1524684173;FOR TESTING ONLY;Builder skipResolveOrder() {_            this.skipResolveOrder = true__            return this__        };for,testing,only;builder,skip,resolve,order,this,skip,resolve,order,true,return,this
AggregatorFactories -> Builder -> Builder skipResolveOrder();1538067637;FOR TESTING ONLY;Builder skipResolveOrder() {_            this.skipResolveOrder = true__            return this__        };for,testing,only;builder,skip,resolve,order,this,skip,resolve,order,true,return,this
AggregatorFactories -> Builder -> Builder skipResolveOrder();1538170812;FOR TESTING ONLY;Builder skipResolveOrder() {_            this.skipResolveOrder = true__            return this__        };for,testing,only;builder,skip,resolve,order,this,skip,resolve,order,true,return,this
AggregatorFactories -> Builder -> Builder skipResolveOrder();1544110272;FOR TESTING ONLY;Builder skipResolveOrder() {_            this.skipResolveOrder = true__            return this__        };for,testing,only;builder,skip,resolve,order,this,skip,resolve,order,true,return,this
AggregatorFactories -> Builder -> public Builder rewrite(QueryRewriteContext context) throws IOException;1524684173;Rewrites the underlying aggregation builders into their primitive_form. If the builder did not change the identity reference must be_returned otherwise the builder will be rewritten infinitely.;public Builder rewrite(QueryRewriteContext context) throws IOException {_            boolean changed = false__            Builder newBuilder = new Builder()___            for (AggregationBuilder builder : aggregationBuilders) {_                AggregationBuilder result = AggregationBuilder.rewriteAggregation(builder, context)__                if (result != builder) {_                    changed = true__                }_                newBuilder.addAggregator(result)__            }__            if (changed) {_                for (PipelineAggregationBuilder builder : pipelineAggregatorBuilders) {_                    newBuilder.addPipelineAggregator(builder)__                }_                return newBuilder__            } else {_                return this__            }_        };rewrites,the,underlying,aggregation,builders,into,their,primitive,form,if,the,builder,did,not,change,the,identity,reference,must,be,returned,otherwise,the,builder,will,be,rewritten,infinitely;public,builder,rewrite,query,rewrite,context,context,throws,ioexception,boolean,changed,false,builder,new,builder,new,builder,for,aggregation,builder,builder,aggregation,builders,aggregation,builder,result,aggregation,builder,rewrite,aggregation,builder,context,if,result,builder,changed,true,new,builder,add,aggregator,result,if,changed,for,pipeline,aggregation,builder,builder,pipeline,aggregator,builders,new,builder,add,pipeline,aggregator,builder,return,new,builder,else,return,this
AggregatorFactories -> Builder -> public Builder rewrite(QueryRewriteContext context) throws IOException;1538067637;Rewrites the underlying aggregation builders into their primitive_form. If the builder did not change the identity reference must be_returned otherwise the builder will be rewritten infinitely.;public Builder rewrite(QueryRewriteContext context) throws IOException {_            boolean changed = false__            Builder newBuilder = new Builder()___            for (AggregationBuilder builder : aggregationBuilders) {_                AggregationBuilder result = AggregationBuilder.rewriteAggregation(builder, context)__                if (result != builder) {_                    changed = true__                }_                newBuilder.addAggregator(result)__            }__            if (changed) {_                for (PipelineAggregationBuilder builder : pipelineAggregatorBuilders) {_                    newBuilder.addPipelineAggregator(builder)__                }_                return newBuilder__            } else {_                return this__            }_        };rewrites,the,underlying,aggregation,builders,into,their,primitive,form,if,the,builder,did,not,change,the,identity,reference,must,be,returned,otherwise,the,builder,will,be,rewritten,infinitely;public,builder,rewrite,query,rewrite,context,context,throws,ioexception,boolean,changed,false,builder,new,builder,new,builder,for,aggregation,builder,builder,aggregation,builders,aggregation,builder,result,aggregation,builder,rewrite,aggregation,builder,context,if,result,builder,changed,true,new,builder,add,aggregator,result,if,changed,for,pipeline,aggregation,builder,builder,pipeline,aggregator,builders,new,builder,add,pipeline,aggregator,builder,return,new,builder,else,return,this
AggregatorFactories -> Builder -> public Builder rewrite(QueryRewriteContext context) throws IOException;1538170812;Rewrites the underlying aggregation builders into their primitive_form. If the builder did not change the identity reference must be_returned otherwise the builder will be rewritten infinitely.;public Builder rewrite(QueryRewriteContext context) throws IOException {_            boolean changed = false__            Builder newBuilder = new Builder()___            for (AggregationBuilder builder : aggregationBuilders) {_                AggregationBuilder result = AggregationBuilder.rewriteAggregation(builder, context)__                if (result != builder) {_                    changed = true__                }_                newBuilder.addAggregator(result)__            }__            if (changed) {_                for (PipelineAggregationBuilder builder : pipelineAggregatorBuilders) {_                    newBuilder.addPipelineAggregator(builder)__                }_                return newBuilder__            } else {_                return this__            }_        };rewrites,the,underlying,aggregation,builders,into,their,primitive,form,if,the,builder,did,not,change,the,identity,reference,must,be,returned,otherwise,the,builder,will,be,rewritten,infinitely;public,builder,rewrite,query,rewrite,context,context,throws,ioexception,boolean,changed,false,builder,new,builder,new,builder,for,aggregation,builder,builder,aggregation,builders,aggregation,builder,result,aggregation,builder,rewrite,aggregation,builder,context,if,result,builder,changed,true,new,builder,add,aggregator,result,if,changed,for,pipeline,aggregation,builder,builder,pipeline,aggregator,builders,new,builder,add,pipeline,aggregator,builder,return,new,builder,else,return,this
AggregatorFactories -> Builder -> public Builder rewrite(QueryRewriteContext context) throws IOException;1544110272;Rewrites the underlying aggregation builders into their primitive_form. If the builder did not change the identity reference must be_returned otherwise the builder will be rewritten infinitely.;public Builder rewrite(QueryRewriteContext context) throws IOException {_            boolean changed = false__            Builder newBuilder = new Builder()___            for (AggregationBuilder builder : aggregationBuilders) {_                AggregationBuilder result = AggregationBuilder.rewriteAggregation(builder, context)__                if (result != builder) {_                    changed = true__                }_                newBuilder.addAggregator(result)__            }__            if (changed) {_                for (PipelineAggregationBuilder builder : pipelineAggregatorBuilders) {_                    newBuilder.addPipelineAggregator(builder)__                }_                return newBuilder__            } else {_                return this__            }_        };rewrites,the,underlying,aggregation,builders,into,their,primitive,form,if,the,builder,did,not,change,the,identity,reference,must,be,returned,otherwise,the,builder,will,be,rewritten,infinitely;public,builder,rewrite,query,rewrite,context,context,throws,ioexception,boolean,changed,false,builder,new,builder,new,builder,for,aggregation,builder,builder,aggregation,builders,aggregation,builder,result,aggregation,builder,rewrite,aggregation,builder,context,if,result,builder,changed,true,new,builder,add,aggregator,result,if,changed,for,pipeline,aggregation,builder,builder,pipeline,aggregator,builders,new,builder,add,pipeline,aggregator,builder,return,new,builder,else,return,this
AggregatorFactories -> public int countAggregators();1524684173;@return the number of sub-aggregator factories not including pipeline_aggregator factories;public int countAggregators() {_        return factories.length__    };return,the,number,of,sub,aggregator,factories,not,including,pipeline,aggregator,factories;public,int,count,aggregators,return,factories,length
AggregatorFactories -> public int countAggregators();1538067637;@return the number of sub-aggregator factories not including pipeline_aggregator factories;public int countAggregators() {_        return factories.length__    };return,the,number,of,sub,aggregator,factories,not,including,pipeline,aggregator,factories;public,int,count,aggregators,return,factories,length
AggregatorFactories -> public int countAggregators();1538170812;@return the number of sub-aggregator factories not including pipeline_aggregator factories;public int countAggregators() {_        return factories.length__    };return,the,number,of,sub,aggregator,factories,not,including,pipeline,aggregator,factories;public,int,count,aggregators,return,factories,length
AggregatorFactories -> public int countAggregators();1544110272;@return the number of sub-aggregator factories not including pipeline_aggregator factories;public int countAggregators() {_        return factories.length__    };return,the,number,of,sub,aggregator,factories,not,including,pipeline,aggregator,factories;public,int,count,aggregators,return,factories,length
AggregatorFactories -> Builder -> public Builder(StreamInput in) throws IOException;1524684173;Read from a stream.;public Builder(StreamInput in) throws IOException {_            int factoriesSize = in.readVInt()__            for (int i = 0_ i < factoriesSize_ i++) {_                addAggregator(in.readNamedWriteable(AggregationBuilder.class))__            }_            int pipelineFactoriesSize = in.readVInt()__            for (int i = 0_ i < pipelineFactoriesSize_ i++) {_                addPipelineAggregator(in.readNamedWriteable(PipelineAggregationBuilder.class))__            }_        };read,from,a,stream;public,builder,stream,input,in,throws,ioexception,int,factories,size,in,read,vint,for,int,i,0,i,factories,size,i,add,aggregator,in,read,named,writeable,aggregation,builder,class,int,pipeline,factories,size,in,read,vint,for,int,i,0,i,pipeline,factories,size,i,add,pipeline,aggregator,in,read,named,writeable,pipeline,aggregation,builder,class
AggregatorFactories -> Builder -> public Builder(StreamInput in) throws IOException;1538067637;Read from a stream.;public Builder(StreamInput in) throws IOException {_            int factoriesSize = in.readVInt()__            for (int i = 0_ i < factoriesSize_ i++) {_                addAggregator(in.readNamedWriteable(AggregationBuilder.class))__            }_            int pipelineFactoriesSize = in.readVInt()__            for (int i = 0_ i < pipelineFactoriesSize_ i++) {_                addPipelineAggregator(in.readNamedWriteable(PipelineAggregationBuilder.class))__            }_        };read,from,a,stream;public,builder,stream,input,in,throws,ioexception,int,factories,size,in,read,vint,for,int,i,0,i,factories,size,i,add,aggregator,in,read,named,writeable,aggregation,builder,class,int,pipeline,factories,size,in,read,vint,for,int,i,0,i,pipeline,factories,size,i,add,pipeline,aggregator,in,read,named,writeable,pipeline,aggregation,builder,class
AggregatorFactories -> Builder -> public Builder(StreamInput in) throws IOException;1538170812;Read from a stream.;public Builder(StreamInput in) throws IOException {_            int factoriesSize = in.readVInt()__            for (int i = 0_ i < factoriesSize_ i++) {_                addAggregator(in.readNamedWriteable(AggregationBuilder.class))__            }_            int pipelineFactoriesSize = in.readVInt()__            for (int i = 0_ i < pipelineFactoriesSize_ i++) {_                addPipelineAggregator(in.readNamedWriteable(PipelineAggregationBuilder.class))__            }_        };read,from,a,stream;public,builder,stream,input,in,throws,ioexception,int,factories,size,in,read,vint,for,int,i,0,i,factories,size,i,add,aggregator,in,read,named,writeable,aggregation,builder,class,int,pipeline,factories,size,in,read,vint,for,int,i,0,i,pipeline,factories,size,i,add,pipeline,aggregator,in,read,named,writeable,pipeline,aggregation,builder,class
AggregatorFactories -> Builder -> public Builder(StreamInput in) throws IOException;1544110272;Read from a stream.;public Builder(StreamInput in) throws IOException {_            int factoriesSize = in.readVInt()__            for (int i = 0_ i < factoriesSize_ i++) {_                addAggregator(in.readNamedWriteable(AggregationBuilder.class))__            }_            int pipelineFactoriesSize = in.readVInt()__            for (int i = 0_ i < pipelineFactoriesSize_ i++) {_                addPipelineAggregator(in.readNamedWriteable(PipelineAggregationBuilder.class))__            }_        };read,from,a,stream;public,builder,stream,input,in,throws,ioexception,int,factories,size,in,read,vint,for,int,i,0,i,factories,size,i,add,aggregator,in,read,named,writeable,aggregation,builder,class,int,pipeline,factories,size,in,read,vint,for,int,i,0,i,pipeline,factories,size,i,add,pipeline,aggregator,in,read,named,writeable,pipeline,aggregation,builder,class
