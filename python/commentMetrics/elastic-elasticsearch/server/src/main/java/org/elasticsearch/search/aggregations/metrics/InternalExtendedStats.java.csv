commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static Metrics resolve(String name) {     return Metrics.valueOf(name). }
false;protected;1;5;;@Override protected void writeOtherStatsTo(StreamOutput out) throws IOException {     out.writeDouble(sumOfSqrs).     out.writeDouble(sigma). }
false;public;0;4;;@Override public String getWriteableName() {     return ExtendedStatsAggregationBuilder.NAME. }
false;public;1;19;;@Override public double value(String name) {     if ("sum_of_squares".equals(name)) {         return sumOfSqrs.     }     if ("variance".equals(name)) {         return getVariance().     }     if ("std_deviation".equals(name)) {         return getStdDeviation().     }     if ("std_upper".equals(name)) {         return getStdDeviationBound(Bounds.UPPER).     }     if ("std_lower".equals(name)) {         return getStdDeviationBound(Bounds.LOWER).     }     return super.value(name). }
false;public;0;3;;public double getSigma() {     return this.sigma. }
false;public;0;4;;@Override public double getSumOfSquares() {     return sumOfSqrs. }
false;public;0;5;;@Override public double getVariance() {     double variance = (sumOfSqrs - ((sum * sum) / count)) / count.     return variance < 0 ? 0 : variance. }
false;public;0;4;;@Override public double getStdDeviation() {     return Math.sqrt(getVariance()). }
false;public;1;8;;@Override public double getStdDeviationBound(Bounds bound) {     if (bound.equals(Bounds.UPPER)) {         return getAvg() + (getStdDeviation() * sigma).     } else {         return getAvg() - (getStdDeviation() * sigma).     } }
false;public;0;4;;@Override public String getSumOfSquaresAsString() {     return valueAsString(Metrics.sum_of_squares.name()). }
false;public;0;4;;@Override public String getVarianceAsString() {     return valueAsString(Metrics.variance.name()). }
false;public;0;4;;@Override public String getStdDeviationAsString() {     return valueAsString(Metrics.std_deviation.name()). }
false;public;1;4;;@Override public String getStdDeviationBoundAsString(Bounds bound) {     return bound == Bounds.UPPER ? valueAsString(Metrics.std_upper.name()) : valueAsString(Metrics.std_lower.name()). }
false;public;2;23;;@Override public InternalExtendedStats doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {     double sumOfSqrs = 0.     double compensationOfSqrs = 0.     for (InternalAggregation aggregation : aggregations) {         InternalExtendedStats stats = (InternalExtendedStats) aggregation.         if (stats.sigma != sigma) {             throw new IllegalStateException("Cannot reduce other stats aggregations that have a different sigma").         }         double value = stats.getSumOfSquares().         if (Double.isFinite(value) == false) {             sumOfSqrs += value.         } else if (Double.isFinite(sumOfSqrs)) {             double correctedOfSqrs = value - compensationOfSqrs.             double newSumOfSqrs = sumOfSqrs + correctedOfSqrs.             compensationOfSqrs = (newSumOfSqrs - sumOfSqrs) - correctedOfSqrs.             sumOfSqrs = newSumOfSqrs.         }     }     final InternalStats stats = super.doReduce(aggregations, reduceContext).     return new InternalExtendedStats(name, stats.getCount(), stats.getSum(), stats.getMin(), stats.getMax(), sumOfSqrs, sigma, format, pipelineAggregators(), getMetaData()). }
false;protected;2;36;;@Override protected XContentBuilder otherStatsToXContent(XContentBuilder builder, Params params) throws IOException {     if (count != 0) {         builder.field(Fields.SUM_OF_SQRS, sumOfSqrs).         builder.field(Fields.VARIANCE, getVariance()).         builder.field(Fields.STD_DEVIATION, getStdDeviation()).         builder.startObject(Fields.STD_DEVIATION_BOUNDS).         {             builder.field(Fields.UPPER, getStdDeviationBound(Bounds.UPPER)).             builder.field(Fields.LOWER, getStdDeviationBound(Bounds.LOWER)).         }         builder.endObject().         if (format != DocValueFormat.RAW) {             builder.field(Fields.SUM_OF_SQRS_AS_STRING, format.format(sumOfSqrs)).             builder.field(Fields.VARIANCE_AS_STRING, format.format(getVariance())).             builder.field(Fields.STD_DEVIATION_AS_STRING, getStdDeviationAsString()).             builder.startObject(Fields.STD_DEVIATION_BOUNDS_AS_STRING).             {                 builder.field(Fields.UPPER, getStdDeviationBoundAsString(Bounds.UPPER)).                 builder.field(Fields.LOWER, getStdDeviationBoundAsString(Bounds.LOWER)).             }             builder.endObject().         }     } else {         builder.nullField(Fields.SUM_OF_SQRS).         builder.nullField(Fields.VARIANCE).         builder.nullField(Fields.STD_DEVIATION).         builder.startObject(Fields.STD_DEVIATION_BOUNDS).         {             builder.nullField(Fields.UPPER).             builder.nullField(Fields.LOWER).         }         builder.endObject().     }     return builder. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(super.doHashCode(), sumOfSqrs, sigma). }
false;protected;1;7;;@Override protected boolean doEquals(Object obj) {     InternalExtendedStats other = (InternalExtendedStats) obj.     return super.doEquals(obj) && Double.compare(sumOfSqrs, other.sumOfSqrs) == 0 && Double.compare(sigma, other.sigma) == 0. }
