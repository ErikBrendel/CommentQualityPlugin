commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * A boolean denoting whether the query is valid.  */ ;/**  * A boolean denoting whether the query is valid.  */ public boolean isValid() {     return valid. }
true;public;0;6;/**  * The list of query explanations.  */ ;/**  * The list of query explanations.  */ public List<? extends QueryExplanation> getQueryExplanation() {     if (queryExplanations == null) {         return Collections.emptyList().     }     return queryExplanations. }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     valid = in.readBoolean().     int size = in.readVInt().     if (size > 0) {         queryExplanations = new ArrayList<>(size).         for (int i = 0. i < size. i++) {             queryExplanations.add(readQueryExplanation(in)).         }     } }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(valid).     out.writeVInt(queryExplanations.size()).     for (QueryExplanation exp : queryExplanations) {         exp.writeTo(out).     } }
false;protected;2;13;;@Override protected void addCustomXContentFields(XContentBuilder builder, Params params) throws IOException {     builder.field(VALID_FIELD, isValid()).     if (getQueryExplanation() != null && !getQueryExplanation().isEmpty()) {         builder.startArray(EXPLANATIONS_FIELD).         for (QueryExplanation explanation : getQueryExplanation()) {             builder.startObject().             explanation.toXContent(builder, params).             builder.endObject().         }         builder.endArray().     } }
false;public,static;1;3;;public static ValidateQueryResponse fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
