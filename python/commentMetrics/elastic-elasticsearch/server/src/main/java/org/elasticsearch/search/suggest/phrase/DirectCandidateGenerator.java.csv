# id;timestamp;commentText;codeText;commentWords;codeWords
DirectCandidateGenerator -> public static int analyze(TokenStream stream, TokenConsumer consumer) throws IOException;1524684173;NOTE: this method closes the TokenStream, even on exception, which is awkward_because really the caller who called {@link Analyzer#tokenStream} should close it,_but when trying that there are recursion issues when we try to use the same_TokenStream twice in the same recursion...;public static int analyze(TokenStream stream, TokenConsumer consumer) throws IOException {_        int numTokens = 0__        boolean success = false__        try {_            stream.reset()__            consumer.reset(stream)__            while (stream.incrementToken()) {_                consumer.nextToken()__                numTokens++__            }_            consumer.end()__            success = true__        } finally {_            if (success) {_                stream.close()__            } else {_                IOUtils.closeWhileHandlingException(stream)__            }_        }_        return numTokens__    };note,this,method,closes,the,token,stream,even,on,exception,which,is,awkward,because,really,the,caller,who,called,link,analyzer,token,stream,should,close,it,but,when,trying,that,there,are,recursion,issues,when,we,try,to,use,the,same,token,stream,twice,in,the,same,recursion;public,static,int,analyze,token,stream,stream,token,consumer,consumer,throws,ioexception,int,num,tokens,0,boolean,success,false,try,stream,reset,consumer,reset,stream,while,stream,increment,token,consumer,next,token,num,tokens,consumer,end,success,true,finally,if,success,stream,close,else,ioutils,close,while,handling,exception,stream,return,num,tokens
DirectCandidateGenerator -> public static int analyze(TokenStream stream, TokenConsumer consumer) throws IOException;1539951844;NOTE: this method closes the TokenStream, even on exception, which is awkward_because really the caller who called {@link Analyzer#tokenStream} should close it,_but when trying that there are recursion issues when we try to use the same_TokenStream twice in the same recursion...;public static int analyze(TokenStream stream, TokenConsumer consumer) throws IOException {_        int numTokens = 0__        boolean success = false__        try {_            stream.reset()__            consumer.reset(stream)__            while (stream.incrementToken()) {_                consumer.nextToken()__                numTokens++__            }_            consumer.end()__            success = true__        } finally {_            if (success) {_                stream.close()__            } else {_                IOUtils.closeWhileHandlingException(stream)__            }_        }_        return numTokens__    };note,this,method,closes,the,token,stream,even,on,exception,which,is,awkward,because,really,the,caller,who,called,link,analyzer,token,stream,should,close,it,but,when,trying,that,there,are,recursion,issues,when,we,try,to,use,the,same,token,stream,twice,in,the,same,recursion;public,static,int,analyze,token,stream,stream,token,consumer,consumer,throws,ioexception,int,num,tokens,0,boolean,success,false,try,stream,reset,consumer,reset,stream,while,stream,increment,token,consumer,next,token,num,tokens,consumer,end,success,true,finally,if,success,stream,close,else,ioutils,close,while,handling,exception,stream,return,num,tokens
DirectCandidateGenerator -> public static int analyze(TokenStream stream, TokenConsumer consumer) throws IOException;1541501723;NOTE: this method closes the TokenStream, even on exception, which is awkward_because really the caller who called {@link Analyzer#tokenStream} should close it,_but when trying that there are recursion issues when we try to use the same_TokenStream twice in the same recursion...;public static int analyze(TokenStream stream, TokenConsumer consumer) throws IOException {_        int numTokens = 0__        boolean success = false__        try {_            stream.reset()__            consumer.reset(stream)__            while (stream.incrementToken()) {_                consumer.nextToken()__                numTokens++__            }_            consumer.end()__            success = true__        } finally {_            if (success) {_                stream.close()__            } else {_                IOUtils.closeWhileHandlingException(stream)__            }_        }_        return numTokens__    };note,this,method,closes,the,token,stream,even,on,exception,which,is,awkward,because,really,the,caller,who,called,link,analyzer,token,stream,should,close,it,but,when,trying,that,there,are,recursion,issues,when,we,try,to,use,the,same,token,stream,twice,in,the,same,recursion;public,static,int,analyze,token,stream,stream,token,consumer,consumer,throws,ioexception,int,num,tokens,0,boolean,success,false,try,stream,reset,consumer,reset,stream,while,stream,increment,token,consumer,next,token,num,tokens,consumer,end,success,true,finally,if,success,stream,close,else,ioutils,close,while,handling,exception,stream,return,num,tokens
DirectCandidateGenerator -> Candidate -> @Override         public int compareTo(Candidate other);1524684173;Lower scores sort first_ if scores are equal, then later (zzz) terms sort first;@Override_        public int compareTo(Candidate other) {_            if (score == other.score) {_                _                return other.term.compareTo(term)__            } else {_                return Double.compare(score, other.score)__            }_        };lower,scores,sort,first,if,scores,are,equal,then,later,zzz,terms,sort,first;override,public,int,compare,to,candidate,other,if,score,other,score,return,other,term,compare,to,term,else,return,double,compare,score,other,score
DirectCandidateGenerator -> Candidate -> @Override         public int compareTo(Candidate other);1539951844;Lower scores sort first_ if scores are equal, then later (zzz) terms sort first;@Override_        public int compareTo(Candidate other) {_            if (score == other.score) {_                _                return other.term.compareTo(term)__            } else {_                return Double.compare(score, other.score)__            }_        };lower,scores,sort,first,if,scores,are,equal,then,later,zzz,terms,sort,first;override,public,int,compare,to,candidate,other,if,score,other,score,return,other,term,compare,to,term,else,return,double,compare,score,other,score
DirectCandidateGenerator -> Candidate -> @Override         public int compareTo(Candidate other);1541501723;Lower scores sort first_ if scores are equal, then later (zzz) terms sort first;@Override_        public int compareTo(Candidate other) {_            if (score == other.score) {_                _                return other.term.compareTo(term)__            } else {_                return Double.compare(score, other.score)__            }_        };lower,scores,sort,first,if,scores,are,equal,then,later,zzz,terms,sort,first;override,public,int,compare,to,candidate,other,if,score,other,score,return,other,term,compare,to,term,else,return,double,compare,score,other,score
