commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the original indices associated with this shard iterator, specifically with the cluster that this shard belongs to.  */ ;/**  * Returns the original indices associated with this shard iterator, specifically with the cluster that this shard belongs to.  */ public OriginalIndices getOriginalIndices() {     return originalIndices. }
true;public;0;4;/**  * Returns the alias of the cluster where the shard is located.  */ ;/**  * Returns the alias of the cluster where the shard is located.  */ @Nullable public String getClusterAlias() {     return clusterAlias. }
true;;1;3;/**  * Creates a new shard target from this iterator, pointing at the node identified by the provided identifier.  * @see SearchShardTarget  */ ;/**  * Creates a new shard target from this iterator, pointing at the node identified by the provided identifier.  * @see SearchShardTarget  */ SearchShardTarget newSearchShardTarget(String nodeId) {     return new SearchShardTarget(nodeId, shardId(), clusterAlias, originalIndices). }
true;;0;4;/**  * Reset the iterator and mark it as skippable  * @see #skip()  */ ;/**  * Reset the iterator and mark it as skippable  * @see #skip()  */ void resetAndSkip() {     reset().     skip = true. }
true;;0;3;/**  * Returns <code>true</code> if the search execution should skip this shard since it can not match any documents given the query.  */ ;/**  * Returns <code>true</code> if the search execution should skip this shard since it can not match any documents given the query.  */ boolean skip() {     return skip. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     if (super.equals(o) == false) {         return false.     }     SearchShardIterator that = (SearchShardIterator) o.     return Objects.equals(clusterAlias, that.clusterAlias). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), clusterAlias). }
false;public;1;18;;@Override public int compareTo(ShardIterator o) {     int superCompareTo = super.compareTo(o).     if (superCompareTo != 0 || (o instanceof SearchShardIterator == false)) {         return superCompareTo.     }     SearchShardIterator searchShardIterator = (SearchShardIterator) o.     if (clusterAlias == null && searchShardIterator.getClusterAlias() == null) {         return 0.     }     if (clusterAlias == null) {         return -1.     }     if (searchShardIterator.getClusterAlias() == null) {         return 1.     }     return clusterAlias.compareTo(searchShardIterator.getClusterAlias()). }
