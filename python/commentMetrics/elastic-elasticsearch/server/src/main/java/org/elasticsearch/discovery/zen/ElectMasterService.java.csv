# id;timestamp;commentText;codeText;commentWords;codeWords
ElectMasterService -> public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters);1524684173;Returns a list of the next possible masters.;public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters) {_        List<DiscoveryNode> sortedNodes = sortedMasterNodes(Arrays.asList(nodes.toArray(DiscoveryNode.class)))__        if (sortedNodes == null) {_            return new DiscoveryNode[0]__        }_        List<DiscoveryNode> nextPossibleMasters = new ArrayList<>(numberOfPossibleMasters)__        int counter = 0__        for (DiscoveryNode nextPossibleMaster : sortedNodes) {_            if (++counter >= numberOfPossibleMasters) {_                break__            }_            nextPossibleMasters.add(nextPossibleMaster)__        }_        return nextPossibleMasters.toArray(new DiscoveryNode[nextPossibleMasters.size()])__    };returns,a,list,of,the,next,possible,masters;public,discovery,node,next,possible,masters,object,container,discovery,node,nodes,int,number,of,possible,masters,list,discovery,node,sorted,nodes,sorted,master,nodes,arrays,as,list,nodes,to,array,discovery,node,class,if,sorted,nodes,null,return,new,discovery,node,0,list,discovery,node,next,possible,masters,new,array,list,number,of,possible,masters,int,counter,0,for,discovery,node,next,possible,master,sorted,nodes,if,counter,number,of,possible,masters,break,next,possible,masters,add,next,possible,master,return,next,possible,masters,to,array,new,discovery,node,next,possible,masters,size
ElectMasterService -> public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters);1525334055;Returns a list of the next possible masters.;public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters) {_        List<DiscoveryNode> sortedNodes = sortedMasterNodes(Arrays.asList(nodes.toArray(DiscoveryNode.class)))__        if (sortedNodes == null) {_            return new DiscoveryNode[0]__        }_        List<DiscoveryNode> nextPossibleMasters = new ArrayList<>(numberOfPossibleMasters)__        int counter = 0__        for (DiscoveryNode nextPossibleMaster : sortedNodes) {_            if (++counter >= numberOfPossibleMasters) {_                break__            }_            nextPossibleMasters.add(nextPossibleMaster)__        }_        return nextPossibleMasters.toArray(new DiscoveryNode[nextPossibleMasters.size()])__    };returns,a,list,of,the,next,possible,masters;public,discovery,node,next,possible,masters,object,container,discovery,node,nodes,int,number,of,possible,masters,list,discovery,node,sorted,nodes,sorted,master,nodes,arrays,as,list,nodes,to,array,discovery,node,class,if,sorted,nodes,null,return,new,discovery,node,0,list,discovery,node,next,possible,masters,new,array,list,number,of,possible,masters,int,counter,0,for,discovery,node,next,possible,master,sorted,nodes,if,counter,number,of,possible,masters,break,next,possible,masters,add,next,possible,master,return,next,possible,masters,to,array,new,discovery,node,next,possible,masters,size
ElectMasterService -> public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters);1541092382;Returns a list of the next possible masters.;public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters) {_        List<DiscoveryNode> sortedNodes = sortedMasterNodes(Arrays.asList(nodes.toArray(DiscoveryNode.class)))__        if (sortedNodes == null) {_            return new DiscoveryNode[0]__        }_        List<DiscoveryNode> nextPossibleMasters = new ArrayList<>(numberOfPossibleMasters)__        int counter = 0__        for (DiscoveryNode nextPossibleMaster : sortedNodes) {_            if (++counter >= numberOfPossibleMasters) {_                break__            }_            nextPossibleMasters.add(nextPossibleMaster)__        }_        return nextPossibleMasters.toArray(new DiscoveryNode[nextPossibleMasters.size()])__    };returns,a,list,of,the,next,possible,masters;public,discovery,node,next,possible,masters,object,container,discovery,node,nodes,int,number,of,possible,masters,list,discovery,node,sorted,nodes,sorted,master,nodes,arrays,as,list,nodes,to,array,discovery,node,class,if,sorted,nodes,null,return,new,discovery,node,0,list,discovery,node,next,possible,masters,new,array,list,number,of,possible,masters,int,counter,0,for,discovery,node,next,possible,master,sorted,nodes,if,counter,number,of,possible,masters,break,next,possible,masters,add,next,possible,master,return,next,possible,masters,to,array,new,discovery,node,next,possible,masters,size
ElectMasterService -> public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters);1542402632;Returns a list of the next possible masters.;public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters) {_        List<DiscoveryNode> sortedNodes = sortedMasterNodes(Arrays.asList(nodes.toArray(DiscoveryNode.class)))__        if (sortedNodes == null) {_            return new DiscoveryNode[0]__        }_        List<DiscoveryNode> nextPossibleMasters = new ArrayList<>(numberOfPossibleMasters)__        int counter = 0__        for (DiscoveryNode nextPossibleMaster : sortedNodes) {_            if (++counter >= numberOfPossibleMasters) {_                break__            }_            nextPossibleMasters.add(nextPossibleMaster)__        }_        return nextPossibleMasters.toArray(new DiscoveryNode[nextPossibleMasters.size()])__    };returns,a,list,of,the,next,possible,masters;public,discovery,node,next,possible,masters,object,container,discovery,node,nodes,int,number,of,possible,masters,list,discovery,node,sorted,nodes,sorted,master,nodes,arrays,as,list,nodes,to,array,discovery,node,class,if,sorted,nodes,null,return,new,discovery,node,0,list,discovery,node,next,possible,masters,new,array,list,number,of,possible,masters,int,counter,0,for,discovery,node,next,possible,master,sorted,nodes,if,counter,number,of,possible,masters,break,next,possible,masters,add,next,possible,master,return,next,possible,masters,to,array,new,discovery,node,next,possible,masters,size
ElectMasterService -> public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters);1544437584;Returns a list of the next possible masters.;public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters) {_        List<DiscoveryNode> sortedNodes = sortedMasterNodes(Arrays.asList(nodes.toArray(DiscoveryNode.class)))__        if (sortedNodes == null) {_            return new DiscoveryNode[0]__        }_        List<DiscoveryNode> nextPossibleMasters = new ArrayList<>(numberOfPossibleMasters)__        int counter = 0__        for (DiscoveryNode nextPossibleMaster : sortedNodes) {_            if (++counter >= numberOfPossibleMasters) {_                break__            }_            nextPossibleMasters.add(nextPossibleMaster)__        }_        return nextPossibleMasters.toArray(new DiscoveryNode[nextPossibleMasters.size()])__    };returns,a,list,of,the,next,possible,masters;public,discovery,node,next,possible,masters,object,container,discovery,node,nodes,int,number,of,possible,masters,list,discovery,node,sorted,nodes,sorted,master,nodes,arrays,as,list,nodes,to,array,discovery,node,class,if,sorted,nodes,null,return,new,discovery,node,0,list,discovery,node,next,possible,masters,new,array,list,number,of,possible,masters,int,counter,0,for,discovery,node,next,possible,master,sorted,nodes,if,counter,number,of,possible,masters,break,next,possible,masters,add,next,possible,master,return,next,possible,masters,to,array,new,discovery,node,next,possible,masters,size
ElectMasterService -> public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters);1548878955;Returns a list of the next possible masters.;public DiscoveryNode[] nextPossibleMasters(ObjectContainer<DiscoveryNode> nodes, int numberOfPossibleMasters) {_        List<DiscoveryNode> sortedNodes = sortedMasterNodes(Arrays.asList(nodes.toArray(DiscoveryNode.class)))__        if (sortedNodes == null) {_            return new DiscoveryNode[0]__        }_        List<DiscoveryNode> nextPossibleMasters = new ArrayList<>(numberOfPossibleMasters)__        int counter = 0__        for (DiscoveryNode nextPossibleMaster : sortedNodes) {_            if (++counter >= numberOfPossibleMasters) {_                break__            }_            nextPossibleMasters.add(nextPossibleMaster)__        }_        return nextPossibleMasters.toArray(new DiscoveryNode[nextPossibleMasters.size()])__    };returns,a,list,of,the,next,possible,masters;public,discovery,node,next,possible,masters,object,container,discovery,node,nodes,int,number,of,possible,masters,list,discovery,node,sorted,nodes,sorted,master,nodes,arrays,as,list,nodes,to,array,discovery,node,class,if,sorted,nodes,null,return,new,discovery,node,0,list,discovery,node,next,possible,masters,new,array,list,number,of,possible,masters,int,counter,0,for,discovery,node,next,possible,master,sorted,nodes,if,counter,number,of,possible,masters,break,next,possible,masters,add,next,possible,master,return,next,possible,masters,to,array,new,discovery,node,next,possible,masters,size
ElectMasterService -> private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2);1524684173;master nodes go before other nodes, with a secondary sort by id *;private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2) {_        if (o1.isMasterNode() && !o2.isMasterNode()) {_            return -1__        }_        if (!o1.isMasterNode() && o2.isMasterNode()) {_            return 1__        }_        return o1.getId().compareTo(o2.getId())__    };master,nodes,go,before,other,nodes,with,a,secondary,sort,by,id;private,static,int,compare,nodes,discovery,node,o1,discovery,node,o2,if,o1,is,master,node,o2,is,master,node,return,1,if,o1,is,master,node,o2,is,master,node,return,1,return,o1,get,id,compare,to,o2,get,id
ElectMasterService -> private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2);1525334055;master nodes go before other nodes, with a secondary sort by id *;private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2) {_        if (o1.isMasterNode() && !o2.isMasterNode()) {_            return -1__        }_        if (!o1.isMasterNode() && o2.isMasterNode()) {_            return 1__        }_        return o1.getId().compareTo(o2.getId())__    };master,nodes,go,before,other,nodes,with,a,secondary,sort,by,id;private,static,int,compare,nodes,discovery,node,o1,discovery,node,o2,if,o1,is,master,node,o2,is,master,node,return,1,if,o1,is,master,node,o2,is,master,node,return,1,return,o1,get,id,compare,to,o2,get,id
ElectMasterService -> private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2);1541092382;master nodes go before other nodes, with a secondary sort by id *;private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2) {_        if (o1.isMasterNode() && !o2.isMasterNode()) {_            return -1__        }_        if (!o1.isMasterNode() && o2.isMasterNode()) {_            return 1__        }_        return o1.getId().compareTo(o2.getId())__    };master,nodes,go,before,other,nodes,with,a,secondary,sort,by,id;private,static,int,compare,nodes,discovery,node,o1,discovery,node,o2,if,o1,is,master,node,o2,is,master,node,return,1,if,o1,is,master,node,o2,is,master,node,return,1,return,o1,get,id,compare,to,o2,get,id
ElectMasterService -> private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2);1542402632;master nodes go before other nodes, with a secondary sort by id *;private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2) {_        if (o1.isMasterNode() && !o2.isMasterNode()) {_            return -1__        }_        if (!o1.isMasterNode() && o2.isMasterNode()) {_            return 1__        }_        return o1.getId().compareTo(o2.getId())__    };master,nodes,go,before,other,nodes,with,a,secondary,sort,by,id;private,static,int,compare,nodes,discovery,node,o1,discovery,node,o2,if,o1,is,master,node,o2,is,master,node,return,1,if,o1,is,master,node,o2,is,master,node,return,1,return,o1,get,id,compare,to,o2,get,id
ElectMasterService -> private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2);1544437584;master nodes go before other nodes, with a secondary sort by id *;private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2) {_        if (o1.isMasterNode() && !o2.isMasterNode()) {_            return -1__        }_        if (!o1.isMasterNode() && o2.isMasterNode()) {_            return 1__        }_        return o1.getId().compareTo(o2.getId())__    };master,nodes,go,before,other,nodes,with,a,secondary,sort,by,id;private,static,int,compare,nodes,discovery,node,o1,discovery,node,o2,if,o1,is,master,node,o2,is,master,node,return,1,if,o1,is,master,node,o2,is,master,node,return,1,return,o1,get,id,compare,to,o2,get,id
ElectMasterService -> private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2);1548878955;master nodes go before other nodes, with a secondary sort by id *;private static int compareNodes(DiscoveryNode o1, DiscoveryNode o2) {_        if (o1.isMasterNode() && !o2.isMasterNode()) {_            return -1__        }_        if (!o1.isMasterNode() && o2.isMasterNode()) {_            return 1__        }_        return o1.getId().compareTo(o2.getId())__    };master,nodes,go,before,other,nodes,with,a,secondary,sort,by,id;private,static,int,compare,nodes,discovery,node,o1,discovery,node,o2,if,o1,is,master,node,o2,is,master,node,return,1,if,o1,is,master,node,o2,is,master,node,return,1,return,o1,get,id,compare,to,o2,get,id
ElectMasterService -> static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes);1524684173;Returns the given nodes sorted by likelihood of being elected as master, most likely first._Non-master nodes are not removed but are rather put in the end;static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {_        ArrayList<DiscoveryNode> sortedNodes = CollectionUtils.iterableAsArrayList(nodes)__        CollectionUtil.introSort(sortedNodes, ElectMasterService::compareNodes)__        return sortedNodes__    };returns,the,given,nodes,sorted,by,likelihood,of,being,elected,as,master,most,likely,first,non,master,nodes,are,not,removed,but,are,rather,put,in,the,end;static,list,discovery,node,sort,by,master,likelihood,iterable,discovery,node,nodes,array,list,discovery,node,sorted,nodes,collection,utils,iterable,as,array,list,nodes,collection,util,intro,sort,sorted,nodes,elect,master,service,compare,nodes,return,sorted,nodes
ElectMasterService -> static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes);1525334055;Returns the given nodes sorted by likelihood of being elected as master, most likely first._Non-master nodes are not removed but are rather put in the end;static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {_        ArrayList<DiscoveryNode> sortedNodes = CollectionUtils.iterableAsArrayList(nodes)__        CollectionUtil.introSort(sortedNodes, ElectMasterService::compareNodes)__        return sortedNodes__    };returns,the,given,nodes,sorted,by,likelihood,of,being,elected,as,master,most,likely,first,non,master,nodes,are,not,removed,but,are,rather,put,in,the,end;static,list,discovery,node,sort,by,master,likelihood,iterable,discovery,node,nodes,array,list,discovery,node,sorted,nodes,collection,utils,iterable,as,array,list,nodes,collection,util,intro,sort,sorted,nodes,elect,master,service,compare,nodes,return,sorted,nodes
ElectMasterService -> static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes);1541092382;Returns the given nodes sorted by likelihood of being elected as master, most likely first._Non-master nodes are not removed but are rather put in the end;static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {_        ArrayList<DiscoveryNode> sortedNodes = CollectionUtils.iterableAsArrayList(nodes)__        CollectionUtil.introSort(sortedNodes, ElectMasterService::compareNodes)__        return sortedNodes__    };returns,the,given,nodes,sorted,by,likelihood,of,being,elected,as,master,most,likely,first,non,master,nodes,are,not,removed,but,are,rather,put,in,the,end;static,list,discovery,node,sort,by,master,likelihood,iterable,discovery,node,nodes,array,list,discovery,node,sorted,nodes,collection,utils,iterable,as,array,list,nodes,collection,util,intro,sort,sorted,nodes,elect,master,service,compare,nodes,return,sorted,nodes
ElectMasterService -> static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes);1542402632;Returns the given nodes sorted by likelihood of being elected as master, most likely first._Non-master nodes are not removed but are rather put in the end;static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {_        ArrayList<DiscoveryNode> sortedNodes = CollectionUtils.iterableAsArrayList(nodes)__        CollectionUtil.introSort(sortedNodes, ElectMasterService::compareNodes)__        return sortedNodes__    };returns,the,given,nodes,sorted,by,likelihood,of,being,elected,as,master,most,likely,first,non,master,nodes,are,not,removed,but,are,rather,put,in,the,end;static,list,discovery,node,sort,by,master,likelihood,iterable,discovery,node,nodes,array,list,discovery,node,sorted,nodes,collection,utils,iterable,as,array,list,nodes,collection,util,intro,sort,sorted,nodes,elect,master,service,compare,nodes,return,sorted,nodes
ElectMasterService -> static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes);1544437584;Returns the given nodes sorted by likelihood of being elected as master, most likely first._Non-master nodes are not removed but are rather put in the end;static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {_        ArrayList<DiscoveryNode> sortedNodes = CollectionUtils.iterableAsArrayList(nodes)__        CollectionUtil.introSort(sortedNodes, ElectMasterService::compareNodes)__        return sortedNodes__    };returns,the,given,nodes,sorted,by,likelihood,of,being,elected,as,master,most,likely,first,non,master,nodes,are,not,removed,but,are,rather,put,in,the,end;static,list,discovery,node,sort,by,master,likelihood,iterable,discovery,node,nodes,array,list,discovery,node,sorted,nodes,collection,utils,iterable,as,array,list,nodes,collection,util,intro,sort,sorted,nodes,elect,master,service,compare,nodes,return,sorted,nodes
ElectMasterService -> static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes);1548878955;Returns the given nodes sorted by likelihood of being elected as master, most likely first._Non-master nodes are not removed but are rather put in the end;static List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {_        ArrayList<DiscoveryNode> sortedNodes = CollectionUtils.iterableAsArrayList(nodes)__        CollectionUtil.introSort(sortedNodes, ElectMasterService::compareNodes)__        return sortedNodes__    };returns,the,given,nodes,sorted,by,likelihood,of,being,elected,as,master,most,likely,first,non,master,nodes,are,not,removed,but,are,rather,put,in,the,end;static,list,discovery,node,sort,by,master,likelihood,iterable,discovery,node,nodes,array,list,discovery,node,sorted,nodes,collection,utils,iterable,as,array,list,nodes,collection,util,intro,sort,sorted,nodes,elect,master,service,compare,nodes,return,sorted,nodes
ElectMasterService -> MasterCandidate -> public static int compare(MasterCandidate c1, MasterCandidate c2);1524684173;compares two candidates to indicate which the a better master._A higher cluster state version is better__@return -1 if c1 is a batter candidate, 1 if c2.;public static int compare(MasterCandidate c1, MasterCandidate c2) {_            _            _            int ret = Long.compare(c2.clusterStateVersion, c1.clusterStateVersion)__            if (ret == 0) {_                ret = compareNodes(c1.getNode(), c2.getNode())__            }_            return ret__        };compares,two,candidates,to,indicate,which,the,a,better,master,a,higher,cluster,state,version,is,better,return,1,if,c1,is,a,batter,candidate,1,if,c2;public,static,int,compare,master,candidate,c1,master,candidate,c2,int,ret,long,compare,c2,cluster,state,version,c1,cluster,state,version,if,ret,0,ret,compare,nodes,c1,get,node,c2,get,node,return,ret
ElectMasterService -> MasterCandidate -> public static int compare(MasterCandidate c1, MasterCandidate c2);1525334055;compares two candidates to indicate which the a better master._A higher cluster state version is better__@return -1 if c1 is a batter candidate, 1 if c2.;public static int compare(MasterCandidate c1, MasterCandidate c2) {_            _            _            int ret = Long.compare(c2.clusterStateVersion, c1.clusterStateVersion)__            if (ret == 0) {_                ret = compareNodes(c1.getNode(), c2.getNode())__            }_            return ret__        };compares,two,candidates,to,indicate,which,the,a,better,master,a,higher,cluster,state,version,is,better,return,1,if,c1,is,a,batter,candidate,1,if,c2;public,static,int,compare,master,candidate,c1,master,candidate,c2,int,ret,long,compare,c2,cluster,state,version,c1,cluster,state,version,if,ret,0,ret,compare,nodes,c1,get,node,c2,get,node,return,ret
ElectMasterService -> MasterCandidate -> public static int compare(MasterCandidate c1, MasterCandidate c2);1541092382;compares two candidates to indicate which the a better master._A higher cluster state version is better__@return -1 if c1 is a batter candidate, 1 if c2.;public static int compare(MasterCandidate c1, MasterCandidate c2) {_            _            _            int ret = Long.compare(c2.clusterStateVersion, c1.clusterStateVersion)__            if (ret == 0) {_                ret = compareNodes(c1.getNode(), c2.getNode())__            }_            return ret__        };compares,two,candidates,to,indicate,which,the,a,better,master,a,higher,cluster,state,version,is,better,return,1,if,c1,is,a,batter,candidate,1,if,c2;public,static,int,compare,master,candidate,c1,master,candidate,c2,int,ret,long,compare,c2,cluster,state,version,c1,cluster,state,version,if,ret,0,ret,compare,nodes,c1,get,node,c2,get,node,return,ret
ElectMasterService -> MasterCandidate -> public static int compare(MasterCandidate c1, MasterCandidate c2);1542402632;compares two candidates to indicate which the a better master._A higher cluster state version is better__@return -1 if c1 is a batter candidate, 1 if c2.;public static int compare(MasterCandidate c1, MasterCandidate c2) {_            _            _            int ret = Long.compare(c2.clusterStateVersion, c1.clusterStateVersion)__            if (ret == 0) {_                ret = compareNodes(c1.getNode(), c2.getNode())__            }_            return ret__        };compares,two,candidates,to,indicate,which,the,a,better,master,a,higher,cluster,state,version,is,better,return,1,if,c1,is,a,batter,candidate,1,if,c2;public,static,int,compare,master,candidate,c1,master,candidate,c2,int,ret,long,compare,c2,cluster,state,version,c1,cluster,state,version,if,ret,0,ret,compare,nodes,c1,get,node,c2,get,node,return,ret
ElectMasterService -> MasterCandidate -> public static int compare(MasterCandidate c1, MasterCandidate c2);1544437584;compares two candidates to indicate which the a better master._A higher cluster state version is better__@return -1 if c1 is a batter candidate, 1 if c2.;public static int compare(MasterCandidate c1, MasterCandidate c2) {_            _            _            int ret = Long.compare(c2.clusterStateVersion, c1.clusterStateVersion)__            if (ret == 0) {_                ret = compareNodes(c1.getNode(), c2.getNode())__            }_            return ret__        };compares,two,candidates,to,indicate,which,the,a,better,master,a,higher,cluster,state,version,is,better,return,1,if,c1,is,a,batter,candidate,1,if,c2;public,static,int,compare,master,candidate,c1,master,candidate,c2,int,ret,long,compare,c2,cluster,state,version,c1,cluster,state,version,if,ret,0,ret,compare,nodes,c1,get,node,c2,get,node,return,ret
ElectMasterService -> MasterCandidate -> public static int compare(MasterCandidate c1, MasterCandidate c2);1548878955;compares two candidates to indicate which the a better master._A higher cluster state version is better__@return -1 if c1 is a batter candidate, 1 if c2.;public static int compare(MasterCandidate c1, MasterCandidate c2) {_            _            _            int ret = Long.compare(c2.clusterStateVersion, c1.clusterStateVersion)__            if (ret == 0) {_                ret = compareNodes(c1.getNode(), c2.getNode())__            }_            return ret__        };compares,two,candidates,to,indicate,which,the,a,better,master,a,higher,cluster,state,version,is,better,return,1,if,c1,is,a,batter,candidate,1,if,c2;public,static,int,compare,master,candidate,c1,master,candidate,c2,int,ret,long,compare,c2,cluster,state,version,c1,cluster,state,version,if,ret,0,ret,compare,nodes,c1,get,node,c2,get,node,return,ret
ElectMasterService -> public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters);1524684173;selects the best active master to join, where multiple are discovered;public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters) {_        return activeMasters.stream().min(ElectMasterService::compareNodes).get()__    };selects,the,best,active,master,to,join,where,multiple,are,discovered;public,discovery,node,tie,break,active,masters,collection,discovery,node,active,masters,return,active,masters,stream,min,elect,master,service,compare,nodes,get
ElectMasterService -> public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters);1525334055;selects the best active master to join, where multiple are discovered;public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters) {_        return activeMasters.stream().min(ElectMasterService::compareNodes).get()__    };selects,the,best,active,master,to,join,where,multiple,are,discovered;public,discovery,node,tie,break,active,masters,collection,discovery,node,active,masters,return,active,masters,stream,min,elect,master,service,compare,nodes,get
ElectMasterService -> public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters);1541092382;selects the best active master to join, where multiple are discovered;public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters) {_        return activeMasters.stream().min(ElectMasterService::compareNodes).get()__    };selects,the,best,active,master,to,join,where,multiple,are,discovered;public,discovery,node,tie,break,active,masters,collection,discovery,node,active,masters,return,active,masters,stream,min,elect,master,service,compare,nodes,get
ElectMasterService -> public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters);1542402632;selects the best active master to join, where multiple are discovered;public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters) {_        return activeMasters.stream().min(ElectMasterService::compareNodes).get()__    };selects,the,best,active,master,to,join,where,multiple,are,discovered;public,discovery,node,tie,break,active,masters,collection,discovery,node,active,masters,return,active,masters,stream,min,elect,master,service,compare,nodes,get
ElectMasterService -> public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters);1544437584;selects the best active master to join, where multiple are discovered;public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters) {_        return activeMasters.stream().min(ElectMasterService::compareNodes).get()__    };selects,the,best,active,master,to,join,where,multiple,are,discovered;public,discovery,node,tie,break,active,masters,collection,discovery,node,active,masters,return,active,masters,stream,min,elect,master,service,compare,nodes,get
ElectMasterService -> public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters);1548878955;selects the best active master to join, where multiple are discovered;public DiscoveryNode tieBreakActiveMasters(Collection<DiscoveryNode> activeMasters) {_        return activeMasters.stream().min(ElectMasterService::compareNodes).get()__    };selects,the,best,active,master,to,join,where,multiple,are,discovered;public,discovery,node,tie,break,active,masters,collection,discovery,node,active,masters,return,active,masters,stream,min,elect,master,service,compare,nodes,get
ElectMasterService -> public MasterCandidate electMaster(Collection<MasterCandidate> candidates);1524684173;Elects a new master out of the possible nodes, returning it. Returns <tt>null</tt>_if no master has been elected.;public MasterCandidate electMaster(Collection<MasterCandidate> candidates) {_        assert hasEnoughCandidates(candidates)__        List<MasterCandidate> sortedCandidates = new ArrayList<>(candidates)__        sortedCandidates.sort(MasterCandidate::compare)__        return sortedCandidates.get(0)__    };elects,a,new,master,out,of,the,possible,nodes,returning,it,returns,tt,null,tt,if,no,master,has,been,elected;public,master,candidate,elect,master,collection,master,candidate,candidates,assert,has,enough,candidates,candidates,list,master,candidate,sorted,candidates,new,array,list,candidates,sorted,candidates,sort,master,candidate,compare,return,sorted,candidates,get,0
ElectMasterService -> public MasterCandidate electMaster(Collection<MasterCandidate> candidates);1525334055;Elects a new master out of the possible nodes, returning it. Returns {@code null}_if no master has been elected.;public MasterCandidate electMaster(Collection<MasterCandidate> candidates) {_        assert hasEnoughCandidates(candidates)__        List<MasterCandidate> sortedCandidates = new ArrayList<>(candidates)__        sortedCandidates.sort(MasterCandidate::compare)__        return sortedCandidates.get(0)__    };elects,a,new,master,out,of,the,possible,nodes,returning,it,returns,code,null,if,no,master,has,been,elected;public,master,candidate,elect,master,collection,master,candidate,candidates,assert,has,enough,candidates,candidates,list,master,candidate,sorted,candidates,new,array,list,candidates,sorted,candidates,sort,master,candidate,compare,return,sorted,candidates,get,0
ElectMasterService -> public MasterCandidate electMaster(Collection<MasterCandidate> candidates);1541092382;Elects a new master out of the possible nodes, returning it. Returns {@code null}_if no master has been elected.;public MasterCandidate electMaster(Collection<MasterCandidate> candidates) {_        assert hasEnoughCandidates(candidates)__        List<MasterCandidate> sortedCandidates = new ArrayList<>(candidates)__        sortedCandidates.sort(MasterCandidate::compare)__        return sortedCandidates.get(0)__    };elects,a,new,master,out,of,the,possible,nodes,returning,it,returns,code,null,if,no,master,has,been,elected;public,master,candidate,elect,master,collection,master,candidate,candidates,assert,has,enough,candidates,candidates,list,master,candidate,sorted,candidates,new,array,list,candidates,sorted,candidates,sort,master,candidate,compare,return,sorted,candidates,get,0
ElectMasterService -> public MasterCandidate electMaster(Collection<MasterCandidate> candidates);1542402632;Elects a new master out of the possible nodes, returning it. Returns {@code null}_if no master has been elected.;public MasterCandidate electMaster(Collection<MasterCandidate> candidates) {_        assert hasEnoughCandidates(candidates)__        List<MasterCandidate> sortedCandidates = new ArrayList<>(candidates)__        sortedCandidates.sort(MasterCandidate::compare)__        return sortedCandidates.get(0)__    };elects,a,new,master,out,of,the,possible,nodes,returning,it,returns,code,null,if,no,master,has,been,elected;public,master,candidate,elect,master,collection,master,candidate,candidates,assert,has,enough,candidates,candidates,list,master,candidate,sorted,candidates,new,array,list,candidates,sorted,candidates,sort,master,candidate,compare,return,sorted,candidates,get,0
ElectMasterService -> public MasterCandidate electMaster(Collection<MasterCandidate> candidates);1544437584;Elects a new master out of the possible nodes, returning it. Returns {@code null}_if no master has been elected.;public MasterCandidate electMaster(Collection<MasterCandidate> candidates) {_        assert hasEnoughCandidates(candidates)__        List<MasterCandidate> sortedCandidates = new ArrayList<>(candidates)__        sortedCandidates.sort(MasterCandidate::compare)__        return sortedCandidates.get(0)__    };elects,a,new,master,out,of,the,possible,nodes,returning,it,returns,code,null,if,no,master,has,been,elected;public,master,candidate,elect,master,collection,master,candidate,candidates,assert,has,enough,candidates,candidates,list,master,candidate,sorted,candidates,new,array,list,candidates,sorted,candidates,sort,master,candidate,compare,return,sorted,candidates,get,0
ElectMasterService -> public MasterCandidate electMaster(Collection<MasterCandidate> candidates);1548878955;Elects a new master out of the possible nodes, returning it. Returns {@code null}_if no master has been elected.;public MasterCandidate electMaster(Collection<MasterCandidate> candidates) {_        assert hasEnoughCandidates(candidates)__        List<MasterCandidate> sortedCandidates = new ArrayList<>(candidates)__        sortedCandidates.sort(MasterCandidate::compare)__        return sortedCandidates.get(0)__    };elects,a,new,master,out,of,the,possible,nodes,returning,it,returns,code,null,if,no,master,has,been,elected;public,master,candidate,elect,master,collection,master,candidate,candidates,assert,has,enough,candidates,candidates,list,master,candidate,sorted,candidates,new,array,list,candidates,sorted,candidates,sort,master,candidate,compare,return,sorted,candidates,get,0
