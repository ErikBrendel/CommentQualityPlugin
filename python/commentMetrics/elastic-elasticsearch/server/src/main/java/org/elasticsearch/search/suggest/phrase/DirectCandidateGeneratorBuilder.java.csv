commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(field).     out.writeOptionalString(suggestMode).     out.writeOptionalFloat(accuracy).     out.writeOptionalVInt(size).     out.writeOptionalString(sort).     out.writeOptionalString(stringDistance).     out.writeOptionalVInt(maxEdits).     out.writeOptionalVInt(maxInspections).     out.writeOptionalFloat(maxTermFreq).     out.writeOptionalVInt(prefixLength).     out.writeOptionalVInt(minWordLength).     out.writeOptionalFloat(minDocFreq).     out.writeOptionalString(preFilter).     out.writeOptionalString(postFilter). }
false;;0;3;;String field() {     return this.field. }
true;public;1;4;/**  * The global suggest mode controls what suggested terms are included or  * controls for what suggest text tokens, terms should be suggested for.  * Three possible values can be specified:  * <ol>  * <li><code>missing</code> - Only suggest terms in the suggest text  * that aren't in the index. This is the default.  * <li><code>popular</code> - Only suggest terms that occur in more docs  * then the original suggest text term.  * <li><code>always</code> - Suggest any matching suggest terms based on  * tokens in the suggest text.  * </ol>  */ ;/**  * The global suggest mode controls what suggested terms are included or  * controls for what suggest text tokens, terms should be suggested for.  * Three possible values can be specified:  * <ol>  * <li><code>missing</code> - Only suggest terms in the suggest text  * that aren't in the index. This is the default.  * <li><code>popular</code> - Only suggest terms that occur in more docs  * then the original suggest text term.  * <li><code>always</code> - Suggest any matching suggest terms based on  * tokens in the suggest text.  * </ol>  */ public DirectCandidateGeneratorBuilder suggestMode(String suggestMode) {     this.suggestMode = suggestMode.     return this. }
false;;0;3;;String suggestMode() {     return suggestMode. }
true;public;1;4;/**  * Sets how similar the suggested terms at least need to be compared to  * the original suggest text tokens. A value between 0 and 1 can be  * specified. This value will be compared to the string distance result  * of each candidate spelling correction.  * <p>  * Default is {@code 0.5}  */ ;/**  * Sets how similar the suggested terms at least need to be compared to  * the original suggest text tokens. A value between 0 and 1 can be  * specified. This value will be compared to the string distance result  * of each candidate spelling correction.  * <p>  * Default is {@code 0.5}  */ public DirectCandidateGeneratorBuilder accuracy(float accuracy) {     this.accuracy = accuracy.     return this. }
false;;0;3;;Float accuracy() {     return this.accuracy. }
true;public;1;7;/**  * Sets the maximum suggestions to be returned per suggest text term.  */ ;/**  * Sets the maximum suggestions to be returned per suggest text term.  */ public DirectCandidateGeneratorBuilder size(int size) {     if (size <= 0) {         throw new IllegalArgumentException("Size must be positive").     }     this.size = size.     return this. }
false;;0;3;;Integer size() {     return size. }
true;public;1;4;/**  * Sets how to sort the suggest terms per suggest text token. Two  * possible values:  * <ol>  * <li><code>score</code> - Sort should first be based on score, then  * document frequency and then the term itself.  * <li><code>frequency</code> - Sort should first be based on document  * frequency, then score and then the term itself.  * </ol>  * <p>  * What the score is depends on the suggester being used.  */ ;/**  * Sets how to sort the suggest terms per suggest text token. Two  * possible values:  * <ol>  * <li><code>score</code> - Sort should first be based on score, then  * document frequency and then the term itself.  * <li><code>frequency</code> - Sort should first be based on document  * frequency, then score and then the term itself.  * </ol>  * <p>  * What the score is depends on the suggester being used.  */ public DirectCandidateGeneratorBuilder sort(String sort) {     this.sort = sort.     return this. }
false;;0;3;;String sort() {     return sort. }
true;public;1;4;/**  * Sets what string distance implementation to use for comparing how  * similar suggested terms are. Four possible values can be specified:  * <ol>  * <li><code>internal</code> - This is the default and is based on  * <code>damerau_levenshtein</code>, but highly optimized for comparing  * string distance for terms inside the index.  * <li><code>damerau_levenshtein</code> - String distance algorithm  * based on Damerau-Levenshtein algorithm.  * <li><code>levenshtein</code> - String distance algorithm based on  * Levenshtein edit distance algorithm.  * <li><code>jaro_winkler</code> - String distance algorithm based on  * Jaro-Winkler algorithm.  * <li><code>ngram</code> - String distance algorithm based on character  * n-grams.  * </ol>  */ ;/**  * Sets what string distance implementation to use for comparing how  * similar suggested terms are. Four possible values can be specified:  * <ol>  * <li><code>internal</code> - This is the default and is based on  * <code>damerau_levenshtein</code>, but highly optimized for comparing  * string distance for terms inside the index.  * <li><code>damerau_levenshtein</code> - String distance algorithm  * based on Damerau-Levenshtein algorithm.  * <li><code>levenshtein</code> - String distance algorithm based on  * Levenshtein edit distance algorithm.  * <li><code>jaro_winkler</code> - String distance algorithm based on  * Jaro-Winkler algorithm.  * <li><code>ngram</code> - String distance algorithm based on character  * n-grams.  * </ol>  */ public DirectCandidateGeneratorBuilder stringDistance(String stringDistance) {     this.stringDistance = stringDistance.     return this. }
false;;0;3;;String stringDistance() {     return stringDistance. }
true;public;1;7;/**  * Sets the maximum edit distance candidate suggestions can have in  * order to be considered as a suggestion. Can only be a value between 1  * and 2. Any other value result in an bad request error being thrown.  * Defaults to {@code 2}.  */ ;/**  * Sets the maximum edit distance candidate suggestions can have in  * order to be considered as a suggestion. Can only be a value between 1  * and 2. Any other value result in an bad request error being thrown.  * Defaults to {@code 2}.  */ public DirectCandidateGeneratorBuilder maxEdits(Integer maxEdits) {     if (maxEdits < 1 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {         throw new IllegalArgumentException("Illegal max_edits value " + maxEdits).     }     this.maxEdits = maxEdits.     return this. }
false;;0;3;;Integer maxEdits() {     return maxEdits. }
true;public;1;4;/**  * A factor that is used to multiply with the size in order to inspect  * more candidate suggestions. Can improve accuracy at the cost of  * performance. Defaults to {@code 5}.  */ ;/**  * A factor that is used to multiply with the size in order to inspect  * more candidate suggestions. Can improve accuracy at the cost of  * performance. Defaults to {@code 5}.  */ public DirectCandidateGeneratorBuilder maxInspections(Integer maxInspections) {     this.maxInspections = maxInspections.     return this. }
false;;0;3;;Integer maxInspections() {     return maxInspections. }
true;public;1;4;/**  * Sets a maximum threshold in number of documents a suggest text token  * can exist in order to be corrected. Can be a relative percentage  * number (e.g 0.4) or an absolute number to represent document  * frequencies. If an value higher than 1 is specified then fractional  * can not be specified. Defaults to {@code 0.01}.  * <p>  * This can be used to exclude high frequency terms from being  * suggested. High frequency terms are usually spelled correctly on top  * of this this also improves the suggest performance.  */ ;/**  * Sets a maximum threshold in number of documents a suggest text token  * can exist in order to be corrected. Can be a relative percentage  * number (e.g 0.4) or an absolute number to represent document  * frequencies. If an value higher than 1 is specified then fractional  * can not be specified. Defaults to {@code 0.01}.  * <p>  * This can be used to exclude high frequency terms from being  * suggested. High frequency terms are usually spelled correctly on top  * of this this also improves the suggest performance.  */ public DirectCandidateGeneratorBuilder maxTermFreq(float maxTermFreq) {     this.maxTermFreq = maxTermFreq.     return this. }
false;;0;3;;Float maxTermFreq() {     return maxTermFreq. }
true;public;1;4;/**  * Sets the number of minimal prefix characters that must match in order  * be a candidate suggestion. Defaults to 1. Increasing this number  * improves suggest performance. Usually misspellings don't occur in the  * beginning of terms.  */ ;/**  * Sets the number of minimal prefix characters that must match in order  * be a candidate suggestion. Defaults to 1. Increasing this number  * improves suggest performance. Usually misspellings don't occur in the  * beginning of terms.  */ public DirectCandidateGeneratorBuilder prefixLength(int prefixLength) {     this.prefixLength = prefixLength.     return this. }
false;;0;3;;Integer prefixLength() {     return prefixLength. }
true;public;1;4;/**  * The minimum length a suggest text term must have in order to be  * corrected. Defaults to {@code 4}.  */ ;/**  * The minimum length a suggest text term must have in order to be  * corrected. Defaults to {@code 4}.  */ public DirectCandidateGeneratorBuilder minWordLength(int minWordLength) {     this.minWordLength = minWordLength.     return this. }
false;;0;3;;Integer minWordLength() {     return minWordLength. }
true;public;1;4;/**  * Sets a minimal threshold in number of documents a suggested term  * should appear in. This can be specified as an absolute number or as a  * relative percentage of number of documents. This can improve quality  * by only suggesting high frequency terms. Defaults to 0f and is not  * enabled. If a value higher than 1 is specified then the number cannot  * be fractional.  */ ;/**  * Sets a minimal threshold in number of documents a suggested term  * should appear in. This can be specified as an absolute number or as a  * relative percentage of number of documents. This can improve quality  * by only suggesting high frequency terms. Defaults to 0f and is not  * enabled. If a value higher than 1 is specified then the number cannot  * be fractional.  */ public DirectCandidateGeneratorBuilder minDocFreq(float minDocFreq) {     this.minDocFreq = minDocFreq.     return this. }
false;;0;3;;Float minDocFreq() {     return minDocFreq. }
true;public;1;4;/**  * Sets a filter (analyzer) that is applied to each of the tokens passed to this candidate generator.  * This filter is applied to the original token before candidates are generated.  */ ;/**  * Sets a filter (analyzer) that is applied to each of the tokens passed to this candidate generator.  * This filter is applied to the original token before candidates are generated.  */ public DirectCandidateGeneratorBuilder preFilter(String preFilter) {     this.preFilter = preFilter.     return this. }
false;;0;3;;String preFilter() {     return preFilter. }
true;public;1;4;/**  * Sets a filter (analyzer) that is applied to each of the generated tokens  * before they are passed to the actual phrase scorer.  */ ;/**  * Sets a filter (analyzer) that is applied to each of the generated tokens  * before they are passed to the actual phrase scorer.  */ public DirectCandidateGeneratorBuilder postFilter(String postFilter) {     this.postFilter = postFilter.     return this. }
false;;0;3;;String postFilter() {     return postFilter. }
true;public;0;4;/**  * gets the type identifier of this {@link CandidateGenerator}  */ ;/**  * gets the type identifier of this {@link CandidateGenerator}  */ @Override public String getType() {     return TYPE. }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     outputFieldIfNotNull(field, FIELDNAME_FIELD, builder).     outputFieldIfNotNull(accuracy, ACCURACY_FIELD, builder).     outputFieldIfNotNull(maxEdits, MAX_EDITS_FIELD, builder).     outputFieldIfNotNull(maxInspections, MAX_INSPECTIONS_FIELD, builder).     outputFieldIfNotNull(maxTermFreq, MAX_TERM_FREQ_FIELD, builder).     outputFieldIfNotNull(minWordLength, MIN_WORD_LENGTH_FIELD, builder).     outputFieldIfNotNull(minDocFreq, MIN_DOC_FREQ_FIELD, builder).     outputFieldIfNotNull(preFilter, PREFILTER_FIELD, builder).     outputFieldIfNotNull(prefixLength, PREFIX_LENGTH_FIELD, builder).     outputFieldIfNotNull(postFilter, POSTFILTER_FIELD, builder).     outputFieldIfNotNull(suggestMode, SUGGESTMODE_FIELD, builder).     outputFieldIfNotNull(size, SIZE_FIELD, builder).     outputFieldIfNotNull(sort, SORT_FIELD, builder).     outputFieldIfNotNull(stringDistance, STRING_DISTANCE_FIELD, builder).     builder.endObject().     return builder. }
false;private,static;3;5;;private static <T> void outputFieldIfNotNull(T value, ParseField field, XContentBuilder builder) throws IOException {     if (value != null) {         builder.field(field.getPreferredName(), value).     } }
false;public;1;38;;@Override public PhraseSuggestionContext.DirectCandidateGenerator build(MapperService mapperService) throws IOException {     PhraseSuggestionContext.DirectCandidateGenerator generator = new PhraseSuggestionContext.DirectCandidateGenerator().     generator.setField(this.field).     transferIfNotNull(this.size, generator::size).     if (this.preFilter != null) {         generator.preFilter(mapperService.getNamedAnalyzer(this.preFilter)).         if (generator.preFilter() == null) {             throw new IllegalArgumentException("Analyzer [" + this.preFilter + "] doesn't exists").         }     }     if (this.postFilter != null) {         generator.postFilter(mapperService.getNamedAnalyzer(this.postFilter)).         if (generator.postFilter() == null) {             throw new IllegalArgumentException("Analyzer [" + this.postFilter + "] doesn't exists").         }     }     transferIfNotNull(this.accuracy, generator::accuracy).     if (this.suggestMode != null) {         generator.suggestMode(resolveSuggestMode(this.suggestMode)).     }     if (this.sort != null) {         generator.sort(SortBy.resolve(this.sort)).     }     if (this.stringDistance != null) {         generator.stringDistance(resolveDistance(this.stringDistance)).     }     transferIfNotNull(this.maxEdits, generator::maxEdits).     if (generator.maxEdits() < 1 || generator.maxEdits() > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {         throw new IllegalArgumentException("Illegal max_edits value " + generator.maxEdits()).     }     transferIfNotNull(this.maxInspections, generator::maxInspections).     transferIfNotNull(this.maxTermFreq, generator::maxTermFreq).     transferIfNotNull(this.prefixLength, generator::prefixLength).     transferIfNotNull(this.minWordLength, generator::minWordLength).     transferIfNotNull(this.minDocFreq, generator::minDocFreq).     return generator. }
false;private,static;1;12;;private static SuggestMode resolveSuggestMode(String suggestMode) {     suggestMode = suggestMode.toLowerCase(Locale.US).     if ("missing".equals(suggestMode)) {         return SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX.     } else if ("popular".equals(suggestMode)) {         return SuggestMode.SUGGEST_MORE_POPULAR.     } else if ("always".equals(suggestMode)) {         return SuggestMode.SUGGEST_ALWAYS.     } else {         throw new IllegalArgumentException("Illegal suggest mode " + suggestMode).     } }
false;static;1;16;;static StringDistance resolveDistance(String distanceVal) {     distanceVal = distanceVal.toLowerCase(Locale.ROOT).     if ("internal".equals(distanceVal)) {         return DirectSpellChecker.INTERNAL_LEVENSHTEIN.     } else if ("damerau_levenshtein".equals(distanceVal)) {         return new LuceneLevenshteinDistance().     } else if ("levenshtein".equals(distanceVal)) {         return new LevenshteinDistance().     } else if ("jaro_winkler".equals(distanceVal)) {         return new JaroWinklerDistance().     } else if ("ngram".equals(distanceVal)) {         return new NGramDistance().     } else {         throw new IllegalArgumentException("Illegal distance option " + distanceVal).     } }
false;private,static;2;5;;private static <T> void transferIfNotNull(T value, Consumer<T> consumer) {     if (value != null) {         consumer.accept(value).     } }
false;public;0;11;;@Override public String toString() {     try {         XContentBuilder builder = XContentFactory.jsonBuilder().         builder.prettyPrint().         toXContent(builder, EMPTY_PARAMS).         return Strings.toString(builder).     } catch (Exception e) {         return "{ \"error\" : \"" + ExceptionsHelper.detailedMessage(e) + "\"}".     } }
false;public;0;6;;@Override public int hashCode() {     return Objects.hash(field, preFilter, postFilter, suggestMode, accuracy, size, sort, stringDistance, maxEdits, maxInspections, maxTermFreq, prefixLength, minWordLength, minDocFreq). }
false;public;1;24;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     DirectCandidateGeneratorBuilder other = (DirectCandidateGeneratorBuilder) obj.     return Objects.equals(field, other.field) && Objects.equals(preFilter, other.preFilter) && Objects.equals(postFilter, other.postFilter) && Objects.equals(suggestMode, other.suggestMode) && Objects.equals(accuracy, other.accuracy) && Objects.equals(size, other.size) && Objects.equals(sort, other.sort) && Objects.equals(stringDistance, other.stringDistance) && Objects.equals(maxEdits, other.maxEdits) && Objects.equals(maxInspections, other.maxInspections) && Objects.equals(maxTermFreq, other.maxTermFreq) && Objects.equals(prefixLength, other.prefixLength) && Objects.equals(minWordLength, other.minWordLength) && Objects.equals(minDocFreq, other.minDocFreq). }
