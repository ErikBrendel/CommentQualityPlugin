commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "document_delete_action". }
false;public;2;25;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     DeleteRequest deleteRequest.     if (request.hasParam("type")) {         deprecationLogger.deprecatedAndMaybeLog("delete_with_types", TYPES_DEPRECATION_MESSAGE).         deleteRequest = new DeleteRequest(request.param("index"), request.param("type"), request.param("id")).     } else {         deleteRequest = new DeleteRequest(request.param("index"), request.param("id")).     }     deleteRequest.routing(request.param("routing")).     deleteRequest.timeout(request.paramAsTime("timeout", DeleteRequest.DEFAULT_TIMEOUT)).     deleteRequest.setRefreshPolicy(request.param("refresh")).     deleteRequest.version(RestActions.parseVersion(request)).     deleteRequest.versionType(VersionType.fromString(request.param("version_type"), deleteRequest.versionType())).     deleteRequest.setIfSeqNo(request.paramAsLong("if_seq_no", deleteRequest.ifSeqNo())).     deleteRequest.setIfPrimaryTerm(request.paramAsLong("if_primary_term", deleteRequest.ifPrimaryTerm())).     String waitForActiveShards = request.param("wait_for_active_shards").     if (waitForActiveShards != null) {         deleteRequest.waitForActiveShards(ActiveShardCount.parseString(waitForActiveShards)).     }     return channel -> client.delete(deleteRequest, new RestStatusToXContentListener<>(channel)). }
