# id;timestamp;commentText;codeText;commentWords;codeWords
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              boolean trackTotalHits, boolean hasFilterCollector) throws IOException;1524684173;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             boolean trackTotalHits, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHits) {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    this.collector = hitCountCollector__                    this.hitCountSupplier = hitCountCollector::getTotalHits__                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> hitCount__                }_            } else {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> 0__            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,this,collector,hit,count,collector,this,hit,count,supplier,hit,count,collector,get,total,hits,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,hit,count,else,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,0
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              boolean trackTotalHits, boolean hasFilterCollector) throws IOException;1528762805;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             boolean trackTotalHits, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHits) {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    this.collector = hitCountCollector__                    this.hitCountSupplier = hitCountCollector::getTotalHits__                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> hitCount__                }_            } else {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> 0__            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,this,collector,hit,count,collector,this,hit,count,supplier,hit,count,collector,get,total,hits,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,hit,count,else,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,0
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              boolean trackTotalHits, boolean hasFilterCollector) throws IOException;1535046779;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             boolean trackTotalHits, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHits) {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    this.collector = hitCountCollector__                    this.hitCountSupplier = hitCountCollector::getTotalHits__                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> hitCount__                }_            } else {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> 0__            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,this,collector,hit,count,collector,this,hit,count,supplier,hit,count,collector,get,total,hits,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,hit,count,else,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,0
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              boolean trackTotalHits, boolean hasFilterCollector) throws IOException;1536314350;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             boolean trackTotalHits, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHits) {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    this.collector = hitCountCollector__                    this.hitCountSupplier = () -> new TotalHits(hitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO)__                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            } else {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,this,collector,hit,count,collector,this,hit,count,supplier,new,total,hits,hit,count,collector,get,total,hits,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation,else,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,0,total,hits,relation
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              boolean trackTotalHits, boolean hasFilterCollector) throws IOException;1536964057;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             boolean trackTotalHits, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHits) {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    this.collector = hitCountCollector__                    this.hitCountSupplier = () -> new TotalHits(hitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO)__                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            } else {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,this,collector,hit,count,collector,this,hit,count,supplier,new,total,hits,hit,count,collector,get,total,hits,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation,else,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,0,total,hits,relation
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1524684173;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(),_                searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                                                     searchContext.trackScores(), searchContext.trackTotalHits(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,has,filter,collector,else,if,search,context,scroll,context,null,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,search,context,track,total,hits,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1528762805;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(),_                searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                                                     searchContext.trackScores(), searchContext.trackTotalHits(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,has,filter,collector,else,if,search,context,scroll,context,null,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,search,context,track,total,hits,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1535046779;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(),_                searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                                                     searchContext.trackScores(), searchContext.trackTotalHits(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,has,filter,collector,else,if,search,context,scroll,context,null,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,search,context,track,total,hits,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1536314350;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(), searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                                                     searchContext.trackScores(), searchContext.trackTotalHits(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,has,filter,collector,else,if,search,context,scroll,context,null,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,search,context,track,total,hits,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1536964057;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                searchContext.trackTotalHits(), hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(), searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                                                     searchContext.trackScores(), searchContext.trackTotalHits(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,has,filter,collector,else,if,search,context,scroll,context,null,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,search,context,track,total,hits,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1546630609;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHitsUpTo(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            _            int trackTotalHitsUpTo = searchContext.scrollContext().totalHits != null ?_                SearchContext.TRACK_TOTAL_HITS_DISABLED : searchContext.trackTotalHitsUpTo()__            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                trackTotalHitsUpTo, hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(), searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                searchContext.trackScores(), searchContext.trackTotalHitsUpTo(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,up,to,has,filter,collector,else,if,search,context,scroll,context,null,int,track,total,hits,up,to,search,context,scroll,context,total,hits,null,search,context,search,context,track,total,hits,up,to,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,track,total,hits,up,to,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,up,to,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1546950713;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHitsUpTo(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            _            int trackTotalHitsUpTo = searchContext.scrollContext().totalHits != null ?_                SearchContext.TRACK_TOTAL_HITS_DISABLED : SearchContext.TRACK_TOTAL_HITS_ACCURATE__            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                trackTotalHitsUpTo, hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(), searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                searchContext.trackScores(), searchContext.trackTotalHitsUpTo(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,up,to,has,filter,collector,else,if,search,context,scroll,context,null,int,track,total,hits,up,to,search,context,scroll,context,total,hits,null,search,context,search,context,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,track,total,hits,up,to,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,up,to,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1547071054;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHitsUpTo(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            _            int trackTotalHitsUpTo = searchContext.scrollContext().totalHits != null ?_                SearchContext.TRACK_TOTAL_HITS_DISABLED : SearchContext.TRACK_TOTAL_HITS_ACCURATE__            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                trackTotalHitsUpTo, hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(), searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                searchContext.trackScores(), searchContext.trackTotalHitsUpTo(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,up,to,has,filter,collector,else,if,search,context,scroll,context,null,int,track,total,hits,up,to,search,context,scroll,context,total,hits,null,search,context,search,context,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,track,total,hits,up,to,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,up,to,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1547076415;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHitsUpTo(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            _            int trackTotalHitsUpTo = searchContext.scrollContext().totalHits != null ?_                SearchContext.TRACK_TOTAL_HITS_DISABLED : SearchContext.TRACK_TOTAL_HITS_ACCURATE__            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                trackTotalHitsUpTo, hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(), searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                searchContext.trackScores(), searchContext.trackTotalHitsUpTo(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,up,to,has,filter,collector,else,if,search,context,scroll,context,null,int,track,total,hits,up,to,search,context,scroll,context,total,hits,null,search,context,search,context,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,track,total,hits,up,to,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,up,to,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,                                                                  IndexReader reader,                                                                  boolean hasFilterCollector) throws IOException;1548420339;Creates a {@link TopDocsCollectorContext} from the provided <code>searchContext</code>._@param hasFilterCollector True if the collector chain contains at least one collector that can filters document.;static TopDocsCollectorContext createTopDocsCollectorContext(SearchContext searchContext,_                                                                 IndexReader reader,_                                                                 boolean hasFilterCollector) throws IOException {_        final Query query = searchContext.query()__        _        final int totalNumDocs = Math.max(1, reader.numDocs())__        if (searchContext.size() == 0) {_            _            return new EmptyTopDocsCollectorContext(reader, query, searchContext.trackTotalHitsUpTo(), hasFilterCollector)__        } else if (searchContext.scrollContext() != null) {_            _            _            int trackTotalHitsUpTo = searchContext.scrollContext().totalHits != null ?_                SearchContext.TRACK_TOTAL_HITS_DISABLED : SearchContext.TRACK_TOTAL_HITS_ACCURATE__            _            int numDocs = Math.min(searchContext.size(), totalNumDocs)__            return new ScrollingTopDocsCollectorContext(reader, query, searchContext.scrollContext(),_                searchContext.sort(), numDocs, searchContext.trackScores(), searchContext.numberOfShards(),_                trackTotalHitsUpTo, hasFilterCollector)__        } else if (searchContext.collapse() != null) {_            boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores()__            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            return new CollapsingTopDocsCollectorContext(searchContext.collapse(), searchContext.sort(), numDocs, trackScores)__        } else {_            int numDocs = Math.min(searchContext.from() + searchContext.size(), totalNumDocs)__            final boolean rescore = searchContext.rescore().isEmpty() == false__            if (rescore) {_                assert searchContext.sort() == null__                for (RescoreContext rescoreContext : searchContext.rescore()) {_                    numDocs = Math.max(numDocs, rescoreContext.getWindowSize())__                }_            }_            return new SimpleTopDocsCollectorContext(reader, query, searchContext.sort(), searchContext.searchAfter(), numDocs,_                searchContext.trackScores(), searchContext.trackTotalHitsUpTo(), hasFilterCollector) {_                @Override_                boolean shouldRescore() {_                    return rescore__                }_            }__        }_    };creates,a,link,top,docs,collector,context,from,the,provided,code,search,context,code,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;static,top,docs,collector,context,create,top,docs,collector,context,search,context,search,context,index,reader,reader,boolean,has,filter,collector,throws,ioexception,final,query,query,search,context,query,final,int,total,num,docs,math,max,1,reader,num,docs,if,search,context,size,0,return,new,empty,top,docs,collector,context,reader,query,search,context,track,total,hits,up,to,has,filter,collector,else,if,search,context,scroll,context,null,int,track,total,hits,up,to,search,context,scroll,context,total,hits,null,search,context,search,context,int,num,docs,math,min,search,context,size,total,num,docs,return,new,scrolling,top,docs,collector,context,reader,query,search,context,scroll,context,search,context,sort,num,docs,search,context,track,scores,search,context,number,of,shards,track,total,hits,up,to,has,filter,collector,else,if,search,context,collapse,null,boolean,track,scores,search,context,sort,null,true,search,context,track,scores,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,return,new,collapsing,top,docs,collector,context,search,context,collapse,search,context,sort,num,docs,track,scores,else,int,num,docs,math,min,search,context,from,search,context,size,total,num,docs,final,boolean,rescore,search,context,rescore,is,empty,false,if,rescore,assert,search,context,sort,null,for,rescore,context,rescore,context,search,context,rescore,num,docs,math,max,num,docs,rescore,context,get,window,size,return,new,simple,top,docs,collector,context,reader,query,search,context,sort,search,context,search,after,num,docs,search,context,track,scores,search,context,track,total,hits,up,to,has,filter,collector,override,boolean,should,rescore,return,rescore
TopDocsCollectorContext -> boolean shouldRescore();1524684173;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1528762805;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1535046779;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1536314350;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1536964057;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1546630609;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1546950713;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1547071054;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1547076415;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> boolean shouldRescore();1548420339;Returns true if the top docs should be re-scored after initial search;boolean shouldRescore() {_        return false__    };returns,true,if,the,top,docs,should,be,re,scored,after,initial,search;boolean,should,rescore,return,false
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException;1546630609;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_ACCURATE) {_                        this.collector = hitCountCollector__                        this.hitCountSupplier = () -> new TotalHits(hitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO)__                    } else {_                        this.collector = new EarlyTerminatingCollector(hitCountCollector, trackTotalHitsUpTo, false)__                        this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                    }_                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,up,to,search,context,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,0,total,hits,relation,else,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,if,track,total,hits,up,to,search,context,this,collector,hit,count,collector,this,hit,count,supplier,new,total,hits,hit,count,collector,get,total,hits,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,track,total,hits,up,to,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException;1546950713;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_ACCURATE) {_                        this.collector = hitCountCollector__                        this.hitCountSupplier = () -> new TotalHits(hitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO)__                    } else {_                        this.collector = new EarlyTerminatingCollector(hitCountCollector, trackTotalHitsUpTo, false)__                        this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                    }_                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,up,to,search,context,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,0,total,hits,relation,else,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,if,track,total,hits,up,to,search,context,this,collector,hit,count,collector,this,hit,count,supplier,new,total,hits,hit,count,collector,get,total,hits,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,track,total,hits,up,to,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException;1547071054;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_ACCURATE) {_                        this.collector = hitCountCollector__                        this.hitCountSupplier = () -> new TotalHits(hitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO)__                    } else {_                        this.collector = new EarlyTerminatingCollector(hitCountCollector, trackTotalHitsUpTo, false)__                        this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                    }_                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,up,to,search,context,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,0,total,hits,relation,else,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,if,track,total,hits,up,to,search,context,this,collector,hit,count,collector,this,hit,count,supplier,new,total,hits,hit,count,collector,get,total,hits,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,track,total,hits,up,to,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException;1547076415;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_ACCURATE) {_                        this.collector = hitCountCollector__                        this.hitCountSupplier = () -> new TotalHits(hitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO)__                    } else {_                        this.collector = new EarlyTerminatingCollector(hitCountCollector, trackTotalHitsUpTo, false)__                        this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                    }_                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,up,to,search,context,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,0,total,hits,relation,else,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,if,track,total,hits,up,to,search,context,this,collector,hit,count,collector,this,hit,count,supplier,new,total,hits,hit,count,collector,get,total,hits,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,track,total,hits,up,to,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation
TopDocsCollectorContext -> EmptyTopDocsCollectorContext -> private EmptyTopDocsCollectorContext(IndexReader reader, Query query,                                              int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException;1548420339;Ctr_@param reader The index reader_@param query The query to execute_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains a filter;private EmptyTopDocsCollectorContext(IndexReader reader, Query query,_                                             int trackTotalHitsUpTo, boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_COUNT, 0)__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                this.collector = new EarlyTerminatingCollector(new TotalHitCountCollector(), 0, false)__                _                this.hitCountSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector()__                _                int hitCount =  hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_ACCURATE) {_                        this.collector = hitCountCollector__                        this.hitCountSupplier = () -> new TotalHits(hitCountCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO)__                    } else {_                        EarlyTerminatingCollector col =_                            new EarlyTerminatingCollector(hitCountCollector, trackTotalHitsUpTo, false)__                        this.collector = col__                        this.hitCountSupplier = () -> new TotalHits(hitCountCollector.getTotalHits(),_                            col.hasEarlyTerminated() ? TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO : TotalHits.Relation.EQUAL_TO)__                    }_                } else {_                    this.collector = new EarlyTerminatingCollector(hitCountCollector, 0, false)__                    this.hitCountSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_        };ctr,param,reader,the,index,reader,param,query,the,query,to,execute,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,a,filter;private,empty,top,docs,collector,context,index,reader,reader,query,query,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,0,if,track,total,hits,up,to,search,context,this,collector,new,early,terminating,collector,new,total,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,0,total,hits,relation,else,total,hit,count,collector,hit,count,collector,new,total,hit,count,collector,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,if,track,total,hits,up,to,search,context,this,collector,hit,count,collector,this,hit,count,supplier,new,total,hits,hit,count,collector,get,total,hits,total,hits,relation,else,early,terminating,collector,col,new,early,terminating,collector,hit,count,collector,track,total,hits,up,to,false,this,collector,col,this,hit,count,supplier,new,total,hits,hit,count,collector,get,total,hits,col,has,early,terminated,total,hits,relation,total,hits,relation,else,this,collector,new,early,terminating,collector,hit,count,collector,0,false,this,hit,count,supplier,new,total,hits,hit,count,total,hits,relation
TopDocsCollectorContext -> final int numHits();1524684173;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1528762805;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1535046779;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1536314350;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1536964057;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1546630609;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1546950713;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1547071054;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1547076415;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> final int numHits();1548420339;Returns the number of top docs to retrieve;final int numHits() {_        return numHits__    };returns,the,number,of,top,docs,to,retrieve;final,int,num,hits,return,num,hits
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1524684173;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits, trackMaxScore)__        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,track,max,score
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1528762805;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits, trackMaxScore)__        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,track,max,score
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1535046779;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits, trackMaxScore)__        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,track,max,score
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1536314350;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits)___            MaxScoreCollector maxScoreCollector = null__            if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,max,score,collector,max,score,collector,null,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1536964057;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits)___            MaxScoreCollector maxScoreCollector = null__            if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,max,score,collector,max,score,collector,null,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1546630609;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits)___            MaxScoreCollector maxScoreCollector = null__            if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,max,score,collector,max,score,collector,null,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1546950713;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits)___            MaxScoreCollector maxScoreCollector = null__            if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,max,score,collector,max,score,collector,null,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1547071054;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits)___            MaxScoreCollector maxScoreCollector = null__            if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,max,score,collector,max,score,collector,null,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1547076415;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits)___            MaxScoreCollector maxScoreCollector = null__            if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,max,score,collector,max,score,collector,null,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n
TopDocsCollectorContext -> CollapsingTopDocsCollectorContext -> private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,                                                   @Nullable SortAndFormats sortAndFormats,                                                   int numHits,                                                   boolean trackMaxScore);1548420339;Ctr_@param collapseContext The collapsing context_@param sortAndFormats The query sort_@param numHits The number of collapsed top hits to retrieve._@param trackMaxScore True if max score should be tracked;private CollapsingTopDocsCollectorContext(CollapseContext collapseContext,_                                                  @Nullable SortAndFormats sortAndFormats,_                                                  int numHits,_                                                  boolean trackMaxScore) {_            super(REASON_SEARCH_TOP_HITS, numHits)__            assert numHits > 0__            assert collapseContext != null__            Sort sort = sortAndFormats == null ? Sort.RELEVANCE : sortAndFormats.sort__            this.sortFmt = sortAndFormats == null ? new DocValueFormat[] { DocValueFormat.RAW } : sortAndFormats.formats__            this.topDocsCollector = collapseContext.createTopDocs(sort, numHits)___            MaxScoreCollector maxScoreCollector__            if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_        };ctr,param,collapse,context,the,collapsing,context,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,collapsed,top,hits,to,retrieve,param,track,max,score,true,if,max,score,should,be,tracked;private,collapsing,top,docs,collector,context,collapse,context,collapse,context,nullable,sort,and,formats,sort,and,formats,int,num,hits,boolean,track,max,score,super,num,hits,assert,num,hits,0,assert,collapse,context,null,sort,sort,sort,and,formats,null,sort,relevance,sort,and,formats,sort,this,sort,fmt,sort,and,formats,null,new,doc,value,format,doc,value,format,raw,sort,and,formats,formats,this,top,docs,collector,collapse,context,create,top,docs,sort,num,hits,max,score,collector,max,score,collector,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               boolean trackTotalHits,                                               boolean hasFilterCollector) throws IOException;1524684173;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              boolean trackTotalHits,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats__            if (sortAndFormats == null) {_                final TopDocsCollector<?> topDocsCollector = TopScoreDocCollector.create(numHits, searchAfter)__                this.collector = topDocsCollector__                this.topDocsSupplier = topDocsCollector::topDocs__                this.totalHitsSupplier = topDocsCollector::getTotalHits__            } else {_                _                final TopDocsCollector<?> topDocsCollector = TopFieldCollector.create(sortAndFormats.sort, numHits,_                    (FieldDoc) searchAfter, true, trackMaxScore, trackMaxScore, false)__                this.topDocsSupplier = topDocsCollector::topDocs__                if (trackTotalHits) {_                    _                    int count = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                    if (count != -1) {_                        _                        this.totalHitsSupplier = () -> count__                        this.collector = topDocsCollector__                    } else {_                        _                        _                        final TotalHitCountCollector countingCollector = new TotalHitCountCollector()__                        this.collector = MultiCollector.wrap(topDocsCollector, countingCollector)__                        this.totalHitsSupplier = countingCollector::getTotalHits__                    }_                } else {_                    _                    this.collector = topDocsCollector__                    this.totalHitsSupplier = topDocsCollector::getTotalHits__                }_            }_        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,if,sort,and,formats,null,final,top,docs,collector,top,docs,collector,top,score,doc,collector,create,num,hits,search,after,this,collector,top,docs,collector,this,top,docs,supplier,top,docs,collector,top,docs,this,total,hits,supplier,top,docs,collector,get,total,hits,else,final,top,docs,collector,top,docs,collector,top,field,collector,create,sort,and,formats,sort,num,hits,field,doc,search,after,true,track,max,score,track,max,score,false,this,top,docs,supplier,top,docs,collector,top,docs,if,track,total,hits,int,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,count,1,this,total,hits,supplier,count,this,collector,top,docs,collector,else,final,total,hit,count,collector,counting,collector,new,total,hit,count,collector,this,collector,multi,collector,wrap,top,docs,collector,counting,collector,this,total,hits,supplier,counting,collector,get,total,hits,else,this,collector,top,docs,collector,this,total,hits,supplier,top,docs,collector,get,total,hits
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               boolean trackTotalHits,                                               boolean hasFilterCollector) throws IOException;1528762805;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              boolean trackTotalHits,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats__            if (sortAndFormats == null) {_                final TopDocsCollector<?> topDocsCollector = TopScoreDocCollector.create(numHits, searchAfter)__                this.collector = topDocsCollector__                this.topDocsSupplier = topDocsCollector::topDocs__                this.totalHitsSupplier = topDocsCollector::getTotalHits__            } else {_                _                final TopDocsCollector<?> topDocsCollector = TopFieldCollector.create(sortAndFormats.sort, numHits,_                    (FieldDoc) searchAfter, true, trackMaxScore, trackMaxScore, false)__                this.topDocsSupplier = topDocsCollector::topDocs__                if (trackTotalHits) {_                    _                    int count = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                    if (count != -1) {_                        _                        this.totalHitsSupplier = () -> count__                        this.collector = topDocsCollector__                    } else {_                        _                        _                        final TotalHitCountCollector countingCollector = new TotalHitCountCollector()__                        this.collector = MultiCollector.wrap(topDocsCollector, countingCollector)__                        this.totalHitsSupplier = countingCollector::getTotalHits__                    }_                } else {_                    _                    this.collector = topDocsCollector__                    this.totalHitsSupplier = topDocsCollector::getTotalHits__                }_            }_        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,if,sort,and,formats,null,final,top,docs,collector,top,docs,collector,top,score,doc,collector,create,num,hits,search,after,this,collector,top,docs,collector,this,top,docs,supplier,top,docs,collector,top,docs,this,total,hits,supplier,top,docs,collector,get,total,hits,else,final,top,docs,collector,top,docs,collector,top,field,collector,create,sort,and,formats,sort,num,hits,field,doc,search,after,true,track,max,score,track,max,score,false,this,top,docs,supplier,top,docs,collector,top,docs,if,track,total,hits,int,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,count,1,this,total,hits,supplier,count,this,collector,top,docs,collector,else,final,total,hit,count,collector,counting,collector,new,total,hit,count,collector,this,collector,multi,collector,wrap,top,docs,collector,counting,collector,this,total,hits,supplier,counting,collector,get,total,hits,else,this,collector,top,docs,collector,this,total,hits,supplier,top,docs,collector,get,total,hits
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               boolean trackTotalHits,                                               boolean hasFilterCollector) throws IOException;1535046779;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              boolean trackTotalHits,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats__            if (sortAndFormats == null) {_                final TopDocsCollector<?> topDocsCollector = TopScoreDocCollector.create(numHits, searchAfter)__                this.collector = topDocsCollector__                this.topDocsSupplier = topDocsCollector::topDocs__                this.totalHitsSupplier = topDocsCollector::getTotalHits__            } else {_                _                final TopDocsCollector<?> topDocsCollector = TopFieldCollector.create(sortAndFormats.sort, numHits,_                    (FieldDoc) searchAfter, true, trackMaxScore, trackMaxScore, false)__                this.topDocsSupplier = topDocsCollector::topDocs__                if (trackTotalHits) {_                    _                    int count = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                    if (count != -1) {_                        _                        this.totalHitsSupplier = () -> count__                        this.collector = topDocsCollector__                    } else {_                        _                        _                        final TotalHitCountCollector countingCollector = new TotalHitCountCollector()__                        this.collector = MultiCollector.wrap(topDocsCollector, countingCollector)__                        this.totalHitsSupplier = countingCollector::getTotalHits__                    }_                } else {_                    _                    this.collector = topDocsCollector__                    this.totalHitsSupplier = topDocsCollector::getTotalHits__                }_            }_        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,if,sort,and,formats,null,final,top,docs,collector,top,docs,collector,top,score,doc,collector,create,num,hits,search,after,this,collector,top,docs,collector,this,top,docs,supplier,top,docs,collector,top,docs,this,total,hits,supplier,top,docs,collector,get,total,hits,else,final,top,docs,collector,top,docs,collector,top,field,collector,create,sort,and,formats,sort,num,hits,field,doc,search,after,true,track,max,score,track,max,score,false,this,top,docs,supplier,top,docs,collector,top,docs,if,track,total,hits,int,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,count,1,this,total,hits,supplier,count,this,collector,top,docs,collector,else,final,total,hit,count,collector,counting,collector,new,total,hit,count,collector,this,collector,multi,collector,wrap,top,docs,collector,counting,collector,this,total,hits,supplier,counting,collector,get,total,hits,else,this,collector,top,docs,collector,this,total,hits,supplier,top,docs,collector,get,total,hits
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               boolean trackTotalHits,                                               boolean hasFilterCollector) throws IOException;1536314350;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              boolean trackTotalHits,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats__            if (sortAndFormats == null) {_                final TopDocsCollector<?> topDocsCollector = TopScoreDocCollector.create(numHits, searchAfter, Integer.MAX_VALUE)__                this.collector = topDocsCollector__                this.topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                this.totalHitsSupplier = () -> topDocsSupplier.get().totalHits__                this.maxScoreSupplier = () -> {_                    TopDocs topDocs = topDocsSupplier.get()__                    if (topDocs.scoreDocs.length == 0) {_                        return Float.NaN__                    } else {_                        return topDocs.scoreDocs[0].score__                    }_                }__            } else {_                _                final TopDocsCollector<?> topDocsCollector = TopFieldCollector.create(sortAndFormats.sort, numHits,_                    (FieldDoc) searchAfter, 1)__                this.topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                TotalHitCountCollector hitCountCollector = null__                if (trackTotalHits) {_                    _                    int count = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                    if (count != -1) {_                        _                        this.totalHitsSupplier = () -> new TotalHits(count, TotalHits.Relation.EQUAL_TO)__                    } else {_                        _                        _                        final TotalHitCountCollector countingCollector = new TotalHitCountCollector()__                        hitCountCollector = countingCollector__                        this.totalHitsSupplier = () -> new TotalHits(countingCollector.getTotalHits(), TotalHits.Relation.EQUAL_TO)__                    }_                } else {_                    _                    _                    this.totalHitsSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__                }_                MaxScoreCollector maxScoreCollector = null__                if (trackMaxScore) {_                    maxScoreCollector = new MaxScoreCollector()__                    maxScoreSupplier = maxScoreCollector::getMaxScore__                } else {_                    maxScoreSupplier = () -> Float.NaN__                }_                collector = MultiCollector.wrap(topDocsCollector, hitCountCollector, maxScoreCollector)__            }_        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,if,sort,and,formats,null,final,top,docs,collector,top,docs,collector,top,score,doc,collector,create,num,hits,search,after,integer,this,collector,top,docs,collector,this,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,this,total,hits,supplier,top,docs,supplier,get,total,hits,this,max,score,supplier,top,docs,top,docs,top,docs,supplier,get,if,top,docs,score,docs,length,0,return,float,na,n,else,return,top,docs,score,docs,0,score,else,final,top,docs,collector,top,docs,collector,top,field,collector,create,sort,and,formats,sort,num,hits,field,doc,search,after,1,this,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hit,count,collector,hit,count,collector,null,if,track,total,hits,int,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,count,1,this,total,hits,supplier,new,total,hits,count,total,hits,relation,else,final,total,hit,count,collector,counting,collector,new,total,hit,count,collector,hit,count,collector,counting,collector,this,total,hits,supplier,new,total,hits,counting,collector,get,total,hits,total,hits,relation,else,this,total,hits,supplier,new,total,hits,0,total,hits,relation,max,score,collector,max,score,collector,null,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n,collector,multi,collector,wrap,top,docs,collector,hit,count,collector,max,score,collector
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               boolean trackTotalHits,                                               boolean hasFilterCollector) throws IOException;1536964057;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHits True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              boolean trackTotalHits,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats___            _            final int hitCount = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__            final TopDocsCollector<?> topDocsCollector__            if (hitCount == -1 && trackTotalHits) {_                topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, Integer.MAX_VALUE)__                topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                totalHitsSupplier = () -> topDocsSupplier.get().totalHits__            } else {_                topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)_ _                topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                if (hitCount == -1) {_                    assert trackTotalHits == false__                    totalHitsSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__                } else {_                    totalHitsSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_            MaxScoreCollector maxScoreCollector = null__            if (sortAndFormats == null) {_                maxScoreSupplier = () -> {_                    TopDocs topDocs = topDocsSupplier.get()__                    if (topDocs.scoreDocs.length == 0) {_                        return Float.NaN__                    } else {_                        return topDocs.scoreDocs[0].score__                    }_                }__            } else if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_            this.collector = MultiCollector.wrap(topDocsCollector, maxScoreCollector)__        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,boolean,track,total,hits,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,final,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,final,top,docs,collector,top,docs,collector,if,hit,count,1,track,total,hits,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,integer,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,top,docs,supplier,get,total,hits,else,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,if,hit,count,1,assert,track,total,hits,false,total,hits,supplier,new,total,hits,0,total,hits,relation,else,total,hits,supplier,new,total,hits,hit,count,total,hits,relation,max,score,collector,max,score,collector,null,if,sort,and,formats,null,max,score,supplier,top,docs,top,docs,top,docs,supplier,get,if,top,docs,score,docs,length,0,return,float,na,n,else,return,top,docs,score,docs,0,score,else,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n,this,collector,multi,collector,wrap,top,docs,collector,max,score,collector
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1524684173;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1528762805;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1535046779;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1536314350;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1536964057;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1546630609;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1546950713;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1547071054;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1547076415;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException;1548420339;Returns query total hit count if the <code>query</code> is a {@link MatchAllDocsQuery}_or a {@link TermQuery} and the <code>reader</code> has no deletions,_-1 otherwise.;static int shortcutTotalHitCount(IndexReader reader, Query query) throws IOException {_        while (true) {_            _            _            _            _            if (query instanceof ConstantScoreQuery) {_                query = ((ConstantScoreQuery) query).getQuery()__            } else if (query instanceof BoostQuery) {_                query = ((BoostQuery) query).getQuery()__            } else {_                break__            }_        }_        if (query.getClass() == MatchAllDocsQuery.class) {_            return reader.numDocs()__        } else if (query.getClass() == TermQuery.class && reader.hasDeletions() == false) {_            final Term term = ((TermQuery) query).getTerm()__            int count = 0__            for (LeafReaderContext context : reader.leaves()) {_                count += context.reader().docFreq(term)__            }_            return count__        } else {_            return -1__        }_    };returns,query,total,hit,count,if,the,code,query,code,is,a,link,match,all,docs,query,or,a,link,term,query,and,the,code,reader,code,has,no,deletions,1,otherwise;static,int,shortcut,total,hit,count,index,reader,reader,query,query,throws,ioexception,while,true,if,query,instanceof,constant,score,query,query,constant,score,query,query,get,query,else,if,query,instanceof,boost,query,query,boost,query,query,get,query,else,break,if,query,get,class,match,all,docs,query,class,return,reader,num,docs,else,if,query,get,class,term,query,class,reader,has,deletions,false,final,term,term,term,query,query,get,term,int,count,0,for,leaf,reader,context,context,reader,leaves,count,context,reader,doc,freq,term,return,count,else,return,1
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               int trackTotalHitsUpTo,                                               boolean hasFilterCollector) throws IOException;1546630609;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              int trackTotalHitsUpTo,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats___            _            final int hitCount = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__            final TopDocsCollector<?> topDocsCollector__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                _                topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                totalHitsSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                if (hitCount == -1) {_                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, trackTotalHitsUpTo)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> topDocsSupplier.get().totalHits__                } else {_                    _                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_            MaxScoreCollector maxScoreCollector = null__            if (sortAndFormats == null) {_                maxScoreSupplier = () -> {_                    TopDocs topDocs = topDocsSupplier.get()__                    if (topDocs.scoreDocs.length == 0) {_                        return Float.NaN__                    } else {_                        return topDocs.scoreDocs[0].score__                    }_                }__            } else if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_            this.collector = MultiCollector.wrap(topDocsCollector, maxScoreCollector)__        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,final,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,final,top,docs,collector,top,docs,collector,if,track,total,hits,up,to,search,context,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,0,total,hits,relation,else,if,hit,count,1,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,track,total,hits,up,to,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,top,docs,supplier,get,total,hits,else,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,hit,count,total,hits,relation,max,score,collector,max,score,collector,null,if,sort,and,formats,null,max,score,supplier,top,docs,top,docs,top,docs,supplier,get,if,top,docs,score,docs,length,0,return,float,na,n,else,return,top,docs,score,docs,0,score,else,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n,this,collector,multi,collector,wrap,top,docs,collector,max,score,collector
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               int trackTotalHitsUpTo,                                               boolean hasFilterCollector) throws IOException;1546950713;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              int trackTotalHitsUpTo,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats___            final TopDocsCollector<?> topDocsCollector__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                _                topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                totalHitsSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                _                final int hitCount = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, trackTotalHitsUpTo)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> topDocsSupplier.get().totalHits__                } else {_                    _                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_            MaxScoreCollector maxScoreCollector = null__            if (sortAndFormats == null) {_                maxScoreSupplier = () -> {_                    TopDocs topDocs = topDocsSupplier.get()__                    if (topDocs.scoreDocs.length == 0) {_                        return Float.NaN__                    } else {_                        return topDocs.scoreDocs[0].score__                    }_                }__            } else if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_            this.collector = MultiCollector.wrap(topDocsCollector, maxScoreCollector)__        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,final,top,docs,collector,top,docs,collector,if,track,total,hits,up,to,search,context,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,0,total,hits,relation,else,final,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,track,total,hits,up,to,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,top,docs,supplier,get,total,hits,else,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,hit,count,total,hits,relation,max,score,collector,max,score,collector,null,if,sort,and,formats,null,max,score,supplier,top,docs,top,docs,top,docs,supplier,get,if,top,docs,score,docs,length,0,return,float,na,n,else,return,top,docs,score,docs,0,score,else,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n,this,collector,multi,collector,wrap,top,docs,collector,max,score,collector
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               int trackTotalHitsUpTo,                                               boolean hasFilterCollector) throws IOException;1547071054;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              int trackTotalHitsUpTo,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats___            final TopDocsCollector<?> topDocsCollector__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                _                topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                totalHitsSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                _                final int hitCount = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, trackTotalHitsUpTo)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> topDocsSupplier.get().totalHits__                } else {_                    _                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_            MaxScoreCollector maxScoreCollector = null__            if (sortAndFormats == null) {_                maxScoreSupplier = () -> {_                    TopDocs topDocs = topDocsSupplier.get()__                    if (topDocs.scoreDocs.length == 0) {_                        return Float.NaN__                    } else {_                        return topDocs.scoreDocs[0].score__                    }_                }__            } else if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_            this.collector = MultiCollector.wrap(topDocsCollector, maxScoreCollector)__        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,final,top,docs,collector,top,docs,collector,if,track,total,hits,up,to,search,context,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,0,total,hits,relation,else,final,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,track,total,hits,up,to,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,top,docs,supplier,get,total,hits,else,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,hit,count,total,hits,relation,max,score,collector,max,score,collector,null,if,sort,and,formats,null,max,score,supplier,top,docs,top,docs,top,docs,supplier,get,if,top,docs,score,docs,length,0,return,float,na,n,else,return,top,docs,score,docs,0,score,else,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n,this,collector,multi,collector,wrap,top,docs,collector,max,score,collector
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               int trackTotalHitsUpTo,                                               boolean hasFilterCollector) throws IOException;1547076415;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              int trackTotalHitsUpTo,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats___            final TopDocsCollector<?> topDocsCollector__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                _                topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                totalHitsSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                _                final int hitCount = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, trackTotalHitsUpTo)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> topDocsSupplier.get().totalHits__                } else {_                    _                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_            MaxScoreCollector maxScoreCollector = null__            if (sortAndFormats == null) {_                maxScoreSupplier = () -> {_                    TopDocs topDocs = topDocsSupplier.get()__                    if (topDocs.scoreDocs.length == 0) {_                        return Float.NaN__                    } else {_                        return topDocs.scoreDocs[0].score__                    }_                }__            } else if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_            this.collector = MultiCollector.wrap(topDocsCollector, maxScoreCollector)__        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,final,top,docs,collector,top,docs,collector,if,track,total,hits,up,to,search,context,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,0,total,hits,relation,else,final,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,track,total,hits,up,to,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,top,docs,supplier,get,total,hits,else,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,hit,count,total,hits,relation,max,score,collector,max,score,collector,null,if,sort,and,formats,null,max,score,supplier,top,docs,top,docs,top,docs,supplier,get,if,top,docs,score,docs,length,0,return,float,na,n,else,return,top,docs,score,docs,0,score,else,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n,this,collector,multi,collector,wrap,top,docs,collector,max,score,collector
TopDocsCollectorContext -> SimpleTopDocsCollectorContext -> private SimpleTopDocsCollectorContext(IndexReader reader,                                               Query query,                                               @Nullable SortAndFormats sortAndFormats,                                               @Nullable ScoreDoc searchAfter,                                               int numHits,                                               boolean trackMaxScore,                                               int trackTotalHitsUpTo,                                               boolean hasFilterCollector) throws IOException;1548420339;Ctr_@param reader The index reader_@param query The Lucene query_@param sortAndFormats The query sort_@param numHits The number of top hits to retrieve_@param searchAfter The doc this request should "search after"_@param trackMaxScore True if max score should be tracked_@param trackTotalHitsUpTo True if the total number of hits should be tracked_@param hasFilterCollector True if the collector chain contains at least one collector that can filters document;private SimpleTopDocsCollectorContext(IndexReader reader,_                                              Query query,_                                              @Nullable SortAndFormats sortAndFormats,_                                              @Nullable ScoreDoc searchAfter,_                                              int numHits,_                                              boolean trackMaxScore,_                                              int trackTotalHitsUpTo,_                                              boolean hasFilterCollector) throws IOException {_            super(REASON_SEARCH_TOP_HITS, numHits)__            this.sortAndFormats = sortAndFormats___            final TopDocsCollector<?> topDocsCollector__            if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_                _                topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                totalHitsSupplier = () -> new TotalHits(0, TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO)__            } else {_                _                final int hitCount = hasFilterCollector ? -1 : shortcutTotalHitCount(reader, query)__                if (hitCount == -1) {_                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, trackTotalHitsUpTo)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> topDocsSupplier.get().totalHits__                } else {_                    _                    topDocsCollector = createCollector(sortAndFormats, numHits, searchAfter, 1)__                    topDocsSupplier = new CachedSupplier<>(topDocsCollector::topDocs)__                    totalHitsSupplier = () -> new TotalHits(hitCount, TotalHits.Relation.EQUAL_TO)__                }_            }_            MaxScoreCollector maxScoreCollector = null__            if (sortAndFormats == null) {_                maxScoreSupplier = () -> {_                    TopDocs topDocs = topDocsSupplier.get()__                    if (topDocs.scoreDocs.length == 0) {_                        return Float.NaN__                    } else {_                        return topDocs.scoreDocs[0].score__                    }_                }__            } else if (trackMaxScore) {_                maxScoreCollector = new MaxScoreCollector()__                maxScoreSupplier = maxScoreCollector::getMaxScore__            } else {_                maxScoreSupplier = () -> Float.NaN__            }_            this.collector = MultiCollector.wrap(topDocsCollector, maxScoreCollector)__        };ctr,param,reader,the,index,reader,param,query,the,lucene,query,param,sort,and,formats,the,query,sort,param,num,hits,the,number,of,top,hits,to,retrieve,param,search,after,the,doc,this,request,should,search,after,param,track,max,score,true,if,max,score,should,be,tracked,param,track,total,hits,up,to,true,if,the,total,number,of,hits,should,be,tracked,param,has,filter,collector,true,if,the,collector,chain,contains,at,least,one,collector,that,can,filters,document;private,simple,top,docs,collector,context,index,reader,reader,query,query,nullable,sort,and,formats,sort,and,formats,nullable,score,doc,search,after,int,num,hits,boolean,track,max,score,int,track,total,hits,up,to,boolean,has,filter,collector,throws,ioexception,super,num,hits,this,sort,and,formats,sort,and,formats,final,top,docs,collector,top,docs,collector,if,track,total,hits,up,to,search,context,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,0,total,hits,relation,else,final,int,hit,count,has,filter,collector,1,shortcut,total,hit,count,reader,query,if,hit,count,1,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,track,total,hits,up,to,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,top,docs,supplier,get,total,hits,else,top,docs,collector,create,collector,sort,and,formats,num,hits,search,after,1,top,docs,supplier,new,cached,supplier,top,docs,collector,top,docs,total,hits,supplier,new,total,hits,hit,count,total,hits,relation,max,score,collector,max,score,collector,null,if,sort,and,formats,null,max,score,supplier,top,docs,top,docs,top,docs,supplier,get,if,top,docs,score,docs,length,0,return,float,na,n,else,return,top,docs,score,docs,0,score,else,if,track,max,score,max,score,collector,new,max,score,collector,max,score,supplier,max,score,collector,get,max,score,else,max,score,supplier,float,na,n,this,collector,multi,collector,wrap,top,docs,collector,max,score,collector
