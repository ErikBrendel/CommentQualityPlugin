# id;timestamp;commentText;codeText;commentWords;codeWords
Node -> public Settings settings();1524684173;The settings that were used to create the node.;public Settings settings() {_        return this.settings__    };the,settings,that,were,used,to,create,the,node;public,settings,settings,return,this,settings
Node -> public Settings settings();1525334055;The settings that were used to create the node.;public Settings settings() {_        return this.settings__    };the,settings,that,were,used,to,create,the,node;public,settings,settings,return,this,settings
Node -> public Settings settings();1527096592;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1528706846;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1528762805;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1529082965;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1529433467;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1531179852;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1532685069;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1533063033;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1533230566;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1534848846;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1535666657;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1535965276;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1536137328;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1536218260;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1536611444;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1537806831;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1540486836;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1541092382;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1541592065;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1541643651;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1543468844;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1544081506;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1544554541;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1544677641;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1544692527;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1545156327;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1547575044;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1548742809;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> public Settings settings();1548957580;The settings that are used by this node. Contains original settings as well as additional settings provided by plugins.;public Settings settings() {_        return this.settings__    };the,settings,that,are,used,by,this,node,contains,original,settings,as,well,as,additional,settings,provided,by,plugins;public,settings,settings,return,this,settings
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1524684173;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1525334055;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1527096592;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1528706846;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1528762805;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1529082965;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1529433467;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1531179852;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1532685069;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1533063033;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1533230566;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1534848846;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1535666657;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1535965276;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1536137328;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1536218260;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1536611444;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1537806831;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1540486836;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1541092382;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1541592065;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1541643651;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1543468844;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1544081506;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1544554541;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1544677641;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1544692527;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1545156327;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1547575044;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1548742809;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,                                              ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,                                              FetchPhase fetchPhase, ResponseCollectorService responseCollectorService);1548957580;Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.;protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService,_                                             ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays,_                                             FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {_        return new SearchService(clusterService, indicesService, threadPool,_            scriptService, bigArrays, fetchPhase, responseCollectorService)__    };creates,a,new,the,search,service,this,method,can,be,overwritten,by,tests,to,inject,mock,implementations;protected,search,service,new,search,service,cluster,service,cluster,service,indices,service,indices,service,thread,pool,thread,pool,script,service,script,service,big,arrays,big,arrays,fetch,phase,fetch,phase,response,collector,service,response,collector,service,return,new,search,service,cluster,service,indices,service,thread,pool,script,service,big,arrays,fetch,phase,response,collector,service
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1524684173;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1525334055;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1527096592;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1528706846;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1528762805;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1529082965;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1529433467;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1531179852;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1532685069;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1533063033;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1533230566;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1534848846;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1535666657;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1535965276;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1536137328;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1536218260;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1536611444;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1537806831;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1540486836;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1541092382;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1541592065;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1541643651;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1543468844;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1544081506;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1544554541;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1544677641;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1544692527;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1545156327;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1547575044;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1548742809;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,                                                        ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners);1548957580;Constructs a ClusterInfoService which may be mocked for tests.;protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService,_                                                       ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listeners) {_        return new InternalClusterInfoService(settings, clusterService, threadPool, client, listeners)__    };constructs,a,cluster,info,service,which,may,be,mocked,for,tests;protected,cluster,info,service,new,cluster,info,service,settings,settings,cluster,service,cluster,service,thread,pool,thread,pool,node,client,client,consumer,cluster,info,listeners,return,new,internal,cluster,info,service,settings,cluster,service,thread,pool,client,listeners
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1524684173;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1525334055;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1527096592;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1528706846;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1528762805;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1529082965;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1529433467;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1531179852;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1532685069;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1533063033;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1533230566;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1534848846;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1535666657;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1535965276;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1536137328;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId);1536218260;Adds a default node name to the given setting, if it doesn't already exist_@return the given setting if node name is already set, or a new copy with a default node name set.;public static final Settings addNodeNameIfNeeded(Settings settings, final String nodeId) {_        if (NODE_NAME_SETTING.exists(settings)) {_            return settings__        }_        return Settings.builder().put(settings).put(NODE_NAME_SETTING.getKey(), nodeId.substring(0, 7)).build()__    };adds,a,default,node,name,to,the,given,setting,if,it,doesn,t,already,exist,return,the,given,setting,if,node,name,is,already,set,or,a,new,copy,with,a,default,node,name,set;public,static,final,settings,add,node,name,if,needed,settings,settings,final,string,node,id,if,exists,settings,return,settings,return,settings,builder,put,settings,put,get,key,node,id,substring,0,7,build
Node -> public boolean isClosed();1524684173;Returns <tt>true</tt> if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,tt,true,tt,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1525334055;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1527096592;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1528706846;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1528762805;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1529082965;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1529433467;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1531179852;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1532685069;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1533063033;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1533230566;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1534848846;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1535666657;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1535965276;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1536137328;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1536218260;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1536611444;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1537806831;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1540486836;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1541092382;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1541592065;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1541643651;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1543468844;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1544081506;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1544554541;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1544677641;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1544692527;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1545156327;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1547575044;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1548742809;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> public boolean isClosed();1548957580;Returns {@code true} if the node is closed.;public boolean isClosed() {_        return lifecycle.closed()__    };returns,code,true,if,the,node,is,closed;public,boolean,is,closed,return,lifecycle,closed
Node -> protected PluginsService getPluginsService();1524684173;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1525334055;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1527096592;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1528706846;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1528762805;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1529082965;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1529433467;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1531179852;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1532685069;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1533063033;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1533230566;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1534848846;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1535666657;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1535965276;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1536137328;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1536218260;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1536611444;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1537806831;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1540486836;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1541092382;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1541592065;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1541643651;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1543468844;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1544081506;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1544554541;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1544677641;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1544692527;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1545156327;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1547575044;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1548742809;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> protected PluginsService getPluginsService();1548957580;The {@link PluginsService} used to build this node's components.;protected PluginsService getPluginsService() {_        return pluginsService__    };the,link,plugins,service,used,to,build,this,node,s,components;protected,plugins,service,get,plugins,service,return,plugins,service
Node -> public Client client();1524684173;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1525334055;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1527096592;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1528706846;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1528762805;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1529082965;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1529433467;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1531179852;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1532685069;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1533063033;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1533230566;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1534848846;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1535666657;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1535965276;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1536137328;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1536218260;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1536611444;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1537806831;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1540486836;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1541092382;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1541592065;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1541643651;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1543468844;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1544081506;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1544554541;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1544677641;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1544692527;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1545156327;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1547575044;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1548742809;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Client client();1548957580;A client that can be used to execute actions (operations) against the cluster.;public Client client() {_        return client__    };a,client,that,can,be,used,to,execute,actions,operations,against,the,cluster;public,client,client,return,client
Node -> public Node start() throws NodeValidationException;1524684173;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }___        if (NetworkModule.HTTP_ENABLED.get(settings)) {_            injector.getInstance(HttpServerTransport.class).start()__        }__        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            if (NetworkModule.HTTP_ENABLED.get(settings)) {_                HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__                writePortsFile("http", http.boundAddress())__            }_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,if,network,module,get,settings,injector,get,instance,http,server,transport,class,start,if,get,settings,if,network,module,get,settings,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1525334055;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1527096592;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1528706846;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1528762805;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1529082965;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1529433467;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1531179852;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1532685069;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings))__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,logger,loggers,get,logger,node,class,get,settings,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1533063033;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1533230566;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1534848846;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1535666657;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1535965276;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1536137328;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1536218260;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1536611444;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1537806831;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1540486836;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1541092382;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1541592065;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1541643651;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1543468844;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        try {_            _            _            if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_                onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState()__            } else {_                onDiskMetadata = MetaData.EMPTY_META_DATA__            }_            assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,try,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,load,meta,state,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,catch,ioexception,e,throw,new,unchecked,ioexception,e,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1544081506;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        _        _        if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_            onDiskMetadata = injector.getInstance(GatewayMetaState.class).getMetaData()__        } else {_            onDiskMetadata = MetaData.EMPTY_META_DATA__        }_        assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,get,meta,data,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1544554541;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        _        _        if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_            onDiskMetadata = injector.getInstance(GatewayMetaState.class).getMetaData()__        } else {_            onDiskMetadata = MetaData.EMPTY_META_DATA__        }_        assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        validateNodeBeforeAcceptingRequests(new BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,get,meta,data,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,validate,node,before,accepting,requests,new,bootstrap,context,settings,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1544677641;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        _        _        if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_            onDiskMetadata = injector.getInstance(GatewayMetaState.class).getMetaData()__        } else {_            onDiskMetadata = MetaData.EMPTY_META_DATA__        }_        assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        validateNodeBeforeAcceptingRequests(new BootstrapContext(environment, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,get,meta,data,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,validate,node,before,accepting,requests,new,bootstrap,context,environment,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1544692527;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        _        _        if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_            onDiskMetadata = injector.getInstance(GatewayMetaState.class).getMetaData()__        } else {_            onDiskMetadata = MetaData.EMPTY_META_DATA__        }_        assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        validateNodeBeforeAcceptingRequests(new BootstrapContext(environment, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,get,meta,data,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,validate,node,before,accepting,requests,new,bootstrap,context,environment,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1545156327;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        _        _        if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_            onDiskMetadata = injector.getInstance(GatewayMetaState.class).getMetaData()__        } else {_            onDiskMetadata = MetaData.EMPTY_META_DATA__        }_        assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        validateNodeBeforeAcceptingRequests(new BootstrapContext(environment, onDiskMetadata), transportService.boundAddress(), pluginsService_            .filterPlugins(Plugin_            .class)_            .stream()_            .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,get,meta,data,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,validate,node,before,accepting,requests,new,bootstrap,context,environment,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1547575044;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        _        _        if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_            onDiskMetadata = injector.getInstance(GatewayMetaState.class).getMetaData()__        } else {_            onDiskMetadata = MetaData.EMPTY_META_DATA__        }_        assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        validateNodeBeforeAcceptingRequests(new BootstrapContext(environment, onDiskMetadata), transportService.boundAddress(),_            pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer = new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())__            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,get,meta,data,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,validate,node,before,accepting,requests,new,bootstrap,context,environment,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1548742809;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        _        _        if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_            onDiskMetadata = injector.getInstance(GatewayMetaState.class).getMetaData()__        } else {_            onDiskMetadata = MetaData.EMPTY_META_DATA__        }_        assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        validateNodeBeforeAcceptingRequests(new BootstrapContext(environment, onDiskMetadata), transportService.boundAddress(),_            pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        NodeAndClusterIdStateListener.getAndSetNodeIdAndClusterId(clusterService,_            injector.getInstance(ThreadPool.class).getThreadContext())___        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer =_                new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())___            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,get,meta,data,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,validate,node,before,accepting,requests,new,bootstrap,context,environment,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,node,and,cluster,id,state,listener,get,and,set,node,id,and,cluster,id,cluster,service,injector,get,instance,thread,pool,class,get,thread,context,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> public Node start() throws NodeValidationException;1548957580;Start the node. If the node is already started, this method is no-op.;public Node start() throws NodeValidationException {_        if (!lifecycle.moveToStarted()) {_            return this__        }__        logger.info("starting ...")__        pluginLifecycleComponents.forEach(LifecycleComponent::start)___        injector.getInstance(MappingUpdatedAction.class).setClient(client)__        injector.getInstance(IndicesService.class).start()__        injector.getInstance(IndicesClusterStateService.class).start()__        injector.getInstance(SnapshotsService.class).start()__        injector.getInstance(SnapshotShardsService.class).start()__        injector.getInstance(RoutingService.class).start()__        injector.getInstance(SearchService.class).start()__        nodeService.getMonitorService().start()___        final ClusterService clusterService = injector.getInstance(ClusterService.class)___        final NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class)__        nodeConnectionsService.start()__        clusterService.setNodeConnectionsService(nodeConnectionsService)___        injector.getInstance(ResourceWatcherService.class).start()__        injector.getInstance(GatewayService.class).start()__        Discovery discovery = injector.getInstance(Discovery.class)__        clusterService.getMasterService().setClusterStatePublisher(discovery::publish)___        _        TransportService transportService = injector.getInstance(TransportService.class)__        transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class))__        transportService.start()__        assert localNodeFactory.getNode() != null__        assert transportService.getLocalNode().equals(localNodeFactory.getNode())_            : "transportService has a different local node than the factory provided"__        final MetaData onDiskMetadata__        _        _        if (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) {_            onDiskMetadata = injector.getInstance(GatewayMetaState.class).getMetaData()__        } else {_            onDiskMetadata = MetaData.EMPTY_META_DATA__        }_        assert onDiskMetadata != null : "metadata is null but shouldn't"_ _        validateNodeBeforeAcceptingRequests(new BootstrapContext(environment, onDiskMetadata), transportService.boundAddress(),_            pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.getBootstrapChecks().stream()).collect(Collectors.toList()))___        clusterService.addStateApplier(transportService.getTaskManager())__        _        discovery.start()_ _        clusterService.start()__        assert clusterService.localNode().equals(localNodeFactory.getNode())_            : "clusterService has a different local node than the factory provided"__        transportService.acceptIncomingRequests()__        discovery.startInitialJoin()__        final TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings)__        configureNodeAndClusterIdStateListener(clusterService)___        if (initialStateTimeout.millis() > 0) {_            final ThreadPool thread = injector.getInstance(ThreadPool.class)__            ClusterState clusterState = clusterService.state()__            ClusterStateObserver observer =_                new ClusterStateObserver(clusterState, clusterService, null, logger, thread.getThreadContext())___            if (clusterState.nodes().getMasterNodeId() == null) {_                logger.debug("waiting to join the cluster. timeout [{}]", initialStateTimeout)__                final CountDownLatch latch = new CountDownLatch(1)__                observer.waitForNextChange(new ClusterStateObserver.Listener() {_                    @Override_                    public void onNewClusterState(ClusterState state) { latch.countDown()_ }__                    @Override_                    public void onClusterServiceClose() {_                        latch.countDown()__                    }__                    @Override_                    public void onTimeout(TimeValue timeout) {_                        logger.warn("timed out while waiting for initial discovery state - timeout: {}",_                            initialStateTimeout)__                        latch.countDown()__                    }_                }, state -> state.nodes().getMasterNodeId() != null, initialStateTimeout)___                try {_                    latch.await()__                } catch (InterruptedException e) {_                    throw new ElasticsearchTimeoutException("Interrupted while waiting for initial discovery state")__                }_            }_        }__        injector.getInstance(HttpServerTransport.class).start()___        if (WRITE_PORTS_FILE_SETTING.get(settings)) {_            TransportService transport = injector.getInstance(TransportService.class)__            writePortsFile("transport", transport.boundAddress())__            HttpServerTransport http = injector.getInstance(HttpServerTransport.class)__            writePortsFile("http", http.boundAddress())__        }__        logger.info("started")___        pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted)___        return this__    };start,the,node,if,the,node,is,already,started,this,method,is,no,op;public,node,start,throws,node,validation,exception,if,lifecycle,move,to,started,return,this,logger,info,starting,plugin,lifecycle,components,for,each,lifecycle,component,start,injector,get,instance,mapping,updated,action,class,set,client,client,injector,get,instance,indices,service,class,start,injector,get,instance,indices,cluster,state,service,class,start,injector,get,instance,snapshots,service,class,start,injector,get,instance,snapshot,shards,service,class,start,injector,get,instance,routing,service,class,start,injector,get,instance,search,service,class,start,node,service,get,monitor,service,start,final,cluster,service,cluster,service,injector,get,instance,cluster,service,class,final,node,connections,service,node,connections,service,injector,get,instance,node,connections,service,class,node,connections,service,start,cluster,service,set,node,connections,service,node,connections,service,injector,get,instance,resource,watcher,service,class,start,injector,get,instance,gateway,service,class,start,discovery,discovery,injector,get,instance,discovery,class,cluster,service,get,master,service,set,cluster,state,publisher,discovery,publish,transport,service,transport,service,injector,get,instance,transport,service,class,transport,service,get,task,manager,set,task,results,service,injector,get,instance,task,results,service,class,transport,service,start,assert,local,node,factory,get,node,null,assert,transport,service,get,local,node,equals,local,node,factory,get,node,transport,service,has,a,different,local,node,than,the,factory,provided,final,meta,data,on,disk,metadata,if,discovery,node,is,master,node,settings,discovery,node,is,data,node,settings,on,disk,metadata,injector,get,instance,gateway,meta,state,class,get,meta,data,else,on,disk,metadata,meta,data,assert,on,disk,metadata,null,metadata,is,null,but,shouldn,t,validate,node,before,accepting,requests,new,bootstrap,context,environment,on,disk,metadata,transport,service,bound,address,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,bootstrap,checks,stream,collect,collectors,to,list,cluster,service,add,state,applier,transport,service,get,task,manager,discovery,start,cluster,service,start,assert,cluster,service,local,node,equals,local,node,factory,get,node,cluster,service,has,a,different,local,node,than,the,factory,provided,transport,service,accept,incoming,requests,discovery,start,initial,join,final,time,value,initial,state,timeout,discovery,settings,get,settings,configure,node,and,cluster,id,state,listener,cluster,service,if,initial,state,timeout,millis,0,final,thread,pool,thread,injector,get,instance,thread,pool,class,cluster,state,cluster,state,cluster,service,state,cluster,state,observer,observer,new,cluster,state,observer,cluster,state,cluster,service,null,logger,thread,get,thread,context,if,cluster,state,nodes,get,master,node,id,null,logger,debug,waiting,to,join,the,cluster,timeout,initial,state,timeout,final,count,down,latch,latch,new,count,down,latch,1,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,latch,count,down,override,public,void,on,cluster,service,close,latch,count,down,override,public,void,on,timeout,time,value,timeout,logger,warn,timed,out,while,waiting,for,initial,discovery,state,timeout,initial,state,timeout,latch,count,down,state,state,nodes,get,master,node,id,null,initial,state,timeout,try,latch,await,catch,interrupted,exception,e,throw,new,elasticsearch,timeout,exception,interrupted,while,waiting,for,initial,discovery,state,injector,get,instance,http,server,transport,class,start,if,get,settings,transport,service,transport,injector,get,instance,transport,service,class,write,ports,file,transport,transport,bound,address,http,server,transport,http,injector,get,instance,http,server,transport,class,write,ports,file,http,http,bound,address,logger,info,started,plugins,service,filter,plugins,cluster,plugin,class,for,each,cluster,plugin,on,node,started,return,this
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1524684173;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1525334055;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1527096592;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1528706846;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1528762805;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1529082965;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1529433467;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1531179852;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1532685069;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1533063033;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1533230566;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1534848846;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1535666657;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1535965276;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1536137328;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1536218260;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1536611444;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1537806831;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1540486836;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1541092382;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1541592065;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1541643651;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1543468844;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1544081506;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1544554541;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1544677641;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1544692527;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1545156327;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1547575044;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1548742809;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> private void writePortsFile(String type, BoundTransportAddress boundAddress);1548957580;Writes a file to the logs dir containing the ports for the given transport type;private void writePortsFile(String type, BoundTransportAddress boundAddress) {_        Path tmpPortsFile = environment.logsFile().resolve(type + ".ports.tmp")__        try (BufferedWriter writer = Files.newBufferedWriter(tmpPortsFile, Charset.forName("UTF-8"))) {_            for (TransportAddress address : boundAddress.boundAddresses()) {_                InetAddress inetAddress = InetAddress.getByName(address.getAddress())__                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n")__            }_        } catch (IOException e) {_            throw new RuntimeException("Failed to write ports file", e)__        }_        Path portsFile = environment.logsFile().resolve(type + ".ports")__        try {_            Files.move(tmpPortsFile, portsFile, StandardCopyOption.ATOMIC_MOVE)__        } catch (IOException e) {_            throw new RuntimeException("Failed to rename ports file", e)__        }_    };writes,a,file,to,the,logs,dir,containing,the,ports,for,the,given,transport,type;private,void,write,ports,file,string,type,bound,transport,address,bound,address,path,tmp,ports,file,environment,logs,file,resolve,type,ports,tmp,try,buffered,writer,writer,files,new,buffered,writer,tmp,ports,file,charset,for,name,utf,8,for,transport,address,address,bound,address,bound,addresses,inet,address,inet,address,inet,address,get,by,name,address,get,address,writer,write,network,address,format,new,inet,socket,address,inet,address,address,get,port,n,catch,ioexception,e,throw,new,runtime,exception,failed,to,write,ports,file,e,path,ports,file,environment,logs,file,resolve,type,ports,try,files,move,tmp,ports,file,ports,file,standard,copy,option,catch,ioexception,e,throw,new,runtime,exception,failed,to,rename,ports,file,e
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1536137328;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = Loggers.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            _            try {_                nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__                resourcesToClose.add(nodeEnvironment)__            } catch (IOException ex) {_                throw new IllegalStateException("Failed to create node environment", ex)__            }_            final boolean hadPredefinedNodeName = NODE_NAME_SETTING.exists(tmpSettings)__            final String nodeId = nodeEnvironment.nodeId()__            tmpSettings = addNodeNameIfNeeded(tmpSettings, nodeId)__            _            final String nodeName = NODE_NAME_SETTING.get(tmpSettings)__            if (hadPredefinedNodeName == false) {_                logger.info("node name derived from node ID [{}]_ set [{}] to override", nodeId, NODE_NAME_SETTING.getKey())__            } else {_                logger.info("node name [{}], node ID [{}]", nodeName, nodeId)__            }__            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            warnIfPreRelease(Version.CURRENT, Build.CURRENT.isSnapshot(), logger)___            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            _            final SettingsModule settingsModule = new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService(settings)___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry))__            final MetaStateService metaStateService = new MetaStateService(settings, nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator(settings)___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(settings, client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(this.settings, clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(settings, transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(settings, tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(settings,_                        searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(settings, scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(settings, transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(settings, threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,loggers,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,try,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,create,node,environment,ex,final,boolean,had,predefined,node,name,exists,tmp,settings,final,string,node,id,node,environment,node,id,tmp,settings,add,node,name,if,needed,tmp,settings,node,id,final,string,node,name,get,tmp,settings,if,had,predefined,node,name,false,logger,info,node,name,derived,from,node,id,set,to,override,node,id,get,key,else,logger,info,node,name,node,id,node,name,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,version,display,version,version,current,build,current,is,snapshot,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,warn,if,pre,release,version,current,build,current,is,snapshot,logger,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,settings,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,x,content,registry,final,meta,state,service,meta,state,service,new,meta,state,service,settings,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,settings,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,settings,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,this,settings,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,settings,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,settings,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,settings,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,settings,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,settings,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,settings,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,settings,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1536218260;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = Loggers.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            _            try {_                nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__                resourcesToClose.add(nodeEnvironment)__            } catch (IOException ex) {_                throw new IllegalStateException("Failed to create node environment", ex)__            }_            final boolean hadPredefinedNodeName = NODE_NAME_SETTING.exists(tmpSettings)__            final String nodeId = nodeEnvironment.nodeId()__            tmpSettings = addNodeNameIfNeeded(tmpSettings, nodeId)__            _            final String nodeName = NODE_NAME_SETTING.get(tmpSettings)__            if (hadPredefinedNodeName == false) {_                logger.info("node name derived from node ID [{}]_ set [{}] to override", nodeId, NODE_NAME_SETTING.getKey())__            } else {_                logger.info("node name [{}], node ID [{}]", nodeName, nodeId)__            }__            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            warnIfPreRelease(Version.CURRENT, Build.CURRENT.isSnapshot(), logger)___            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            _            final SettingsModule settingsModule = new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService(settings)___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry))__            final MetaStateService metaStateService = new MetaStateService(settings, nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator(settings)___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(settings, client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(this.settings, clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(settings, transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(settings, tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(settings,_                        searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(settings, scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(settings, transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(settings, threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,loggers,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,try,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,create,node,environment,ex,final,boolean,had,predefined,node,name,exists,tmp,settings,final,string,node,id,node,environment,node,id,tmp,settings,add,node,name,if,needed,tmp,settings,node,id,final,string,node,name,get,tmp,settings,if,had,predefined,node,name,false,logger,info,node,name,derived,from,node,id,set,to,override,node,id,get,key,else,logger,info,node,name,node,id,node,name,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,version,display,version,version,current,build,current,is,snapshot,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,warn,if,pre,release,version,current,build,current,is,snapshot,logger,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,settings,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,x,content,registry,final,meta,state,service,meta,state,service,new,meta,state,service,settings,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,settings,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,settings,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,this,settings,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,settings,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,settings,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,settings,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,settings,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,settings,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,settings,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,settings,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1536611444;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = Loggers.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            _            boolean nodeNameExplicitlyDefined = NODE_NAME_SETTING.exists(tmpSettings)__            try {_                Consumer<String> nodeIdConsumer = nodeNameExplicitlyDefined ?_                        nodeId -> {} : nodeId -> registerDerivedNodeNameWithLogger(nodeIdToNodeName(nodeId))__                nodeEnvironment = new NodeEnvironment(tmpSettings, environment, nodeIdConsumer)__                resourcesToClose.add(nodeEnvironment)__            } catch (IOException ex) {_                throw new IllegalStateException("Failed to create node environment", ex)__            }_            if (nodeNameExplicitlyDefined) {_                logger.info("node name [{}], node ID [{}]",_                        NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())__            } else {_                tmpSettings = Settings.builder()_                        .put(tmpSettings)_                        .put(NODE_NAME_SETTING.getKey(), nodeIdToNodeName(nodeEnvironment.nodeId()))_                        .build()__                logger.info("node name derived from node ID [{}]_ set [{}] to override",_                        nodeEnvironment.nodeId(), NODE_NAME_SETTING.getKey())__            }___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            warnIfPreRelease(Version.CURRENT, Build.CURRENT.isSnapshot(), logger)___            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService(settings)___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry))__            final MetaStateService metaStateService = new MetaStateService(settings, nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator(settings)___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(settings, client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(this.settings, clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(settings, transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(settings, tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(settings,_                        searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(settings, scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(settings, transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(settings, threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,loggers,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,boolean,node,name,explicitly,defined,exists,tmp,settings,try,consumer,string,node,id,consumer,node,name,explicitly,defined,node,id,node,id,register,derived,node,name,with,logger,node,id,to,node,name,node,id,node,environment,new,node,environment,tmp,settings,environment,node,id,consumer,resources,to,close,add,node,environment,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,create,node,environment,ex,if,node,name,explicitly,defined,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,else,tmp,settings,settings,builder,put,tmp,settings,put,get,key,node,id,to,node,name,node,environment,node,id,build,logger,info,node,name,derived,from,node,id,set,to,override,node,environment,node,id,get,key,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,version,display,version,version,current,build,current,is,snapshot,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,warn,if,pre,release,version,current,build,current,is,snapshot,logger,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,settings,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,x,content,registry,final,meta,state,service,meta,state,service,new,meta,state,service,settings,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,settings,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,settings,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,this,settings,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,settings,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,settings,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,settings,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,settings,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,settings,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,settings,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,settings,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1537806831;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = Loggers.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            warnIfPreRelease(Version.CURRENT, Build.CURRENT.isSnapshot(), logger)___            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService(settings)___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry))__            final MetaStateService metaStateService = new MetaStateService(settings, nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator(settings)___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(settings, client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(this.settings, clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(settings, transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(settings, tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(settings,_                        searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(settings, scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(settings, transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(settings, threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,loggers,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,version,display,version,version,current,build,current,is,snapshot,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,warn,if,pre,release,version,current,build,current,is,snapshot,logger,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,settings,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,x,content,registry,final,meta,state,service,meta,state,service,new,meta,state,service,settings,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,settings,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,settings,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,this,settings,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,settings,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,settings,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,settings,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,settings,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,settings,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,settings,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,settings,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1540486836;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            warnIfPreRelease(Version.CURRENT, Build.CURRENT.isSnapshot(), logger)___            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService(settings)___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry))__            final MetaStateService metaStateService = new MetaStateService(settings, nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator(settings)___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(settings, client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(this.settings, clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(settings, transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(settings, tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(settings,_                        searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(settings, scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(settings, transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(settings, threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,version,display,version,version,current,build,current,is,snapshot,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,warn,if,pre,release,version,current,build,current,is,snapshot,logger,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,settings,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,x,content,registry,final,meta,state,service,meta,state,service,new,meta,state,service,settings,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,settings,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,settings,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,this,settings,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,settings,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,settings,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,settings,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,settings,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,settings,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,settings,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,settings,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1541092382;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            warnIfPreRelease(Version.CURRENT, Build.CURRENT.isSnapshot(), logger)___            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,version,display,version,version,current,build,current,is,snapshot,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,warn,if,pre,release,version,current,build,current,is,snapshot,logger,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,x,content,registry,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1541592065;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,x,content,registry,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1541643651;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,x,content,registry,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1543468844;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                metaDataIndexUpgradeService, metaDataUpgrader)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile())__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1544081506;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(bigArrays)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                    metaDataIndexUpgradeService, metaDataUpgrader, transportService, clusterService, indicesService)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile(), gatewayMetaState)__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,big,arrays,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,transport,service,cluster,service,indices,service,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,gateway,meta,state,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1544554541;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(pageCacheRecycler)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                    metaDataIndexUpgradeService, metaDataUpgrader, transportService, clusterService, indicesService)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile(), gatewayMetaState)__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(PageCacheRecycler.class).toInstance(pageCacheRecycler)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,page,cache,recycler,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,transport,service,cluster,service,indices,service,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,gateway,meta,state,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,page,cache,recycler,class,to,instance,page,cache,recycler,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1544677641;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(pageCacheRecycler)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                    metaDataIndexUpgradeService, metaDataUpgrader, transportService, clusterService, indicesService)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile(), gatewayMetaState)__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(PageCacheRecycler.class).toInstance(pageCacheRecycler)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,page,cache,recycler,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,transport,service,cluster,service,indices,service,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,gateway,meta,state,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,page,cache,recycler,class,to,instance,page,cache,recycler,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1544692527;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            originalSettings = environment.settings()__            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(pageCacheRecycler)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                    metaDataIndexUpgradeService, metaDataUpgrader, transportService, clusterService, indicesService)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile(), gatewayMetaState)__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService, threadPool)__            resourcesToClose.add(persistentTasksClusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(PageCacheRecycler.class).toInstance(pageCacheRecycler)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,original,settings,environment,settings,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,page,cache,recycler,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,transport,service,cluster,service,indices,service,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,gateway,meta,state,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,thread,pool,resources,to,close,add,persistent,tasks,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,page,cache,recycler,class,to,instance,page,cache,recycler,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1545156327;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(pageCacheRecycler)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                    metaDataIndexUpgradeService, metaDataUpgrader, transportService, clusterService, indicesService)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile(), gatewayMetaState)__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService, threadPool)__            resourcesToClose.add(persistentTasksClusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(PageCacheRecycler.class).toInstance(pageCacheRecycler)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,page,cache,recycler,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,transport,service,cluster,service,indices,service,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,gateway,meta,state,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,thread,pool,resources,to,close,add,persistent,tasks,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,page,cache,recycler,class,to,instance,page,cache,recycler,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1547575044;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(),_                environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(pageCacheRecycler)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                    metaDataIndexUpgradeService, metaDataUpgrader, transportService, clusterService, indicesService)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile(), gatewayMetaState)__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService, threadPool)__            resourcesToClose.add(persistentTasksClusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(PageCacheRecycler.class).toInstance(pageCacheRecycler)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,page,cache,recycler,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,transport,service,cluster,service,indices,service,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,gateway,meta,state,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,thread,pool,resources,to,close,add,persistent,tasks,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,page,cache,recycler,class,to,instance,page,cache,recycler,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1548742809;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(),_                environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(pageCacheRecycler)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                    metaDataIndexUpgradeService, metaDataUpgrader, transportService, clusterService, indicesService)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile(), gatewayMetaState)__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService, threadPool)__            resourcesToClose.add(persistentTasksClusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(PageCacheRecycler.class).toInstance(pageCacheRecycler)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,page,cache,recycler,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,transport,service,cluster,service,indices,service,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,gateway,meta,state,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,thread,pool,resources,to,close,add,persistent,tasks,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,page,cache,recycler,class,to,instance,page,cache,recycler,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected Node(             final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings);1548957580;Constructs a node__@param environment                the environment for this node_@param classpathPlugins           the plugins to be loaded from the classpath_@param forbidPrivateIndexSettings whether or not private index settings are forbidden when creating an index_ this is used in the_test framework for tests that rely on being able to set private settings;protected Node(_            final Environment environment, Collection<Class<? extends Plugin>> classpathPlugins, boolean forbidPrivateIndexSettings) {_        logger = LogManager.getLogger(Node.class)__        final List<Closeable> resourcesToClose = new ArrayList<>()_ _        boolean success = false__        try {_            Settings tmpSettings = Settings.builder().put(environment.settings())_                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build()___            nodeEnvironment = new NodeEnvironment(tmpSettings, environment)__            resourcesToClose.add(nodeEnvironment)__            logger.info("node name [{}], node ID [{}]",_                    NODE_NAME_SETTING.get(tmpSettings), nodeEnvironment.nodeId())___            final JvmInfo jvmInfo = JvmInfo.jvmInfo()__            logger.info(_                "version[{}], pid[{}], build[{}/{}/{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",_                Build.CURRENT.getQualifiedVersion(),_                jvmInfo.pid(),_                Build.CURRENT.flavor().displayName(),_                Build.CURRENT.type().displayName(),_                Build.CURRENT.shortHash(),_                Build.CURRENT.date(),_                Constants.OS_NAME,_                Constants.OS_VERSION,_                Constants.OS_ARCH,_                Constants.JVM_VENDOR,_                Constants.JVM_NAME,_                Constants.JAVA_VERSION,_                Constants.JVM_VERSION)__            logger.info("JVM arguments {}", Arrays.toString(jvmInfo.getInputArguments()))__            if (Build.CURRENT.isProductionRelease() == false) {_                logger.warn(_                    "version [{}] is a pre-release version of Elasticsearch and is not suitable for production",_                    Build.CURRENT.getQualifiedVersion())__            }__            if (logger.isDebugEnabled()) {_                logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",_                    environment.configFile(), Arrays.toString(environment.dataFiles()), environment.logsFile(), environment.pluginsFile())__            }__            this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(),_                environment.pluginsFile(), classpathPlugins)__            this.settings = pluginsService.updatedSettings()__            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId())___            _            _            this.environment = new Environment(this.settings, environment.configFile())__            Environment.assertEquivalent(environment, this.environment)___            final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings)___            final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]))__            resourcesToClose.add(() -> ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS))__            _            DeprecationLogger.setThreadContext(threadPool.getThreadContext())__            resourcesToClose.add(() -> DeprecationLogger.removeThreadContext(threadPool.getThreadContext()))___            final List<Setting<?>> additionalSettings = new ArrayList<>(pluginsService.getPluginSettings())__            final List<String> additionalSettingsFilter = new ArrayList<>(pluginsService.getPluginSettingsFilter())__            for (final ExecutorBuilder<?> builder : threadPool.builders()) {_                additionalSettings.addAll(builder.getRegisteredSettings())__            }_            client = new NodeClient(settings, threadPool)__            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool)__            final ScriptModule scriptModule = new ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class))__            AnalysisModule analysisModule = new AnalysisModule(this.environment, pluginsService.filterPlugins(AnalysisPlugin.class))__            _            __            final Set<SettingUpgrader<?>> settingsUpgraders = pluginsService.filterPlugins(Plugin.class)_                    .stream()_                    .map(Plugin::getSettingUpgraders)_                    .flatMap(List::stream)_                    .collect(Collectors.toSet())___            final SettingsModule settingsModule =_                    new SettingsModule(this.settings, additionalSettings, additionalSettingsFilter, settingsUpgraders)__            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings())__            resourcesToClose.add(resourceWatcherService)__            final NetworkService networkService = new NetworkService(_                getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)))___            List<ClusterPlugin> clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class)__            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool)__            clusterService.addStateApplier(scriptModule.getScriptService())__            resourcesToClose.add(clusterService)__            final IngestService ingestService = new IngestService(clusterService, threadPool, this.environment,_                scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class))__            final DiskThresholdMonitor listener = new DiskThresholdMonitor(settings, clusterService::state,_                clusterService.getClusterSettings(), client)__            final ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,_                listener::onNewInfo)__            final UsageService usageService = new UsageService()___            ModulesBuilder modules = new ModulesBuilder()__            _            for (Module pluginModule : pluginsService.createGuiceModules()) {_                modules.add(pluginModule)__            }_            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService)__            ClusterModule clusterModule = new ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService)__            modules.add(clusterModule)__            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class))__            modules.add(indicesModule)___            SearchModule searchModule = new SearchModule(settings, false, pluginsService.filterPlugins(SearchPlugin.class))__            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),_                settingsModule.getClusterSettings())__            resourcesToClose.add(circuitBreakerService)__            modules.add(new GatewayModule())____            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings)__            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService)__            resourcesToClose.add(pageCacheRecycler)__            modules.add(settingsModule)__            List<NamedWriteableRegistry.Entry> namedWriteables = Stream.of(_                NetworkModule.getNamedWriteables().stream(),_                indicesModule.getNamedWriteables().stream(),_                searchModule.getNamedWriteables().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedWriteables().stream()),_                ClusterModule.getNamedWriteables().stream())_                .flatMap(Function.identity()).collect(Collectors.toList())__            final NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__            NamedXContentRegistry xContentRegistry = new NamedXContentRegistry(Stream.of(_                NetworkModule.getNamedXContents().stream(),_                indicesModule.getNamedXContents().stream(),_                searchModule.getNamedXContents().stream(),_                pluginsService.filterPlugins(Plugin.class).stream()_                    .flatMap(p -> p.getNamedXContent().stream()),_                ClusterModule.getNamedXWriteables().stream())_                .flatMap(Function.identity()).collect(toList()))__            final MetaStateService metaStateService = new MetaStateService(nodeEnvironment, xContentRegistry)___            _            final Collection<EnginePlugin> enginePlugins = pluginsService.filterPlugins(EnginePlugin.class)__            final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders =_                    Stream.concat(_                            indicesModule.getEngineFactories().stream(),_                            enginePlugins.stream().map(plugin -> plugin::getEngineFactory))_                    .collect(Collectors.toList())____            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories =_                    pluginsService.filterPlugins(IndexStorePlugin.class)_                            .stream()_                            .map(IndexStorePlugin::getIndexStoreFactories)_                            .flatMap(m -> m.entrySet().stream())_                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___            final IndicesService indicesService =_                    new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry, analysisModule.getAnalysisRegistry(),_                            clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,_                            threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays,_                            scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders, indexStoreFactories)___            final AliasValidator aliasValidator = new AliasValidator()___            final MetaDataCreateIndexService metaDataCreateIndexService = new MetaDataCreateIndexService(_                    settings,_                    clusterService,_                    indicesService,_                    clusterModule.getAllocationService(),_                    aliasValidator,_                    environment,_                    settingsModule.getIndexScopedSettings(),_                    threadPool,_                    xContentRegistry,_                    forbidPrivateIndexSettings)___            Collection<Object> pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()_                .flatMap(p -> p.createComponents(client, clusterService, threadPool, resourceWatcherService,_                                                 scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,_                                                 namedWriteableRegistry).stream())_                .collect(Collectors.toList())___            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),_                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),_                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService)__            modules.add(actionModule)___            final RestController restController = actionModule.getRestController()__            final NetworkModule networkModule = new NetworkModule(settings, false, pluginsService.filterPlugins(NetworkPlugin.class),_                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,_                networkService, restController)__            Collection<UnaryOperator<Map<String, MetaData.Custom>>> customMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getCustomMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<Map<String, IndexTemplateMetaData>>> indexTemplateMetaDataUpgraders =_                pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexTemplateMetaDataUpgrader)_                    .collect(Collectors.toList())__            Collection<UnaryOperator<IndexMetaData>> indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()_                    .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList())__            final MetaDataUpgrader metaDataUpgrader = new MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders)__            final MetaDataIndexUpgradeService metaDataIndexUpgradeService = new MetaDataIndexUpgradeService(settings, xContentRegistry,_                indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders)__            new TemplateUpgradeService(client, clusterService, threadPool, indexTemplateMetaDataUpgraders)__            final Transport transport = networkModule.getTransportSupplier().get()__            Set<String> taskHeaders = Stream.concat(_                pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.getTaskHeaders().stream()),_                Stream.of(Task.X_OPAQUE_ID)_            ).collect(Collectors.toSet())__            final TransportService transportService = newTransportService(settings, transport, threadPool,_                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders)__            final GatewayMetaState gatewayMetaState = new GatewayMetaState(settings, nodeEnvironment, metaStateService,_                    metaDataIndexUpgradeService, metaDataUpgrader, transportService, clusterService, indicesService)__            final ResponseCollectorService responseCollectorService = new ResponseCollectorService(clusterService)__            final SearchTransportService searchTransportService =  new SearchTransportService(transportService,_                SearchExecutionStatsCollector.makeWrapper(responseCollectorService))__            final HttpServerTransport httpServerTransport = newHttpTransport(networkModule)____            modules.add(new RepositoriesModule(this.environment, pluginsService.filterPlugins(RepositoryPlugin.class), transportService,_                clusterService, threadPool, xContentRegistry))___            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService, namedWriteableRegistry,_                networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),_                clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),_                clusterModule.getAllocationService(), environment.configFile(), gatewayMetaState)__            this.nodeService = new NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),_                transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),_                httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,_                searchTransportService)___            final SearchService searchService = newSearchService(clusterService, indicesService,_                threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),_                responseCollectorService)___            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService_                .filterPlugins(PersistentTaskPlugin.class).stream()_                .map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule))_                .flatMap(List::stream)_                .collect(toList())___            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(tasksExecutors)__            final PersistentTasksClusterService persistentTasksClusterService =_                new PersistentTasksClusterService(settings, registry, clusterService, threadPool)__            resourcesToClose.add(persistentTasksClusterService)__            final PersistentTasksService persistentTasksService = new PersistentTasksService(clusterService, threadPool, client)___            modules.add(b -> {_                    b.bind(Node.class).toInstance(this)__                    b.bind(NodeService.class).toInstance(nodeService)__                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry)__                    b.bind(PluginsService.class).toInstance(pluginsService)__                    b.bind(Client.class).toInstance(client)__                    b.bind(NodeClient.class).toInstance(client)__                    b.bind(Environment.class).toInstance(this.environment)__                    b.bind(ThreadPool.class).toInstance(threadPool)__                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment)__                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService)__                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)__                    b.bind(BigArrays.class).toInstance(bigArrays)__                    b.bind(PageCacheRecycler.class).toInstance(pageCacheRecycler)__                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService())__                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry())__                    b.bind(IngestService.class).toInstance(ingestService)__                    b.bind(UsageService.class).toInstance(usageService)__                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry)__                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader)__                    b.bind(MetaStateService.class).toInstance(metaStateService)__                    b.bind(IndicesService.class).toInstance(indicesService)__                    b.bind(AliasValidator.class).toInstance(aliasValidator)__                    b.bind(MetaDataCreateIndexService.class).toInstance(metaDataCreateIndexService)__                    b.bind(SearchService.class).toInstance(searchService)__                    b.bind(SearchTransportService.class).toInstance(searchTransportService)__                    b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(searchService::createReduceContext))__                    b.bind(Transport.class).toInstance(transport)__                    b.bind(TransportService.class).toInstance(transportService)__                    b.bind(NetworkService.class).toInstance(networkService)__                    b.bind(UpdateHelper.class).toInstance(new UpdateHelper(scriptModule.getScriptService()))__                    b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService)__                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService)__                    b.bind(GatewayMetaState.class).toInstance(gatewayMetaState)__                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery())__                    {_                        RecoverySettings recoverySettings = new RecoverySettings(settings, settingsModule.getClusterSettings())__                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings)__                        b.bind(PeerRecoverySourceService.class).toInstance(new PeerRecoverySourceService(transportService,_                                indicesService, recoverySettings))__                        b.bind(PeerRecoveryTargetService.class).toInstance(new PeerRecoveryTargetService(threadPool,_                                transportService, recoverySettings, clusterService))__                    }_                    b.bind(HttpServerTransport.class).toInstance(httpServerTransport)__                    pluginComponents.stream().forEach(p -> b.bind((Class) p.getClass()).toInstance(p))__                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService)__                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService)__                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry)__                }_            )__            injector = modules.createInjector()___            _            clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class))___            List<LifecycleComponent> pluginLifecycleComponents = pluginComponents.stream()_                .filter(p -> p instanceof LifecycleComponent)_                .map(p -> (LifecycleComponent) p).collect(Collectors.toList())__            pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()_                .map(injector::getInstance).collect(Collectors.toList()))__            resourcesToClose.addAll(pluginLifecycleComponents)__            this.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents)__            client.initialize(injector.getInstance(new Key<Map<Action, TransportAction>>() {}),_                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService())___            logger.debug("initializing HTTP handlers ...")__            actionModule.initRestHandlers(() -> clusterService.state().nodes())__            logger.info("initialized")___            success = true__        } catch (IOException ex) {_            throw new ElasticsearchException("failed to bind service", ex)__        } finally {_            if (!success) {_                IOUtils.closeWhileHandlingException(resourcesToClose)__            }_        }_    };constructs,a,node,param,environment,the,environment,for,this,node,param,classpath,plugins,the,plugins,to,be,loaded,from,the,classpath,param,forbid,private,index,settings,whether,or,not,private,index,settings,are,forbidden,when,creating,an,index,this,is,used,in,the,test,framework,for,tests,that,rely,on,being,able,to,set,private,settings;protected,node,final,environment,environment,collection,class,extends,plugin,classpath,plugins,boolean,forbid,private,index,settings,logger,log,manager,get,logger,node,class,final,list,closeable,resources,to,close,new,array,list,boolean,success,false,try,settings,tmp,settings,settings,builder,put,environment,settings,put,client,get,key,build,node,environment,new,node,environment,tmp,settings,environment,resources,to,close,add,node,environment,logger,info,node,name,node,id,get,tmp,settings,node,environment,node,id,final,jvm,info,jvm,info,jvm,info,jvm,info,logger,info,version,pid,build,os,jvm,build,current,get,qualified,version,jvm,info,pid,build,current,flavor,display,name,build,current,type,display,name,build,current,short,hash,build,current,date,constants,constants,constants,constants,constants,constants,constants,logger,info,jvm,arguments,arrays,to,string,jvm,info,get,input,arguments,if,build,current,is,production,release,false,logger,warn,version,is,a,pre,release,version,of,elasticsearch,and,is,not,suitable,for,production,build,current,get,qualified,version,if,logger,is,debug,enabled,logger,debug,using,config,data,logs,plugins,environment,config,file,arrays,to,string,environment,data,files,environment,logs,file,environment,plugins,file,this,plugins,service,new,plugins,service,tmp,settings,environment,config,file,environment,modules,file,environment,plugins,file,classpath,plugins,this,settings,plugins,service,updated,settings,local,node,factory,new,local,node,factory,settings,node,environment,node,id,this,environment,new,environment,this,settings,environment,config,file,environment,assert,equivalent,environment,this,environment,final,list,executor,builder,executor,builders,plugins,service,get,executor,builders,settings,final,thread,pool,thread,pool,new,thread,pool,settings,executor,builders,to,array,new,executor,builder,0,resources,to,close,add,thread,pool,terminate,thread,pool,10,time,unit,seconds,deprecation,logger,set,thread,context,thread,pool,get,thread,context,resources,to,close,add,deprecation,logger,remove,thread,context,thread,pool,get,thread,context,final,list,setting,additional,settings,new,array,list,plugins,service,get,plugin,settings,final,list,string,additional,settings,filter,new,array,list,plugins,service,get,plugin,settings,filter,for,final,executor,builder,builder,thread,pool,builders,additional,settings,add,all,builder,get,registered,settings,client,new,node,client,settings,thread,pool,final,resource,watcher,service,resource,watcher,service,new,resource,watcher,service,settings,thread,pool,final,script,module,script,module,new,script,module,settings,plugins,service,filter,plugins,script,plugin,class,analysis,module,analysis,module,new,analysis,module,this,environment,plugins,service,filter,plugins,analysis,plugin,class,final,set,setting,upgrader,settings,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,setting,upgraders,flat,map,list,stream,collect,collectors,to,set,final,settings,module,settings,module,new,settings,module,this,settings,additional,settings,additional,settings,filter,settings,upgraders,script,module,register,cluster,settings,listeners,settings,module,get,cluster,settings,resources,to,close,add,resource,watcher,service,final,network,service,network,service,new,network,service,get,custom,name,resolvers,plugins,service,filter,plugins,discovery,plugin,class,list,cluster,plugin,cluster,plugins,plugins,service,filter,plugins,cluster,plugin,class,final,cluster,service,cluster,service,new,cluster,service,settings,settings,module,get,cluster,settings,thread,pool,cluster,service,add,state,applier,script,module,get,script,service,resources,to,close,add,cluster,service,final,ingest,service,ingest,service,new,ingest,service,cluster,service,thread,pool,this,environment,script,module,get,script,service,analysis,module,get,analysis,registry,plugins,service,filter,plugins,ingest,plugin,class,final,disk,threshold,monitor,listener,new,disk,threshold,monitor,settings,cluster,service,state,cluster,service,get,cluster,settings,client,final,cluster,info,service,cluster,info,service,new,cluster,info,service,settings,cluster,service,thread,pool,client,listener,on,new,info,final,usage,service,usage,service,new,usage,service,modules,builder,modules,new,modules,builder,for,module,plugin,module,plugins,service,create,guice,modules,modules,add,plugin,module,final,monitor,service,monitor,service,new,monitor,service,settings,node,environment,thread,pool,cluster,info,service,cluster,module,cluster,module,new,cluster,module,settings,cluster,service,cluster,plugins,cluster,info,service,modules,add,cluster,module,indices,module,indices,module,new,indices,module,plugins,service,filter,plugins,mapper,plugin,class,modules,add,indices,module,search,module,search,module,new,search,module,settings,false,plugins,service,filter,plugins,search,plugin,class,circuit,breaker,service,circuit,breaker,service,create,circuit,breaker,service,settings,module,get,settings,settings,module,get,cluster,settings,resources,to,close,add,circuit,breaker,service,modules,add,new,gateway,module,page,cache,recycler,page,cache,recycler,create,page,cache,recycler,settings,big,arrays,big,arrays,create,big,arrays,page,cache,recycler,circuit,breaker,service,resources,to,close,add,page,cache,recycler,modules,add,settings,module,list,named,writeable,registry,entry,named,writeables,stream,of,network,module,get,named,writeables,stream,indices,module,get,named,writeables,stream,search,module,get,named,writeables,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,writeables,stream,cluster,module,get,named,writeables,stream,flat,map,function,identity,collect,collectors,to,list,final,named,writeable,registry,named,writeable,registry,new,named,writeable,registry,named,writeables,named,xcontent,registry,x,content,registry,new,named,xcontent,registry,stream,of,network,module,get,named,xcontents,stream,indices,module,get,named,xcontents,stream,search,module,get,named,xcontents,stream,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,get,named,xcontent,stream,cluster,module,get,named,xwriteables,stream,flat,map,function,identity,collect,to,list,final,meta,state,service,meta,state,service,new,meta,state,service,node,environment,x,content,registry,final,collection,engine,plugin,engine,plugins,plugins,service,filter,plugins,engine,plugin,class,final,collection,function,index,settings,optional,engine,factory,engine,factory,providers,stream,concat,indices,module,get,engine,factories,stream,engine,plugins,stream,map,plugin,plugin,get,engine,factory,collect,collectors,to,list,final,map,string,function,index,settings,index,store,index,store,factories,plugins,service,filter,plugins,index,store,plugin,class,stream,map,index,store,plugin,get,index,store,factories,flat,map,m,m,entry,set,stream,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,indices,service,indices,service,new,indices,service,settings,plugins,service,node,environment,x,content,registry,analysis,module,get,analysis,registry,cluster,module,get,index,name,expression,resolver,indices,module,get,mapper,registry,named,writeable,registry,thread,pool,settings,module,get,index,scoped,settings,circuit,breaker,service,big,arrays,script,module,get,script,service,client,meta,state,service,engine,factory,providers,index,store,factories,final,alias,validator,alias,validator,new,alias,validator,final,meta,data,create,index,service,meta,data,create,index,service,new,meta,data,create,index,service,settings,cluster,service,indices,service,cluster,module,get,allocation,service,alias,validator,environment,settings,module,get,index,scoped,settings,thread,pool,x,content,registry,forbid,private,index,settings,collection,object,plugin,components,plugins,service,filter,plugins,plugin,class,stream,flat,map,p,p,create,components,client,cluster,service,thread,pool,resource,watcher,service,script,module,get,script,service,x,content,registry,environment,node,environment,named,writeable,registry,stream,collect,collectors,to,list,action,module,action,module,new,action,module,false,settings,cluster,module,get,index,name,expression,resolver,settings,module,get,index,scoped,settings,settings,module,get,cluster,settings,settings,module,get,settings,filter,thread,pool,plugins,service,filter,plugins,action,plugin,class,client,circuit,breaker,service,usage,service,modules,add,action,module,final,rest,controller,rest,controller,action,module,get,rest,controller,final,network,module,network,module,new,network,module,settings,false,plugins,service,filter,plugins,network,plugin,class,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,rest,controller,collection,unary,operator,map,string,meta,data,custom,custom,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,custom,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,map,string,index,template,meta,data,index,template,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,template,meta,data,upgrader,collect,collectors,to,list,collection,unary,operator,index,meta,data,index,meta,data,upgraders,plugins,service,filter,plugins,plugin,class,stream,map,plugin,get,index,meta,data,upgrader,collect,collectors,to,list,final,meta,data,upgrader,meta,data,upgrader,new,meta,data,upgrader,custom,meta,data,upgraders,index,template,meta,data,upgraders,final,meta,data,index,upgrade,service,meta,data,index,upgrade,service,new,meta,data,index,upgrade,service,settings,x,content,registry,indices,module,get,mapper,registry,settings,module,get,index,scoped,settings,index,meta,data,upgraders,new,template,upgrade,service,client,cluster,service,thread,pool,index,template,meta,data,upgraders,final,transport,transport,network,module,get,transport,supplier,get,set,string,task,headers,stream,concat,plugins,service,filter,plugins,action,plugin,class,stream,flat,map,p,p,get,task,headers,stream,stream,of,task,collect,collectors,to,set,final,transport,service,transport,service,new,transport,service,settings,transport,thread,pool,network,module,get,transport,interceptor,local,node,factory,settings,module,get,cluster,settings,task,headers,final,gateway,meta,state,gateway,meta,state,new,gateway,meta,state,settings,node,environment,meta,state,service,meta,data,index,upgrade,service,meta,data,upgrader,transport,service,cluster,service,indices,service,final,response,collector,service,response,collector,service,new,response,collector,service,cluster,service,final,search,transport,service,search,transport,service,new,search,transport,service,transport,service,search,execution,stats,collector,make,wrapper,response,collector,service,final,http,server,transport,http,server,transport,new,http,transport,network,module,modules,add,new,repositories,module,this,environment,plugins,service,filter,plugins,repository,plugin,class,transport,service,cluster,service,thread,pool,x,content,registry,final,discovery,module,discovery,module,new,discovery,module,this,settings,thread,pool,transport,service,named,writeable,registry,network,service,cluster,service,get,master,service,cluster,service,get,cluster,applier,service,cluster,service,get,cluster,settings,plugins,service,filter,plugins,discovery,plugin,class,cluster,module,get,allocation,service,environment,config,file,gateway,meta,state,this,node,service,new,node,service,settings,thread,pool,monitor,service,discovery,module,get,discovery,transport,service,indices,service,plugins,service,circuit,breaker,service,script,module,get,script,service,http,server,transport,ingest,service,cluster,service,settings,module,get,settings,filter,response,collector,service,search,transport,service,final,search,service,search,service,new,search,service,cluster,service,indices,service,thread,pool,script,module,get,script,service,big,arrays,search,module,get,fetch,phase,response,collector,service,final,list,persistent,tasks,executor,tasks,executors,plugins,service,filter,plugins,persistent,task,plugin,class,stream,map,p,p,get,persistent,tasks,executor,cluster,service,thread,pool,client,settings,module,flat,map,list,stream,collect,to,list,final,persistent,tasks,executor,registry,registry,new,persistent,tasks,executor,registry,tasks,executors,final,persistent,tasks,cluster,service,persistent,tasks,cluster,service,new,persistent,tasks,cluster,service,settings,registry,cluster,service,thread,pool,resources,to,close,add,persistent,tasks,cluster,service,final,persistent,tasks,service,persistent,tasks,service,new,persistent,tasks,service,cluster,service,thread,pool,client,modules,add,b,b,bind,node,class,to,instance,this,b,bind,node,service,class,to,instance,node,service,b,bind,named,xcontent,registry,class,to,instance,x,content,registry,b,bind,plugins,service,class,to,instance,plugins,service,b,bind,client,class,to,instance,client,b,bind,node,client,class,to,instance,client,b,bind,environment,class,to,instance,this,environment,b,bind,thread,pool,class,to,instance,thread,pool,b,bind,node,environment,class,to,instance,node,environment,b,bind,resource,watcher,service,class,to,instance,resource,watcher,service,b,bind,circuit,breaker,service,class,to,instance,circuit,breaker,service,b,bind,big,arrays,class,to,instance,big,arrays,b,bind,page,cache,recycler,class,to,instance,page,cache,recycler,b,bind,script,service,class,to,instance,script,module,get,script,service,b,bind,analysis,registry,class,to,instance,analysis,module,get,analysis,registry,b,bind,ingest,service,class,to,instance,ingest,service,b,bind,usage,service,class,to,instance,usage,service,b,bind,named,writeable,registry,class,to,instance,named,writeable,registry,b,bind,meta,data,upgrader,class,to,instance,meta,data,upgrader,b,bind,meta,state,service,class,to,instance,meta,state,service,b,bind,indices,service,class,to,instance,indices,service,b,bind,alias,validator,class,to,instance,alias,validator,b,bind,meta,data,create,index,service,class,to,instance,meta,data,create,index,service,b,bind,search,service,class,to,instance,search,service,b,bind,search,transport,service,class,to,instance,search,transport,service,b,bind,search,phase,controller,class,to,instance,new,search,phase,controller,search,service,create,reduce,context,b,bind,transport,class,to,instance,transport,b,bind,transport,service,class,to,instance,transport,service,b,bind,network,service,class,to,instance,network,service,b,bind,update,helper,class,to,instance,new,update,helper,script,module,get,script,service,b,bind,meta,data,index,upgrade,service,class,to,instance,meta,data,index,upgrade,service,b,bind,cluster,info,service,class,to,instance,cluster,info,service,b,bind,gateway,meta,state,class,to,instance,gateway,meta,state,b,bind,discovery,class,to,instance,discovery,module,get,discovery,recovery,settings,recovery,settings,new,recovery,settings,settings,settings,module,get,cluster,settings,process,recovery,settings,settings,module,get,cluster,settings,recovery,settings,b,bind,peer,recovery,source,service,class,to,instance,new,peer,recovery,source,service,transport,service,indices,service,recovery,settings,b,bind,peer,recovery,target,service,class,to,instance,new,peer,recovery,target,service,thread,pool,transport,service,recovery,settings,cluster,service,b,bind,http,server,transport,class,to,instance,http,server,transport,plugin,components,stream,for,each,p,b,bind,class,p,get,class,to,instance,p,b,bind,persistent,tasks,service,class,to,instance,persistent,tasks,service,b,bind,persistent,tasks,cluster,service,class,to,instance,persistent,tasks,cluster,service,b,bind,persistent,tasks,executor,registry,class,to,instance,registry,injector,modules,create,injector,cluster,module,get,allocation,service,set,gateway,allocator,injector,get,instance,gateway,allocator,class,list,lifecycle,component,plugin,lifecycle,components,plugin,components,stream,filter,p,p,instanceof,lifecycle,component,map,p,lifecycle,component,p,collect,collectors,to,list,plugin,lifecycle,components,add,all,plugins,service,get,guice,service,classes,stream,map,injector,get,instance,collect,collectors,to,list,resources,to,close,add,all,plugin,lifecycle,components,this,plugin,lifecycle,components,collections,unmodifiable,list,plugin,lifecycle,components,client,initialize,injector,get,instance,new,key,map,action,transport,action,cluster,service,local,node,get,id,transport,service,get,remote,cluster,service,logger,debug,initializing,http,handlers,action,module,init,rest,handlers,cluster,service,state,nodes,logger,info,initialized,success,true,catch,ioexception,ex,throw,new,elasticsearch,exception,failed,to,bind,service,ex,finally,if,success,ioutils,close,while,handling,exception,resources,to,close
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1525334055;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1527096592;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1528706846;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1528762805;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1529082965;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1529433467;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1531179852;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1532685069;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1533063033;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1533230566;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1534848846;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1535666657;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1535965276;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1536137328;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1536218260;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1536611444;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1537806831;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1540486836;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1541092382;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1541592065;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1541643651;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1543468844;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1544081506;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1544554541;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1544677641;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1544692527;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1545156327;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1547575044;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1548742809;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> protected HttpServerTransport newHttpTransport(NetworkModule networkModule);1548957580;Constructs a {@link org.elasticsearch.http.HttpServerTransport} which may be mocked for tests.;protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {_        return networkModule.getHttpServerTransportSupplier().get()__    };constructs,a,link,org,elasticsearch,http,http,server,transport,which,may,be,mocked,for,tests;protected,http,server,transport,new,http,transport,network,module,network,module,return,network,module,get,http,server,transport,supplier,get
Node -> public Environment getEnvironment();1524684173;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1525334055;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1527096592;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1528706846;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1528762805;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1529082965;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1529433467;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1531179852;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1532685069;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1533063033;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1533230566;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1534848846;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1535666657;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1535965276;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1536137328;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1536218260;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1536611444;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1537806831;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1540486836;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1541092382;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1541592065;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1541643651;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1543468844;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1544081506;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1544554541;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1544677641;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1544692527;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1545156327;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1547575044;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1548742809;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> public Environment getEnvironment();1548957580;Returns the environment of the node;public Environment getEnvironment() {_        return environment__    };returns,the,environment,of,the,node;public,environment,get,environment,return,environment
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1524684173;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1525334055;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1527096592;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1528706846;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1528762805;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1529082965;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1529433467;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1531179852;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1532685069;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1533063033;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1533230566;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1534848846;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1535666657;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1535965276;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1536137328;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1536218260;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1536611444;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1537806831;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1540486836;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1541092382;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1541592065;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1541643651;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1543468844;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1544081506;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1544554541;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService, CircuitBreaker.REQUEST)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service,circuit,breaker,request
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1544677641;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService, CircuitBreaker.REQUEST)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service,circuit,breaker,request
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1544692527;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService, CircuitBreaker.REQUEST)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service,circuit,breaker,request
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1545156327;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService, CircuitBreaker.REQUEST)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service,circuit,breaker,request
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1547575044;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService, CircuitBreaker.REQUEST)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service,circuit,breaker,request
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1548742809;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService, CircuitBreaker.REQUEST)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service,circuit,breaker,request
Node -> BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService);1548957580;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {_        return new BigArrays(pageCacheRecycler, circuitBreakerService, CircuitBreaker.REQUEST)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;big,arrays,create,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,return,new,big,arrays,page,cache,recycler,circuit,breaker,service,circuit,breaker,request
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1524684173;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1525334055;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1527096592;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1528706846;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1528762805;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1529082965;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1529433467;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1531179852;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1532685069;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1533063033;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1533230566;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1534848846;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1535666657;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1535965276;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1536137328;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1536218260;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1536611444;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1537806831;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1540486836;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1541092382;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1541592065;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1541643651;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1543468844;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1544081506;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1544554541;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1544677641;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1544692527;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1545156327;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1547575044;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1548742809;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings);1548957580;Creates a new {@link CircuitBreakerService} based on the settings provided._@see #BREAKER_TYPE_KEY;public static CircuitBreakerService createCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {_        String type = BREAKER_TYPE_KEY.get(settings)__        if (type.equals("hierarchy")) {_            return new HierarchyCircuitBreakerService(settings, clusterSettings)__        } else if (type.equals("none")) {_            return new NoneCircuitBreakerService()__        } else {_            throw new IllegalArgumentException("Unknown circuit breaker type [" + type + "]")__        }_    };creates,a,new,link,circuit,breaker,service,based,on,the,settings,provided,see;public,static,circuit,breaker,service,create,circuit,breaker,service,settings,settings,cluster,settings,cluster,settings,string,type,get,settings,if,type,equals,hierarchy,return,new,hierarchy,circuit,breaker,service,settings,cluster,settings,else,if,type,equals,none,return,new,none,circuit,breaker,service,else,throw,new,illegal,argument,exception,unknown,circuit,breaker,type,type
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1524684173;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1525334055;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1527096592;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1528706846;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1528762805;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1529082965;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1529433467;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1531179852;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1532685069;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1533063033;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1533230566;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1534848846;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1535666657;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1535965276;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1536137328;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1536218260;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1536611444;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1537806831;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1540486836;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1541092382;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1541592065;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1541643651;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1543468844;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1544081506;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1544554541;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1544677641;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1544692527;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1545156327;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1547575044;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1548742809;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins);1548957580;Get Custom Name Resolvers list based on a Discovery Plugins list_@param discoveryPlugins Discovery plugins list;private List<NetworkService.CustomNameResolver> getCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {_        List<NetworkService.CustomNameResolver> customNameResolvers = new ArrayList<>()__        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {_            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings)__            if (customNameResolver != null) {_                customNameResolvers.add(customNameResolver)__            }_        }_        return customNameResolvers__    };get,custom,name,resolvers,list,based,on,a,discovery,plugins,list,param,discovery,plugins,discovery,plugins,list;private,list,network,service,custom,name,resolver,get,custom,name,resolvers,list,discovery,plugin,discovery,plugins,list,network,service,custom,name,resolver,custom,name,resolvers,new,array,list,for,discovery,plugin,discovery,plugin,discovery,plugins,network,service,custom,name,resolver,custom,name,resolver,discovery,plugin,get,custom,name,resolver,settings,if,custom,name,resolver,null,custom,name,resolvers,add,custom,name,resolver,return,custom,name,resolvers
Node -> public Settings originalSettings();1527096592;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1528706846;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1528762805;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1529082965;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1529433467;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1531179852;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1532685069;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1533063033;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1533230566;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1534848846;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1535666657;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1535965276;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1536137328;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1536218260;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1536611444;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1537806831;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1540486836;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1541092382;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1541592065;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1541643651;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1543468844;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1544081506;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1544554541;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1544677641;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> public Settings originalSettings();1544692527;The original settings that were used to create the node;public Settings originalSettings() {_        return originalSettings__    };the,original,settings,that,were,used,to,create,the,node;public,settings,original,settings,return,original,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1524684173;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1525334055;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1527096592;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1528706846;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1528762805;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1529082965;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1529433467;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1531179852;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1532685069;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1533063033;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1533230566;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1534848846;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1535666657;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1535965276;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1536137328;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1536218260;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1536611444;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1537806831;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1540486836;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1541092382;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1541592065;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1541643651;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1543468844;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1544081506;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1544554541;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1544677641;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1544692527;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1545156327;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1547575044;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1548742809;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> PageCacheRecycler createPageCacheRecycler(Settings settings);1548957580;Creates a new {@link BigArrays} instance used for this node._This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing;PageCacheRecycler createPageCacheRecycler(Settings settings) {_        return new PageCacheRecycler(settings)__    };creates,a,new,link,big,arrays,instance,used,for,this,node,this,method,can,be,overwritten,by,subclasses,to,change,their,link,big,arrays,implementation,for,instance,for,testing;page,cache,recycler,create,page,cache,recycler,settings,settings,return,new,page,cache,recycler,settings
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1524684173;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1525334055;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1527096592;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1528706846;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1528762805;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1529082965;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1529433467;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1531179852;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1532685069;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1533063033;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1533230566;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1534848846;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1535666657;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1535965276;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1536137328;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1536218260;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1536611444;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1537806831;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1540486836;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1541092382;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1541592065;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1541643651;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1543468844;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1544081506;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1544554541;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1544677641;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1544692527;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1545156327;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1547575044;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1548742809;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> @SuppressWarnings("unused")     protected void validateNodeBeforeAcceptingRequests(         final BootstrapContext context,         final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException;1548957580;Hook for validating the node after network_services are started but before the cluster service is started_and before the network service starts accepting incoming network_requests.__@param context               the bootstrap context for this node_@param boundTransportAddress the network addresses the node is_bound and publishing to;@SuppressWarnings("unused")_    protected void validateNodeBeforeAcceptingRequests(_        final BootstrapContext context,_        final BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {_    };hook,for,validating,the,node,after,network,services,are,started,but,before,the,cluster,service,is,started,and,before,the,network,service,starts,accepting,incoming,network,requests,param,context,the,bootstrap,context,for,this,node,param,bound,transport,address,the,network,addresses,the,node,is,bound,and,publishing,to;suppress,warnings,unused,protected,void,validate,node,before,accepting,requests,final,bootstrap,context,context,final,bound,transport,address,bound,transport,address,list,bootstrap,check,bootstrap,checks,throws,node,validation,exception
Node -> public Node(Settings preparedSettings);1524684173;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1525334055;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1527096592;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1528706846;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1528762805;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1529082965;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1529433467;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1531179852;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1532685069;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1533063033;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1533230566;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1534848846;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1535666657;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1535965276;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1536137328;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1536218260;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public Node(Settings preparedSettings);1536611444;Constructs a node with the given settings.__@param preparedSettings Base settings to configure the node with;public Node(Settings preparedSettings) {_        this(InternalSettingsPreparer.prepareEnvironment(preparedSettings))__    };constructs,a,node,with,the,given,settings,param,prepared,settings,base,settings,to,configure,the,node,with;public,node,settings,prepared,settings,this,internal,settings,preparer,prepare,environment,prepared,settings
Node -> public NodeEnvironment getNodeEnvironment();1524684173;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1525334055;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1527096592;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1528706846;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1528762805;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1529082965;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1529433467;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1531179852;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1532685069;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1533063033;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1533230566;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1534848846;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1535666657;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1535965276;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1536137328;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1536218260;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1536611444;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1537806831;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1540486836;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1541092382;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1541592065;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1541643651;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1543468844;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1544081506;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1544554541;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1544677641;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1544692527;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1545156327;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1547575044;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1548742809;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
Node -> public NodeEnvironment getNodeEnvironment();1548957580;Returns the {@link NodeEnvironment} instance of this node;public NodeEnvironment getNodeEnvironment() {_        return nodeEnvironment__    };returns,the,link,node,environment,instance,of,this,node;public,node,environment,get,node,environment,return,node,environment
