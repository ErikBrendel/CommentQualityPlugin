commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<IndexTemplateMetaData> getIndexTemplates() {     return indexTemplates. }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     indexTemplates.clear().     for (int i = 0. i < size. i++) {         indexTemplates.add(0, IndexTemplateMetaData.readFrom(in)).     } }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(indexTemplates.size()).     for (IndexTemplateMetaData indexTemplate : indexTemplates) {         indexTemplate.writeTo(out).     } }
false;public;2;18;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     params = new ToXContent.DelegatingMapParams(singletonMap("reduce_mappings", "true"), params).     boolean includeTypeName = params.paramAsBoolean(INCLUDE_TYPE_NAME_PARAMETER, DEFAULT_INCLUDE_TYPE_NAME_POLICY).     builder.startObject().     for (IndexTemplateMetaData indexTemplateMetaData : getIndexTemplates()) {         if (includeTypeName) {             IndexTemplateMetaData.Builder.toXContentWithTypes(indexTemplateMetaData, builder, params).         } else {             IndexTemplateMetaData.Builder.toXContent(indexTemplateMetaData, builder, params).         }     }     builder.endObject().     return builder. }
false;public,static;1;10;;public static GetIndexTemplatesResponse fromXContent(XContentParser parser) throws IOException {     final List<IndexTemplateMetaData> templates = new ArrayList<>().     for (XContentParser.Token token = parser.nextToken(). token != XContentParser.Token.END_OBJECT. token = parser.nextToken()) {         if (token == XContentParser.Token.FIELD_NAME) {             final IndexTemplateMetaData templateMetaData = IndexTemplateMetaData.Builder.fromXContent(parser, parser.currentName()).             templates.add(templateMetaData).         }     }     return new GetIndexTemplatesResponse(templates). }
