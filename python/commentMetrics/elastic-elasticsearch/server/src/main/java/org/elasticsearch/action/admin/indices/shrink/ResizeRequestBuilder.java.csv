# id;timestamp;commentText;codeText;commentWords;codeWords
ResizeRequestBuilder -> public ResizeRequestBuilder setWaitForActiveShards(final int waitForActiveShards);1524684173;A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public ResizeRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {_        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,set,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,resize,request,builder,set,wait,for,active,shards,final,int,wait,for,active,shards,return,set,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
ResizeRequestBuilder -> public ResizeRequestBuilder setWaitForActiveShards(final int waitForActiveShards);1527840262;A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public ResizeRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {_        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,set,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,resize,request,builder,set,wait,for,active,shards,final,int,wait,for,active,shards,return,set,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
ResizeRequestBuilder -> public ResizeRequestBuilder setWaitForActiveShards(final int waitForActiveShards);1529433467;A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public ResizeRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {_        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,set,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,resize,request,builder,set,wait,for,active,shards,final,int,wait,for,active,shards,return,set,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
ResizeRequestBuilder -> public ResizeRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards);1524684173;Sets the number of shard copies that should be active for creation of the_new shrunken index to return. Defaults to {@link ActiveShardCount#DEFAULT}, which will_wait for one shard copy (the primary) to become active. Set this value to_{@link ActiveShardCount#ALL} to wait for all shards (primary and all replicas) to be active_before returning. Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link ResizeResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public ResizeRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.request.setWaitForActiveShards(waitForActiveShards)__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,creation,of,the,new,shrunken,index,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,resize,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,resize,request,builder,set,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,request,set,wait,for,active,shards,wait,for,active,shards,return,this
ResizeRequestBuilder -> public ResizeRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards);1527840262;Sets the number of shard copies that should be active for creation of the_new shrunken index to return. Defaults to {@link ActiveShardCount#DEFAULT}, which will_wait for one shard copy (the primary) to become active. Set this value to_{@link ActiveShardCount#ALL} to wait for all shards (primary and all replicas) to be active_before returning. Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link ResizeResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public ResizeRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.request.setWaitForActiveShards(waitForActiveShards)__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,creation,of,the,new,shrunken,index,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,resize,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,resize,request,builder,set,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,request,set,wait,for,active,shards,wait,for,active,shards,return,this
ResizeRequestBuilder -> public ResizeRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards);1529433467;Sets the number of shard copies that should be active for creation of the_new shrunken index to return. Defaults to {@link ActiveShardCount#DEFAULT}, which will_wait for one shard copy (the primary) to become active. Set this value to_{@link ActiveShardCount#ALL} to wait for all shards (primary and all replicas) to be active_before returning. Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link ResizeResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public ResizeRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.request.setWaitForActiveShards(waitForActiveShards)__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,creation,of,the,new,shrunken,index,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,resize,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,resize,request,builder,set,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,request,set,wait,for,active,shards,wait,for,active,shards,return,this
