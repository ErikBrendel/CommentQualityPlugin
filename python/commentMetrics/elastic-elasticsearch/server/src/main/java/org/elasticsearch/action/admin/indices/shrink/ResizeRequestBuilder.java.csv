commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public ResizeRequestBuilder setTargetIndex(CreateIndexRequest request) {     this.request.setTargetIndex(request).     return this. }
false;public;1;4;;public ResizeRequestBuilder setSourceIndex(String index) {     this.request.setSourceIndex(index).     return this. }
false;public;1;4;;public ResizeRequestBuilder setSettings(Settings settings) {     this.request.getTargetIndexRequest().settings(settings).     return this. }
true;public;1;4;/**  * Sets the number of shard copies that should be active for creation of the  * new shrunken index to return. Defaults to {@link ActiveShardCount#DEFAULT}, which will  * wait for one shard copy (the primary) to become active. Set this value to  * {@link ActiveShardCount#ALL} to wait for all shards (primary and all replicas) to be active  * before returning. Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any  * non-negative integer, up to the number of copies per shard (number of replicas + 1),  * to wait for the desired amount of shard copies to become active before returning.  * Index creation will only wait up until the timeout value for the number of shard copies  * to be active before returning.  Check {@link ResizeResponse#isShardsAcknowledged()} to  * determine if the requisite shard copies were all started before returning or timing out.  *  * @param waitForActiveShards number of active shard copies to wait on  */ ;/**  * Sets the number of shard copies that should be active for creation of the  * new shrunken index to return. Defaults to {@link ActiveShardCount#DEFAULT}, which will  * wait for one shard copy (the primary) to become active. Set this value to  * {@link ActiveShardCount#ALL} to wait for all shards (primary and all replicas) to be active  * before returning. Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any  * non-negative integer, up to the number of copies per shard (number of replicas + 1),  * to wait for the desired amount of shard copies to become active before returning.  * Index creation will only wait up until the timeout value for the number of shard copies  * to be active before returning.  Check {@link ResizeResponse#isShardsAcknowledged()} to  * determine if the requisite shard copies were all started before returning or timing out.  *  * @param waitForActiveShards number of active shard copies to wait on  */ public ResizeRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {     this.request.setWaitForActiveShards(waitForActiveShards).     return this. }
true;public;1;3;/**  * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ ;/**  * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ public ResizeRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {     return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards)). }
false;public;1;4;;public ResizeRequestBuilder setResizeType(ResizeType type) {     this.request.setResizeType(type).     return this. }
