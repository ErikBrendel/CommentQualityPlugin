# id;timestamp;commentText;codeText;commentWords;codeWords
FiltersAggregatorFactory -> public Weight[] getWeights();1524684173;Returns the {@link Weight}s for this filter aggregation, creating it if_necessary. This is done lazily so that the {@link Weight}s are only_created if the aggregation collects documents reducing the overhead of_the aggregation in the case where no documents are collected.__Note that as aggregations are initialsed and executed in a serial manner,_no concurrency considerations are necessary here.;public Weight[] getWeights() {_        if (weights == null) {_            try {_                IndexSearcher contextSearcher = context.searcher()__                weights = new Weight[filters.length]__                for (int i = 0_ i < filters.length_ ++i) {_                    this.weights[i] = contextSearcher.createNormalizedWeight(filters[i], false)__                }_            } catch (IOException e) {_                throw new AggregationInitializationException("Failed to initialse filters for aggregation [" + name() + "]", e)__            }_        }_        return weights__    };returns,the,link,weight,s,for,this,filter,aggregation,creating,it,if,necessary,this,is,done,lazily,so,that,the,link,weight,s,are,only,created,if,the,aggregation,collects,documents,reducing,the,overhead,of,the,aggregation,in,the,case,where,no,documents,are,collected,note,that,as,aggregations,are,initialsed,and,executed,in,a,serial,manner,no,concurrency,considerations,are,necessary,here;public,weight,get,weights,if,weights,null,try,index,searcher,context,searcher,context,searcher,weights,new,weight,filters,length,for,int,i,0,i,filters,length,i,this,weights,i,context,searcher,create,normalized,weight,filters,i,false,catch,ioexception,e,throw,new,aggregation,initialization,exception,failed,to,initialse,filters,for,aggregation,name,e,return,weights
FiltersAggregatorFactory -> public Weight[] getWeights();1536314350;Returns the {@link Weight}s for this filter aggregation, creating it if_necessary. This is done lazily so that the {@link Weight}s are only_created if the aggregation collects documents reducing the overhead of_the aggregation in the case where no documents are collected.__Note that as aggregations are initialsed and executed in a serial manner,_no concurrency considerations are necessary here.;public Weight[] getWeights() {_        if (weights == null) {_            try {_                IndexSearcher contextSearcher = context.searcher()__                weights = new Weight[filters.length]__                for (int i = 0_ i < filters.length_ ++i) {_                    this.weights[i] = contextSearcher.createWeight(contextSearcher.rewrite(filters[i]), ScoreMode.COMPLETE_NO_SCORES, 1)__                }_            } catch (IOException e) {_                throw new AggregationInitializationException("Failed to initialse filters for aggregation [" + name() + "]", e)__            }_        }_        return weights__    };returns,the,link,weight,s,for,this,filter,aggregation,creating,it,if,necessary,this,is,done,lazily,so,that,the,link,weight,s,are,only,created,if,the,aggregation,collects,documents,reducing,the,overhead,of,the,aggregation,in,the,case,where,no,documents,are,collected,note,that,as,aggregations,are,initialsed,and,executed,in,a,serial,manner,no,concurrency,considerations,are,necessary,here;public,weight,get,weights,if,weights,null,try,index,searcher,context,searcher,context,searcher,weights,new,weight,filters,length,for,int,i,0,i,filters,length,i,this,weights,i,context,searcher,create,weight,context,searcher,rewrite,filters,i,score,mode,1,catch,ioexception,e,throw,new,aggregation,initialization,exception,failed,to,initialse,filters,for,aggregation,name,e,return,weights
FiltersAggregatorFactory -> public Weight[] getWeights();1543834151;Returns the {@link Weight}s for this filter aggregation, creating it if_necessary. This is done lazily so that the {@link Weight}s are only_created if the aggregation collects documents reducing the overhead of_the aggregation in the case where no documents are collected.__Note that as aggregations are initialsed and executed in a serial manner,_no concurrency considerations are necessary here.;public Weight[] getWeights() {_        if (weights == null) {_            try {_                IndexSearcher contextSearcher = context.searcher()__                weights = new Weight[filters.length]__                for (int i = 0_ i < filters.length_ ++i) {_                    this.weights[i] = contextSearcher.createWeight(contextSearcher.rewrite(filters[i]), ScoreMode.COMPLETE_NO_SCORES, 1)__                }_            } catch (IOException e) {_                throw new AggregationInitializationException("Failed to initialse filters for aggregation [" + name() + "]", e)__            }_        }_        return weights__    };returns,the,link,weight,s,for,this,filter,aggregation,creating,it,if,necessary,this,is,done,lazily,so,that,the,link,weight,s,are,only,created,if,the,aggregation,collects,documents,reducing,the,overhead,of,the,aggregation,in,the,case,where,no,documents,are,collected,note,that,as,aggregations,are,initialsed,and,executed,in,a,serial,manner,no,concurrency,considerations,are,necessary,here;public,weight,get,weights,if,weights,null,try,index,searcher,context,searcher,context,searcher,weights,new,weight,filters,length,for,int,i,0,i,filters,length,i,this,weights,i,context,searcher,create,weight,context,searcher,rewrite,filters,i,score,mode,1,catch,ioexception,e,throw,new,aggregation,initialization,exception,failed,to,initialse,filters,for,aggregation,name,e,return,weights
