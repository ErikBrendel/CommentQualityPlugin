commented;modifiers;parameterAmount;loc;comment;code
false;public;4;12;;@Override public AnalyzerProvider<?> get(IndexSettings indexSettings, Environment environment, String name, Settings settings) throws IOException {     Version versionCreated = Version.indexCreated(settings).     if (Version.CURRENT.equals(versionCreated) == false) {         return super.get(indexSettings, environment, name, settings).     } else {         return current.     } }
false;protected;1;7;;@Override protected AnalyzerProvider<?> create(Version version) {     assert Version.CURRENT.equals(version) == false.     Analyzer analyzer = create.apply(version).     analyzer.setVersion(version.luceneVersion).     return new PreBuiltAnalyzerProvider(getName(), AnalyzerScope.INDICES, analyzer). }
false;public;0;8;;@Override public void close() throws IOException {     List<Closeable> closeables = cache.values().stream().map(AnalyzerProvider::get).collect(Collectors.toList()).     closeables.add(current.get()).     IOUtils.close(closeables). }
false;public;1;4;;@Override public AnalyzerProvider<?> get(Version version) {     return new PreBuiltAnalyzerProvider(name, AnalyzerScope.INDICES, preBuiltAnalyzer.getAnalyzer(version)). }
false;public;2;4;;@Override public void put(Version version, AnalyzerProvider<?> analyzerProvider) { // No need to put, because we delegate in get() directly to PreBuiltAnalyzers which already caches. }
false;public;0;8;;@Override public Collection<AnalyzerProvider<?>> values() {     return preBuiltAnalyzer.getCache().values().stream().map(analyzer -> new PreBuiltAnalyzerProvider(name, AnalyzerScope.INDICES, analyzer)).collect(Collectors.toList()). }
