# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterModule -> public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,                                                                          List<ClusterPlugin> clusterPlugins);1524684173;Return a new {@link AllocationDecider} instance with builtin deciders as well as those from plugins.;public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,_                                                                         List<ClusterPlugin> clusterPlugins) {_        _        Map<Class, AllocationDecider> deciders = new LinkedHashMap<>()__        addAllocationDecider(deciders, new MaxRetryAllocationDecider(settings))__        addAllocationDecider(deciders, new ResizeAllocationDecider(settings))__        addAllocationDecider(deciders, new ReplicaAfterPrimaryActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new RebalanceOnlyWhenActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new ClusterRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ConcurrentRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new EnableAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new NodeVersionAllocationDecider(settings))__        addAllocationDecider(deciders, new SnapshotInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new RestoreInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new SameShardAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings))___        clusterPlugins.stream()_            .flatMap(p -> p.createAllocationDeciders(settings, clusterSettings).stream())_            .forEach(d -> addAllocationDecider(deciders, d))___        return deciders.values()__    };return,a,new,link,allocation,decider,instance,with,builtin,deciders,as,well,as,those,from,plugins;public,static,collection,allocation,decider,create,allocation,deciders,settings,settings,cluster,settings,cluster,settings,list,cluster,plugin,cluster,plugins,map,class,allocation,decider,deciders,new,linked,hash,map,add,allocation,decider,deciders,new,max,retry,allocation,decider,settings,add,allocation,decider,deciders,new,resize,allocation,decider,settings,add,allocation,decider,deciders,new,replica,after,primary,active,allocation,decider,settings,add,allocation,decider,deciders,new,rebalance,only,when,active,allocation,decider,settings,add,allocation,decider,deciders,new,cluster,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,concurrent,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,enable,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,node,version,allocation,decider,settings,add,allocation,decider,deciders,new,snapshot,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,restore,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,filter,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,same,shard,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,disk,threshold,decider,settings,cluster,settings,add,allocation,decider,deciders,new,throttling,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,shards,limit,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,awareness,allocation,decider,settings,cluster,settings,cluster,plugins,stream,flat,map,p,p,create,allocation,deciders,settings,cluster,settings,stream,for,each,d,add,allocation,decider,deciders,d,return,deciders,values
ClusterModule -> public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,                                                                          List<ClusterPlugin> clusterPlugins);1527152864;Return a new {@link AllocationDecider} instance with builtin deciders as well as those from plugins.;public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,_                                                                         List<ClusterPlugin> clusterPlugins) {_        _        Map<Class, AllocationDecider> deciders = new LinkedHashMap<>()__        addAllocationDecider(deciders, new MaxRetryAllocationDecider(settings))__        addAllocationDecider(deciders, new ResizeAllocationDecider(settings))__        addAllocationDecider(deciders, new ReplicaAfterPrimaryActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new RebalanceOnlyWhenActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new ClusterRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ConcurrentRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new EnableAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new NodeVersionAllocationDecider(settings))__        addAllocationDecider(deciders, new SnapshotInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new RestoreInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new SameShardAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings))___        clusterPlugins.stream()_            .flatMap(p -> p.createAllocationDeciders(settings, clusterSettings).stream())_            .forEach(d -> addAllocationDecider(deciders, d))___        return deciders.values()__    };return,a,new,link,allocation,decider,instance,with,builtin,deciders,as,well,as,those,from,plugins;public,static,collection,allocation,decider,create,allocation,deciders,settings,settings,cluster,settings,cluster,settings,list,cluster,plugin,cluster,plugins,map,class,allocation,decider,deciders,new,linked,hash,map,add,allocation,decider,deciders,new,max,retry,allocation,decider,settings,add,allocation,decider,deciders,new,resize,allocation,decider,settings,add,allocation,decider,deciders,new,replica,after,primary,active,allocation,decider,settings,add,allocation,decider,deciders,new,rebalance,only,when,active,allocation,decider,settings,add,allocation,decider,deciders,new,cluster,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,concurrent,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,enable,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,node,version,allocation,decider,settings,add,allocation,decider,deciders,new,snapshot,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,restore,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,filter,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,same,shard,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,disk,threshold,decider,settings,cluster,settings,add,allocation,decider,deciders,new,throttling,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,shards,limit,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,awareness,allocation,decider,settings,cluster,settings,cluster,plugins,stream,flat,map,p,p,create,allocation,deciders,settings,cluster,settings,stream,for,each,d,add,allocation,decider,deciders,d,return,deciders,values
ClusterModule -> public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,                                                                          List<ClusterPlugin> clusterPlugins);1527840262;Return a new {@link AllocationDecider} instance with builtin deciders as well as those from plugins.;public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,_                                                                         List<ClusterPlugin> clusterPlugins) {_        _        Map<Class, AllocationDecider> deciders = new LinkedHashMap<>()__        addAllocationDecider(deciders, new MaxRetryAllocationDecider(settings))__        addAllocationDecider(deciders, new ResizeAllocationDecider(settings))__        addAllocationDecider(deciders, new ReplicaAfterPrimaryActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new RebalanceOnlyWhenActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new ClusterRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ConcurrentRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new EnableAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new NodeVersionAllocationDecider(settings))__        addAllocationDecider(deciders, new SnapshotInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new RestoreInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new SameShardAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings))___        clusterPlugins.stream()_            .flatMap(p -> p.createAllocationDeciders(settings, clusterSettings).stream())_            .forEach(d -> addAllocationDecider(deciders, d))___        return deciders.values()__    };return,a,new,link,allocation,decider,instance,with,builtin,deciders,as,well,as,those,from,plugins;public,static,collection,allocation,decider,create,allocation,deciders,settings,settings,cluster,settings,cluster,settings,list,cluster,plugin,cluster,plugins,map,class,allocation,decider,deciders,new,linked,hash,map,add,allocation,decider,deciders,new,max,retry,allocation,decider,settings,add,allocation,decider,deciders,new,resize,allocation,decider,settings,add,allocation,decider,deciders,new,replica,after,primary,active,allocation,decider,settings,add,allocation,decider,deciders,new,rebalance,only,when,active,allocation,decider,settings,add,allocation,decider,deciders,new,cluster,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,concurrent,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,enable,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,node,version,allocation,decider,settings,add,allocation,decider,deciders,new,snapshot,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,restore,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,filter,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,same,shard,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,disk,threshold,decider,settings,cluster,settings,add,allocation,decider,deciders,new,throttling,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,shards,limit,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,awareness,allocation,decider,settings,cluster,settings,cluster,plugins,stream,flat,map,p,p,create,allocation,deciders,settings,cluster,settings,stream,for,each,d,add,allocation,decider,deciders,d,return,deciders,values
ClusterModule -> public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,                                                                          List<ClusterPlugin> clusterPlugins);1533230566;Return a new {@link AllocationDecider} instance with builtin deciders as well as those from plugins.;public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,_                                                                         List<ClusterPlugin> clusterPlugins) {_        _        Map<Class, AllocationDecider> deciders = new LinkedHashMap<>()__        addAllocationDecider(deciders, new MaxRetryAllocationDecider(settings))__        addAllocationDecider(deciders, new ResizeAllocationDecider(settings))__        addAllocationDecider(deciders, new ReplicaAfterPrimaryActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new RebalanceOnlyWhenActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new ClusterRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ConcurrentRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new EnableAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new NodeVersionAllocationDecider(settings))__        addAllocationDecider(deciders, new SnapshotInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new RestoreInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new SameShardAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings))___        clusterPlugins.stream()_            .flatMap(p -> p.createAllocationDeciders(settings, clusterSettings).stream())_            .forEach(d -> addAllocationDecider(deciders, d))___        return deciders.values()__    };return,a,new,link,allocation,decider,instance,with,builtin,deciders,as,well,as,those,from,plugins;public,static,collection,allocation,decider,create,allocation,deciders,settings,settings,cluster,settings,cluster,settings,list,cluster,plugin,cluster,plugins,map,class,allocation,decider,deciders,new,linked,hash,map,add,allocation,decider,deciders,new,max,retry,allocation,decider,settings,add,allocation,decider,deciders,new,resize,allocation,decider,settings,add,allocation,decider,deciders,new,replica,after,primary,active,allocation,decider,settings,add,allocation,decider,deciders,new,rebalance,only,when,active,allocation,decider,settings,add,allocation,decider,deciders,new,cluster,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,concurrent,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,enable,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,node,version,allocation,decider,settings,add,allocation,decider,deciders,new,snapshot,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,restore,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,filter,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,same,shard,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,disk,threshold,decider,settings,cluster,settings,add,allocation,decider,deciders,new,throttling,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,shards,limit,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,awareness,allocation,decider,settings,cluster,settings,cluster,plugins,stream,flat,map,p,p,create,allocation,deciders,settings,cluster,settings,stream,for,each,d,add,allocation,decider,deciders,d,return,deciders,values
ClusterModule -> public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,                                                                          List<ClusterPlugin> clusterPlugins);1536137328;Return a new {@link AllocationDecider} instance with builtin deciders as well as those from plugins.;public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,_                                                                         List<ClusterPlugin> clusterPlugins) {_        _        Map<Class, AllocationDecider> deciders = new LinkedHashMap<>()__        addAllocationDecider(deciders, new MaxRetryAllocationDecider(settings))__        addAllocationDecider(deciders, new ResizeAllocationDecider(settings))__        addAllocationDecider(deciders, new ReplicaAfterPrimaryActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new RebalanceOnlyWhenActiveAllocationDecider(settings))__        addAllocationDecider(deciders, new ClusterRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ConcurrentRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new EnableAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new NodeVersionAllocationDecider(settings))__        addAllocationDecider(deciders, new SnapshotInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new RestoreInProgressAllocationDecider(settings))__        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new SameShardAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings))___        clusterPlugins.stream()_            .flatMap(p -> p.createAllocationDeciders(settings, clusterSettings).stream())_            .forEach(d -> addAllocationDecider(deciders, d))___        return deciders.values()__    };return,a,new,link,allocation,decider,instance,with,builtin,deciders,as,well,as,those,from,plugins;public,static,collection,allocation,decider,create,allocation,deciders,settings,settings,cluster,settings,cluster,settings,list,cluster,plugin,cluster,plugins,map,class,allocation,decider,deciders,new,linked,hash,map,add,allocation,decider,deciders,new,max,retry,allocation,decider,settings,add,allocation,decider,deciders,new,resize,allocation,decider,settings,add,allocation,decider,deciders,new,replica,after,primary,active,allocation,decider,settings,add,allocation,decider,deciders,new,rebalance,only,when,active,allocation,decider,settings,add,allocation,decider,deciders,new,cluster,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,concurrent,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,enable,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,node,version,allocation,decider,settings,add,allocation,decider,deciders,new,snapshot,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,restore,in,progress,allocation,decider,settings,add,allocation,decider,deciders,new,filter,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,same,shard,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,disk,threshold,decider,settings,cluster,settings,add,allocation,decider,deciders,new,throttling,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,shards,limit,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,awareness,allocation,decider,settings,cluster,settings,cluster,plugins,stream,flat,map,p,p,create,allocation,deciders,settings,cluster,settings,stream,for,each,d,add,allocation,decider,deciders,d,return,deciders,values
ClusterModule -> public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,                                                                          List<ClusterPlugin> clusterPlugins);1541092382;Return a new {@link AllocationDecider} instance with builtin deciders as well as those from plugins.;public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,_                                                                         List<ClusterPlugin> clusterPlugins) {_        _        Map<Class, AllocationDecider> deciders = new LinkedHashMap<>()__        addAllocationDecider(deciders, new MaxRetryAllocationDecider())__        addAllocationDecider(deciders, new ResizeAllocationDecider())__        addAllocationDecider(deciders, new ReplicaAfterPrimaryActiveAllocationDecider())__        addAllocationDecider(deciders, new RebalanceOnlyWhenActiveAllocationDecider())__        addAllocationDecider(deciders, new ClusterRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ConcurrentRebalanceAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new EnableAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new NodeVersionAllocationDecider())__        addAllocationDecider(deciders, new SnapshotInProgressAllocationDecider())__        addAllocationDecider(deciders, new RestoreInProgressAllocationDecider())__        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new SameShardAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings))__        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings))___        clusterPlugins.stream()_            .flatMap(p -> p.createAllocationDeciders(settings, clusterSettings).stream())_            .forEach(d -> addAllocationDecider(deciders, d))___        return deciders.values()__    };return,a,new,link,allocation,decider,instance,with,builtin,deciders,as,well,as,those,from,plugins;public,static,collection,allocation,decider,create,allocation,deciders,settings,settings,cluster,settings,cluster,settings,list,cluster,plugin,cluster,plugins,map,class,allocation,decider,deciders,new,linked,hash,map,add,allocation,decider,deciders,new,max,retry,allocation,decider,add,allocation,decider,deciders,new,resize,allocation,decider,add,allocation,decider,deciders,new,replica,after,primary,active,allocation,decider,add,allocation,decider,deciders,new,rebalance,only,when,active,allocation,decider,add,allocation,decider,deciders,new,cluster,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,concurrent,rebalance,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,enable,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,node,version,allocation,decider,add,allocation,decider,deciders,new,snapshot,in,progress,allocation,decider,add,allocation,decider,deciders,new,restore,in,progress,allocation,decider,add,allocation,decider,deciders,new,filter,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,same,shard,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,disk,threshold,decider,settings,cluster,settings,add,allocation,decider,deciders,new,throttling,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,shards,limit,allocation,decider,settings,cluster,settings,add,allocation,decider,deciders,new,awareness,allocation,decider,settings,cluster,settings,cluster,plugins,stream,flat,map,p,p,create,allocation,deciders,settings,cluster,settings,stream,for,each,d,add,allocation,decider,deciders,d,return,deciders,values
ClusterModule -> public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState);1527840262;For interoperability with transport clients older than 6.3, we need to strip customs_from the cluster state that the client might not be able to deserialize__@param clusterState the cluster state to filter the customs from_@return the adapted cluster state;public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState) {_        final ClusterState.Builder builder = ClusterState.builder(clusterState)__        clusterState.customs().keysIt().forEachRemaining(name -> {_            if (PRE_6_3_CLUSTER_CUSTOMS_WHITE_LIST.contains(name) == false) {_                builder.removeCustom(name)__            }_        })__        final MetaData.Builder metaBuilder = MetaData.builder(clusterState.metaData())__        clusterState.metaData().customs().keysIt().forEachRemaining(name -> {_            if (PRE_6_3_METADATA_CUSTOMS_WHITE_LIST.contains(name) == false) {_                metaBuilder.removeCustom(name)__            }_        })__        return builder.metaData(metaBuilder).build()__    };for,interoperability,with,transport,clients,older,than,6,3,we,need,to,strip,customs,from,the,cluster,state,that,the,client,might,not,be,able,to,deserialize,param,cluster,state,the,cluster,state,to,filter,the,customs,from,return,the,adapted,cluster,state;public,static,cluster,state,filter,customs,for,pre63clients,cluster,state,cluster,state,final,cluster,state,builder,builder,cluster,state,builder,cluster,state,cluster,state,customs,keys,it,for,each,remaining,name,if,contains,name,false,builder,remove,custom,name,final,meta,data,builder,meta,builder,meta,data,builder,cluster,state,meta,data,cluster,state,meta,data,customs,keys,it,for,each,remaining,name,if,contains,name,false,meta,builder,remove,custom,name,return,builder,meta,data,meta,builder,build
ClusterModule -> public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState);1533230566;For interoperability with transport clients older than 6.3, we need to strip customs_from the cluster state that the client might not be able to deserialize__@param clusterState the cluster state to filter the customs from_@return the adapted cluster state;public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState) {_        final ClusterState.Builder builder = ClusterState.builder(clusterState)__        clusterState.customs().keysIt().forEachRemaining(name -> {_            if (PRE_6_3_CLUSTER_CUSTOMS_WHITE_LIST.contains(name) == false) {_                builder.removeCustom(name)__            }_        })__        final MetaData.Builder metaBuilder = MetaData.builder(clusterState.metaData())__        clusterState.metaData().customs().keysIt().forEachRemaining(name -> {_            if (PRE_6_3_METADATA_CUSTOMS_WHITE_LIST.contains(name) == false) {_                metaBuilder.removeCustom(name)__            }_        })__        return builder.metaData(metaBuilder).build()__    };for,interoperability,with,transport,clients,older,than,6,3,we,need,to,strip,customs,from,the,cluster,state,that,the,client,might,not,be,able,to,deserialize,param,cluster,state,the,cluster,state,to,filter,the,customs,from,return,the,adapted,cluster,state;public,static,cluster,state,filter,customs,for,pre63clients,cluster,state,cluster,state,final,cluster,state,builder,builder,cluster,state,builder,cluster,state,cluster,state,customs,keys,it,for,each,remaining,name,if,contains,name,false,builder,remove,custom,name,final,meta,data,builder,meta,builder,meta,data,builder,cluster,state,meta,data,cluster,state,meta,data,customs,keys,it,for,each,remaining,name,if,contains,name,false,meta,builder,remove,custom,name,return,builder,meta,data,meta,builder,build
ClusterModule -> public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState);1536137328;For interoperability with transport clients older than 6.3, we need to strip customs_from the cluster state that the client might not be able to deserialize__@param clusterState the cluster state to filter the customs from_@return the adapted cluster state;public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState) {_        final ClusterState.Builder builder = ClusterState.builder(clusterState)__        clusterState.customs().keysIt().forEachRemaining(name -> {_            if (PRE_6_3_CLUSTER_CUSTOMS_WHITE_LIST.contains(name) == false) {_                builder.removeCustom(name)__            }_        })__        final MetaData.Builder metaBuilder = MetaData.builder(clusterState.metaData())__        clusterState.metaData().customs().keysIt().forEachRemaining(name -> {_            if (PRE_6_3_METADATA_CUSTOMS_WHITE_LIST.contains(name) == false) {_                metaBuilder.removeCustom(name)__            }_        })__        return builder.metaData(metaBuilder).build()__    };for,interoperability,with,transport,clients,older,than,6,3,we,need,to,strip,customs,from,the,cluster,state,that,the,client,might,not,be,able,to,deserialize,param,cluster,state,the,cluster,state,to,filter,the,customs,from,return,the,adapted,cluster,state;public,static,cluster,state,filter,customs,for,pre63clients,cluster,state,cluster,state,final,cluster,state,builder,builder,cluster,state,builder,cluster,state,cluster,state,customs,keys,it,for,each,remaining,name,if,contains,name,false,builder,remove,custom,name,final,meta,data,builder,meta,builder,meta,data,builder,cluster,state,meta,data,cluster,state,meta,data,customs,keys,it,for,each,remaining,name,if,contains,name,false,meta,builder,remove,custom,name,return,builder,meta,data,meta,builder,build
ClusterModule -> public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState);1541092382;For interoperability with transport clients older than 6.3, we need to strip customs_from the cluster state that the client might not be able to deserialize__@param clusterState the cluster state to filter the customs from_@return the adapted cluster state;public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState) {_        final ClusterState.Builder builder = ClusterState.builder(clusterState)__        clusterState.customs().keysIt().forEachRemaining(name -> {_            if (PRE_6_3_CLUSTER_CUSTOMS_WHITE_LIST.contains(name) == false) {_                builder.removeCustom(name)__            }_        })__        final MetaData.Builder metaBuilder = MetaData.builder(clusterState.metaData())__        clusterState.metaData().customs().keysIt().forEachRemaining(name -> {_            if (PRE_6_3_METADATA_CUSTOMS_WHITE_LIST.contains(name) == false) {_                metaBuilder.removeCustom(name)__            }_        })__        return builder.metaData(metaBuilder).build()__    };for,interoperability,with,transport,clients,older,than,6,3,we,need,to,strip,customs,from,the,cluster,state,that,the,client,might,not,be,able,to,deserialize,param,cluster,state,the,cluster,state,to,filter,the,customs,from,return,the,adapted,cluster,state;public,static,cluster,state,filter,customs,for,pre63clients,cluster,state,cluster,state,final,cluster,state,builder,builder,cluster,state,builder,cluster,state,cluster,state,customs,keys,it,for,each,remaining,name,if,contains,name,false,builder,remove,custom,name,final,meta,data,builder,meta,builder,meta,data,builder,cluster,state,meta,data,cluster,state,meta,data,customs,keys,it,for,each,remaining,name,if,contains,name,false,meta,builder,remove,custom,name,return,builder,meta,data,meta,builder,build
ClusterModule -> private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider);1524684173;Add the given allocation decider to the given deciders collection, erroring if the class name is already used.;private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider) {_        if (deciders.put(decider.getClass(), decider) != null) {_            throw new IllegalArgumentException("Cannot specify allocation decider [" + decider.getClass().getName() + "] twice")__        }_    };add,the,given,allocation,decider,to,the,given,deciders,collection,erroring,if,the,class,name,is,already,used;private,static,void,add,allocation,decider,map,class,allocation,decider,deciders,allocation,decider,decider,if,deciders,put,decider,get,class,decider,null,throw,new,illegal,argument,exception,cannot,specify,allocation,decider,decider,get,class,get,name,twice
ClusterModule -> private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider);1527152864;Add the given allocation decider to the given deciders collection, erroring if the class name is already used.;private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider) {_        if (deciders.put(decider.getClass(), decider) != null) {_            throw new IllegalArgumentException("Cannot specify allocation decider [" + decider.getClass().getName() + "] twice")__        }_    };add,the,given,allocation,decider,to,the,given,deciders,collection,erroring,if,the,class,name,is,already,used;private,static,void,add,allocation,decider,map,class,allocation,decider,deciders,allocation,decider,decider,if,deciders,put,decider,get,class,decider,null,throw,new,illegal,argument,exception,cannot,specify,allocation,decider,decider,get,class,get,name,twice
ClusterModule -> private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider);1527840262;Add the given allocation decider to the given deciders collection, erroring if the class name is already used.;private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider) {_        if (deciders.put(decider.getClass(), decider) != null) {_            throw new IllegalArgumentException("Cannot specify allocation decider [" + decider.getClass().getName() + "] twice")__        }_    };add,the,given,allocation,decider,to,the,given,deciders,collection,erroring,if,the,class,name,is,already,used;private,static,void,add,allocation,decider,map,class,allocation,decider,deciders,allocation,decider,decider,if,deciders,put,decider,get,class,decider,null,throw,new,illegal,argument,exception,cannot,specify,allocation,decider,decider,get,class,get,name,twice
ClusterModule -> private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider);1533230566;Add the given allocation decider to the given deciders collection, erroring if the class name is already used.;private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider) {_        if (deciders.put(decider.getClass(), decider) != null) {_            throw new IllegalArgumentException("Cannot specify allocation decider [" + decider.getClass().getName() + "] twice")__        }_    };add,the,given,allocation,decider,to,the,given,deciders,collection,erroring,if,the,class,name,is,already,used;private,static,void,add,allocation,decider,map,class,allocation,decider,deciders,allocation,decider,decider,if,deciders,put,decider,get,class,decider,null,throw,new,illegal,argument,exception,cannot,specify,allocation,decider,decider,get,class,get,name,twice
ClusterModule -> private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider);1536137328;Add the given allocation decider to the given deciders collection, erroring if the class name is already used.;private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider) {_        if (deciders.put(decider.getClass(), decider) != null) {_            throw new IllegalArgumentException("Cannot specify allocation decider [" + decider.getClass().getName() + "] twice")__        }_    };add,the,given,allocation,decider,to,the,given,deciders,collection,erroring,if,the,class,name,is,already,used;private,static,void,add,allocation,decider,map,class,allocation,decider,deciders,allocation,decider,decider,if,deciders,put,decider,get,class,decider,null,throw,new,illegal,argument,exception,cannot,specify,allocation,decider,decider,get,class,get,name,twice
ClusterModule -> private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider);1541092382;Add the given allocation decider to the given deciders collection, erroring if the class name is already used.;private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider) {_        if (deciders.put(decider.getClass(), decider) != null) {_            throw new IllegalArgumentException("Cannot specify allocation decider [" + decider.getClass().getName() + "] twice")__        }_    };add,the,given,allocation,decider,to,the,given,deciders,collection,erroring,if,the,class,name,is,already,used;private,static,void,add,allocation,decider,map,class,allocation,decider,deciders,allocation,decider,decider,if,deciders,put,decider,get,class,decider,null,throw,new,illegal,argument,exception,cannot,specify,allocation,decider,decider,get,class,get,name,twice
