commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the match expression that will be used to match on indices created.  */ ;/**  * Sets the match expression that will be used to match on indices created.  */ public PutIndexTemplateRequestBuilder setPatterns(List<String> indexPatterns) {     request.patterns(indexPatterns).     return this. }
true;public;1;4;/**  * Sets the order of this template if more than one template matches.  */ ;/**  * Sets the order of this template if more than one template matches.  */ public PutIndexTemplateRequestBuilder setOrder(int order) {     request.order(order).     return this. }
true;public;1;4;/**  * Sets the optional version of this template.  */ ;/**  * Sets the optional version of this template.  */ public PutIndexTemplateRequestBuilder setVersion(Integer version) {     request.version(version).     return this. }
true;public;1;4;/**  * Set to {@code true} to force only creation, not an update of an index template. If it already  * exists, it will fail with an {@link IllegalArgumentException}.  */ ;/**  * Set to {@code true} to force only creation, not an update of an index template. If it already  * exists, it will fail with an {@link IllegalArgumentException}.  */ public PutIndexTemplateRequestBuilder setCreate(boolean create) {     request.create(create).     return this. }
true;public;1;4;/**  * The settings to created the index template with.  */ ;/**  * The settings to created the index template with.  */ public PutIndexTemplateRequestBuilder setSettings(Settings settings) {     request.settings(settings).     return this. }
true;public;1;4;/**  * The settings to created the index template with.  */ ;/**  * The settings to created the index template with.  */ public PutIndexTemplateRequestBuilder setSettings(Settings.Builder settings) {     request.settings(settings).     return this. }
true;public;2;4;/**  * The settings to crete the index template with (either json or yaml format)  */ ;/**  * The settings to crete the index template with (either json or yaml format)  */ public PutIndexTemplateRequestBuilder setSettings(String source, XContentType xContentType) {     request.settings(source, xContentType).     return this. }
true;public;1;4;/**  * The settings to crete the index template with (either json or yaml format)  */ ;/**  * The settings to crete the index template with (either json or yaml format)  */ public PutIndexTemplateRequestBuilder setSettings(Map<String, Object> source) {     request.settings(source).     return this. }
true;public;3;4;/**  * Adds mapping that will be added when the index template gets created.  *  * @param type   The mapping type  * @param source The mapping source  * @param xContentType The type/format of the source  */ ;/**  * Adds mapping that will be added when the index template gets created.  *  * @param type   The mapping type  * @param source The mapping source  * @param xContentType The type/format of the source  */ public PutIndexTemplateRequestBuilder addMapping(String type, String source, XContentType xContentType) {     request.mapping(type, source, xContentType).     return this. }
true;public;2;4;/**  * A specialized simplified mapping source method, takes the form of simple properties definition:  * ("field1", "type=string,store=true").  */ ;/**  * A specialized simplified mapping source method, takes the form of simple properties definition:  * ("field1", "type=string,store=true").  */ public PutIndexTemplateRequestBuilder addMapping(String type, Object... source) {     request.mapping(type, source).     return this. }
true;public;1;4;/**  * Sets the aliases that will be associated with the index when it gets created  */ ;/**  * Sets the aliases that will be associated with the index when it gets created  */ public PutIndexTemplateRequestBuilder setAliases(Map<String, Object> source) {     request.aliases(source).     return this. }
true;public;1;4;/**  * Sets the aliases that will be associated with the index when it gets created  */ ;/**  * Sets the aliases that will be associated with the index when it gets created  */ public PutIndexTemplateRequestBuilder setAliases(String source) {     request.aliases(source).     return this. }
true;public;1;4;/**  * Sets the aliases that will be associated with the index when it gets created  */ ;/**  * Sets the aliases that will be associated with the index when it gets created  */ public PutIndexTemplateRequestBuilder setAliases(XContentBuilder source) {     request.aliases(source).     return this. }
true;public;1;4;/**  * Sets the aliases that will be associated with the index when it gets created  */ ;/**  * Sets the aliases that will be associated with the index when it gets created  */ public PutIndexTemplateRequestBuilder setAliases(BytesReference source) {     request.aliases(source).     return this. }
true;public;1;4;/**  * Adds an alias that will be added when the index template gets created.  *  * @param alias The alias  * @return the request builder  */ ;/**  * Adds an alias that will be added when the index template gets created.  *  * @param alias The alias  * @return the request builder  */ public PutIndexTemplateRequestBuilder addAlias(Alias alias) {     request.alias(alias).     return this. }
true;public;1;4;/**  * The cause for this index template creation.  */ ;/**  * The cause for this index template creation.  */ public PutIndexTemplateRequestBuilder cause(String cause) {     request.cause(cause).     return this. }
true;public;2;4;/**  * Adds mapping that will be added when the index template gets created.  *  * @param type   The mapping type  * @param source The mapping source  */ ;/**  * Adds mapping that will be added when the index template gets created.  *  * @param type   The mapping type  * @param source The mapping source  */ public PutIndexTemplateRequestBuilder addMapping(String type, XContentBuilder source) {     request.mapping(type, source).     return this. }
true;public;2;4;/**  * Adds mapping that will be added when the index gets created.  *  * @param type   The mapping type  * @param source The mapping source  */ ;/**  * Adds mapping that will be added when the index gets created.  *  * @param type   The mapping type  * @param source The mapping source  */ public PutIndexTemplateRequestBuilder addMapping(String type, Map<String, Object> source) {     request.mapping(type, source).     return this. }
true;public;1;4;/**  * The template source definition.  */ ;/**  * The template source definition.  */ public PutIndexTemplateRequestBuilder setSource(XContentBuilder templateBuilder) {     request.source(templateBuilder).     return this. }
true;public;1;4;/**  * The template source definition.  */ ;/**  * The template source definition.  */ public PutIndexTemplateRequestBuilder setSource(Map<String, Object> templateSource) {     request.source(templateSource).     return this. }
true;public;2;4;/**  * The template source definition.  */ ;/**  * The template source definition.  */ public PutIndexTemplateRequestBuilder setSource(BytesReference templateSource, XContentType xContentType) {     request.source(templateSource, xContentType).     return this. }
true;public;2;4;/**  * The template source definition.  */ ;/**  * The template source definition.  */ public PutIndexTemplateRequestBuilder setSource(byte[] templateSource, XContentType xContentType) {     request.source(templateSource, xContentType).     return this. }
true;public;4;4;/**  * The template source definition.  */ ;/**  * The template source definition.  */ public PutIndexTemplateRequestBuilder setSource(byte[] templateSource, int offset, int length, XContentType xContentType) {     request.source(templateSource, offset, length, xContentType).     return this. }
