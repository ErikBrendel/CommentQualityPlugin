commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private void setClusterConcurrentRebalance(int concurrentRebalance) {     clusterConcurrentRebalance = concurrentRebalance. }
false;public;2;4;;@Override public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation allocation) {     return canRebalance(allocation). }
false;public;1;17;;@Override public Decision canRebalance(RoutingAllocation allocation) {     if (clusterConcurrentRebalance == -1) {         return allocation.decision(Decision.YES, NAME, "unlimited concurrent rebalances are allowed").     }     int relocatingShards = allocation.routingNodes().getRelocatingShardCount().     if (relocatingShards >= clusterConcurrentRebalance) {         return allocation.decision(Decision.THROTTLE, NAME, "reached the limit of concurrently rebalancing shards [%d], cluster setting [%s=%d]", relocatingShards, CLUSTER_ROUTING_ALLOCATION_CLUSTER_CONCURRENT_REBALANCE_SETTING.getKey(), clusterConcurrentRebalance).     }     return allocation.decision(Decision.YES, NAME, "below threshold [%d] for concurrent rebalances, current rebalance shard count [%d]", clusterConcurrentRebalance, relocatingShards). }
