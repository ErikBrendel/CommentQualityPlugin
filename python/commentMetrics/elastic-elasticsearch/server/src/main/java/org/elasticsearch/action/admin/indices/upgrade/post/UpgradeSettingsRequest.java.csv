commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (versions.isEmpty()) {         validationException = addValidationError("no indices to update", validationException).     }     return validationException. }
false;;0;3;;Map<String, Tuple<Version, String>> versions() {     return versions. }
true;public;1;4;/**  * Sets the index versions to be updated  */ ;/**  * Sets the index versions to be updated  */ public UpgradeSettingsRequest versions(Map<String, Tuple<Version, String>> versions) {     this.versions = versions.     return this. }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     versions = new HashMap<>().     for (int i = 0. i < size. i++) {         String index = in.readString().         Version upgradeVersion = Version.readVersion(in).         String oldestLuceneSegment = in.readString().         versions.put(index, new Tuple<>(upgradeVersion, oldestLuceneSegment)).     } }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(versions.size()).     for (Map.Entry<String, Tuple<Version, String>> entry : versions.entrySet()) {         out.writeString(entry.getKey()).         Version.writeVersion(entry.getValue().v1(), out).         out.writeString(entry.getValue().v2()).     } }
