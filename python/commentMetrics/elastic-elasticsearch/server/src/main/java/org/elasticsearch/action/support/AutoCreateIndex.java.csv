commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Do we really need to check if an index should be auto created?  */ ;/**  * Do we really need to check if an index should be auto created?  */ public boolean needToCheck() {     return this.autoCreate.autoCreateIndex. }
true;public;2;31;/**  * Should the index be auto created?  * @throws IndexNotFoundException if the index doesn't exist and shouldn't be auto created  */ ;/**  * Should the index be auto created?  * @throws IndexNotFoundException if the index doesn't exist and shouldn't be auto created  */ public boolean shouldAutoCreate(String index, ClusterState state) {     if (resolver.hasIndexOrAlias(index, state)) {         return false.     }     // One volatile read, so that all checks are done against the same instance:     final AutoCreate autoCreate = this.autoCreate.     if (autoCreate.autoCreateIndex == false) {         throw new IndexNotFoundException("[" + AUTO_CREATE_INDEX_SETTING.getKey() + "] is [false]", index).     }     if (dynamicMappingDisabled) {         throw new IndexNotFoundException("[" + MapperService.INDEX_MAPPER_DYNAMIC_SETTING.getKey() + "] is [false]", index).     }     // matches not set, default value of "true"     if (autoCreate.expressions.isEmpty()) {         return true.     }     for (Tuple<String, Boolean> expression : autoCreate.expressions) {         String indexExpression = expression.v1().         boolean include = expression.v2().         if (Regex.simpleMatch(indexExpression, index)) {             if (include) {                 return true.             }             throw new IndexNotFoundException("[" + AUTO_CREATE_INDEX_SETTING.getKey() + "] contains [-" + indexExpression + "] which forbids automatic creation of the index", index).         }     }     throw new IndexNotFoundException("[" + AUTO_CREATE_INDEX_SETTING.getKey() + "] ([" + autoCreate + "]) doesn't match", index). }
false;;0;3;;AutoCreate getAutoCreate() {     return autoCreate. }
false;;1;3;;void setAutoCreate(AutoCreate autoCreate) {     this.autoCreate = autoCreate. }
false;;0;3;;boolean isAutoCreateIndex() {     return autoCreateIndex. }
false;;0;3;;List<Tuple<String, Boolean>> getExpressions() {     return expressions. }
false;public;0;4;;@Override public String toString() {     return string. }
