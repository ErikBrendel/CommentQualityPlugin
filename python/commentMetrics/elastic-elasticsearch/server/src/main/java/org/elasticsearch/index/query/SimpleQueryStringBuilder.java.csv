# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzer(String analyzer);1524684173;Specify an analyzer to use for the query.;public SimpleQueryStringBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };specify,an,analyzer,to,use,for,the,query;public,simple,query,string,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzer(String analyzer);1525334055;Specify an analyzer to use for the query.;public SimpleQueryStringBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };specify,an,analyzer,to,use,for,the,query;public,simple,query,string,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzer(String analyzer);1535139672;Specify an analyzer to use for the query.;public SimpleQueryStringBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };specify,an,analyzer,to,use,for,the,query;public,simple,query,string,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzer(String analyzer);1544177716;Specify an analyzer to use for the query.;public SimpleQueryStringBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };specify,an,analyzer,to,use,for,the,query;public,simple,query,string,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzer(String analyzer);1549017700;Specify an analyzer to use for the query.;public SimpleQueryStringBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };specify,an,analyzer,to,use,for,the,query;public,simple,query,string,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
SimpleQueryStringBuilder -> public boolean lenient();1524684173;Returns whether query parsing should be lenient.;public boolean lenient() {_        return this.settings.lenient()__    };returns,whether,query,parsing,should,be,lenient;public,boolean,lenient,return,this,settings,lenient
SimpleQueryStringBuilder -> public boolean lenient();1525334055;Returns whether query parsing should be lenient.;public boolean lenient() {_        return this.settings.lenient()__    };returns,whether,query,parsing,should,be,lenient;public,boolean,lenient,return,this,settings,lenient
SimpleQueryStringBuilder -> public boolean lenient();1535139672;Returns whether query parsing should be lenient.;public boolean lenient() {_        return this.settings.lenient()__    };returns,whether,query,parsing,should,be,lenient;public,boolean,lenient,return,this,settings,lenient
SimpleQueryStringBuilder -> public boolean lenient();1544177716;Returns whether query parsing should be lenient.;public boolean lenient() {_        return this.settings.lenient()__    };returns,whether,query,parsing,should,be,lenient;public,boolean,lenient,return,this,settings,lenient
SimpleQueryStringBuilder -> public boolean lenient();1549017700;Returns whether query parsing should be lenient.;public boolean lenient() {_        return this.settings.lenient()__    };returns,whether,query,parsing,should,be,lenient;public,boolean,lenient,return,this,settings,lenient
SimpleQueryStringBuilder -> public Operator defaultOperator();1524684173;Returns the default operator for the query.;public Operator defaultOperator() {_        return this.defaultOperator__    };returns,the,default,operator,for,the,query;public,operator,default,operator,return,this,default,operator
SimpleQueryStringBuilder -> public Operator defaultOperator();1525334055;Returns the default operator for the query.;public Operator defaultOperator() {_        return this.defaultOperator__    };returns,the,default,operator,for,the,query;public,operator,default,operator,return,this,default,operator
SimpleQueryStringBuilder -> public Operator defaultOperator();1535139672;Returns the default operator for the query.;public Operator defaultOperator() {_        return this.defaultOperator__    };returns,the,default,operator,for,the,query;public,operator,default,operator,return,this,default,operator
SimpleQueryStringBuilder -> public Operator defaultOperator();1544177716;Returns the default operator for the query.;public Operator defaultOperator() {_        return this.defaultOperator__    };returns,the,default,operator,for,the,query;public,operator,default,operator,return,this,default,operator
SimpleQueryStringBuilder -> public Operator defaultOperator();1549017700;Returns the default operator for the query.;public Operator defaultOperator() {_        return this.defaultOperator__    };returns,the,default,operator,for,the,query;public,operator,default,operator,return,this,default,operator
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(StreamInput in) throws IOException;1524684173;Read from a stream.;public SimpleQueryStringBuilder(StreamInput in) throws IOException {_        super(in)__        queryText = in.readString()__        int size = in.readInt()__        Map<String, Float> fields = new HashMap<>()__        for (int i = 0_ i < size_ i++) {_            String field = in.readString()__            Float weight = in.readFloat()__            fields.put(field, weight)__        }_        fieldsAndWeights.putAll(fields)__        flags = in.readInt()__        analyzer = in.readOptionalString()__        defaultOperator = Operator.readFromStream(in)__        if (in.getVersion().before(Version.V_5_1_1)) {_            in.readBoolean()_ _        }_        settings.lenient(in.readBoolean())__        if (in.getVersion().onOrAfter(Version.V_5_1_1)) {_            this.lenientSet = in.readBoolean()__        }_        settings.analyzeWildcard(in.readBoolean())__        if (in.getVersion().before(Version.V_5_1_1)) {_            in.readString()_ _        }_        minimumShouldMatch = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_5_1_1)) {_            settings.quoteFieldSuffix(in.readOptionalString())__            if (in.getVersion().before(Version.V_6_0_0_beta2)) {_                Boolean useAllFields = in.readOptionalBoolean()__                if (useAllFields != null && useAllFields) {_                    useAllFields(true)__                }_            }_        }_        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            settings.autoGenerateSynonymsPhraseQuery(in.readBoolean())__            settings.fuzzyPrefixLength(in.readVInt())__            settings.fuzzyMaxExpansions(in.readVInt())__            settings.fuzzyTranspositions(in.readBoolean())__        }_    };read,from,a,stream;public,simple,query,string,builder,stream,input,in,throws,ioexception,super,in,query,text,in,read,string,int,size,in,read,int,map,string,float,fields,new,hash,map,for,int,i,0,i,size,i,string,field,in,read,string,float,weight,in,read,float,fields,put,field,weight,fields,and,weights,put,all,fields,flags,in,read,int,analyzer,in,read,optional,string,default,operator,operator,read,from,stream,in,if,in,get,version,before,version,in,read,boolean,settings,lenient,in,read,boolean,if,in,get,version,on,or,after,version,this,lenient,set,in,read,boolean,settings,analyze,wildcard,in,read,boolean,if,in,get,version,before,version,in,read,string,minimum,should,match,in,read,optional,string,if,in,get,version,on,or,after,version,settings,quote,field,suffix,in,read,optional,string,if,in,get,version,before,version,boolean,use,all,fields,in,read,optional,boolean,if,use,all,fields,null,use,all,fields,use,all,fields,true,if,in,get,version,on,or,after,version,settings,auto,generate,synonyms,phrase,query,in,read,boolean,settings,fuzzy,prefix,length,in,read,vint,settings,fuzzy,max,expansions,in,read,vint,settings,fuzzy,transpositions,in,read,boolean
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(StreamInput in) throws IOException;1525334055;Read from a stream.;public SimpleQueryStringBuilder(StreamInput in) throws IOException {_        super(in)__        queryText = in.readString()__        int size = in.readInt()__        Map<String, Float> fields = new HashMap<>()__        for (int i = 0_ i < size_ i++) {_            String field = in.readString()__            Float weight = in.readFloat()__            fields.put(field, weight)__        }_        fieldsAndWeights.putAll(fields)__        flags = in.readInt()__        analyzer = in.readOptionalString()__        defaultOperator = Operator.readFromStream(in)__        if (in.getVersion().before(Version.V_5_1_1)) {_            in.readBoolean()_ _        }_        settings.lenient(in.readBoolean())__        if (in.getVersion().onOrAfter(Version.V_5_1_1)) {_            this.lenientSet = in.readBoolean()__        }_        settings.analyzeWildcard(in.readBoolean())__        if (in.getVersion().before(Version.V_5_1_1)) {_            in.readString()_ _        }_        minimumShouldMatch = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_5_1_1)) {_            settings.quoteFieldSuffix(in.readOptionalString())__            if (in.getVersion().before(Version.V_6_0_0_beta2)) {_                Boolean useAllFields = in.readOptionalBoolean()__                if (useAllFields != null && useAllFields) {_                    useAllFields(true)__                }_            }_        }_        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            settings.autoGenerateSynonymsPhraseQuery(in.readBoolean())__            settings.fuzzyPrefixLength(in.readVInt())__            settings.fuzzyMaxExpansions(in.readVInt())__            settings.fuzzyTranspositions(in.readBoolean())__        }_    };read,from,a,stream;public,simple,query,string,builder,stream,input,in,throws,ioexception,super,in,query,text,in,read,string,int,size,in,read,int,map,string,float,fields,new,hash,map,for,int,i,0,i,size,i,string,field,in,read,string,float,weight,in,read,float,fields,put,field,weight,fields,and,weights,put,all,fields,flags,in,read,int,analyzer,in,read,optional,string,default,operator,operator,read,from,stream,in,if,in,get,version,before,version,in,read,boolean,settings,lenient,in,read,boolean,if,in,get,version,on,or,after,version,this,lenient,set,in,read,boolean,settings,analyze,wildcard,in,read,boolean,if,in,get,version,before,version,in,read,string,minimum,should,match,in,read,optional,string,if,in,get,version,on,or,after,version,settings,quote,field,suffix,in,read,optional,string,if,in,get,version,before,version,boolean,use,all,fields,in,read,optional,boolean,if,use,all,fields,null,use,all,fields,use,all,fields,true,if,in,get,version,on,or,after,version,settings,auto,generate,synonyms,phrase,query,in,read,boolean,settings,fuzzy,prefix,length,in,read,vint,settings,fuzzy,max,expansions,in,read,vint,settings,fuzzy,transpositions,in,read,boolean
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(StreamInput in) throws IOException;1535139672;Read from a stream.;public SimpleQueryStringBuilder(StreamInput in) throws IOException {_        super(in)__        queryText = in.readString()__        int size = in.readInt()__        Map<String, Float> fields = new HashMap<>()__        for (int i = 0_ i < size_ i++) {_            String field = in.readString()__            Float weight = in.readFloat()__            fields.put(field, weight)__        }_        fieldsAndWeights.putAll(fields)__        flags = in.readInt()__        analyzer = in.readOptionalString()__        defaultOperator = Operator.readFromStream(in)__        settings.lenient(in.readBoolean())__        this.lenientSet = in.readBoolean()__        settings.analyzeWildcard(in.readBoolean())__        minimumShouldMatch = in.readOptionalString()__        settings.quoteFieldSuffix(in.readOptionalString())__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            settings.autoGenerateSynonymsPhraseQuery(in.readBoolean())__            settings.fuzzyPrefixLength(in.readVInt())__            settings.fuzzyMaxExpansions(in.readVInt())__            settings.fuzzyTranspositions(in.readBoolean())__        }_    };read,from,a,stream;public,simple,query,string,builder,stream,input,in,throws,ioexception,super,in,query,text,in,read,string,int,size,in,read,int,map,string,float,fields,new,hash,map,for,int,i,0,i,size,i,string,field,in,read,string,float,weight,in,read,float,fields,put,field,weight,fields,and,weights,put,all,fields,flags,in,read,int,analyzer,in,read,optional,string,default,operator,operator,read,from,stream,in,settings,lenient,in,read,boolean,this,lenient,set,in,read,boolean,settings,analyze,wildcard,in,read,boolean,minimum,should,match,in,read,optional,string,settings,quote,field,suffix,in,read,optional,string,if,in,get,version,on,or,after,version,settings,auto,generate,synonyms,phrase,query,in,read,boolean,settings,fuzzy,prefix,length,in,read,vint,settings,fuzzy,max,expansions,in,read,vint,settings,fuzzy,transpositions,in,read,boolean
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(StreamInput in) throws IOException;1544177716;Read from a stream.;public SimpleQueryStringBuilder(StreamInput in) throws IOException {_        super(in)__        queryText = in.readString()__        int size = in.readInt()__        Map<String, Float> fields = new HashMap<>()__        for (int i = 0_ i < size_ i++) {_            String field = in.readString()__            Float weight = in.readFloat()__            fields.put(field, weight)__        }_        fieldsAndWeights.putAll(fields)__        flags = in.readInt()__        analyzer = in.readOptionalString()__        defaultOperator = Operator.readFromStream(in)__        settings.lenient(in.readBoolean())__        this.lenientSet = in.readBoolean()__        settings.analyzeWildcard(in.readBoolean())__        minimumShouldMatch = in.readOptionalString()__        settings.quoteFieldSuffix(in.readOptionalString())__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            settings.autoGenerateSynonymsPhraseQuery(in.readBoolean())__            settings.fuzzyPrefixLength(in.readVInt())__            settings.fuzzyMaxExpansions(in.readVInt())__            settings.fuzzyTranspositions(in.readBoolean())__        }_    };read,from,a,stream;public,simple,query,string,builder,stream,input,in,throws,ioexception,super,in,query,text,in,read,string,int,size,in,read,int,map,string,float,fields,new,hash,map,for,int,i,0,i,size,i,string,field,in,read,string,float,weight,in,read,float,fields,put,field,weight,fields,and,weights,put,all,fields,flags,in,read,int,analyzer,in,read,optional,string,default,operator,operator,read,from,stream,in,settings,lenient,in,read,boolean,this,lenient,set,in,read,boolean,settings,analyze,wildcard,in,read,boolean,minimum,should,match,in,read,optional,string,settings,quote,field,suffix,in,read,optional,string,if,in,get,version,on,or,after,version,settings,auto,generate,synonyms,phrase,query,in,read,boolean,settings,fuzzy,prefix,length,in,read,vint,settings,fuzzy,max,expansions,in,read,vint,settings,fuzzy,transpositions,in,read,boolean
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(StreamInput in) throws IOException;1549017700;Read from a stream.;public SimpleQueryStringBuilder(StreamInput in) throws IOException {_        super(in)__        queryText = in.readString()__        int size = in.readInt()__        Map<String, Float> fields = new HashMap<>()__        for (int i = 0_ i < size_ i++) {_            String field = in.readString()__            Float weight = in.readFloat()__            checkNegativeBoost(weight)__            fields.put(field, weight)__        }_        fieldsAndWeights.putAll(fields)__        flags = in.readInt()__        analyzer = in.readOptionalString()__        defaultOperator = Operator.readFromStream(in)__        settings.lenient(in.readBoolean())__        this.lenientSet = in.readBoolean()__        settings.analyzeWildcard(in.readBoolean())__        minimumShouldMatch = in.readOptionalString()__        settings.quoteFieldSuffix(in.readOptionalString())__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            settings.autoGenerateSynonymsPhraseQuery(in.readBoolean())__            settings.fuzzyPrefixLength(in.readVInt())__            settings.fuzzyMaxExpansions(in.readVInt())__            settings.fuzzyTranspositions(in.readBoolean())__        }_    };read,from,a,stream;public,simple,query,string,builder,stream,input,in,throws,ioexception,super,in,query,text,in,read,string,int,size,in,read,int,map,string,float,fields,new,hash,map,for,int,i,0,i,size,i,string,field,in,read,string,float,weight,in,read,float,check,negative,boost,weight,fields,put,field,weight,fields,and,weights,put,all,fields,flags,in,read,int,analyzer,in,read,optional,string,default,operator,operator,read,from,stream,in,settings,lenient,in,read,boolean,this,lenient,set,in,read,boolean,settings,analyze,wildcard,in,read,boolean,minimum,should,match,in,read,optional,string,settings,quote,field,suffix,in,read,optional,string,if,in,get,version,on,or,after,version,settings,auto,generate,synonyms,phrase,query,in,read,boolean,settings,fuzzy,prefix,length,in,read,vint,settings,fuzzy,max,expansions,in,read,vint,settings,fuzzy,transpositions,in,read,boolean
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field, float boost);1524684173;Add a field to run the query against with a specific boost.;public SimpleQueryStringBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, boost)__        return this__    };add,a,field,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,boost,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field, float boost);1525334055;Add a field to run the query against with a specific boost.;public SimpleQueryStringBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, boost)__        return this__    };add,a,field,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,boost,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field, float boost);1535139672;Add a field to run the query against with a specific boost.;public SimpleQueryStringBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, boost)__        return this__    };add,a,field,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,boost,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field, float boost);1544177716;Add a field to run the query against with a specific boost.;public SimpleQueryStringBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, boost)__        return this__    };add,a,field,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,boost,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field, float boost);1549017700;Add a field to run the query against with a specific boost.;public SimpleQueryStringBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        checkNegativeBoost(boost)__        this.fieldsAndWeights.put(field, boost)__        return this__    };add,a,field,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,check,negative,boost,boost,this,fields,and,weights,put,field,boost,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder lenient(boolean lenient);1524684173;Specifies whether query parsing should be lenient. Defaults to false.;public SimpleQueryStringBuilder lenient(boolean lenient) {_        this.settings.lenient(lenient)__        this.lenientSet = true__        return this__    };specifies,whether,query,parsing,should,be,lenient,defaults,to,false;public,simple,query,string,builder,lenient,boolean,lenient,this,settings,lenient,lenient,this,lenient,set,true,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder lenient(boolean lenient);1525334055;Specifies whether query parsing should be lenient. Defaults to false.;public SimpleQueryStringBuilder lenient(boolean lenient) {_        this.settings.lenient(lenient)__        this.lenientSet = true__        return this__    };specifies,whether,query,parsing,should,be,lenient,defaults,to,false;public,simple,query,string,builder,lenient,boolean,lenient,this,settings,lenient,lenient,this,lenient,set,true,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder lenient(boolean lenient);1535139672;Specifies whether query parsing should be lenient. Defaults to false.;public SimpleQueryStringBuilder lenient(boolean lenient) {_        this.settings.lenient(lenient)__        this.lenientSet = true__        return this__    };specifies,whether,query,parsing,should,be,lenient,defaults,to,false;public,simple,query,string,builder,lenient,boolean,lenient,this,settings,lenient,lenient,this,lenient,set,true,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder lenient(boolean lenient);1544177716;Specifies whether query parsing should be lenient. Defaults to false.;public SimpleQueryStringBuilder lenient(boolean lenient) {_        this.settings.lenient(lenient)__        this.lenientSet = true__        return this__    };specifies,whether,query,parsing,should,be,lenient,defaults,to,false;public,simple,query,string,builder,lenient,boolean,lenient,this,settings,lenient,lenient,this,lenient,set,true,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder lenient(boolean lenient);1549017700;Specifies whether query parsing should be lenient. Defaults to false.;public SimpleQueryStringBuilder lenient(boolean lenient) {_        this.settings.lenient(lenient)__        this.lenientSet = true__        return this__    };specifies,whether,query,parsing,should,be,lenient,defaults,to,false;public,simple,query,string,builder,lenient,boolean,lenient,this,settings,lenient,lenient,this,lenient,set,true,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard);1524684173;Specifies whether wildcards should be analyzed. Defaults to false.;public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard) {_        this.settings.analyzeWildcard(analyzeWildcard)__        return this__    };specifies,whether,wildcards,should,be,analyzed,defaults,to,false;public,simple,query,string,builder,analyze,wildcard,boolean,analyze,wildcard,this,settings,analyze,wildcard,analyze,wildcard,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard);1525334055;Specifies whether wildcards should be analyzed. Defaults to false.;public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard) {_        this.settings.analyzeWildcard(analyzeWildcard)__        return this__    };specifies,whether,wildcards,should,be,analyzed,defaults,to,false;public,simple,query,string,builder,analyze,wildcard,boolean,analyze,wildcard,this,settings,analyze,wildcard,analyze,wildcard,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard);1535139672;Specifies whether wildcards should be analyzed. Defaults to false.;public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard) {_        this.settings.analyzeWildcard(analyzeWildcard)__        return this__    };specifies,whether,wildcards,should,be,analyzed,defaults,to,false;public,simple,query,string,builder,analyze,wildcard,boolean,analyze,wildcard,this,settings,analyze,wildcard,analyze,wildcard,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard);1544177716;Specifies whether wildcards should be analyzed. Defaults to false.;public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard) {_        this.settings.analyzeWildcard(analyzeWildcard)__        return this__    };specifies,whether,wildcards,should,be,analyzed,defaults,to,false;public,simple,query,string,builder,analyze,wildcard,boolean,analyze,wildcard,this,settings,analyze,wildcard,analyze,wildcard,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard);1549017700;Specifies whether wildcards should be analyzed. Defaults to false.;public SimpleQueryStringBuilder analyzeWildcard(boolean analyzeWildcard) {_        this.settings.analyzeWildcard(analyzeWildcard)__        return this__    };specifies,whether,wildcards,should,be,analyzed,defaults,to,false;public,simple,query,string,builder,analyze,wildcard,boolean,analyze,wildcard,this,settings,analyze,wildcard,analyze,wildcard,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field);1524684173;Add a field to run the query against.;public SimpleQueryStringBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };add,a,field,to,run,the,query,against;public,simple,query,string,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,abstract,query,builder,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field);1525334055;Add a field to run the query against.;public SimpleQueryStringBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };add,a,field,to,run,the,query,against;public,simple,query,string,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,abstract,query,builder,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field);1535139672;Add a field to run the query against.;public SimpleQueryStringBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };add,a,field,to,run,the,query,against;public,simple,query,string,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,abstract,query,builder,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field);1544177716;Add a field to run the query against.;public SimpleQueryStringBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };add,a,field,to,run,the,query,against;public,simple,query,string,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,abstract,query,builder,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder field(String field);1549017700;Add a field to run the query against.;public SimpleQueryStringBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty")__        }_        this.fieldsAndWeights.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };add,a,field,to,run,the,query,against;public,simple,query,string,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,and,weights,put,field,abstract,query,builder,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch);1524684173;Specifies the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch) {_        this.minimumShouldMatch = minimumShouldMatch__        return this__    };specifies,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,simple,query,string,builder,minimum,should,match,string,minimum,should,match,this,minimum,should,match,minimum,should,match,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch);1525334055;Specifies the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch) {_        this.minimumShouldMatch = minimumShouldMatch__        return this__    };specifies,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,simple,query,string,builder,minimum,should,match,string,minimum,should,match,this,minimum,should,match,minimum,should,match,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch);1535139672;Specifies the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch) {_        this.minimumShouldMatch = minimumShouldMatch__        return this__    };specifies,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,simple,query,string,builder,minimum,should,match,string,minimum,should,match,this,minimum,should,match,minimum,should,match,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch);1544177716;Specifies the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch) {_        this.minimumShouldMatch = minimumShouldMatch__        return this__    };specifies,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,simple,query,string,builder,minimum,should,match,string,minimum,should,match,this,minimum,should,match,minimum,should,match,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch);1549017700;Specifies the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public SimpleQueryStringBuilder minimumShouldMatch(String minimumShouldMatch) {_        this.minimumShouldMatch = minimumShouldMatch__        return this__    };specifies,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,simple,query,string,builder,minimum,should,match,string,minimum,should,match,this,minimum,should,match,minimum,should,match,return,this
SimpleQueryStringBuilder -> public String analyzer();1524684173;Returns the analyzer to use for the query.;public String analyzer() {_        return this.analyzer__    };returns,the,analyzer,to,use,for,the,query;public,string,analyzer,return,this,analyzer
SimpleQueryStringBuilder -> public String analyzer();1525334055;Returns the analyzer to use for the query.;public String analyzer() {_        return this.analyzer__    };returns,the,analyzer,to,use,for,the,query;public,string,analyzer,return,this,analyzer
SimpleQueryStringBuilder -> public String analyzer();1535139672;Returns the analyzer to use for the query.;public String analyzer() {_        return this.analyzer__    };returns,the,analyzer,to,use,for,the,query;public,string,analyzer,return,this,analyzer
SimpleQueryStringBuilder -> public String analyzer();1544177716;Returns the analyzer to use for the query.;public String analyzer() {_        return this.analyzer__    };returns,the,analyzer,to,use,for,the,query;public,string,analyzer,return,this,analyzer
SimpleQueryStringBuilder -> public String analyzer();1549017700;Returns the analyzer to use for the query.;public String analyzer() {_        return this.analyzer__    };returns,the,analyzer,to,use,for,the,query;public,string,analyzer,return,this,analyzer
SimpleQueryStringBuilder -> public String minimumShouldMatch();1524684173;Returns the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public String minimumShouldMatch() {_        return minimumShouldMatch__    };returns,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,string,minimum,should,match,return,minimum,should,match
SimpleQueryStringBuilder -> public String minimumShouldMatch();1525334055;Returns the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public String minimumShouldMatch() {_        return minimumShouldMatch__    };returns,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,string,minimum,should,match,return,minimum,should,match
SimpleQueryStringBuilder -> public String minimumShouldMatch();1535139672;Returns the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public String minimumShouldMatch() {_        return minimumShouldMatch__    };returns,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,string,minimum,should,match,return,minimum,should,match
SimpleQueryStringBuilder -> public String minimumShouldMatch();1544177716;Returns the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public String minimumShouldMatch() {_        return minimumShouldMatch__    };returns,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,string,minimum,should,match,return,minimum,should,match
SimpleQueryStringBuilder -> public String minimumShouldMatch();1549017700;Returns the minimumShouldMatch to apply to the resulting query should_that be a Boolean query.;public String minimumShouldMatch() {_        return minimumShouldMatch__    };returns,the,minimum,should,match,to,apply,to,the,resulting,query,should,that,be,a,boolean,query;public,string,minimum,should,match,return,minimum,should,match
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags);1524684173;Specify the enabled features of the SimpleQueryString. Defaults to ALL if_none are specified.;public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags) {_        if (flags != null && flags.length > 0) {_            int value = 0__            for (SimpleQueryStringFlag flag : flags) {_                value |= flag.value__            }_            this.flags = value__        } else {_            this.flags = DEFAULT_FLAGS__        }__        return this__    };specify,the,enabled,features,of,the,simple,query,string,defaults,to,all,if,none,are,specified;public,simple,query,string,builder,flags,simple,query,string,flag,flags,if,flags,null,flags,length,0,int,value,0,for,simple,query,string,flag,flag,flags,value,flag,value,this,flags,value,else,this,flags,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags);1525334055;Specify the enabled features of the SimpleQueryString. Defaults to ALL if_none are specified.;public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags) {_        if (flags != null && flags.length > 0) {_            int value = 0__            for (SimpleQueryStringFlag flag : flags) {_                value |= flag.value__            }_            this.flags = value__        } else {_            this.flags = DEFAULT_FLAGS__        }__        return this__    };specify,the,enabled,features,of,the,simple,query,string,defaults,to,all,if,none,are,specified;public,simple,query,string,builder,flags,simple,query,string,flag,flags,if,flags,null,flags,length,0,int,value,0,for,simple,query,string,flag,flag,flags,value,flag,value,this,flags,value,else,this,flags,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags);1535139672;Specify the enabled features of the SimpleQueryString. Defaults to ALL if_none are specified.;public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags) {_        if (flags != null && flags.length > 0) {_            int value = 0__            for (SimpleQueryStringFlag flag : flags) {_                value |= flag.value__            }_            this.flags = value__        } else {_            this.flags = DEFAULT_FLAGS__        }__        return this__    };specify,the,enabled,features,of,the,simple,query,string,defaults,to,all,if,none,are,specified;public,simple,query,string,builder,flags,simple,query,string,flag,flags,if,flags,null,flags,length,0,int,value,0,for,simple,query,string,flag,flag,flags,value,flag,value,this,flags,value,else,this,flags,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags);1544177716;Specify the enabled features of the SimpleQueryString. Defaults to ALL if_none are specified.;public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags) {_        if (flags != null && flags.length > 0) {_            int value = 0__            for (SimpleQueryStringFlag flag : flags) {_                value |= flag.value__            }_            this.flags = value__        } else {_            this.flags = DEFAULT_FLAGS__        }__        return this__    };specify,the,enabled,features,of,the,simple,query,string,defaults,to,all,if,none,are,specified;public,simple,query,string,builder,flags,simple,query,string,flag,flags,if,flags,null,flags,length,0,int,value,0,for,simple,query,string,flag,flag,flags,value,flag,value,this,flags,value,else,this,flags,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags);1549017700;Specify the enabled features of the SimpleQueryString. Defaults to ALL if_none are specified.;public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags) {_        if (flags != null && flags.length > 0) {_            int value = 0__            for (SimpleQueryStringFlag flag : flags) {_                value |= flag.value__            }_            this.flags = value__        } else {_            this.flags = DEFAULT_FLAGS__        }__        return this__    };specify,the,enabled,features,of,the,simple,query,string,defaults,to,all,if,none,are,specified;public,simple,query,string,builder,flags,simple,query,string,flag,flags,if,flags,null,flags,length,0,int,value,0,for,simple,query,string,flag,flag,flags,value,flag,value,this,flags,value,else,this,flags,return,this
SimpleQueryStringBuilder -> int flags();1524684173;For testing only: Return the flags set for this query.;int flags() {_        return this.flags__    };for,testing,only,return,the,flags,set,for,this,query;int,flags,return,this,flags
SimpleQueryStringBuilder -> int flags();1525334055;For testing only: Return the flags set for this query.;int flags() {_        return this.flags__    };for,testing,only,return,the,flags,set,for,this,query;int,flags,return,this,flags
SimpleQueryStringBuilder -> int flags();1535139672;For testing only: Return the flags set for this query.;int flags() {_        return this.flags__    };for,testing,only,return,the,flags,set,for,this,query;int,flags,return,this,flags
SimpleQueryStringBuilder -> int flags();1544177716;For testing only: Return the flags set for this query.;int flags() {_        return this.flags__    };for,testing,only,return,the,flags,set,for,this,query;int,flags,return,this,flags
SimpleQueryStringBuilder -> int flags();1549017700;For testing only: Return the flags set for this query.;int flags() {_        return this.flags__    };for,testing,only,return,the,flags,set,for,this,query;int,flags,return,this,flags
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(String queryText);1524684173;Construct a new simple query with this query string.;public SimpleQueryStringBuilder(String queryText) {_        if (queryText == null) {_            throw new IllegalArgumentException("query text missing")__        }_        this.queryText = queryText__    };construct,a,new,simple,query,with,this,query,string;public,simple,query,string,builder,string,query,text,if,query,text,null,throw,new,illegal,argument,exception,query,text,missing,this,query,text,query,text
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(String queryText);1525334055;Construct a new simple query with this query string.;public SimpleQueryStringBuilder(String queryText) {_        if (queryText == null) {_            throw new IllegalArgumentException("query text missing")__        }_        this.queryText = queryText__    };construct,a,new,simple,query,with,this,query,string;public,simple,query,string,builder,string,query,text,if,query,text,null,throw,new,illegal,argument,exception,query,text,missing,this,query,text,query,text
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(String queryText);1535139672;Construct a new simple query with this query string.;public SimpleQueryStringBuilder(String queryText) {_        if (queryText == null) {_            throw new IllegalArgumentException("query text missing")__        }_        this.queryText = queryText__    };construct,a,new,simple,query,with,this,query,string;public,simple,query,string,builder,string,query,text,if,query,text,null,throw,new,illegal,argument,exception,query,text,missing,this,query,text,query,text
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(String queryText);1544177716;Construct a new simple query with this query string.;public SimpleQueryStringBuilder(String queryText) {_        if (queryText == null) {_            throw new IllegalArgumentException("query text missing")__        }_        this.queryText = queryText__    };construct,a,new,simple,query,with,this,query,string;public,simple,query,string,builder,string,query,text,if,query,text,null,throw,new,illegal,argument,exception,query,text,missing,this,query,text,query,text
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder(String queryText);1549017700;Construct a new simple query with this query string.;public SimpleQueryStringBuilder(String queryText) {_        if (queryText == null) {_            throw new IllegalArgumentException("query text missing")__        }_        this.queryText = queryText__    };construct,a,new,simple,query,with,this,query,string;public,simple,query,string,builder,string,query,text,if,query,text,null,throw,new,illegal,argument,exception,query,text,missing,this,query,text,query,text
SimpleQueryStringBuilder -> public boolean analyzeWildcard();1524684173;Returns whether wildcards should by analyzed.;public boolean analyzeWildcard() {_        return this.settings.analyzeWildcard()__    };returns,whether,wildcards,should,by,analyzed;public,boolean,analyze,wildcard,return,this,settings,analyze,wildcard
SimpleQueryStringBuilder -> public boolean analyzeWildcard();1525334055;Returns whether wildcards should by analyzed.;public boolean analyzeWildcard() {_        return this.settings.analyzeWildcard()__    };returns,whether,wildcards,should,by,analyzed;public,boolean,analyze,wildcard,return,this,settings,analyze,wildcard
SimpleQueryStringBuilder -> public boolean analyzeWildcard();1535139672;Returns whether wildcards should by analyzed.;public boolean analyzeWildcard() {_        return this.settings.analyzeWildcard()__    };returns,whether,wildcards,should,by,analyzed;public,boolean,analyze,wildcard,return,this,settings,analyze,wildcard
SimpleQueryStringBuilder -> public boolean analyzeWildcard();1544177716;Returns whether wildcards should by analyzed.;public boolean analyzeWildcard() {_        return this.settings.analyzeWildcard()__    };returns,whether,wildcards,should,by,analyzed;public,boolean,analyze,wildcard,return,this,settings,analyze,wildcard
SimpleQueryStringBuilder -> public boolean analyzeWildcard();1549017700;Returns whether wildcards should by analyzed.;public boolean analyzeWildcard() {_        return this.settings.analyzeWildcard()__    };returns,whether,wildcards,should,by,analyzed;public,boolean,analyze,wildcard,return,this,settings,analyze,wildcard
SimpleQueryStringBuilder -> public Map<String, Float> fields();1524684173;Returns the fields including their respective boosts to run the query against.;public Map<String, Float> fields() {_        return this.fieldsAndWeights__    };returns,the,fields,including,their,respective,boosts,to,run,the,query,against;public,map,string,float,fields,return,this,fields,and,weights
SimpleQueryStringBuilder -> public Map<String, Float> fields();1525334055;Returns the fields including their respective boosts to run the query against.;public Map<String, Float> fields() {_        return this.fieldsAndWeights__    };returns,the,fields,including,their,respective,boosts,to,run,the,query,against;public,map,string,float,fields,return,this,fields,and,weights
SimpleQueryStringBuilder -> public Map<String, Float> fields();1535139672;Returns the fields including their respective boosts to run the query against.;public Map<String, Float> fields() {_        return this.fieldsAndWeights__    };returns,the,fields,including,their,respective,boosts,to,run,the,query,against;public,map,string,float,fields,return,this,fields,and,weights
SimpleQueryStringBuilder -> public Map<String, Float> fields();1544177716;Returns the fields including their respective boosts to run the query against.;public Map<String, Float> fields() {_        return this.fieldsAndWeights__    };returns,the,fields,including,their,respective,boosts,to,run,the,query,against;public,map,string,float,fields,return,this,fields,and,weights
SimpleQueryStringBuilder -> public Map<String, Float> fields();1549017700;Returns the fields including their respective boosts to run the query against.;public Map<String, Float> fields() {_        return this.fieldsAndWeights__    };returns,the,fields,including,their,respective,boosts,to,run,the,query,against;public,map,string,float,fields,return,this,fields,and,weights
SimpleQueryStringBuilder -> SimpleQueryStringBuilder flags(int flags);1524684173;For testing and serialisation only.;SimpleQueryStringBuilder flags(int flags) {_        this.flags = flags__        return this__    };for,testing,and,serialisation,only;simple,query,string,builder,flags,int,flags,this,flags,flags,return,this
SimpleQueryStringBuilder -> SimpleQueryStringBuilder flags(int flags);1525334055;For testing and serialisation only.;SimpleQueryStringBuilder flags(int flags) {_        this.flags = flags__        return this__    };for,testing,and,serialisation,only;simple,query,string,builder,flags,int,flags,this,flags,flags,return,this
SimpleQueryStringBuilder -> SimpleQueryStringBuilder flags(int flags);1535139672;For testing and serialisation only.;SimpleQueryStringBuilder flags(int flags) {_        this.flags = flags__        return this__    };for,testing,and,serialisation,only;simple,query,string,builder,flags,int,flags,this,flags,flags,return,this
SimpleQueryStringBuilder -> SimpleQueryStringBuilder flags(int flags);1544177716;For testing and serialisation only.;SimpleQueryStringBuilder flags(int flags) {_        this.flags = flags__        return this__    };for,testing,and,serialisation,only;simple,query,string,builder,flags,int,flags,this,flags,flags,return,this
SimpleQueryStringBuilder -> SimpleQueryStringBuilder flags(int flags);1549017700;For testing and serialisation only.;SimpleQueryStringBuilder flags(int flags) {_        this.flags = flags__        return this__    };for,testing,and,serialisation,only;simple,query,string,builder,flags,int,flags,this,flags,flags,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1524684173;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.settings.fuzzyTranspositions(fuzzyTranspositions)__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,simple,query,string,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,settings,fuzzy,transpositions,fuzzy,transpositions,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1525334055;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.settings.fuzzyTranspositions(fuzzyTranspositions)__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,simple,query,string,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,settings,fuzzy,transpositions,fuzzy,transpositions,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1535139672;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.settings.fuzzyTranspositions(fuzzyTranspositions)__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,simple,query,string,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,settings,fuzzy,transpositions,fuzzy,transpositions,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1544177716;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.settings.fuzzyTranspositions(fuzzyTranspositions)__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,simple,query,string,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,settings,fuzzy,transpositions,fuzzy,transpositions,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1549017700;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public SimpleQueryStringBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.settings.fuzzyTranspositions(fuzzyTranspositions)__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,simple,query,string,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,settings,fuzzy,transpositions,fuzzy,transpositions,return,this
SimpleQueryStringBuilder -> @Deprecated     public SimpleQueryStringBuilder useAllFields(Boolean useAllFields);1524684173;This setting is deprecated, set {@link #field(String)} to "*" instead.;@Deprecated_    public SimpleQueryStringBuilder useAllFields(Boolean useAllFields) {_        if (useAllFields != null && useAllFields) {_            this.fieldsAndWeights = Collections.singletonMap("*", 1.0f)__        }_        return this__    };this,setting,is,deprecated,set,link,field,string,to,instead;deprecated,public,simple,query,string,builder,use,all,fields,boolean,use,all,fields,if,use,all,fields,null,use,all,fields,this,fields,and,weights,collections,singleton,map,1,0f,return,this
SimpleQueryStringBuilder -> @Deprecated     public SimpleQueryStringBuilder useAllFields(Boolean useAllFields);1525334055;This setting is deprecated, set {@link #field(String)} to "*" instead.;@Deprecated_    public SimpleQueryStringBuilder useAllFields(Boolean useAllFields) {_        if (useAllFields != null && useAllFields) {_            this.fieldsAndWeights = Collections.singletonMap("*", 1.0f)__        }_        return this__    };this,setting,is,deprecated,set,link,field,string,to,instead;deprecated,public,simple,query,string,builder,use,all,fields,boolean,use,all,fields,if,use,all,fields,null,use,all,fields,this,fields,and,weights,collections,singleton,map,1,0f,return,this
SimpleQueryStringBuilder -> @Deprecated     public SimpleQueryStringBuilder useAllFields(Boolean useAllFields);1535139672;This setting is deprecated, set {@link #field(String)} to "*" instead.;@Deprecated_    public SimpleQueryStringBuilder useAllFields(Boolean useAllFields) {_        if (useAllFields != null && useAllFields) {_            this.fieldsAndWeights = Collections.singletonMap("*", 1.0f)__        }_        return this__    };this,setting,is,deprecated,set,link,field,string,to,instead;deprecated,public,simple,query,string,builder,use,all,fields,boolean,use,all,fields,if,use,all,fields,null,use,all,fields,this,fields,and,weights,collections,singleton,map,1,0f,return,this
SimpleQueryStringBuilder -> public String value();1524684173;Returns the text to parse the query from.;public String value() {_        return this.queryText__    };returns,the,text,to,parse,the,query,from;public,string,value,return,this,query,text
SimpleQueryStringBuilder -> public String value();1525334055;Returns the text to parse the query from.;public String value() {_        return this.queryText__    };returns,the,text,to,parse,the,query,from;public,string,value,return,this,query,text
SimpleQueryStringBuilder -> public String value();1535139672;Returns the text to parse the query from.;public String value() {_        return this.queryText__    };returns,the,text,to,parse,the,query,from;public,string,value,return,this,query,text
SimpleQueryStringBuilder -> public String value();1544177716;Returns the text to parse the query from.;public String value() {_        return this.queryText__    };returns,the,text,to,parse,the,query,from;public,string,value,return,this,query,text
SimpleQueryStringBuilder -> public String value();1549017700;Returns the text to parse the query from.;public String value() {_        return this.queryText__    };returns,the,text,to,parse,the,query,from;public,string,value,return,this,query,text
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator);1524684173;Specify the default operator for the query. Defaults to "OR" if no_operator is specified.;public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator) {_        this.defaultOperator = (defaultOperator != null) ? defaultOperator : DEFAULT_OPERATOR__        return this__    };specify,the,default,operator,for,the,query,defaults,to,or,if,no,operator,is,specified;public,simple,query,string,builder,default,operator,operator,default,operator,this,default,operator,default,operator,null,default,operator,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator);1525334055;Specify the default operator for the query. Defaults to "OR" if no_operator is specified.;public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator) {_        this.defaultOperator = (defaultOperator != null) ? defaultOperator : DEFAULT_OPERATOR__        return this__    };specify,the,default,operator,for,the,query,defaults,to,or,if,no,operator,is,specified;public,simple,query,string,builder,default,operator,operator,default,operator,this,default,operator,default,operator,null,default,operator,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator);1535139672;Specify the default operator for the query. Defaults to "OR" if no_operator is specified.;public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator) {_        this.defaultOperator = (defaultOperator != null) ? defaultOperator : DEFAULT_OPERATOR__        return this__    };specify,the,default,operator,for,the,query,defaults,to,or,if,no,operator,is,specified;public,simple,query,string,builder,default,operator,operator,default,operator,this,default,operator,default,operator,null,default,operator,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator);1544177716;Specify the default operator for the query. Defaults to "OR" if no_operator is specified.;public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator) {_        this.defaultOperator = (defaultOperator != null) ? defaultOperator : DEFAULT_OPERATOR__        return this__    };specify,the,default,operator,for,the,query,defaults,to,or,if,no,operator,is,specified;public,simple,query,string,builder,default,operator,operator,default,operator,this,default,operator,default,operator,null,default,operator,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator);1549017700;Specify the default operator for the query. Defaults to "OR" if no_operator is specified.;public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator) {_        this.defaultOperator = (defaultOperator != null) ? defaultOperator : DEFAULT_OPERATOR__        return this__    };specify,the,default,operator,for,the,query,defaults,to,or,if,no,operator,is,specified;public,simple,query,string,builder,default,operator,operator,default,operator,this,default,operator,default,operator,null,default,operator,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder quoteFieldSuffix(String suffix);1524684173;Set the suffix to append to field names for phrase matching.;public SimpleQueryStringBuilder quoteFieldSuffix(String suffix) {_        settings.quoteFieldSuffix(suffix)__        return this__    };set,the,suffix,to,append,to,field,names,for,phrase,matching;public,simple,query,string,builder,quote,field,suffix,string,suffix,settings,quote,field,suffix,suffix,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder quoteFieldSuffix(String suffix);1525334055;Set the suffix to append to field names for phrase matching.;public SimpleQueryStringBuilder quoteFieldSuffix(String suffix) {_        settings.quoteFieldSuffix(suffix)__        return this__    };set,the,suffix,to,append,to,field,names,for,phrase,matching;public,simple,query,string,builder,quote,field,suffix,string,suffix,settings,quote,field,suffix,suffix,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder quoteFieldSuffix(String suffix);1535139672;Set the suffix to append to field names for phrase matching.;public SimpleQueryStringBuilder quoteFieldSuffix(String suffix) {_        settings.quoteFieldSuffix(suffix)__        return this__    };set,the,suffix,to,append,to,field,names,for,phrase,matching;public,simple,query,string,builder,quote,field,suffix,string,suffix,settings,quote,field,suffix,suffix,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder quoteFieldSuffix(String suffix);1544177716;Set the suffix to append to field names for phrase matching.;public SimpleQueryStringBuilder quoteFieldSuffix(String suffix) {_        settings.quoteFieldSuffix(suffix)__        return this__    };set,the,suffix,to,append,to,field,names,for,phrase,matching;public,simple,query,string,builder,quote,field,suffix,string,suffix,settings,quote,field,suffix,suffix,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder quoteFieldSuffix(String suffix);1549017700;Set the suffix to append to field names for phrase matching.;public SimpleQueryStringBuilder quoteFieldSuffix(String suffix) {_        settings.quoteFieldSuffix(suffix)__        return this__    };set,the,suffix,to,append,to,field,names,for,phrase,matching;public,simple,query,string,builder,quote,field,suffix,string,suffix,settings,quote,field,suffix,suffix,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fields(Map<String, Float> fields);1524684173;Add several fields to run the query against with a specific boost.;public SimpleQueryStringBuilder fields(Map<String, Float> fields) {_        Objects.requireNonNull(fields, "fields cannot be null")__        this.fieldsAndWeights.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,fields,map,string,float,fields,objects,require,non,null,fields,fields,cannot,be,null,this,fields,and,weights,put,all,fields,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fields(Map<String, Float> fields);1525334055;Add several fields to run the query against with a specific boost.;public SimpleQueryStringBuilder fields(Map<String, Float> fields) {_        Objects.requireNonNull(fields, "fields cannot be null")__        this.fieldsAndWeights.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,fields,map,string,float,fields,objects,require,non,null,fields,fields,cannot,be,null,this,fields,and,weights,put,all,fields,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fields(Map<String, Float> fields);1535139672;Add several fields to run the query against with a specific boost.;public SimpleQueryStringBuilder fields(Map<String, Float> fields) {_        Objects.requireNonNull(fields, "fields cannot be null")__        this.fieldsAndWeights.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,fields,map,string,float,fields,objects,require,non,null,fields,fields,cannot,be,null,this,fields,and,weights,put,all,fields,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fields(Map<String, Float> fields);1544177716;Add several fields to run the query against with a specific boost.;public SimpleQueryStringBuilder fields(Map<String, Float> fields) {_        Objects.requireNonNull(fields, "fields cannot be null")__        this.fieldsAndWeights.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,fields,map,string,float,fields,objects,require,non,null,fields,fields,cannot,be,null,this,fields,and,weights,put,all,fields,return,this
SimpleQueryStringBuilder -> public SimpleQueryStringBuilder fields(Map<String, Float> fields);1549017700;Add several fields to run the query against with a specific boost.;public SimpleQueryStringBuilder fields(Map<String, Float> fields) {_        Objects.requireNonNull(fields, "fields cannot be null")__        for (float fieldBoost : fields.values()) {_            checkNegativeBoost(fieldBoost)__        }_        this.fieldsAndWeights.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,simple,query,string,builder,fields,map,string,float,fields,objects,require,non,null,fields,fields,cannot,be,null,for,float,field,boost,fields,values,check,negative,boost,field,boost,this,fields,and,weights,put,all,fields,return,this
SimpleQueryStringBuilder -> public String quoteFieldSuffix();1524684173;Return the suffix to append to field names for phrase matching.;public String quoteFieldSuffix() {_        return settings.quoteFieldSuffix()__    };return,the,suffix,to,append,to,field,names,for,phrase,matching;public,string,quote,field,suffix,return,settings,quote,field,suffix
SimpleQueryStringBuilder -> public String quoteFieldSuffix();1525334055;Return the suffix to append to field names for phrase matching.;public String quoteFieldSuffix() {_        return settings.quoteFieldSuffix()__    };return,the,suffix,to,append,to,field,names,for,phrase,matching;public,string,quote,field,suffix,return,settings,quote,field,suffix
SimpleQueryStringBuilder -> public String quoteFieldSuffix();1535139672;Return the suffix to append to field names for phrase matching.;public String quoteFieldSuffix() {_        return settings.quoteFieldSuffix()__    };return,the,suffix,to,append,to,field,names,for,phrase,matching;public,string,quote,field,suffix,return,settings,quote,field,suffix
SimpleQueryStringBuilder -> public String quoteFieldSuffix();1544177716;Return the suffix to append to field names for phrase matching.;public String quoteFieldSuffix() {_        return settings.quoteFieldSuffix()__    };return,the,suffix,to,append,to,field,names,for,phrase,matching;public,string,quote,field,suffix,return,settings,quote,field,suffix
SimpleQueryStringBuilder -> public String quoteFieldSuffix();1549017700;Return the suffix to append to field names for phrase matching.;public String quoteFieldSuffix() {_        return settings.quoteFieldSuffix()__    };return,the,suffix,to,append,to,field,names,for,phrase,matching;public,string,quote,field,suffix,return,settings,quote,field,suffix
SimpleQueryStringBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1524684173;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to <tt>true</tt>.;public boolean autoGenerateSynonymsPhraseQuery() {_        return settings.autoGenerateSynonymsPhraseQuery()__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,tt,true,tt;public,boolean,auto,generate,synonyms,phrase,query,return,settings,auto,generate,synonyms,phrase,query
SimpleQueryStringBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1525334055;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to {@code true}.;public boolean autoGenerateSynonymsPhraseQuery() {_        return settings.autoGenerateSynonymsPhraseQuery()__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,code,true;public,boolean,auto,generate,synonyms,phrase,query,return,settings,auto,generate,synonyms,phrase,query
SimpleQueryStringBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1535139672;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to {@code true}.;public boolean autoGenerateSynonymsPhraseQuery() {_        return settings.autoGenerateSynonymsPhraseQuery()__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,code,true;public,boolean,auto,generate,synonyms,phrase,query,return,settings,auto,generate,synonyms,phrase,query
SimpleQueryStringBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1544177716;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to {@code true}.;public boolean autoGenerateSynonymsPhraseQuery() {_        return settings.autoGenerateSynonymsPhraseQuery()__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,code,true;public,boolean,auto,generate,synonyms,phrase,query,return,settings,auto,generate,synonyms,phrase,query
SimpleQueryStringBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1549017700;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to {@code true}.;public boolean autoGenerateSynonymsPhraseQuery() {_        return settings.autoGenerateSynonymsPhraseQuery()__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,code,true;public,boolean,auto,generate,synonyms,phrase,query,return,settings,auto,generate,synonyms,phrase,query
