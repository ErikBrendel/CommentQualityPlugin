# id;timestamp;commentText;codeText;commentWords;codeWords
SliceBuilder -> public int getId();1524684173;The id of the slice.;public int getId() {_        return id__    };the,id,of,the,slice;public,int,get,id,return,id
SliceBuilder -> public int getId();1524780945;The id of the slice.;public int getId() {_        return id__    };the,id,of,the,slice;public,int,get,id,return,id
SliceBuilder -> public int getId();1540486836;The id of the slice.;public int getId() {_        return id__    };the,id,of,the,slice;public,int,get,id,return,id
SliceBuilder -> public int getId();1541592065;The id of the slice.;public int getId() {_        return id__    };the,id,of,the,slice;public,int,get,id,return,id
SliceBuilder -> public int getMax();1524684173;The maximum number of slices.;public int getMax() {_        return max__    };the,maximum,number,of,slices;public,int,get,max,return,max
SliceBuilder -> public int getMax();1524780945;The maximum number of slices.;public int getMax() {_        return max__    };the,maximum,number,of,slices;public,int,get,max,return,max
SliceBuilder -> public int getMax();1540486836;The maximum number of slices.;public int getMax() {_        return max__    };the,maximum,number,of,slices;public,int,get,max,return,max
SliceBuilder -> public int getMax();1541592065;The maximum number of slices.;public int getMax() {_        return max__    };the,maximum,number,of,slices;public,int,get,max,return,max
SliceBuilder -> public String getField();1524684173;The name of the field to slice against;public String getField() {_        return this.field__    };the,name,of,the,field,to,slice,against;public,string,get,field,return,this,field
SliceBuilder -> public String getField();1524780945;The name of the field to slice against;public String getField() {_        return this.field__    };the,name,of,the,field,to,slice,against;public,string,get,field,return,this,field
SliceBuilder -> public String getField();1540486836;The name of the field to slice against;public String getField() {_        return this.field__    };the,name,of,the,field,to,slice,against;public,string,get,field,return,this,field
SliceBuilder -> public String getField();1541592065;The name of the field to slice against;public String getField() {_        return this.field__    };the,name,of,the,field,to,slice,against;public,string,get,field,return,this,field
SliceBuilder -> public Query toFilter(ClusterService clusterService, ShardSearchRequest request, QueryShardContext context, Version minNodeVersion);1524780945;Converts this QueryBuilder to a lucene {@link Query}.__@param context Additional information needed to build the query;public Query toFilter(ClusterService clusterService, ShardSearchRequest request, QueryShardContext context, Version minNodeVersion) {_        final MappedFieldType type = context.fieldMapper(field)__        if (type == null) {_            throw new IllegalArgumentException("field " + field + " not found")__        }__        int shardId = request.shardId().id()__        int numShards = context.getIndexSettings().getNumberOfShards()__        if (minNodeVersion.onOrAfter(Version.V_6_4_0) &&_                (request.preference() != null || request.indexRoutings().length > 0)) {_            GroupShardsIterator<ShardIterator> group = buildShardIterator(clusterService, request)__            assert group.size() <= numShards : "index routing shards: " + group.size() +_                " cannot be greater than total number of shards: " + numShards__            if (group.size() < numShards) {_                _                numShards = group.size()__                int ord = 0__                shardId = -1__                _                for (ShardIterator it : group) {_                    assert it.shardId().getIndex().equals(request.shardId().getIndex())__                    if (request.shardId().equals(it.shardId())) {_                        shardId = ord__                        break__                    }_                    ++ord__                }_                assert shardId != -1 : "shard id: " + request.shardId().getId() + " not found in index shard routing"__            }_        }__        String field = this.field__        boolean useTermQuery = false__        if ("_uid".equals(field)) {_            _            field = IdFieldMapper.NAME__            if (context.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_7_0_0_alpha1)) {_                throw new IllegalArgumentException("Computing slices on the [_uid] field is illegal for 7.x indices, use [_id] instead")__            }_            DEPRECATION_LOG.deprecated("Computing slices on the [_uid] field is deprecated for 6.x indices, use [_id] instead")__            useTermQuery = true__        } else if (IdFieldMapper.NAME.equals(field)) {_            useTermQuery = true__        } else if (type.hasDocValues() == false) {_            throw new IllegalArgumentException("cannot load numeric doc values on " + field)__        } else {_            IndexFieldData ifm = context.getForField(type)__            if (ifm instanceof IndexNumericFieldData == false) {_                throw new IllegalArgumentException("cannot load numeric doc values on " + field)__            }_        }__        if (numShards == 1) {_            return useTermQuery ? new TermsSliceQuery(field, id, max) :_                new DocValuesSliceQuery(field, id, max)__        }_        if (max >= numShards) {_            _            __            _            int targetShard = id % numShards__            if (targetShard != shardId) {_                _                return new MatchNoDocsQuery("this shard is not part of the slice")__            }_            _            int numSlicesInShard = max / numShards__            int rest = max % numShards__            if (rest > targetShard) {_                numSlicesInShard++__            }__            if (numSlicesInShard == 1) {_                _                return new MatchAllDocsQuery()__            }_            _            int shardSlice = id / numShards___            return useTermQuery ?_                new TermsSliceQuery(field, shardSlice, numSlicesInShard) :_                new DocValuesSliceQuery(field, shardSlice, numSlicesInShard)__        }_        __        _        int targetSlice = shardId % max__        if (id != targetSlice) {_            _            return new MatchNoDocsQuery("this shard is not part of the slice")__        }_        return new MatchAllDocsQuery()__    };converts,this,query,builder,to,a,lucene,link,query,param,context,additional,information,needed,to,build,the,query;public,query,to,filter,cluster,service,cluster,service,shard,search,request,request,query,shard,context,context,version,min,node,version,final,mapped,field,type,type,context,field,mapper,field,if,type,null,throw,new,illegal,argument,exception,field,field,not,found,int,shard,id,request,shard,id,id,int,num,shards,context,get,index,settings,get,number,of,shards,if,min,node,version,on,or,after,version,request,preference,null,request,index,routings,length,0,group,shards,iterator,shard,iterator,group,build,shard,iterator,cluster,service,request,assert,group,size,num,shards,index,routing,shards,group,size,cannot,be,greater,than,total,number,of,shards,num,shards,if,group,size,num,shards,num,shards,group,size,int,ord,0,shard,id,1,for,shard,iterator,it,group,assert,it,shard,id,get,index,equals,request,shard,id,get,index,if,request,shard,id,equals,it,shard,id,shard,id,ord,break,ord,assert,shard,id,1,shard,id,request,shard,id,get,id,not,found,in,index,shard,routing,string,field,this,field,boolean,use,term,query,false,if,equals,field,field,id,field,mapper,name,if,context,get,index,settings,get,index,version,created,on,or,after,version,throw,new,illegal,argument,exception,computing,slices,on,the,field,is,illegal,for,7,x,indices,use,instead,deprecated,computing,slices,on,the,field,is,deprecated,for,6,x,indices,use,instead,use,term,query,true,else,if,id,field,mapper,name,equals,field,use,term,query,true,else,if,type,has,doc,values,false,throw,new,illegal,argument,exception,cannot,load,numeric,doc,values,on,field,else,index,field,data,ifm,context,get,for,field,type,if,ifm,instanceof,index,numeric,field,data,false,throw,new,illegal,argument,exception,cannot,load,numeric,doc,values,on,field,if,num,shards,1,return,use,term,query,new,terms,slice,query,field,id,max,new,doc,values,slice,query,field,id,max,if,max,num,shards,int,target,shard,id,num,shards,if,target,shard,shard,id,return,new,match,no,docs,query,this,shard,is,not,part,of,the,slice,int,num,slices,in,shard,max,num,shards,int,rest,max,num,shards,if,rest,target,shard,num,slices,in,shard,if,num,slices,in,shard,1,return,new,match,all,docs,query,int,shard,slice,id,num,shards,return,use,term,query,new,terms,slice,query,field,shard,slice,num,slices,in,shard,new,doc,values,slice,query,field,shard,slice,num,slices,in,shard,int,target,slice,shard,id,max,if,id,target,slice,return,new,match,no,docs,query,this,shard,is,not,part,of,the,slice,return,new,match,all,docs,query
SliceBuilder -> public Query toFilter(ClusterService clusterService, ShardSearchRequest request, QueryShardContext context, Version minNodeVersion);1540486836;Converts this QueryBuilder to a lucene {@link Query}.__@param context Additional information needed to build the query;public Query toFilter(ClusterService clusterService, ShardSearchRequest request, QueryShardContext context, Version minNodeVersion) {_        final MappedFieldType type = context.fieldMapper(field)__        if (type == null) {_            throw new IllegalArgumentException("field " + field + " not found")__        }__        int shardId = request.shardId().id()__        int numShards = context.getIndexSettings().getNumberOfShards()__        if (minNodeVersion.onOrAfter(Version.V_6_4_0) &&_                (request.preference() != null || request.indexRoutings().length > 0)) {_            GroupShardsIterator<ShardIterator> group = buildShardIterator(clusterService, request)__            assert group.size() <= numShards : "index routing shards: " + group.size() +_                " cannot be greater than total number of shards: " + numShards__            if (group.size() < numShards) {_                _                numShards = group.size()__                int ord = 0__                shardId = -1__                _                for (ShardIterator it : group) {_                    assert it.shardId().getIndex().equals(request.shardId().getIndex())__                    if (request.shardId().equals(it.shardId())) {_                        shardId = ord__                        break__                    }_                    ++ord__                }_                assert shardId != -1 : "shard id: " + request.shardId().getId() + " not found in index shard routing"__            }_        }__        String field = this.field__        boolean useTermQuery = false__        if ("_uid".equals(field)) {_            _            field = IdFieldMapper.NAME__            if (context.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_7_0_0_alpha1)) {_                throw new IllegalArgumentException("Computing slices on the [_uid] field is illegal for 7.x indices, use [_id] instead")__            }_            DEPRECATION_LOG.deprecated("Computing slices on the [_uid] field is deprecated for 6.x indices, use [_id] instead")__            useTermQuery = true__        } else if (IdFieldMapper.NAME.equals(field)) {_            useTermQuery = true__        } else if (type.hasDocValues() == false) {_            throw new IllegalArgumentException("cannot load numeric doc values on " + field)__        } else {_            IndexFieldData ifm = context.getForField(type)__            if (ifm instanceof IndexNumericFieldData == false) {_                throw new IllegalArgumentException("cannot load numeric doc values on " + field)__            }_        }__        if (numShards == 1) {_            return useTermQuery ? new TermsSliceQuery(field, id, max) :_                new DocValuesSliceQuery(field, id, max)__        }_        if (max >= numShards) {_            _            __            _            int targetShard = id % numShards__            if (targetShard != shardId) {_                _                return new MatchNoDocsQuery("this shard is not part of the slice")__            }_            _            int numSlicesInShard = max / numShards__            int rest = max % numShards__            if (rest > targetShard) {_                numSlicesInShard++__            }__            if (numSlicesInShard == 1) {_                _                return new MatchAllDocsQuery()__            }_            _            int shardSlice = id / numShards___            return useTermQuery ?_                new TermsSliceQuery(field, shardSlice, numSlicesInShard) :_                new DocValuesSliceQuery(field, shardSlice, numSlicesInShard)__        }_        __        _        int targetSlice = shardId % max__        if (id != targetSlice) {_            _            return new MatchNoDocsQuery("this shard is not part of the slice")__        }_        return new MatchAllDocsQuery()__    };converts,this,query,builder,to,a,lucene,link,query,param,context,additional,information,needed,to,build,the,query;public,query,to,filter,cluster,service,cluster,service,shard,search,request,request,query,shard,context,context,version,min,node,version,final,mapped,field,type,type,context,field,mapper,field,if,type,null,throw,new,illegal,argument,exception,field,field,not,found,int,shard,id,request,shard,id,id,int,num,shards,context,get,index,settings,get,number,of,shards,if,min,node,version,on,or,after,version,request,preference,null,request,index,routings,length,0,group,shards,iterator,shard,iterator,group,build,shard,iterator,cluster,service,request,assert,group,size,num,shards,index,routing,shards,group,size,cannot,be,greater,than,total,number,of,shards,num,shards,if,group,size,num,shards,num,shards,group,size,int,ord,0,shard,id,1,for,shard,iterator,it,group,assert,it,shard,id,get,index,equals,request,shard,id,get,index,if,request,shard,id,equals,it,shard,id,shard,id,ord,break,ord,assert,shard,id,1,shard,id,request,shard,id,get,id,not,found,in,index,shard,routing,string,field,this,field,boolean,use,term,query,false,if,equals,field,field,id,field,mapper,name,if,context,get,index,settings,get,index,version,created,on,or,after,version,throw,new,illegal,argument,exception,computing,slices,on,the,field,is,illegal,for,7,x,indices,use,instead,deprecated,computing,slices,on,the,field,is,deprecated,for,6,x,indices,use,instead,use,term,query,true,else,if,id,field,mapper,name,equals,field,use,term,query,true,else,if,type,has,doc,values,false,throw,new,illegal,argument,exception,cannot,load,numeric,doc,values,on,field,else,index,field,data,ifm,context,get,for,field,type,if,ifm,instanceof,index,numeric,field,data,false,throw,new,illegal,argument,exception,cannot,load,numeric,doc,values,on,field,if,num,shards,1,return,use,term,query,new,terms,slice,query,field,id,max,new,doc,values,slice,query,field,id,max,if,max,num,shards,int,target,shard,id,num,shards,if,target,shard,shard,id,return,new,match,no,docs,query,this,shard,is,not,part,of,the,slice,int,num,slices,in,shard,max,num,shards,int,rest,max,num,shards,if,rest,target,shard,num,slices,in,shard,if,num,slices,in,shard,1,return,new,match,all,docs,query,int,shard,slice,id,num,shards,return,use,term,query,new,terms,slice,query,field,shard,slice,num,slices,in,shard,new,doc,values,slice,query,field,shard,slice,num,slices,in,shard,int,target,slice,shard,id,max,if,id,target,slice,return,new,match,no,docs,query,this,shard,is,not,part,of,the,slice,return,new,match,all,docs,query
SliceBuilder -> public Query toFilter(ClusterService clusterService, ShardSearchRequest request, QueryShardContext context, Version minNodeVersion);1541592065;Converts this QueryBuilder to a lucene {@link Query}.__@param context Additional information needed to build the query;public Query toFilter(ClusterService clusterService, ShardSearchRequest request, QueryShardContext context, Version minNodeVersion) {_        final MappedFieldType type = context.fieldMapper(field)__        if (type == null) {_            throw new IllegalArgumentException("field " + field + " not found")__        }__        int shardId = request.shardId().id()__        int numShards = context.getIndexSettings().getNumberOfShards()__        if (minNodeVersion.onOrAfter(Version.V_6_4_0) &&_                (request.preference() != null || request.indexRoutings().length > 0)) {_            GroupShardsIterator<ShardIterator> group = buildShardIterator(clusterService, request)__            assert group.size() <= numShards : "index routing shards: " + group.size() +_                " cannot be greater than total number of shards: " + numShards__            if (group.size() < numShards) {_                _                numShards = group.size()__                int ord = 0__                shardId = -1__                _                for (ShardIterator it : group) {_                    assert it.shardId().getIndex().equals(request.shardId().getIndex())__                    if (request.shardId().equals(it.shardId())) {_                        shardId = ord__                        break__                    }_                    ++ord__                }_                assert shardId != -1 : "shard id: " + request.shardId().getId() + " not found in index shard routing"__            }_        }__        String field = this.field__        boolean useTermQuery = false__        if ("_uid".equals(field)) {_            _            field = IdFieldMapper.NAME__            if (context.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_7_0_0)) {_                throw new IllegalArgumentException("Computing slices on the [_uid] field is illegal for 7.x indices, use [_id] instead")__            }_            DEPRECATION_LOG.deprecated("Computing slices on the [_uid] field is deprecated for 6.x indices, use [_id] instead")__            useTermQuery = true__        } else if (IdFieldMapper.NAME.equals(field)) {_            useTermQuery = true__        } else if (type.hasDocValues() == false) {_            throw new IllegalArgumentException("cannot load numeric doc values on " + field)__        } else {_            IndexFieldData ifm = context.getForField(type)__            if (ifm instanceof IndexNumericFieldData == false) {_                throw new IllegalArgumentException("cannot load numeric doc values on " + field)__            }_        }__        if (numShards == 1) {_            return useTermQuery ? new TermsSliceQuery(field, id, max) :_                new DocValuesSliceQuery(field, id, max)__        }_        if (max >= numShards) {_            _            __            _            int targetShard = id % numShards__            if (targetShard != shardId) {_                _                return new MatchNoDocsQuery("this shard is not part of the slice")__            }_            _            int numSlicesInShard = max / numShards__            int rest = max % numShards__            if (rest > targetShard) {_                numSlicesInShard++__            }__            if (numSlicesInShard == 1) {_                _                return new MatchAllDocsQuery()__            }_            _            int shardSlice = id / numShards___            return useTermQuery ?_                new TermsSliceQuery(field, shardSlice, numSlicesInShard) :_                new DocValuesSliceQuery(field, shardSlice, numSlicesInShard)__        }_        __        _        int targetSlice = shardId % max__        if (id != targetSlice) {_            _            return new MatchNoDocsQuery("this shard is not part of the slice")__        }_        return new MatchAllDocsQuery()__    };converts,this,query,builder,to,a,lucene,link,query,param,context,additional,information,needed,to,build,the,query;public,query,to,filter,cluster,service,cluster,service,shard,search,request,request,query,shard,context,context,version,min,node,version,final,mapped,field,type,type,context,field,mapper,field,if,type,null,throw,new,illegal,argument,exception,field,field,not,found,int,shard,id,request,shard,id,id,int,num,shards,context,get,index,settings,get,number,of,shards,if,min,node,version,on,or,after,version,request,preference,null,request,index,routings,length,0,group,shards,iterator,shard,iterator,group,build,shard,iterator,cluster,service,request,assert,group,size,num,shards,index,routing,shards,group,size,cannot,be,greater,than,total,number,of,shards,num,shards,if,group,size,num,shards,num,shards,group,size,int,ord,0,shard,id,1,for,shard,iterator,it,group,assert,it,shard,id,get,index,equals,request,shard,id,get,index,if,request,shard,id,equals,it,shard,id,shard,id,ord,break,ord,assert,shard,id,1,shard,id,request,shard,id,get,id,not,found,in,index,shard,routing,string,field,this,field,boolean,use,term,query,false,if,equals,field,field,id,field,mapper,name,if,context,get,index,settings,get,index,version,created,on,or,after,version,throw,new,illegal,argument,exception,computing,slices,on,the,field,is,illegal,for,7,x,indices,use,instead,deprecated,computing,slices,on,the,field,is,deprecated,for,6,x,indices,use,instead,use,term,query,true,else,if,id,field,mapper,name,equals,field,use,term,query,true,else,if,type,has,doc,values,false,throw,new,illegal,argument,exception,cannot,load,numeric,doc,values,on,field,else,index,field,data,ifm,context,get,for,field,type,if,ifm,instanceof,index,numeric,field,data,false,throw,new,illegal,argument,exception,cannot,load,numeric,doc,values,on,field,if,num,shards,1,return,use,term,query,new,terms,slice,query,field,id,max,new,doc,values,slice,query,field,id,max,if,max,num,shards,int,target,shard,id,num,shards,if,target,shard,shard,id,return,new,match,no,docs,query,this,shard,is,not,part,of,the,slice,int,num,slices,in,shard,max,num,shards,int,rest,max,num,shards,if,rest,target,shard,num,slices,in,shard,if,num,slices,in,shard,1,return,new,match,all,docs,query,int,shard,slice,id,num,shards,return,use,term,query,new,terms,slice,query,field,shard,slice,num,slices,in,shard,new,doc,values,slice,query,field,shard,slice,num,slices,in,shard,int,target,slice,shard,id,max,if,id,target,slice,return,new,match,no,docs,query,this,shard,is,not,part,of,the,slice,return,new,match,all,docs,query
SliceBuilder -> public SliceBuilder(String field, int id, int max);1524684173;@param field The name of the field_@param id The id of the slice_@param max The maximum number of slices;public SliceBuilder(String field, int id, int max) {_        setField(field)__        setId(id)__        setMax(max)__    };param,field,the,name,of,the,field,param,id,the,id,of,the,slice,param,max,the,maximum,number,of,slices;public,slice,builder,string,field,int,id,int,max,set,field,field,set,id,id,set,max,max
SliceBuilder -> public SliceBuilder(String field, int id, int max);1524780945;@param field The name of the field_@param id The id of the slice_@param max The maximum number of slices;public SliceBuilder(String field, int id, int max) {_        setField(field)__        setId(id)__        setMax(max)__    };param,field,the,name,of,the,field,param,id,the,id,of,the,slice,param,max,the,maximum,number,of,slices;public,slice,builder,string,field,int,id,int,max,set,field,field,set,id,id,set,max,max
SliceBuilder -> public SliceBuilder(String field, int id, int max);1540486836;@param field The name of the field_@param id The id of the slice_@param max The maximum number of slices;public SliceBuilder(String field, int id, int max) {_        setField(field)__        setId(id)__        setMax(max)__    };param,field,the,name,of,the,field,param,id,the,id,of,the,slice,param,max,the,maximum,number,of,slices;public,slice,builder,string,field,int,id,int,max,set,field,field,set,id,id,set,max,max
SliceBuilder -> public SliceBuilder(String field, int id, int max);1541592065;@param field The name of the field_@param id The id of the slice_@param max The maximum number of slices;public SliceBuilder(String field, int id, int max) {_        setField(field)__        setId(id)__        setMax(max)__    };param,field,the,name,of,the,field,param,id,the,id,of,the,slice,param,max,the,maximum,number,of,slices;public,slice,builder,string,field,int,id,int,max,set,field,field,set,id,id,set,max,max
SliceBuilder -> private GroupShardsIterator<ShardIterator> buildShardIterator(ClusterService clusterService, ShardSearchRequest request);1524780945;Returns the {@link GroupShardsIterator} for the provided <code>request</code>.;private GroupShardsIterator<ShardIterator> buildShardIterator(ClusterService clusterService, ShardSearchRequest request) {_        final ClusterState state = clusterService.state()__        String[] indices = new String[] { request.shardId().getIndex().getName() }__        Map<String, Set<String>> routingMap = request.indexRoutings().length > 0 ?_            Collections.singletonMap(indices[0], Sets.newHashSet(request.indexRoutings())) : null__        return clusterService.operationRouting().searchShards(state, indices, routingMap, request.preference())__    };returns,the,link,group,shards,iterator,for,the,provided,code,request,code;private,group,shards,iterator,shard,iterator,build,shard,iterator,cluster,service,cluster,service,shard,search,request,request,final,cluster,state,state,cluster,service,state,string,indices,new,string,request,shard,id,get,index,get,name,map,string,set,string,routing,map,request,index,routings,length,0,collections,singleton,map,indices,0,sets,new,hash,set,request,index,routings,null,return,cluster,service,operation,routing,search,shards,state,indices,routing,map,request,preference
SliceBuilder -> private GroupShardsIterator<ShardIterator> buildShardIterator(ClusterService clusterService, ShardSearchRequest request);1540486836;Returns the {@link GroupShardsIterator} for the provided <code>request</code>.;private GroupShardsIterator<ShardIterator> buildShardIterator(ClusterService clusterService, ShardSearchRequest request) {_        final ClusterState state = clusterService.state()__        String[] indices = new String[] { request.shardId().getIndex().getName() }__        Map<String, Set<String>> routingMap = request.indexRoutings().length > 0 ?_            Collections.singletonMap(indices[0], Sets.newHashSet(request.indexRoutings())) : null__        return clusterService.operationRouting().searchShards(state, indices, routingMap, request.preference())__    };returns,the,link,group,shards,iterator,for,the,provided,code,request,code;private,group,shards,iterator,shard,iterator,build,shard,iterator,cluster,service,cluster,service,shard,search,request,request,final,cluster,state,state,cluster,service,state,string,indices,new,string,request,shard,id,get,index,get,name,map,string,set,string,routing,map,request,index,routings,length,0,collections,singleton,map,indices,0,sets,new,hash,set,request,index,routings,null,return,cluster,service,operation,routing,search,shards,state,indices,routing,map,request,preference
SliceBuilder -> private GroupShardsIterator<ShardIterator> buildShardIterator(ClusterService clusterService, ShardSearchRequest request);1541592065;Returns the {@link GroupShardsIterator} for the provided <code>request</code>.;private GroupShardsIterator<ShardIterator> buildShardIterator(ClusterService clusterService, ShardSearchRequest request) {_        final ClusterState state = clusterService.state()__        String[] indices = new String[] { request.shardId().getIndex().getName() }__        Map<String, Set<String>> routingMap = request.indexRoutings().length > 0 ?_            Collections.singletonMap(indices[0], Sets.newHashSet(request.indexRoutings())) : null__        return clusterService.operationRouting().searchShards(state, indices, routingMap, request.preference())__    };returns,the,link,group,shards,iterator,for,the,provided,code,request,code;private,group,shards,iterator,shard,iterator,build,shard,iterator,cluster,service,cluster,service,shard,search,request,request,final,cluster,state,state,cluster,service,state,string,indices,new,string,request,shard,id,get,index,get,name,map,string,set,string,routing,map,request,index,routings,length,0,collections,singleton,map,indices,0,sets,new,hash,set,request,index,routings,null,return,cluster,service,operation,routing,search,shards,state,indices,routing,map,request,preference
