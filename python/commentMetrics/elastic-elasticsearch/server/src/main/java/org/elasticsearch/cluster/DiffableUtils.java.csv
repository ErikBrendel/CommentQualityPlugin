commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Returns a map key serializer for String keys  */ ;/**  * Returns a map key serializer for String keys  */ public static KeySerializer<String> getStringKeySerializer() {     return StringKeySerializer.INSTANCE. }
true;public,static;0;3;/**  * Returns a map key serializer for Integer keys. Encodes as Int.  */ ;/**  * Returns a map key serializer for Integer keys. Encodes as Int.  */ public static KeySerializer<Integer> getIntKeySerializer() {     return IntKeySerializer.INSTANCE. }
true;public,static;0;3;/**  * Returns a map key serializer for Integer keys. Encodes as VInt.  */ ;/**  * Returns a map key serializer for Integer keys. Encodes as VInt.  */ public static KeySerializer<Integer> getVIntKeySerializer() {     return VIntKeySerializer.INSTANCE. }
true;public,static;3;5;/**  * Calculates diff between two ImmutableOpenMaps of Diffable objects  */ ;/**  * Calculates diff between two ImmutableOpenMaps of Diffable objects  */ public static <K, T extends Diffable<T>> MapDiff<K, T, ImmutableOpenMap<K, T>> diff(ImmutableOpenMap<K, T> before, ImmutableOpenMap<K, T> after, KeySerializer<K> keySerializer) {     assert after != null && before != null.     return new ImmutableOpenMapDiff<>(before, after, keySerializer, DiffableValueSerializer.getWriteOnlyInstance()). }
true;public,static;4;5;/**  * Calculates diff between two ImmutableOpenMaps of non-diffable objects  */ ;/**  * Calculates diff between two ImmutableOpenMaps of non-diffable objects  */ public static <K, T> MapDiff<K, T, ImmutableOpenMap<K, T>> diff(ImmutableOpenMap<K, T> before, ImmutableOpenMap<K, T> after, KeySerializer<K> keySerializer, ValueSerializer<K, T> valueSerializer) {     assert after != null && before != null.     return new ImmutableOpenMapDiff<>(before, after, keySerializer, valueSerializer). }
true;public,static;3;5;/**  * Calculates diff between two ImmutableOpenIntMaps of Diffable objects  */ ;/**  * Calculates diff between two ImmutableOpenIntMaps of Diffable objects  */ public static <T extends Diffable<T>> MapDiff<Integer, T, ImmutableOpenIntMap<T>> diff(ImmutableOpenIntMap<T> before, ImmutableOpenIntMap<T> after, KeySerializer<Integer> keySerializer) {     assert after != null && before != null.     return new ImmutableOpenIntMapDiff<>(before, after, keySerializer, DiffableValueSerializer.getWriteOnlyInstance()). }
true;public,static;4;5;/**  * Calculates diff between two ImmutableOpenIntMaps of non-diffable objects  */ ;/**  * Calculates diff between two ImmutableOpenIntMaps of non-diffable objects  */ public static <T> MapDiff<Integer, T, ImmutableOpenIntMap<T>> diff(ImmutableOpenIntMap<T> before, ImmutableOpenIntMap<T> after, KeySerializer<Integer> keySerializer, ValueSerializer<Integer, T> valueSerializer) {     assert after != null && before != null.     return new ImmutableOpenIntMapDiff<>(before, after, keySerializer, valueSerializer). }
true;public,static;3;5;/**  * Calculates diff between two Maps of Diffable objects.  */ ;/**  * Calculates diff between two Maps of Diffable objects.  */ public static <K, T extends Diffable<T>> MapDiff<K, T, Map<K, T>> diff(Map<K, T> before, Map<K, T> after, KeySerializer<K> keySerializer) {     assert after != null && before != null.     return new JdkMapDiff<>(before, after, keySerializer, DiffableValueSerializer.getWriteOnlyInstance()). }
true;public,static;4;5;/**  * Calculates diff between two Maps of non-diffable objects  */ ;/**  * Calculates diff between two Maps of non-diffable objects  */ public static <K, T> MapDiff<K, T, Map<K, T>> diff(Map<K, T> before, Map<K, T> after, KeySerializer<K> keySerializer, ValueSerializer<K, T> valueSerializer) {     assert after != null && before != null.     return new JdkMapDiff<>(before, after, keySerializer, valueSerializer). }
true;public,static;3;4;/**  * Loads an object that represents difference between two ImmutableOpenMaps  */ ;/**  * Loads an object that represents difference between two ImmutableOpenMaps  */ public static <K, T> MapDiff<K, T, ImmutableOpenMap<K, T>> readImmutableOpenMapDiff(StreamInput in, KeySerializer<K> keySerializer, ValueSerializer<K, T> valueSerializer) throws IOException {     return new ImmutableOpenMapDiff<>(in, keySerializer, valueSerializer). }
true;public,static;3;4;/**  * Loads an object that represents difference between two ImmutableOpenMaps  */ ;/**  * Loads an object that represents difference between two ImmutableOpenMaps  */ public static <T> MapDiff<Integer, T, ImmutableOpenIntMap<T>> readImmutableOpenIntMapDiff(StreamInput in, KeySerializer<Integer> keySerializer, ValueSerializer<Integer, T> valueSerializer) throws IOException {     return new ImmutableOpenIntMapDiff<>(in, keySerializer, valueSerializer). }
true;public,static;3;4;/**  * Loads an object that represents difference between two Maps of Diffable objects  */ ;/**  * Loads an object that represents difference between two Maps of Diffable objects  */ public static <K, T> MapDiff<K, T, Map<K, T>> readJdkMapDiff(StreamInput in, KeySerializer<K> keySerializer, ValueSerializer<K, T> valueSerializer) throws IOException {     return new JdkMapDiff<>(in, keySerializer, valueSerializer). }
true;public,static;4;4;/**  * Loads an object that represents difference between two ImmutableOpenMaps of Diffable objects using Diffable proto object  */ ;/**  * Loads an object that represents difference between two ImmutableOpenMaps of Diffable objects using Diffable proto object  */ public static <K, T extends Diffable<T>> MapDiff<K, T, ImmutableOpenMap<K, T>> readImmutableOpenMapDiff(StreamInput in, KeySerializer<K> keySerializer, Reader<T> reader, Reader<Diff<T>> diffReader) throws IOException {     return new ImmutableOpenMapDiff<>(in, keySerializer, new DiffableValueReader<>(reader, diffReader)). }
true;public,static;4;4;/**  * Loads an object that represents difference between two ImmutableOpenIntMaps of Diffable objects using Diffable proto object  */ ;/**  * Loads an object that represents difference between two ImmutableOpenIntMaps of Diffable objects using Diffable proto object  */ public static <T extends Diffable<T>> MapDiff<Integer, T, ImmutableOpenIntMap<T>> readImmutableOpenIntMapDiff(StreamInput in, KeySerializer<Integer> keySerializer, Reader<T> reader, Reader<Diff<T>> diffReader) throws IOException {     return new ImmutableOpenIntMapDiff<>(in, keySerializer, new DiffableValueReader<>(reader, diffReader)). }
true;public,static;4;4;/**  * Loads an object that represents difference between two Maps of Diffable objects using Diffable proto object  */ ;/**  * Loads an object that represents difference between two Maps of Diffable objects using Diffable proto object  */ public static <K, T extends Diffable<T>> MapDiff<K, T, Map<K, T>> readJdkMapDiff(StreamInput in, KeySerializer<K> keySerializer, Reader<T> reader, Reader<Diff<T>> diffReader) throws IOException {     return new JdkMapDiff<>(in, keySerializer, new DiffableValueReader<>(reader, diffReader)). }
false;public;1;17;;@Override public Map<K, T> apply(Map<K, T> map) {     Map<K, T> builder = new HashMap<>(map).     for (K part : deletes) {         builder.remove(part).     }     for (Map.Entry<K, Diff<T>> diff : diffs.entrySet()) {         builder.put(diff.getKey(), diff.getValue().apply(builder.get(diff.getKey()))).     }     for (Map.Entry<K, T> upsert : upserts.entrySet()) {         builder.put(upsert.getKey(), upsert.getValue()).     }     return builder. }
true;public;1;10;/**  * Returns a new diff map with the given key removed, does not modify the invoking instance.  * If the key does not exist in the diff map, the same instance is returned.  */ ;/**  * Returns a new diff map with the given key removed, does not modify the invoking instance.  * If the key does not exist in the diff map, the same instance is returned.  */ public ImmutableOpenMapDiff<K, T> withKeyRemoved(K key) {     if (this.diffs.containsKey(key) == false && this.upserts.containsKey(key) == false) {         return this.     }     Map<K, Diff<T>> newDiffs = new HashMap<>(this.diffs).     newDiffs.remove(key).     Map<K, T> newUpserts = new HashMap<>(this.upserts).     newUpserts.remove(key).     return new ImmutableOpenMapDiff<>(this.keySerializer, this.valueSerializer, this.deletes, newDiffs, newUpserts). }
false;public;1;18;;@Override public ImmutableOpenMap<K, T> apply(ImmutableOpenMap<K, T> map) {     ImmutableOpenMap.Builder<K, T> builder = ImmutableOpenMap.builder().     builder.putAll(map).     for (K part : deletes) {         builder.remove(part).     }     for (Map.Entry<K, Diff<T>> diff : diffs.entrySet()) {         builder.put(diff.getKey(), diff.getValue().apply(builder.get(diff.getKey()))).     }     for (Map.Entry<K, T> upsert : upserts.entrySet()) {         builder.put(upsert.getKey(), upsert.getValue()).     }     return builder.build(). }
false;public;1;18;;@Override public ImmutableOpenIntMap<T> apply(ImmutableOpenIntMap<T> map) {     ImmutableOpenIntMap.Builder<T> builder = ImmutableOpenIntMap.builder().     builder.putAll(map).     for (Integer part : deletes) {         builder.remove(part).     }     for (Map.Entry<Integer, Diff<T>> diff : diffs.entrySet()) {         builder.put(diff.getKey(), diff.getValue().apply(builder.get(diff.getKey()))).     }     for (Map.Entry<Integer, T> upsert : upserts.entrySet()) {         builder.put(upsert.getKey(), upsert.getValue()).     }     return builder.build(). }
true;public;0;3;/**  * The keys that, when this diff is applied to a map, should be removed from the map.  *  * @return the list of keys that are deleted  */ ;/**  * The keys that, when this diff is applied to a map, should be removed from the map.  *  * @return the list of keys that are deleted  */ public List<K> getDeletes() {     return deletes. }
true;public;0;3;/**  * Map entries that, when this diff is applied to a map, should be  * incrementally updated. The incremental update is represented using  * the {@link Diff} interface.  *  * @return the map entries that are incrementally updated  */ ;/**  * Map entries that, when this diff is applied to a map, should be  * incrementally updated. The incremental update is represented using  * the {@link Diff} interface.  *  * @return the map entries that are incrementally updated  */ public Map<K, Diff<T>> getDiffs() {     return diffs. }
true;public;0;3;/**  * Map entries that, when this diff is applied to a map, should be  * added to the map or fully replace the previous value.  *  * @return the map entries that are additions or full updates  */ ;/**  * Map entries that, when this diff is applied to a map, should be  * added to the map or fully replace the previous value.  *  * @return the map entries that are additions or full updates  */ public Map<K, T> getUpserts() {     return upserts. }
false;public;1;34;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(deletes.size()).     for (K delete : deletes) {         keySerializer.writeKey(delete, out).     }     Version version = out.getVersion().     // filter out custom states not supported by the other node     int diffCount = 0.     for (Diff<T> diff : diffs.values()) {         if (valueSerializer.supportsVersion(diff, version)) {             diffCount++.         }     }     out.writeVInt(diffCount).     for (Map.Entry<K, Diff<T>> entry : diffs.entrySet()) {         if (valueSerializer.supportsVersion(entry.getValue(), version)) {             keySerializer.writeKey(entry.getKey(), out).             valueSerializer.writeDiff(entry.getValue(), out).         }     }     // filter out custom states not supported by the other node     int upsertsCount = 0.     for (T upsert : upserts.values()) {         if (valueSerializer.supportsVersion(upsert, version)) {             upsertsCount++.         }     }     out.writeVInt(upsertsCount).     for (Map.Entry<K, T> entry : upserts.entrySet()) {         keySerializer.writeKey(entry.getKey(), out).         valueSerializer.write(entry.getValue(), out).     } }
false;;2;1;;void writeKey(K key, StreamOutput out) throws IOException.
false;;1;1;;K readKey(StreamInput in) throws IOException.
false;public;2;4;;@Override public void writeKey(String key, StreamOutput out) throws IOException {     out.writeString(key). }
false;public;1;4;;@Override public String readKey(StreamInput in) throws IOException {     return in.readString(). }
false;public;2;4;;@Override public void writeKey(Integer key, StreamOutput out) throws IOException {     out.writeInt(key). }
false;public;1;4;;@Override public Integer readKey(StreamInput in) throws IOException {     return in.readInt(). }
false;public;2;7;;@Override public void writeKey(Integer key, StreamOutput out) throws IOException {     if (key < 0) {         throw new IllegalArgumentException("Map key [" + key + "] must be positive").     }     out.writeVInt(key). }
false;public;1;4;;@Override public Integer readKey(StreamInput in) throws IOException {     return in.readVInt(). }
true;;2;1;/**  * Writes value to stream  */ ;/**  * Writes value to stream  */ void write(V value, StreamOutput out) throws IOException.
true;;2;1;/**  * Reads value from stream. Reading operation can be made dependent on map key.  */ ;/**  * Reads value from stream. Reading operation can be made dependent on map key.  */ V read(StreamInput in, K key) throws IOException.
true;;0;1;/**  * Whether this serializer supports diffable values  */ ;/**  * Whether this serializer supports diffable values  */ boolean supportsDiffableValues().
true;default;2;3;/**  * Whether this serializer supports the version of the output stream  */ ;/**  * Whether this serializer supports the version of the output stream  */ default boolean supportsVersion(Diff<V> value, Version version) {     return true. }
true;default;2;3;/**  * Whether this serializer supports the version of the output stream  */ ;/**  * Whether this serializer supports the version of the output stream  */ default boolean supportsVersion(V value, Version version) {     return true. }
true;;2;1;/**  * Computes diff if this serializer supports diffable values  */ ;/**  * Computes diff if this serializer supports diffable values  */ Diff<V> diff(V value, V beforePart).
true;;2;1;/**  * Writes value as diff to stream if this serializer supports diffable values  */ ;/**  * Writes value as diff to stream if this serializer supports diffable values  */ void writeDiff(Diff<V> value, StreamOutput out) throws IOException.
true;;2;1;/**  * Reads value as diff from stream if this serializer supports diffable values.  * Reading operation can be made dependent on map key.  */ ;/**  * Reads value as diff from stream if this serializer supports diffable values.  * Reading operation can be made dependent on map key.  */ Diff<V> readDiff(StreamInput in, K key) throws IOException.
false;public;2;4;;@Override public Object read(StreamInput in, Object key) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public Diff<Object> readDiff(StreamInput in, Object key) throws IOException {     throw new UnsupportedOperationException(). }
false;private,static;0;3;;private static <K, V extends Diffable<V>> DiffableValueSerializer<K, V> getWriteOnlyInstance() {     return WRITE_ONLY_INSTANCE. }
false;public;0;4;;@Override public boolean supportsDiffableValues() {     return true. }
false;public;2;4;;@Override public Diff<V> diff(V value, V beforePart) {     return value.diff(beforePart). }
false;public;2;4;;@Override public void write(V value, StreamOutput out) throws IOException {     value.writeTo(out). }
false;public;2;3;;public void writeDiff(Diff<V> value, StreamOutput out) throws IOException {     value.writeTo(out). }
false;public;0;4;;@Override public boolean supportsDiffableValues() {     return false. }
false;public;2;4;;@Override public Diff<V> diff(V value, V beforePart) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void writeDiff(Diff<V> value, StreamOutput out) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public Diff<V> readDiff(StreamInput in, K key) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public V read(StreamInput in, K key) throws IOException {     return reader.read(in). }
false;public;2;4;;@Override public Diff<V> readDiff(StreamInput in, K key) throws IOException {     return diffReader.read(in). }
false;public,static;0;3;;public static <K> StringSetValueSerializer<K> getInstance() {     return INSTANCE. }
false;public;2;4;;@Override public void write(Set<String> value, StreamOutput out) throws IOException {     out.writeStringArray(value.toArray(new String[value.size()])). }
false;public;2;4;;@Override public Set<String> read(StreamInput in, K key) throws IOException {     return Collections.unmodifiableSet(new HashSet<>(Arrays.asList(in.readStringArray()))). }
