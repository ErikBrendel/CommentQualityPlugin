commented;modifiers;parameterAmount;loc;comment;code
true;protected;3;4;/**  * Getting upgrade stats from *all* active shards.  */ ;/**  * Getting upgrade stats from *all* active shards.  */ @Override protected ShardsIterator shards(ClusterState clusterState, UpgradeStatusRequest request, String[] concreteIndices) {     return clusterState.routingTable().allShards(concreteIndices). }
false;protected;2;4;;@Override protected ClusterBlockException checkGlobalBlock(ClusterState state, UpgradeStatusRequest request) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ). }
false;protected;3;4;;@Override protected ClusterBlockException checkRequestBlock(ClusterState state, UpgradeStatusRequest countRequest, String[] concreteIndices) {     return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ, concreteIndices). }
false;protected;1;4;;@Override protected ShardUpgradeStatus readShardResult(StreamInput in) throws IOException {     return ShardUpgradeStatus.readShardUpgradeStatus(in). }
false;protected;7;7;;@Override protected UpgradeStatusResponse newResponse(UpgradeStatusRequest request, int totalShards, int successfulShards, int failedShards, List<ShardUpgradeStatus> responses, List<DefaultShardOperationFailedException> shardFailures, ClusterState clusterState) {     return new UpgradeStatusResponse(responses.toArray(new ShardUpgradeStatus[responses.size()]), totalShards, successfulShards, failedShards, shardFailures). }
false;protected;1;6;;@Override protected UpgradeStatusRequest readRequestFrom(StreamInput in) throws IOException {     UpgradeStatusRequest request = new UpgradeStatusRequest().     request.readFrom(in).     return request. }
false;protected;2;22;;@Override protected ShardUpgradeStatus shardOperation(UpgradeStatusRequest request, ShardRouting shardRouting) {     IndexService indexService = indicesService.indexServiceSafe(shardRouting.shardId().getIndex()).     IndexShard indexShard = indexService.getShard(shardRouting.shardId().id()).     List<Segment> segments = indexShard.segments(false).     long total_bytes = 0.     long to_upgrade_bytes = 0.     long to_upgrade_bytes_ancient = 0.     for (Segment seg : segments) {         total_bytes += seg.sizeInBytes.         if (seg.version.major != Version.CURRENT.luceneVersion.major) {             to_upgrade_bytes_ancient += seg.sizeInBytes.             to_upgrade_bytes += seg.sizeInBytes.         } else if (seg.version.minor != Version.CURRENT.luceneVersion.minor) {             // TODO: this comparison is bogus! it would cause us to upgrade even with the same format             // instead, we should check if the codec has changed             to_upgrade_bytes += seg.sizeInBytes.         }     }     return new ShardUpgradeStatus(indexShard.routingEntry(), total_bytes, to_upgrade_bytes, to_upgrade_bytes_ancient). }
