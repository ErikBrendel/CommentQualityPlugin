commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Set the collector that is associated with this profiler.  */ ;/**  * Set the collector that is associated with this profiler.  */ public void setCollector(InternalProfileCollector collector) {     if (this.collector != null) {         throw new IllegalStateException("The collector can only be set once.").     }     this.collector = Objects.requireNonNull(collector). }
true;public;0;3;/**  * Begin timing the rewrite phase of a request.  All rewrites are accumulated together into a  * single metric  */ ;/**  * Begin timing the rewrite phase of a request.  All rewrites are accumulated together into a  * single metric  */ public void startRewriteTime() {     ((InternalQueryProfileTree) profileTree).startRewriteTime(). }
true;public;0;3;/**  * Stop recording the current rewrite and add it's time to the total tally, returning the  * cumulative time so far.  *  * @return cumulative rewrite time  */ ;/**  * Stop recording the current rewrite and add it's time to the total tally, returning the  * cumulative time so far.  *  * @return cumulative rewrite time  */ public long stopAndAddRewriteTime() {     return ((InternalQueryProfileTree) profileTree).stopAndAddRewriteTime(). }
true;public;0;3;/**  * @return total time taken to rewrite all queries in this profile  */ ;/**  * @return total time taken to rewrite all queries in this profile  */ public long getRewriteTime() {     return ((InternalQueryProfileTree) profileTree).getRewriteTime(). }
true;public;0;3;/**  * Return the current root Collector for this search  */ ;/**  * Return the current root Collector for this search  */ public CollectorResult getCollector() {     return collector.getCollectorTree(). }
