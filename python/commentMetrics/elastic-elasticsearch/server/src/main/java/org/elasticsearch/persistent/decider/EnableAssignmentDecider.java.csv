commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setEnableAssignment(final Allocation enableAssignment) {     this.enableAssignment = enableAssignment. }
true;public;0;6;/**  * Returns a {@link AssignmentDecision} whether the given persistent task can be assigned  * to a node of the cluster. The decision depends on the current value of the setting  * {@link EnableAssignmentDecider#CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING}.  *  * @return the {@link AssignmentDecision}  */ ;/**  * Returns a {@link AssignmentDecision} whether the given persistent task can be assigned  * to a node of the cluster. The decision depends on the current value of the setting  * {@link EnableAssignmentDecider#CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING}.  *  * @return the {@link AssignmentDecision}  */ public AssignmentDecision canAssign() {     if (enableAssignment == Allocation.NONE) {         return new AssignmentDecision(AssignmentDecision.Type.NO, "no persistent task assignments are allowed due to cluster settings").     }     return AssignmentDecision.YES. }
false;public,static;1;13;;public static Allocation fromString(final String strValue) {     if (strValue == null) {         return null.     } else {         String value = strValue.toUpperCase(Locale.ROOT).         try {             return valueOf(value).         } catch (IllegalArgumentException e) {             throw new IllegalArgumentException("Illegal value [" + value + "] for [" + CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING.getKey() + "]").         }     } }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
