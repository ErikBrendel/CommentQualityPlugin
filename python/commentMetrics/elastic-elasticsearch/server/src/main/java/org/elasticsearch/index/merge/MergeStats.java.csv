commented;modifiers;parameterAmount;loc;comment;code
false;public;10;19;;public void add(long totalMerges, long totalMergeTime, long totalNumDocs, long totalSizeInBytes, long currentMerges, long currentNumDocs, long currentSizeInBytes, long stoppedTimeMillis, long throttledTimeMillis, double mbPerSecAutoThrottle) {     this.total += totalMerges.     this.totalTimeInMillis += totalMergeTime.     this.totalNumDocs += totalNumDocs.     this.totalSizeInBytes += totalSizeInBytes.     this.current += currentMerges.     this.currentNumDocs += currentNumDocs.     this.currentSizeInBytes += currentSizeInBytes.     this.totalStoppedTimeInMillis += stoppedTimeMillis.     this.totalThrottledTimeInMillis += throttledTimeMillis.     long bytesPerSecAutoThrottle = (long) (mbPerSecAutoThrottle * 1024 * 1024).     if (this.totalBytesPerSecAutoThrottle == Long.MAX_VALUE || bytesPerSecAutoThrottle == Long.MAX_VALUE) {         this.totalBytesPerSecAutoThrottle = Long.MAX_VALUE.     } else {         this.totalBytesPerSecAutoThrottle += bytesPerSecAutoThrottle.     } }
false;public;1;10;;public void add(MergeStats mergeStats) {     if (mergeStats == null) {         return.     }     this.current += mergeStats.current.     this.currentNumDocs += mergeStats.currentNumDocs.     this.currentSizeInBytes += mergeStats.currentSizeInBytes.     addTotals(mergeStats). }
false;public;1;16;;public void addTotals(MergeStats mergeStats) {     if (mergeStats == null) {         return.     }     this.total += mergeStats.total.     this.totalTimeInMillis += mergeStats.totalTimeInMillis.     this.totalNumDocs += mergeStats.totalNumDocs.     this.totalSizeInBytes += mergeStats.totalSizeInBytes.     this.totalStoppedTimeInMillis += mergeStats.totalStoppedTimeInMillis.     this.totalThrottledTimeInMillis += mergeStats.totalThrottledTimeInMillis.     if (this.totalBytesPerSecAutoThrottle == Long.MAX_VALUE || mergeStats.totalBytesPerSecAutoThrottle == Long.MAX_VALUE) {         this.totalBytesPerSecAutoThrottle = Long.MAX_VALUE.     } else {         this.totalBytesPerSecAutoThrottle += mergeStats.totalBytesPerSecAutoThrottle.     } }
true;public;0;3;/**  * The total number of merges executed.  */ ;/**  * The total number of merges executed.  */ public long getTotal() {     return this.total. }
true;public;0;3;/**  * The total time merges have been executed (in milliseconds).  */ ;/**  * The total time merges have been executed (in milliseconds).  */ public long getTotalTimeInMillis() {     return this.totalTimeInMillis. }
true;public;0;3;/**  * The total time large merges were stopped so smaller merges could finish.  */ ;/**  * The total time large merges were stopped so smaller merges could finish.  */ public long getTotalStoppedTimeInMillis() {     return this.totalStoppedTimeInMillis. }
true;public;0;3;/**  * The total time large merges were stopped so smaller merges could finish.  */ ;/**  * The total time large merges were stopped so smaller merges could finish.  */ public TimeValue getTotalStoppedTime() {     return new TimeValue(totalStoppedTimeInMillis). }
true;public;0;3;/**  * The total time merge IO writes were throttled.  */ ;/**  * The total time merge IO writes were throttled.  */ public long getTotalThrottledTimeInMillis() {     return this.totalThrottledTimeInMillis. }
true;public;0;3;/**  * The total time merge IO writes were throttled.  */ ;/**  * The total time merge IO writes were throttled.  */ public TimeValue getTotalThrottledTime() {     return new TimeValue(totalThrottledTimeInMillis). }
true;public;0;3;/**  * The total time merges have been executed.  */ ;/**  * The total time merges have been executed.  */ public TimeValue getTotalTime() {     return new TimeValue(totalTimeInMillis). }
false;public;0;3;;public long getTotalNumDocs() {     return this.totalNumDocs. }
false;public;0;3;;public long getTotalSizeInBytes() {     return this.totalSizeInBytes. }
false;public;0;3;;public ByteSizeValue getTotalSize() {     return new ByteSizeValue(totalSizeInBytes). }
false;public;0;3;;public long getTotalBytesPerSecAutoThrottle() {     return totalBytesPerSecAutoThrottle. }
true;public;0;3;/**  * The current number of merges executing.  */ ;/**  * The current number of merges executing.  */ public long getCurrent() {     return this.current. }
false;public;0;3;;public long getCurrentNumDocs() {     return this.currentNumDocs. }
false;public;0;3;;public long getCurrentSizeInBytes() {     return this.currentSizeInBytes. }
false;public;0;3;;public ByteSizeValue getCurrentSize() {     return new ByteSizeValue(currentSizeInBytes). }
false;public;2;19;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.MERGES).     builder.field(Fields.CURRENT, current).     builder.field(Fields.CURRENT_DOCS, currentNumDocs).     builder.humanReadableField(Fields.CURRENT_SIZE_IN_BYTES, Fields.CURRENT_SIZE, getCurrentSize()).     builder.field(Fields.TOTAL, total).     builder.humanReadableField(Fields.TOTAL_TIME_IN_MILLIS, Fields.TOTAL_TIME, getTotalTime()).     builder.field(Fields.TOTAL_DOCS, totalNumDocs).     builder.humanReadableField(Fields.TOTAL_SIZE_IN_BYTES, Fields.TOTAL_SIZE, getTotalSize()).     builder.humanReadableField(Fields.TOTAL_STOPPED_TIME_IN_MILLIS, Fields.TOTAL_STOPPED_TIME, getTotalStoppedTime()).     builder.humanReadableField(Fields.TOTAL_THROTTLED_TIME_IN_MILLIS, Fields.TOTAL_THROTTLED_TIME, getTotalThrottledTime()).     if (builder.humanReadable() && totalBytesPerSecAutoThrottle != -1) {         builder.field(Fields.TOTAL_THROTTLE_BYTES_PER_SEC).value(new ByteSizeValue(totalBytesPerSecAutoThrottle).toString()).     }     builder.field(Fields.TOTAL_THROTTLE_BYTES_PER_SEC_IN_BYTES, totalBytesPerSecAutoThrottle).     builder.endObject().     return builder. }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     total = in.readVLong().     totalTimeInMillis = in.readVLong().     totalNumDocs = in.readVLong().     totalSizeInBytes = in.readVLong().     current = in.readVLong().     currentNumDocs = in.readVLong().     currentSizeInBytes = in.readVLong().     // Added in 2.0:     totalStoppedTimeInMillis = in.readVLong().     totalThrottledTimeInMillis = in.readVLong().     totalBytesPerSecAutoThrottle = in.readVLong(). }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(total).     out.writeVLong(totalTimeInMillis).     out.writeVLong(totalNumDocs).     out.writeVLong(totalSizeInBytes).     out.writeVLong(current).     out.writeVLong(currentNumDocs).     out.writeVLong(currentSizeInBytes).     // Added in 2.0:     out.writeVLong(totalStoppedTimeInMillis).     out.writeVLong(totalThrottledTimeInMillis).     out.writeVLong(totalBytesPerSecAutoThrottle). }
