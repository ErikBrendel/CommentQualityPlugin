commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;13;/**  * Reads an int from the input stream and converts it to a {@link ScriptType}.  * @return The ScriptType read from the stream. Throws an {@link IllegalStateException}  * if no ScriptType is found based on the id.  */ ;/**  * Reads an int from the input stream and converts it to a {@link ScriptType}.  * @return The ScriptType read from the stream. Throws an {@link IllegalStateException}  * if no ScriptType is found based on the id.  */ public static ScriptType readFrom(StreamInput in) throws IOException {     int id = in.readVInt().     if (STORED.id == id) {         return STORED.     } else if (INLINE.id == id) {         return INLINE.     } else {         throw new IllegalStateException("Error reading ScriptType id [" + id + "] from stream, expected one of [" + STORED.id + " [" + STORED.parseField.getPreferredName() + "], " + INLINE.id + " [" + INLINE.parseField.getPreferredName() + "]]").     } }
false;public;1;3;;public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(id). }
true;public;0;3;/**  * @return The unique id for this {@link ScriptType}.  */ ;/**  * @return The unique id for this {@link ScriptType}.  */ public int getId() {     return id. }
true;public;0;3;/**  * @return The unique name for this {@link ScriptType} based on the {@link ParseField}.  */ ;/**  * @return The unique name for this {@link ScriptType} based on the {@link ParseField}.  */ public String getName() {     return name().toLowerCase(Locale.ROOT). }
true;public;0;3;/**  * @return Specifies the name used to parse input from queries.  */ ;/**  * @return Specifies the name used to parse input from queries.  */ public ParseField getParseField() {     return parseField. }
true;public;0;4;/**  * @return The same as calling {@link #getName()}.  */ ;/**  * @return The same as calling {@link #getName()}.  */ @Override public String toString() {     return getName(). }
