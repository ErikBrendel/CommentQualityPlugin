# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterStateTaskExecutor -> default void clusterStatePublished(ClusterChangedEvent clusterChangedEvent);1524684173;Callback invoked after new cluster state is published. Note that_this method is not invoked if the cluster state was not updated._@param clusterChangedEvent the change event for this cluster state change, containing_both old and new states;default void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {_    };callback,invoked,after,new,cluster,state,is,published,note,that,this,method,is,not,invoked,if,the,cluster,state,was,not,updated,param,cluster,changed,event,the,change,event,for,this,cluster,state,change,containing,both,old,and,new,states;default,void,cluster,state,published,cluster,changed,event,cluster,changed,event
ClusterStateTaskExecutor -> default void clusterStatePublished(ClusterChangedEvent clusterChangedEvent);1528762805;Callback invoked after new cluster state is published. Note that_this method is not invoked if the cluster state was not updated._@param clusterChangedEvent the change event for this cluster state change, containing_both old and new states;default void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {_    };callback,invoked,after,new,cluster,state,is,published,note,that,this,method,is,not,invoked,if,the,cluster,state,was,not,updated,param,cluster,changed,event,the,change,event,for,this,cluster,state,change,containing,both,old,and,new,states;default,void,cluster,state,published,cluster,changed,event,cluster,changed,event
ClusterStateTaskExecutor -> default void clusterStatePublished(ClusterChangedEvent clusterChangedEvent);1529341607;Callback invoked after new cluster state is published. Note that_this method is not invoked if the cluster state was not updated.__Note that this method will be executed using system context.__@param clusterChangedEvent the change event for this cluster state change, containing_both old and new states;default void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {_    };callback,invoked,after,new,cluster,state,is,published,note,that,this,method,is,not,invoked,if,the,cluster,state,was,not,updated,note,that,this,method,will,be,executed,using,system,context,param,cluster,changed,event,the,change,event,for,this,cluster,state,change,containing,both,old,and,new,states;default,void,cluster,state,published,cluster,changed,event,cluster,changed,event
ClusterStateTaskExecutor -> default void clusterStatePublished(ClusterChangedEvent clusterChangedEvent);1538509426;Callback invoked after new cluster state is published. Note that_this method is not invoked if the cluster state was not updated.__Note that this method will be executed using system context.__@param clusterChangedEvent the change event for this cluster state change, containing_both old and new states;default void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {_    };callback,invoked,after,new,cluster,state,is,published,note,that,this,method,is,not,invoked,if,the,cluster,state,was,not,updated,note,that,this,method,will,be,executed,using,system,context,param,cluster,changed,event,the,change,event,for,this,cluster,state,change,containing,both,old,and,new,states;default,void,cluster,state,published,cluster,changed,event,cluster,changed,event
ClusterStateTaskExecutor -> default String describeTasks(List<T> tasks);1524684173;Builds a concise description of a list of tasks (to be used in logging etc.).__Note that the tasks given are not necessarily the same as those that will be passed to {@link #execute(ClusterState, List)}._but are guaranteed to be a subset of them. This method can be called multiple times with different lists before execution._This allows groupd task description but the submitting source.;default String describeTasks(List<T> tasks) {_        return String.join(", ", tasks.stream().map(t -> (CharSequence)t.toString()).filter(t -> t.length() == 0)::iterator)__    };builds,a,concise,description,of,a,list,of,tasks,to,be,used,in,logging,etc,note,that,the,tasks,given,are,not,necessarily,the,same,as,those,that,will,be,passed,to,link,execute,cluster,state,list,but,are,guaranteed,to,be,a,subset,of,them,this,method,can,be,called,multiple,times,with,different,lists,before,execution,this,allows,groupd,task,description,but,the,submitting,source;default,string,describe,tasks,list,t,tasks,return,string,join,tasks,stream,map,t,char,sequence,t,to,string,filter,t,t,length,0,iterator
ClusterStateTaskExecutor -> default String describeTasks(List<T> tasks);1528762805;Builds a concise description of a list of tasks (to be used in logging etc.).__Note that the tasks given are not necessarily the same as those that will be passed to {@link #execute(ClusterState, List)}._but are guaranteed to be a subset of them. This method can be called multiple times with different lists before execution._This allows groupd task description but the submitting source.;default String describeTasks(List<T> tasks) {_        return String.join(", ", tasks.stream().map(t -> (CharSequence)t.toString()).filter(t -> t.length() == 0)::iterator)__    };builds,a,concise,description,of,a,list,of,tasks,to,be,used,in,logging,etc,note,that,the,tasks,given,are,not,necessarily,the,same,as,those,that,will,be,passed,to,link,execute,cluster,state,list,but,are,guaranteed,to,be,a,subset,of,them,this,method,can,be,called,multiple,times,with,different,lists,before,execution,this,allows,groupd,task,description,but,the,submitting,source;default,string,describe,tasks,list,t,tasks,return,string,join,tasks,stream,map,t,char,sequence,t,to,string,filter,t,t,length,0,iterator
ClusterStateTaskExecutor -> default String describeTasks(List<T> tasks);1529341607;Builds a concise description of a list of tasks (to be used in logging etc.).__Note that the tasks given are not necessarily the same as those that will be passed to {@link #execute(ClusterState, List)}._but are guaranteed to be a subset of them. This method can be called multiple times with different lists before execution._This allows groupd task description but the submitting source.;default String describeTasks(List<T> tasks) {_        return String.join(", ", tasks.stream().map(t -> (CharSequence)t.toString()).filter(t -> t.length() == 0)::iterator)__    };builds,a,concise,description,of,a,list,of,tasks,to,be,used,in,logging,etc,note,that,the,tasks,given,are,not,necessarily,the,same,as,those,that,will,be,passed,to,link,execute,cluster,state,list,but,are,guaranteed,to,be,a,subset,of,them,this,method,can,be,called,multiple,times,with,different,lists,before,execution,this,allows,groupd,task,description,but,the,submitting,source;default,string,describe,tasks,list,t,tasks,return,string,join,tasks,stream,map,t,char,sequence,t,to,string,filter,t,t,length,0,iterator
ClusterStateTaskExecutor -> default String describeTasks(List<T> tasks);1538509426;Builds a concise description of a list of tasks (to be used in logging etc.).__Note that the tasks given are not necessarily the same as those that will be passed to {@link #execute(ClusterState, List)}._but are guaranteed to be a subset of them. This method can be called multiple times with different lists before execution._This allows groupd task description but the submitting source.;default String describeTasks(List<T> tasks) {_        return String.join(", ", tasks.stream().map(t -> (CharSequence)t.toString()).filter(t -> t.length() > 0)::iterator)__    };builds,a,concise,description,of,a,list,of,tasks,to,be,used,in,logging,etc,note,that,the,tasks,given,are,not,necessarily,the,same,as,those,that,will,be,passed,to,link,execute,cluster,state,list,but,are,guaranteed,to,be,a,subset,of,them,this,method,can,be,called,multiple,times,with,different,lists,before,execution,this,allows,groupd,task,description,but,the,submitting,source;default,string,describe,tasks,list,t,tasks,return,string,join,tasks,stream,map,t,char,sequence,t,to,string,filter,t,t,length,0,iterator
ClusterStateTaskExecutor -> ClusterTasksResult -> ClusterTasksResult(ClusterState resultingState, Map<T, TaskResult> executionResults);1524684173;Construct an execution result instance with a correspondence between the tasks and their execution result_@param resultingState the resulting cluster state_@param executionResults the correspondence between tasks and their outcome;ClusterTasksResult(ClusterState resultingState, Map<T, TaskResult> executionResults) {_            this.resultingState = resultingState__            this.executionResults = executionResults__        };construct,an,execution,result,instance,with,a,correspondence,between,the,tasks,and,their,execution,result,param,resulting,state,the,resulting,cluster,state,param,execution,results,the,correspondence,between,tasks,and,their,outcome;cluster,tasks,result,cluster,state,resulting,state,map,t,task,result,execution,results,this,resulting,state,resulting,state,this,execution,results,execution,results
ClusterStateTaskExecutor -> ClusterTasksResult -> ClusterTasksResult(ClusterState resultingState, Map<T, TaskResult> executionResults);1528762805;Construct an execution result instance with a correspondence between the tasks and their execution result_@param resultingState the resulting cluster state_@param executionResults the correspondence between tasks and their outcome;ClusterTasksResult(ClusterState resultingState, Map<T, TaskResult> executionResults) {_            this.resultingState = resultingState__            this.executionResults = executionResults__        };construct,an,execution,result,instance,with,a,correspondence,between,the,tasks,and,their,execution,result,param,resulting,state,the,resulting,cluster,state,param,execution,results,the,correspondence,between,tasks,and,their,outcome;cluster,tasks,result,cluster,state,resulting,state,map,t,task,result,execution,results,this,resulting,state,resulting,state,this,execution,results,execution,results
ClusterStateTaskExecutor -> ClusterTasksResult -> ClusterTasksResult(ClusterState resultingState, Map<T, TaskResult> executionResults);1529341607;Construct an execution result instance with a correspondence between the tasks and their execution result_@param resultingState the resulting cluster state_@param executionResults the correspondence between tasks and their outcome;ClusterTasksResult(ClusterState resultingState, Map<T, TaskResult> executionResults) {_            this.resultingState = resultingState__            this.executionResults = executionResults__        };construct,an,execution,result,instance,with,a,correspondence,between,the,tasks,and,their,execution,result,param,resulting,state,the,resulting,cluster,state,param,execution,results,the,correspondence,between,tasks,and,their,outcome;cluster,tasks,result,cluster,state,resulting,state,map,t,task,result,execution,results,this,resulting,state,resulting,state,this,execution,results,execution,results
ClusterStateTaskExecutor -> ClusterTasksResult -> ClusterTasksResult(ClusterState resultingState, Map<T, TaskResult> executionResults);1538509426;Construct an execution result instance with a correspondence between the tasks and their execution result_@param resultingState the resulting cluster state_@param executionResults the correspondence between tasks and their outcome;ClusterTasksResult(ClusterState resultingState, Map<T, TaskResult> executionResults) {_            this.resultingState = resultingState__            this.executionResults = executionResults__        };construct,an,execution,result,instance,with,a,correspondence,between,the,tasks,and,their,execution,result,param,resulting,state,the,resulting,cluster,state,param,execution,results,the,correspondence,between,tasks,and,their,outcome;cluster,tasks,result,cluster,state,resulting,state,map,t,task,result,execution,results,this,resulting,state,resulting,state,this,execution,results,execution,results
ClusterStateTaskExecutor -> default boolean runOnlyOnMaster();1524684173;indicates whether this executor should only run if the current node is master;default boolean runOnlyOnMaster() {_        return true__    };indicates,whether,this,executor,should,only,run,if,the,current,node,is,master;default,boolean,run,only,on,master,return,true
ClusterStateTaskExecutor -> default boolean runOnlyOnMaster();1528762805;indicates whether this executor should only run if the current node is master;default boolean runOnlyOnMaster() {_        return true__    };indicates,whether,this,executor,should,only,run,if,the,current,node,is,master;default,boolean,run,only,on,master,return,true
ClusterStateTaskExecutor -> default boolean runOnlyOnMaster();1529341607;indicates whether this executor should only run if the current node is master;default boolean runOnlyOnMaster() {_        return true__    };indicates,whether,this,executor,should,only,run,if,the,current,node,is,master;default,boolean,run,only,on,master,return,true
ClusterStateTaskExecutor -> default boolean runOnlyOnMaster();1538509426;indicates whether this executor should only run if the current node is master;default boolean runOnlyOnMaster() {_        return true__    };indicates,whether,this,executor,should,only,run,if,the,current,node,is,master;default,boolean,run,only,on,master,return,true
ClusterStateTaskExecutor -> ClusterTasksResult<T> execute(ClusterState currentState, List<T> tasks) throws Exception_;1524684173;Update the cluster state based on the current state and the given tasks. Return the *same instance* if no state_should be changed.;ClusterTasksResult<T> execute(ClusterState currentState, List<T> tasks) throws Exception_;update,the,cluster,state,based,on,the,current,state,and,the,given,tasks,return,the,same,instance,if,no,state,should,be,changed;cluster,tasks,result,t,execute,cluster,state,current,state,list,t,tasks,throws,exception
ClusterStateTaskExecutor -> ClusterTasksResult<T> execute(ClusterState currentState, List<T> tasks) throws Exception_;1528762805;Update the cluster state based on the current state and the given tasks. Return the *same instance* if no state_should be changed.;ClusterTasksResult<T> execute(ClusterState currentState, List<T> tasks) throws Exception_;update,the,cluster,state,based,on,the,current,state,and,the,given,tasks,return,the,same,instance,if,no,state,should,be,changed;cluster,tasks,result,t,execute,cluster,state,current,state,list,t,tasks,throws,exception
ClusterStateTaskExecutor -> ClusterTasksResult<T> execute(ClusterState currentState, List<T> tasks) throws Exception_;1529341607;Update the cluster state based on the current state and the given tasks. Return the *same instance* if no state_should be changed.;ClusterTasksResult<T> execute(ClusterState currentState, List<T> tasks) throws Exception_;update,the,cluster,state,based,on,the,current,state,and,the,given,tasks,return,the,same,instance,if,no,state,should,be,changed;cluster,tasks,result,t,execute,cluster,state,current,state,list,t,tasks,throws,exception
ClusterStateTaskExecutor -> ClusterTasksResult<T> execute(ClusterState currentState, List<T> tasks) throws Exception_;1538509426;Update the cluster state based on the current state and the given tasks. Return the *same instance* if no state_should be changed.;ClusterTasksResult<T> execute(ClusterState currentState, List<T> tasks) throws Exception_;update,the,cluster,state,based,on,the,current,state,and,the,given,tasks,return,the,same,instance,if,no,state,should,be,changed;cluster,tasks,result,t,execute,cluster,state,current,state,list,t,tasks,throws,exception
