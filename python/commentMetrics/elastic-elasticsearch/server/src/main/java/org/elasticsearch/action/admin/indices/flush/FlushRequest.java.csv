commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns {@code true} iff a flush should block  * if a another flush operation is already running. Otherwise {@code false}  */ ;/**  * Returns {@code true} iff a flush should block  * if a another flush operation is already running. Otherwise {@code false}  */ public boolean waitIfOngoing() {     return this.waitIfOngoing. }
true;public;1;4;/**  * if set to {@code true} the flush will block  * if a another flush operation is already running until the flush can be performed.  * The default is <code>true</code>  */ ;/**  * if set to {@code true} the flush will block  * if a another flush operation is already running until the flush can be performed.  * The default is <code>true</code>  */ public FlushRequest waitIfOngoing(boolean waitIfOngoing) {     this.waitIfOngoing = waitIfOngoing.     return this. }
true;public;0;3;/**  * Force flushing, even if one is possibly not needed.  */ ;/**  * Force flushing, even if one is possibly not needed.  */ public boolean force() {     return force. }
true;public;1;4;/**  * Force flushing, even if one is possibly not needed.  */ ;/**  * Force flushing, even if one is possibly not needed.  */ public FlushRequest force(boolean force) {     this.force = force.     return this. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(force).     out.writeBoolean(waitIfOngoing). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     force = in.readBoolean().     waitIfOngoing = in.readBoolean(). }
false;public;0;6;;@Override public String toString() {     return "FlushRequest{" + "waitIfOngoing=" + waitIfOngoing + ", force=" + force + "}". }
