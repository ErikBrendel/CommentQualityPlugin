commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the shard id this index belongs to.  */ ;/**  * Returns the shard id this index belongs to.  */ public ShardId shardId() {     return this.shardId. }
false;public;0;5;;@Override public CacheHelper getReaderCacheHelper() {     // safe to delegate since this reader does not alter the index     return in.getReaderCacheHelper(). }
false;protected;1;4;;@Override protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) throws IOException {     return new ElasticsearchDirectoryReader(in, wrapper, shardId). }
true;public,static;2;3;/**  * Wraps the given reader in a {@link org.elasticsearch.common.lucene.index.ElasticsearchDirectoryReader} as  * well as all it's sub-readers in {@link org.elasticsearch.common.lucene.index.ElasticsearchLeafReader} to  * expose the given shard Id.  *  * @param reader the reader to wrap  * @param shardId the shard ID to expose via the elasticsearch internal reader wrappers.  */ ;/**  * Wraps the given reader in a {@link org.elasticsearch.common.lucene.index.ElasticsearchDirectoryReader} as  * well as all it's sub-readers in {@link org.elasticsearch.common.lucene.index.ElasticsearchLeafReader} to  * expose the given shard Id.  *  * @param reader the reader to wrap  * @param shardId the shard ID to expose via the elasticsearch internal reader wrappers.  */ public static ElasticsearchDirectoryReader wrap(DirectoryReader reader, ShardId shardId) throws IOException {     return new ElasticsearchDirectoryReader(reader, new SubReaderWrapper(shardId), shardId). }
false;public;1;4;;@Override public LeafReader wrap(LeafReader reader) {     return new ElasticsearchLeafReader(reader, shardId). }
true;public,static;2;14;/**  * Adds the given listener to the provided directory reader. The reader  * must contain an {@link ElasticsearchDirectoryReader} in it's hierarchy  * otherwise we can't safely install the listener.  *  * @throws IllegalArgumentException if the reader doesn't contain an  *     {@link ElasticsearchDirectoryReader} in it's hierarchy  */ ;/**  * Adds the given listener to the provided directory reader. The reader  * must contain an {@link ElasticsearchDirectoryReader} in it's hierarchy  * otherwise we can't safely install the listener.  *  * @throws IllegalArgumentException if the reader doesn't contain an  *     {@link ElasticsearchDirectoryReader} in it's hierarchy  */ @SuppressForbidden(reason = "This is the only sane way to add a ReaderClosedListener") public static void addReaderCloseListener(DirectoryReader reader, IndexReader.ClosedListener listener) {     ElasticsearchDirectoryReader elasticsearchDirectoryReader = getElasticsearchDirectoryReader(reader).     if (elasticsearchDirectoryReader == null) {         throw new IllegalArgumentException("Can't install close listener reader is not an ElasticsearchDirectoryReader/ElasticsearchLeafReader").     }     IndexReader.CacheHelper cacheHelper = elasticsearchDirectoryReader.getReaderCacheHelper().     if (cacheHelper == null) {         throw new IllegalArgumentException("Reader " + elasticsearchDirectoryReader + " does not support caching").     }     assert cacheHelper.getKey() == reader.getReaderCacheHelper().getKey().     cacheHelper.addClosedListener(listener). }
true;public,static;1;14;/**  * Tries to unwrap the given reader until the first  * {@link ElasticsearchDirectoryReader} instance is found or {@code null}  * if no instance is found.  */ ;/**  * Tries to unwrap the given reader until the first  * {@link ElasticsearchDirectoryReader} instance is found or {@code null}  * if no instance is found.  */ public static ElasticsearchDirectoryReader getElasticsearchDirectoryReader(DirectoryReader reader) {     if (reader instanceof FilterDirectoryReader) {         if (reader instanceof ElasticsearchDirectoryReader) {             return (ElasticsearchDirectoryReader) reader.         } else {             // may be instance of ElasticsearchLeafReader. This can cause us to miss the shardId.             return getElasticsearchDirectoryReader(((FilterDirectoryReader) reader).getDelegate()).         }     }     return null. }
