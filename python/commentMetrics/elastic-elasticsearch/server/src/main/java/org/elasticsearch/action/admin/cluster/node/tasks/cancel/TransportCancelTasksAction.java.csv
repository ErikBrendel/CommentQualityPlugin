commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;5;;@Override protected CancelTasksResponse newResponse(CancelTasksRequest request, List<TaskInfo> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions). }
false;protected;2;26;;protected void processTasks(CancelTasksRequest request, Consumer<CancellableTask> operation) {     if (request.getTaskId().isSet()) {         // we are only checking one task, we can optimize it         CancellableTask task = taskManager.getCancellableTask(request.getTaskId().getId()).         if (task != null) {             if (request.match(task)) {                 operation.accept(task).             } else {                 throw new IllegalArgumentException("task [" + request.getTaskId() + "] doesn't support this operation").             }         } else {             if (taskManager.getTask(request.getTaskId().getId()) != null) {                 // The task exists, but doesn't support cancellation                 throw new IllegalArgumentException("task [" + request.getTaskId() + "] doesn't support cancellation").             } else {                 throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.getTaskId()).             }         }     } else {         for (CancellableTask task : taskManager.getCancellableTasks().values()) {             if (request.match(task)) {                 operation.accept(task).             }         }     } }
false;public;1;4;;@Override public void onResponse(Void aVoid) {     processResponse(). }
false;public;1;7;;@Override public void onFailure(Exception e) {     synchronized (failures) {         failures.add(e).     }     processResponse(). }
false;private;0;13;;private void processResponse() {     banLock.onBanSet().     if (responses.decrementAndGet() == 0) {         if (failures.isEmpty() == false) {             IllegalStateException exception = new IllegalStateException("failed to cancel children of the task [" + cancellableTask.getId() + "]").             failures.forEach(exception::addSuppressed).             listener.onFailure(exception).         } else {             listener.onResponse(cancellableTask.taskInfo(nodeId, false)).         }     } }
false;protected,synchronized;3;55;;@Override protected synchronized void taskOperation(CancelTasksRequest request, CancellableTask cancellableTask, ActionListener<TaskInfo> listener) {     String nodeId = clusterService.localNode().getId().     final boolean canceled.     if (cancellableTask.shouldCancelChildrenOnCancellation()) {         DiscoveryNodes childNodes = clusterService.state().nodes().         final BanLock banLock = new BanLock(childNodes.getSize(), () -> removeBanOnNodes(cancellableTask, childNodes)).         canceled = taskManager.cancel(cancellableTask, request.getReason(), banLock::onTaskFinished).         if (canceled) {             // /In case the task has some child tasks, we need to wait for until ban is set on all nodes             logger.trace("cancelling task {} on child nodes", cancellableTask.getId()).             AtomicInteger responses = new AtomicInteger(childNodes.getSize()).             List<Exception> failures = new ArrayList<>().             setBanOnNodes(request.getReason(), cancellableTask, childNodes, new ActionListener<Void>() {                  @Override                 public void onResponse(Void aVoid) {                     processResponse().                 }                  @Override                 public void onFailure(Exception e) {                     synchronized (failures) {                         failures.add(e).                     }                     processResponse().                 }                  private void processResponse() {                     banLock.onBanSet().                     if (responses.decrementAndGet() == 0) {                         if (failures.isEmpty() == false) {                             IllegalStateException exception = new IllegalStateException("failed to cancel children of the task [" + cancellableTask.getId() + "]").                             failures.forEach(exception::addSuppressed).                             listener.onFailure(exception).                         } else {                             listener.onResponse(cancellableTask.taskInfo(nodeId, false)).                         }                     }                 }             }).         }     } else {         canceled = taskManager.cancel(cancellableTask, request.getReason(), () -> listener.onResponse(cancellableTask.taskInfo(nodeId, false))).         if (canceled) {             logger.trace("task {} doesn't have any children that should be cancelled", cancellableTask.getId()).         }     }     if (canceled == false) {         logger.trace("task {} is already cancelled", cancellableTask.getId()).         throw new IllegalStateException("task with id " + cancellableTask.getId() + " is already cancelled").     } }
false;private;4;5;;private void setBanOnNodes(String reason, CancellableTask task, DiscoveryNodes nodes, ActionListener<Void> listener) {     sendSetBanRequest(nodes, BanParentTaskRequest.createSetBanParentTaskRequest(new TaskId(clusterService.localNode().getId(), task.getId()), reason), listener). }
false;private;2;4;;private void removeBanOnNodes(CancellableTask task, DiscoveryNodes nodes) {     sendRemoveBanRequest(nodes, BanParentTaskRequest.createRemoveBanParentTaskRequest(new TaskId(clusterService.localNode().getId(), task.getId()))). }
false;public;1;4;;@Override public void handleResponse(TransportResponse.Empty response) {     listener.onResponse(null). }
false;public;1;5;;@Override public void handleException(TransportException exp) {     logger.warn("Cannot send ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key).     listener.onFailure(exp). }
false;private;3;19;;private void sendSetBanRequest(DiscoveryNodes nodes, BanParentTaskRequest request, ActionListener<Void> listener) {     for (ObjectObjectCursor<String, DiscoveryNode> node : nodes.getNodes()) {         logger.trace("Sending ban for tasks with the parent [{}] to the node [{}], ban [{}]", request.parentTaskId, node.key, request.ban).         transportService.sendRequest(node.value, BAN_PARENT_ACTION_NAME, request, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {              @Override             public void handleResponse(TransportResponse.Empty response) {                 listener.onResponse(null).             }              @Override             public void handleException(TransportException exp) {                 logger.warn("Cannot send ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key).                 listener.onFailure(exp).             }         }).     } }
false;private;2;7;;private void sendRemoveBanRequest(DiscoveryNodes nodes, BanParentTaskRequest request) {     for (ObjectObjectCursor<String, DiscoveryNode> node : nodes.getNodes()) {         logger.debug("Sending remove ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key).         transportService.sendRequest(node.value, BAN_PARENT_ACTION_NAME, request, EmptyTransportResponseHandler.INSTANCE_SAME).     } }
false;public;0;5;;public void onBanSet() {     if (counter.decrementAndGet() == 0) {         finish().     } }
false;public;0;5;;public void onTaskFinished() {     if (counter.addAndGet(nodesSize) == 0) {         finish().     } }
false;public;0;3;;public void finish() {     finish.run(). }
false;static;2;3;;static BanParentTaskRequest createSetBanParentTaskRequest(TaskId parentTaskId, String reason) {     return new BanParentTaskRequest(parentTaskId, reason). }
false;static;1;3;;static BanParentTaskRequest createRemoveBanParentTaskRequest(TaskId parentTaskId) {     return new BanParentTaskRequest(parentTaskId). }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     parentTaskId.writeTo(out).     out.writeBoolean(ban).     if (ban) {         out.writeString(reason).     } }
false;public;3;13;;@Override public void messageReceived(final BanParentTaskRequest request, final TransportChannel channel, Task task) throws Exception {     if (request.ban) {         logger.debug("Received ban for the parent [{}] on the node [{}], reason: [{}]", request.parentTaskId, clusterService.localNode().getId(), request.reason).         taskManager.setBan(request.parentTaskId, request.reason).     } else {         logger.debug("Removing ban for the parent [{}] on the node [{}]", request.parentTaskId, clusterService.localNode().getId()).         taskManager.removeBan(request.parentTaskId).     }     channel.sendResponse(TransportResponse.Empty.INSTANCE). }
