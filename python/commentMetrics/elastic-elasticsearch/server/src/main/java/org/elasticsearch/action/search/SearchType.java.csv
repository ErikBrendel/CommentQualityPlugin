commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The internal id of the type.  */ ;/**  * The internal id of the type.  */ public byte id() {     return this.id. }
true;public,static;1;10;/**  * Constructs search type based on the internal id.  */ ;/**  * Constructs search type based on the internal id.  */ public static SearchType fromId(byte id) {     if (id == 0) {         return DFS_QUERY_THEN_FETCH.     } else if (id == 1 || id == 3) {         // TODO this bwc layer can be removed once this is back-ported to 5.3 QUERY_AND_FETCH is removed now         return QUERY_THEN_FETCH.     } else {         throw new IllegalArgumentException("No search type for [" + id + "]").     } }
true;public,static;1;12;/**  * The a string representation search type to execute, defaults to {@link SearchType#DEFAULT}. Can be  * one of "dfs_query_then_fetch"/"dfsQueryThenFetch", "dfs_query_and_fetch"/"dfsQueryAndFetch",  * "query_then_fetch"/"queryThenFetch" and "query_and_fetch"/"queryAndFetch".  */ ;/**  * The a string representation search type to execute, defaults to {@link SearchType#DEFAULT}. Can be  * one of "dfs_query_then_fetch"/"dfsQueryThenFetch", "dfs_query_and_fetch"/"dfsQueryAndFetch",  * "query_then_fetch"/"queryThenFetch" and "query_and_fetch"/"queryAndFetch".  */ public static SearchType fromString(String searchType) {     if (searchType == null) {         return SearchType.DEFAULT.     }     if ("dfs_query_then_fetch".equals(searchType)) {         return SearchType.DFS_QUERY_THEN_FETCH.     } else if ("query_then_fetch".equals(searchType)) {         return SearchType.QUERY_THEN_FETCH.     } else {         throw new IllegalArgumentException("No search type for [" + searchType + "]").     } }
