commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static ScriptScoreQueryBuilder fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;protected;1;6;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(query).     out.writeNamedWriteable(scriptScoreFunctionBuilder).     out.writeOptionalFloat(minScore). }
true;public;0;3;/**  * Returns the query builder that defines which documents the script_score query will be executed on.  */ ;/**  * Returns the query builder that defines which documents the script_score query will be executed on.  */ public QueryBuilder query() {     return this.query. }
false;protected;2;12;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.field(QUERY_FIELD.getPreferredName()).     query.toXContent(builder, params).     builder.field(SCRIPT_FIELD.getPreferredName(), scriptScoreFunctionBuilder.getScript()).     if (minScore != null) {         builder.field(MIN_SCORE_FIELD.getPreferredName(), minScore).     }     printBoostAndQueryName(builder).     builder.endObject(). }
false;public;1;4;;public ScriptScoreQueryBuilder setMinScore(float minScore) {     this.minScore = minScore.     return this. }
false;public;0;3;;public Float getMinScore() {     return this.minScore. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;1;6;;@Override protected boolean doEquals(ScriptScoreQueryBuilder other) {     return Objects.equals(this.query, other.query) && Objects.equals(this.scriptScoreFunctionBuilder, other.scriptScoreFunctionBuilder) && Objects.equals(this.minScore, other.minScore). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(this.query, this.scriptScoreFunctionBuilder, this.minScore). }
false;protected;1;6;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     ScriptScoreFunction function = (ScriptScoreFunction) scriptScoreFunctionBuilder.toFunction(context).     Query query = this.query.toQuery(context).     return new ScriptScoreQuery(query, function, minScore). }
false;protected;1;10;;@Override protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {     QueryBuilder newQuery = this.query.rewrite(queryRewriteContext).     if (newQuery != query) {         ScriptScoreQueryBuilder newQueryBuilder = new ScriptScoreQueryBuilder(newQuery, scriptScoreFunctionBuilder).         newQueryBuilder.setMinScore(minScore).         return newQueryBuilder.     }     return this. }
false;protected;1;4;;@Override protected void extractInnerHitBuilders(Map<String, InnerHitContextBuilder> innerHits) {     InnerHitContextBuilder.extractInnerHits(query(), innerHits). }
