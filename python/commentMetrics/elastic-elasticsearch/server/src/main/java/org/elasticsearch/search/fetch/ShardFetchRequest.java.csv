commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeLong(id).     out.writeVInt(size).     for (int i = 0. i < size. i++) {         out.writeVInt(docIds[i]).     }     if (lastEmittedDoc == null) {         out.writeByte((byte) 0).     } else if (lastEmittedDoc instanceof FieldDoc) {         out.writeByte((byte) 1).         Lucene.writeFieldDoc(out, (FieldDoc) lastEmittedDoc).     } else {         out.writeByte((byte) 2).         Lucene.writeScoreDoc(out, lastEmittedDoc).     } }
false;public;0;3;;public long id() {     return id. }
false;public;0;3;;public int[] docIds() {     return docIds. }
false;public;0;3;;public int docIdsSize() {     return size. }
false;public;0;3;;public ScoreDoc lastEmittedDoc() {     return lastEmittedDoc. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;5;4;;@Override public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {     return new SearchTask(id, type, action, getDescription(), parentTaskId, headers). }
false;public;0;4;;@Override public String getDescription() {     return "id[" + id + "], size[" + size + "], lastEmittedDoc[" + lastEmittedDoc + "]". }
