commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public AggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {     return aggregationParser.parse(parser, new SignificantTermsAggregationBuilder(aggregationName, null), null). }
false;public,static;1;43;;public static Aggregator.Parser getParser(ParseFieldRegistry<SignificanceHeuristicParser> significanceHeuristicParserRegistry) {     ObjectParser<SignificantTermsAggregationBuilder, Void> aggregationParser = new ObjectParser<>(SignificantTermsAggregationBuilder.NAME).     ValuesSourceParserHelper.declareAnyFields(aggregationParser, true, true).     aggregationParser.declareInt(SignificantTermsAggregationBuilder::shardSize, TermsAggregationBuilder.SHARD_SIZE_FIELD_NAME).     aggregationParser.declareLong(SignificantTermsAggregationBuilder::minDocCount, TermsAggregationBuilder.MIN_DOC_COUNT_FIELD_NAME).     aggregationParser.declareLong(SignificantTermsAggregationBuilder::shardMinDocCount, TermsAggregationBuilder.SHARD_MIN_DOC_COUNT_FIELD_NAME).     aggregationParser.declareInt(SignificantTermsAggregationBuilder::size, TermsAggregationBuilder.REQUIRED_SIZE_FIELD_NAME).     aggregationParser.declareString(SignificantTermsAggregationBuilder::executionHint, TermsAggregationBuilder.EXECUTION_HINT_FIELD_NAME).     aggregationParser.declareObject(SignificantTermsAggregationBuilder::backgroundFilter, (p, context) -> parseInnerQueryBuilder(p), SignificantTermsAggregationBuilder.BACKGROUND_FILTER).     aggregationParser.declareField((b, v) -> b.includeExclude(IncludeExclude.merge(v, b.includeExclude())), IncludeExclude::parseInclude, IncludeExclude.INCLUDE_FIELD, ObjectParser.ValueType.OBJECT_ARRAY_OR_STRING).     aggregationParser.declareField((b, v) -> b.includeExclude(IncludeExclude.merge(b.includeExclude(), v)), IncludeExclude::parseExclude, IncludeExclude.EXCLUDE_FIELD, ObjectParser.ValueType.STRING_ARRAY).     for (String name : significanceHeuristicParserRegistry.getNames()) {         aggregationParser.declareObject(SignificantTermsAggregationBuilder::significanceHeuristic, (p, context) -> {             SignificanceHeuristicParser significanceHeuristicParser = significanceHeuristicParserRegistry.lookupReturningNullIfNotFound(name, p.getDeprecationHandler()).             return significanceHeuristicParser.parse(p).         }, new ParseField(name)).     }     return new Aggregator.Parser() {          @Override         public AggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {             return aggregationParser.parse(parser, new SignificantTermsAggregationBuilder(aggregationName, null), null).         }     }. }
false;protected;2;4;;@Override protected AggregationBuilder shallowCopy(Builder factoriesBuilder, Map<String, Object> metaData) {     return new SignificantTermsAggregationBuilder(this, factoriesBuilder, metaData). }
false;protected;1;8;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     bucketCountThresholds.writeTo(out).     out.writeOptionalString(executionHint).     out.writeOptionalNamedWriteable(filterBuilder).     out.writeOptionalWriteable(includeExclude).     out.writeNamedWriteable(significanceHeuristic). }
false;protected;0;4;;@Override protected boolean serializeTargetValueType() {     return true. }
false;protected;0;3;;protected TermsAggregator.BucketCountThresholds getBucketCountThresholds() {     return new TermsAggregator.BucketCountThresholds(bucketCountThresholds). }
false;public;0;3;;public TermsAggregator.BucketCountThresholds bucketCountThresholds() {     return bucketCountThresholds. }
false;public;1;7;;public SignificantTermsAggregationBuilder bucketCountThresholds(TermsAggregator.BucketCountThresholds bucketCountThresholds) {     if (bucketCountThresholds == null) {         throw new IllegalArgumentException("[bucketCountThresholds] must not be null: [" + name + "]").     }     this.bucketCountThresholds = bucketCountThresholds.     return this. }
true;public;1;7;/**  * Sets the size - indicating how many term buckets should be returned  * (defaults to 10)  */ ;/**  * Sets the size - indicating how many term buckets should be returned  * (defaults to 10)  */ public SignificantTermsAggregationBuilder size(int size) {     if (size <= 0) {         throw new IllegalArgumentException("[size] must be greater than 0. Found [" + size + "] in [" + name + "]").     }     bucketCountThresholds.setRequiredSize(size).     return this. }
true;public;1;8;/**  * Sets the shard_size - indicating the number of term buckets each shard  * will return to the coordinating node (the node that coordinates the  * search execution). The higher the shard size is, the more accurate the  * results are.  */ ;/**  * Sets the shard_size - indicating the number of term buckets each shard  * will return to the coordinating node (the node that coordinates the  * search execution). The higher the shard size is, the more accurate the  * results are.  */ public SignificantTermsAggregationBuilder shardSize(int shardSize) {     if (shardSize <= 0) {         throw new IllegalArgumentException("[shardSize] must be greater than  0. Found [" + shardSize + "] in [" + name + "]").     }     bucketCountThresholds.setShardSize(shardSize).     return this. }
true;public;1;8;/**  * Set the minimum document count terms should have in order to appear in  * the response.  */ ;/**  * Set the minimum document count terms should have in order to appear in  * the response.  */ public SignificantTermsAggregationBuilder minDocCount(long minDocCount) {     if (minDocCount < 0) {         throw new IllegalArgumentException("[minDocCount] must be greater than or equal to 0. Found [" + minDocCount + "] in [" + name + "]").     }     bucketCountThresholds.setMinDocCount(minDocCount).     return this. }
true;public;1;8;/**  * Set the minimum document count terms should have on the shard in order to  * appear in the response.  */ ;/**  * Set the minimum document count terms should have on the shard in order to  * appear in the response.  */ public SignificantTermsAggregationBuilder shardMinDocCount(long shardMinDocCount) {     if (shardMinDocCount < 0) {         throw new IllegalArgumentException("[shardMinDocCount] must be greater than or equal to 0. Found [" + shardMinDocCount + "] in [" + name + "]").     }     bucketCountThresholds.setShardMinDocCount(shardMinDocCount).     return this. }
true;public;1;4;/**  * Expert: sets an execution hint to the aggregation.  */ ;/**  * Expert: sets an execution hint to the aggregation.  */ public SignificantTermsAggregationBuilder executionHint(String executionHint) {     this.executionHint = executionHint.     return this. }
true;public;0;3;/**  * Expert: gets an execution hint to the aggregation.  */ ;/**  * Expert: gets an execution hint to the aggregation.  */ public String executionHint() {     return executionHint. }
false;public;1;7;;public SignificantTermsAggregationBuilder backgroundFilter(QueryBuilder backgroundFilter) {     if (backgroundFilter == null) {         throw new IllegalArgumentException("[backgroundFilter] must not be null: [" + name + "]").     }     this.filterBuilder = backgroundFilter.     return this. }
false;public;0;3;;public QueryBuilder backgroundFilter() {     return filterBuilder. }
true;public;1;4;/**  * Set terms to include and exclude from the aggregation results  */ ;/**  * Set terms to include and exclude from the aggregation results  */ public SignificantTermsAggregationBuilder includeExclude(IncludeExclude includeExclude) {     this.includeExclude = includeExclude.     return this. }
true;public;0;3;/**  * Get terms to include and exclude from the aggregation results  */ ;/**  * Get terms to include and exclude from the aggregation results  */ public IncludeExclude includeExclude() {     return includeExclude. }
false;public;1;7;;public SignificantTermsAggregationBuilder significanceHeuristic(SignificanceHeuristic significanceHeuristic) {     if (significanceHeuristic == null) {         throw new IllegalArgumentException("[significanceHeuristic] must not be null: [" + name + "]").     }     this.significanceHeuristic = significanceHeuristic.     return this. }
false;public;0;3;;public SignificanceHeuristic significanceHeuristic() {     return significanceHeuristic. }
false;protected;4;7;;@Override protected ValuesSourceAggregatorFactory<ValuesSource, ?> innerBuild(SearchContext context, ValuesSourceConfig<ValuesSource> config, AggregatorFactory<?> parent, Builder subFactoriesBuilder) throws IOException {     SignificanceHeuristic executionHeuristic = this.significanceHeuristic.rewrite(context).     return new SignificantTermsAggregatorFactory(name, config, includeExclude, executionHint, filterBuilder, bucketCountThresholds, executionHeuristic, context, parent, subFactoriesBuilder, metaData). }
false;protected;2;15;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     bucketCountThresholds.toXContent(builder, params).     if (executionHint != null) {         builder.field(TermsAggregationBuilder.EXECUTION_HINT_FIELD_NAME.getPreferredName(), executionHint).     }     if (filterBuilder != null) {         builder.field(BACKGROUND_FILTER.getPreferredName(), filterBuilder).     }     if (includeExclude != null) {         includeExclude.toXContent(builder, params).     }     significanceHeuristic.toXContent(builder, params).     return builder. }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(bucketCountThresholds, executionHint, filterBuilder, includeExclude, significanceHeuristic). }
false;protected;1;9;;@Override protected boolean innerEquals(Object obj) {     SignificantTermsAggregationBuilder other = (SignificantTermsAggregationBuilder) obj.     return Objects.equals(bucketCountThresholds, other.bucketCountThresholds) && Objects.equals(executionHint, other.executionHint) && Objects.equals(filterBuilder, other.filterBuilder) && Objects.equals(includeExclude, other.includeExclude) && Objects.equals(significanceHeuristic, other.significanceHeuristic). }
false;public;0;4;;@Override public String getType() {     return NAME. }
