# id;timestamp;commentText;codeText;commentWords;codeWords
GlobalCheckpointListeners -> synchronized ScheduledFuture<?> getTimeoutFuture(final GlobalCheckpointListener listener);1536828374;The scheduled future for a listener that has a timeout associated with it, otherwise null.__@param listener the listener to get the scheduled future for_@return a scheduled future representing the timeout future for the listener, otherwise null;synchronized ScheduledFuture<?> getTimeoutFuture(final GlobalCheckpointListener listener) {_        return listeners.get(listener)__    };the,scheduled,future,for,a,listener,that,has,a,timeout,associated,with,it,otherwise,null,param,listener,the,listener,to,get,the,scheduled,future,for,return,a,scheduled,future,representing,the,timeout,future,for,the,listener,otherwise,null;synchronized,scheduled,future,get,timeout,future,final,global,checkpoint,listener,listener,return,listeners,get,listener
GlobalCheckpointListeners -> synchronized ScheduledFuture<?> getTimeoutFuture(final GlobalCheckpointListener listener);1536964057;The scheduled future for a listener that has a timeout associated with it, otherwise null.__@param listener the listener to get the scheduled future for_@return a scheduled future representing the timeout future for the listener, otherwise null;synchronized ScheduledFuture<?> getTimeoutFuture(final GlobalCheckpointListener listener) {_        return listeners.get(listener).v2()__    };the,scheduled,future,for,a,listener,that,has,a,timeout,associated,with,it,otherwise,null,param,listener,the,listener,to,get,the,scheduled,future,for,return,a,scheduled,future,representing,the,timeout,future,for,the,listener,otherwise,null;synchronized,scheduled,future,get,timeout,future,final,global,checkpoint,listener,listener,return,listeners,get,listener,v2
GlobalCheckpointListeners -> synchronized ScheduledFuture<?> getTimeoutFuture(final GlobalCheckpointListener listener);1549399704;The scheduled future for a listener that has a timeout associated with it, otherwise null.__@param listener the listener to get the scheduled future for_@return a scheduled future representing the timeout future for the listener, otherwise null;synchronized ScheduledFuture<?> getTimeoutFuture(final GlobalCheckpointListener listener) {_        return listeners.get(listener).v2()__    };the,scheduled,future,for,a,listener,that,has,a,timeout,associated,with,it,otherwise,null,param,listener,the,listener,to,get,the,scheduled,future,for,return,a,scheduled,future,representing,the,timeout,future,for,the,listener,otherwise,null;synchronized,scheduled,future,get,timeout,future,final,global,checkpoint,listener,listener,return,listeners,get,listener,v2
GlobalCheckpointListeners -> synchronized int pendingListeners();1536828374;The number of listeners currently pending for notification.__@return the number of listeners pending notification;synchronized int pendingListeners() {_        return listeners == null ? 0 : listeners.size()__    };the,number,of,listeners,currently,pending,for,notification,return,the,number,of,listeners,pending,notification;synchronized,int,pending,listeners,return,listeners,null,0,listeners,size
GlobalCheckpointListeners -> synchronized int pendingListeners();1536964057;The number of listeners currently pending for notification.__@return the number of listeners pending notification;synchronized int pendingListeners() {_        return listeners.size()__    };the,number,of,listeners,currently,pending,for,notification,return,the,number,of,listeners,pending,notification;synchronized,int,pending,listeners,return,listeners,size
GlobalCheckpointListeners -> synchronized int pendingListeners();1549399704;The number of listeners currently pending for notification.__@return the number of listeners pending notification;synchronized int pendingListeners() {_        return listeners.size()__    };the,number,of,listeners,currently,pending,for,notification,return,the,number,of,listeners,pending,notification;synchronized,int,pending,listeners,return,listeners,size
GlobalCheckpointListeners -> synchronized void add(final long waitingForGlobalCheckpoint, final GlobalCheckpointListener listener, final TimeValue timeout);1536964057;Add a global checkpoint listener. If the global checkpoint is equal to or above the global checkpoint the listener is waiting for,_then the listener will be asynchronously notified on the executor used to construct this collection of global checkpoint listeners._If the shard is closed then the listener will be asynchronously notified on the executor used to construct this collection of global_checkpoint listeners. The listener will only be notified of at most one event, either the global checkpoint is updated above the_global checkpoint the listener is waiting for, or the shard is closed. A listener must re-register after one of these events to_receive subsequent events. Callers may add a timeout to be notified after if the timeout elapses. In this case, the listener will be_notified with a {@link TimeoutException}. Passing null fo the timeout means no timeout will be associated to the listener.__@param waitingForGlobalCheckpoint the current global checkpoint known to the listener_@param listener                   the listener_@param timeout                    the listener timeout, or null if no timeout;synchronized void add(final long waitingForGlobalCheckpoint, final GlobalCheckpointListener listener, final TimeValue timeout) {_        if (closed) {_            executor.execute(() -> notifyListener(listener, UNASSIGNED_SEQ_NO, new IndexShardClosedException(shardId)))__            return__        }_        if (lastKnownGlobalCheckpoint >= waitingForGlobalCheckpoint) {_            _            executor.execute(() -> notifyListener(listener, lastKnownGlobalCheckpoint, null))__        } else {_            if (timeout == null) {_                listeners.put(listener, Tuple.tuple(waitingForGlobalCheckpoint, null))__            } else {_                listeners.put(_                        listener,_                        Tuple.tuple(_                                waitingForGlobalCheckpoint,_                                scheduler.schedule(_                                        () -> {_                                            final boolean removed__                                            synchronized (this) {_                                                _                                                removed = listeners.remove(listener).v2() != null__                                            }_                                            if (removed) {_                                                final TimeoutException e = new TimeoutException(timeout.getStringRep())__                                                logger.trace("global checkpoint listener timed out", e)__                                                executor.execute(() -> notifyListener(listener, UNASSIGNED_SEQ_NO, e))__                                            }_                                        },_                                        timeout.nanos(),_                                        TimeUnit.NANOSECONDS)))__            }_        }_    };add,a,global,checkpoint,listener,if,the,global,checkpoint,is,equal,to,or,above,the,global,checkpoint,the,listener,is,waiting,for,then,the,listener,will,be,asynchronously,notified,on,the,executor,used,to,construct,this,collection,of,global,checkpoint,listeners,if,the,shard,is,closed,then,the,listener,will,be,asynchronously,notified,on,the,executor,used,to,construct,this,collection,of,global,checkpoint,listeners,the,listener,will,only,be,notified,of,at,most,one,event,either,the,global,checkpoint,is,updated,above,the,global,checkpoint,the,listener,is,waiting,for,or,the,shard,is,closed,a,listener,must,re,register,after,one,of,these,events,to,receive,subsequent,events,callers,may,add,a,timeout,to,be,notified,after,if,the,timeout,elapses,in,this,case,the,listener,will,be,notified,with,a,link,timeout,exception,passing,null,fo,the,timeout,means,no,timeout,will,be,associated,to,the,listener,param,waiting,for,global,checkpoint,the,current,global,checkpoint,known,to,the,listener,param,listener,the,listener,param,timeout,the,listener,timeout,or,null,if,no,timeout;synchronized,void,add,final,long,waiting,for,global,checkpoint,final,global,checkpoint,listener,listener,final,time,value,timeout,if,closed,executor,execute,notify,listener,listener,new,index,shard,closed,exception,shard,id,return,if,last,known,global,checkpoint,waiting,for,global,checkpoint,executor,execute,notify,listener,listener,last,known,global,checkpoint,null,else,if,timeout,null,listeners,put,listener,tuple,tuple,waiting,for,global,checkpoint,null,else,listeners,put,listener,tuple,tuple,waiting,for,global,checkpoint,scheduler,schedule,final,boolean,removed,synchronized,this,removed,listeners,remove,listener,v2,null,if,removed,final,timeout,exception,e,new,timeout,exception,timeout,get,string,rep,logger,trace,global,checkpoint,listener,timed,out,e,executor,execute,notify,listener,listener,e,timeout,nanos,time,unit,nanoseconds
GlobalCheckpointListeners -> synchronized void add(final long waitingForGlobalCheckpoint, final GlobalCheckpointListener listener, final TimeValue timeout);1549399704;Add a global checkpoint listener. If the global checkpoint is equal to or above the global checkpoint the listener is waiting for,_then the listener will be asynchronously notified on the executor used to construct this collection of global checkpoint listeners._If the shard is closed then the listener will be asynchronously notified on the executor used to construct this collection of global_checkpoint listeners. The listener will only be notified of at most one event, either the global checkpoint is updated above the_global checkpoint the listener is waiting for, or the shard is closed. A listener must re-register after one of these events to_receive subsequent events. Callers may add a timeout to be notified after if the timeout elapses. In this case, the listener will be_notified with a {@link TimeoutException}. Passing null fo the timeout means no timeout will be associated to the listener.__@param waitingForGlobalCheckpoint the current global checkpoint known to the listener_@param listener                   the listener_@param timeout                    the listener timeout, or null if no timeout;synchronized void add(final long waitingForGlobalCheckpoint, final GlobalCheckpointListener listener, final TimeValue timeout) {_        if (closed) {_            executor.execute(() -> notifyListener(listener, UNASSIGNED_SEQ_NO, new IndexShardClosedException(shardId)))__            return__        }_        if (lastKnownGlobalCheckpoint >= waitingForGlobalCheckpoint) {_            _            executor.execute(() -> notifyListener(listener, lastKnownGlobalCheckpoint, null))__        } else {_            if (timeout == null) {_                listeners.put(listener, Tuple.tuple(waitingForGlobalCheckpoint, null))__            } else {_                listeners.put(_                        listener,_                        Tuple.tuple(_                                waitingForGlobalCheckpoint,_                                scheduler.schedule(_                                        () -> {_                                            final boolean removed__                                            synchronized (this) {_                                                _                                                removed = listeners.remove(listener) != null__                                            }_                                            if (removed) {_                                                final TimeoutException e = new TimeoutException(timeout.getStringRep())__                                                logger.trace("global checkpoint listener timed out", e)__                                                executor.execute(() -> notifyListener(listener, UNASSIGNED_SEQ_NO, e))__                                            }_                                        },_                                        timeout.nanos(),_                                        TimeUnit.NANOSECONDS)))__            }_        }_    };add,a,global,checkpoint,listener,if,the,global,checkpoint,is,equal,to,or,above,the,global,checkpoint,the,listener,is,waiting,for,then,the,listener,will,be,asynchronously,notified,on,the,executor,used,to,construct,this,collection,of,global,checkpoint,listeners,if,the,shard,is,closed,then,the,listener,will,be,asynchronously,notified,on,the,executor,used,to,construct,this,collection,of,global,checkpoint,listeners,the,listener,will,only,be,notified,of,at,most,one,event,either,the,global,checkpoint,is,updated,above,the,global,checkpoint,the,listener,is,waiting,for,or,the,shard,is,closed,a,listener,must,re,register,after,one,of,these,events,to,receive,subsequent,events,callers,may,add,a,timeout,to,be,notified,after,if,the,timeout,elapses,in,this,case,the,listener,will,be,notified,with,a,link,timeout,exception,passing,null,fo,the,timeout,means,no,timeout,will,be,associated,to,the,listener,param,waiting,for,global,checkpoint,the,current,global,checkpoint,known,to,the,listener,param,listener,the,listener,param,timeout,the,listener,timeout,or,null,if,no,timeout;synchronized,void,add,final,long,waiting,for,global,checkpoint,final,global,checkpoint,listener,listener,final,time,value,timeout,if,closed,executor,execute,notify,listener,listener,new,index,shard,closed,exception,shard,id,return,if,last,known,global,checkpoint,waiting,for,global,checkpoint,executor,execute,notify,listener,listener,last,known,global,checkpoint,null,else,if,timeout,null,listeners,put,listener,tuple,tuple,waiting,for,global,checkpoint,null,else,listeners,put,listener,tuple,tuple,waiting,for,global,checkpoint,scheduler,schedule,final,boolean,removed,synchronized,this,removed,listeners,remove,listener,null,if,removed,final,timeout,exception,e,new,timeout,exception,timeout,get,string,rep,logger,trace,global,checkpoint,listener,timed,out,e,executor,execute,notify,listener,listener,e,timeout,nanos,time,unit,nanoseconds
GlobalCheckpointListeners -> GlobalCheckpointListener -> void accept(long globalCheckpoint, Exception e)_;1536828374;Callback when the global checkpoint is updated or the shard is closed. If the shard is closed, the value of the global checkpoint_will be set to {@link org.elasticsearch.index.seqno.SequenceNumbers#UNASSIGNED_SEQ_NO} and the exception will be non-null and an_instance of {@link IndexShardClosedException }. If the listener timed out waiting for notification then the exception will be_non-null and an instance of {@link TimeoutException}. If the global checkpoint is updated, the exception will be null.__@param globalCheckpoint the updated global checkpoint_@param e                if non-null, the shard is closed or the listener timed out;void accept(long globalCheckpoint, Exception e)_;callback,when,the,global,checkpoint,is,updated,or,the,shard,is,closed,if,the,shard,is,closed,the,value,of,the,global,checkpoint,will,be,set,to,link,org,elasticsearch,index,seqno,sequence,numbers,and,the,exception,will,be,non,null,and,an,instance,of,link,index,shard,closed,exception,if,the,listener,timed,out,waiting,for,notification,then,the,exception,will,be,non,null,and,an,instance,of,link,timeout,exception,if,the,global,checkpoint,is,updated,the,exception,will,be,null,param,global,checkpoint,the,updated,global,checkpoint,param,e,if,non,null,the,shard,is,closed,or,the,listener,timed,out;void,accept,long,global,checkpoint,exception,e
GlobalCheckpointListeners -> GlobalCheckpointListener -> void accept(long globalCheckpoint, Exception e)_;1536964057;Callback when the global checkpoint is updated or the shard is closed. If the shard is closed, the value of the global checkpoint_will be set to {@link org.elasticsearch.index.seqno.SequenceNumbers#UNASSIGNED_SEQ_NO} and the exception will be non-null and an_instance of {@link IndexShardClosedException }. If the listener timed out waiting for notification then the exception will be_non-null and an instance of {@link TimeoutException}. If the global checkpoint is updated, the exception will be null.__@param globalCheckpoint the updated global checkpoint_@param e                if non-null, the shard is closed or the listener timed out;void accept(long globalCheckpoint, Exception e)_;callback,when,the,global,checkpoint,is,updated,or,the,shard,is,closed,if,the,shard,is,closed,the,value,of,the,global,checkpoint,will,be,set,to,link,org,elasticsearch,index,seqno,sequence,numbers,and,the,exception,will,be,non,null,and,an,instance,of,link,index,shard,closed,exception,if,the,listener,timed,out,waiting,for,notification,then,the,exception,will,be,non,null,and,an,instance,of,link,timeout,exception,if,the,global,checkpoint,is,updated,the,exception,will,be,null,param,global,checkpoint,the,updated,global,checkpoint,param,e,if,non,null,the,shard,is,closed,or,the,listener,timed,out;void,accept,long,global,checkpoint,exception,e
GlobalCheckpointListeners -> GlobalCheckpointListener -> void accept(long globalCheckpoint, Exception e)_;1549399704;Callback when the global checkpoint is updated or the shard is closed. If the shard is closed, the value of the global checkpoint_will be set to {@link org.elasticsearch.index.seqno.SequenceNumbers#UNASSIGNED_SEQ_NO} and the exception will be non-null and an_instance of {@link IndexShardClosedException }. If the listener timed out waiting for notification then the exception will be_non-null and an instance of {@link TimeoutException}. If the global checkpoint is updated, the exception will be null.__@param globalCheckpoint the updated global checkpoint_@param e                if non-null, the shard is closed or the listener timed out;void accept(long globalCheckpoint, Exception e)_;callback,when,the,global,checkpoint,is,updated,or,the,shard,is,closed,if,the,shard,is,closed,the,value,of,the,global,checkpoint,will,be,set,to,link,org,elasticsearch,index,seqno,sequence,numbers,and,the,exception,will,be,non,null,and,an,instance,of,link,index,shard,closed,exception,if,the,listener,timed,out,waiting,for,notification,then,the,exception,will,be,non,null,and,an,instance,of,link,timeout,exception,if,the,global,checkpoint,is,updated,the,exception,will,be,null,param,global,checkpoint,the,updated,global,checkpoint,param,e,if,non,null,the,shard,is,closed,or,the,listener,timed,out;void,accept,long,global,checkpoint,exception,e
GlobalCheckpointListeners -> synchronized void globalCheckpointUpdated(final long globalCheckpoint);1534362961;Invoke to notify all registered listeners of an updated global checkpoint.__@param globalCheckpoint the updated global checkpoint;synchronized void globalCheckpointUpdated(final long globalCheckpoint) {_        assert globalCheckpoint >= NO_OPS_PERFORMED__        assert globalCheckpoint > lastKnownGlobalCheckpoint_                : "updated global checkpoint [" + globalCheckpoint + "]"_                + " is not more than the last known global checkpoint [" + lastKnownGlobalCheckpoint + "]"__        lastKnownGlobalCheckpoint = globalCheckpoint__        notifyListeners(globalCheckpoint, null)__    };invoke,to,notify,all,registered,listeners,of,an,updated,global,checkpoint,param,global,checkpoint,the,updated,global,checkpoint;synchronized,void,global,checkpoint,updated,final,long,global,checkpoint,assert,global,checkpoint,assert,global,checkpoint,last,known,global,checkpoint,updated,global,checkpoint,global,checkpoint,is,not,more,than,the,last,known,global,checkpoint,last,known,global,checkpoint,last,known,global,checkpoint,global,checkpoint,notify,listeners,global,checkpoint,null
GlobalCheckpointListeners -> synchronized void globalCheckpointUpdated(final long globalCheckpoint);1536828374;Invoke to notify all registered listeners of an updated global checkpoint.__@param globalCheckpoint the updated global checkpoint;synchronized void globalCheckpointUpdated(final long globalCheckpoint) {_        assert globalCheckpoint >= NO_OPS_PERFORMED__        assert globalCheckpoint > lastKnownGlobalCheckpoint_                : "updated global checkpoint [" + globalCheckpoint + "]"_                + " is not more than the last known global checkpoint [" + lastKnownGlobalCheckpoint + "]"__        lastKnownGlobalCheckpoint = globalCheckpoint__        notifyListeners(globalCheckpoint, null)__    };invoke,to,notify,all,registered,listeners,of,an,updated,global,checkpoint,param,global,checkpoint,the,updated,global,checkpoint;synchronized,void,global,checkpoint,updated,final,long,global,checkpoint,assert,global,checkpoint,assert,global,checkpoint,last,known,global,checkpoint,updated,global,checkpoint,global,checkpoint,is,not,more,than,the,last,known,global,checkpoint,last,known,global,checkpoint,last,known,global,checkpoint,global,checkpoint,notify,listeners,global,checkpoint,null
GlobalCheckpointListeners -> synchronized void globalCheckpointUpdated(final long globalCheckpoint);1536964057;Invoke to notify all registered listeners of an updated global checkpoint.__@param globalCheckpoint the updated global checkpoint;synchronized void globalCheckpointUpdated(final long globalCheckpoint) {_        assert globalCheckpoint >= NO_OPS_PERFORMED__        assert globalCheckpoint > lastKnownGlobalCheckpoint_                : "updated global checkpoint [" + globalCheckpoint + "]"_                + " is not more than the last known global checkpoint [" + lastKnownGlobalCheckpoint + "]"__        lastKnownGlobalCheckpoint = globalCheckpoint__        notifyListeners(globalCheckpoint, null)__    };invoke,to,notify,all,registered,listeners,of,an,updated,global,checkpoint,param,global,checkpoint,the,updated,global,checkpoint;synchronized,void,global,checkpoint,updated,final,long,global,checkpoint,assert,global,checkpoint,assert,global,checkpoint,last,known,global,checkpoint,updated,global,checkpoint,global,checkpoint,is,not,more,than,the,last,known,global,checkpoint,last,known,global,checkpoint,last,known,global,checkpoint,global,checkpoint,notify,listeners,global,checkpoint,null
GlobalCheckpointListeners -> synchronized void globalCheckpointUpdated(final long globalCheckpoint);1549399704;Invoke to notify all registered listeners of an updated global checkpoint.__@param globalCheckpoint the updated global checkpoint;synchronized void globalCheckpointUpdated(final long globalCheckpoint) {_        assert globalCheckpoint >= NO_OPS_PERFORMED__        assert globalCheckpoint > lastKnownGlobalCheckpoint_                : "updated global checkpoint [" + globalCheckpoint + "]"_                + " is not more than the last known global checkpoint [" + lastKnownGlobalCheckpoint + "]"__        lastKnownGlobalCheckpoint = globalCheckpoint__        notifyListeners(globalCheckpoint, null)__    };invoke,to,notify,all,registered,listeners,of,an,updated,global,checkpoint,param,global,checkpoint,the,updated,global,checkpoint;synchronized,void,global,checkpoint,updated,final,long,global,checkpoint,assert,global,checkpoint,assert,global,checkpoint,last,known,global,checkpoint,updated,global,checkpoint,global,checkpoint,is,not,more,than,the,last,known,global,checkpoint,last,known,global,checkpoint,last,known,global,checkpoint,global,checkpoint,notify,listeners,global,checkpoint,null
GlobalCheckpointListeners -> GlobalCheckpointListeners(             final ShardId shardId,             final Executor executor,             final ScheduledExecutorService scheduler,             final Logger logger);1536828374;Construct a global checkpoint listeners collection.__@param shardId   the shard ID on which global checkpoint updates can be listened to_@param executor  the executor for listener notifications_@param scheduler the executor used for scheduling timeouts_@param logger    a shard-level logger;GlobalCheckpointListeners(_            final ShardId shardId,_            final Executor executor,_            final ScheduledExecutorService scheduler,_            final Logger logger) {_        this.shardId = Objects.requireNonNull(shardId, "shardId")__        this.executor = Objects.requireNonNull(executor, "executor")__        this.scheduler = Objects.requireNonNull(scheduler, "scheduler")__        this.logger = Objects.requireNonNull(logger, "logger")__    };construct,a,global,checkpoint,listeners,collection,param,shard,id,the,shard,id,on,which,global,checkpoint,updates,can,be,listened,to,param,executor,the,executor,for,listener,notifications,param,scheduler,the,executor,used,for,scheduling,timeouts,param,logger,a,shard,level,logger;global,checkpoint,listeners,final,shard,id,shard,id,final,executor,executor,final,scheduled,executor,service,scheduler,final,logger,logger,this,shard,id,objects,require,non,null,shard,id,shard,id,this,executor,objects,require,non,null,executor,executor,this,scheduler,objects,require,non,null,scheduler,scheduler,this,logger,objects,require,non,null,logger,logger
GlobalCheckpointListeners -> GlobalCheckpointListeners(             final ShardId shardId,             final Executor executor,             final ScheduledExecutorService scheduler,             final Logger logger);1536964057;Construct a global checkpoint listeners collection.__@param shardId   the shard ID on which global checkpoint updates can be listened to_@param executor  the executor for listener notifications_@param scheduler the executor used for scheduling timeouts_@param logger    a shard-level logger;GlobalCheckpointListeners(_            final ShardId shardId,_            final Executor executor,_            final ScheduledExecutorService scheduler,_            final Logger logger) {_        this.shardId = Objects.requireNonNull(shardId, "shardId")__        this.executor = Objects.requireNonNull(executor, "executor")__        this.scheduler = Objects.requireNonNull(scheduler, "scheduler")__        this.logger = Objects.requireNonNull(logger, "logger")__    };construct,a,global,checkpoint,listeners,collection,param,shard,id,the,shard,id,on,which,global,checkpoint,updates,can,be,listened,to,param,executor,the,executor,for,listener,notifications,param,scheduler,the,executor,used,for,scheduling,timeouts,param,logger,a,shard,level,logger;global,checkpoint,listeners,final,shard,id,shard,id,final,executor,executor,final,scheduled,executor,service,scheduler,final,logger,logger,this,shard,id,objects,require,non,null,shard,id,shard,id,this,executor,objects,require,non,null,executor,executor,this,scheduler,objects,require,non,null,scheduler,scheduler,this,logger,objects,require,non,null,logger,logger
GlobalCheckpointListeners -> GlobalCheckpointListeners(             final ShardId shardId,             final Executor executor,             final ScheduledExecutorService scheduler,             final Logger logger);1549399704;Construct a global checkpoint listeners collection.__@param shardId   the shard ID on which global checkpoint updates can be listened to_@param executor  the executor for listener notifications_@param scheduler the executor used for scheduling timeouts_@param logger    a shard-level logger;GlobalCheckpointListeners(_            final ShardId shardId,_            final Executor executor,_            final ScheduledExecutorService scheduler,_            final Logger logger) {_        this.shardId = Objects.requireNonNull(shardId, "shardId")__        this.executor = Objects.requireNonNull(executor, "executor")__        this.scheduler = Objects.requireNonNull(scheduler, "scheduler")__        this.logger = Objects.requireNonNull(logger, "logger")__    };construct,a,global,checkpoint,listeners,collection,param,shard,id,the,shard,id,on,which,global,checkpoint,updates,can,be,listened,to,param,executor,the,executor,for,listener,notifications,param,scheduler,the,executor,used,for,scheduling,timeouts,param,logger,a,shard,level,logger;global,checkpoint,listeners,final,shard,id,shard,id,final,executor,executor,final,scheduled,executor,service,scheduler,final,logger,logger,this,shard,id,objects,require,non,null,shard,id,shard,id,this,executor,objects,require,non,null,executor,executor,this,scheduler,objects,require,non,null,scheduler,scheduler,this,logger,objects,require,non,null,logger,logger
