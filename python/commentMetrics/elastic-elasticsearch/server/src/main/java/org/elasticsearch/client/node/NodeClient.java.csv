# id;timestamp;commentText;codeText;commentWords;codeWords
NodeClient -> public <    Request extends ActionRequest,                 Response extends ActionResponse             > Task executeLocally(GenericAction<Request, Response> action, Request request, ActionListener<Response> listener);1524684173;Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}. Prefer this_method if you don't need access to the task when listening for the response. This is the method used to implement the {@link Client}_interface.;public <    Request extends ActionRequest,_                Response extends ActionResponse_            > Task executeLocally(GenericAction<Request, Response> action, Request request, ActionListener<Response> listener) {_        return transportAction(action).execute(request, listener)__    };execute,an,link,action,locally,returning,that,link,task,used,to,track,it,and,linking,an,link,action,listener,prefer,this,method,if,you,don,t,need,access,to,the,task,when,listening,for,the,response,this,is,the,method,used,to,implement,the,link,client,interface;public,request,extends,action,request,response,extends,action,response,task,execute,locally,generic,action,request,response,action,request,request,action,listener,response,listener,return,transport,action,action,execute,request,listener
NodeClient -> public <    Request extends ActionRequest,                 Response extends ActionResponse             > Task executeLocally(GenericAction<Request, Response> action, Request request, ActionListener<Response> listener);1527840262;Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}. Prefer this_method if you don't need access to the task when listening for the response. This is the method used to implement the {@link Client}_interface.;public <    Request extends ActionRequest,_                Response extends ActionResponse_            > Task executeLocally(GenericAction<Request, Response> action, Request request, ActionListener<Response> listener) {_        return transportAction(action).execute(request, listener)__    };execute,an,link,action,locally,returning,that,link,task,used,to,track,it,and,linking,an,link,action,listener,prefer,this,method,if,you,don,t,need,access,to,the,task,when,listening,for,the,response,this,is,the,method,used,to,implement,the,link,client,interface;public,request,extends,action,request,response,extends,action,response,task,execute,locally,generic,action,request,response,action,request,request,action,listener,response,listener,return,transport,action,action,execute,request,listener
NodeClient -> @SuppressWarnings("unchecked")     private <    Request extends ActionRequest,                 Response extends ActionResponse             > TransportAction<Request, Response> transportAction(Action<Response> action);1529433467;Get the {@link TransportAction} for an {@link Action}, throwing exceptions if the action isn't available.;@SuppressWarnings("unchecked")_    private <    Request extends ActionRequest,_                Response extends ActionResponse_            > TransportAction<Request, Response> transportAction(Action<Response> action) {_        if (actions == null) {_            throw new IllegalStateException("NodeClient has not been initialized")__        }_        TransportAction<Request, Response> transportAction = actions.get(action)__        if (transportAction == null) {_            throw new IllegalStateException("failed to find action [" + action + "] to execute")__        }_        return transportAction__    };get,the,link,transport,action,for,an,link,action,throwing,exceptions,if,the,action,isn,t,available;suppress,warnings,unchecked,private,request,extends,action,request,response,extends,action,response,transport,action,request,response,transport,action,action,response,action,if,actions,null,throw,new,illegal,state,exception,node,client,has,not,been,initialized,transport,action,request,response,transport,action,actions,get,action,if,transport,action,null,throw,new,illegal,state,exception,failed,to,find,action,action,to,execute,return,transport,action
NodeClient -> @SuppressWarnings("unchecked")     private <    Request extends ActionRequest,                 Response extends ActionResponse             > TransportAction<Request, Response> transportAction(Action<Response> action);1529600205;Get the {@link TransportAction} for an {@link Action}, throwing exceptions if the action isn't available.;@SuppressWarnings("unchecked")_    private <    Request extends ActionRequest,_                Response extends ActionResponse_            > TransportAction<Request, Response> transportAction(Action<Response> action) {_        if (actions == null) {_            throw new IllegalStateException("NodeClient has not been initialized")__        }_        TransportAction<Request, Response> transportAction = actions.get(action)__        if (transportAction == null) {_            throw new IllegalStateException("failed to find action [" + action + "] to execute")__        }_        return transportAction__    };get,the,link,transport,action,for,an,link,action,throwing,exceptions,if,the,action,isn,t,available;suppress,warnings,unchecked,private,request,extends,action,request,response,extends,action,response,transport,action,request,response,transport,action,action,response,action,if,actions,null,throw,new,illegal,state,exception,node,client,has,not,been,initialized,transport,action,request,response,transport,action,actions,get,action,if,transport,action,null,throw,new,illegal,state,exception,failed,to,find,action,action,to,execute,return,transport,action
NodeClient -> public String getLocalNodeId();1524684173;The id of the local {@link DiscoveryNode}. Useful for generating task ids from tasks returned by_{@link #executeLocally(GenericAction, ActionRequest, TaskListener)}.;public String getLocalNodeId() {_        return localNodeId.get()__    };the,id,of,the,local,link,discovery,node,useful,for,generating,task,ids,from,tasks,returned,by,link,execute,locally,generic,action,action,request,task,listener;public,string,get,local,node,id,return,local,node,id,get
NodeClient -> public String getLocalNodeId();1527840262;The id of the local {@link DiscoveryNode}. Useful for generating task ids from tasks returned by_{@link #executeLocally(GenericAction, ActionRequest, TaskListener)}.;public String getLocalNodeId() {_        return localNodeId.get()__    };the,id,of,the,local,link,discovery,node,useful,for,generating,task,ids,from,tasks,returned,by,link,execute,locally,generic,action,action,request,task,listener;public,string,get,local,node,id,return,local,node,id,get
NodeClient -> public String getLocalNodeId();1529433467;The id of the local {@link DiscoveryNode}. Useful for generating task ids from tasks returned by_{@link #executeLocally(Action, ActionRequest, TaskListener)}.;public String getLocalNodeId() {_        return localNodeId.get()__    };the,id,of,the,local,link,discovery,node,useful,for,generating,task,ids,from,tasks,returned,by,link,execute,locally,action,action,request,task,listener;public,string,get,local,node,id,return,local,node,id,get
NodeClient -> public String getLocalNodeId();1529600205;The id of the local {@link DiscoveryNode}. Useful for generating task ids from tasks returned by_{@link #executeLocally(Action, ActionRequest, TaskListener)}.;public String getLocalNodeId() {_        return localNodeId.get()__    };the,id,of,the,local,link,discovery,node,useful,for,generating,task,ids,from,tasks,returned,by,link,execute,locally,action,action,request,task,listener;public,string,get,local,node,id,return,local,node,id,get
NodeClient -> @SuppressWarnings("unchecked")     private <    Request extends ActionRequest,                 Response extends ActionResponse             > TransportAction<Request, Response> transportAction(GenericAction<Request, Response> action);1524684173;Get the {@link TransportAction} for an {@link Action}, throwing exceptions if the action isn't available.;@SuppressWarnings("unchecked")_    private <    Request extends ActionRequest,_                Response extends ActionResponse_            > TransportAction<Request, Response> transportAction(GenericAction<Request, Response> action) {_        if (actions == null) {_            throw new IllegalStateException("NodeClient has not been initialized")__        }_        TransportAction<Request, Response> transportAction = actions.get(action)__        if (transportAction == null) {_            throw new IllegalStateException("failed to find action [" + action + "] to execute")__        }_        return transportAction__    };get,the,link,transport,action,for,an,link,action,throwing,exceptions,if,the,action,isn,t,available;suppress,warnings,unchecked,private,request,extends,action,request,response,extends,action,response,transport,action,request,response,transport,action,generic,action,request,response,action,if,actions,null,throw,new,illegal,state,exception,node,client,has,not,been,initialized,transport,action,request,response,transport,action,actions,get,action,if,transport,action,null,throw,new,illegal,state,exception,failed,to,find,action,action,to,execute,return,transport,action
NodeClient -> @SuppressWarnings("unchecked")     private <    Request extends ActionRequest,                 Response extends ActionResponse             > TransportAction<Request, Response> transportAction(GenericAction<Request, Response> action);1527840262;Get the {@link TransportAction} for an {@link Action}, throwing exceptions if the action isn't available.;@SuppressWarnings("unchecked")_    private <    Request extends ActionRequest,_                Response extends ActionResponse_            > TransportAction<Request, Response> transportAction(GenericAction<Request, Response> action) {_        if (actions == null) {_            throw new IllegalStateException("NodeClient has not been initialized")__        }_        TransportAction<Request, Response> transportAction = actions.get(action)__        if (transportAction == null) {_            throw new IllegalStateException("failed to find action [" + action + "] to execute")__        }_        return transportAction__    };get,the,link,transport,action,for,an,link,action,throwing,exceptions,if,the,action,isn,t,available;suppress,warnings,unchecked,private,request,extends,action,request,response,extends,action,response,transport,action,request,response,transport,action,generic,action,request,response,action,if,actions,null,throw,new,illegal,state,exception,node,client,has,not,been,initialized,transport,action,request,response,transport,action,actions,get,action,if,transport,action,null,throw,new,illegal,state,exception,failed,to,find,action,action,to,execute,return,transport,action
NodeClient -> public <    Request extends ActionRequest,                 Response extends ActionResponse             > Task executeLocally(Action<Response> action, Request request, ActionListener<Response> listener);1529433467;Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}. Prefer this_method if you don't need access to the task when listening for the response. This is the method used to implement the {@link Client}_interface.;public <    Request extends ActionRequest,_                Response extends ActionResponse_            > Task executeLocally(Action<Response> action, Request request, ActionListener<Response> listener) {_        return transportAction(action).execute(request, listener)__    };execute,an,link,action,locally,returning,that,link,task,used,to,track,it,and,linking,an,link,action,listener,prefer,this,method,if,you,don,t,need,access,to,the,task,when,listening,for,the,response,this,is,the,method,used,to,implement,the,link,client,interface;public,request,extends,action,request,response,extends,action,response,task,execute,locally,action,response,action,request,request,action,listener,response,listener,return,transport,action,action,execute,request,listener
NodeClient -> public <    Request extends ActionRequest,                 Response extends ActionResponse             > Task executeLocally(Action<Response> action, Request request, ActionListener<Response> listener);1529600205;Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}. Prefer this_method if you don't need access to the task when listening for the response. This is the method used to implement the {@link Client}_interface.;public <    Request extends ActionRequest,_                Response extends ActionResponse_            > Task executeLocally(Action<Response> action, Request request, ActionListener<Response> listener) {_        return transportAction(action).execute(request, listener)__    };execute,an,link,action,locally,returning,that,link,task,used,to,track,it,and,linking,an,link,action,listener,prefer,this,method,if,you,don,t,need,access,to,the,task,when,listening,for,the,response,this,is,the,method,used,to,implement,the,link,client,interface;public,request,extends,action,request,response,extends,action,response,task,execute,locally,action,response,action,request,request,action,listener,response,listener,return,transport,action,action,execute,request,listener
NodeClient -> public <    Request extends ActionRequest,                 Response extends ActionResponse             > Task executeLocally(Action<Response> action, Request request, TaskListener<Response> listener);1529433467;Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}. Prefer this_method if you need access to the task when listening for the response.;public <    Request extends ActionRequest,_                Response extends ActionResponse_            > Task executeLocally(Action<Response> action, Request request, TaskListener<Response> listener) {_        return transportAction(action).execute(request, listener)__    };execute,an,link,action,locally,returning,that,link,task,used,to,track,it,and,linking,an,link,task,listener,prefer,this,method,if,you,need,access,to,the,task,when,listening,for,the,response;public,request,extends,action,request,response,extends,action,response,task,execute,locally,action,response,action,request,request,task,listener,response,listener,return,transport,action,action,execute,request,listener
NodeClient -> public <    Request extends ActionRequest,                 Response extends ActionResponse             > Task executeLocally(Action<Response> action, Request request, TaskListener<Response> listener);1529600205;Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}. Prefer this_method if you need access to the task when listening for the response.;public <    Request extends ActionRequest,_                Response extends ActionResponse_            > Task executeLocally(Action<Response> action, Request request, TaskListener<Response> listener) {_        return transportAction(action).execute(request, listener)__    };execute,an,link,action,locally,returning,that,link,task,used,to,track,it,and,linking,an,link,task,listener,prefer,this,method,if,you,need,access,to,the,task,when,listening,for,the,response;public,request,extends,action,request,response,extends,action,response,task,execute,locally,action,response,action,request,request,task,listener,response,listener,return,transport,action,action,execute,request,listener
NodeClient -> public <    Request extends ActionRequest,                 Response extends ActionResponse             > Task executeLocally(GenericAction<Request, Response> action, Request request, TaskListener<Response> listener);1524684173;Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}. Prefer this_method if you need access to the task when listening for the response.;public <    Request extends ActionRequest,_                Response extends ActionResponse_            > Task executeLocally(GenericAction<Request, Response> action, Request request, TaskListener<Response> listener) {_        return transportAction(action).execute(request, listener)__    };execute,an,link,action,locally,returning,that,link,task,used,to,track,it,and,linking,an,link,task,listener,prefer,this,method,if,you,need,access,to,the,task,when,listening,for,the,response;public,request,extends,action,request,response,extends,action,response,task,execute,locally,generic,action,request,response,action,request,request,task,listener,response,listener,return,transport,action,action,execute,request,listener
NodeClient -> public <    Request extends ActionRequest,                 Response extends ActionResponse             > Task executeLocally(GenericAction<Request, Response> action, Request request, TaskListener<Response> listener);1527840262;Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}. Prefer this_method if you need access to the task when listening for the response.;public <    Request extends ActionRequest,_                Response extends ActionResponse_            > Task executeLocally(GenericAction<Request, Response> action, Request request, TaskListener<Response> listener) {_        return transportAction(action).execute(request, listener)__    };execute,an,link,action,locally,returning,that,link,task,used,to,track,it,and,linking,an,link,task,listener,prefer,this,method,if,you,need,access,to,the,task,when,listening,for,the,response;public,request,extends,action,request,response,extends,action,response,task,execute,locally,generic,action,request,response,action,request,request,task,listener,response,listener,return,transport,action,action,execute,request,listener
