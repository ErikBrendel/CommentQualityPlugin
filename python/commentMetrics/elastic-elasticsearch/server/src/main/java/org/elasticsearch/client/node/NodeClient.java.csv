commented;modifiers;parameterAmount;loc;comment;code
false;public;3;6;;public void initialize(Map<Action, TransportAction> actions, Supplier<String> localNodeId, RemoteClusterService remoteClusterService) {     this.actions = actions.     this.localNodeId = localNodeId.     this.remoteClusterService = remoteClusterService. }
false;public;0;4;;@Override public void close() { // nothing really to do }
false;public;3;6;;@Override public <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {     // Discard the task because the Client interface doesn't use it.     executeLocally(action, request, listener). }
true;public;3;5;/**  * Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}. Prefer this  * method if you don't need access to the task when listening for the response. This is the method used to implement the {@link Client}  * interface.  */ ;/**  * Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}. Prefer this  * method if you don't need access to the task when listening for the response. This is the method used to implement the {@link Client}  * interface.  */ public <Request extends ActionRequest, Response extends ActionResponse> Task executeLocally(Action<Response> action, Request request, ActionListener<Response> listener) {     return transportAction(action).execute(request, listener). }
true;public;3;5;/**  * Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}. Prefer this  * method if you need access to the task when listening for the response.  */ ;/**  * Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}. Prefer this  * method if you need access to the task when listening for the response.  */ public <Request extends ActionRequest, Response extends ActionResponse> Task executeLocally(Action<Response> action, Request request, TaskListener<Response> listener) {     return transportAction(action).execute(request, listener). }
true;public;0;3;/**  * The id of the local {@link DiscoveryNode}. Useful for generating task ids from tasks returned by  * {@link #executeLocally(Action, ActionRequest, TaskListener)}.  */ ;/**  * The id of the local {@link DiscoveryNode}. Useful for generating task ids from tasks returned by  * {@link #executeLocally(Action, ActionRequest, TaskListener)}.  */ public String getLocalNodeId() {     return localNodeId.get(). }
true;private;1;13;/**  * Get the {@link TransportAction} for an {@link Action}, throwing exceptions if the action isn't available.  */ ;/**  * Get the {@link TransportAction} for an {@link Action}, throwing exceptions if the action isn't available.  */ @SuppressWarnings("unchecked") private <Request extends ActionRequest, Response extends ActionResponse> TransportAction<Request, Response> transportAction(Action<Response> action) {     if (actions == null) {         throw new IllegalStateException("NodeClient has not been initialized").     }     TransportAction<Request, Response> transportAction = actions.get(action).     if (transportAction == null) {         throw new IllegalStateException("failed to find action [" + action + "] to execute").     }     return transportAction. }
false;public;1;4;;@Override public Client getRemoteClusterClient(String clusterAlias) {     return remoteClusterService.getRemoteClusterClient(threadPool(), clusterAlias). }
