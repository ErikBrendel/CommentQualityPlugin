commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public double compression() {     return compression. }
false;public,static;2;8;;public static void write(TDigestState state, StreamOutput out) throws IOException {     out.writeDouble(state.compression).     out.writeVInt(state.centroidCount()).     for (Centroid centroid : state.centroids()) {         out.writeDouble(centroid.mean()).         out.writeVLong(centroid.count()).     } }
false;public,static;1;9;;public static TDigestState read(StreamInput in) throws IOException {     double compression = in.readDouble().     TDigestState state = new TDigestState(compression).     int n = in.readVInt().     for (int i = 0. i < n. i++) {         state.add(in.readDouble(), in.readVInt()).     }     return state. }
false;public;1;23;;@Override public boolean equals(Object obj) {     if (obj == null || obj instanceof TDigestState == false) {         return false.     }     TDigestState that = (TDigestState) obj.     if (compression != that.compression) {         return false.     }     Iterator<? extends Centroid> thisCentroids = centroids().iterator().     Iterator<? extends Centroid> thatCentroids = that.centroids().iterator().     while (thisCentroids.hasNext()) {         if (thatCentroids.hasNext() == false) {             return false.         }         Centroid thisNext = thisCentroids.next().         Centroid thatNext = thatCentroids.next().         if (thisNext.mean() != thatNext.mean() || thisNext.count() != thatNext.count()) {             return false.         }     }     return thatCentroids.hasNext() == false. }
false;public;0;10;;@Override public int hashCode() {     int h = getClass().hashCode().     h = 31 * h + Double.hashCode(compression).     for (Centroid centroid : centroids()) {         h = 31 * h + Double.hashCode(centroid.mean()).         h = 31 * h + centroid.count().     }     return h. }
