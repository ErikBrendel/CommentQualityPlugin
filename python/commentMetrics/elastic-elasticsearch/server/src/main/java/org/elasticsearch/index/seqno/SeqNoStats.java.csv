commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * the maximum sequence number seen so far  */ ;/**  * the maximum sequence number seen so far  */ public long getMaxSeqNo() {     return maxSeqNo. }
true;public;0;3;/**  * the maximum sequence number for which all previous operations (including) have been completed  */ ;/**  * the maximum sequence number for which all previous operations (including) have been completed  */ public long getLocalCheckpoint() {     return localCheckpoint. }
false;public;0;3;;public long getGlobalCheckpoint() {     return globalCheckpoint. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeZLong(maxSeqNo).     out.writeZLong(localCheckpoint).     out.writeZLong(globalCheckpoint). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(SEQ_NO).     builder.field(MAX_SEQ_NO, maxSeqNo).     builder.field(LOCAL_CHECKPOINT, localCheckpoint).     builder.field(GLOBAL_CHECKPOINT, globalCheckpoint).     builder.endObject().     return builder. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     final SeqNoStats that = (SeqNoStats) o.     return maxSeqNo == that.maxSeqNo && localCheckpoint == that.localCheckpoint && globalCheckpoint == that.globalCheckpoint. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(maxSeqNo, localCheckpoint, globalCheckpoint). }
false;public;0;8;;@Override public String toString() {     return "SeqNoStats{" + "maxSeqNo=" + maxSeqNo + ", localCheckpoint=" + localCheckpoint + ", globalCheckpoint=" + globalCheckpoint + '}'. }
