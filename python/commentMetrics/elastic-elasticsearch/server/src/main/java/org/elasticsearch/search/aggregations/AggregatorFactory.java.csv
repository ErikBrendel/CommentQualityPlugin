commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Class<?> getWrappedClass() {     return first.getClass(). }
false;public;0;4;;@Override public String name() {     return first.name(). }
false;public;0;4;;@Override public SearchContext context() {     return first.context(). }
false;public;0;4;;@Override public Aggregator parent() {     return first.parent(). }
false;public;0;4;;@Override public ScoreMode scoreMode() {     return first.scoreMode(). }
false;public;1;4;;@Override public Aggregator subAggregator(String name) {     throw new UnsupportedOperationException(). }
false;public;0;9;;@Override public void preCollection() throws IOException {     for (long i = 0. i < aggregators.size(). ++i) {         final Aggregator aggregator = aggregators.get(i).         if (aggregator != null) {             aggregator.preCollection().         }     } }
false;public;0;9;;@Override public void postCollection() throws IOException {     for (long i = 0. i < aggregators.size(). ++i) {         final Aggregator aggregator = aggregators.get(i).         if (aggregator != null) {             aggregator.postCollection().         }     } }
false;public;1;4;;@Override public void setScorer(Scorable scorer) throws IOException {     this.scorer = scorer. }
false;public;2;23;;@Override public void collect(int doc, long bucket) throws IOException {     collectors = bigArrays.grow(collectors, bucket + 1).     LeafBucketCollector collector = collectors.get(bucket).     if (collector == null) {         aggregators = bigArrays.grow(aggregators, bucket + 1).         Aggregator aggregator = aggregators.get(bucket).         if (aggregator == null) {             aggregator = factory.create(parent, true).             aggregator.preCollection().             aggregators.set(bucket, aggregator).         }         collector = aggregator.getLeafCollector(ctx).         if (scorer != null) {             // Passing a null scorer can cause unexpected NPE at a later time,             // which can't not be directly linked to the fact that a null scorer has been supplied.             collector.setScorer(scorer).         }         collectors.set(bucket, collector).     }     collector.collect(doc, 0). }
false;public;1;39;;@Override public LeafBucketCollector getLeafCollector(final LeafReaderContext ctx) {     for (long i = 0. i < collectors.size(). ++i) {         collectors.set(i, null).     }     return new LeafBucketCollector() {          Scorable scorer.          @Override         public void setScorer(Scorable scorer) throws IOException {             this.scorer = scorer.         }          @Override         public void collect(int doc, long bucket) throws IOException {             collectors = bigArrays.grow(collectors, bucket + 1).             LeafBucketCollector collector = collectors.get(bucket).             if (collector == null) {                 aggregators = bigArrays.grow(aggregators, bucket + 1).                 Aggregator aggregator = aggregators.get(bucket).                 if (aggregator == null) {                     aggregator = factory.create(parent, true).                     aggregator.preCollection().                     aggregators.set(bucket, aggregator).                 }                 collector = aggregator.getLeafCollector(ctx).                 if (scorer != null) {                     // Passing a null scorer can cause unexpected NPE at a later time,                     // which can't not be directly linked to the fact that a null scorer has been supplied.                     collector.setScorer(scorer).                 }                 collectors.set(bucket, collector).             }             collector.collect(doc, 0).         }     }. }
false;public;1;10;;@Override public InternalAggregation buildAggregation(long bucket) throws IOException {     if (bucket < aggregators.size()) {         Aggregator aggregator = aggregators.get(bucket).         if (aggregator != null) {             return aggregator.buildAggregation(0).         }     }     return buildEmptyAggregation(). }
false;public;0;4;;@Override public InternalAggregation buildEmptyAggregation() {     return first.buildEmptyAggregation(). }
false;public;0;4;;@Override public void close() {     Releasables.close(aggregators, collectors). }
false;public;0;3;;public String name() {     return name. }
false;public;0;2;;public void doValidate() { }
false;protected,abstract;4;2;;protected abstract Aggregator createInternal(Aggregator parent, boolean collectsFromSingleBucket, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException.
true;public,final;2;3;/**  * Creates the aggregator  *  * @param parent  *            The parent aggregator (if this is a top level factory, the  *            parent will be {@code null})  * @param collectsFromSingleBucket  *            If true then the created aggregator will only be collected  *            with {@code 0} as a bucket ordinal. Some factories can take  *            advantage of this in order to return more optimized  *            implementations.  *  * @return The created aggregator  */ ;/**  * Creates the aggregator  *  * @param parent  *            The parent aggregator (if this is a top level factory, the  *            parent will be {@code null})  * @param collectsFromSingleBucket  *            If true then the created aggregator will only be collected  *            with {@code 0} as a bucket ordinal. Some factories can take  *            advantage of this in order to return more optimized  *            implementations.  *  * @return The created aggregator  */ public final Aggregator create(Aggregator parent, boolean collectsFromSingleBucket) throws IOException {     return createInternal(parent, collectsFromSingleBucket, this.factories.createPipelineAggregators(), this.metaData). }
false;public;0;3;;public AggregatorFactory<?> getParent() {     return parent. }
true;protected,static;3;6;/**  * Utility method. Given an {@link AggregatorFactory} that creates  * {@link Aggregator}s that only know how to collect bucket {@code 0}, this  * returns an aggregator that can collect any bucket.  */ ;/**  * Utility method. Given an {@link AggregatorFactory} that creates  * {@link Aggregator}s that only know how to collect bucket {@code 0}, this  * returns an aggregator that can collect any bucket.  */ protected static Aggregator asMultiBucketAggregator(final AggregatorFactory<?> factory, final SearchContext context, final Aggregator parent) throws IOException {     final Aggregator first = factory.create(parent, true).     final BigArrays bigArrays = context.bigArrays().     return new MultiBucketAggregatorWrapper(bigArrays, context, parent, factory, first). }
