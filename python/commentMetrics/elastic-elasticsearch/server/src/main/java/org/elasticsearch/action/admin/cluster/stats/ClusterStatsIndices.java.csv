commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getIndexCount() {     return indexCount. }
false;public;0;3;;public ShardStats getShards() {     return this.shards. }
false;public;0;3;;public DocsStats getDocs() {     return docs. }
false;public;0;3;;public StoreStats getStore() {     return store. }
false;public;0;3;;public FieldDataStats getFieldData() {     return fieldData. }
false;public;0;3;;public QueryCacheStats getQueryCache() {     return queryCache. }
false;public;0;3;;public CompletionStats getCompletion() {     return completion. }
false;public;0;3;;public SegmentsStats getSegments() {     return segments. }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(Fields.COUNT, indexCount).     shards.toXContent(builder, params).     docs.toXContent(builder, params).     store.toXContent(builder, params).     fieldData.toXContent(builder, params).     queryCache.toXContent(builder, params).     completion.toXContent(builder, params).     segments.toXContent(builder, params).     return builder. }
true;public;0;3;/**  * number of indices in the cluster  */ ;/**  * number of indices in the cluster  */ public int getIndices() {     return this.indices. }
true;public;0;3;/**  * total number of shards in the cluster  */ ;/**  * total number of shards in the cluster  */ public int getTotal() {     return this.total. }
true;public;0;3;/**  * total number of primary shards in the cluster  */ ;/**  * total number of primary shards in the cluster  */ public int getPrimaries() {     return this.primaries. }
true;public;0;6;/**  * returns how many *redundant* copies of the data the cluster holds - running with no replicas will return 0  */ ;/**  * returns how many *redundant* copies of the data the cluster holds - running with no replicas will return 0  */ public double getReplication() {     if (primaries == 0) {         return 0.     }     return (((double) (total - primaries)) / primaries). }
true;public;0;3;/**  * the maximum number of shards (primary+replicas) an index has  */ ;/**  * the maximum number of shards (primary+replicas) an index has  */ public int getMaxIndexShards() {     return this.maxIndexShards. }
true;public;0;3;/**  * the minimum number of shards (primary+replicas) an index has  */ ;/**  * the minimum number of shards (primary+replicas) an index has  */ public int getMinIndexShards() {     return this.minIndexShards. }
true;public;0;6;/**  * average number of shards (primary+replicas) across the indices  */ ;/**  * average number of shards (primary+replicas) across the indices  */ public double getAvgIndexShards() {     if (this.indices == 0) {         return -1.     }     return ((double) this.total) / this.indices. }
true;public;0;3;/**  * the maximum number of primary shards an index has  */ ;/**  * the maximum number of primary shards an index has  */ public int getMaxIndexPrimaryShards() {     return this.maxIndexPrimaryShards. }
true;public;0;3;/**  * the minimum number of primary shards an index has  */ ;/**  * the minimum number of primary shards an index has  */ public int getMinIndexPrimaryShards() {     return this.minIndexPrimaryShards. }
true;public;0;6;/**  * the average number primary shards across the indices  */ ;/**  * the average number primary shards across the indices  */ public double getAvgIndexPrimaryShards() {     if (this.indices == 0) {         return -1.     }     return ((double) this.primaries) / this.indices. }
true;public;0;3;/**  * minimum replication factor across the indices. See {@link #getReplication}  */ ;/**  * minimum replication factor across the indices. See {@link #getReplication}  */ public double getMinIndexReplication() {     return this.minIndexReplication. }
true;public;0;6;/**  * average replication factor across the indices. See {@link #getReplication}  */ ;/**  * average replication factor across the indices. See {@link #getReplication}  */ public double getAvgIndexReplication() {     if (indices == 0) {         return -1.     }     return this.totalIndexReplication / this.indices. }
true;public;0;3;/**  * maximum replication factor across the indices. See {@link #getReplication}  */ ;/**  * maximum replication factor across the indices. See {@link #getReplication}  */ public double getMaxIndexReplication() {     return this.maxIndexReplication. }
false;public;1;23;;public void addIndexShardCount(ShardStats indexShardCount) {     this.indices++.     this.primaries += indexShardCount.primaries.     this.total += indexShardCount.total.     this.totalIndexReplication += indexShardCount.getReplication().     if (this.indices == 1) {         // first index, uninitialized.         minIndexPrimaryShards = indexShardCount.primaries.         maxIndexPrimaryShards = indexShardCount.primaries.         minIndexShards = indexShardCount.total.         maxIndexShards = indexShardCount.total.         minIndexReplication = indexShardCount.getReplication().         maxIndexReplication = minIndexReplication.     } else {         minIndexShards = Math.min(minIndexShards, indexShardCount.total).         minIndexPrimaryShards = Math.min(minIndexPrimaryShards, indexShardCount.primaries).         minIndexReplication = Math.min(minIndexReplication, indexShardCount.getReplication()).         maxIndexShards = Math.max(maxIndexShards, indexShardCount.total).         maxIndexPrimaryShards = Math.max(maxIndexPrimaryShards, indexShardCount.primaries).         maxIndexReplication = Math.max(maxIndexReplication, indexShardCount.getReplication()).     } }
false;private;5;7;;private void addIntMinMax(String field, int min, int max, double avg, XContentBuilder builder) throws IOException {     builder.startObject(field).     builder.field(Fields.MIN, min).     builder.field(Fields.MAX, max).     builder.field(Fields.AVG, avg).     builder.endObject(). }
false;private;5;7;;private void addDoubleMinMax(String field, double min, double max, double avg, XContentBuilder builder) throws IOException {     builder.startObject(field).     builder.field(Fields.MIN, min).     builder.field(Fields.MAX, max).     builder.field(Fields.AVG, avg).     builder.endObject(). }
false;public;2;18;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.SHARDS).     if (indices > 0) {         builder.field(Fields.TOTAL, total).         builder.field(Fields.PRIMARIES, primaries).         builder.field(Fields.REPLICATION, getReplication()).         builder.startObject(Fields.INDEX).         addIntMinMax(Fields.SHARDS, minIndexShards, maxIndexShards, getAvgIndexShards(), builder).         addIntMinMax(Fields.PRIMARIES, minIndexPrimaryShards, maxIndexPrimaryShards, getAvgIndexPrimaryShards(), builder).         addDoubleMinMax(Fields.REPLICATION, minIndexReplication, maxIndexReplication, getAvgIndexReplication(), builder).         builder.endObject().     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public String toString() {     return "total [" + total + "] primaries [" + primaries + "]". }
