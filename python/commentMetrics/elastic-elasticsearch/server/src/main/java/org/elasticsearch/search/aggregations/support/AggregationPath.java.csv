# id;timestamp;commentText;codeText;commentWords;codeWords
AggregationPath -> public Aggregator resolveAggregator(Aggregator root);1524684173;Resolves the aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The aggregator pointed by this path starting from the given aggregator as a point of reference;public Aggregator resolveAggregator(Aggregator root) {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            aggregator = aggregator.subAggregator(token.name)__            assert (aggregator instanceof SingleBucketAggregator && i <= pathElements.size() - 1)_                    || (aggregator instanceof NumericMetricsAggregator && i == pathElements.size() - 1) :_                    "this should be picked up before aggregation execution - on validate"__        }_        return aggregator__    };resolves,the,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,aggregator,pointed,by,this,path,starting,from,the,given,aggregator,as,a,point,of,reference;public,aggregator,resolve,aggregator,aggregator,root,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregator,aggregator,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,i,path,elements,size,1,aggregator,instanceof,numeric,metrics,aggregator,i,path,elements,size,1,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveAggregator(Aggregator root);1525334055;Resolves the aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The aggregator pointed by this path starting from the given aggregator as a point of reference;public Aggregator resolveAggregator(Aggregator root) {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            aggregator = aggregator.subAggregator(token.name)__            assert (aggregator instanceof SingleBucketAggregator && i <= pathElements.size() - 1)_                    || (aggregator instanceof NumericMetricsAggregator && i == pathElements.size() - 1) :_                    "this should be picked up before aggregation execution - on validate"__        }_        return aggregator__    };resolves,the,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,aggregator,pointed,by,this,path,starting,from,the,given,aggregator,as,a,point,of,reference;public,aggregator,resolve,aggregator,aggregator,root,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregator,aggregator,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,i,path,elements,size,1,aggregator,instanceof,numeric,metrics,aggregator,i,path,elements,size,1,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveAggregator(Aggregator root);1531179852;Resolves the aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The aggregator pointed by this path starting from the given aggregator as a point of reference;public Aggregator resolveAggregator(Aggregator root) {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            aggregator = ProfilingAggregator.unwrap(aggregator.subAggregator(token.name))__            assert (aggregator instanceof SingleBucketAggregator && i <= pathElements.size() - 1)_                    || (aggregator instanceof NumericMetricsAggregator && i == pathElements.size() - 1) :_                    "this should be picked up before aggregation execution - on validate"__        }_        return aggregator__    };resolves,the,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,aggregator,pointed,by,this,path,starting,from,the,given,aggregator,as,a,point,of,reference;public,aggregator,resolve,aggregator,aggregator,root,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregator,profiling,aggregator,unwrap,aggregator,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,i,path,elements,size,1,aggregator,instanceof,numeric,metrics,aggregator,i,path,elements,size,1,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveAggregator(Aggregator root);1533230566;Resolves the aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The aggregator pointed by this path starting from the given aggregator as a point of reference;public Aggregator resolveAggregator(Aggregator root) {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            aggregator = ProfilingAggregator.unwrap(aggregator.subAggregator(token.name))__            assert (aggregator instanceof SingleBucketAggregator && i <= pathElements.size() - 1)_                    || (aggregator instanceof NumericMetricsAggregator && i == pathElements.size() - 1) :_                    "this should be picked up before aggregation execution - on validate"__        }_        return aggregator__    };resolves,the,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,aggregator,pointed,by,this,path,starting,from,the,given,aggregator,as,a,point,of,reference;public,aggregator,resolve,aggregator,aggregator,root,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregator,profiling,aggregator,unwrap,aggregator,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,i,path,elements,size,1,aggregator,instanceof,numeric,metrics,aggregator,i,path,elements,size,1,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveAggregator(Aggregator root);1544110272;Resolves the aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The aggregator pointed by this path starting from the given aggregator as a point of reference;public Aggregator resolveAggregator(Aggregator root) {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            aggregator = ProfilingAggregator.unwrap(aggregator.subAggregator(token.name))__            assert (aggregator instanceof SingleBucketAggregator && i <= pathElements.size() - 1)_                    || (aggregator instanceof NumericMetricsAggregator && i == pathElements.size() - 1) :_                    "this should be picked up before aggregation execution - on validate"__        }_        return aggregator__    };resolves,the,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,aggregator,pointed,by,this,path,starting,from,the,given,aggregator,as,a,point,of,reference;public,aggregator,resolve,aggregator,aggregator,root,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregator,profiling,aggregator,unwrap,aggregator,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,i,path,elements,size,1,aggregator,instanceof,numeric,metrics,aggregator,i,path,elements,size,1,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveTopmostAggregator(Aggregator root);1524684173;Resolves the topmost aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The first child aggregator of the root pointed by this path;public Aggregator resolveTopmostAggregator(Aggregator root) {_        AggregationPath.PathElement token = pathElements.get(0)__        Aggregator aggregator = root.subAggregator(token.name)__        assert (aggregator instanceof SingleBucketAggregator )_                || (aggregator instanceof NumericMetricsAggregator) : "this should be picked up before aggregation execution - on validate"__        return aggregator__    };resolves,the,topmost,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,first,child,aggregator,of,the,root,pointed,by,this,path;public,aggregator,resolve,topmost,aggregator,aggregator,root,aggregation,path,path,element,token,path,elements,get,0,aggregator,aggregator,root,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,aggregator,instanceof,numeric,metrics,aggregator,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveTopmostAggregator(Aggregator root);1525334055;Resolves the topmost aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The first child aggregator of the root pointed by this path;public Aggregator resolveTopmostAggregator(Aggregator root) {_        AggregationPath.PathElement token = pathElements.get(0)__        Aggregator aggregator = root.subAggregator(token.name)__        assert (aggregator instanceof SingleBucketAggregator )_                || (aggregator instanceof NumericMetricsAggregator) : "this should be picked up before aggregation execution - on validate"__        return aggregator__    };resolves,the,topmost,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,first,child,aggregator,of,the,root,pointed,by,this,path;public,aggregator,resolve,topmost,aggregator,aggregator,root,aggregation,path,path,element,token,path,elements,get,0,aggregator,aggregator,root,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,aggregator,instanceof,numeric,metrics,aggregator,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveTopmostAggregator(Aggregator root);1531179852;Resolves the topmost aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The first child aggregator of the root pointed by this path;public Aggregator resolveTopmostAggregator(Aggregator root) {_        AggregationPath.PathElement token = pathElements.get(0)__        Aggregator aggregator = ProfilingAggregator.unwrap(root.subAggregator(token.name))__        assert (aggregator instanceof SingleBucketAggregator )_                || (aggregator instanceof NumericMetricsAggregator) : "this should be picked up before aggregation execution - on validate"__        return aggregator__    };resolves,the,topmost,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,first,child,aggregator,of,the,root,pointed,by,this,path;public,aggregator,resolve,topmost,aggregator,aggregator,root,aggregation,path,path,element,token,path,elements,get,0,aggregator,aggregator,profiling,aggregator,unwrap,root,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,aggregator,instanceof,numeric,metrics,aggregator,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveTopmostAggregator(Aggregator root);1533230566;Resolves the topmost aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The first child aggregator of the root pointed by this path;public Aggregator resolveTopmostAggregator(Aggregator root) {_        AggregationPath.PathElement token = pathElements.get(0)__        Aggregator aggregator = ProfilingAggregator.unwrap(root.subAggregator(token.name))__        assert (aggregator instanceof SingleBucketAggregator )_                || (aggregator instanceof NumericMetricsAggregator) : "this should be picked up before aggregation execution - on validate"__        return aggregator__    };resolves,the,topmost,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,first,child,aggregator,of,the,root,pointed,by,this,path;public,aggregator,resolve,topmost,aggregator,aggregator,root,aggregation,path,path,element,token,path,elements,get,0,aggregator,aggregator,profiling,aggregator,unwrap,root,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,aggregator,instanceof,numeric,metrics,aggregator,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public Aggregator resolveTopmostAggregator(Aggregator root);1544110272;Resolves the topmost aggregator pointed by this path using the given root as a point of reference.__@param root      The point of reference of this path_@return          The first child aggregator of the root pointed by this path;public Aggregator resolveTopmostAggregator(Aggregator root) {_        AggregationPath.PathElement token = pathElements.get(0)__        Aggregator aggregator = ProfilingAggregator.unwrap(root.subAggregator(token.name))__        assert (aggregator instanceof SingleBucketAggregator )_                || (aggregator instanceof NumericMetricsAggregator) : "this should be picked up before aggregation execution - on validate"__        return aggregator__    };resolves,the,topmost,aggregator,pointed,by,this,path,using,the,given,root,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,return,the,first,child,aggregator,of,the,root,pointed,by,this,path;public,aggregator,resolve,topmost,aggregator,aggregator,root,aggregation,path,path,element,token,path,elements,get,0,aggregator,aggregator,profiling,aggregator,unwrap,root,sub,aggregator,token,name,assert,aggregator,instanceof,single,bucket,aggregator,aggregator,instanceof,numeric,metrics,aggregator,this,should,be,picked,up,before,aggregation,execution,on,validate,return,aggregator
AggregationPath -> public void validate(Aggregator root) throws AggregationExecutionException;1524684173;Validates this path over the given aggregator as a point of reference.__@param root The point of reference of this path_@throws AggregationExecutionException on validation error;public void validate(Aggregator root) throws AggregationExecutionException {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            aggregator = aggregator.subAggregator(pathElements.get(i).name)__            if (aggregator == null) {_                throw new AggregationExecutionException("Invalid aggregator order path [" + this + "]. Unknown aggregation ["_                        + pathElements.get(i).name + "]")__            }_            if (i < pathElements.size() - 1) {__                __                if (!(aggregator instanceof SingleBucketAggregator)) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a final " +_                            "single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }__                if (pathElements.get(i).key != null) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a " +_                            "final single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }_            }_        }_        boolean singleBucket = aggregator instanceof SingleBucketAggregator__        if (!singleBucket && !(aggregator instanceof NumericMetricsAggregator)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Buckets can only be sorted on a sub-aggregator path " +_                    "that is built out of zero or more single-bucket aggregations within the path and a final " +_                    "single-bucket or a metrics aggregation at the path end.")__        }__        AggregationPath.PathElement lastToken = lastPathElement()___        if (singleBucket) {_            if (lastToken.key != null && !"doc_count".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-bucket aggregation can only be done on its doc_count. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"doc_count\" (a la \"" + lastToken.name + ".doc_count\")")__            }_            return_   _        }__        if (aggregator instanceof NumericMetricsAggregator.SingleValue) {_            if (lastToken.key != null && !"value".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-value metrics aggregation can only be done on its value. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"value\" (a la \"" + lastToken.name + ".value\")")__            }_            return_   _        }__        _        if (lastToken.key == null) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. When ordering on a multi-value metrics aggregation a metric name must be specified")__        }__        if (!((NumericMetricsAggregator.MultiValue) aggregator).hasMetric(lastToken.key)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Unknown metric name [" + lastToken.key + "] on multi-value metrics aggregation [" + lastToken.name + "]")__        }_    };validates,this,path,over,the,given,aggregator,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,throws,aggregation,execution,exception,on,validation,error;public,void,validate,aggregator,root,throws,aggregation,execution,exception,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,aggregator,aggregator,sub,aggregator,path,elements,get,i,name,if,aggregator,null,throw,new,aggregation,execution,exception,invalid,aggregator,order,path,this,unknown,aggregation,path,elements,get,i,name,if,i,path,elements,size,1,if,aggregator,instanceof,single,bucket,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,if,path,elements,get,i,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,boolean,single,bucket,aggregator,instanceof,single,bucket,aggregator,if,single,bucket,aggregator,instanceof,numeric,metrics,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,aggregation,path,path,element,last,token,last,path,element,if,single,bucket,if,last,token,key,null,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,bucket,aggregation,can,only,be,done,on,its,either,drop,the,key,a,la,last,token,name,or,change,it,to,a,la,last,token,name,return,if,aggregator,instanceof,numeric,metrics,aggregator,single,value,if,last,token,key,null,value,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,value,metrics,aggregation,can,only,be,done,on,its,value,either,drop,the,key,a,la,last,token,name,or,change,it,to,value,a,la,last,token,name,value,return,if,last,token,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,when,ordering,on,a,multi,value,metrics,aggregation,a,metric,name,must,be,specified,if,numeric,metrics,aggregator,multi,value,aggregator,has,metric,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,unknown,metric,name,last,token,key,on,multi,value,metrics,aggregation,last,token,name
AggregationPath -> public void validate(Aggregator root) throws AggregationExecutionException;1525334055;Validates this path over the given aggregator as a point of reference.__@param root The point of reference of this path_@throws AggregationExecutionException on validation error;public void validate(Aggregator root) throws AggregationExecutionException {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            aggregator = aggregator.subAggregator(pathElements.get(i).name)__            if (aggregator == null) {_                throw new AggregationExecutionException("Invalid aggregator order path [" + this + "]. Unknown aggregation ["_                        + pathElements.get(i).name + "]")__            }_            if (i < pathElements.size() - 1) {__                __                if (!(aggregator instanceof SingleBucketAggregator)) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a final " +_                            "single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }__                if (pathElements.get(i).key != null) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a " +_                            "final single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }_            }_        }_        boolean singleBucket = aggregator instanceof SingleBucketAggregator__        if (!singleBucket && !(aggregator instanceof NumericMetricsAggregator)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Buckets can only be sorted on a sub-aggregator path " +_                    "that is built out of zero or more single-bucket aggregations within the path and a final " +_                    "single-bucket or a metrics aggregation at the path end.")__        }__        AggregationPath.PathElement lastToken = lastPathElement()___        if (singleBucket) {_            if (lastToken.key != null && !"doc_count".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-bucket aggregation can only be done on its doc_count. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"doc_count\" (a la \"" + lastToken.name + ".doc_count\")")__            }_            return_   _        }__        if (aggregator instanceof NumericMetricsAggregator.SingleValue) {_            if (lastToken.key != null && !"value".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-value metrics aggregation can only be done on its value. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"value\" (a la \"" + lastToken.name + ".value\")")__            }_            return_   _        }__        _        if (lastToken.key == null) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. When ordering on a multi-value metrics aggregation a metric name must be specified")__        }__        if (!((NumericMetricsAggregator.MultiValue) aggregator).hasMetric(lastToken.key)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Unknown metric name [" + lastToken.key + "] on multi-value metrics aggregation [" + lastToken.name + "]")__        }_    };validates,this,path,over,the,given,aggregator,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,throws,aggregation,execution,exception,on,validation,error;public,void,validate,aggregator,root,throws,aggregation,execution,exception,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,aggregator,aggregator,sub,aggregator,path,elements,get,i,name,if,aggregator,null,throw,new,aggregation,execution,exception,invalid,aggregator,order,path,this,unknown,aggregation,path,elements,get,i,name,if,i,path,elements,size,1,if,aggregator,instanceof,single,bucket,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,if,path,elements,get,i,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,boolean,single,bucket,aggregator,instanceof,single,bucket,aggregator,if,single,bucket,aggregator,instanceof,numeric,metrics,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,aggregation,path,path,element,last,token,last,path,element,if,single,bucket,if,last,token,key,null,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,bucket,aggregation,can,only,be,done,on,its,either,drop,the,key,a,la,last,token,name,or,change,it,to,a,la,last,token,name,return,if,aggregator,instanceof,numeric,metrics,aggregator,single,value,if,last,token,key,null,value,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,value,metrics,aggregation,can,only,be,done,on,its,value,either,drop,the,key,a,la,last,token,name,or,change,it,to,value,a,la,last,token,name,value,return,if,last,token,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,when,ordering,on,a,multi,value,metrics,aggregation,a,metric,name,must,be,specified,if,numeric,metrics,aggregator,multi,value,aggregator,has,metric,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,unknown,metric,name,last,token,key,on,multi,value,metrics,aggregation,last,token,name
AggregationPath -> public void validate(Aggregator root) throws AggregationExecutionException;1531179852;Validates this path over the given aggregator as a point of reference.__@param root The point of reference of this path_@throws AggregationExecutionException on validation error;public void validate(Aggregator root) throws AggregationExecutionException {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            aggregator = ProfilingAggregator.unwrap(aggregator.subAggregator(pathElements.get(i).name))__            if (aggregator == null) {_                throw new AggregationExecutionException("Invalid aggregator order path [" + this + "]. Unknown aggregation ["_                        + pathElements.get(i).name + "]")__            }_            if (i < pathElements.size() - 1) {__                __                if (!(aggregator instanceof SingleBucketAggregator)) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a final " +_                            "single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }__                if (pathElements.get(i).key != null) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a " +_                            "final single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }_            }_        }_        boolean singleBucket = aggregator instanceof SingleBucketAggregator__        if (!singleBucket && !(aggregator instanceof NumericMetricsAggregator)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Buckets can only be sorted on a sub-aggregator path " +_                    "that is built out of zero or more single-bucket aggregations within the path and a final " +_                    "single-bucket or a metrics aggregation at the path end.")__        }__        AggregationPath.PathElement lastToken = lastPathElement()___        if (singleBucket) {_            if (lastToken.key != null && !"doc_count".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-bucket aggregation can only be done on its doc_count. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"doc_count\" (a la \"" + lastToken.name + ".doc_count\")")__            }_            return_   _        }__        if (aggregator instanceof NumericMetricsAggregator.SingleValue) {_            if (lastToken.key != null && !"value".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-value metrics aggregation can only be done on its value. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"value\" (a la \"" + lastToken.name + ".value\")")__            }_            return_   _        }__        _        if (lastToken.key == null) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. When ordering on a multi-value metrics aggregation a metric name must be specified")__        }__        if (!((NumericMetricsAggregator.MultiValue) aggregator).hasMetric(lastToken.key)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Unknown metric name [" + lastToken.key + "] on multi-value metrics aggregation [" + lastToken.name + "]")__        }_    };validates,this,path,over,the,given,aggregator,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,throws,aggregation,execution,exception,on,validation,error;public,void,validate,aggregator,root,throws,aggregation,execution,exception,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,aggregator,profiling,aggregator,unwrap,aggregator,sub,aggregator,path,elements,get,i,name,if,aggregator,null,throw,new,aggregation,execution,exception,invalid,aggregator,order,path,this,unknown,aggregation,path,elements,get,i,name,if,i,path,elements,size,1,if,aggregator,instanceof,single,bucket,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,if,path,elements,get,i,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,boolean,single,bucket,aggregator,instanceof,single,bucket,aggregator,if,single,bucket,aggregator,instanceof,numeric,metrics,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,aggregation,path,path,element,last,token,last,path,element,if,single,bucket,if,last,token,key,null,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,bucket,aggregation,can,only,be,done,on,its,either,drop,the,key,a,la,last,token,name,or,change,it,to,a,la,last,token,name,return,if,aggregator,instanceof,numeric,metrics,aggregator,single,value,if,last,token,key,null,value,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,value,metrics,aggregation,can,only,be,done,on,its,value,either,drop,the,key,a,la,last,token,name,or,change,it,to,value,a,la,last,token,name,value,return,if,last,token,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,when,ordering,on,a,multi,value,metrics,aggregation,a,metric,name,must,be,specified,if,numeric,metrics,aggregator,multi,value,aggregator,has,metric,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,unknown,metric,name,last,token,key,on,multi,value,metrics,aggregation,last,token,name
AggregationPath -> public void validate(Aggregator root) throws AggregationExecutionException;1533230566;Validates this path over the given aggregator as a point of reference.__@param root The point of reference of this path_@throws AggregationExecutionException on validation error;public void validate(Aggregator root) throws AggregationExecutionException {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            String name = pathElements.get(i).name__            aggregator = ProfilingAggregator.unwrap(aggregator.subAggregator(name))__            if (aggregator == null) {_                throw new AggregationExecutionException("Invalid aggregator order path [" + this + "]. The " +_                    "provided aggregation [" + name + "] either does not exist, or is a pipeline aggregation " +_                    "and cannot be used to sort the buckets.")__            }__            if (i < pathElements.size() - 1) {__                __                if (!(aggregator instanceof SingleBucketAggregator)) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a final " +_                            "single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }__                if (pathElements.get(i).key != null) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a " +_                            "final single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }_            }_        }_        boolean singleBucket = aggregator instanceof SingleBucketAggregator__        if (!singleBucket && !(aggregator instanceof NumericMetricsAggregator)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Buckets can only be sorted on a sub-aggregator path " +_                    "that is built out of zero or more single-bucket aggregations within the path and a final " +_                    "single-bucket or a metrics aggregation at the path end.")__        }__        AggregationPath.PathElement lastToken = lastPathElement()___        if (singleBucket) {_            if (lastToken.key != null && !"doc_count".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-bucket aggregation can only be done on its doc_count. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"doc_count\" (a la \"" + lastToken.name + ".doc_count\")")__            }_            return_   _        }__        if (aggregator instanceof NumericMetricsAggregator.SingleValue) {_            if (lastToken.key != null && !"value".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-value metrics aggregation can only be done on its value. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"value\" (a la \"" + lastToken.name + ".value\")")__            }_            return_   _        }__        _        if (lastToken.key == null) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. When ordering on a multi-value metrics aggregation a metric name must be specified")__        }__        if (!((NumericMetricsAggregator.MultiValue) aggregator).hasMetric(lastToken.key)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Unknown metric name [" + lastToken.key + "] on multi-value metrics aggregation [" + lastToken.name + "]")__        }_    };validates,this,path,over,the,given,aggregator,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,throws,aggregation,execution,exception,on,validation,error;public,void,validate,aggregator,root,throws,aggregation,execution,exception,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,string,name,path,elements,get,i,name,aggregator,profiling,aggregator,unwrap,aggregator,sub,aggregator,name,if,aggregator,null,throw,new,aggregation,execution,exception,invalid,aggregator,order,path,this,the,provided,aggregation,name,either,does,not,exist,or,is,a,pipeline,aggregation,and,cannot,be,used,to,sort,the,buckets,if,i,path,elements,size,1,if,aggregator,instanceof,single,bucket,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,if,path,elements,get,i,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,boolean,single,bucket,aggregator,instanceof,single,bucket,aggregator,if,single,bucket,aggregator,instanceof,numeric,metrics,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,aggregation,path,path,element,last,token,last,path,element,if,single,bucket,if,last,token,key,null,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,bucket,aggregation,can,only,be,done,on,its,either,drop,the,key,a,la,last,token,name,or,change,it,to,a,la,last,token,name,return,if,aggregator,instanceof,numeric,metrics,aggregator,single,value,if,last,token,key,null,value,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,value,metrics,aggregation,can,only,be,done,on,its,value,either,drop,the,key,a,la,last,token,name,or,change,it,to,value,a,la,last,token,name,value,return,if,last,token,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,when,ordering,on,a,multi,value,metrics,aggregation,a,metric,name,must,be,specified,if,numeric,metrics,aggregator,multi,value,aggregator,has,metric,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,unknown,metric,name,last,token,key,on,multi,value,metrics,aggregation,last,token,name
AggregationPath -> public void validate(Aggregator root) throws AggregationExecutionException;1544110272;Validates this path over the given aggregator as a point of reference.__@param root The point of reference of this path_@throws AggregationExecutionException on validation error;public void validate(Aggregator root) throws AggregationExecutionException {_        Aggregator aggregator = root__        for (int i = 0_ i < pathElements.size()_ i++) {_            String name = pathElements.get(i).name__            aggregator = ProfilingAggregator.unwrap(aggregator.subAggregator(name))__            if (aggregator == null) {_                throw new AggregationExecutionException("Invalid aggregator order path [" + this + "]. The " +_                    "provided aggregation [" + name + "] either does not exist, or is a pipeline aggregation " +_                    "and cannot be used to sort the buckets.")__            }__            if (i < pathElements.size() - 1) {__                __                if (!(aggregator instanceof SingleBucketAggregator)) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a final " +_                            "single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }__                if (pathElements.get(i).key != null) {_                    throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                            "]. Buckets can only be sorted on a sub-aggregator path " +_                            "that is built out of zero or more single-bucket aggregations within the path and a " +_                            "final single-bucket or a metrics aggregation at the path end. Sub-path [" +_                            subPath(0, i + 1) + "] points to non single-bucket aggregation")__                }_            }_        }_        boolean singleBucket = aggregator instanceof SingleBucketAggregator__        if (!singleBucket && !(aggregator instanceof NumericMetricsAggregator)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Buckets can only be sorted on a sub-aggregator path " +_                    "that is built out of zero or more single-bucket aggregations within the path and a final " +_                    "single-bucket or a metrics aggregation at the path end.")__        }__        AggregationPath.PathElement lastToken = lastPathElement()___        if (singleBucket) {_            if (lastToken.key != null && !"doc_count".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-bucket aggregation can only be done on its doc_count. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"doc_count\" (a la \"" + lastToken.name +_                        ".doc_count\")")__            }_            return_   _        }__        if (aggregator instanceof NumericMetricsAggregator.SingleValue) {_            if (lastToken.key != null && !"value".equals(lastToken.key)) {_                throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                        "]. Ordering on a single-value metrics aggregation can only be done on its value. " +_                        "Either drop the key (a la \"" + lastToken.name + "\") or change it to \"value\" (a la \"" + lastToken.name +_                        ".value\")")__            }_            return_   _        }__        _        if (lastToken.key == null) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. When ordering on a multi-value metrics aggregation a metric name must be specified")__        }__        if (!((NumericMetricsAggregator.MultiValue) aggregator).hasMetric(lastToken.key)) {_            throw new AggregationExecutionException("Invalid aggregation order path [" + this +_                    "]. Unknown metric name [" + lastToken.key + "] on multi-value metrics aggregation [" + lastToken.name + "]")__        }_    };validates,this,path,over,the,given,aggregator,as,a,point,of,reference,param,root,the,point,of,reference,of,this,path,throws,aggregation,execution,exception,on,validation,error;public,void,validate,aggregator,root,throws,aggregation,execution,exception,aggregator,aggregator,root,for,int,i,0,i,path,elements,size,i,string,name,path,elements,get,i,name,aggregator,profiling,aggregator,unwrap,aggregator,sub,aggregator,name,if,aggregator,null,throw,new,aggregation,execution,exception,invalid,aggregator,order,path,this,the,provided,aggregation,name,either,does,not,exist,or,is,a,pipeline,aggregation,and,cannot,be,used,to,sort,the,buckets,if,i,path,elements,size,1,if,aggregator,instanceof,single,bucket,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,if,path,elements,get,i,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,sub,path,sub,path,0,i,1,points,to,non,single,bucket,aggregation,boolean,single,bucket,aggregator,instanceof,single,bucket,aggregator,if,single,bucket,aggregator,instanceof,numeric,metrics,aggregator,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,buckets,can,only,be,sorted,on,a,sub,aggregator,path,that,is,built,out,of,zero,or,more,single,bucket,aggregations,within,the,path,and,a,final,single,bucket,or,a,metrics,aggregation,at,the,path,end,aggregation,path,path,element,last,token,last,path,element,if,single,bucket,if,last,token,key,null,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,bucket,aggregation,can,only,be,done,on,its,either,drop,the,key,a,la,last,token,name,or,change,it,to,a,la,last,token,name,return,if,aggregator,instanceof,numeric,metrics,aggregator,single,value,if,last,token,key,null,value,equals,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,ordering,on,a,single,value,metrics,aggregation,can,only,be,done,on,its,value,either,drop,the,key,a,la,last,token,name,or,change,it,to,value,a,la,last,token,name,value,return,if,last,token,key,null,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,when,ordering,on,a,multi,value,metrics,aggregation,a,metric,name,must,be,specified,if,numeric,metrics,aggregator,multi,value,aggregator,has,metric,last,token,key,throw,new,aggregation,execution,exception,invalid,aggregation,order,path,this,unknown,metric,name,last,token,key,on,multi,value,metrics,aggregation,last,token,name
AggregationPath -> public double resolveValue(HasAggregations root);1524684173;Resolves the value pointed by this path given an aggregations root__@param root  The root that serves as a point of reference for this path_@return      The resolved value;public double resolveValue(HasAggregations root) {_        HasAggregations parent = root__        double value = Double.NaN__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            Aggregation agg = parent.getAggregations().get(token.name)___            if (agg == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Cannot find aggregation named [" + token.name + "]")__            }__            if (agg instanceof SingleBucketAggregation) {_                if (token.key != null && !token.key.equals("doc_count")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-bucket aggregation [" + token.name +_                            "]. Either use [doc_count] as key or drop the key all together")__                }_                parent = (SingleBucketAggregation) agg__                value = ((SingleBucketAggregation) agg).getDocCount()__                continue__            }__            _            if (i != pathElements.size() - 1) {_                throw new IllegalArgumentException("Invalid order path [" + this +_ "]. Metrics aggregations cannot have sub-aggregations (at [" + token + ">" + pathElements.get(i + 1) + "]")__            }__            if (agg instanceof InternalNumericMetricsAggregation.SingleValue) {_                if (token.key != null && !token.key.equals("value")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-value metric aggregation [" + token.name +_                            "]. Either use [value] as key or drop the key all together")__                }_                parent = null__                value = ((InternalNumericMetricsAggregation.SingleValue) agg).value()__                continue__            }__            _            if (token.key == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Missing value key in [" + token + "] which refers to a multi-value metric aggregation")__            }_            parent = null__            value = ((InternalNumericMetricsAggregation.MultiValue) agg).value(token.key)__        }__        return value__    };resolves,the,value,pointed,by,this,path,given,an,aggregations,root,param,root,the,root,that,serves,as,a,point,of,reference,for,this,path,return,the,resolved,value;public,double,resolve,value,has,aggregations,root,has,aggregations,parent,root,double,value,double,na,n,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregation,agg,parent,get,aggregations,get,token,name,if,agg,null,throw,new,illegal,argument,exception,invalid,order,path,this,cannot,find,aggregation,named,token,name,if,agg,instanceof,single,bucket,aggregation,if,token,key,null,token,key,equals,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,bucket,aggregation,token,name,either,use,as,key,or,drop,the,key,all,together,parent,single,bucket,aggregation,agg,value,single,bucket,aggregation,agg,get,doc,count,continue,if,i,path,elements,size,1,throw,new,illegal,argument,exception,invalid,order,path,this,metrics,aggregations,cannot,have,sub,aggregations,at,token,path,elements,get,i,1,if,agg,instanceof,internal,numeric,metrics,aggregation,single,value,if,token,key,null,token,key,equals,value,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,value,metric,aggregation,token,name,either,use,value,as,key,or,drop,the,key,all,together,parent,null,value,internal,numeric,metrics,aggregation,single,value,agg,value,continue,if,token,key,null,throw,new,illegal,argument,exception,invalid,order,path,this,missing,value,key,in,token,which,refers,to,a,multi,value,metric,aggregation,parent,null,value,internal,numeric,metrics,aggregation,multi,value,agg,value,token,key,return,value
AggregationPath -> public double resolveValue(HasAggregations root);1525334055;Resolves the value pointed by this path given an aggregations root__@param root  The root that serves as a point of reference for this path_@return      The resolved value;public double resolveValue(HasAggregations root) {_        HasAggregations parent = root__        double value = Double.NaN__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            Aggregation agg = parent.getAggregations().get(token.name)___            if (agg == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Cannot find aggregation named [" + token.name + "]")__            }__            if (agg instanceof SingleBucketAggregation) {_                if (token.key != null && !token.key.equals("doc_count")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-bucket aggregation [" + token.name +_                            "]. Either use [doc_count] as key or drop the key all together")__                }_                parent = (SingleBucketAggregation) agg__                value = ((SingleBucketAggregation) agg).getDocCount()__                continue__            }__            _            if (i != pathElements.size() - 1) {_                throw new IllegalArgumentException("Invalid order path [" + this +_ "]. Metrics aggregations cannot have sub-aggregations (at [" + token + ">" + pathElements.get(i + 1) + "]")__            }__            if (agg instanceof InternalNumericMetricsAggregation.SingleValue) {_                if (token.key != null && !token.key.equals("value")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-value metric aggregation [" + token.name +_                            "]. Either use [value] as key or drop the key all together")__                }_                parent = null__                value = ((InternalNumericMetricsAggregation.SingleValue) agg).value()__                continue__            }__            _            if (token.key == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Missing value key in [" + token + "] which refers to a multi-value metric aggregation")__            }_            parent = null__            value = ((InternalNumericMetricsAggregation.MultiValue) agg).value(token.key)__        }__        return value__    };resolves,the,value,pointed,by,this,path,given,an,aggregations,root,param,root,the,root,that,serves,as,a,point,of,reference,for,this,path,return,the,resolved,value;public,double,resolve,value,has,aggregations,root,has,aggregations,parent,root,double,value,double,na,n,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregation,agg,parent,get,aggregations,get,token,name,if,agg,null,throw,new,illegal,argument,exception,invalid,order,path,this,cannot,find,aggregation,named,token,name,if,agg,instanceof,single,bucket,aggregation,if,token,key,null,token,key,equals,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,bucket,aggregation,token,name,either,use,as,key,or,drop,the,key,all,together,parent,single,bucket,aggregation,agg,value,single,bucket,aggregation,agg,get,doc,count,continue,if,i,path,elements,size,1,throw,new,illegal,argument,exception,invalid,order,path,this,metrics,aggregations,cannot,have,sub,aggregations,at,token,path,elements,get,i,1,if,agg,instanceof,internal,numeric,metrics,aggregation,single,value,if,token,key,null,token,key,equals,value,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,value,metric,aggregation,token,name,either,use,value,as,key,or,drop,the,key,all,together,parent,null,value,internal,numeric,metrics,aggregation,single,value,agg,value,continue,if,token,key,null,throw,new,illegal,argument,exception,invalid,order,path,this,missing,value,key,in,token,which,refers,to,a,multi,value,metric,aggregation,parent,null,value,internal,numeric,metrics,aggregation,multi,value,agg,value,token,key,return,value
AggregationPath -> public double resolveValue(HasAggregations root);1531179852;Resolves the value pointed by this path given an aggregations root__@param root  The root that serves as a point of reference for this path_@return      The resolved value;public double resolveValue(HasAggregations root) {_        HasAggregations parent = root__        double value = Double.NaN__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            Aggregation agg = parent.getAggregations().get(token.name)___            if (agg == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Cannot find aggregation named [" + token.name + "]")__            }__            if (agg instanceof SingleBucketAggregation) {_                if (token.key != null && !token.key.equals("doc_count")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-bucket aggregation [" + token.name +_                            "]. Either use [doc_count] as key or drop the key all together")__                }_                parent = (SingleBucketAggregation) agg__                value = ((SingleBucketAggregation) agg).getDocCount()__                continue__            }__            _            if (i != pathElements.size() - 1) {_                throw new IllegalArgumentException("Invalid order path [" + this +_ "]. Metrics aggregations cannot have sub-aggregations (at [" + token + ">" + pathElements.get(i + 1) + "]")__            }__            if (agg instanceof InternalNumericMetricsAggregation.SingleValue) {_                if (token.key != null && !token.key.equals("value")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-value metric aggregation [" + token.name +_                            "]. Either use [value] as key or drop the key all together")__                }_                parent = null__                value = ((InternalNumericMetricsAggregation.SingleValue) agg).value()__                continue__            }__            _            if (token.key == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Missing value key in [" + token + "] which refers to a multi-value metric aggregation")__            }_            parent = null__            value = ((InternalNumericMetricsAggregation.MultiValue) agg).value(token.key)__        }__        return value__    };resolves,the,value,pointed,by,this,path,given,an,aggregations,root,param,root,the,root,that,serves,as,a,point,of,reference,for,this,path,return,the,resolved,value;public,double,resolve,value,has,aggregations,root,has,aggregations,parent,root,double,value,double,na,n,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregation,agg,parent,get,aggregations,get,token,name,if,agg,null,throw,new,illegal,argument,exception,invalid,order,path,this,cannot,find,aggregation,named,token,name,if,agg,instanceof,single,bucket,aggregation,if,token,key,null,token,key,equals,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,bucket,aggregation,token,name,either,use,as,key,or,drop,the,key,all,together,parent,single,bucket,aggregation,agg,value,single,bucket,aggregation,agg,get,doc,count,continue,if,i,path,elements,size,1,throw,new,illegal,argument,exception,invalid,order,path,this,metrics,aggregations,cannot,have,sub,aggregations,at,token,path,elements,get,i,1,if,agg,instanceof,internal,numeric,metrics,aggregation,single,value,if,token,key,null,token,key,equals,value,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,value,metric,aggregation,token,name,either,use,value,as,key,or,drop,the,key,all,together,parent,null,value,internal,numeric,metrics,aggregation,single,value,agg,value,continue,if,token,key,null,throw,new,illegal,argument,exception,invalid,order,path,this,missing,value,key,in,token,which,refers,to,a,multi,value,metric,aggregation,parent,null,value,internal,numeric,metrics,aggregation,multi,value,agg,value,token,key,return,value
AggregationPath -> public double resolveValue(HasAggregations root);1533230566;Resolves the value pointed by this path given an aggregations root__@param root  The root that serves as a point of reference for this path_@return      The resolved value;public double resolveValue(HasAggregations root) {_        HasAggregations parent = root__        double value = Double.NaN__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            Aggregation agg = parent.getAggregations().get(token.name)___            if (agg == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Cannot find aggregation named [" + token.name + "]")__            }__            if (agg instanceof SingleBucketAggregation) {_                if (token.key != null && !token.key.equals("doc_count")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-bucket aggregation [" + token.name +_                            "]. Either use [doc_count] as key or drop the key all together")__                }_                parent = (SingleBucketAggregation) agg__                value = ((SingleBucketAggregation) agg).getDocCount()__                continue__            }__            _            if (i != pathElements.size() - 1) {_                throw new IllegalArgumentException("Invalid order path [" + this +_ "]. Metrics aggregations cannot have sub-aggregations (at [" + token + ">" + pathElements.get(i + 1) + "]")__            }__            if (agg instanceof InternalNumericMetricsAggregation.SingleValue) {_                if (token.key != null && !token.key.equals("value")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-value metric aggregation [" + token.name +_                            "]. Either use [value] as key or drop the key all together")__                }_                parent = null__                value = ((InternalNumericMetricsAggregation.SingleValue) agg).value()__                continue__            }__            _            if (token.key == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Missing value key in [" + token + "] which refers to a multi-value metric aggregation")__            }_            parent = null__            value = ((InternalNumericMetricsAggregation.MultiValue) agg).value(token.key)__        }__        return value__    };resolves,the,value,pointed,by,this,path,given,an,aggregations,root,param,root,the,root,that,serves,as,a,point,of,reference,for,this,path,return,the,resolved,value;public,double,resolve,value,has,aggregations,root,has,aggregations,parent,root,double,value,double,na,n,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregation,agg,parent,get,aggregations,get,token,name,if,agg,null,throw,new,illegal,argument,exception,invalid,order,path,this,cannot,find,aggregation,named,token,name,if,agg,instanceof,single,bucket,aggregation,if,token,key,null,token,key,equals,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,bucket,aggregation,token,name,either,use,as,key,or,drop,the,key,all,together,parent,single,bucket,aggregation,agg,value,single,bucket,aggregation,agg,get,doc,count,continue,if,i,path,elements,size,1,throw,new,illegal,argument,exception,invalid,order,path,this,metrics,aggregations,cannot,have,sub,aggregations,at,token,path,elements,get,i,1,if,agg,instanceof,internal,numeric,metrics,aggregation,single,value,if,token,key,null,token,key,equals,value,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,value,metric,aggregation,token,name,either,use,value,as,key,or,drop,the,key,all,together,parent,null,value,internal,numeric,metrics,aggregation,single,value,agg,value,continue,if,token,key,null,throw,new,illegal,argument,exception,invalid,order,path,this,missing,value,key,in,token,which,refers,to,a,multi,value,metric,aggregation,parent,null,value,internal,numeric,metrics,aggregation,multi,value,agg,value,token,key,return,value
AggregationPath -> public double resolveValue(HasAggregations root);1544110272;Resolves the value pointed by this path given an aggregations root__@param root  The root that serves as a point of reference for this path_@return      The resolved value;public double resolveValue(HasAggregations root) {_        HasAggregations parent = root__        double value = Double.NaN__        for (int i = 0_ i < pathElements.size()_ i++) {_            AggregationPath.PathElement token = pathElements.get(i)__            Aggregation agg = parent.getAggregations().get(token.name)___            if (agg == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Cannot find aggregation named [" + token.name + "]")__            }__            if (agg instanceof SingleBucketAggregation) {_                if (token.key != null && !token.key.equals("doc_count")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-bucket aggregation [" + token.name +_                            "]. Either use [doc_count] as key or drop the key all together")__                }_                parent = (SingleBucketAggregation) agg__                value = ((SingleBucketAggregation) agg).getDocCount()__                continue__            }__            _            if (i != pathElements.size() - 1) {_                throw new IllegalArgumentException("Invalid order path [" + this +_ "]. Metrics aggregations cannot have sub-aggregations (at [" + token + ">" + pathElements.get(i + 1) + "]")__            }__            if (agg instanceof InternalNumericMetricsAggregation.SingleValue) {_                if (token.key != null && !token.key.equals("value")) {_                    throw new IllegalArgumentException("Invalid order path [" + this +_                            "]. Unknown value key [" + token.key + "] for single-value metric aggregation [" + token.name +_                            "]. Either use [value] as key or drop the key all together")__                }_                parent = null__                value = ((InternalNumericMetricsAggregation.SingleValue) agg).value()__                continue__            }__            _            if (token.key == null) {_                throw new IllegalArgumentException("Invalid order path [" + this +_                        "]. Missing value key in [" + token + "] which refers to a multi-value metric aggregation")__            }_            parent = null__            value = ((InternalNumericMetricsAggregation.MultiValue) agg).value(token.key)__        }__        return value__    };resolves,the,value,pointed,by,this,path,given,an,aggregations,root,param,root,the,root,that,serves,as,a,point,of,reference,for,this,path,return,the,resolved,value;public,double,resolve,value,has,aggregations,root,has,aggregations,parent,root,double,value,double,na,n,for,int,i,0,i,path,elements,size,i,aggregation,path,path,element,token,path,elements,get,i,aggregation,agg,parent,get,aggregations,get,token,name,if,agg,null,throw,new,illegal,argument,exception,invalid,order,path,this,cannot,find,aggregation,named,token,name,if,agg,instanceof,single,bucket,aggregation,if,token,key,null,token,key,equals,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,bucket,aggregation,token,name,either,use,as,key,or,drop,the,key,all,together,parent,single,bucket,aggregation,agg,value,single,bucket,aggregation,agg,get,doc,count,continue,if,i,path,elements,size,1,throw,new,illegal,argument,exception,invalid,order,path,this,metrics,aggregations,cannot,have,sub,aggregations,at,token,path,elements,get,i,1,if,agg,instanceof,internal,numeric,metrics,aggregation,single,value,if,token,key,null,token,key,equals,value,throw,new,illegal,argument,exception,invalid,order,path,this,unknown,value,key,token,key,for,single,value,metric,aggregation,token,name,either,use,value,as,key,or,drop,the,key,all,together,parent,null,value,internal,numeric,metrics,aggregation,single,value,agg,value,continue,if,token,key,null,throw,new,illegal,argument,exception,invalid,order,path,this,missing,value,key,in,token,which,refers,to,a,multi,value,metric,aggregation,parent,null,value,internal,numeric,metrics,aggregation,multi,value,agg,value,token,key,return,value
