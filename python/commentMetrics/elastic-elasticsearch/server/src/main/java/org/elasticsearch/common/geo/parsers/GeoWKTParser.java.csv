# id;timestamp;commentText;codeText;commentWords;codeWords
GeoWKTParser -> public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,                                                  final GeoShapeFieldMapper shapeMapper)             throws IOException, ElasticsearchParseException;1524684173;throws an exception if the parsed geometry type does not match the expected shape type;public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,_                                                 final GeoShapeFieldMapper shapeMapper)_            throws IOException, ElasticsearchParseException {_        StringReader reader = new StringReader(parser.text())__        try {_            boolean ignoreZValue = (shapeMapper != null && shapeMapper.ignoreZValue().value() == true)__            _            StreamTokenizer tokenizer = new StreamTokenizer(reader)__            tokenizer.resetSyntax()__            tokenizer.wordChars('a', 'z')__            tokenizer.wordChars('A', 'Z')__            tokenizer.wordChars(128 + 32, 255)__            tokenizer.wordChars('0', '9')__            tokenizer.wordChars('-', '-')__            tokenizer.wordChars('+', '+')__            tokenizer.wordChars('.', '.')__            tokenizer.whitespaceChars(0, ' ')__            tokenizer.commentChar('#')__            ShapeBuilder builder = parseGeometry(tokenizer, shapeType, ignoreZValue)__            checkEOF(tokenizer)__            return builder__        } finally {_            reader.close()__        }_    };throws,an,exception,if,the,parsed,geometry,type,does,not,match,the,expected,shape,type;public,static,shape,builder,parse,expected,type,xcontent,parser,parser,final,geo,shape,type,shape,type,final,geo,shape,field,mapper,shape,mapper,throws,ioexception,elasticsearch,parse,exception,string,reader,reader,new,string,reader,parser,text,try,boolean,ignore,zvalue,shape,mapper,null,shape,mapper,ignore,zvalue,value,true,stream,tokenizer,tokenizer,new,stream,tokenizer,reader,tokenizer,reset,syntax,tokenizer,word,chars,a,z,tokenizer,word,chars,a,z,tokenizer,word,chars,128,32,255,tokenizer,word,chars,0,9,tokenizer,word,chars,tokenizer,word,chars,tokenizer,word,chars,tokenizer,whitespace,chars,0,tokenizer,comment,char,shape,builder,builder,parse,geometry,tokenizer,shape,type,ignore,zvalue,check,eof,tokenizer,return,builder,finally,reader,close
GeoWKTParser -> public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,                                                  final GeoShapeFieldMapper shapeMapper)             throws IOException, ElasticsearchParseException;1527583663;throws an exception if the parsed geometry type does not match the expected shape type;public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,_                                                 final GeoShapeFieldMapper shapeMapper)_            throws IOException, ElasticsearchParseException {_        try (StringReader reader = new StringReader(parser.text())) {_            boolean ignoreZValue = (shapeMapper != null && shapeMapper.ignoreZValue().value() == true)__            _            StreamTokenizer tokenizer = new StreamTokenizer(reader)__            tokenizer.resetSyntax()__            tokenizer.wordChars('a', 'z')__            tokenizer.wordChars('A', 'Z')__            tokenizer.wordChars(128 + 32, 255)__            tokenizer.wordChars('0', '9')__            tokenizer.wordChars('-', '-')__            tokenizer.wordChars('+', '+')__            tokenizer.wordChars('.', '.')__            tokenizer.whitespaceChars(0, ' ')__            tokenizer.commentChar('#')__            ShapeBuilder builder = parseGeometry(tokenizer, shapeType, ignoreZValue)__            checkEOF(tokenizer)__            return builder__        }_    };throws,an,exception,if,the,parsed,geometry,type,does,not,match,the,expected,shape,type;public,static,shape,builder,parse,expected,type,xcontent,parser,parser,final,geo,shape,type,shape,type,final,geo,shape,field,mapper,shape,mapper,throws,ioexception,elasticsearch,parse,exception,try,string,reader,reader,new,string,reader,parser,text,boolean,ignore,zvalue,shape,mapper,null,shape,mapper,ignore,zvalue,value,true,stream,tokenizer,tokenizer,new,stream,tokenizer,reader,tokenizer,reset,syntax,tokenizer,word,chars,a,z,tokenizer,word,chars,a,z,tokenizer,word,chars,128,32,255,tokenizer,word,chars,0,9,tokenizer,word,chars,tokenizer,word,chars,tokenizer,word,chars,tokenizer,whitespace,chars,0,tokenizer,comment,char,shape,builder,builder,parse,geometry,tokenizer,shape,type,ignore,zvalue,check,eof,tokenizer,return,builder
GeoWKTParser -> public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,                                                  final GeoShapeFieldMapper shapeMapper)             throws IOException, ElasticsearchParseException;1542051604;throws an exception if the parsed geometry type does not match the expected shape type;public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,_                                                 final GeoShapeFieldMapper shapeMapper)_            throws IOException, ElasticsearchParseException {_        try (StringReader reader = new StringReader(parser.text())) {_            Explicit<Boolean> ignoreZValue = (shapeMapper == null) ? GeoShapeFieldMapper.Defaults.IGNORE_Z_VALUE :_                shapeMapper.ignoreZValue()__            Explicit<Boolean> coerce = (shapeMapper == null) ? GeoShapeFieldMapper.Defaults.COERCE : shapeMapper.coerce()__            _            StreamTokenizer tokenizer = new StreamTokenizer(reader)__            tokenizer.resetSyntax()__            tokenizer.wordChars('a', 'z')__            tokenizer.wordChars('A', 'Z')__            tokenizer.wordChars(128 + 32, 255)__            tokenizer.wordChars('0', '9')__            tokenizer.wordChars('-', '-')__            tokenizer.wordChars('+', '+')__            tokenizer.wordChars('.', '.')__            tokenizer.whitespaceChars(0, ' ')__            tokenizer.commentChar('#')__            ShapeBuilder builder = parseGeometry(tokenizer, shapeType, ignoreZValue.value(), coerce.value())__            checkEOF(tokenizer)__            return builder__        }_    };throws,an,exception,if,the,parsed,geometry,type,does,not,match,the,expected,shape,type;public,static,shape,builder,parse,expected,type,xcontent,parser,parser,final,geo,shape,type,shape,type,final,geo,shape,field,mapper,shape,mapper,throws,ioexception,elasticsearch,parse,exception,try,string,reader,reader,new,string,reader,parser,text,explicit,boolean,ignore,zvalue,shape,mapper,null,geo,shape,field,mapper,defaults,shape,mapper,ignore,zvalue,explicit,boolean,coerce,shape,mapper,null,geo,shape,field,mapper,defaults,coerce,shape,mapper,coerce,stream,tokenizer,tokenizer,new,stream,tokenizer,reader,tokenizer,reset,syntax,tokenizer,word,chars,a,z,tokenizer,word,chars,a,z,tokenizer,word,chars,128,32,255,tokenizer,word,chars,0,9,tokenizer,word,chars,tokenizer,word,chars,tokenizer,word,chars,tokenizer,whitespace,chars,0,tokenizer,comment,char,shape,builder,builder,parse,geometry,tokenizer,shape,type,ignore,zvalue,value,coerce,value,check,eof,tokenizer,return,builder
GeoWKTParser -> public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,                                                  final GeoShapeFieldMapper shapeMapper)             throws IOException, ElasticsearchParseException;1545098986;throws an exception if the parsed geometry type does not match the expected shape type;public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,_                                                 final GeoShapeFieldMapper shapeMapper)_            throws IOException, ElasticsearchParseException {_        try (StringReader reader = new StringReader(parser.text())) {_            Explicit<Boolean> ignoreZValue = (shapeMapper == null) ? GeoShapeFieldMapper.Defaults.IGNORE_Z_VALUE :_                shapeMapper.ignoreZValue()__            Explicit<Boolean> coerce = (shapeMapper == null) ? GeoShapeFieldMapper.Defaults.COERCE : shapeMapper.coerce()__            _            StreamTokenizer tokenizer = new StreamTokenizer(reader)__            tokenizer.resetSyntax()__            tokenizer.wordChars('a', 'z')__            tokenizer.wordChars('A', 'Z')__            tokenizer.wordChars(128 + 32, 255)__            tokenizer.wordChars('0', '9')__            tokenizer.wordChars('-', '-')__            tokenizer.wordChars('+', '+')__            tokenizer.wordChars('.', '.')__            tokenizer.whitespaceChars(0, ' ')__            tokenizer.commentChar('#')__            ShapeBuilder builder = parseGeometry(tokenizer, shapeType, ignoreZValue.value(), coerce.value())__            checkEOF(tokenizer)__            return builder__        }_    };throws,an,exception,if,the,parsed,geometry,type,does,not,match,the,expected,shape,type;public,static,shape,builder,parse,expected,type,xcontent,parser,parser,final,geo,shape,type,shape,type,final,geo,shape,field,mapper,shape,mapper,throws,ioexception,elasticsearch,parse,exception,try,string,reader,reader,new,string,reader,parser,text,explicit,boolean,ignore,zvalue,shape,mapper,null,geo,shape,field,mapper,defaults,shape,mapper,ignore,zvalue,explicit,boolean,coerce,shape,mapper,null,geo,shape,field,mapper,defaults,coerce,shape,mapper,coerce,stream,tokenizer,tokenizer,new,stream,tokenizer,reader,tokenizer,reset,syntax,tokenizer,word,chars,a,z,tokenizer,word,chars,a,z,tokenizer,word,chars,128,32,255,tokenizer,word,chars,0,9,tokenizer,word,chars,tokenizer,word,chars,tokenizer,word,chars,tokenizer,whitespace,chars,0,tokenizer,comment,char,shape,builder,builder,parse,geometry,tokenizer,shape,type,ignore,zvalue,value,coerce,value,check,eof,tokenizer,return,builder
GeoWKTParser -> private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue)             throws IOException, ElasticsearchParseException;1524684173;parse geometry from the stream tokenizer;private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue)_            throws IOException, ElasticsearchParseException {_        final GeoShapeType type = GeoShapeType.forName(nextWord(stream))__        if (shapeType != null && shapeType != GeoShapeType.GEOMETRYCOLLECTION) {_            if (type.wktName().equals(shapeType.wktName()) == false) {_                throw new ElasticsearchParseException("Expected geometry type [{}] but found [{}]", shapeType, type)__            }_        }_        switch (type) {_            case POINT:_                return parsePoint(stream, ignoreZValue)__            case MULTIPOINT:_                return parseMultiPoint(stream, ignoreZValue)__            case LINESTRING:_                return parseLine(stream, ignoreZValue)__            case MULTILINESTRING:_                return parseMultiLine(stream, ignoreZValue)__            case POLYGON:_                return parsePolygon(stream, ignoreZValue)__            case MULTIPOLYGON:_                return parseMultiPolygon(stream, ignoreZValue)__            case ENVELOPE:_                return parseBBox(stream)__            case GEOMETRYCOLLECTION:_                return parseGeometryCollection(stream, ignoreZValue)__            default:_                throw new IllegalArgumentException("Unknown geometry type: " + type)__        }_    };parse,geometry,from,the,stream,tokenizer;private,static,shape,builder,parse,geometry,stream,tokenizer,stream,geo,shape,type,shape,type,final,boolean,ignore,zvalue,throws,ioexception,elasticsearch,parse,exception,final,geo,shape,type,type,geo,shape,type,for,name,next,word,stream,if,shape,type,null,shape,type,geo,shape,type,geometrycollection,if,type,wkt,name,equals,shape,type,wkt,name,false,throw,new,elasticsearch,parse,exception,expected,geometry,type,but,found,shape,type,type,switch,type,case,point,return,parse,point,stream,ignore,zvalue,case,multipoint,return,parse,multi,point,stream,ignore,zvalue,case,linestring,return,parse,line,stream,ignore,zvalue,case,multilinestring,return,parse,multi,line,stream,ignore,zvalue,case,polygon,return,parse,polygon,stream,ignore,zvalue,case,multipolygon,return,parse,multi,polygon,stream,ignore,zvalue,case,envelope,return,parse,bbox,stream,case,geometrycollection,return,parse,geometry,collection,stream,ignore,zvalue,default,throw,new,illegal,argument,exception,unknown,geometry,type,type
GeoWKTParser -> private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue)             throws IOException, ElasticsearchParseException;1527583663;parse geometry from the stream tokenizer;private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue)_            throws IOException, ElasticsearchParseException {_        final GeoShapeType type = GeoShapeType.forName(nextWord(stream))__        if (shapeType != null && shapeType != GeoShapeType.GEOMETRYCOLLECTION) {_            if (type.wktName().equals(shapeType.wktName()) == false) {_                throw new ElasticsearchParseException("Expected geometry type [{}] but found [{}]", shapeType, type)__            }_        }_        switch (type) {_            case POINT:_                return parsePoint(stream, ignoreZValue)__            case MULTIPOINT:_                return parseMultiPoint(stream, ignoreZValue)__            case LINESTRING:_                return parseLine(stream, ignoreZValue)__            case MULTILINESTRING:_                return parseMultiLine(stream, ignoreZValue)__            case POLYGON:_                return parsePolygon(stream, ignoreZValue)__            case MULTIPOLYGON:_                return parseMultiPolygon(stream, ignoreZValue)__            case ENVELOPE:_                return parseBBox(stream)__            case GEOMETRYCOLLECTION:_                return parseGeometryCollection(stream, ignoreZValue)__            default:_                throw new IllegalArgumentException("Unknown geometry type: " + type)__        }_    };parse,geometry,from,the,stream,tokenizer;private,static,shape,builder,parse,geometry,stream,tokenizer,stream,geo,shape,type,shape,type,final,boolean,ignore,zvalue,throws,ioexception,elasticsearch,parse,exception,final,geo,shape,type,type,geo,shape,type,for,name,next,word,stream,if,shape,type,null,shape,type,geo,shape,type,geometrycollection,if,type,wkt,name,equals,shape,type,wkt,name,false,throw,new,elasticsearch,parse,exception,expected,geometry,type,but,found,shape,type,type,switch,type,case,point,return,parse,point,stream,ignore,zvalue,case,multipoint,return,parse,multi,point,stream,ignore,zvalue,case,linestring,return,parse,line,stream,ignore,zvalue,case,multilinestring,return,parse,multi,line,stream,ignore,zvalue,case,polygon,return,parse,polygon,stream,ignore,zvalue,case,multipolygon,return,parse,multi,polygon,stream,ignore,zvalue,case,envelope,return,parse,bbox,stream,case,geometrycollection,return,parse,geometry,collection,stream,ignore,zvalue,default,throw,new,illegal,argument,exception,unknown,geometry,type,type
GeoWKTParser -> private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1524684173;next word in the stream;private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        switch (stream.nextToken()) {_            case StreamTokenizer.TT_WORD:_                final String word = stream.sval__                return word.equalsIgnoreCase(EMPTY) ? EMPTY : word__            case '(': return LPAREN__            case ')': return RPAREN__            case ',': return COMMA__        }_        throw new ElasticsearchParseException("expected word but found: " + tokenString(stream), stream.lineno())__    };next,word,in,the,stream;private,static,string,next,word,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,switch,stream,next,token,case,stream,tokenizer,final,string,word,stream,sval,return,word,equals,ignore,case,empty,empty,word,case,return,lparen,case,return,rparen,case,return,comma,throw,new,elasticsearch,parse,exception,expected,word,but,found,token,string,stream,stream,lineno
GeoWKTParser -> private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1527583663;next word in the stream;private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        switch (stream.nextToken()) {_            case StreamTokenizer.TT_WORD:_                final String word = stream.sval__                return word.equalsIgnoreCase(EMPTY) ? EMPTY : word__            case '(': return LPAREN__            case ')': return RPAREN__            case ',': return COMMA__        }_        throw new ElasticsearchParseException("expected word but found: " + tokenString(stream), stream.lineno())__    };next,word,in,the,stream;private,static,string,next,word,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,switch,stream,next,token,case,stream,tokenizer,final,string,word,stream,sval,return,word,equals,ignore,case,empty,empty,word,case,return,lparen,case,return,rparen,case,return,comma,throw,new,elasticsearch,parse,exception,expected,word,but,found,token,string,stream,stream,lineno
GeoWKTParser -> private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1542051604;next word in the stream;private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        switch (stream.nextToken()) {_            case StreamTokenizer.TT_WORD:_                final String word = stream.sval__                return word.equalsIgnoreCase(EMPTY) ? EMPTY : word__            case '(': return LPAREN__            case ')': return RPAREN__            case ',': return COMMA__        }_        throw new ElasticsearchParseException("expected word but found: " + tokenString(stream), stream.lineno())__    };next,word,in,the,stream;private,static,string,next,word,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,switch,stream,next,token,case,stream,tokenizer,final,string,word,stream,sval,return,word,equals,ignore,case,empty,empty,word,case,return,lparen,case,return,rparen,case,return,comma,throw,new,elasticsearch,parse,exception,expected,word,but,found,token,string,stream,stream,lineno
GeoWKTParser -> private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1545079094;next word in the stream;private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        switch (stream.nextToken()) {_            case StreamTokenizer.TT_WORD:_                final String word = stream.sval__                return word.equalsIgnoreCase(EMPTY) ? EMPTY : word__            case '(': return LPAREN__            case ')': return RPAREN__            case ',': return COMMA__        }_        throw new ElasticsearchParseException("expected word but found: " + tokenString(stream), stream.lineno())__    };next,word,in,the,stream;private,static,string,next,word,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,switch,stream,next,token,case,stream,tokenizer,final,string,word,stream,sval,return,word,equals,ignore,case,empty,empty,word,case,return,lparen,case,return,rparen,case,return,comma,throw,new,elasticsearch,parse,exception,expected,word,but,found,token,string,stream,stream,lineno
GeoWKTParser -> private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1545098986;next word in the stream;private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        switch (stream.nextToken()) {_            case StreamTokenizer.TT_WORD:_                final String word = stream.sval__                return word.equalsIgnoreCase(EMPTY) ? EMPTY : word__            case '(': return LPAREN__            case ')': return RPAREN__            case ',': return COMMA__        }_        throw new ElasticsearchParseException("expected word but found: " + tokenString(stream), stream.lineno())__    };next,word,in,the,stream;private,static,string,next,word,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,switch,stream,next,token,case,stream,tokenizer,final,string,word,stream,sval,return,word,equals,ignore,case,empty,empty,word,case,return,lparen,case,return,rparen,case,return,comma,throw,new,elasticsearch,parse,exception,expected,word,but,found,token,string,stream,stream,lineno
GeoWKTParser -> private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1545148496;next word in the stream;private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        switch (stream.nextToken()) {_            case StreamTokenizer.TT_WORD:_                final String word = stream.sval__                return word.equalsIgnoreCase(EMPTY) ? EMPTY : word__            case '(': return LPAREN__            case ')': return RPAREN__            case ',': return COMMA__        }_        throw new ElasticsearchParseException("expected word but found: " + tokenString(stream), stream.lineno())__    };next,word,in,the,stream;private,static,string,next,word,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,switch,stream,next,token,case,stream,tokenizer,final,string,word,stream,sval,return,word,equals,ignore,case,empty,empty,word,case,return,lparen,case,return,rparen,case,return,comma,throw,new,elasticsearch,parse,exception,expected,word,but,found,token,string,stream,stream,lineno
GeoWKTParser -> private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1548858030;next word in the stream;private static String nextWord(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        switch (stream.nextToken()) {_            case StreamTokenizer.TT_WORD:_                final String word = stream.sval__                return word.equalsIgnoreCase(EMPTY) ? EMPTY : word__            case '(': return LPAREN__            case ')': return RPAREN__            case ',': return COMMA__        }_        throw new ElasticsearchParseException("expected word but found: " + tokenString(stream), stream.lineno())__    };next,word,in,the,stream;private,static,string,next,word,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,switch,stream,next,token,case,stream,tokenizer,final,string,word,stream,sval,return,word,equals,ignore,case,empty,empty,word,case,return,lparen,case,return,rparen,case,return,comma,throw,new,elasticsearch,parse,exception,expected,word,but,found,token,string,stream,stream,lineno
GeoWKTParser -> private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,                                               final boolean coerce)             throws IOException, ElasticsearchParseException;1542051604;parse geometry from the stream tokenizer;private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,_                                              final boolean coerce)_            throws IOException, ElasticsearchParseException {_        final GeoShapeType type = GeoShapeType.forName(nextWord(stream))__        if (shapeType != null && shapeType != GeoShapeType.GEOMETRYCOLLECTION) {_            if (type.wktName().equals(shapeType.wktName()) == false) {_                throw new ElasticsearchParseException("Expected geometry type [{}] but found [{}]", shapeType, type)__            }_        }_        switch (type) {_            case POINT:_                return parsePoint(stream, ignoreZValue, coerce)__            case MULTIPOINT:_                return parseMultiPoint(stream, ignoreZValue, coerce)__            case LINESTRING:_                return parseLine(stream, ignoreZValue, coerce)__            case MULTILINESTRING:_                return parseMultiLine(stream, ignoreZValue, coerce)__            case POLYGON:_                return parsePolygon(stream, ignoreZValue, coerce)__            case MULTIPOLYGON:_                return parseMultiPolygon(stream, ignoreZValue, coerce)__            case ENVELOPE:_                return parseBBox(stream)__            case GEOMETRYCOLLECTION:_                return parseGeometryCollection(stream, ignoreZValue, coerce)__            default:_                throw new IllegalArgumentException("Unknown geometry type: " + type)__        }_    };parse,geometry,from,the,stream,tokenizer;private,static,shape,builder,parse,geometry,stream,tokenizer,stream,geo,shape,type,shape,type,final,boolean,ignore,zvalue,final,boolean,coerce,throws,ioexception,elasticsearch,parse,exception,final,geo,shape,type,type,geo,shape,type,for,name,next,word,stream,if,shape,type,null,shape,type,geo,shape,type,geometrycollection,if,type,wkt,name,equals,shape,type,wkt,name,false,throw,new,elasticsearch,parse,exception,expected,geometry,type,but,found,shape,type,type,switch,type,case,point,return,parse,point,stream,ignore,zvalue,coerce,case,multipoint,return,parse,multi,point,stream,ignore,zvalue,coerce,case,linestring,return,parse,line,stream,ignore,zvalue,coerce,case,multilinestring,return,parse,multi,line,stream,ignore,zvalue,coerce,case,polygon,return,parse,polygon,stream,ignore,zvalue,coerce,case,multipolygon,return,parse,multi,polygon,stream,ignore,zvalue,coerce,case,envelope,return,parse,bbox,stream,case,geometrycollection,return,parse,geometry,collection,stream,ignore,zvalue,coerce,default,throw,new,illegal,argument,exception,unknown,geometry,type,type
GeoWKTParser -> private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,                                               final boolean coerce)             throws IOException, ElasticsearchParseException;1545079094;parse geometry from the stream tokenizer;private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,_                                              final boolean coerce)_            throws IOException, ElasticsearchParseException {_        final GeoShapeType type = GeoShapeType.forName(nextWord(stream))__        if (shapeType != null && shapeType != GeoShapeType.GEOMETRYCOLLECTION) {_            if (type.wktName().equals(shapeType.wktName()) == false) {_                throw new ElasticsearchParseException("Expected geometry type [{}] but found [{}]", shapeType, type)__            }_        }_        switch (type) {_            case POINT:_                return parsePoint(stream, ignoreZValue, coerce)__            case MULTIPOINT:_                return parseMultiPoint(stream, ignoreZValue, coerce)__            case LINESTRING:_                return parseLine(stream, ignoreZValue, coerce)__            case MULTILINESTRING:_                return parseMultiLine(stream, ignoreZValue, coerce)__            case POLYGON:_                return parsePolygon(stream, ignoreZValue, coerce)__            case MULTIPOLYGON:_                return parseMultiPolygon(stream, ignoreZValue, coerce)__            case ENVELOPE:_                return parseBBox(stream)__            case GEOMETRYCOLLECTION:_                return parseGeometryCollection(stream, ignoreZValue, coerce)__            default:_                throw new IllegalArgumentException("Unknown geometry type: " + type)__        }_    };parse,geometry,from,the,stream,tokenizer;private,static,shape,builder,parse,geometry,stream,tokenizer,stream,geo,shape,type,shape,type,final,boolean,ignore,zvalue,final,boolean,coerce,throws,ioexception,elasticsearch,parse,exception,final,geo,shape,type,type,geo,shape,type,for,name,next,word,stream,if,shape,type,null,shape,type,geo,shape,type,geometrycollection,if,type,wkt,name,equals,shape,type,wkt,name,false,throw,new,elasticsearch,parse,exception,expected,geometry,type,but,found,shape,type,type,switch,type,case,point,return,parse,point,stream,ignore,zvalue,coerce,case,multipoint,return,parse,multi,point,stream,ignore,zvalue,coerce,case,linestring,return,parse,line,stream,ignore,zvalue,coerce,case,multilinestring,return,parse,multi,line,stream,ignore,zvalue,coerce,case,polygon,return,parse,polygon,stream,ignore,zvalue,coerce,case,multipolygon,return,parse,multi,polygon,stream,ignore,zvalue,coerce,case,envelope,return,parse,bbox,stream,case,geometrycollection,return,parse,geometry,collection,stream,ignore,zvalue,coerce,default,throw,new,illegal,argument,exception,unknown,geometry,type,type
GeoWKTParser -> private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,                                               final boolean coerce)             throws IOException, ElasticsearchParseException;1545098986;parse geometry from the stream tokenizer;private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,_                                              final boolean coerce)_            throws IOException, ElasticsearchParseException {_        final GeoShapeType type = GeoShapeType.forName(nextWord(stream))__        if (shapeType != null && shapeType != GeoShapeType.GEOMETRYCOLLECTION) {_            if (type.wktName().equals(shapeType.wktName()) == false) {_                throw new ElasticsearchParseException("Expected geometry type [{}] but found [{}]", shapeType, type)__            }_        }_        switch (type) {_            case POINT:_                return parsePoint(stream, ignoreZValue, coerce)__            case MULTIPOINT:_                return parseMultiPoint(stream, ignoreZValue, coerce)__            case LINESTRING:_                return parseLine(stream, ignoreZValue, coerce)__            case MULTILINESTRING:_                return parseMultiLine(stream, ignoreZValue, coerce)__            case POLYGON:_                return parsePolygon(stream, ignoreZValue, coerce)__            case MULTIPOLYGON:_                return parseMultiPolygon(stream, ignoreZValue, coerce)__            case ENVELOPE:_                return parseBBox(stream)__            case GEOMETRYCOLLECTION:_                return parseGeometryCollection(stream, ignoreZValue, coerce)__            default:_                throw new IllegalArgumentException("Unknown geometry type: " + type)__        }_    };parse,geometry,from,the,stream,tokenizer;private,static,shape,builder,parse,geometry,stream,tokenizer,stream,geo,shape,type,shape,type,final,boolean,ignore,zvalue,final,boolean,coerce,throws,ioexception,elasticsearch,parse,exception,final,geo,shape,type,type,geo,shape,type,for,name,next,word,stream,if,shape,type,null,shape,type,geo,shape,type,geometrycollection,if,type,wkt,name,equals,shape,type,wkt,name,false,throw,new,elasticsearch,parse,exception,expected,geometry,type,but,found,shape,type,type,switch,type,case,point,return,parse,point,stream,ignore,zvalue,coerce,case,multipoint,return,parse,multi,point,stream,ignore,zvalue,coerce,case,linestring,return,parse,line,stream,ignore,zvalue,coerce,case,multilinestring,return,parse,multi,line,stream,ignore,zvalue,coerce,case,polygon,return,parse,polygon,stream,ignore,zvalue,coerce,case,multipolygon,return,parse,multi,polygon,stream,ignore,zvalue,coerce,case,envelope,return,parse,bbox,stream,case,geometrycollection,return,parse,geometry,collection,stream,ignore,zvalue,coerce,default,throw,new,illegal,argument,exception,unknown,geometry,type,type
GeoWKTParser -> private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,                                               final boolean coerce)             throws IOException, ElasticsearchParseException;1545148496;parse geometry from the stream tokenizer;private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,_                                              final boolean coerce)_            throws IOException, ElasticsearchParseException {_        final GeoShapeType type = GeoShapeType.forName(nextWord(stream))__        if (shapeType != null && shapeType != GeoShapeType.GEOMETRYCOLLECTION) {_            if (type.wktName().equals(shapeType.wktName()) == false) {_                throw new ElasticsearchParseException("Expected geometry type [{}] but found [{}]", shapeType, type)__            }_        }_        switch (type) {_            case POINT:_                return parsePoint(stream, ignoreZValue, coerce)__            case MULTIPOINT:_                return parseMultiPoint(stream, ignoreZValue, coerce)__            case LINESTRING:_                return parseLine(stream, ignoreZValue, coerce)__            case MULTILINESTRING:_                return parseMultiLine(stream, ignoreZValue, coerce)__            case POLYGON:_                return parsePolygon(stream, ignoreZValue, coerce)__            case MULTIPOLYGON:_                return parseMultiPolygon(stream, ignoreZValue, coerce)__            case ENVELOPE:_                return parseBBox(stream)__            case GEOMETRYCOLLECTION:_                return parseGeometryCollection(stream, ignoreZValue, coerce)__            default:_                throw new IllegalArgumentException("Unknown geometry type: " + type)__        }_    };parse,geometry,from,the,stream,tokenizer;private,static,shape,builder,parse,geometry,stream,tokenizer,stream,geo,shape,type,shape,type,final,boolean,ignore,zvalue,final,boolean,coerce,throws,ioexception,elasticsearch,parse,exception,final,geo,shape,type,type,geo,shape,type,for,name,next,word,stream,if,shape,type,null,shape,type,geo,shape,type,geometrycollection,if,type,wkt,name,equals,shape,type,wkt,name,false,throw,new,elasticsearch,parse,exception,expected,geometry,type,but,found,shape,type,type,switch,type,case,point,return,parse,point,stream,ignore,zvalue,coerce,case,multipoint,return,parse,multi,point,stream,ignore,zvalue,coerce,case,linestring,return,parse,line,stream,ignore,zvalue,coerce,case,multilinestring,return,parse,multi,line,stream,ignore,zvalue,coerce,case,polygon,return,parse,polygon,stream,ignore,zvalue,coerce,case,multipolygon,return,parse,multi,polygon,stream,ignore,zvalue,coerce,case,envelope,return,parse,bbox,stream,case,geometrycollection,return,parse,geometry,collection,stream,ignore,zvalue,coerce,default,throw,new,illegal,argument,exception,unknown,geometry,type,type
GeoWKTParser -> private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,                                               final boolean coerce)             throws IOException, ElasticsearchParseException;1548858030;parse geometry from the stream tokenizer;private static ShapeBuilder parseGeometry(StreamTokenizer stream, GeoShapeType shapeType, final boolean ignoreZValue,_                                              final boolean coerce)_            throws IOException, ElasticsearchParseException {_        final GeoShapeType type = GeoShapeType.forName(nextWord(stream))__        if (shapeType != null && shapeType != GeoShapeType.GEOMETRYCOLLECTION) {_            if (type.wktName().equals(shapeType.wktName()) == false) {_                throw new ElasticsearchParseException("Expected geometry type [{}] but found [{}]", shapeType, type)__            }_        }_        switch (type) {_            case POINT:_                return parsePoint(stream, ignoreZValue, coerce)__            case MULTIPOINT:_                return parseMultiPoint(stream, ignoreZValue, coerce)__            case LINESTRING:_                return parseLine(stream, ignoreZValue, coerce)__            case MULTILINESTRING:_                return parseMultiLine(stream, ignoreZValue, coerce)__            case POLYGON:_                return parsePolygon(stream, ignoreZValue, coerce)__            case MULTIPOLYGON:_                return parseMultiPolygon(stream, ignoreZValue, coerce)__            case ENVELOPE:_                return parseBBox(stream)__            case GEOMETRYCOLLECTION:_                return parseGeometryCollection(stream, ignoreZValue, coerce)__            default:_                throw new IllegalArgumentException("Unknown geometry type: " + type)__        }_    };parse,geometry,from,the,stream,tokenizer;private,static,shape,builder,parse,geometry,stream,tokenizer,stream,geo,shape,type,shape,type,final,boolean,ignore,zvalue,final,boolean,coerce,throws,ioexception,elasticsearch,parse,exception,final,geo,shape,type,type,geo,shape,type,for,name,next,word,stream,if,shape,type,null,shape,type,geo,shape,type,geometrycollection,if,type,wkt,name,equals,shape,type,wkt,name,false,throw,new,elasticsearch,parse,exception,expected,geometry,type,but,found,shape,type,type,switch,type,case,point,return,parse,point,stream,ignore,zvalue,coerce,case,multipoint,return,parse,multi,point,stream,ignore,zvalue,coerce,case,linestring,return,parse,line,stream,ignore,zvalue,coerce,case,multilinestring,return,parse,multi,line,stream,ignore,zvalue,coerce,case,polygon,return,parse,polygon,stream,ignore,zvalue,coerce,case,multipolygon,return,parse,multi,polygon,stream,ignore,zvalue,coerce,case,envelope,return,parse,bbox,stream,case,geometrycollection,return,parse,geometry,collection,stream,ignore,zvalue,coerce,default,throw,new,illegal,argument,exception,unknown,geometry,type,type
GeoWKTParser -> private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1524684173;next word in the stream;private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        if (stream.nextToken() != StreamTokenizer.TT_EOF) {_            throw new ElasticsearchParseException("expected end of WKT string but found additional text: "_                + tokenString(stream), stream.lineno())__        }_    };next,word,in,the,stream;private,static,void,check,eof,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,if,stream,next,token,stream,tokenizer,throw,new,elasticsearch,parse,exception,expected,end,of,wkt,string,but,found,additional,text,token,string,stream,stream,lineno
GeoWKTParser -> private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1527583663;next word in the stream;private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        if (stream.nextToken() != StreamTokenizer.TT_EOF) {_            throw new ElasticsearchParseException("expected end of WKT string but found additional text: "_                + tokenString(stream), stream.lineno())__        }_    };next,word,in,the,stream;private,static,void,check,eof,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,if,stream,next,token,stream,tokenizer,throw,new,elasticsearch,parse,exception,expected,end,of,wkt,string,but,found,additional,text,token,string,stream,stream,lineno
GeoWKTParser -> private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1542051604;next word in the stream;private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        if (stream.nextToken() != StreamTokenizer.TT_EOF) {_            throw new ElasticsearchParseException("expected end of WKT string but found additional text: "_                + tokenString(stream), stream.lineno())__        }_    };next,word,in,the,stream;private,static,void,check,eof,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,if,stream,next,token,stream,tokenizer,throw,new,elasticsearch,parse,exception,expected,end,of,wkt,string,but,found,additional,text,token,string,stream,stream,lineno
GeoWKTParser -> private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1545079094;next word in the stream;private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        if (stream.nextToken() != StreamTokenizer.TT_EOF) {_            throw new ElasticsearchParseException("expected end of WKT string but found additional text: "_                + tokenString(stream), stream.lineno())__        }_    };next,word,in,the,stream;private,static,void,check,eof,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,if,stream,next,token,stream,tokenizer,throw,new,elasticsearch,parse,exception,expected,end,of,wkt,string,but,found,additional,text,token,string,stream,stream,lineno
GeoWKTParser -> private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1545098986;next word in the stream;private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        if (stream.nextToken() != StreamTokenizer.TT_EOF) {_            throw new ElasticsearchParseException("expected end of WKT string but found additional text: "_                + tokenString(stream), stream.lineno())__        }_    };next,word,in,the,stream;private,static,void,check,eof,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,if,stream,next,token,stream,tokenizer,throw,new,elasticsearch,parse,exception,expected,end,of,wkt,string,but,found,additional,text,token,string,stream,stream,lineno
GeoWKTParser -> private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1545148496;next word in the stream;private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        if (stream.nextToken() != StreamTokenizer.TT_EOF) {_            throw new ElasticsearchParseException("expected end of WKT string but found additional text: "_                + tokenString(stream), stream.lineno())__        }_    };next,word,in,the,stream;private,static,void,check,eof,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,if,stream,next,token,stream,tokenizer,throw,new,elasticsearch,parse,exception,expected,end,of,wkt,string,but,found,additional,text,token,string,stream,stream,lineno
GeoWKTParser -> private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException;1548858030;next word in the stream;private static void checkEOF(StreamTokenizer stream) throws ElasticsearchParseException, IOException {_        if (stream.nextToken() != StreamTokenizer.TT_EOF) {_            throw new ElasticsearchParseException("expected end of WKT string but found additional text: "_                + tokenString(stream), stream.lineno())__        }_    };next,word,in,the,stream;private,static,void,check,eof,stream,tokenizer,stream,throws,elasticsearch,parse,exception,ioexception,if,stream,next,token,stream,tokenizer,throw,new,elasticsearch,parse,exception,expected,end,of,wkt,string,but,found,additional,text,token,string,stream,stream,lineno
GeoWKTParser -> public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,                                                  final BaseGeoShapeFieldMapper shapeMapper)             throws IOException, ElasticsearchParseException;1545079094;throws an exception if the parsed geometry type does not match the expected shape type;public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,_                                                 final BaseGeoShapeFieldMapper shapeMapper)_            throws IOException, ElasticsearchParseException {_        try (StringReader reader = new StringReader(parser.text())) {_            Explicit<Boolean> ignoreZValue = (shapeMapper == null) ? BaseGeoShapeFieldMapper.Defaults.IGNORE_Z_VALUE :_                shapeMapper.ignoreZValue()__            Explicit<Boolean> coerce = (shapeMapper == null) ? BaseGeoShapeFieldMapper.Defaults.COERCE : shapeMapper.coerce()__            _            StreamTokenizer tokenizer = new StreamTokenizer(reader)__            tokenizer.resetSyntax()__            tokenizer.wordChars('a', 'z')__            tokenizer.wordChars('A', 'Z')__            tokenizer.wordChars(128 + 32, 255)__            tokenizer.wordChars('0', '9')__            tokenizer.wordChars('-', '-')__            tokenizer.wordChars('+', '+')__            tokenizer.wordChars('.', '.')__            tokenizer.whitespaceChars(0, ' ')__            tokenizer.commentChar('#')__            ShapeBuilder builder = parseGeometry(tokenizer, shapeType, ignoreZValue.value(), coerce.value())__            checkEOF(tokenizer)__            return builder__        }_    };throws,an,exception,if,the,parsed,geometry,type,does,not,match,the,expected,shape,type;public,static,shape,builder,parse,expected,type,xcontent,parser,parser,final,geo,shape,type,shape,type,final,base,geo,shape,field,mapper,shape,mapper,throws,ioexception,elasticsearch,parse,exception,try,string,reader,reader,new,string,reader,parser,text,explicit,boolean,ignore,zvalue,shape,mapper,null,base,geo,shape,field,mapper,defaults,shape,mapper,ignore,zvalue,explicit,boolean,coerce,shape,mapper,null,base,geo,shape,field,mapper,defaults,coerce,shape,mapper,coerce,stream,tokenizer,tokenizer,new,stream,tokenizer,reader,tokenizer,reset,syntax,tokenizer,word,chars,a,z,tokenizer,word,chars,a,z,tokenizer,word,chars,128,32,255,tokenizer,word,chars,0,9,tokenizer,word,chars,tokenizer,word,chars,tokenizer,word,chars,tokenizer,whitespace,chars,0,tokenizer,comment,char,shape,builder,builder,parse,geometry,tokenizer,shape,type,ignore,zvalue,value,coerce,value,check,eof,tokenizer,return,builder
GeoWKTParser -> public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,                                                  final BaseGeoShapeFieldMapper shapeMapper)             throws IOException, ElasticsearchParseException;1545148496;throws an exception if the parsed geometry type does not match the expected shape type;public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,_                                                 final BaseGeoShapeFieldMapper shapeMapper)_            throws IOException, ElasticsearchParseException {_        try (StringReader reader = new StringReader(parser.text())) {_            Explicit<Boolean> ignoreZValue = (shapeMapper == null) ? BaseGeoShapeFieldMapper.Defaults.IGNORE_Z_VALUE :_                shapeMapper.ignoreZValue()__            Explicit<Boolean> coerce = (shapeMapper == null) ? BaseGeoShapeFieldMapper.Defaults.COERCE : shapeMapper.coerce()__            _            StreamTokenizer tokenizer = new StreamTokenizer(reader)__            tokenizer.resetSyntax()__            tokenizer.wordChars('a', 'z')__            tokenizer.wordChars('A', 'Z')__            tokenizer.wordChars(128 + 32, 255)__            tokenizer.wordChars('0', '9')__            tokenizer.wordChars('-', '-')__            tokenizer.wordChars('+', '+')__            tokenizer.wordChars('.', '.')__            tokenizer.whitespaceChars(0, ' ')__            tokenizer.commentChar('#')__            ShapeBuilder builder = parseGeometry(tokenizer, shapeType, ignoreZValue.value(), coerce.value())__            checkEOF(tokenizer)__            return builder__        }_    };throws,an,exception,if,the,parsed,geometry,type,does,not,match,the,expected,shape,type;public,static,shape,builder,parse,expected,type,xcontent,parser,parser,final,geo,shape,type,shape,type,final,base,geo,shape,field,mapper,shape,mapper,throws,ioexception,elasticsearch,parse,exception,try,string,reader,reader,new,string,reader,parser,text,explicit,boolean,ignore,zvalue,shape,mapper,null,base,geo,shape,field,mapper,defaults,shape,mapper,ignore,zvalue,explicit,boolean,coerce,shape,mapper,null,base,geo,shape,field,mapper,defaults,coerce,shape,mapper,coerce,stream,tokenizer,tokenizer,new,stream,tokenizer,reader,tokenizer,reset,syntax,tokenizer,word,chars,a,z,tokenizer,word,chars,a,z,tokenizer,word,chars,128,32,255,tokenizer,word,chars,0,9,tokenizer,word,chars,tokenizer,word,chars,tokenizer,word,chars,tokenizer,whitespace,chars,0,tokenizer,comment,char,shape,builder,builder,parse,geometry,tokenizer,shape,type,ignore,zvalue,value,coerce,value,check,eof,tokenizer,return,builder
GeoWKTParser -> public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,                                                  final BaseGeoShapeFieldMapper shapeMapper)             throws IOException, ElasticsearchParseException;1548858030;throws an exception if the parsed geometry type does not match the expected shape type;public static ShapeBuilder parseExpectedType(XContentParser parser, final GeoShapeType shapeType,_                                                 final BaseGeoShapeFieldMapper shapeMapper)_            throws IOException, ElasticsearchParseException {_        try (StringReader reader = new StringReader(parser.text())) {_            Explicit<Boolean> ignoreZValue = (shapeMapper == null) ? BaseGeoShapeFieldMapper.Defaults.IGNORE_Z_VALUE :_                shapeMapper.ignoreZValue()__            Explicit<Boolean> coerce = (shapeMapper == null) ? BaseGeoShapeFieldMapper.Defaults.COERCE : shapeMapper.coerce()__            _            StreamTokenizer tokenizer = new StreamTokenizer(reader)__            tokenizer.resetSyntax()__            tokenizer.wordChars('a', 'z')__            tokenizer.wordChars('A', 'Z')__            tokenizer.wordChars(128 + 32, 255)__            tokenizer.wordChars('0', '9')__            tokenizer.wordChars('-', '-')__            tokenizer.wordChars('+', '+')__            tokenizer.wordChars('.', '.')__            tokenizer.whitespaceChars(0, ' ')__            tokenizer.commentChar('#')__            ShapeBuilder builder = parseGeometry(tokenizer, shapeType, ignoreZValue.value(), coerce.value())__            checkEOF(tokenizer)__            return builder__        }_    };throws,an,exception,if,the,parsed,geometry,type,does,not,match,the,expected,shape,type;public,static,shape,builder,parse,expected,type,xcontent,parser,parser,final,geo,shape,type,shape,type,final,base,geo,shape,field,mapper,shape,mapper,throws,ioexception,elasticsearch,parse,exception,try,string,reader,reader,new,string,reader,parser,text,explicit,boolean,ignore,zvalue,shape,mapper,null,base,geo,shape,field,mapper,defaults,shape,mapper,ignore,zvalue,explicit,boolean,coerce,shape,mapper,null,base,geo,shape,field,mapper,defaults,coerce,shape,mapper,coerce,stream,tokenizer,tokenizer,new,stream,tokenizer,reader,tokenizer,reset,syntax,tokenizer,word,chars,a,z,tokenizer,word,chars,a,z,tokenizer,word,chars,128,32,255,tokenizer,word,chars,0,9,tokenizer,word,chars,tokenizer,word,chars,tokenizer,word,chars,tokenizer,whitespace,chars,0,tokenizer,comment,char,shape,builder,builder,parse,geometry,tokenizer,shape,type,ignore,zvalue,value,coerce,value,check,eof,tokenizer,return,builder
