commented;modifiers;parameterAmount;loc;comment;code
true;abstract;1;1;/**  * The current value is filled by a {@link LeafBucketCollector} that visits all the  * values of each document. This method saves this current value in a slot and should only be used  * in the context of a collection.  * See {@link #getLeafCollector}.  */ ;/**  * The current value is filled by a {@link LeafBucketCollector} that visits all the  * values of each document. This method saves this current value in a slot and should only be used  * in the context of a collection.  * See {@link #getLeafCollector}.  */ abstract void copyCurrent(int slot).
true;abstract;2;1;/**  * Compares the value in <code>from</code> with the value in <code>to</code>.  */ ;/**  * Compares the value in <code>from</code> with the value in <code>to</code>.  */ abstract int compare(int from, int to).
true;abstract;1;1;/**  * The current value is filled by a {@link LeafBucketCollector} that visits all the  * values of each document. This method compares this current value with the value present in  * the provided slot and should only be used in the context of a collection.  * See {@link #getLeafCollector}.  */ ;/**  * The current value is filled by a {@link LeafBucketCollector} that visits all the  * values of each document. This method compares this current value with the value present in  * the provided slot and should only be used in the context of a collection.  * See {@link #getLeafCollector}.  */ abstract int compareCurrent(int slot).
true;abstract;0;1;/**  * The current value is filled by a {@link LeafBucketCollector} that visits all the  * values of each document. This method compares this current value with the after value  * set on this source and should only be used in the context of a collection.  * See {@link #getLeafCollector}.  */ ;/**  * The current value is filled by a {@link LeafBucketCollector} that visits all the  * values of each document. This method compares this current value with the after value  * set on this source and should only be used in the context of a collection.  * See {@link #getLeafCollector}.  */ abstract int compareCurrentWithAfter().
true;abstract;1;1;/**  * Returns a hash code value for the provided <code>slot</code>.  */ ;/**  * Returns a hash code value for the provided <code>slot</code>.  */ abstract int hashCode(int slot).
true;abstract;0;1;/**  * Returns a hash code value for the current value.  */ ;/**  * Returns a hash code value for the current value.  */ abstract int hashCodeCurrent().
true;abstract;1;1;/**  * Sets the after value for this source. Values that compares smaller are filtered.  */ ;/**  * Sets the after value for this source. Values that compares smaller are filtered.  */ abstract void setAfter(Comparable value).
true;;0;3;/**  * Returns the after value set for this source.  */ ;/**  * Returns the after value set for this source.  */ T getAfter() {     return afterValue. }
true;abstract;1;1;/**  * Transforms the value in <code>slot</code> to a {@link Comparable} object.  */ ;/**  * Transforms the value in <code>slot</code> to a {@link Comparable} object.  */ abstract T toComparable(int slot) throws IOException.
true;abstract;2;1;/**  * Creates a {@link LeafBucketCollector} that extracts all values from a document and invokes  * {@link LeafBucketCollector#collect} on the provided <code>next</code> collector for each of them.  * The current value of this source is set on each call and can be accessed by <code>next</code> via  * the {@link #copyCurrent(int)} and {@link #compareCurrent(int)} methods. Note that these methods  * are only valid when invoked from the {@link LeafBucketCollector} created in this source.  */ ;/**  * Creates a {@link LeafBucketCollector} that extracts all values from a document and invokes  * {@link LeafBucketCollector#collect} on the provided <code>next</code> collector for each of them.  * The current value of this source is set on each call and can be accessed by <code>next</code> via  * the {@link #copyCurrent(int)} and {@link #compareCurrent(int)} methods. Note that these methods  * are only valid when invoked from the {@link LeafBucketCollector} created in this source.  */ abstract LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector next) throws IOException.
true;abstract;3;2;/**  * Creates a {@link LeafBucketCollector} that sets the current value for each document to the provided  * <code>value</code> and invokes {@link LeafBucketCollector#collect} on the provided <code>next</code> collector.  */ ;/**  * Creates a {@link LeafBucketCollector} that sets the current value for each document to the provided  * <code>value</code> and invokes {@link LeafBucketCollector#collect} on the provided <code>next</code> collector.  */ abstract LeafBucketCollector getLeafCollector(Comparable value, LeafReaderContext context, LeafBucketCollector next) throws IOException.
true;abstract;2;1;/**  * Returns a {@link SortedDocsProducer} or null if this source cannot produce sorted docs.  */ ;/**  * Returns a {@link SortedDocsProducer} or null if this source cannot produce sorted docs.  */ abstract SortedDocsProducer createSortedDocsProducerOrNull(IndexReader reader, Query query).
true;protected;2;16;/**  * Returns true if a {@link SortedDocsProducer} should be used to optimize the execution.  */ ;/**  * Returns true if a {@link SortedDocsProducer} should be used to optimize the execution.  */ protected boolean checkIfSortedDocsIsApplicable(IndexReader reader, MappedFieldType fieldType) {     if (fieldType == null || (missingBucket && afterValue == null) || fieldType.indexOptions() == IndexOptions.NONE || // inverse of the natural order     reverseMul == -1) {         return false.     }     if (reader.hasDeletions() && (reader.numDocs() == 0 || (double) reader.numDocs() / (double) reader.maxDoc() < 0.5)) {         // do not use the index if it has more than 50% of deleted docs         return false.     }     return true. }
