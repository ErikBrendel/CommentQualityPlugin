commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     taskId.writeTo(out).     parentTaskId.writeTo(out).     out.writeStringArrayNullable(nodes).     out.writeStringArrayNullable(actions).     out.writeOptionalTimeValue(timeout). }
false;public;0;9;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (taskId.isSet() && nodes.length > 0) {         validationException = addValidationError("task id cannot be used together with node ids", validationException).     }     return validationException. }
true;public,final;1;5;/**  * Sets the list of action masks for the actions that should be returned  */ ;/**  * Sets the list of action masks for the actions that should be returned  */ @SuppressWarnings("unchecked") public final Request setActions(String... actions) {     this.actions = actions.     return (Request) this. }
true;public;0;3;/**  * Return the list of action masks for the actions that should be returned  */ ;/**  * Return the list of action masks for the actions that should be returned  */ public String[] getActions() {     return actions. }
false;public,final;0;3;;public final String[] getNodes() {     return nodes. }
false;public,final;1;5;;@SuppressWarnings("unchecked") public final Request setNodes(String... nodes) {     this.nodes = nodes.     return (Request) this. }
true;public;0;3;/**  * Returns the id of the task that should be processed.  *  * By default tasks with any ids are returned.  */ ;/**  * Returns the id of the task that should be processed.  *  * By default tasks with any ids are returned.  */ public TaskId getTaskId() {     return taskId. }
false;public,final;1;5;;@SuppressWarnings("unchecked") public final Request setTaskId(TaskId taskId) {     this.taskId = taskId.     return (Request) this. }
true;public;0;3;/**  * Returns the parent task id that tasks should be filtered by  */ ;/**  * Returns the parent task id that tasks should be filtered by  */ public TaskId getParentTaskId() {     return parentTaskId. }
false;public;1;5;;@SuppressWarnings("unchecked") public Request setParentTaskId(TaskId parentTaskId) {     this.parentTaskId = parentTaskId.     return (Request) this. }
false;public;0;3;;public TimeValue getTimeout() {     return this.timeout. }
false;public,final;1;5;;@SuppressWarnings("unchecked") public final Request setTimeout(TimeValue timeout) {     this.timeout = timeout.     return (Request) this. }
false;public,final;1;5;;@SuppressWarnings("unchecked") public final Request setTimeout(String timeout) {     this.timeout = TimeValue.parseTimeValue(timeout, null, getClass().getSimpleName() + ".timeout").     return (Request) this. }
false;public;1;16;;public boolean match(Task task) {     if (getActions() != null && getActions().length > 0 && Regex.simpleMatch(getActions(), task.getAction()) == false) {         return false.     }     if (getTaskId().isSet()) {         if (getTaskId().getId() != task.getId()) {             return false.         }     }     if (parentTaskId.isSet()) {         if (parentTaskId.equals(task.getParentTaskId()) == false) {             return false.         }     }     return true. }
