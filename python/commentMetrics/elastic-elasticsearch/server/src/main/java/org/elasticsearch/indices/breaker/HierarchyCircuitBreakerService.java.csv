# id;timestamp;commentText;codeText;commentWords;codeWords
HierarchyCircuitBreakerService -> public void checkParentLimit(String label) throws CircuitBreakingException;1524684173;Checks whether the parent breaker has been tripped;public void checkParentLimit(String label) throws CircuitBreakingException {_        long totalUsed = 0__        for (CircuitBreaker breaker : this.breakers.values()) {_            totalUsed += (breaker.getUsed() * breaker.getOverhead())__        }__        long parentLimit = this.parentSettings.getLimit()__        if (totalUsed > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final String message = "[parent] Data too large, data for [" + label + "]" +_                    " would be [" + totalUsed + "/" + new ByteSizeValue(totalUsed) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]"__            throw new CircuitBreakingException(message, totalUsed, parentLimit)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,string,label,throws,circuit,breaking,exception,long,total,used,0,for,circuit,breaker,breaker,this,breakers,values,total,used,breaker,get,used,breaker,get,overhead,long,parent,limit,this,parent,settings,get,limit,if,total,used,parent,limit,this,parent,trip,count,increment,and,get,final,string,message,parent,data,too,large,data,for,label,would,be,total,used,new,byte,size,value,total,used,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,throw,new,circuit,breaking,exception,message,total,used,parent,limit
HierarchyCircuitBreakerService -> public void checkParentLimit(String label) throws CircuitBreakingException;1531179852;Checks whether the parent breaker has been tripped;public void checkParentLimit(String label) throws CircuitBreakingException {_        long totalUsed = 0__        for (CircuitBreaker breaker : this.breakers.values()) {_            totalUsed += (breaker.getUsed() * breaker.getOverhead())__        }__        long parentLimit = this.parentSettings.getLimit()__        if (totalUsed > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final String message = "[parent] Data too large, data for [" + label + "]" +_                    " would be [" + totalUsed + "/" + new ByteSizeValue(totalUsed) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]"__            throw new CircuitBreakingException(message, totalUsed, parentLimit)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,string,label,throws,circuit,breaking,exception,long,total,used,0,for,circuit,breaker,breaker,this,breakers,values,total,used,breaker,get,used,breaker,get,overhead,long,parent,limit,this,parent,settings,get,limit,if,total,used,parent,limit,this,parent,trip,count,increment,and,get,final,string,message,parent,data,too,large,data,for,label,would,be,total,used,new,byte,size,value,total,used,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,throw,new,circuit,breaking,exception,message,total,used,parent,limit
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1524684173;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1531179852;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1531729807;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1532353780;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1535383145;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1540238977;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1540486836;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1541160764;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1542609384;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1542646292;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1544524258;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException;1547625930;Validate that child settings are valid;public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {_        for (BreakerSettings childSettings : childrenSettings) {_            _            if (childSettings.getLimit() == -1) {_                continue__            }__            if (childSettings.getOverhead() < 0) {_                throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative")__            }_        }_    };validate,that,child,settings,are,valid;public,static,void,validate,settings,breaker,settings,children,settings,throws,illegal,state,exception,for,breaker,settings,child,settings,children,settings,if,child,settings,get,limit,1,continue,if,child,settings,get,overhead,0,throw,new,illegal,state,exception,child,breaker,overhead,child,settings,must,be,non,negative
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1531729807;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        long totalUsed = parentUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (totalUsed > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final String message = "[parent] Data too large, data for [" + label + "]" +_                    " would be [" + totalUsed + "/" + new ByteSizeValue(totalUsed) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]"__            throw new CircuitBreakingException(message, totalUsed, parentLimit)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,long,total,used,parent,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,total,used,parent,limit,this,parent,trip,count,increment,and,get,final,string,message,parent,data,too,large,data,for,label,would,be,total,used,new,byte,size,value,total,used,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,throw,new,circuit,breaking,exception,message,total,used,parent,limit
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1532353780;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final ParentMemoryUsage parentUsed = parentUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (parentUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + parentUsed.totalUsage + "/" + new ByteSizeValue(parentUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = parentUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            throw new CircuitBreakingException(message.toString(), parentUsed.totalUsage, parentLimit)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,parent,memory,usage,parent,used,parent,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,parent,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,parent,used,total,usage,new,byte,size,value,parent,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,parent,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,throw,new,circuit,breaking,exception,message,to,string,parent,used,total,usage,parent,limit
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1535383145;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final ParentMemoryUsage parentUsed = parentUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (parentUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + parentUsed.totalUsage + "/" + new ByteSizeValue(parentUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = parentUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            throw new CircuitBreakingException(message.toString(), parentUsed.totalUsage, parentLimit)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,parent,memory,usage,parent,used,parent,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,parent,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,parent,used,total,usage,new,byte,size,value,parent,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,parent,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,throw,new,circuit,breaking,exception,message,to,string,parent,used,total,usage,parent,limit
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1540238977;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final ParentMemoryUsage parentUsed = parentUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (parentUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + parentUsed.totalUsage + "/" + new ByteSizeValue(parentUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = parentUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            throw new CircuitBreakingException(message.toString(), parentUsed.totalUsage, parentLimit)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,parent,memory,usage,parent,used,parent,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,parent,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,parent,used,total,usage,new,byte,size,value,parent,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,parent,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,throw,new,circuit,breaking,exception,message,to,string,parent,used,total,usage,parent,limit
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1540486836;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final ParentMemoryUsage parentUsed = parentUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (parentUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + parentUsed.totalUsage + "/" + new ByteSizeValue(parentUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = parentUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            throw new CircuitBreakingException(message.toString(), parentUsed.totalUsage, parentLimit)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,parent,memory,usage,parent,used,parent,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,parent,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,parent,used,total,usage,new,byte,size,value,parent,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,parent,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,throw,new,circuit,breaking,exception,message,to,string,parent,used,total,usage,parent,limit
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1541160764;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final MemoryUsage memoryUsed = memoryUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (memoryUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + memoryUsed.totalUsage + "/" + new ByteSizeValue(memoryUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = memoryUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            _            _            CircuitBreaker.Durability durability = memoryUsed.transientChildUsage >= memoryUsed.permanentChildUsage ?_                CircuitBreaker.Durability.TRANSIENT : CircuitBreaker.Durability.PERMANENT__            throw new CircuitBreakingException(message.toString(), memoryUsed.totalUsage, parentLimit, durability)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,memory,usage,memory,used,memory,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,memory,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,memory,used,total,usage,new,byte,size,value,memory,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,memory,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,circuit,breaker,durability,durability,memory,used,transient,child,usage,memory,used,permanent,child,usage,circuit,breaker,durability,transient,circuit,breaker,durability,permanent,throw,new,circuit,breaking,exception,message,to,string,memory,used,total,usage,parent,limit,durability
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1542609384;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final MemoryUsage memoryUsed = memoryUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (memoryUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + memoryUsed.totalUsage + "/" + new ByteSizeValue(memoryUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = memoryUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            _            _            CircuitBreaker.Durability durability = memoryUsed.transientChildUsage >= memoryUsed.permanentChildUsage ?_                CircuitBreaker.Durability.TRANSIENT : CircuitBreaker.Durability.PERMANENT__            throw new CircuitBreakingException(message.toString(), memoryUsed.totalUsage, parentLimit, durability)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,memory,usage,memory,used,memory,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,memory,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,memory,used,total,usage,new,byte,size,value,memory,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,memory,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,circuit,breaker,durability,durability,memory,used,transient,child,usage,memory,used,permanent,child,usage,circuit,breaker,durability,transient,circuit,breaker,durability,permanent,throw,new,circuit,breaking,exception,message,to,string,memory,used,total,usage,parent,limit,durability
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1542646292;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final MemoryUsage memoryUsed = memoryUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (memoryUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + memoryUsed.totalUsage + "/" + new ByteSizeValue(memoryUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = memoryUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            _            _            CircuitBreaker.Durability durability = memoryUsed.transientChildUsage >= memoryUsed.permanentChildUsage ?_                CircuitBreaker.Durability.TRANSIENT : CircuitBreaker.Durability.PERMANENT__            throw new CircuitBreakingException(message.toString(), memoryUsed.totalUsage, parentLimit, durability)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,memory,usage,memory,used,memory,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,memory,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,memory,used,total,usage,new,byte,size,value,memory,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,memory,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,circuit,breaker,durability,durability,memory,used,transient,child,usage,memory,used,permanent,child,usage,circuit,breaker,durability,transient,circuit,breaker,durability,permanent,throw,new,circuit,breaking,exception,message,to,string,memory,used,total,usage,parent,limit,durability
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1544524258;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final MemoryUsage memoryUsed = memoryUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (memoryUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + memoryUsed.totalUsage + "/" + new ByteSizeValue(memoryUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = memoryUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            _            _            CircuitBreaker.Durability durability = memoryUsed.transientChildUsage >= memoryUsed.permanentChildUsage ?_                CircuitBreaker.Durability.TRANSIENT : CircuitBreaker.Durability.PERMANENT__            throw new CircuitBreakingException(message.toString(), memoryUsed.totalUsage, parentLimit, durability)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,memory,usage,memory,used,memory,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,memory,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,memory,used,total,usage,new,byte,size,value,memory,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,memory,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,circuit,breaker,durability,durability,memory,used,transient,child,usage,memory,used,permanent,child,usage,circuit,breaker,durability,transient,circuit,breaker,durability,permanent,throw,new,circuit,breaking,exception,message,to,string,memory,used,total,usage,parent,limit,durability
HierarchyCircuitBreakerService -> public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException;1547625930;Checks whether the parent breaker has been tripped;public void checkParentLimit(long newBytesReserved, String label) throws CircuitBreakingException {_        final MemoryUsage memoryUsed = memoryUsed(newBytesReserved)__        long parentLimit = this.parentSettings.getLimit()__        if (memoryUsed.totalUsage > parentLimit) {_            this.parentTripCount.incrementAndGet()__            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +_                    " would be [" + memoryUsed.totalUsage + "/" + new ByteSizeValue(memoryUsed.totalUsage) + "]" +_                    ", which is larger than the limit of [" +_                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]")__            if (this.trackRealMemoryUsage) {_                final long realUsage = memoryUsed.baseUsage__                message.append(", real usage: [")__                message.append(realUsage)__                message.append("/")__                message.append(new ByteSizeValue(realUsage))__                message.append("], new bytes reserved: [")__                message.append(newBytesReserved)__                message.append("/")__                message.append(new ByteSizeValue(newBytesReserved))__                message.append("]")__            } else {_                message.append(", usages [")__                message.append(String.join(", ",_                    this.breakers.entrySet().stream().map(e -> {_                        final CircuitBreaker breaker = e.getValue()__                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead())__                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed)__                    })_                        .collect(Collectors.toList())))__                message.append("]")__            }_            _            _            CircuitBreaker.Durability durability = memoryUsed.transientChildUsage >= memoryUsed.permanentChildUsage ?_                CircuitBreaker.Durability.TRANSIENT : CircuitBreaker.Durability.PERMANENT__            throw new CircuitBreakingException(message.toString(), memoryUsed.totalUsage, parentLimit, durability)__        }_    };checks,whether,the,parent,breaker,has,been,tripped;public,void,check,parent,limit,long,new,bytes,reserved,string,label,throws,circuit,breaking,exception,final,memory,usage,memory,used,memory,used,new,bytes,reserved,long,parent,limit,this,parent,settings,get,limit,if,memory,used,total,usage,parent,limit,this,parent,trip,count,increment,and,get,final,string,builder,message,new,string,builder,parent,data,too,large,data,for,label,would,be,memory,used,total,usage,new,byte,size,value,memory,used,total,usage,which,is,larger,than,the,limit,of,parent,limit,new,byte,size,value,parent,limit,if,this,track,real,memory,usage,final,long,real,usage,memory,used,base,usage,message,append,real,usage,message,append,real,usage,message,append,message,append,new,byte,size,value,real,usage,message,append,new,bytes,reserved,message,append,new,bytes,reserved,message,append,message,append,new,byte,size,value,new,bytes,reserved,message,append,else,message,append,usages,message,append,string,join,this,breakers,entry,set,stream,map,e,final,circuit,breaker,breaker,e,get,value,final,long,breaker,used,long,breaker,get,used,breaker,get,overhead,return,e,get,key,breaker,used,new,byte,size,value,breaker,used,collect,collectors,to,list,message,append,circuit,breaker,durability,durability,memory,used,transient,child,usage,memory,used,permanent,child,usage,circuit,breaker,durability,transient,circuit,breaker,durability,permanent,throw,new,circuit,breaking,exception,message,to,string,memory,used,total,usage,parent,limit,durability
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1524684173;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1531179852;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1531729807;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1532353780;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1535383145;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1540238977;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        Loggers.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,loggers,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1540486836;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1541160764;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1542609384;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1542646292;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1544524258;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
HierarchyCircuitBreakerService -> @Override     public void registerBreaker(BreakerSettings breakerSettings);1547625930;Allows to register a custom circuit breaker._Warning: Will overwrite any existing custom breaker with the same name.;@Override_    public void registerBreaker(BreakerSettings breakerSettings) {_        _        validateSettings(new BreakerSettings[] {breakerSettings})___        if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {_            CircuitBreaker breaker = new NoopCircuitBreaker(breakerSettings.getName())__            breakers.put(breakerSettings.getName(), breaker)__        } else {_            CircuitBreaker oldBreaker__            CircuitBreaker breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                    LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                    this, breakerSettings.getName())___            for (__) {_                oldBreaker = breakers.putIfAbsent(breakerSettings.getName(), breaker)__                if (oldBreaker == null) {_                    return__                }_                breaker = new ChildMemoryCircuitBreaker(breakerSettings,_                        (ChildMemoryCircuitBreaker)oldBreaker,_                        LogManager.getLogger(CHILD_LOGGER_PREFIX + breakerSettings.getName()),_                        this, breakerSettings.getName())___                if (breakers.replace(breakerSettings.getName(), oldBreaker, breaker)) {_                    return__                }_            }_        }__    };allows,to,register,a,custom,circuit,breaker,warning,will,overwrite,any,existing,custom,breaker,with,the,same,name;override,public,void,register,breaker,breaker,settings,breaker,settings,validate,settings,new,breaker,settings,breaker,settings,if,breaker,settings,get,type,circuit,breaker,type,noop,circuit,breaker,breaker,new,noop,circuit,breaker,breaker,settings,get,name,breakers,put,breaker,settings,get,name,breaker,else,circuit,breaker,old,breaker,circuit,breaker,breaker,new,child,memory,circuit,breaker,breaker,settings,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,for,old,breaker,breakers,put,if,absent,breaker,settings,get,name,breaker,if,old,breaker,null,return,breaker,new,child,memory,circuit,breaker,breaker,settings,child,memory,circuit,breaker,old,breaker,log,manager,get,logger,breaker,settings,get,name,this,breaker,settings,get,name,if,breakers,replace,breaker,settings,get,name,old,breaker,breaker,return
