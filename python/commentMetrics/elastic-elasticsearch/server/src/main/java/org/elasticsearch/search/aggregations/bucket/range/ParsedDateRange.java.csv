commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getType() {     return DateRangeAggregationBuilder.NAME. }
false;public,static;2;5;;public static ParsedDateRange fromXContent(XContentParser parser, String name) throws IOException {     ParsedDateRange aggregation = PARSER.parse(parser, null).     aggregation.setName(name).     return aggregation. }
false;public;0;4;;@Override public Object getFrom() {     return doubleAsDateTime(from). }
false;public;0;4;;@Override public Object getTo() {     return doubleAsDateTime(to). }
false;private,static;1;6;;private static ZonedDateTime doubleAsDateTime(Double d) {     if (d == null || Double.isInfinite(d)) {         return null.     }     return Instant.ofEpochMilli(d.longValue()).atZone(ZoneOffset.UTC). }
false;static;2;3;;static ParsedBucket fromXContent(final XContentParser parser, final boolean keyed) throws IOException {     return parseRangeBucketXContent(parser, ParsedBucket::new, keyed). }
