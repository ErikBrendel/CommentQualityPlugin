# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterStateObserver -> StoredState -> public boolean isOlderOrDifferentMaster(ClusterState clusterState);1524684173;returns true if stored state is older then given state or they are from a different master, meaning they can't be compared;public boolean isOlderOrDifferentMaster(ClusterState clusterState) {_            return version < clusterState.version() || Objects.equals(masterNodeId, clusterState.nodes().getMasterNodeId()) == false__        };returns,true,if,stored,state,is,older,then,given,state,or,they,are,from,a,different,master,meaning,they,can,t,be,compared;public,boolean,is,older,or,different,master,cluster,state,cluster,state,return,version,cluster,state,version,objects,equals,master,node,id,cluster,state,nodes,get,master,node,id,false
ClusterStateObserver -> StoredState -> public boolean isOlderOrDifferentMaster(ClusterState clusterState);1540847035;returns true if stored state is older then given state or they are from a different master, meaning they can't be compared;public boolean isOlderOrDifferentMaster(ClusterState clusterState) {_            return version < clusterState.version() || Objects.equals(masterNodeId, clusterState.nodes().getMasterNodeId()) == false__        };returns,true,if,stored,state,is,older,then,given,state,or,they,are,from,a,different,master,meaning,they,can,t,be,compared;public,boolean,is,older,or,different,master,cluster,state,cluster,state,return,version,cluster,state,version,objects,equals,master,node,id,cluster,state,nodes,get,master,node,id,false
ClusterStateObserver -> StoredState -> public boolean isOlderOrDifferentMaster(ClusterState clusterState);1540912197;returns true if stored state is older then given state or they are from a different master, meaning they can't be compared;public boolean isOlderOrDifferentMaster(ClusterState clusterState) {_            return version < clusterState.version() || Objects.equals(masterNodeId, clusterState.nodes().getMasterNodeId()) == false__        };returns,true,if,stored,state,is,older,then,given,state,or,they,are,from,a,different,master,meaning,they,can,t,be,compared;public,boolean,is,older,or,different,master,cluster,state,cluster,state,return,version,cluster,state,version,objects,equals,master,node,id,cluster,state,nodes,get,master,node,id,false
ClusterStateObserver -> public void waitForNextChange(Listener listener, Predicate<ClusterState> statePredicate, @Nullable TimeValue timeOutValue);1524684173;Wait for the next cluster state which satisfies statePredicate__@param listener        callback listener_@param statePredicate predicate to check whether cluster state changes are relevant and the callback should be called_@param timeOutValue    a timeout for waiting. If null the global observer timeout will be used.;public void waitForNextChange(Listener listener, Predicate<ClusterState> statePredicate, @Nullable TimeValue timeOutValue) {_        listener = new ContextPreservingListener(listener, contextHolder.newRestorableContext(false))__        if (observingContext.get() != null) {_            throw new ElasticsearchException("already waiting for a cluster state change")__        }__        Long timeoutTimeLeftMS__        if (timeOutValue == null) {_            timeOutValue = this.timeOutValue__            if (timeOutValue != null) {_                long timeSinceStartMS = TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)__                timeoutTimeLeftMS = timeOutValue.millis() - timeSinceStartMS__                if (timeoutTimeLeftMS <= 0L) {_                    _                    logger.trace("observer timed out. notifying listener. timeout setting [{}], time since start [{}]", timeOutValue, new TimeValue(timeSinceStartMS))__                    _                    timedOut = true__                    lastObservedState.set(new StoredState(clusterApplierService.state()))__                    listener.onTimeout(timeOutValue)__                    return__                }_            } else {_                timeoutTimeLeftMS = null__            }_        } else {_            this.startTimeNS = System.nanoTime()__            this.timeOutValue = timeOutValue__            timeoutTimeLeftMS = timeOutValue.millis()__            timedOut = false__        }__        _        _        ClusterState newState = clusterApplierService.state()__        if (lastObservedState.get().isOlderOrDifferentMaster(newState) && statePredicate.test(newState)) {_            _            logger.trace("observer: sampled state accepted by predicate ({})", newState)__            lastObservedState.set(new StoredState(newState))__            listener.onNewClusterState(newState)__        } else {_            logger.trace("observer: sampled state rejected by predicate ({}). adding listener to ClusterService", newState)__            final ObservingContext context = new ObservingContext(listener, statePredicate)__            if (!observingContext.compareAndSet(null, context)) {_                throw new ElasticsearchException("already waiting for a cluster state change")__            }_            clusterApplierService.addTimeoutListener(timeoutTimeLeftMS == null ? null : new TimeValue(timeoutTimeLeftMS), clusterStateListener)__        }_    };wait,for,the,next,cluster,state,which,satisfies,state,predicate,param,listener,callback,listener,param,state,predicate,predicate,to,check,whether,cluster,state,changes,are,relevant,and,the,callback,should,be,called,param,time,out,value,a,timeout,for,waiting,if,null,the,global,observer,timeout,will,be,used;public,void,wait,for,next,change,listener,listener,predicate,cluster,state,state,predicate,nullable,time,value,time,out,value,listener,new,context,preserving,listener,listener,context,holder,new,restorable,context,false,if,observing,context,get,null,throw,new,elasticsearch,exception,already,waiting,for,a,cluster,state,change,long,timeout,time,left,ms,if,time,out,value,null,time,out,value,this,time,out,value,if,time,out,value,null,long,time,since,start,ms,time,value,nsec,to,msec,system,nano,time,start,time,ns,timeout,time,left,ms,time,out,value,millis,time,since,start,ms,if,timeout,time,left,ms,0l,logger,trace,observer,timed,out,notifying,listener,timeout,setting,time,since,start,time,out,value,new,time,value,time,since,start,ms,timed,out,true,last,observed,state,set,new,stored,state,cluster,applier,service,state,listener,on,timeout,time,out,value,return,else,timeout,time,left,ms,null,else,this,start,time,ns,system,nano,time,this,time,out,value,time,out,value,timeout,time,left,ms,time,out,value,millis,timed,out,false,cluster,state,new,state,cluster,applier,service,state,if,last,observed,state,get,is,older,or,different,master,new,state,state,predicate,test,new,state,logger,trace,observer,sampled,state,accepted,by,predicate,new,state,last,observed,state,set,new,stored,state,new,state,listener,on,new,cluster,state,new,state,else,logger,trace,observer,sampled,state,rejected,by,predicate,adding,listener,to,cluster,service,new,state,final,observing,context,context,new,observing,context,listener,state,predicate,if,observing,context,compare,and,set,null,context,throw,new,elasticsearch,exception,already,waiting,for,a,cluster,state,change,cluster,applier,service,add,timeout,listener,timeout,time,left,ms,null,null,new,time,value,timeout,time,left,ms,cluster,state,listener
ClusterStateObserver -> public void waitForNextChange(Listener listener, Predicate<ClusterState> statePredicate, @Nullable TimeValue timeOutValue);1540847035;Wait for the next cluster state which satisfies statePredicate__@param listener        callback listener_@param statePredicate predicate to check whether cluster state changes are relevant and the callback should be called_@param timeOutValue    a timeout for waiting. If null the global observer timeout will be used.;public void waitForNextChange(Listener listener, Predicate<ClusterState> statePredicate, @Nullable TimeValue timeOutValue) {_        listener = new ContextPreservingListener(listener, contextHolder.newRestorableContext(false))__        if (observingContext.get() != null) {_            throw new ElasticsearchException("already waiting for a cluster state change")__        }__        Long timeoutTimeLeftMS__        if (timeOutValue == null) {_            timeOutValue = this.timeOutValue__            if (timeOutValue != null) {_                long timeSinceStartMS = TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)__                timeoutTimeLeftMS = timeOutValue.millis() - timeSinceStartMS__                if (timeoutTimeLeftMS <= 0L) {_                    _                    logger.trace("observer timed out. notifying listener. timeout setting [{}], time since start [{}]",_                        timeOutValue, new TimeValue(timeSinceStartMS))__                    _                    timedOut = true__                    lastObservedState.set(new StoredState(clusterApplierService.state()))__                    listener.onTimeout(timeOutValue)__                    return__                }_            } else {_                timeoutTimeLeftMS = null__            }_        } else {_            this.startTimeNS = System.nanoTime()__            this.timeOutValue = timeOutValue__            timeoutTimeLeftMS = timeOutValue.millis()__            timedOut = false__        }__        _        _        ClusterState newState = clusterApplierService.state()__        if (lastObservedState.get().isOlderOrDifferentMaster(newState) && statePredicate.test(newState)) {_            _            logger.trace("observer: sampled state accepted by predicate ({})", newState)__            lastObservedState.set(new StoredState(newState))__            listener.onNewClusterState(newState)__        } else {_            logger.trace("observer: sampled state rejected by predicate ({}). adding listener to ClusterService", newState)__            final ObservingContext context = new ObservingContext(listener, statePredicate)__            if (!observingContext.compareAndSet(null, context)) {_                throw new ElasticsearchException("already waiting for a cluster state change")__            }_            clusterApplierService.addTimeoutListener(timeoutTimeLeftMS == null ?_                null : new TimeValue(timeoutTimeLeftMS), clusterStateListener)__        }_    };wait,for,the,next,cluster,state,which,satisfies,state,predicate,param,listener,callback,listener,param,state,predicate,predicate,to,check,whether,cluster,state,changes,are,relevant,and,the,callback,should,be,called,param,time,out,value,a,timeout,for,waiting,if,null,the,global,observer,timeout,will,be,used;public,void,wait,for,next,change,listener,listener,predicate,cluster,state,state,predicate,nullable,time,value,time,out,value,listener,new,context,preserving,listener,listener,context,holder,new,restorable,context,false,if,observing,context,get,null,throw,new,elasticsearch,exception,already,waiting,for,a,cluster,state,change,long,timeout,time,left,ms,if,time,out,value,null,time,out,value,this,time,out,value,if,time,out,value,null,long,time,since,start,ms,time,value,nsec,to,msec,system,nano,time,start,time,ns,timeout,time,left,ms,time,out,value,millis,time,since,start,ms,if,timeout,time,left,ms,0l,logger,trace,observer,timed,out,notifying,listener,timeout,setting,time,since,start,time,out,value,new,time,value,time,since,start,ms,timed,out,true,last,observed,state,set,new,stored,state,cluster,applier,service,state,listener,on,timeout,time,out,value,return,else,timeout,time,left,ms,null,else,this,start,time,ns,system,nano,time,this,time,out,value,time,out,value,timeout,time,left,ms,time,out,value,millis,timed,out,false,cluster,state,new,state,cluster,applier,service,state,if,last,observed,state,get,is,older,or,different,master,new,state,state,predicate,test,new,state,logger,trace,observer,sampled,state,accepted,by,predicate,new,state,last,observed,state,set,new,stored,state,new,state,listener,on,new,cluster,state,new,state,else,logger,trace,observer,sampled,state,rejected,by,predicate,adding,listener,to,cluster,service,new,state,final,observing,context,context,new,observing,context,listener,state,predicate,if,observing,context,compare,and,set,null,context,throw,new,elasticsearch,exception,already,waiting,for,a,cluster,state,change,cluster,applier,service,add,timeout,listener,timeout,time,left,ms,null,null,new,time,value,timeout,time,left,ms,cluster,state,listener
ClusterStateObserver -> public void waitForNextChange(Listener listener, Predicate<ClusterState> statePredicate, @Nullable TimeValue timeOutValue);1540912197;Wait for the next cluster state which satisfies statePredicate__@param listener        callback listener_@param statePredicate predicate to check whether cluster state changes are relevant and the callback should be called_@param timeOutValue    a timeout for waiting. If null the global observer timeout will be used.;public void waitForNextChange(Listener listener, Predicate<ClusterState> statePredicate, @Nullable TimeValue timeOutValue) {_        listener = new ContextPreservingListener(listener, contextHolder.newRestorableContext(false))__        if (observingContext.get() != null) {_            throw new ElasticsearchException("already waiting for a cluster state change")__        }__        Long timeoutTimeLeftMS__        if (timeOutValue == null) {_            timeOutValue = this.timeOutValue__            if (timeOutValue != null) {_                long timeSinceStartMS = TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)__                timeoutTimeLeftMS = timeOutValue.millis() - timeSinceStartMS__                if (timeoutTimeLeftMS <= 0L) {_                    _                    logger.trace("observer timed out. notifying listener. timeout setting [{}], time since start [{}]",_                        timeOutValue, new TimeValue(timeSinceStartMS))__                    _                    timedOut = true__                    lastObservedState.set(new StoredState(clusterApplierService.state()))__                    listener.onTimeout(timeOutValue)__                    return__                }_            } else {_                timeoutTimeLeftMS = null__            }_        } else {_            this.startTimeNS = System.nanoTime()__            this.timeOutValue = timeOutValue__            timeoutTimeLeftMS = timeOutValue.millis()__            timedOut = false__        }__        _        _        ClusterState newState = clusterApplierService.state()__        if (lastObservedState.get().isOlderOrDifferentMaster(newState) && statePredicate.test(newState)) {_            _            logger.trace("observer: sampled state accepted by predicate ({})", newState)__            lastObservedState.set(new StoredState(newState))__            listener.onNewClusterState(newState)__        } else {_            logger.trace("observer: sampled state rejected by predicate ({}). adding listener to ClusterService", newState)__            final ObservingContext context = new ObservingContext(listener, statePredicate)__            if (!observingContext.compareAndSet(null, context)) {_                throw new ElasticsearchException("already waiting for a cluster state change")__            }_            clusterApplierService.addTimeoutListener(timeoutTimeLeftMS == null ?_                null : new TimeValue(timeoutTimeLeftMS), clusterStateListener)__        }_    };wait,for,the,next,cluster,state,which,satisfies,state,predicate,param,listener,callback,listener,param,state,predicate,predicate,to,check,whether,cluster,state,changes,are,relevant,and,the,callback,should,be,called,param,time,out,value,a,timeout,for,waiting,if,null,the,global,observer,timeout,will,be,used;public,void,wait,for,next,change,listener,listener,predicate,cluster,state,state,predicate,nullable,time,value,time,out,value,listener,new,context,preserving,listener,listener,context,holder,new,restorable,context,false,if,observing,context,get,null,throw,new,elasticsearch,exception,already,waiting,for,a,cluster,state,change,long,timeout,time,left,ms,if,time,out,value,null,time,out,value,this,time,out,value,if,time,out,value,null,long,time,since,start,ms,time,value,nsec,to,msec,system,nano,time,start,time,ns,timeout,time,left,ms,time,out,value,millis,time,since,start,ms,if,timeout,time,left,ms,0l,logger,trace,observer,timed,out,notifying,listener,timeout,setting,time,since,start,time,out,value,new,time,value,time,since,start,ms,timed,out,true,last,observed,state,set,new,stored,state,cluster,applier,service,state,listener,on,timeout,time,out,value,return,else,timeout,time,left,ms,null,else,this,start,time,ns,system,nano,time,this,time,out,value,time,out,value,timeout,time,left,ms,time,out,value,millis,timed,out,false,cluster,state,new,state,cluster,applier,service,state,if,last,observed,state,get,is,older,or,different,master,new,state,state,predicate,test,new,state,logger,trace,observer,sampled,state,accepted,by,predicate,new,state,last,observed,state,set,new,stored,state,new,state,listener,on,new,cluster,state,new,state,else,logger,trace,observer,sampled,state,rejected,by,predicate,adding,listener,to,cluster,service,new,state,final,observing,context,context,new,observing,context,listener,state,predicate,if,observing,context,compare,and,set,null,context,throw,new,elasticsearch,exception,already,waiting,for,a,cluster,state,change,cluster,applier,service,add,timeout,listener,timeout,time,left,ms,null,null,new,time,value,timeout,time,left,ms,cluster,state,listener
ClusterStateObserver -> Listener -> void onClusterServiceClose()_;1524684173;called when the cluster service is closed;void onClusterServiceClose()_;called,when,the,cluster,service,is,closed;void,on,cluster,service,close
ClusterStateObserver -> Listener -> void onClusterServiceClose()_;1540847035;called when the cluster service is closed;void onClusterServiceClose()_;called,when,the,cluster,service,is,closed;void,on,cluster,service,close
ClusterStateObserver -> Listener -> void onClusterServiceClose()_;1540912197;called when the cluster service is closed;void onClusterServiceClose()_;called,when,the,cluster,service,is,closed;void,on,cluster,service,close
ClusterStateObserver -> public ClusterStateObserver(ClusterState initialState, ClusterService clusterService, @Nullable TimeValue timeout, Logger logger,                                 ThreadContext contextHolder);1524684173;@param timeout        a global timeout for this observer. After it has expired the observer_will fail any existing or new #waitForNextChange calls. Set to null_to wait indefinitely;public ClusterStateObserver(ClusterState initialState, ClusterService clusterService, @Nullable TimeValue timeout, Logger logger,_                                ThreadContext contextHolder) {_        this(initialState, clusterService.getClusterApplierService(), timeout, logger, contextHolder)__    };param,timeout,a,global,timeout,for,this,observer,after,it,has,expired,the,observer,will,fail,any,existing,or,new,wait,for,next,change,calls,set,to,null,to,wait,indefinitely;public,cluster,state,observer,cluster,state,initial,state,cluster,service,cluster,service,nullable,time,value,timeout,logger,logger,thread,context,context,holder,this,initial,state,cluster,service,get,cluster,applier,service,timeout,logger,context,holder
ClusterStateObserver -> public ClusterStateObserver(ClusterState initialState, ClusterService clusterService, @Nullable TimeValue timeout, Logger logger,                                 ThreadContext contextHolder);1540847035;@param timeout        a global timeout for this observer. After it has expired the observer_will fail any existing or new #waitForNextChange calls. Set to null_to wait indefinitely;public ClusterStateObserver(ClusterState initialState, ClusterService clusterService, @Nullable TimeValue timeout, Logger logger,_                                ThreadContext contextHolder) {_        this(initialState, clusterService.getClusterApplierService(), timeout, logger, contextHolder)__    };param,timeout,a,global,timeout,for,this,observer,after,it,has,expired,the,observer,will,fail,any,existing,or,new,wait,for,next,change,calls,set,to,null,to,wait,indefinitely;public,cluster,state,observer,cluster,state,initial,state,cluster,service,cluster,service,nullable,time,value,timeout,logger,logger,thread,context,context,holder,this,initial,state,cluster,service,get,cluster,applier,service,timeout,logger,context,holder
ClusterStateObserver -> public ClusterStateObserver(ClusterState initialState, ClusterService clusterService, @Nullable TimeValue timeout, Logger logger,                                 ThreadContext contextHolder);1540912197;@param timeout        a global timeout for this observer. After it has expired the observer_will fail any existing or new #waitForNextChange calls. Set to null_to wait indefinitely;public ClusterStateObserver(ClusterState initialState, ClusterService clusterService, @Nullable TimeValue timeout, Logger logger,_                                ThreadContext contextHolder) {_        this(initialState, clusterService.getClusterApplierService(), timeout, logger, contextHolder)__    };param,timeout,a,global,timeout,for,this,observer,after,it,has,expired,the,observer,will,fail,any,existing,or,new,wait,for,next,change,calls,set,to,null,to,wait,indefinitely;public,cluster,state,observer,cluster,state,initial,state,cluster,service,cluster,service,nullable,time,value,timeout,logger,logger,thread,context,context,holder,this,initial,state,cluster,service,get,cluster,applier,service,timeout,logger,context,holder
ClusterStateObserver -> public boolean isTimedOut();1524684173;indicates whether this observer has timed out;public boolean isTimedOut() {_        return timedOut__    };indicates,whether,this,observer,has,timed,out;public,boolean,is,timed,out,return,timed,out
ClusterStateObserver -> public boolean isTimedOut();1540847035;indicates whether this observer has timed out;public boolean isTimedOut() {_        return timedOut__    };indicates,whether,this,observer,has,timed,out;public,boolean,is,timed,out,return,timed,out
ClusterStateObserver -> public boolean isTimedOut();1540912197;indicates whether this observer has timed out;public boolean isTimedOut() {_        return timedOut__    };indicates,whether,this,observer,has,timed,out;public,boolean,is,timed,out,return,timed,out
ClusterStateObserver -> public ClusterStateObserver(ClusterService clusterService, @Nullable TimeValue timeout, Logger logger, ThreadContext contextHolder);1524684173;@param timeout        a global timeout for this observer. After it has expired the observer_will fail any existing or new #waitForNextChange calls. Set to null_to wait indefinitely;public ClusterStateObserver(ClusterService clusterService, @Nullable TimeValue timeout, Logger logger, ThreadContext contextHolder) {_        this(clusterService.state(), clusterService, timeout, logger, contextHolder)__    };param,timeout,a,global,timeout,for,this,observer,after,it,has,expired,the,observer,will,fail,any,existing,or,new,wait,for,next,change,calls,set,to,null,to,wait,indefinitely;public,cluster,state,observer,cluster,service,cluster,service,nullable,time,value,timeout,logger,logger,thread,context,context,holder,this,cluster,service,state,cluster,service,timeout,logger,context,holder
ClusterStateObserver -> public ClusterStateObserver(ClusterService clusterService, @Nullable TimeValue timeout, Logger logger, ThreadContext contextHolder);1540847035;@param timeout        a global timeout for this observer. After it has expired the observer_will fail any existing or new #waitForNextChange calls. Set to null_to wait indefinitely;public ClusterStateObserver(ClusterService clusterService, @Nullable TimeValue timeout, Logger logger, ThreadContext contextHolder) {_        this(clusterService.state(), clusterService, timeout, logger, contextHolder)__    };param,timeout,a,global,timeout,for,this,observer,after,it,has,expired,the,observer,will,fail,any,existing,or,new,wait,for,next,change,calls,set,to,null,to,wait,indefinitely;public,cluster,state,observer,cluster,service,cluster,service,nullable,time,value,timeout,logger,logger,thread,context,context,holder,this,cluster,service,state,cluster,service,timeout,logger,context,holder
ClusterStateObserver -> public ClusterStateObserver(ClusterService clusterService, @Nullable TimeValue timeout, Logger logger, ThreadContext contextHolder);1540912197;@param timeout        a global timeout for this observer. After it has expired the observer_will fail any existing or new #waitForNextChange calls. Set to null_to wait indefinitely;public ClusterStateObserver(ClusterService clusterService, @Nullable TimeValue timeout, Logger logger, ThreadContext contextHolder) {_        this(clusterService.state(), clusterService, timeout, logger, contextHolder)__    };param,timeout,a,global,timeout,for,this,observer,after,it,has,expired,the,observer,will,fail,any,existing,or,new,wait,for,next,change,calls,set,to,null,to,wait,indefinitely;public,cluster,state,observer,cluster,service,cluster,service,nullable,time,value,timeout,logger,logger,thread,context,context,holder,this,cluster,service,state,cluster,service,timeout,logger,context,holder
ClusterStateObserver -> public ClusterState setAndGetObservedState();1524684173;sets the last observed state to the currently applied cluster state and returns it;public ClusterState setAndGetObservedState() {_        if (observingContext.get() != null) {_            throw new ElasticsearchException("cannot set current cluster state while waiting for a cluster state change")__        }_        ClusterState clusterState = clusterApplierService.state()__        lastObservedState.set(new StoredState(clusterState))__        return clusterState__    };sets,the,last,observed,state,to,the,currently,applied,cluster,state,and,returns,it;public,cluster,state,set,and,get,observed,state,if,observing,context,get,null,throw,new,elasticsearch,exception,cannot,set,current,cluster,state,while,waiting,for,a,cluster,state,change,cluster,state,cluster,state,cluster,applier,service,state,last,observed,state,set,new,stored,state,cluster,state,return,cluster,state
ClusterStateObserver -> public ClusterState setAndGetObservedState();1540847035;sets the last observed state to the currently applied cluster state and returns it;public ClusterState setAndGetObservedState() {_        if (observingContext.get() != null) {_            throw new ElasticsearchException("cannot set current cluster state while waiting for a cluster state change")__        }_        ClusterState clusterState = clusterApplierService.state()__        lastObservedState.set(new StoredState(clusterState))__        return clusterState__    };sets,the,last,observed,state,to,the,currently,applied,cluster,state,and,returns,it;public,cluster,state,set,and,get,observed,state,if,observing,context,get,null,throw,new,elasticsearch,exception,cannot,set,current,cluster,state,while,waiting,for,a,cluster,state,change,cluster,state,cluster,state,cluster,applier,service,state,last,observed,state,set,new,stored,state,cluster,state,return,cluster,state
ClusterStateObserver -> public ClusterState setAndGetObservedState();1540912197;sets the last observed state to the currently applied cluster state and returns it;public ClusterState setAndGetObservedState() {_        if (observingContext.get() != null) {_            throw new ElasticsearchException("cannot set current cluster state while waiting for a cluster state change")__        }_        ClusterState clusterState = clusterApplierService.state()__        lastObservedState.set(new StoredState(clusterState))__        return clusterState__    };sets,the,last,observed,state,to,the,currently,applied,cluster,state,and,returns,it;public,cluster,state,set,and,get,observed,state,if,observing,context,get,null,throw,new,elasticsearch,exception,cannot,set,current,cluster,state,while,waiting,for,a,cluster,state,change,cluster,state,cluster,state,cluster,applier,service,state,last,observed,state,set,new,stored,state,cluster,state,return,cluster,state
ClusterStateObserver -> Listener -> void onNewClusterState(ClusterState state)_;1524684173;called when a new state is observed;void onNewClusterState(ClusterState state)_;called,when,a,new,state,is,observed;void,on,new,cluster,state,cluster,state,state
ClusterStateObserver -> Listener -> void onNewClusterState(ClusterState state)_;1540847035;called when a new state is observed;void onNewClusterState(ClusterState state)_;called,when,a,new,state,is,observed;void,on,new,cluster,state,cluster,state,state
ClusterStateObserver -> Listener -> void onNewClusterState(ClusterState state)_;1540912197;called when a new state is observed;void onNewClusterState(ClusterState state)_;called,when,a,new,state,is,observed;void,on,new,cluster,state,cluster,state,state
