# id;timestamp;commentText;codeText;commentWords;codeWords
ChildMemoryCircuitBreaker -> public ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger,                                      HierarchyCircuitBreakerService parent, String name);1524684173;Create a circuit breaker that will break if the number of estimated_bytes grows above the limit. All estimations will be multiplied by_the given overheadConstant. This breaker starts with 0 bytes used._@param settings settings to configure this breaker_@param parent parent circuit breaker service to delegate tripped breakers to_@param name the name of the breaker;public ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger,_                                     HierarchyCircuitBreakerService parent, String name) {_        this(settings, null, logger, parent, name)__    };create,a,circuit,breaker,that,will,break,if,the,number,of,estimated,bytes,grows,above,the,limit,all,estimations,will,be,multiplied,by,the,given,overhead,constant,this,breaker,starts,with,0,bytes,used,param,settings,settings,to,configure,this,breaker,param,parent,parent,circuit,breaker,service,to,delegate,tripped,breakers,to,param,name,the,name,of,the,breaker;public,child,memory,circuit,breaker,breaker,settings,settings,logger,logger,hierarchy,circuit,breaker,service,parent,string,name,this,settings,null,logger,parent,name
ChildMemoryCircuitBreaker -> public ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger,                                      HierarchyCircuitBreakerService parent, String name);1531729807;Create a circuit breaker that will break if the number of estimated_bytes grows above the limit. All estimations will be multiplied by_the given overheadConstant. This breaker starts with 0 bytes used._@param settings settings to configure this breaker_@param parent parent circuit breaker service to delegate tripped breakers to_@param name the name of the breaker;public ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger,_                                     HierarchyCircuitBreakerService parent, String name) {_        this(settings, null, logger, parent, name)__    };create,a,circuit,breaker,that,will,break,if,the,number,of,estimated,bytes,grows,above,the,limit,all,estimations,will,be,multiplied,by,the,given,overhead,constant,this,breaker,starts,with,0,bytes,used,param,settings,settings,to,configure,this,breaker,param,parent,parent,circuit,breaker,service,to,delegate,tripped,breakers,to,param,name,the,name,of,the,breaker;public,child,memory,circuit,breaker,breaker,settings,settings,logger,logger,hierarchy,circuit,breaker,service,parent,string,name,this,settings,null,logger,parent,name
ChildMemoryCircuitBreaker -> public ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger,                                      HierarchyCircuitBreakerService parent, String name);1541160764;Create a circuit breaker that will break if the number of estimated_bytes grows above the limit. All estimations will be multiplied by_the given overheadConstant. This breaker starts with 0 bytes used._@param settings settings to configure this breaker_@param parent parent circuit breaker service to delegate tripped breakers to_@param name the name of the breaker;public ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger,_                                     HierarchyCircuitBreakerService parent, String name) {_        this(settings, null, logger, parent, name)__    };create,a,circuit,breaker,that,will,break,if,the,number,of,estimated,bytes,grows,above,the,limit,all,estimations,will,be,multiplied,by,the,given,overhead,constant,this,breaker,starts,with,0,bytes,used,param,settings,settings,to,configure,this,breaker,param,parent,parent,circuit,breaker,service,to,delegate,tripped,breakers,to,param,name,the,name,of,the,breaker;public,child,memory,circuit,breaker,breaker,settings,settings,logger,logger,hierarchy,circuit,breaker,service,parent,string,name,this,settings,null,logger,parent,name
ChildMemoryCircuitBreaker -> @Override     public void circuitBreak(String fieldName, long bytesNeeded);1524684173;Method used to trip the breaker, delegates to the parent to determine_whether to trip the breaker or not;@Override_    public void circuitBreak(String fieldName, long bytesNeeded) {_        this.trippedCount.incrementAndGet()__        final String message = "[" + this.name + "] Data too large, data for [" + fieldName + "]" +_                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +_                ", which is larger than the limit of [" +_                memoryBytesLimit + "/" + new ByteSizeValue(memoryBytesLimit) + "]"__        logger.debug("{}", message)__        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit)__    };method,used,to,trip,the,breaker,delegates,to,the,parent,to,determine,whether,to,trip,the,breaker,or,not;override,public,void,circuit,break,string,field,name,long,bytes,needed,this,tripped,count,increment,and,get,final,string,message,this,name,data,too,large,data,for,field,name,would,be,bytes,needed,new,byte,size,value,bytes,needed,which,is,larger,than,the,limit,of,memory,bytes,limit,new,byte,size,value,memory,bytes,limit,logger,debug,message,throw,new,circuit,breaking,exception,message,bytes,needed,memory,bytes,limit
ChildMemoryCircuitBreaker -> @Override     public void circuitBreak(String fieldName, long bytesNeeded);1531729807;Method used to trip the breaker, delegates to the parent to determine_whether to trip the breaker or not;@Override_    public void circuitBreak(String fieldName, long bytesNeeded) {_        this.trippedCount.incrementAndGet()__        final String message = "[" + this.name + "] Data too large, data for [" + fieldName + "]" +_                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +_                ", which is larger than the limit of [" +_                memoryBytesLimit + "/" + new ByteSizeValue(memoryBytesLimit) + "]"__        logger.debug("{}", message)__        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit)__    };method,used,to,trip,the,breaker,delegates,to,the,parent,to,determine,whether,to,trip,the,breaker,or,not;override,public,void,circuit,break,string,field,name,long,bytes,needed,this,tripped,count,increment,and,get,final,string,message,this,name,data,too,large,data,for,field,name,would,be,bytes,needed,new,byte,size,value,bytes,needed,which,is,larger,than,the,limit,of,memory,bytes,limit,new,byte,size,value,memory,bytes,limit,logger,debug,message,throw,new,circuit,breaking,exception,message,bytes,needed,memory,bytes,limit
ChildMemoryCircuitBreaker -> @Override     public void circuitBreak(String fieldName, long bytesNeeded);1541160764;Method used to trip the breaker, delegates to the parent to determine_whether to trip the breaker or not;@Override_    public void circuitBreak(String fieldName, long bytesNeeded) {_        this.trippedCount.incrementAndGet()__        final String message = "[" + this.name + "] Data too large, data for [" + fieldName + "]" +_                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +_                ", which is larger than the limit of [" +_                memoryBytesLimit + "/" + new ByteSizeValue(memoryBytesLimit) + "]"__        logger.debug("{}", message)__        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit, durability)__    };method,used,to,trip,the,breaker,delegates,to,the,parent,to,determine,whether,to,trip,the,breaker,or,not;override,public,void,circuit,break,string,field,name,long,bytes,needed,this,tripped,count,increment,and,get,final,string,message,this,name,data,too,large,data,for,field,name,would,be,bytes,needed,new,byte,size,value,bytes,needed,which,is,larger,than,the,limit,of,memory,bytes,limit,new,byte,size,value,memory,bytes,limit,logger,debug,message,throw,new,circuit,breaking,exception,message,bytes,needed,memory,bytes,limit,durability
ChildMemoryCircuitBreaker -> @Override     public long getTrippedCount();1524684173;@return the number of times the breaker has been tripped;@Override_    public long getTrippedCount() {_        return this.trippedCount.get()__    };return,the,number,of,times,the,breaker,has,been,tripped;override,public,long,get,tripped,count,return,this,tripped,count,get
ChildMemoryCircuitBreaker -> @Override     public long getTrippedCount();1531729807;@return the number of times the breaker has been tripped;@Override_    public long getTrippedCount() {_        return this.trippedCount.get()__    };return,the,number,of,times,the,breaker,has,been,tripped;override,public,long,get,tripped,count,return,this,tripped,count,get
ChildMemoryCircuitBreaker -> @Override     public long getTrippedCount();1541160764;@return the number of times the breaker has been tripped;@Override_    public long getTrippedCount() {_        return this.trippedCount.get()__    };return,the,number,of,times,the,breaker,has,been,tripped;override,public,long,get,tripped,count,return,this,tripped,count,get
ChildMemoryCircuitBreaker -> @Override     public long addWithoutBreaking(long bytes);1524684173;Add an <b>exact</b> number of bytes, not checking for tripping the_circuit breaker. This bypasses the overheadConstant multiplication.__Also does not check with the parent breaker to see if the parent limit_has been exceeded.__@param bytes number of bytes to add to the breaker_@return number of "used" bytes so far;@Override_    public long addWithoutBreaking(long bytes) {_        long u = used.addAndGet(bytes)__        if (logger.isTraceEnabled()) {_            logger.trace("[{}] Adjusted breaker by [{}] bytes, now [{}]", this.name, bytes, u)__        }_        assert u >= 0 : "Used bytes: [" + u + "] must be >= 0"__        return u__    };add,an,b,exact,b,number,of,bytes,not,checking,for,tripping,the,circuit,breaker,this,bypasses,the,overhead,constant,multiplication,also,does,not,check,with,the,parent,breaker,to,see,if,the,parent,limit,has,been,exceeded,param,bytes,number,of,bytes,to,add,to,the,breaker,return,number,of,used,bytes,so,far;override,public,long,add,without,breaking,long,bytes,long,u,used,add,and,get,bytes,if,logger,is,trace,enabled,logger,trace,adjusted,breaker,by,bytes,now,this,name,bytes,u,assert,u,0,used,bytes,u,must,be,0,return,u
ChildMemoryCircuitBreaker -> @Override     public long addWithoutBreaking(long bytes);1531729807;Add an <b>exact</b> number of bytes, not checking for tripping the_circuit breaker. This bypasses the overheadConstant multiplication.__Also does not check with the parent breaker to see if the parent limit_has been exceeded.__@param bytes number of bytes to add to the breaker_@return number of "used" bytes so far;@Override_    public long addWithoutBreaking(long bytes) {_        long u = used.addAndGet(bytes)__        if (logger.isTraceEnabled()) {_            logger.trace("[{}] Adjusted breaker by [{}] bytes, now [{}]", this.name, bytes, u)__        }_        assert u >= 0 : "Used bytes: [" + u + "] must be >= 0"__        return u__    };add,an,b,exact,b,number,of,bytes,not,checking,for,tripping,the,circuit,breaker,this,bypasses,the,overhead,constant,multiplication,also,does,not,check,with,the,parent,breaker,to,see,if,the,parent,limit,has,been,exceeded,param,bytes,number,of,bytes,to,add,to,the,breaker,return,number,of,used,bytes,so,far;override,public,long,add,without,breaking,long,bytes,long,u,used,add,and,get,bytes,if,logger,is,trace,enabled,logger,trace,adjusted,breaker,by,bytes,now,this,name,bytes,u,assert,u,0,used,bytes,u,must,be,0,return,u
ChildMemoryCircuitBreaker -> @Override     public long addWithoutBreaking(long bytes);1541160764;Add an <b>exact</b> number of bytes, not checking for tripping the_circuit breaker. This bypasses the overheadConstant multiplication.__Also does not check with the parent breaker to see if the parent limit_has been exceeded.__@param bytes number of bytes to add to the breaker_@return number of "used" bytes so far;@Override_    public long addWithoutBreaking(long bytes) {_        long u = used.addAndGet(bytes)__        if (logger.isTraceEnabled()) {_            logger.trace("[{}] Adjusted breaker by [{}] bytes, now [{}]", this.name, bytes, u)__        }_        assert u >= 0 : "Used bytes: [" + u + "] must be >= 0"__        return u__    };add,an,b,exact,b,number,of,bytes,not,checking,for,tripping,the,circuit,breaker,this,bypasses,the,overhead,constant,multiplication,also,does,not,check,with,the,parent,breaker,to,see,if,the,parent,limit,has,been,exceeded,param,bytes,number,of,bytes,to,add,to,the,breaker,return,number,of,used,bytes,so,far;override,public,long,add,without,breaking,long,bytes,long,u,used,add,and,get,bytes,if,logger,is,trace,enabled,logger,trace,adjusted,breaker,by,bytes,now,this,name,bytes,u,assert,u,0,used,bytes,u,must,be,0,return,u
ChildMemoryCircuitBreaker -> @Override     public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;1524684173;Add a number of bytes, tripping the circuit breaker if the aggregated_estimates are above the limit. Automatically trips the breaker if the_memory limit is set to 0. Will never trip the breaker if the limit is_set &lt_ 0, but can still be used to aggregate estimations._@param bytes number of bytes to add to the breaker_@return number of "used" bytes so far;@Override_    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {_        _        if (memoryBytesLimit == 0) {_            circuitBreak(label, bytes)__        }__        long newUsed__        _        _        _        if (this.memoryBytesLimit == -1) {_            newUsed = noLimit(bytes, label)__        } else {_            newUsed = limit(bytes, label)__        }__        _        try {_            parent.checkParentLimit(label)__        } catch (CircuitBreakingException e) {_            _            _            _            this.addWithoutBreaking(-bytes)__            throw e__        }_        return newUsed__    };add,a,number,of,bytes,tripping,the,circuit,breaker,if,the,aggregated,estimates,are,above,the,limit,automatically,trips,the,breaker,if,the,memory,limit,is,set,to,0,will,never,trip,the,breaker,if,the,limit,is,set,lt,0,but,can,still,be,used,to,aggregate,estimations,param,bytes,number,of,bytes,to,add,to,the,breaker,return,number,of,used,bytes,so,far;override,public,double,add,estimate,bytes,and,maybe,break,long,bytes,string,label,throws,circuit,breaking,exception,if,memory,bytes,limit,0,circuit,break,label,bytes,long,new,used,if,this,memory,bytes,limit,1,new,used,no,limit,bytes,label,else,new,used,limit,bytes,label,try,parent,check,parent,limit,label,catch,circuit,breaking,exception,e,this,add,without,breaking,bytes,throw,e,return,new,used
ChildMemoryCircuitBreaker -> @Override     public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;1531729807;Add a number of bytes, tripping the circuit breaker if the aggregated_estimates are above the limit. Automatically trips the breaker if the_memory limit is set to 0. Will never trip the breaker if the limit is_set &lt_ 0, but can still be used to aggregate estimations._@param bytes number of bytes to add to the breaker_@return number of "used" bytes so far;@Override_    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {_        _        if (memoryBytesLimit == 0) {_            circuitBreak(label, bytes)__        }__        long newUsed__        _        _        _        if (this.memoryBytesLimit == -1) {_            newUsed = noLimit(bytes, label)__        } else {_            newUsed = limit(bytes, label)__        }__        _        try {_            parent.checkParentLimit((long) (bytes * overheadConstant), label)__        } catch (CircuitBreakingException e) {_            _            _            _            this.addWithoutBreaking(-bytes)__            throw e__        }_        return newUsed__    };add,a,number,of,bytes,tripping,the,circuit,breaker,if,the,aggregated,estimates,are,above,the,limit,automatically,trips,the,breaker,if,the,memory,limit,is,set,to,0,will,never,trip,the,breaker,if,the,limit,is,set,lt,0,but,can,still,be,used,to,aggregate,estimations,param,bytes,number,of,bytes,to,add,to,the,breaker,return,number,of,used,bytes,so,far;override,public,double,add,estimate,bytes,and,maybe,break,long,bytes,string,label,throws,circuit,breaking,exception,if,memory,bytes,limit,0,circuit,break,label,bytes,long,new,used,if,this,memory,bytes,limit,1,new,used,no,limit,bytes,label,else,new,used,limit,bytes,label,try,parent,check,parent,limit,long,bytes,overhead,constant,label,catch,circuit,breaking,exception,e,this,add,without,breaking,bytes,throw,e,return,new,used
ChildMemoryCircuitBreaker -> @Override     public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;1541160764;Add a number of bytes, tripping the circuit breaker if the aggregated_estimates are above the limit. Automatically trips the breaker if the_memory limit is set to 0. Will never trip the breaker if the limit is_set &lt_ 0, but can still be used to aggregate estimations._@param bytes number of bytes to add to the breaker_@return number of "used" bytes so far;@Override_    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {_        _        if (memoryBytesLimit == 0) {_            circuitBreak(label, bytes)__        }__        long newUsed__        _        _        _        if (this.memoryBytesLimit == -1) {_            newUsed = noLimit(bytes, label)__        } else {_            newUsed = limit(bytes, label)__        }__        _        try {_            parent.checkParentLimit((long) (bytes * overheadConstant), label)__        } catch (CircuitBreakingException e) {_            _            _            _            this.addWithoutBreaking(-bytes)__            throw e__        }_        return newUsed__    };add,a,number,of,bytes,tripping,the,circuit,breaker,if,the,aggregated,estimates,are,above,the,limit,automatically,trips,the,breaker,if,the,memory,limit,is,set,to,0,will,never,trip,the,breaker,if,the,limit,is,set,lt,0,but,can,still,be,used,to,aggregate,estimations,param,bytes,number,of,bytes,to,add,to,the,breaker,return,number,of,used,bytes,so,far;override,public,double,add,estimate,bytes,and,maybe,break,long,bytes,string,label,throws,circuit,breaking,exception,if,memory,bytes,limit,0,circuit,break,label,bytes,long,new,used,if,this,memory,bytes,limit,1,new,used,no,limit,bytes,label,else,new,used,limit,bytes,label,try,parent,check,parent,limit,long,bytes,overhead,constant,label,catch,circuit,breaking,exception,e,this,add,without,breaking,bytes,throw,e,return,new,used
ChildMemoryCircuitBreaker -> @Override     public long getLimit();1524684173;@return the number of bytes that can be added before the breaker trips;@Override_    public long getLimit() {_        return this.memoryBytesLimit__    };return,the,number,of,bytes,that,can,be,added,before,the,breaker,trips;override,public,long,get,limit,return,this,memory,bytes,limit
ChildMemoryCircuitBreaker -> @Override     public long getLimit();1531729807;@return the number of bytes that can be added before the breaker trips;@Override_    public long getLimit() {_        return this.memoryBytesLimit__    };return,the,number,of,bytes,that,can,be,added,before,the,breaker,trips;override,public,long,get,limit,return,this,memory,bytes,limit
ChildMemoryCircuitBreaker -> @Override     public long getLimit();1541160764;@return the number of bytes that can be added before the breaker trips;@Override_    public long getLimit() {_        return this.memoryBytesLimit__    };return,the,number,of,bytes,that,can,be,added,before,the,breaker,trips;override,public,long,get,limit,return,this,memory,bytes,limit
ChildMemoryCircuitBreaker -> public ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker,                                      Logger logger, HierarchyCircuitBreakerService parent, String name);1524684173;Create a circuit breaker that will break if the number of estimated_bytes grows above the limit. All estimations will be multiplied by_the given overheadConstant. Uses the given oldBreaker to initialize_the starting offset._@param settings settings to configure this breaker_@param parent parent circuit breaker service to delegate tripped breakers to_@param name the name of the breaker_@param oldBreaker the previous circuit breaker to inherit the used value from (starting offset);public ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker,_                                     Logger logger, HierarchyCircuitBreakerService parent, String name) {_        this.name = name__        this.settings = settings__        this.memoryBytesLimit = settings.getLimit()__        this.overheadConstant = settings.getOverhead()__        if (oldBreaker == null) {_            this.used = new AtomicLong(0)__            this.trippedCount = new AtomicLong(0)__        } else {_            this.used = oldBreaker.used__            this.trippedCount = oldBreaker.trippedCount__        }_        this.logger = logger__        if (logger.isTraceEnabled()) {_            logger.trace("creating ChildCircuitBreaker with settings {}", this.settings)__        }_        this.parent = parent__    };create,a,circuit,breaker,that,will,break,if,the,number,of,estimated,bytes,grows,above,the,limit,all,estimations,will,be,multiplied,by,the,given,overhead,constant,uses,the,given,old,breaker,to,initialize,the,starting,offset,param,settings,settings,to,configure,this,breaker,param,parent,parent,circuit,breaker,service,to,delegate,tripped,breakers,to,param,name,the,name,of,the,breaker,param,old,breaker,the,previous,circuit,breaker,to,inherit,the,used,value,from,starting,offset;public,child,memory,circuit,breaker,breaker,settings,settings,child,memory,circuit,breaker,old,breaker,logger,logger,hierarchy,circuit,breaker,service,parent,string,name,this,name,name,this,settings,settings,this,memory,bytes,limit,settings,get,limit,this,overhead,constant,settings,get,overhead,if,old,breaker,null,this,used,new,atomic,long,0,this,tripped,count,new,atomic,long,0,else,this,used,old,breaker,used,this,tripped,count,old,breaker,tripped,count,this,logger,logger,if,logger,is,trace,enabled,logger,trace,creating,child,circuit,breaker,with,settings,this,settings,this,parent,parent
ChildMemoryCircuitBreaker -> public ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker,                                      Logger logger, HierarchyCircuitBreakerService parent, String name);1531729807;Create a circuit breaker that will break if the number of estimated_bytes grows above the limit. All estimations will be multiplied by_the given overheadConstant. Uses the given oldBreaker to initialize_the starting offset._@param settings settings to configure this breaker_@param parent parent circuit breaker service to delegate tripped breakers to_@param name the name of the breaker_@param oldBreaker the previous circuit breaker to inherit the used value from (starting offset);public ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker,_                                     Logger logger, HierarchyCircuitBreakerService parent, String name) {_        this.name = name__        this.settings = settings__        this.memoryBytesLimit = settings.getLimit()__        this.overheadConstant = settings.getOverhead()__        if (oldBreaker == null) {_            this.used = new AtomicLong(0)__            this.trippedCount = new AtomicLong(0)__        } else {_            this.used = oldBreaker.used__            this.trippedCount = oldBreaker.trippedCount__        }_        this.logger = logger__        if (logger.isTraceEnabled()) {_            logger.trace("creating ChildCircuitBreaker with settings {}", this.settings)__        }_        this.parent = parent__    };create,a,circuit,breaker,that,will,break,if,the,number,of,estimated,bytes,grows,above,the,limit,all,estimations,will,be,multiplied,by,the,given,overhead,constant,uses,the,given,old,breaker,to,initialize,the,starting,offset,param,settings,settings,to,configure,this,breaker,param,parent,parent,circuit,breaker,service,to,delegate,tripped,breakers,to,param,name,the,name,of,the,breaker,param,old,breaker,the,previous,circuit,breaker,to,inherit,the,used,value,from,starting,offset;public,child,memory,circuit,breaker,breaker,settings,settings,child,memory,circuit,breaker,old,breaker,logger,logger,hierarchy,circuit,breaker,service,parent,string,name,this,name,name,this,settings,settings,this,memory,bytes,limit,settings,get,limit,this,overhead,constant,settings,get,overhead,if,old,breaker,null,this,used,new,atomic,long,0,this,tripped,count,new,atomic,long,0,else,this,used,old,breaker,used,this,tripped,count,old,breaker,tripped,count,this,logger,logger,if,logger,is,trace,enabled,logger,trace,creating,child,circuit,breaker,with,settings,this,settings,this,parent,parent
ChildMemoryCircuitBreaker -> public ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker,                                      Logger logger, HierarchyCircuitBreakerService parent, String name);1541160764;Create a circuit breaker that will break if the number of estimated_bytes grows above the limit. All estimations will be multiplied by_the given overheadConstant. Uses the given oldBreaker to initialize_the starting offset._@param settings settings to configure this breaker_@param parent parent circuit breaker service to delegate tripped breakers to_@param name the name of the breaker_@param oldBreaker the previous circuit breaker to inherit the used value from (starting offset);public ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker,_                                     Logger logger, HierarchyCircuitBreakerService parent, String name) {_        this.name = name__        this.memoryBytesLimit = settings.getLimit()__        this.overheadConstant = settings.getOverhead()__        this.durability = settings.getDurability()__        if (oldBreaker == null) {_            this.used = new AtomicLong(0)__            this.trippedCount = new AtomicLong(0)__        } else {_            this.used = oldBreaker.used__            this.trippedCount = oldBreaker.trippedCount__        }_        this.logger = logger__        if (logger.isTraceEnabled()) {_            logger.trace("creating ChildCircuitBreaker with settings {}", settings)__        }_        this.parent = parent__    };create,a,circuit,breaker,that,will,break,if,the,number,of,estimated,bytes,grows,above,the,limit,all,estimations,will,be,multiplied,by,the,given,overhead,constant,uses,the,given,old,breaker,to,initialize,the,starting,offset,param,settings,settings,to,configure,this,breaker,param,parent,parent,circuit,breaker,service,to,delegate,tripped,breakers,to,param,name,the,name,of,the,breaker,param,old,breaker,the,previous,circuit,breaker,to,inherit,the,used,value,from,starting,offset;public,child,memory,circuit,breaker,breaker,settings,settings,child,memory,circuit,breaker,old,breaker,logger,logger,hierarchy,circuit,breaker,service,parent,string,name,this,name,name,this,memory,bytes,limit,settings,get,limit,this,overhead,constant,settings,get,overhead,this,durability,settings,get,durability,if,old,breaker,null,this,used,new,atomic,long,0,this,tripped,count,new,atomic,long,0,else,this,used,old,breaker,used,this,tripped,count,old,breaker,tripped,count,this,logger,logger,if,logger,is,trace,enabled,logger,trace,creating,child,circuit,breaker,with,settings,settings,this,parent,parent
ChildMemoryCircuitBreaker -> @Override     public double getOverhead();1524684173;@return the constant multiplier the breaker uses for aggregations;@Override_    public double getOverhead() {_        return this.overheadConstant__    };return,the,constant,multiplier,the,breaker,uses,for,aggregations;override,public,double,get,overhead,return,this,overhead,constant
ChildMemoryCircuitBreaker -> @Override     public double getOverhead();1531729807;@return the constant multiplier the breaker uses for aggregations;@Override_    public double getOverhead() {_        return this.overheadConstant__    };return,the,constant,multiplier,the,breaker,uses,for,aggregations;override,public,double,get,overhead,return,this,overhead,constant
ChildMemoryCircuitBreaker -> @Override     public double getOverhead();1541160764;@return the constant multiplier the breaker uses for aggregations;@Override_    public double getOverhead() {_        return this.overheadConstant__    };return,the,constant,multiplier,the,breaker,uses,for,aggregations;override,public,double,get,overhead,return,this,overhead,constant
ChildMemoryCircuitBreaker -> @Override     public long getUsed();1524684173;@return the number of aggregated "used" bytes so far;@Override_    public long getUsed() {_        return this.used.get()__    };return,the,number,of,aggregated,used,bytes,so,far;override,public,long,get,used,return,this,used,get
ChildMemoryCircuitBreaker -> @Override     public long getUsed();1531729807;@return the number of aggregated "used" bytes so far;@Override_    public long getUsed() {_        return this.used.get()__    };return,the,number,of,aggregated,used,bytes,so,far;override,public,long,get,used,return,this,used,get
ChildMemoryCircuitBreaker -> @Override     public long getUsed();1541160764;@return the number of aggregated "used" bytes so far;@Override_    public long getUsed() {_        return this.used.get()__    };return,the,number,of,aggregated,used,bytes,so,far;override,public,long,get,used,return,this,used,get
ChildMemoryCircuitBreaker -> @Override     public String getName();1524684173;@return the name of the breaker;@Override_    public String getName() {_        return this.name__    };return,the,name,of,the,breaker;override,public,string,get,name,return,this,name
ChildMemoryCircuitBreaker -> @Override     public String getName();1531729807;@return the name of the breaker;@Override_    public String getName() {_        return this.name__    };return,the,name,of,the,breaker;override,public,string,get,name,return,this,name
ChildMemoryCircuitBreaker -> @Override     public String getName();1541160764;@return the name of the breaker;@Override_    public String getName() {_        return this.name__    };return,the,name,of,the,breaker;override,public,string,get,name,return,this,name
