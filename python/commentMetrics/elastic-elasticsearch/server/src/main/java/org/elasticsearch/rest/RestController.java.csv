# id;timestamp;commentText;codeText;commentWords;codeWords
RestController -> private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request);1524684173;Get the valid set of HTTP methods for a REST request.;private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request) {_        Set<RestRequest.Method> validMethods = new HashSet<>()__        Iterator<MethodHandlers> allHandlers = getAllHandlers(request)__        for (Iterator<MethodHandlers> it = allHandlers_ it.hasNext()_ ) {_            Optional.ofNullable(it.next()).map(mh -> validMethods.addAll(mh.getValidMethods()))__        }_        return validMethods__    };get,the,valid,set,of,http,methods,for,a,rest,request;private,set,rest,request,method,get,valid,handler,method,set,rest,request,request,set,rest,request,method,valid,methods,new,hash,set,iterator,method,handlers,all,handlers,get,all,handlers,request,for,iterator,method,handlers,it,all,handlers,it,has,next,optional,of,nullable,it,next,map,mh,valid,methods,add,all,mh,get,valid,methods,return,valid,methods
RestController -> private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request);1525645056;Get the valid set of HTTP methods for a REST request.;private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request) {_        Set<RestRequest.Method> validMethods = new HashSet<>()__        Iterator<MethodHandlers> allHandlers = getAllHandlers(request)__        for (Iterator<MethodHandlers> it = allHandlers_ it.hasNext()_ ) {_            Optional.ofNullable(it.next()).map(mh -> validMethods.addAll(mh.getValidMethods()))__        }_        return validMethods__    };get,the,valid,set,of,http,methods,for,a,rest,request;private,set,rest,request,method,get,valid,handler,method,set,rest,request,request,set,rest,request,method,valid,methods,new,hash,set,iterator,method,handlers,all,handlers,get,all,handlers,request,for,iterator,method,handlers,it,all,handlers,it,has,next,optional,of,nullable,it,next,map,mh,valid,methods,add,all,mh,get,valid,methods,return,valid,methods
RestController -> private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request);1529015561;Get the valid set of HTTP methods for a REST request.;private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request) {_        Set<RestRequest.Method> validMethods = new HashSet<>()__        Iterator<MethodHandlers> allHandlers = getAllHandlers(request)__        for (Iterator<MethodHandlers> it = allHandlers_ it.hasNext()_ ) {_            Optional.ofNullable(it.next()).map(mh -> validMethods.addAll(mh.getValidMethods()))__        }_        return validMethods__    };get,the,valid,set,of,http,methods,for,a,rest,request;private,set,rest,request,method,get,valid,handler,method,set,rest,request,request,set,rest,request,method,valid,methods,new,hash,set,iterator,method,handlers,all,handlers,get,all,handlers,request,for,iterator,method,handlers,it,all,handlers,it,has,next,optional,of,nullable,it,next,map,mh,valid,methods,add,all,mh,get,valid,methods,return,valid,methods
RestController -> private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request);1541092382;Get the valid set of HTTP methods for a REST request.;private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request) {_        Set<RestRequest.Method> validMethods = new HashSet<>()__        Iterator<MethodHandlers> allHandlers = getAllHandlers(request)__        for (Iterator<MethodHandlers> it = allHandlers_ it.hasNext()_ ) {_            Optional.ofNullable(it.next()).map(mh -> validMethods.addAll(mh.getValidMethods()))__        }_        return validMethods__    };get,the,valid,set,of,http,methods,for,a,rest,request;private,set,rest,request,method,get,valid,handler,method,set,rest,request,request,set,rest,request,method,valid,methods,new,hash,set,iterator,method,handlers,all,handlers,get,all,handlers,request,for,iterator,method,handlers,it,all,handlers,it,has,next,optional,of,nullable,it,next,map,mh,valid,methods,add,all,mh,get,valid,methods,return,valid,methods
RestController -> private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request);1542402632;Get the valid set of HTTP methods for a REST request.;private Set<RestRequest.Method> getValidHandlerMethodSet(RestRequest request) {_        Set<RestRequest.Method> validMethods = new HashSet<>()__        Iterator<MethodHandlers> allHandlers = getAllHandlers(request)__        for (Iterator<MethodHandlers> it = allHandlers_ it.hasNext()_ ) {_            Optional.ofNullable(it.next()).map(mh -> validMethods.addAll(mh.getValidMethods()))__        }_        return validMethods__    };get,the,valid,set,of,http,methods,for,a,rest,request;private,set,rest,request,method,get,valid,handler,method,set,rest,request,request,set,rest,request,method,valid,methods,new,hash,set,iterator,method,handlers,all,handlers,get,all,handlers,request,for,iterator,method,handlers,it,all,handlers,it,has,next,optional,of,nullable,it,next,map,mh,valid,methods,add,all,mh,get,valid,methods,return,valid,methods
RestController -> boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,                             final Optional<RestHandler> mHandler) throws Exception;1524684173;Dispatch the request, if possible, returning true if a response was sent or false otherwise.;boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,_                            final Optional<RestHandler> mHandler) throws Exception {_        final int contentLength = request.hasContent() ? request.content().length() : 0___        RestChannel responseChannel = channel__        _        boolean requestHandled___        if (contentLength > 0 && mHandler.map(h -> hasContentType(request, h) == false).orElse(false)) {_            sendContentTypeErrorMessage(request, channel)__            requestHandled = true__        } else if (contentLength > 0 && mHandler.map(h -> h.supportsContentStream()).orElse(false) &&_            request.getXContentType() != XContentType.JSON && request.getXContentType() != XContentType.SMILE) {_            channel.sendResponse(BytesRestResponse.createSimpleErrorResponse(channel,_                RestStatus.NOT_ACCEPTABLE, "Content-Type [" + request.getXContentType() +_                    "] does not support stream parsing. Use JSON or SMILE instead"))__            requestHandled = true__        } else if (mHandler.isPresent()) {__            try {_                if (canTripCircuitBreaker(mHandler)) {_                    inFlightRequestsBreaker(circuitBreakerService).addEstimateBytesAndMaybeBreak(contentLength, "<http_request>")__                } else {_                    inFlightRequestsBreaker(circuitBreakerService).addWithoutBreaking(contentLength)__                }_                _                responseChannel = new ResourceHandlingHttpChannel(channel, circuitBreakerService, contentLength)___                final RestHandler wrappedHandler = mHandler.map(h -> handlerWrapper.apply(h)).get()__                wrappedHandler.handleRequest(request, responseChannel, client)__                requestHandled = true__            } catch (Exception e) {_                responseChannel.sendResponse(new BytesRestResponse(responseChannel, e))__                _                requestHandled = true__            }_        } else {_            _            final Set<RestRequest.Method> validMethodSet = getValidHandlerMethodSet(request)__            if (validMethodSet.size() > 0_                && validMethodSet.contains(request.method()) == false_                && request.method() != RestRequest.Method.OPTIONS) {_                _                _                _                handleUnsupportedHttpMethod(request, channel, validMethodSet)__                requestHandled = true__            } else if (validMethodSet.contains(request.method()) == false_                && (request.method() == RestRequest.Method.OPTIONS)) {_                handleOptionsRequest(request, channel, validMethodSet)__                requestHandled = true__            } else {_                requestHandled = false__            }_        }_        _        return requestHandled__    };dispatch,the,request,if,possible,returning,true,if,a,response,was,sent,or,false,otherwise;boolean,dispatch,request,final,rest,request,request,final,rest,channel,channel,final,node,client,client,final,optional,rest,handler,m,handler,throws,exception,final,int,content,length,request,has,content,request,content,length,0,rest,channel,response,channel,channel,boolean,request,handled,if,content,length,0,m,handler,map,h,has,content,type,request,h,false,or,else,false,send,content,type,error,message,request,channel,request,handled,true,else,if,content,length,0,m,handler,map,h,h,supports,content,stream,or,else,false,request,get,xcontent,type,xcontent,type,json,request,get,xcontent,type,xcontent,type,smile,channel,send,response,bytes,rest,response,create,simple,error,response,channel,rest,status,content,type,request,get,xcontent,type,does,not,support,stream,parsing,use,json,or,smile,instead,request,handled,true,else,if,m,handler,is,present,try,if,can,trip,circuit,breaker,m,handler,in,flight,requests,breaker,circuit,breaker,service,add,estimate,bytes,and,maybe,break,content,length,else,in,flight,requests,breaker,circuit,breaker,service,add,without,breaking,content,length,response,channel,new,resource,handling,http,channel,channel,circuit,breaker,service,content,length,final,rest,handler,wrapped,handler,m,handler,map,h,handler,wrapper,apply,h,get,wrapped,handler,handle,request,request,response,channel,client,request,handled,true,catch,exception,e,response,channel,send,response,new,bytes,rest,response,response,channel,e,request,handled,true,else,final,set,rest,request,method,valid,method,set,get,valid,handler,method,set,request,if,valid,method,set,size,0,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,unsupported,http,method,request,channel,valid,method,set,request,handled,true,else,if,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,options,request,request,channel,valid,method,set,request,handled,true,else,request,handled,false,return,request,handled
RestController -> boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,                             final Optional<RestHandler> mHandler) throws Exception;1525645056;Dispatch the request, if possible, returning true if a response was sent or false otherwise.;boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,_                            final Optional<RestHandler> mHandler) throws Exception {_        final int contentLength = request.hasContent() ? request.content().length() : 0___        RestChannel responseChannel = channel__        _        boolean requestHandled___        if (contentLength > 0 && mHandler.map(h -> hasContentType(request, h) == false).orElse(false)) {_            sendContentTypeErrorMessage(request, channel)__            requestHandled = true__        } else if (contentLength > 0 && mHandler.map(h -> h.supportsContentStream()).orElse(false) &&_            request.getXContentType() != XContentType.JSON && request.getXContentType() != XContentType.SMILE) {_            channel.sendResponse(BytesRestResponse.createSimpleErrorResponse(channel,_                RestStatus.NOT_ACCEPTABLE, "Content-Type [" + request.getXContentType() +_                    "] does not support stream parsing. Use JSON or SMILE instead"))__            requestHandled = true__        } else if (mHandler.isPresent()) {__            try {_                if (canTripCircuitBreaker(mHandler)) {_                    inFlightRequestsBreaker(circuitBreakerService).addEstimateBytesAndMaybeBreak(contentLength, "<http_request>")__                } else {_                    inFlightRequestsBreaker(circuitBreakerService).addWithoutBreaking(contentLength)__                }_                _                responseChannel = new ResourceHandlingHttpChannel(channel, circuitBreakerService, contentLength)___                final RestHandler wrappedHandler = mHandler.map(h -> handlerWrapper.apply(h)).get()__                wrappedHandler.handleRequest(request, responseChannel, client)__                requestHandled = true__            } catch (Exception e) {_                responseChannel.sendResponse(new BytesRestResponse(responseChannel, e))__                _                requestHandled = true__            }_        } else {_            _            final Set<RestRequest.Method> validMethodSet = getValidHandlerMethodSet(request)__            if (validMethodSet.size() > 0_                && validMethodSet.contains(request.method()) == false_                && request.method() != RestRequest.Method.OPTIONS) {_                _                _                _                handleUnsupportedHttpMethod(request, channel, validMethodSet)__                requestHandled = true__            } else if (validMethodSet.contains(request.method()) == false_                && (request.method() == RestRequest.Method.OPTIONS)) {_                handleOptionsRequest(request, channel, validMethodSet)__                requestHandled = true__            } else {_                requestHandled = false__            }_        }_        _        return requestHandled__    };dispatch,the,request,if,possible,returning,true,if,a,response,was,sent,or,false,otherwise;boolean,dispatch,request,final,rest,request,request,final,rest,channel,channel,final,node,client,client,final,optional,rest,handler,m,handler,throws,exception,final,int,content,length,request,has,content,request,content,length,0,rest,channel,response,channel,channel,boolean,request,handled,if,content,length,0,m,handler,map,h,has,content,type,request,h,false,or,else,false,send,content,type,error,message,request,channel,request,handled,true,else,if,content,length,0,m,handler,map,h,h,supports,content,stream,or,else,false,request,get,xcontent,type,xcontent,type,json,request,get,xcontent,type,xcontent,type,smile,channel,send,response,bytes,rest,response,create,simple,error,response,channel,rest,status,content,type,request,get,xcontent,type,does,not,support,stream,parsing,use,json,or,smile,instead,request,handled,true,else,if,m,handler,is,present,try,if,can,trip,circuit,breaker,m,handler,in,flight,requests,breaker,circuit,breaker,service,add,estimate,bytes,and,maybe,break,content,length,else,in,flight,requests,breaker,circuit,breaker,service,add,without,breaking,content,length,response,channel,new,resource,handling,http,channel,channel,circuit,breaker,service,content,length,final,rest,handler,wrapped,handler,m,handler,map,h,handler,wrapper,apply,h,get,wrapped,handler,handle,request,request,response,channel,client,request,handled,true,catch,exception,e,response,channel,send,response,new,bytes,rest,response,response,channel,e,request,handled,true,else,final,set,rest,request,method,valid,method,set,get,valid,handler,method,set,request,if,valid,method,set,size,0,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,unsupported,http,method,request,channel,valid,method,set,request,handled,true,else,if,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,options,request,request,channel,valid,method,set,request,handled,true,else,request,handled,false,return,request,handled
RestController -> boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,                             final Optional<RestHandler> mHandler) throws Exception;1529015561;Dispatch the request, if possible, returning true if a response was sent or false otherwise.;boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,_                            final Optional<RestHandler> mHandler) throws Exception {_        final int contentLength = request.hasContent() ? request.content().length() : 0___        RestChannel responseChannel = channel__        _        boolean requestHandled___        if (contentLength > 0 && mHandler.map(h -> hasContentType(request, h) == false).orElse(false)) {_            sendContentTypeErrorMessage(request, channel)__            requestHandled = true__        } else if (contentLength > 0 && mHandler.map(h -> h.supportsContentStream()).orElse(false) &&_            request.getXContentType() != XContentType.JSON && request.getXContentType() != XContentType.SMILE) {_            channel.sendResponse(BytesRestResponse.createSimpleErrorResponse(channel,_                RestStatus.NOT_ACCEPTABLE, "Content-Type [" + request.getXContentType() +_                    "] does not support stream parsing. Use JSON or SMILE instead"))__            requestHandled = true__        } else if (mHandler.isPresent()) {__            try {_                if (canTripCircuitBreaker(mHandler)) {_                    inFlightRequestsBreaker(circuitBreakerService).addEstimateBytesAndMaybeBreak(contentLength, "<http_request>")__                } else {_                    inFlightRequestsBreaker(circuitBreakerService).addWithoutBreaking(contentLength)__                }_                _                responseChannel = new ResourceHandlingHttpChannel(channel, circuitBreakerService, contentLength)___                final RestHandler wrappedHandler = mHandler.map(h -> handlerWrapper.apply(h)).get()__                wrappedHandler.handleRequest(request, responseChannel, client)__                requestHandled = true__            } catch (Exception e) {_                responseChannel.sendResponse(new BytesRestResponse(responseChannel, e))__                _                requestHandled = true__            }_        } else {_            _            final Set<RestRequest.Method> validMethodSet = getValidHandlerMethodSet(request)__            if (validMethodSet.size() > 0_                && validMethodSet.contains(request.method()) == false_                && request.method() != RestRequest.Method.OPTIONS) {_                _                _                _                handleUnsupportedHttpMethod(request, channel, validMethodSet)__                requestHandled = true__            } else if (validMethodSet.contains(request.method()) == false_                && (request.method() == RestRequest.Method.OPTIONS)) {_                handleOptionsRequest(request, channel, validMethodSet)__                requestHandled = true__            } else {_                requestHandled = false__            }_        }_        _        return requestHandled__    };dispatch,the,request,if,possible,returning,true,if,a,response,was,sent,or,false,otherwise;boolean,dispatch,request,final,rest,request,request,final,rest,channel,channel,final,node,client,client,final,optional,rest,handler,m,handler,throws,exception,final,int,content,length,request,has,content,request,content,length,0,rest,channel,response,channel,channel,boolean,request,handled,if,content,length,0,m,handler,map,h,has,content,type,request,h,false,or,else,false,send,content,type,error,message,request,channel,request,handled,true,else,if,content,length,0,m,handler,map,h,h,supports,content,stream,or,else,false,request,get,xcontent,type,xcontent,type,json,request,get,xcontent,type,xcontent,type,smile,channel,send,response,bytes,rest,response,create,simple,error,response,channel,rest,status,content,type,request,get,xcontent,type,does,not,support,stream,parsing,use,json,or,smile,instead,request,handled,true,else,if,m,handler,is,present,try,if,can,trip,circuit,breaker,m,handler,in,flight,requests,breaker,circuit,breaker,service,add,estimate,bytes,and,maybe,break,content,length,else,in,flight,requests,breaker,circuit,breaker,service,add,without,breaking,content,length,response,channel,new,resource,handling,http,channel,channel,circuit,breaker,service,content,length,final,rest,handler,wrapped,handler,m,handler,map,h,handler,wrapper,apply,h,get,wrapped,handler,handle,request,request,response,channel,client,request,handled,true,catch,exception,e,response,channel,send,response,new,bytes,rest,response,response,channel,e,request,handled,true,else,final,set,rest,request,method,valid,method,set,get,valid,handler,method,set,request,if,valid,method,set,size,0,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,unsupported,http,method,request,channel,valid,method,set,request,handled,true,else,if,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,options,request,request,channel,valid,method,set,request,handled,true,else,request,handled,false,return,request,handled
RestController -> boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,                             final Optional<RestHandler> mHandler) throws Exception;1541092382;Dispatch the request, if possible, returning true if a response was sent or false otherwise.;boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,_                            final Optional<RestHandler> mHandler) throws Exception {_        final int contentLength = request.hasContent() ? request.content().length() : 0___        RestChannel responseChannel = channel__        _        boolean requestHandled___        if (contentLength > 0 && mHandler.map(h -> hasContentType(request, h) == false).orElse(false)) {_            sendContentTypeErrorMessage(request, channel)__            requestHandled = true__        } else if (contentLength > 0 && mHandler.map(h -> h.supportsContentStream()).orElse(false) &&_            request.getXContentType() != XContentType.JSON && request.getXContentType() != XContentType.SMILE) {_            channel.sendResponse(BytesRestResponse.createSimpleErrorResponse(channel,_                RestStatus.NOT_ACCEPTABLE, "Content-Type [" + request.getXContentType() +_                    "] does not support stream parsing. Use JSON or SMILE instead"))__            requestHandled = true__        } else if (mHandler.isPresent()) {__            try {_                if (canTripCircuitBreaker(mHandler)) {_                    inFlightRequestsBreaker(circuitBreakerService).addEstimateBytesAndMaybeBreak(contentLength, "<http_request>")__                } else {_                    inFlightRequestsBreaker(circuitBreakerService).addWithoutBreaking(contentLength)__                }_                _                responseChannel = new ResourceHandlingHttpChannel(channel, circuitBreakerService, contentLength)___                final RestHandler wrappedHandler = mHandler.map(h -> handlerWrapper.apply(h)).get()__                wrappedHandler.handleRequest(request, responseChannel, client)__                requestHandled = true__            } catch (Exception e) {_                responseChannel.sendResponse(new BytesRestResponse(responseChannel, e))__                _                requestHandled = true__            }_        } else {_            _            final Set<RestRequest.Method> validMethodSet = getValidHandlerMethodSet(request)__            if (validMethodSet.size() > 0_                && validMethodSet.contains(request.method()) == false_                && request.method() != RestRequest.Method.OPTIONS) {_                _                _                _                handleUnsupportedHttpMethod(request, channel, validMethodSet)__                requestHandled = true__            } else if (validMethodSet.contains(request.method()) == false_                && (request.method() == RestRequest.Method.OPTIONS)) {_                handleOptionsRequest(request, channel, validMethodSet)__                requestHandled = true__            } else {_                requestHandled = false__            }_        }_        _        return requestHandled__    };dispatch,the,request,if,possible,returning,true,if,a,response,was,sent,or,false,otherwise;boolean,dispatch,request,final,rest,request,request,final,rest,channel,channel,final,node,client,client,final,optional,rest,handler,m,handler,throws,exception,final,int,content,length,request,has,content,request,content,length,0,rest,channel,response,channel,channel,boolean,request,handled,if,content,length,0,m,handler,map,h,has,content,type,request,h,false,or,else,false,send,content,type,error,message,request,channel,request,handled,true,else,if,content,length,0,m,handler,map,h,h,supports,content,stream,or,else,false,request,get,xcontent,type,xcontent,type,json,request,get,xcontent,type,xcontent,type,smile,channel,send,response,bytes,rest,response,create,simple,error,response,channel,rest,status,content,type,request,get,xcontent,type,does,not,support,stream,parsing,use,json,or,smile,instead,request,handled,true,else,if,m,handler,is,present,try,if,can,trip,circuit,breaker,m,handler,in,flight,requests,breaker,circuit,breaker,service,add,estimate,bytes,and,maybe,break,content,length,else,in,flight,requests,breaker,circuit,breaker,service,add,without,breaking,content,length,response,channel,new,resource,handling,http,channel,channel,circuit,breaker,service,content,length,final,rest,handler,wrapped,handler,m,handler,map,h,handler,wrapper,apply,h,get,wrapped,handler,handle,request,request,response,channel,client,request,handled,true,catch,exception,e,response,channel,send,response,new,bytes,rest,response,response,channel,e,request,handled,true,else,final,set,rest,request,method,valid,method,set,get,valid,handler,method,set,request,if,valid,method,set,size,0,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,unsupported,http,method,request,channel,valid,method,set,request,handled,true,else,if,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,options,request,request,channel,valid,method,set,request,handled,true,else,request,handled,false,return,request,handled
RestController -> boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,                             final Optional<RestHandler> mHandler) throws Exception;1542402632;Dispatch the request, if possible, returning true if a response was sent or false otherwise.;boolean dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client,_                            final Optional<RestHandler> mHandler) throws Exception {_        final int contentLength = request.hasContent() ? request.content().length() : 0___        RestChannel responseChannel = channel__        _        boolean requestHandled___        if (contentLength > 0 && mHandler.map(h -> hasContentType(request, h) == false).orElse(false)) {_            sendContentTypeErrorMessage(request, channel)__            requestHandled = true__        } else if (contentLength > 0 && mHandler.map(h -> h.supportsContentStream()).orElse(false) &&_            request.getXContentType() != XContentType.JSON && request.getXContentType() != XContentType.SMILE) {_            channel.sendResponse(BytesRestResponse.createSimpleErrorResponse(channel,_                RestStatus.NOT_ACCEPTABLE, "Content-Type [" + request.getXContentType() +_                    "] does not support stream parsing. Use JSON or SMILE instead"))__            requestHandled = true__        } else if (mHandler.isPresent()) {__            try {_                if (canTripCircuitBreaker(mHandler)) {_                    inFlightRequestsBreaker(circuitBreakerService).addEstimateBytesAndMaybeBreak(contentLength, "<http_request>")__                } else {_                    inFlightRequestsBreaker(circuitBreakerService).addWithoutBreaking(contentLength)__                }_                _                responseChannel = new ResourceHandlingHttpChannel(channel, circuitBreakerService, contentLength)___                final RestHandler wrappedHandler = mHandler.map(h -> handlerWrapper.apply(h)).get()__                wrappedHandler.handleRequest(request, responseChannel, client)__                requestHandled = true__            } catch (Exception e) {_                responseChannel.sendResponse(new BytesRestResponse(responseChannel, e))__                _                requestHandled = true__            }_        } else {_            _            final Set<RestRequest.Method> validMethodSet = getValidHandlerMethodSet(request)__            if (validMethodSet.size() > 0_                && validMethodSet.contains(request.method()) == false_                && request.method() != RestRequest.Method.OPTIONS) {_                _                _                _                handleUnsupportedHttpMethod(request, channel, validMethodSet)__                requestHandled = true__            } else if (validMethodSet.contains(request.method()) == false_                && (request.method() == RestRequest.Method.OPTIONS)) {_                handleOptionsRequest(request, channel, validMethodSet)__                requestHandled = true__            } else {_                requestHandled = false__            }_        }_        _        return requestHandled__    };dispatch,the,request,if,possible,returning,true,if,a,response,was,sent,or,false,otherwise;boolean,dispatch,request,final,rest,request,request,final,rest,channel,channel,final,node,client,client,final,optional,rest,handler,m,handler,throws,exception,final,int,content,length,request,has,content,request,content,length,0,rest,channel,response,channel,channel,boolean,request,handled,if,content,length,0,m,handler,map,h,has,content,type,request,h,false,or,else,false,send,content,type,error,message,request,channel,request,handled,true,else,if,content,length,0,m,handler,map,h,h,supports,content,stream,or,else,false,request,get,xcontent,type,xcontent,type,json,request,get,xcontent,type,xcontent,type,smile,channel,send,response,bytes,rest,response,create,simple,error,response,channel,rest,status,content,type,request,get,xcontent,type,does,not,support,stream,parsing,use,json,or,smile,instead,request,handled,true,else,if,m,handler,is,present,try,if,can,trip,circuit,breaker,m,handler,in,flight,requests,breaker,circuit,breaker,service,add,estimate,bytes,and,maybe,break,content,length,else,in,flight,requests,breaker,circuit,breaker,service,add,without,breaking,content,length,response,channel,new,resource,handling,http,channel,channel,circuit,breaker,service,content,length,final,rest,handler,wrapped,handler,m,handler,map,h,handler,wrapper,apply,h,get,wrapped,handler,handle,request,request,response,channel,client,request,handled,true,catch,exception,e,response,channel,send,response,new,bytes,rest,response,response,channel,e,request,handled,true,else,final,set,rest,request,method,valid,method,set,get,valid,handler,method,set,request,if,valid,method,set,size,0,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,unsupported,http,method,request,channel,valid,method,set,request,handled,true,else,if,valid,method,set,contains,request,method,false,request,method,rest,request,method,options,handle,options,request,request,channel,valid,method,set,request,handled,true,else,request,handled,false,return,request,handled
RestController -> public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                             String deprecationMessage, DeprecationLogger logger);1524684173;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request.__@param method GET, POST, etc._@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param deprecationMessage The message to log and send as a header in the response_@param logger The existing deprecation logger to use;public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                            String deprecationMessage, DeprecationLogger logger) {_        assert (handler instanceof DeprecationRestHandler) == false___        registerHandler(method, path, new DeprecationRestHandler(handler, deprecationMessage, logger))__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,param,method,get,post,etc,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,deprecation,message,the,message,to,log,and,send,as,a,header,in,the,response,param,logger,the,existing,deprecation,logger,to,use;public,void,register,as,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,string,deprecation,message,deprecation,logger,logger,assert,handler,instanceof,deprecation,rest,handler,false,register,handler,method,path,new,deprecation,rest,handler,handler,deprecation,message,logger
RestController -> public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                             String deprecationMessage, DeprecationLogger logger);1525645056;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request.__@param method GET, POST, etc._@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param deprecationMessage The message to log and send as a header in the response_@param logger The existing deprecation logger to use;public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                            String deprecationMessage, DeprecationLogger logger) {_        assert (handler instanceof DeprecationRestHandler) == false___        registerHandler(method, path, new DeprecationRestHandler(handler, deprecationMessage, logger))__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,param,method,get,post,etc,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,deprecation,message,the,message,to,log,and,send,as,a,header,in,the,response,param,logger,the,existing,deprecation,logger,to,use;public,void,register,as,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,string,deprecation,message,deprecation,logger,logger,assert,handler,instanceof,deprecation,rest,handler,false,register,handler,method,path,new,deprecation,rest,handler,handler,deprecation,message,logger
RestController -> public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                             String deprecationMessage, DeprecationLogger logger);1529015561;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request.__@param method GET, POST, etc._@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param deprecationMessage The message to log and send as a header in the response_@param logger The existing deprecation logger to use;public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                            String deprecationMessage, DeprecationLogger logger) {_        assert (handler instanceof DeprecationRestHandler) == false___        registerHandler(method, path, new DeprecationRestHandler(handler, deprecationMessage, logger))__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,param,method,get,post,etc,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,deprecation,message,the,message,to,log,and,send,as,a,header,in,the,response,param,logger,the,existing,deprecation,logger,to,use;public,void,register,as,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,string,deprecation,message,deprecation,logger,logger,assert,handler,instanceof,deprecation,rest,handler,false,register,handler,method,path,new,deprecation,rest,handler,handler,deprecation,message,logger
RestController -> public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                             String deprecationMessage, DeprecationLogger logger);1541092382;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request.__@param method GET, POST, etc._@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param deprecationMessage The message to log and send as a header in the response_@param logger The existing deprecation logger to use;public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                            String deprecationMessage, DeprecationLogger logger) {_        assert (handler instanceof DeprecationRestHandler) == false___        registerHandler(method, path, new DeprecationRestHandler(handler, deprecationMessage, logger))__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,param,method,get,post,etc,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,deprecation,message,the,message,to,log,and,send,as,a,header,in,the,response,param,logger,the,existing,deprecation,logger,to,use;public,void,register,as,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,string,deprecation,message,deprecation,logger,logger,assert,handler,instanceof,deprecation,rest,handler,false,register,handler,method,path,new,deprecation,rest,handler,handler,deprecation,message,logger
RestController -> public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                             String deprecationMessage, DeprecationLogger logger);1542402632;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request.__@param method GET, POST, etc._@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param deprecationMessage The message to log and send as a header in the response_@param logger The existing deprecation logger to use;public void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                            String deprecationMessage, DeprecationLogger logger) {_        assert (handler instanceof DeprecationRestHandler) == false___        registerHandler(method, path, new DeprecationRestHandler(handler, deprecationMessage, logger))__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,param,method,get,post,etc,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,deprecation,message,the,message,to,log,and,send,as,a,header,in,the,response,param,logger,the,existing,deprecation,logger,to,use;public,void,register,as,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,string,deprecation,message,deprecation,logger,logger,assert,handler,instanceof,deprecation,rest,handler,false,register,handler,method,path,new,deprecation,rest,handler,handler,deprecation,message,logger
RestController -> private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1524684173;Handle requests to a valid REST endpoint using an unsupported HTTP_method. A 405 HTTP response code is returned, and the response 'Allow'_header includes a list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-10.4.6">HTTP/1.1 -_10.4.6 - 405 Method Not Allowed</a>).;private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        try {_            BytesRestResponse bytesRestResponse = BytesRestResponse.createSimpleErrorResponse(channel, METHOD_NOT_ALLOWED,_                "Incorrect HTTP method for uri [" + request.uri() + "] and method [" + request.method() + "], allowed: " + validMethodSet)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } catch (final IOException e) {_            logger.warn("failed to send bad request response", e)__            channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,requests,to,a,valid,rest,endpoint,using,an,unsupported,http,method,a,405,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,10,4,6,http,1,1,10,4,6,405,method,not,allowed,a;private,void,handle,unsupported,http,method,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,try,bytes,rest,response,bytes,rest,response,bytes,rest,response,create,simple,error,response,channel,incorrect,http,method,for,uri,request,uri,and,method,request,method,allowed,valid,method,set,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,catch,final,ioexception,e,logger,warn,failed,to,send,bad,request,response,e,channel,send,response,new,bytes,rest,response,bytes,rest,response,bytes,array,empty
RestController -> private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1525645056;Handle requests to a valid REST endpoint using an unsupported HTTP_method. A 405 HTTP response code is returned, and the response 'Allow'_header includes a list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-10.4.6">HTTP/1.1 -_10.4.6 - 405 Method Not Allowed</a>).;private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        try {_            BytesRestResponse bytesRestResponse = BytesRestResponse.createSimpleErrorResponse(channel, METHOD_NOT_ALLOWED,_                "Incorrect HTTP method for uri [" + request.uri() + "] and method [" + request.method() + "], allowed: " + validMethodSet)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } catch (final IOException e) {_            logger.warn("failed to send bad request response", e)__            channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,requests,to,a,valid,rest,endpoint,using,an,unsupported,http,method,a,405,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,10,4,6,http,1,1,10,4,6,405,method,not,allowed,a;private,void,handle,unsupported,http,method,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,try,bytes,rest,response,bytes,rest,response,bytes,rest,response,create,simple,error,response,channel,incorrect,http,method,for,uri,request,uri,and,method,request,method,allowed,valid,method,set,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,catch,final,ioexception,e,logger,warn,failed,to,send,bad,request,response,e,channel,send,response,new,bytes,rest,response,bytes,rest,response,bytes,array,empty
RestController -> private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1529015561;Handle requests to a valid REST endpoint using an unsupported HTTP_method. A 405 HTTP response code is returned, and the response 'Allow'_header includes a list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-10.4.6">HTTP/1.1 -_10.4.6 - 405 Method Not Allowed</a>).;private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        try {_            BytesRestResponse bytesRestResponse = BytesRestResponse.createSimpleErrorResponse(channel, METHOD_NOT_ALLOWED,_                "Incorrect HTTP method for uri [" + request.uri() + "] and method [" + request.method() + "], allowed: " + validMethodSet)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } catch (final IOException e) {_            logger.warn("failed to send bad request response", e)__            channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,requests,to,a,valid,rest,endpoint,using,an,unsupported,http,method,a,405,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,10,4,6,http,1,1,10,4,6,405,method,not,allowed,a;private,void,handle,unsupported,http,method,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,try,bytes,rest,response,bytes,rest,response,bytes,rest,response,create,simple,error,response,channel,incorrect,http,method,for,uri,request,uri,and,method,request,method,allowed,valid,method,set,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,catch,final,ioexception,e,logger,warn,failed,to,send,bad,request,response,e,channel,send,response,new,bytes,rest,response,bytes,rest,response,bytes,array,empty
RestController -> private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1541092382;Handle requests to a valid REST endpoint using an unsupported HTTP_method. A 405 HTTP response code is returned, and the response 'Allow'_header includes a list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-10.4.6">HTTP/1.1 -_10.4.6 - 405 Method Not Allowed</a>).;private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        try {_            BytesRestResponse bytesRestResponse = BytesRestResponse.createSimpleErrorResponse(channel, METHOD_NOT_ALLOWED,_                "Incorrect HTTP method for uri [" + request.uri() + "] and method [" + request.method() + "], allowed: " + validMethodSet)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } catch (final IOException e) {_            logger.warn("failed to send bad request response", e)__            channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,requests,to,a,valid,rest,endpoint,using,an,unsupported,http,method,a,405,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,10,4,6,http,1,1,10,4,6,405,method,not,allowed,a;private,void,handle,unsupported,http,method,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,try,bytes,rest,response,bytes,rest,response,bytes,rest,response,create,simple,error,response,channel,incorrect,http,method,for,uri,request,uri,and,method,request,method,allowed,valid,method,set,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,catch,final,ioexception,e,logger,warn,failed,to,send,bad,request,response,e,channel,send,response,new,bytes,rest,response,bytes,rest,response,bytes,array,empty
RestController -> private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1542402632;Handle requests to a valid REST endpoint using an unsupported HTTP_method. A 405 HTTP response code is returned, and the response 'Allow'_header includes a list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-10.4.6">HTTP/1.1 -_10.4.6 - 405 Method Not Allowed</a>).;private void handleUnsupportedHttpMethod(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        try {_            BytesRestResponse bytesRestResponse = BytesRestResponse.createSimpleErrorResponse(channel, METHOD_NOT_ALLOWED,_                "Incorrect HTTP method for uri [" + request.uri() + "] and method [" + request.method() + "], allowed: " + validMethodSet)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } catch (final IOException e) {_            logger.warn("failed to send bad request response", e)__            channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,requests,to,a,valid,rest,endpoint,using,an,unsupported,http,method,a,405,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,10,4,6,http,1,1,10,4,6,405,method,not,allowed,a;private,void,handle,unsupported,http,method,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,try,bytes,rest,response,bytes,rest,response,bytes,rest,response,create,simple,error,response,channel,incorrect,http,method,for,uri,request,uri,and,method,request,method,allowed,valid,method,set,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,catch,final,ioexception,e,logger,warn,failed,to,send,bad,request,response,e,channel,send,response,new,bytes,rest,response,bytes,rest,response,bytes,array,empty
RestController -> private void handleBadRequest(RestRequest request, RestChannel channel) throws IOException;1525645056;Handle a requests with no candidate handlers (return a 400 Bad Request_error).;private void handleBadRequest(RestRequest request, RestChannel channel) throws IOException {_        try (XContentBuilder builder = channel.newErrorBuilder()) {_            builder.startObject()__            {_                builder.field("error", "no handler found for uri [" + request.uri() + "] and method [" + request.method() + "]")__            }_            builder.endObject()__            channel.sendResponse(new BytesRestResponse(BAD_REQUEST, builder))__        }_    };handle,a,requests,with,no,candidate,handlers,return,a,400,bad,request,error;private,void,handle,bad,request,rest,request,request,rest,channel,channel,throws,ioexception,try,xcontent,builder,builder,channel,new,error,builder,builder,start,object,builder,field,error,no,handler,found,for,uri,request,uri,and,method,request,method,builder,end,object,channel,send,response,new,bytes,rest,response,builder
RestController -> private void handleBadRequest(RestRequest request, RestChannel channel) throws IOException;1529015561;Handle a requests with no candidate handlers (return a 400 Bad Request_error).;private void handleBadRequest(RestRequest request, RestChannel channel) throws IOException {_        try (XContentBuilder builder = channel.newErrorBuilder()) {_            builder.startObject()__            {_                builder.field("error", "no handler found for uri [" + request.uri() + "] and method [" + request.method() + "]")__            }_            builder.endObject()__            channel.sendResponse(new BytesRestResponse(BAD_REQUEST, builder))__        }_    };handle,a,requests,with,no,candidate,handlers,return,a,400,bad,request,error;private,void,handle,bad,request,rest,request,request,rest,channel,channel,throws,ioexception,try,xcontent,builder,builder,channel,new,error,builder,builder,start,object,builder,field,error,no,handler,found,for,uri,request,uri,and,method,request,method,builder,end,object,channel,send,response,new,bytes,rest,response,builder
RestController -> private void handleBadRequest(RestRequest request, RestChannel channel) throws IOException;1541092382;Handle a requests with no candidate handlers (return a 400 Bad Request_error).;private void handleBadRequest(RestRequest request, RestChannel channel) throws IOException {_        try (XContentBuilder builder = channel.newErrorBuilder()) {_            builder.startObject()__            {_                builder.field("error", "no handler found for uri [" + request.uri() + "] and method [" + request.method() + "]")__            }_            builder.endObject()__            channel.sendResponse(new BytesRestResponse(BAD_REQUEST, builder))__        }_    };handle,a,requests,with,no,candidate,handlers,return,a,400,bad,request,error;private,void,handle,bad,request,rest,request,request,rest,channel,channel,throws,ioexception,try,xcontent,builder,builder,channel,new,error,builder,builder,start,object,builder,field,error,no,handler,found,for,uri,request,uri,and,method,request,method,builder,end,object,channel,send,response,new,bytes,rest,response,builder
RestController -> private void handleBadRequest(RestRequest request, RestChannel channel) throws IOException;1542402632;Handle a requests with no candidate handlers (return a 400 Bad Request_error).;private void handleBadRequest(RestRequest request, RestChannel channel) throws IOException {_        try (XContentBuilder builder = channel.newErrorBuilder()) {_            builder.startObject()__            {_                builder.field("error", "no handler found for uri [" + request.uri() + "] and method [" + request.method() + "]")__            }_            builder.endObject()__            channel.sendResponse(new BytesRestResponse(BAD_REQUEST, builder))__        }_    };handle,a,requests,with,no,candidate,handlers,return,a,400,bad,request,error;private,void,handle,bad,request,rest,request,request,rest,channel,channel,throws,ioexception,try,xcontent,builder,builder,channel,new,error,builder,builder,start,object,builder,field,error,no,handler,found,for,uri,request,uri,and,method,request,method,builder,end,object,channel,send,response,new,bytes,rest,response,builder
RestController -> public boolean canTripCircuitBreaker(final Optional<RestHandler> handler);1524684173;@return true iff the circuit breaker limit must be enforced for processing this request.;public boolean canTripCircuitBreaker(final Optional<RestHandler> handler) {_        return handler.map(h -> h.canTripCircuitBreaker()).orElse(true)__    };return,true,iff,the,circuit,breaker,limit,must,be,enforced,for,processing,this,request;public,boolean,can,trip,circuit,breaker,final,optional,rest,handler,handler,return,handler,map,h,h,can,trip,circuit,breaker,or,else,true
RestController -> public boolean canTripCircuitBreaker(final Optional<RestHandler> handler);1525645056;@return true iff the circuit breaker limit must be enforced for processing this request.;public boolean canTripCircuitBreaker(final Optional<RestHandler> handler) {_        return handler.map(h -> h.canTripCircuitBreaker()).orElse(true)__    };return,true,iff,the,circuit,breaker,limit,must,be,enforced,for,processing,this,request;public,boolean,can,trip,circuit,breaker,final,optional,rest,handler,handler,return,handler,map,h,h,can,trip,circuit,breaker,or,else,true
RestController -> public boolean canTripCircuitBreaker(final Optional<RestHandler> handler);1529015561;@return true iff the circuit breaker limit must be enforced for processing this request.;public boolean canTripCircuitBreaker(final Optional<RestHandler> handler) {_        return handler.map(h -> h.canTripCircuitBreaker()).orElse(true)__    };return,true,iff,the,circuit,breaker,limit,must,be,enforced,for,processing,this,request;public,boolean,can,trip,circuit,breaker,final,optional,rest,handler,handler,return,handler,map,h,h,can,trip,circuit,breaker,or,else,true
RestController -> public boolean canTripCircuitBreaker(final Optional<RestHandler> handler);1541092382;@return true iff the circuit breaker limit must be enforced for processing this request.;public boolean canTripCircuitBreaker(final Optional<RestHandler> handler) {_        return handler.map(h -> h.canTripCircuitBreaker()).orElse(true)__    };return,true,iff,the,circuit,breaker,limit,must,be,enforced,for,processing,this,request;public,boolean,can,trip,circuit,breaker,final,optional,rest,handler,handler,return,handler,map,h,h,can,trip,circuit,breaker,or,else,true
RestController -> public boolean canTripCircuitBreaker(final Optional<RestHandler> handler);1542402632;@return true iff the circuit breaker limit must be enforced for processing this request.;public boolean canTripCircuitBreaker(final Optional<RestHandler> handler) {_        return handler.map(h -> h.canTripCircuitBreaker()).orElse(true)__    };return,true,iff,the,circuit,breaker,limit,must,be,enforced,for,processing,this,request;public,boolean,can,trip,circuit,breaker,final,optional,rest,handler,handler,return,handler,map,h,h,can,trip,circuit,breaker,or,else,true
RestController -> public void registerHandler(RestRequest.Method method, String path, RestHandler handler);1524684173;Registers a REST handler to be executed when one of the provided methods and path match the request.__@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param method GET, POST, etc.;public void registerHandler(RestRequest.Method method, String path, RestHandler handler) {_        if (handler instanceof BaseRestHandler) {_            usageService.addRestHandler((BaseRestHandler) handler)__        }_        handlers.insertOrUpdate(path, new MethodHandlers(path, handler, method), (mHandlers, newMHandler) -> {_            return mHandlers.addMethods(handler, method)__        })__    };registers,a,rest,handler,to,be,executed,when,one,of,the,provided,methods,and,path,match,the,request,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,method,get,post,etc;public,void,register,handler,rest,request,method,method,string,path,rest,handler,handler,if,handler,instanceof,base,rest,handler,usage,service,add,rest,handler,base,rest,handler,handler,handlers,insert,or,update,path,new,method,handlers,path,handler,method,m,handlers,new,mhandler,return,m,handlers,add,methods,handler,method
RestController -> public void registerHandler(RestRequest.Method method, String path, RestHandler handler);1525645056;Registers a REST handler to be executed when one of the provided methods and path match the request.__@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param method GET, POST, etc.;public void registerHandler(RestRequest.Method method, String path, RestHandler handler) {_        if (handler instanceof BaseRestHandler) {_            usageService.addRestHandler((BaseRestHandler) handler)__        }_        handlers.insertOrUpdate(path, new MethodHandlers(path, handler, method), (mHandlers, newMHandler) -> {_            return mHandlers.addMethods(handler, method)__        })__    };registers,a,rest,handler,to,be,executed,when,one,of,the,provided,methods,and,path,match,the,request,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,method,get,post,etc;public,void,register,handler,rest,request,method,method,string,path,rest,handler,handler,if,handler,instanceof,base,rest,handler,usage,service,add,rest,handler,base,rest,handler,handler,handlers,insert,or,update,path,new,method,handlers,path,handler,method,m,handlers,new,mhandler,return,m,handlers,add,methods,handler,method
RestController -> public void registerHandler(RestRequest.Method method, String path, RestHandler handler);1529015561;Registers a REST handler to be executed when one of the provided methods and path match the request.__@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param method GET, POST, etc.;public void registerHandler(RestRequest.Method method, String path, RestHandler handler) {_        if (handler instanceof BaseRestHandler) {_            usageService.addRestHandler((BaseRestHandler) handler)__        }_        handlers.insertOrUpdate(path, new MethodHandlers(path, handler, method), (mHandlers, newMHandler) -> {_            return mHandlers.addMethods(handler, method)__        })__    };registers,a,rest,handler,to,be,executed,when,one,of,the,provided,methods,and,path,match,the,request,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,method,get,post,etc;public,void,register,handler,rest,request,method,method,string,path,rest,handler,handler,if,handler,instanceof,base,rest,handler,usage,service,add,rest,handler,base,rest,handler,handler,handlers,insert,or,update,path,new,method,handlers,path,handler,method,m,handlers,new,mhandler,return,m,handlers,add,methods,handler,method
RestController -> public void registerHandler(RestRequest.Method method, String path, RestHandler handler);1541092382;Registers a REST handler to be executed when one of the provided methods and path match the request.__@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param method GET, POST, etc.;public void registerHandler(RestRequest.Method method, String path, RestHandler handler) {_        if (handler instanceof BaseRestHandler) {_            usageService.addRestHandler((BaseRestHandler) handler)__        }_        handlers.insertOrUpdate(path, new MethodHandlers(path, handler, method), (mHandlers, newMHandler) -> {_            return mHandlers.addMethods(handler, method)__        })__    };registers,a,rest,handler,to,be,executed,when,one,of,the,provided,methods,and,path,match,the,request,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,method,get,post,etc;public,void,register,handler,rest,request,method,method,string,path,rest,handler,handler,if,handler,instanceof,base,rest,handler,usage,service,add,rest,handler,base,rest,handler,handler,handlers,insert,or,update,path,new,method,handlers,path,handler,method,m,handlers,new,mhandler,return,m,handlers,add,methods,handler,method
RestController -> public void registerHandler(RestRequest.Method method, String path, RestHandler handler);1542402632;Registers a REST handler to be executed when one of the provided methods and path match the request.__@param path Path to handle (e.g., "/{index}/{type}/_bulk")_@param handler The handler to actually execute_@param method GET, POST, etc.;public void registerHandler(RestRequest.Method method, String path, RestHandler handler) {_        if (handler instanceof BaseRestHandler) {_            usageService.addRestHandler((BaseRestHandler) handler)__        }_        handlers.insertOrUpdate(path, new MethodHandlers(path, handler, method), (mHandlers, newMHandler) -> {_            return mHandlers.addMethods(handler, method)__        })__    };registers,a,rest,handler,to,be,executed,when,one,of,the,provided,methods,and,path,match,the,request,param,path,path,to,handle,e,g,index,type,param,handler,the,handler,to,actually,execute,param,method,get,post,etc;public,void,register,handler,rest,request,method,method,string,path,rest,handler,handler,if,handler,instanceof,base,rest,handler,usage,service,add,rest,handler,base,rest,handler,handler,handlers,insert,or,update,path,new,method,handlers,path,handler,method,m,handlers,new,mhandler,return,m,handlers,add,methods,handler,method
RestController -> private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler);1524684173;If a request contains content, this method will return {@code true} if the {@code Content-Type} header is present, matches an_{@link XContentType} or the handler supports a content stream and the content type header is for newline delimited JSON,;private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler) {_        if (restRequest.getXContentType() == null) {_            if (restHandler.supportsContentStream() && restRequest.header("Content-Type") != null) {_                final String lowercaseMediaType = restRequest.header("Content-Type").toLowerCase(Locale.ROOT)__                _                if (lowercaseMediaType.equals("application/x-ndjson")) {_                    restRequest.setXContentType(XContentType.JSON)__                    return true__                }_            }_            return false__        }_        return true__    };if,a,request,contains,content,this,method,will,return,code,true,if,the,code,content,type,header,is,present,matches,an,link,xcontent,type,or,the,handler,supports,a,content,stream,and,the,content,type,header,is,for,newline,delimited,json;private,static,boolean,has,content,type,final,rest,request,rest,request,final,rest,handler,rest,handler,if,rest,request,get,xcontent,type,null,if,rest,handler,supports,content,stream,rest,request,header,content,type,null,final,string,lowercase,media,type,rest,request,header,content,type,to,lower,case,locale,root,if,lowercase,media,type,equals,application,x,ndjson,rest,request,set,xcontent,type,xcontent,type,json,return,true,return,false,return,true
RestController -> private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler);1525645056;If a request contains content, this method will return {@code true} if the {@code Content-Type} header is present, matches an_{@link XContentType} or the handler supports a content stream and the content type header is for newline delimited JSON,;private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler) {_        if (restRequest.getXContentType() == null) {_            if (restHandler.supportsContentStream() && restRequest.header("Content-Type") != null) {_                final String lowercaseMediaType = restRequest.header("Content-Type").toLowerCase(Locale.ROOT)__                _                if (lowercaseMediaType.equals("application/x-ndjson")) {_                    restRequest.setXContentType(XContentType.JSON)__                    return true__                }_            }_            return false__        }_        return true__    };if,a,request,contains,content,this,method,will,return,code,true,if,the,code,content,type,header,is,present,matches,an,link,xcontent,type,or,the,handler,supports,a,content,stream,and,the,content,type,header,is,for,newline,delimited,json;private,static,boolean,has,content,type,final,rest,request,rest,request,final,rest,handler,rest,handler,if,rest,request,get,xcontent,type,null,if,rest,handler,supports,content,stream,rest,request,header,content,type,null,final,string,lowercase,media,type,rest,request,header,content,type,to,lower,case,locale,root,if,lowercase,media,type,equals,application,x,ndjson,rest,request,set,xcontent,type,xcontent,type,json,return,true,return,false,return,true
RestController -> private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler);1529015561;If a request contains content, this method will return {@code true} if the {@code Content-Type} header is present, matches an_{@link XContentType} or the handler supports a content stream and the content type header is for newline delimited JSON,;private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler) {_        if (restRequest.getXContentType() == null) {_            String contentTypeHeader = restRequest.header("Content-Type")__            if (restHandler.supportsContentStream() && contentTypeHeader != null) {_                final String lowercaseMediaType = contentTypeHeader.toLowerCase(Locale.ROOT)__                _                if (lowercaseMediaType.equals("application/x-ndjson")) {_                    restRequest.setXContentType(XContentType.JSON)__                    return true__                }_            }_            return false__        }_        return true__    };if,a,request,contains,content,this,method,will,return,code,true,if,the,code,content,type,header,is,present,matches,an,link,xcontent,type,or,the,handler,supports,a,content,stream,and,the,content,type,header,is,for,newline,delimited,json;private,static,boolean,has,content,type,final,rest,request,rest,request,final,rest,handler,rest,handler,if,rest,request,get,xcontent,type,null,string,content,type,header,rest,request,header,content,type,if,rest,handler,supports,content,stream,content,type,header,null,final,string,lowercase,media,type,content,type,header,to,lower,case,locale,root,if,lowercase,media,type,equals,application,x,ndjson,rest,request,set,xcontent,type,xcontent,type,json,return,true,return,false,return,true
RestController -> private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler);1541092382;If a request contains content, this method will return {@code true} if the {@code Content-Type} header is present, matches an_{@link XContentType} or the handler supports a content stream and the content type header is for newline delimited JSON,;private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler) {_        if (restRequest.getXContentType() == null) {_            String contentTypeHeader = restRequest.header("Content-Type")__            if (restHandler.supportsContentStream() && contentTypeHeader != null) {_                final String lowercaseMediaType = contentTypeHeader.toLowerCase(Locale.ROOT)__                _                if (lowercaseMediaType.equals("application/x-ndjson")) {_                    restRequest.setXContentType(XContentType.JSON)__                    return true__                }_            }_            return false__        }_        return true__    };if,a,request,contains,content,this,method,will,return,code,true,if,the,code,content,type,header,is,present,matches,an,link,xcontent,type,or,the,handler,supports,a,content,stream,and,the,content,type,header,is,for,newline,delimited,json;private,static,boolean,has,content,type,final,rest,request,rest,request,final,rest,handler,rest,handler,if,rest,request,get,xcontent,type,null,string,content,type,header,rest,request,header,content,type,if,rest,handler,supports,content,stream,content,type,header,null,final,string,lowercase,media,type,content,type,header,to,lower,case,locale,root,if,lowercase,media,type,equals,application,x,ndjson,rest,request,set,xcontent,type,xcontent,type,json,return,true,return,false,return,true
RestController -> private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler);1542402632;If a request contains content, this method will return {@code true} if the {@code Content-Type} header is present, matches an_{@link XContentType} or the handler supports a content stream and the content type header is for newline delimited JSON,;private static boolean hasContentType(final RestRequest restRequest, final RestHandler restHandler) {_        if (restRequest.getXContentType() == null) {_            String contentTypeHeader = restRequest.header("Content-Type")__            if (restHandler.supportsContentStream() && contentTypeHeader != null) {_                final String lowercaseMediaType = contentTypeHeader.toLowerCase(Locale.ROOT)__                _                if (lowercaseMediaType.equals("application/x-ndjson")) {_                    restRequest.setXContentType(XContentType.JSON)__                    return true__                }_            }_            return false__        }_        return true__    };if,a,request,contains,content,this,method,will,return,code,true,if,the,code,content,type,header,is,present,matches,an,link,xcontent,type,or,the,handler,supports,a,content,stream,and,the,content,type,header,is,for,newline,delimited,json;private,static,boolean,has,content,type,final,rest,request,rest,request,final,rest,handler,rest,handler,if,rest,request,get,xcontent,type,null,string,content,type,header,rest,request,header,content,type,if,rest,handler,supports,content,stream,content,type,header,null,final,string,lowercase,media,type,content,type,header,to,lower,case,locale,root,if,lowercase,media,type,equals,application,x,ndjson,rest,request,set,xcontent,type,xcontent,type,json,return,true,return,false,return,true
RestController -> boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel);1524684173;Checks the request parameters against enabled settings for error trace support_@return true if the request does not have any parameters that conflict with system settings;boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel) {_        _        _        if (request.paramAsBoolean("error_trace", false) && channel.detailedErrorsEnabled() == false) {_            return false__        }__        return true__    };checks,the,request,parameters,against,enabled,settings,for,error,trace,support,return,true,if,the,request,does,not,have,any,parameters,that,conflict,with,system,settings;boolean,check,error,trace,parameter,final,rest,request,request,final,rest,channel,channel,if,request,param,as,boolean,false,channel,detailed,errors,enabled,false,return,false,return,true
RestController -> boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel);1525645056;Checks the request parameters against enabled settings for error trace support_@return true if the request does not have any parameters that conflict with system settings;boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel) {_        _        _        if (request.paramAsBoolean("error_trace", false) && channel.detailedErrorsEnabled() == false) {_            return false__        }__        return true__    };checks,the,request,parameters,against,enabled,settings,for,error,trace,support,return,true,if,the,request,does,not,have,any,parameters,that,conflict,with,system,settings;boolean,check,error,trace,parameter,final,rest,request,request,final,rest,channel,channel,if,request,param,as,boolean,false,channel,detailed,errors,enabled,false,return,false,return,true
RestController -> boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel);1529015561;Checks the request parameters against enabled settings for error trace support_@return true if the request does not have any parameters that conflict with system settings;boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel) {_        _        _        if (request.paramAsBoolean("error_trace", false) && channel.detailedErrorsEnabled() == false) {_            return false__        }__        return true__    };checks,the,request,parameters,against,enabled,settings,for,error,trace,support,return,true,if,the,request,does,not,have,any,parameters,that,conflict,with,system,settings;boolean,check,error,trace,parameter,final,rest,request,request,final,rest,channel,channel,if,request,param,as,boolean,false,channel,detailed,errors,enabled,false,return,false,return,true
RestController -> boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel);1541092382;Checks the request parameters against enabled settings for error trace support_@return true if the request does not have any parameters that conflict with system settings;boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel) {_        _        _        if (request.paramAsBoolean("error_trace", false) && channel.detailedErrorsEnabled() == false) {_            return false__        }__        return true__    };checks,the,request,parameters,against,enabled,settings,for,error,trace,support,return,true,if,the,request,does,not,have,any,parameters,that,conflict,with,system,settings;boolean,check,error,trace,parameter,final,rest,request,request,final,rest,channel,channel,if,request,param,as,boolean,false,channel,detailed,errors,enabled,false,return,false,return,true
RestController -> boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel);1542402632;Checks the request parameters against enabled settings for error trace support_@return true if the request does not have any parameters that conflict with system settings;boolean checkErrorTraceParameter(final RestRequest request, final RestChannel channel) {_        _        _        if (request.paramAsBoolean("error_trace", false) && channel.detailedErrorsEnabled() == false) {_            return false__        }__        return true__    };checks,the,request,parameters,against,enabled,settings,for,error,trace,support,return,true,if,the,request,does,not,have,any,parameters,that,conflict,with,system,settings;boolean,check,error,trace,parameter,final,rest,request,request,final,rest,channel,channel,if,request,param,as,boolean,false,channel,detailed,errors,enabled,false,return,false,return,true
RestController -> public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                               RestRequest.Method deprecatedMethod, String deprecatedPath,                                               DeprecationLogger logger);1524684173;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request, or when provided_with {@code deprecatedMethod} and {@code deprecatedPath}. Expected usage:_<pre><code>_// remove deprecation in next major release_controller.registerWithDeprecatedHandler(POST, "/_forcemerge", this,_POST, "/_optimize", deprecationLogger)__controller.registerWithDeprecatedHandler(POST, "/{index}/_forcemerge", this,_POST, "/{index}/_optimize", deprecationLogger)__</code></pre>_<p>_The registered REST handler ({@code method} with {@code path}) is a normal REST handler that is not deprecated and it is_replacing the deprecated REST handler ({@code deprecatedMethod} with {@code deprecatedPath}) that is using the <em>same</em>_{@code handler}._<p>_Deprecated REST handlers without a direct replacement should be deprecated directly using {@link #registerAsDeprecatedHandler}_and a specific message.__@param method GET, POST, etc._@param path Path to handle (e.g., "/_forcemerge")_@param handler The handler to actually execute_@param deprecatedMethod GET, POST, etc._@param deprecatedPath <em>Deprecated</em> path to handle (e.g., "/_optimize")_@param logger The existing deprecation logger to use;public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                              RestRequest.Method deprecatedMethod, String deprecatedPath,_                                              DeprecationLogger logger) {_        _        final String deprecationMessage =_            "[" + deprecatedMethod.name() + " " + deprecatedPath + "] is deprecated! Use [" + method.name() + " " + path + "] instead."___        registerHandler(method, path, handler)__        registerAsDeprecatedHandler(deprecatedMethod, deprecatedPath, handler, deprecationMessage, logger)__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,or,when,provided,with,code,deprecated,method,and,code,deprecated,path,expected,usage,pre,code,remove,deprecation,in,next,major,release,controller,register,with,deprecated,handler,post,this,post,deprecation,logger,controller,register,with,deprecated,handler,post,index,this,post,index,deprecation,logger,code,pre,p,the,registered,rest,handler,code,method,with,code,path,is,a,normal,rest,handler,that,is,not,deprecated,and,it,is,replacing,the,deprecated,rest,handler,code,deprecated,method,with,code,deprecated,path,that,is,using,the,em,same,em,code,handler,p,deprecated,rest,handlers,without,a,direct,replacement,should,be,deprecated,directly,using,link,register,as,deprecated,handler,and,a,specific,message,param,method,get,post,etc,param,path,path,to,handle,e,g,param,handler,the,handler,to,actually,execute,param,deprecated,method,get,post,etc,param,deprecated,path,em,deprecated,em,path,to,handle,e,g,param,logger,the,existing,deprecation,logger,to,use;public,void,register,with,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,rest,request,method,deprecated,method,string,deprecated,path,deprecation,logger,logger,final,string,deprecation,message,deprecated,method,name,deprecated,path,is,deprecated,use,method,name,path,instead,register,handler,method,path,handler,register,as,deprecated,handler,deprecated,method,deprecated,path,handler,deprecation,message,logger
RestController -> public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                               RestRequest.Method deprecatedMethod, String deprecatedPath,                                               DeprecationLogger logger);1525645056;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request, or when provided_with {@code deprecatedMethod} and {@code deprecatedPath}. Expected usage:_<pre><code>_// remove deprecation in next major release_controller.registerWithDeprecatedHandler(POST, "/_forcemerge", this,_POST, "/_optimize", deprecationLogger)__controller.registerWithDeprecatedHandler(POST, "/{index}/_forcemerge", this,_POST, "/{index}/_optimize", deprecationLogger)__</code></pre>_<p>_The registered REST handler ({@code method} with {@code path}) is a normal REST handler that is not deprecated and it is_replacing the deprecated REST handler ({@code deprecatedMethod} with {@code deprecatedPath}) that is using the <em>same</em>_{@code handler}._<p>_Deprecated REST handlers without a direct replacement should be deprecated directly using {@link #registerAsDeprecatedHandler}_and a specific message.__@param method GET, POST, etc._@param path Path to handle (e.g., "/_forcemerge")_@param handler The handler to actually execute_@param deprecatedMethod GET, POST, etc._@param deprecatedPath <em>Deprecated</em> path to handle (e.g., "/_optimize")_@param logger The existing deprecation logger to use;public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                              RestRequest.Method deprecatedMethod, String deprecatedPath,_                                              DeprecationLogger logger) {_        _        final String deprecationMessage =_            "[" + deprecatedMethod.name() + " " + deprecatedPath + "] is deprecated! Use [" + method.name() + " " + path + "] instead."___        registerHandler(method, path, handler)__        registerAsDeprecatedHandler(deprecatedMethod, deprecatedPath, handler, deprecationMessage, logger)__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,or,when,provided,with,code,deprecated,method,and,code,deprecated,path,expected,usage,pre,code,remove,deprecation,in,next,major,release,controller,register,with,deprecated,handler,post,this,post,deprecation,logger,controller,register,with,deprecated,handler,post,index,this,post,index,deprecation,logger,code,pre,p,the,registered,rest,handler,code,method,with,code,path,is,a,normal,rest,handler,that,is,not,deprecated,and,it,is,replacing,the,deprecated,rest,handler,code,deprecated,method,with,code,deprecated,path,that,is,using,the,em,same,em,code,handler,p,deprecated,rest,handlers,without,a,direct,replacement,should,be,deprecated,directly,using,link,register,as,deprecated,handler,and,a,specific,message,param,method,get,post,etc,param,path,path,to,handle,e,g,param,handler,the,handler,to,actually,execute,param,deprecated,method,get,post,etc,param,deprecated,path,em,deprecated,em,path,to,handle,e,g,param,logger,the,existing,deprecation,logger,to,use;public,void,register,with,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,rest,request,method,deprecated,method,string,deprecated,path,deprecation,logger,logger,final,string,deprecation,message,deprecated,method,name,deprecated,path,is,deprecated,use,method,name,path,instead,register,handler,method,path,handler,register,as,deprecated,handler,deprecated,method,deprecated,path,handler,deprecation,message,logger
RestController -> public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                               RestRequest.Method deprecatedMethod, String deprecatedPath,                                               DeprecationLogger logger);1529015561;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request, or when provided_with {@code deprecatedMethod} and {@code deprecatedPath}. Expected usage:_<pre><code>_// remove deprecation in next major release_controller.registerWithDeprecatedHandler(POST, "/_forcemerge", this,_POST, "/_optimize", deprecationLogger)__controller.registerWithDeprecatedHandler(POST, "/{index}/_forcemerge", this,_POST, "/{index}/_optimize", deprecationLogger)__</code></pre>_<p>_The registered REST handler ({@code method} with {@code path}) is a normal REST handler that is not deprecated and it is_replacing the deprecated REST handler ({@code deprecatedMethod} with {@code deprecatedPath}) that is using the <em>same</em>_{@code handler}._<p>_Deprecated REST handlers without a direct replacement should be deprecated directly using {@link #registerAsDeprecatedHandler}_and a specific message.__@param method GET, POST, etc._@param path Path to handle (e.g., "/_forcemerge")_@param handler The handler to actually execute_@param deprecatedMethod GET, POST, etc._@param deprecatedPath <em>Deprecated</em> path to handle (e.g., "/_optimize")_@param logger The existing deprecation logger to use;public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                              RestRequest.Method deprecatedMethod, String deprecatedPath,_                                              DeprecationLogger logger) {_        _        final String deprecationMessage =_            "[" + deprecatedMethod.name() + " " + deprecatedPath + "] is deprecated! Use [" + method.name() + " " + path + "] instead."___        registerHandler(method, path, handler)__        registerAsDeprecatedHandler(deprecatedMethod, deprecatedPath, handler, deprecationMessage, logger)__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,or,when,provided,with,code,deprecated,method,and,code,deprecated,path,expected,usage,pre,code,remove,deprecation,in,next,major,release,controller,register,with,deprecated,handler,post,this,post,deprecation,logger,controller,register,with,deprecated,handler,post,index,this,post,index,deprecation,logger,code,pre,p,the,registered,rest,handler,code,method,with,code,path,is,a,normal,rest,handler,that,is,not,deprecated,and,it,is,replacing,the,deprecated,rest,handler,code,deprecated,method,with,code,deprecated,path,that,is,using,the,em,same,em,code,handler,p,deprecated,rest,handlers,without,a,direct,replacement,should,be,deprecated,directly,using,link,register,as,deprecated,handler,and,a,specific,message,param,method,get,post,etc,param,path,path,to,handle,e,g,param,handler,the,handler,to,actually,execute,param,deprecated,method,get,post,etc,param,deprecated,path,em,deprecated,em,path,to,handle,e,g,param,logger,the,existing,deprecation,logger,to,use;public,void,register,with,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,rest,request,method,deprecated,method,string,deprecated,path,deprecation,logger,logger,final,string,deprecation,message,deprecated,method,name,deprecated,path,is,deprecated,use,method,name,path,instead,register,handler,method,path,handler,register,as,deprecated,handler,deprecated,method,deprecated,path,handler,deprecation,message,logger
RestController -> public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                               RestRequest.Method deprecatedMethod, String deprecatedPath,                                               DeprecationLogger logger);1541092382;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request, or when provided_with {@code deprecatedMethod} and {@code deprecatedPath}. Expected usage:_<pre><code>_// remove deprecation in next major release_controller.registerWithDeprecatedHandler(POST, "/_forcemerge", this,_POST, "/_optimize", deprecationLogger)__controller.registerWithDeprecatedHandler(POST, "/{index}/_forcemerge", this,_POST, "/{index}/_optimize", deprecationLogger)__</code></pre>_<p>_The registered REST handler ({@code method} with {@code path}) is a normal REST handler that is not deprecated and it is_replacing the deprecated REST handler ({@code deprecatedMethod} with {@code deprecatedPath}) that is using the <em>same</em>_{@code handler}._<p>_Deprecated REST handlers without a direct replacement should be deprecated directly using {@link #registerAsDeprecatedHandler}_and a specific message.__@param method GET, POST, etc._@param path Path to handle (e.g., "/_forcemerge")_@param handler The handler to actually execute_@param deprecatedMethod GET, POST, etc._@param deprecatedPath <em>Deprecated</em> path to handle (e.g., "/_optimize")_@param logger The existing deprecation logger to use;public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                              RestRequest.Method deprecatedMethod, String deprecatedPath,_                                              DeprecationLogger logger) {_        _        final String deprecationMessage =_            "[" + deprecatedMethod.name() + " " + deprecatedPath + "] is deprecated! Use [" + method.name() + " " + path + "] instead."___        registerHandler(method, path, handler)__        registerAsDeprecatedHandler(deprecatedMethod, deprecatedPath, handler, deprecationMessage, logger)__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,or,when,provided,with,code,deprecated,method,and,code,deprecated,path,expected,usage,pre,code,remove,deprecation,in,next,major,release,controller,register,with,deprecated,handler,post,this,post,deprecation,logger,controller,register,with,deprecated,handler,post,index,this,post,index,deprecation,logger,code,pre,p,the,registered,rest,handler,code,method,with,code,path,is,a,normal,rest,handler,that,is,not,deprecated,and,it,is,replacing,the,deprecated,rest,handler,code,deprecated,method,with,code,deprecated,path,that,is,using,the,em,same,em,code,handler,p,deprecated,rest,handlers,without,a,direct,replacement,should,be,deprecated,directly,using,link,register,as,deprecated,handler,and,a,specific,message,param,method,get,post,etc,param,path,path,to,handle,e,g,param,handler,the,handler,to,actually,execute,param,deprecated,method,get,post,etc,param,deprecated,path,em,deprecated,em,path,to,handle,e,g,param,logger,the,existing,deprecation,logger,to,use;public,void,register,with,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,rest,request,method,deprecated,method,string,deprecated,path,deprecation,logger,logger,final,string,deprecation,message,deprecated,method,name,deprecated,path,is,deprecated,use,method,name,path,instead,register,handler,method,path,handler,register,as,deprecated,handler,deprecated,method,deprecated,path,handler,deprecation,message,logger
RestController -> public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,                                               RestRequest.Method deprecatedMethod, String deprecatedPath,                                               DeprecationLogger logger);1542402632;Registers a REST handler to be executed when the provided {@code method} and {@code path} match the request, or when provided_with {@code deprecatedMethod} and {@code deprecatedPath}. Expected usage:_<pre><code>_// remove deprecation in next major release_controller.registerWithDeprecatedHandler(POST, "/_forcemerge", this,_POST, "/_optimize", deprecationLogger)__controller.registerWithDeprecatedHandler(POST, "/{index}/_forcemerge", this,_POST, "/{index}/_optimize", deprecationLogger)__</code></pre>_<p>_The registered REST handler ({@code method} with {@code path}) is a normal REST handler that is not deprecated and it is_replacing the deprecated REST handler ({@code deprecatedMethod} with {@code deprecatedPath}) that is using the <em>same</em>_{@code handler}._<p>_Deprecated REST handlers without a direct replacement should be deprecated directly using {@link #registerAsDeprecatedHandler}_and a specific message.__@param method GET, POST, etc._@param path Path to handle (e.g., "/_forcemerge")_@param handler The handler to actually execute_@param deprecatedMethod GET, POST, etc._@param deprecatedPath <em>Deprecated</em> path to handle (e.g., "/_optimize")_@param logger The existing deprecation logger to use;public void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,_                                              RestRequest.Method deprecatedMethod, String deprecatedPath,_                                              DeprecationLogger logger) {_        _        final String deprecationMessage =_            "[" + deprecatedMethod.name() + " " + deprecatedPath + "] is deprecated! Use [" + method.name() + " " + path + "] instead."___        registerHandler(method, path, handler)__        registerAsDeprecatedHandler(deprecatedMethod, deprecatedPath, handler, deprecationMessage, logger)__    };registers,a,rest,handler,to,be,executed,when,the,provided,code,method,and,code,path,match,the,request,or,when,provided,with,code,deprecated,method,and,code,deprecated,path,expected,usage,pre,code,remove,deprecation,in,next,major,release,controller,register,with,deprecated,handler,post,this,post,deprecation,logger,controller,register,with,deprecated,handler,post,index,this,post,index,deprecation,logger,code,pre,p,the,registered,rest,handler,code,method,with,code,path,is,a,normal,rest,handler,that,is,not,deprecated,and,it,is,replacing,the,deprecated,rest,handler,code,deprecated,method,with,code,deprecated,path,that,is,using,the,em,same,em,code,handler,p,deprecated,rest,handlers,without,a,direct,replacement,should,be,deprecated,directly,using,link,register,as,deprecated,handler,and,a,specific,message,param,method,get,post,etc,param,path,path,to,handle,e,g,param,handler,the,handler,to,actually,execute,param,deprecated,method,get,post,etc,param,deprecated,path,em,deprecated,em,path,to,handle,e,g,param,logger,the,existing,deprecation,logger,to,use;public,void,register,with,deprecated,handler,rest,request,method,method,string,path,rest,handler,handler,rest,request,method,deprecated,method,string,deprecated,path,deprecation,logger,logger,final,string,deprecation,message,deprecated,method,name,deprecated,path,is,deprecated,use,method,name,path,instead,register,handler,method,path,handler,register,as,deprecated,handler,deprecated,method,deprecated,path,handler,deprecation,message,logger
RestController -> private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1524684173;Handle HTTP OPTIONS requests to a valid REST endpoint. A 200 HTTP_response code is returned, and the response 'Allow' header includes a_list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-9.2">HTTP/1.1 - 9.2_- Options</a>).;private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() > 0) {_            BytesRestResponse bytesRestResponse = new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } else if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() == 0) {_            _            channel.sendResponse(new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,http,options,requests,to,a,valid,rest,endpoint,a,200,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,9,2,http,1,1,9,2,options,a;private,void,handle,options,request,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,if,request,method,rest,request,method,options,valid,method,set,size,0,bytes,rest,response,bytes,rest,response,new,bytes,rest,response,ok,bytes,array,empty,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,else,if,request,method,rest,request,method,options,valid,method,set,size,0,channel,send,response,new,bytes,rest,response,ok,bytes,array,empty
RestController -> private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1525645056;Handle HTTP OPTIONS requests to a valid REST endpoint. A 200 HTTP_response code is returned, and the response 'Allow' header includes a_list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-9.2">HTTP/1.1 - 9.2_- Options</a>).;private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() > 0) {_            BytesRestResponse bytesRestResponse = new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } else if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() == 0) {_            _            channel.sendResponse(new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,http,options,requests,to,a,valid,rest,endpoint,a,200,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,9,2,http,1,1,9,2,options,a;private,void,handle,options,request,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,if,request,method,rest,request,method,options,valid,method,set,size,0,bytes,rest,response,bytes,rest,response,new,bytes,rest,response,ok,bytes,array,empty,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,else,if,request,method,rest,request,method,options,valid,method,set,size,0,channel,send,response,new,bytes,rest,response,ok,bytes,array,empty
RestController -> private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1529015561;Handle HTTP OPTIONS requests to a valid REST endpoint. A 200 HTTP_response code is returned, and the response 'Allow' header includes a_list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-9.2">HTTP/1.1 - 9.2_- Options</a>).;private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() > 0) {_            BytesRestResponse bytesRestResponse = new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } else if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() == 0) {_            _            channel.sendResponse(new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,http,options,requests,to,a,valid,rest,endpoint,a,200,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,9,2,http,1,1,9,2,options,a;private,void,handle,options,request,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,if,request,method,rest,request,method,options,valid,method,set,size,0,bytes,rest,response,bytes,rest,response,new,bytes,rest,response,ok,bytes,array,empty,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,else,if,request,method,rest,request,method,options,valid,method,set,size,0,channel,send,response,new,bytes,rest,response,ok,bytes,array,empty
RestController -> private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1541092382;Handle HTTP OPTIONS requests to a valid REST endpoint. A 200 HTTP_response code is returned, and the response 'Allow' header includes a_list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-9.2">HTTP/1.1 - 9.2_- Options</a>).;private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() > 0) {_            BytesRestResponse bytesRestResponse = new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } else if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() == 0) {_            _            channel.sendResponse(new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,http,options,requests,to,a,valid,rest,endpoint,a,200,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,9,2,http,1,1,9,2,options,a;private,void,handle,options,request,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,if,request,method,rest,request,method,options,valid,method,set,size,0,bytes,rest,response,bytes,rest,response,new,bytes,rest,response,ok,bytes,array,empty,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,else,if,request,method,rest,request,method,options,valid,method,set,size,0,channel,send,response,new,bytes,rest,response,ok,bytes,array,empty
RestController -> private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet);1542402632;Handle HTTP OPTIONS requests to a valid REST endpoint. A 200 HTTP_response code is returned, and the response 'Allow' header includes a_list of valid HTTP methods for the endpoint (see_<a href="https://tools.ietf.org/html/rfc2616#section-9.2">HTTP/1.1 - 9.2_- Options</a>).;private void handleOptionsRequest(RestRequest request, RestChannel channel, Set<RestRequest.Method> validMethodSet) {_        if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() > 0) {_            BytesRestResponse bytesRestResponse = new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY)__            bytesRestResponse.addHeader("Allow", Strings.collectionToDelimitedString(validMethodSet, ","))__            channel.sendResponse(bytesRestResponse)__        } else if (request.method() == RestRequest.Method.OPTIONS && validMethodSet.size() == 0) {_            _            channel.sendResponse(new BytesRestResponse(OK, TEXT_CONTENT_TYPE, BytesArray.EMPTY))__        }_    };handle,http,options,requests,to,a,valid,rest,endpoint,a,200,http,response,code,is,returned,and,the,response,allow,header,includes,a,list,of,valid,http,methods,for,the,endpoint,see,a,href,https,tools,ietf,org,html,rfc2616,section,9,2,http,1,1,9,2,options,a;private,void,handle,options,request,rest,request,request,rest,channel,channel,set,rest,request,method,valid,method,set,if,request,method,rest,request,method,options,valid,method,set,size,0,bytes,rest,response,bytes,rest,response,new,bytes,rest,response,ok,bytes,array,empty,bytes,rest,response,add,header,allow,strings,collection,to,delimited,string,valid,method,set,channel,send,response,bytes,rest,response,else,if,request,method,rest,request,method,options,valid,method,set,size,0,channel,send,response,new,bytes,rest,response,ok,bytes,array,empty
