commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public AliasFilter rewrite(QueryRewriteContext context) throws IOException {     QueryBuilder queryBuilder = this.filter.     if (queryBuilder != null) {         QueryBuilder rewrite = Rewriteable.rewrite(queryBuilder, context).         if (rewrite != queryBuilder) {             return new AliasFilter(rewrite, aliases).         }     }     return this. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeStringArray(aliases).     out.writeOptionalNamedWriteable(filter). }
true;public;0;3;/**  * Returns the aliases patters that are used to compose the {@link QueryBuilder}  * returned from {@link #getQueryBuilder()}  */ ;/**  * Returns the aliases patters that are used to compose the {@link QueryBuilder}  * returned from {@link #getQueryBuilder()}  */ public String[] getAliases() {     return aliases. }
true;public;0;3;/**  * Returns the alias filter {@link QueryBuilder} or <code>null</code> if there is no such filter  */ ;/**  * Returns the alias filter {@link QueryBuilder} or <code>null</code> if there is no such filter  */ public QueryBuilder getQueryBuilder() {     return filter. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     AliasFilter that = (AliasFilter) o.     return Arrays.equals(aliases, that.aliases) && Objects.equals(filter, that.filter). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(Arrays.hashCode(aliases), filter). }
false;public;0;7;;@Override public String toString() {     return "AliasFilter{" + "aliases=" + Arrays.toString(aliases) + ", filter=" + filter + '}'. }
