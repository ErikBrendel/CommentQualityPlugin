commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public T get(long key) {     return map.get(key). }
false;public;1;4;;@Override public T remove(long key) {     return map.remove(key). }
false;public;2;4;;@Override public T put(long key, T value) {     return map.put(key, value). }
false;public;2;4;;@Override public T putIfAbsent(long key, T value) {     return map.putIfAbsent(key, value). }
false;public;0;4;;// MAP DELEGATION @Override public boolean isEmpty() {     return map.isEmpty(). }
false;public;0;4;;@Override public int size() {     return map.size(). }
false;public;1;4;;@Override public T get(Object key) {     return map.get(key). }
false;public;1;4;;@Override public boolean containsKey(Object key) {     return map.containsKey(key). }
false;public;1;4;;@Override public boolean containsValue(Object value) {     return map.containsValue(value). }
false;public;2;4;;@Override public T put(Long key, T value) {     return map.put(key, value). }
false;public;2;4;;@Override public T putIfAbsent(Long key, T value) {     return map.putIfAbsent(key, value). }
false;public;1;4;;@Override public void putAll(Map<? extends Long, ? extends T> m) {     map.putAll(m). }
false;public;1;4;;@Override public T remove(Object key) {     return map.remove(key). }
false;public;2;4;;@Override public boolean remove(Object key, Object value) {     return map.remove(key, value). }
false;public;3;4;;@Override public boolean replace(Long key, T oldValue, T newValue) {     return map.replace(key, oldValue, newValue). }
false;public;2;4;;@Override public T replace(Long key, T value) {     return map.replace(key, value). }
false;public;0;4;;@Override public void clear() {     map.clear(). }
false;public;0;4;;@Override public Set<Long> keySet() {     return map.keySet(). }
false;public;0;4;;@Override public Collection<T> values() {     return map.values(). }
false;public;0;4;;@Override public Set<Entry<Long, T>> entrySet() {     return map.entrySet(). }
false;public;1;4;;@Override public boolean equals(Object o) {     return map.equals(o). }
false;public;0;4;;@Override public int hashCode() {     return map.hashCode(). }
false;public;0;4;;@Override public String toString() {     return map.toString(). }
