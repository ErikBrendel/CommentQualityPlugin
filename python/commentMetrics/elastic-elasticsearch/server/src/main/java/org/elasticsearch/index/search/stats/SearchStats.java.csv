commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;public void add(Stats stats) {     queryCount += stats.queryCount.     queryTimeInMillis += stats.queryTimeInMillis.     queryCurrent += stats.queryCurrent.     fetchCount += stats.fetchCount.     fetchTimeInMillis += stats.fetchTimeInMillis.     fetchCurrent += stats.fetchCurrent.     scrollCount += stats.scrollCount.     scrollTimeInMillis += stats.scrollTimeInMillis.     scrollCurrent += stats.scrollCurrent.     suggestCount += stats.suggestCount.     suggestTimeInMillis += stats.suggestTimeInMillis.     suggestCurrent += stats.suggestCurrent. }
false;public;0;3;;public long getQueryCount() {     return queryCount. }
false;public;0;3;;public TimeValue getQueryTime() {     return new TimeValue(queryTimeInMillis). }
false;public;0;3;;public long getQueryTimeInMillis() {     return queryTimeInMillis. }
false;public;0;3;;public long getQueryCurrent() {     return queryCurrent. }
false;public;0;3;;public long getFetchCount() {     return fetchCount. }
false;public;0;3;;public TimeValue getFetchTime() {     return new TimeValue(fetchTimeInMillis). }
false;public;0;3;;public long getFetchTimeInMillis() {     return fetchTimeInMillis. }
false;public;0;3;;public long getFetchCurrent() {     return fetchCurrent. }
false;public;0;3;;public long getScrollCount() {     return scrollCount. }
false;public;0;3;;public TimeValue getScrollTime() {     return new TimeValue(scrollTimeInMillis). }
false;public;0;3;;public long getScrollTimeInMillis() {     return scrollTimeInMillis. }
false;public;0;3;;public long getScrollCurrent() {     return scrollCurrent. }
false;public;0;3;;public long getSuggestCount() {     return suggestCount. }
false;public;0;3;;public long getSuggestTimeInMillis() {     return suggestTimeInMillis. }
false;public;0;3;;public TimeValue getSuggestTime() {     return new TimeValue(suggestTimeInMillis). }
false;public;0;3;;public long getSuggestCurrent() {     return suggestCurrent. }
false;public,static;1;3;;public static Stats readStats(StreamInput in) throws IOException {     return new Stats(in). }
false;public;1;18;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(queryCount).     out.writeVLong(queryTimeInMillis).     out.writeVLong(queryCurrent).     out.writeVLong(fetchCount).     out.writeVLong(fetchTimeInMillis).     out.writeVLong(fetchCurrent).     out.writeVLong(scrollCount).     out.writeVLong(scrollTimeInMillis).     out.writeVLong(scrollCurrent).     out.writeVLong(suggestCount).     out.writeVLong(suggestTimeInMillis).     out.writeVLong(suggestCurrent). }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(Fields.QUERY_TOTAL, queryCount).     builder.humanReadableField(Fields.QUERY_TIME_IN_MILLIS, Fields.QUERY_TIME, getQueryTime()).     builder.field(Fields.QUERY_CURRENT, queryCurrent).     builder.field(Fields.FETCH_TOTAL, fetchCount).     builder.humanReadableField(Fields.FETCH_TIME_IN_MILLIS, Fields.FETCH_TIME, getFetchTime()).     builder.field(Fields.FETCH_CURRENT, fetchCurrent).     builder.field(Fields.SCROLL_TOTAL, scrollCount).     builder.humanReadableField(Fields.SCROLL_TIME_IN_MILLIS, Fields.SCROLL_TIME, getScrollTime()).     builder.field(Fields.SCROLL_CURRENT, scrollCurrent).     builder.field(Fields.SUGGEST_TOTAL, suggestCount).     builder.humanReadableField(Fields.SUGGEST_TIME_IN_MILLIS, Fields.SUGGEST_TIME, getSuggestTime()).     builder.field(Fields.SUGGEST_CURRENT, suggestCurrent).     return builder. }
false;public;1;16;;public void add(SearchStats searchStats) {     if (searchStats == null) {         return.     }     addTotals(searchStats).     openContexts += searchStats.openContexts.     if (searchStats.groupStats != null && !searchStats.groupStats.isEmpty()) {         if (groupStats == null) {             groupStats = new HashMap<>(searchStats.groupStats.size()).         }         for (Map.Entry<String, Stats> entry : searchStats.groupStats.entrySet()) {             groupStats.putIfAbsent(entry.getKey(), new Stats()).             groupStats.get(entry.getKey()).add(entry.getValue()).         }     } }
false;public;1;6;;public void addTotals(SearchStats searchStats) {     if (searchStats == null) {         return.     }     totalStats.add(searchStats.totalStats). }
false;public;0;3;;public Stats getTotal() {     return this.totalStats. }
false;public;0;3;;public long getOpenContexts() {     return this.openContexts. }
false;public;0;4;;@Nullable public Map<String, Stats> getGroupStats() {     return this.groupStats != null ? Collections.unmodifiableMap(this.groupStats) : null. }
false;public;2;17;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject(Fields.SEARCH).     builder.field(Fields.OPEN_CONTEXTS, openContexts).     totalStats.toXContent(builder, params).     if (groupStats != null && !groupStats.isEmpty()) {         builder.startObject(Fields.GROUPS).         for (Map.Entry<String, Stats> entry : groupStats.entrySet()) {             builder.startObject(entry.getKey()).             entry.getValue().toXContent(builder, params).             builder.endObject().         }         builder.endObject().     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     totalStats.writeTo(out).     out.writeVLong(openContexts).     if (groupStats == null || groupStats.isEmpty()) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         out.writeMap(groupStats, StreamOutput::writeString, (stream, stats) -> stats.writeTo(stream)).     } }
