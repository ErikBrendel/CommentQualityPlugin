# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterService -> public ClusterState state();1524684173;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1533230566;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1536137328;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1536177418;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1540847035;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1541008027;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1542646292;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1546251441;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1547049229;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1547625930;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public ClusterState state();1549302240;The currently applied cluster state._TODO: Should be renamed to appliedState / appliedClusterState;public ClusterState state() {_        return clusterApplierService.state()__    };the,currently,applied,cluster,state,todo,should,be,renamed,to,applied,state,applied,cluster,state;public,cluster,state,state,return,cluster,applier,service,state
ClusterService -> public void addListener(ClusterStateListener listener);1524684173;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1533230566;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1536137328;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1536177418;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1540847035;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1541008027;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1542646292;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1546251441;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1547049229;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1547625930;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addListener(ClusterStateListener listener);1549302240;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterApplierService.addListener(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,applier,service,add,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1524684173;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1533230566;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1536137328;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1536177418;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1540847035;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1541008027;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1542646292;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1546251441;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1547049229;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1547625930;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1549302240;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.addLocalNodeMasterListener(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,add,local,node,master,listener,listener
ClusterService -> public void removeLocalNodeMasterListener(LocalNodeMasterListener listener);1524684173;Remove the given listener for on/off local master events;public void removeLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.removeLocalNodeMasterListener(listener)__    };remove,the,given,listener,for,on,off,local,master,events;public,void,remove,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,remove,local,node,master,listener,listener
ClusterService -> public void removeLocalNodeMasterListener(LocalNodeMasterListener listener);1533230566;Remove the given listener for on/off local master events;public void removeLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.removeLocalNodeMasterListener(listener)__    };remove,the,given,listener,for,on,off,local,master,events;public,void,remove,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,remove,local,node,master,listener,listener
ClusterService -> public void removeLocalNodeMasterListener(LocalNodeMasterListener listener);1536137328;Remove the given listener for on/off local master events;public void removeLocalNodeMasterListener(LocalNodeMasterListener listener) {_        clusterApplierService.removeLocalNodeMasterListener(listener)__    };remove,the,given,listener,for,on,off,local,master,events;public,void,remove,local,node,master,listener,local,node,master,listener,listener,cluster,applier,service,remove,local,node,master,listener,listener
ClusterService -> public void removeApplier(ClusterStateApplier applier);1524684173;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1533230566;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1536137328;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1536177418;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1540847035;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1541008027;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1542646292;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1546251441;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1547049229;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1547625930;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public void removeApplier(ClusterStateApplier applier);1549302240;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        clusterApplierService.removeApplier(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,cluster,applier,service,remove,applier,applier
ClusterService -> public Settings getSettings();1541008027;The node's settings.;public Settings getSettings() {_        return settings__    };the,node,s,settings;public,settings,get,settings,return,settings
ClusterService -> public Settings getSettings();1542646292;The node's settings.;public Settings getSettings() {_        return settings__    };the,node,s,settings;public,settings,get,settings,return,settings
ClusterService -> public Settings getSettings();1546251441;The node's settings.;public Settings getSettings() {_        return settings__    };the,node,s,settings;public,settings,get,settings,return,settings
ClusterService -> public Settings getSettings();1547049229;The node's settings.;public Settings getSettings() {_        return settings__    };the,node,s,settings;public,settings,get,settings,return,settings
ClusterService -> public Settings getSettings();1547625930;The node's settings.;public Settings getSettings() {_        return settings__    };the,node,s,settings;public,settings,get,settings,return,settings
ClusterService -> public Settings getSettings();1549302240;The node's settings.;public Settings getSettings() {_        return settings__    };the,node,s,settings;public,settings,get,settings,return,settings
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1524684173;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1533230566;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1536137328;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1536177418;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1540847035;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1541008027;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1542646292;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1546251441;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1547049229;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1547625930;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public void addHighPriorityApplier(ClusterStateApplier applier);1549302240;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addHighPriorityApplier(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,high,priority,applier,applier
ClusterService -> public DiscoveryNode localNode();1524684173;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1533230566;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1536137328;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1536177418;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1540847035;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1541008027;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1542646292;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1546251441;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1547049229;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1547625930;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public DiscoveryNode localNode();1549302240;The local node.;public DiscoveryNode localNode() {_        DiscoveryNode localNode = state().getNodes().getLocalNode()__        if (localNode == null) {_            throw new IllegalStateException("No local node found. Is the node started?")__        }_        return localNode__    };the,local,node;public,discovery,node,local,node,discovery,node,local,node,state,get,nodes,get,local,node,if,local,node,null,throw,new,illegal,state,exception,no,local,node,found,is,the,node,started,return,local,node
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1524684173;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1533230566;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1536137328;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1536177418;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1540847035;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1541008027;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1542646292;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1546251441;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1547049229;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1547625930;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1549302240;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1524684173;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1533230566;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1536137328;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1536177418;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1540847035;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1541008027;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1542646292;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1546251441;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1547049229;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1547625930;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(String source, T updateTask);1549302240;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1524684173;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1533230566;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1536137328;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1536177418;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1540847035;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1541008027;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1542646292;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1546251441;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1547049229;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1547625930;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void addLowPriorityApplier(ClusterStateApplier applier);1549302240;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        clusterApplierService.addLowPriorityApplier(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,cluster,applier,service,add,low,priority,applier,applier
ClusterService -> public void removeListener(ClusterStateListener listener);1524684173;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1533230566;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1536137328;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1536177418;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1540847035;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1541008027;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1542646292;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1546251441;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1547049229;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1547625930;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public void removeListener(ClusterStateListener listener);1549302240;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterApplierService.removeListener(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,applier,service,remove,listener,listener
ClusterService -> public final String getNodeName();1540847035;The name of this node.;public final String getNodeName() {_        return nodeName__    };the,name,of,this,node;public,final,string,get,node,name,return,node,name
ClusterService -> public final String getNodeName();1541008027;The name of this node.;public final String getNodeName() {_        return nodeName__    };the,name,of,this,node;public,final,string,get,node,name,return,node,name
ClusterService -> public final String getNodeName();1542646292;The name of this node.;public final String getNodeName() {_        return nodeName__    };the,name,of,this,node;public,final,string,get,node,name,return,node,name
ClusterService -> public final String getNodeName();1546251441;The name of this node.;public final String getNodeName() {_        return nodeName__    };the,name,of,this,node;public,final,string,get,node,name,return,node,name
ClusterService -> public final String getNodeName();1547049229;The name of this node.;public final String getNodeName() {_        return nodeName__    };the,name,of,this,node;public,final,string,get,node,name,return,node,name
ClusterService -> public final String getNodeName();1547625930;The name of this node.;public final String getNodeName() {_        return nodeName__    };the,name,of,this,node;public,final,string,get,node,name,return,node,name
ClusterService -> public final String getNodeName();1549302240;The name of this node.;public final String getNodeName() {_        return nodeName__    };the,name,of,this,node;public,final,string,get,node,name,return,node,name
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1524684173;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1533230566;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1536137328;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1536177418;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1540847035;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1541008027;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1542646292;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1546251441;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1547049229;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1547625930;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void addStateApplier(ClusterStateApplier applier);1549302240;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        clusterApplierService.addStateApplier(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,cluster,applier,service,add,state,applier,applier
ClusterService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1524684173;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        clusterApplierService.removeTimeoutListener(listener)__    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,cluster,applier,service,remove,timeout,listener,listener
ClusterService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1533230566;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        clusterApplierService.removeTimeoutListener(listener)__    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,cluster,applier,service,remove,timeout,listener,listener
ClusterService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1536137328;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        clusterApplierService.removeTimeoutListener(listener)__    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,cluster,applier,service,remove,timeout,listener,listener
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1524684173;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1533230566;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1536137328;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1536177418;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1540847035;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1541008027;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1542646292;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1546251441;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1547049229;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1547625930;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1549302240;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        masterService.submitStateUpdateTasks(source, tasks, config, executor)__    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,master,service,submit,state,update,tasks,source,tasks,config,executor
ClusterService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1524684173;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        clusterApplierService.addTimeoutListener(timeout, listener)__    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,cluster,applier,service,add,timeout,listener,timeout,listener
ClusterService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1533230566;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        clusterApplierService.addTimeoutListener(timeout, listener)__    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,cluster,applier,service,add,timeout,listener,timeout,listener
ClusterService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1536137328;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        clusterApplierService.addTimeoutListener(timeout, listener)__    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,cluster,applier,service,add,timeout,listener,timeout,listener
