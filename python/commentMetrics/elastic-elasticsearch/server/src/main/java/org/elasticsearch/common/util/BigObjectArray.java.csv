# id;timestamp;commentText;codeText;commentWords;codeWords
BigObjectArray -> BigObjectArray(long size, BigArrays bigArrays);1524684173;Constructor.;BigObjectArray(long size, BigArrays bigArrays) {_        super(OBJECT_PAGE_SIZE, bigArrays, true)__        this.size = size__        pages = new Object[numPages(size)][]__        for (int i = 0_ i < pages.length_ ++i) {_            pages[i] = newObjectPage(i)__        }_    };constructor;big,object,array,long,size,big,arrays,big,arrays,super,big,arrays,true,this,size,size,pages,new,object,num,pages,size,for,int,i,0,i,pages,length,i,pages,i,new,object,page,i
BigObjectArray -> BigObjectArray(long size, BigArrays bigArrays);1531179852;Constructor.;BigObjectArray(long size, BigArrays bigArrays) {_        super(OBJECT_PAGE_SIZE, bigArrays, true)__        this.size = size__        pages = new Object[numPages(size)][]__        for (int i = 0_ i < pages.length_ ++i) {_            pages[i] = newObjectPage(i)__        }_    };constructor;big,object,array,long,size,big,arrays,big,arrays,super,big,arrays,true,this,size,size,pages,new,object,num,pages,size,for,int,i,0,i,pages,length,i,pages,i,new,object,page,i
BigObjectArray -> BigObjectArray(long size, BigArrays bigArrays);1544623250;Constructor.;BigObjectArray(long size, BigArrays bigArrays) {_        super(OBJECT_PAGE_SIZE, bigArrays, true)__        this.size = size__        pages = new Object[numPages(size)][]__        for (int i = 0_ i < pages.length_ ++i) {_            pages[i] = newObjectPage(i)__        }_    };constructor;big,object,array,long,size,big,arrays,big,arrays,super,big,arrays,true,this,size,size,pages,new,object,num,pages,size,for,int,i,0,i,pages,length,i,pages,i,new,object,page,i
BigObjectArray -> public static long estimateRamBytes(final long size);1524684173;Estimates the number of bytes that would be consumed by an array of the given size.;public static long estimateRamBytes(final long size) {_        return ESTIMATOR.ramBytesEstimated(size)__    };estimates,the,number,of,bytes,that,would,be,consumed,by,an,array,of,the,given,size;public,static,long,estimate,ram,bytes,final,long,size,return,estimator,ram,bytes,estimated,size
BigObjectArray -> public static long estimateRamBytes(final long size);1531179852;Estimates the number of bytes that would be consumed by an array of the given size.;public static long estimateRamBytes(final long size) {_        return ESTIMATOR.ramBytesEstimated(size)__    };estimates,the,number,of,bytes,that,would,be,consumed,by,an,array,of,the,given,size;public,static,long,estimate,ram,bytes,final,long,size,return,estimator,ram,bytes,estimated,size
BigObjectArray -> public static long estimateRamBytes(final long size);1544623250;Estimates the number of bytes that would be consumed by an array of the given size.;public static long estimateRamBytes(final long size) {_        return ESTIMATOR.ramBytesEstimated(size)__    };estimates,the,number,of,bytes,that,would,be,consumed,by,an,array,of,the,given,size;public,static,long,estimate,ram,bytes,final,long,size,return,estimator,ram,bytes,estimated,size
BigObjectArray -> @Override     public void resize(long newSize);1524684173;Change the size of this array. Content between indexes <code>0</code> and <code>min(size(), newSize)</code> will be preserved.;@Override_    public void resize(long newSize) {_        final int numPages = numPages(newSize)__        if (numPages > pages.length) {_            pages = Arrays.copyOf(pages, ArrayUtil.oversize(numPages, RamUsageEstimator.NUM_BYTES_OBJECT_REF))__        }_        for (int i = numPages - 1_ i >= 0 && pages[i] == null_ --i) {_            pages[i] = newObjectPage(i)__        }_        for (int i = numPages_ i < pages.length && pages[i] != null_ ++i) {_            pages[i] = null__            releasePage(i)__        }_        this.size = newSize__    };change,the,size,of,this,array,content,between,indexes,code,0,code,and,code,min,size,new,size,code,will,be,preserved;override,public,void,resize,long,new,size,final,int,num,pages,num,pages,new,size,if,num,pages,pages,length,pages,arrays,copy,of,pages,array,util,oversize,num,pages,ram,usage,estimator,for,int,i,num,pages,1,i,0,pages,i,null,i,pages,i,new,object,page,i,for,int,i,num,pages,i,pages,length,pages,i,null,i,pages,i,null,release,page,i,this,size,new,size
BigObjectArray -> @Override     public void resize(long newSize);1531179852;Change the size of this array. Content between indexes <code>0</code> and <code>min(size(), newSize)</code> will be preserved.;@Override_    public void resize(long newSize) {_        final int numPages = numPages(newSize)__        if (numPages > pages.length) {_            pages = Arrays.copyOf(pages, ArrayUtil.oversize(numPages, RamUsageEstimator.NUM_BYTES_OBJECT_REF))__        }_        for (int i = numPages - 1_ i >= 0 && pages[i] == null_ --i) {_            pages[i] = newObjectPage(i)__        }_        for (int i = numPages_ i < pages.length && pages[i] != null_ ++i) {_            pages[i] = null__            releasePage(i)__        }_        this.size = newSize__    };change,the,size,of,this,array,content,between,indexes,code,0,code,and,code,min,size,new,size,code,will,be,preserved;override,public,void,resize,long,new,size,final,int,num,pages,num,pages,new,size,if,num,pages,pages,length,pages,arrays,copy,of,pages,array,util,oversize,num,pages,ram,usage,estimator,for,int,i,num,pages,1,i,0,pages,i,null,i,pages,i,new,object,page,i,for,int,i,num,pages,i,pages,length,pages,i,null,i,pages,i,null,release,page,i,this,size,new,size
BigObjectArray -> @Override     public void resize(long newSize);1544623250;Change the size of this array. Content between indexes <code>0</code> and <code>min(size(), newSize)</code> will be preserved.;@Override_    public void resize(long newSize) {_        final int numPages = numPages(newSize)__        if (numPages > pages.length) {_            pages = Arrays.copyOf(pages, ArrayUtil.oversize(numPages, RamUsageEstimator.NUM_BYTES_OBJECT_REF))__        }_        for (int i = numPages - 1_ i >= 0 && pages[i] == null_ --i) {_            pages[i] = newObjectPage(i)__        }_        for (int i = numPages_ i < pages.length && pages[i] != null_ ++i) {_            pages[i] = null__            releasePage(i)__        }_        this.size = newSize__    };change,the,size,of,this,array,content,between,indexes,code,0,code,and,code,min,size,new,size,code,will,be,preserved;override,public,void,resize,long,new,size,final,int,num,pages,num,pages,new,size,if,num,pages,pages,length,pages,arrays,copy,of,pages,array,util,oversize,num,pages,ram,usage,estimator,for,int,i,num,pages,1,i,0,pages,i,null,i,pages,i,new,object,page,i,for,int,i,num,pages,i,pages,length,pages,i,null,i,pages,i,null,release,page,i,this,size,new,size
