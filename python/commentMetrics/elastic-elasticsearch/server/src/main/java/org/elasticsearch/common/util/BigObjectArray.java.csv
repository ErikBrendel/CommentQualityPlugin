commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@SuppressWarnings("unchecked") @Override public T get(long index) {     final int pageIndex = pageIndex(index).     final int indexInPage = indexInPage(index).     return (T) pages[pageIndex][indexInPage]. }
false;public;2;10;;@Override public T set(long index, T value) {     final int pageIndex = pageIndex(index).     final int indexInPage = indexInPage(index).     final Object[] page = pages[pageIndex].     @SuppressWarnings("unchecked")     final T ret = (T) page[indexInPage].     page[indexInPage] = value.     return ret. }
false;protected;0;4;;@Override protected int numBytesPerElement() {     return Integer.BYTES. }
true;public;1;15;/**  * Change the size of this array. Content between indexes <code>0</code> and <code>min(size(), newSize)</code> will be preserved.  */ ;/**  * Change the size of this array. Content between indexes <code>0</code> and <code>min(size(), newSize)</code> will be preserved.  */ @Override public void resize(long newSize) {     final int numPages = numPages(newSize).     if (numPages > pages.length) {         pages = Arrays.copyOf(pages, ArrayUtil.oversize(numPages, RamUsageEstimator.NUM_BYTES_OBJECT_REF)).     }     for (int i = numPages - 1. i >= 0 && pages[i] == null. --i) {         pages[i] = newObjectPage(i).     }     for (int i = numPages. i < pages.length && pages[i] != null. ++i) {         pages[i] = null.         releasePage(i).     }     this.size = newSize. }
true;public,static;1;3;/**  * Estimates the number of bytes that would be consumed by an array of the given size.  */ ;/**  * Estimates the number of bytes that would be consumed by an array of the given size.  */ public static long estimateRamBytes(final long size) {     return ESTIMATOR.ramBytesEstimated(size). }
