commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Similarity getDelegate() {     return in. }
false;public;1;4;;@Override public long computeNorm(FieldInvertState state) {     return in.computeNorm(state). }
false;public;2;13;;@Override public float score(float freq, long norm) {     float score = inScorer.score(freq, norm).     if (score < 0f) {         if (ENFORCE_POSITIVE_SCORES) {             throw new IllegalArgumentException("Similarities must not produce negative scores, but got:\n" + inScorer.explain(Explanation.match(freq, "term frequency"), norm)).         } else {             return 0f.         }     }     return score. }
false;public;2;9;;@Override public Explanation explain(Explanation freq, long norm) {     Explanation expl = inScorer.explain(freq, norm).     if (expl.isMatch() && expl.getValue().floatValue() < 0) {         expl = Explanation.match(0f, "max of:", expl, Explanation.match(0f, "Minimum allowed score")).     }     return expl. }
false;public;3;30;;@Override public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {     final SimScorer inScorer = in.scorer(boost, collectionStats, termStats).     return new SimScorer() {          @Override         public float score(float freq, long norm) {             float score = inScorer.score(freq, norm).             if (score < 0f) {                 if (ENFORCE_POSITIVE_SCORES) {                     throw new IllegalArgumentException("Similarities must not produce negative scores, but got:\n" + inScorer.explain(Explanation.match(freq, "term frequency"), norm)).                 } else {                     return 0f.                 }             }             return score.         }          @Override         public Explanation explain(Explanation freq, long norm) {             Explanation expl = inScorer.explain(freq, norm).             if (expl.isMatch() && expl.getValue().floatValue() < 0) {                 expl = Explanation.match(0f, "max of:", expl, Explanation.match(0f, "Minimum allowed score")).             }             return expl.         }     }. }
