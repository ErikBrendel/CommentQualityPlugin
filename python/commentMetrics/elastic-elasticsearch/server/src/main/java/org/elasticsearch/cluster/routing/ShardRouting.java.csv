# id;timestamp;commentText;codeText;commentWords;codeWords
ShardRouting -> public ShardRouting removeRelocationSource();1524684173;Removes relocation source of a non-primary shard. The shard state must be <code>INITIALIZING</code>._This allows the non-primary shard to continue recovery from the primary even though its non-primary_relocation source has failed.;public ShardRouting removeRelocationSource() {_        assert primary == false : this__        assert state == ShardRoutingState.INITIALIZING : this__        assert assignedToNode() : this__        assert relocatingNodeId != null : this__        return new ShardRouting(shardId, currentNodeId, null, primary, state, recoverySource, unassignedInfo,_            AllocationId.finishRelocation(allocationId), expectedShardSize)__    };removes,relocation,source,of,a,non,primary,shard,the,shard,state,must,be,code,initializing,code,this,allows,the,non,primary,shard,to,continue,recovery,from,the,primary,even,though,its,non,primary,relocation,source,has,failed;public,shard,routing,remove,relocation,source,assert,primary,false,this,assert,state,shard,routing,state,initializing,this,assert,assigned,to,node,this,assert,relocating,node,id,null,this,return,new,shard,routing,shard,id,current,node,id,null,primary,state,recovery,source,unassigned,info,allocation,id,finish,relocation,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting removeRelocationSource();1524780945;Removes relocation source of a non-primary shard. The shard state must be <code>INITIALIZING</code>._This allows the non-primary shard to continue recovery from the primary even though its non-primary_relocation source has failed.;public ShardRouting removeRelocationSource() {_        assert primary == false : this__        assert state == ShardRoutingState.INITIALIZING : this__        assert assignedToNode() : this__        assert relocatingNodeId != null : this__        return new ShardRouting(shardId, currentNodeId, null, primary, state, recoverySource, unassignedInfo,_            AllocationId.finishRelocation(allocationId), expectedShardSize)__    };removes,relocation,source,of,a,non,primary,shard,the,shard,state,must,be,code,initializing,code,this,allows,the,non,primary,shard,to,continue,recovery,from,the,primary,even,though,its,non,primary,relocation,source,has,failed;public,shard,routing,remove,relocation,source,assert,primary,false,this,assert,state,shard,routing,state,initializing,this,assert,assigned,to,node,this,assert,relocating,node,id,null,this,return,new,shard,routing,shard,id,current,node,id,null,primary,state,recovery,source,unassigned,info,allocation,id,finish,relocation,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting removeRelocationSource();1536611444;Removes relocation source of a non-primary shard. The shard state must be <code>INITIALIZING</code>._This allows the non-primary shard to continue recovery from the primary even though its non-primary_relocation source has failed.;public ShardRouting removeRelocationSource() {_        assert primary == false : this__        assert state == ShardRoutingState.INITIALIZING : this__        assert assignedToNode() : this__        assert relocatingNodeId != null : this__        return new ShardRouting(shardId, currentNodeId, null, primary, state, recoverySource, unassignedInfo,_            AllocationId.finishRelocation(allocationId), expectedShardSize)__    };removes,relocation,source,of,a,non,primary,shard,the,shard,state,must,be,code,initializing,code,this,allows,the,non,primary,shard,to,continue,recovery,from,the,primary,even,though,its,non,primary,relocation,source,has,failed;public,shard,routing,remove,relocation,source,assert,primary,false,this,assert,state,shard,routing,state,initializing,this,assert,assigned,to,node,this,assert,relocating,node,id,null,this,return,new,shard,routing,shard,id,current,node,id,null,primary,state,recovery,source,unassigned,info,allocation,id,finish,relocation,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting removeRelocationSource();1540847035;Removes relocation source of a non-primary shard. The shard state must be <code>INITIALIZING</code>._This allows the non-primary shard to continue recovery from the primary even though its non-primary_relocation source has failed.;public ShardRouting removeRelocationSource() {_        assert primary == false : this__        assert state == ShardRoutingState.INITIALIZING : this__        assert assignedToNode() : this__        assert relocatingNodeId != null : this__        return new ShardRouting(shardId, currentNodeId, null, primary, state, recoverySource, unassignedInfo,_            AllocationId.finishRelocation(allocationId), expectedShardSize)__    };removes,relocation,source,of,a,non,primary,shard,the,shard,state,must,be,code,initializing,code,this,allows,the,non,primary,shard,to,continue,recovery,from,the,primary,even,though,its,non,primary,relocation,source,has,failed;public,shard,routing,remove,relocation,source,assert,primary,false,this,assert,state,shard,routing,state,initializing,this,assert,assigned,to,node,this,assert,relocating,node,id,null,this,return,new,shard,routing,shard,id,current,node,id,null,primary,state,recovery,source,unassigned,info,allocation,id,finish,relocation,allocation,id,expected,shard,size
ShardRouting -> public boolean relocating();1524684173;Returns <code>true</code> iff the this shard is currently relocating to_another node. Otherwise <code>false</code>__@see ShardRoutingState#RELOCATING;public boolean relocating() {_        return state == ShardRoutingState.RELOCATING__    };returns,code,true,code,iff,the,this,shard,is,currently,relocating,to,another,node,otherwise,code,false,code,see,shard,routing,state,relocating;public,boolean,relocating,return,state,shard,routing,state,relocating
ShardRouting -> public boolean relocating();1524780945;Returns <code>true</code> iff the this shard is currently relocating to_another node. Otherwise <code>false</code>__@see ShardRoutingState#RELOCATING;public boolean relocating() {_        return state == ShardRoutingState.RELOCATING__    };returns,code,true,code,iff,the,this,shard,is,currently,relocating,to,another,node,otherwise,code,false,code,see,shard,routing,state,relocating;public,boolean,relocating,return,state,shard,routing,state,relocating
ShardRouting -> public boolean relocating();1536611444;Returns <code>true</code> iff the this shard is currently relocating to_another node. Otherwise <code>false</code>__@see ShardRoutingState#RELOCATING;public boolean relocating() {_        return state == ShardRoutingState.RELOCATING__    };returns,code,true,code,iff,the,this,shard,is,currently,relocating,to,another,node,otherwise,code,false,code,see,shard,routing,state,relocating;public,boolean,relocating,return,state,shard,routing,state,relocating
ShardRouting -> public boolean relocating();1540847035;Returns <code>true</code> iff the this shard is currently relocating to_another node. Otherwise <code>false</code>__@see ShardRoutingState#RELOCATING;public boolean relocating() {_        return state == ShardRoutingState.RELOCATING__    };returns,code,true,code,iff,the,this,shard,is,currently,relocating,to,another,node,otherwise,code,false,code,see,shard,routing,state,relocating;public,boolean,relocating,return,state,shard,routing,state,relocating
ShardRouting -> public int id();1524684173;The shard id.;public int id() {_        return shardId.id()__    };the,shard,id;public,int,id,return,shard,id,id
ShardRouting -> public int id();1524780945;The shard id.;public int id() {_        return shardId.id()__    };the,shard,id;public,int,id,return,shard,id,id
ShardRouting -> public int id();1536611444;The shard id.;public int id() {_        return shardId.id()__    };the,shard,id;public,int,id,return,shard,id,id
ShardRouting -> public int id();1540847035;The shard id.;public int id() {_        return shardId.id()__    };the,shard,id;public,int,id,return,shard,id,id
ShardRouting -> public boolean isRelocationTargetOf(ShardRouting other);1524684173;returns true if the routing is the relocation target of the given routing;public boolean isRelocationTargetOf(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && this.state == ShardRoutingState.INITIALIZING &&_            this.allocationId.getId().equals(other.allocationId.getRelocationId())___        assert b == false || other.state == ShardRoutingState.RELOCATING :_            "ShardRouting is a relocation target but the source shard state isn't relocating. This [" + this + "], other [" + other + "]"____        assert b == false || other.allocationId.getId().equals(this.allocationId.getRelocationId()) :_            "ShardRouting is a relocation target but the source id isn't equal to source's allocationId.getRelocationId. This [" + this + "], other [" + other + "]"___        assert b == false || other.currentNodeId().equals(this.relocatingNodeId) :_            "ShardRouting is a relocation target but source current node id isn't equal to target relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || this.currentNodeId().equals(other.relocatingNodeId) :_            "ShardRouting is a relocation target but current node id isn't equal to source relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || this.shardId.equals(other.shardId) :_            "ShardRouting is a relocation target but both routings are not of the same shard id. This [" + this + "], other [" + other + "]"___        assert b == false || this.primary == other.primary :_            "ShardRouting is a relocation target but primary flag is different. This [" + this + "], target [" + other + "]"___        return b__    };returns,true,if,the,routing,is,the,relocation,target,of,the,given,routing;public,boolean,is,relocation,target,of,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,this,state,shard,routing,state,initializing,this,allocation,id,get,id,equals,other,allocation,id,get,relocation,id,assert,b,false,other,state,shard,routing,state,relocating,shard,routing,is,a,relocation,target,but,the,source,shard,state,isn,t,relocating,this,this,other,other,assert,b,false,other,allocation,id,get,id,equals,this,allocation,id,get,relocation,id,shard,routing,is,a,relocation,target,but,the,source,id,isn,t,equal,to,source,s,allocation,id,get,relocation,id,this,this,other,other,assert,b,false,other,current,node,id,equals,this,relocating,node,id,shard,routing,is,a,relocation,target,but,source,current,node,id,isn,t,equal,to,target,relocating,node,this,this,other,other,assert,b,false,this,current,node,id,equals,other,relocating,node,id,shard,routing,is,a,relocation,target,but,current,node,id,isn,t,equal,to,source,relocating,node,this,this,other,other,assert,b,false,this,shard,id,equals,other,shard,id,shard,routing,is,a,relocation,target,but,both,routings,are,not,of,the,same,shard,id,this,this,other,other,assert,b,false,this,primary,other,primary,shard,routing,is,a,relocation,target,but,primary,flag,is,different,this,this,target,other,return,b
ShardRouting -> public boolean isRelocationTargetOf(ShardRouting other);1524780945;returns true if the routing is the relocation target of the given routing;public boolean isRelocationTargetOf(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && this.state == ShardRoutingState.INITIALIZING &&_            this.allocationId.getId().equals(other.allocationId.getRelocationId())___        assert b == false || other.state == ShardRoutingState.RELOCATING :_            "ShardRouting is a relocation target but the source shard state isn't relocating. This [" + this + "], other [" + other + "]"____        assert b == false || other.allocationId.getId().equals(this.allocationId.getRelocationId()) :_            "ShardRouting is a relocation target but the source id isn't equal to source's allocationId.getRelocationId. This [" + this + "], other [" + other + "]"___        assert b == false || other.currentNodeId().equals(this.relocatingNodeId) :_            "ShardRouting is a relocation target but source current node id isn't equal to target relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || this.currentNodeId().equals(other.relocatingNodeId) :_            "ShardRouting is a relocation target but current node id isn't equal to source relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || this.shardId.equals(other.shardId) :_            "ShardRouting is a relocation target but both indexRoutings are not of the same shard id. This [" + this + "], other [" + other + "]"___        assert b == false || this.primary == other.primary :_            "ShardRouting is a relocation target but primary flag is different. This [" + this + "], target [" + other + "]"___        return b__    };returns,true,if,the,routing,is,the,relocation,target,of,the,given,routing;public,boolean,is,relocation,target,of,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,this,state,shard,routing,state,initializing,this,allocation,id,get,id,equals,other,allocation,id,get,relocation,id,assert,b,false,other,state,shard,routing,state,relocating,shard,routing,is,a,relocation,target,but,the,source,shard,state,isn,t,relocating,this,this,other,other,assert,b,false,other,allocation,id,get,id,equals,this,allocation,id,get,relocation,id,shard,routing,is,a,relocation,target,but,the,source,id,isn,t,equal,to,source,s,allocation,id,get,relocation,id,this,this,other,other,assert,b,false,other,current,node,id,equals,this,relocating,node,id,shard,routing,is,a,relocation,target,but,source,current,node,id,isn,t,equal,to,target,relocating,node,this,this,other,other,assert,b,false,this,current,node,id,equals,other,relocating,node,id,shard,routing,is,a,relocation,target,but,current,node,id,isn,t,equal,to,source,relocating,node,this,this,other,other,assert,b,false,this,shard,id,equals,other,shard,id,shard,routing,is,a,relocation,target,but,both,index,routings,are,not,of,the,same,shard,id,this,this,other,other,assert,b,false,this,primary,other,primary,shard,routing,is,a,relocation,target,but,primary,flag,is,different,this,this,target,other,return,b
ShardRouting -> public boolean isRelocationTargetOf(ShardRouting other);1536611444;returns true if the routing is the relocation target of the given routing;public boolean isRelocationTargetOf(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && this.state == ShardRoutingState.INITIALIZING &&_            this.allocationId.getId().equals(other.allocationId.getRelocationId())___        assert b == false || other.state == ShardRoutingState.RELOCATING :_            "ShardRouting is a relocation target but the source shard state isn't relocating. This [" + this + "], other [" + other + "]"____        assert b == false || other.allocationId.getId().equals(this.allocationId.getRelocationId()) :_            "ShardRouting is a relocation target but the source id isn't equal to source's allocationId.getRelocationId. This [" + this + "], other [" + other + "]"___        assert b == false || other.currentNodeId().equals(this.relocatingNodeId) :_            "ShardRouting is a relocation target but source current node id isn't equal to target relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || this.currentNodeId().equals(other.relocatingNodeId) :_            "ShardRouting is a relocation target but current node id isn't equal to source relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || this.shardId.equals(other.shardId) :_            "ShardRouting is a relocation target but both indexRoutings are not of the same shard id. This [" + this + "], other [" + other + "]"___        assert b == false || this.primary == other.primary :_            "ShardRouting is a relocation target but primary flag is different. This [" + this + "], target [" + other + "]"___        return b__    };returns,true,if,the,routing,is,the,relocation,target,of,the,given,routing;public,boolean,is,relocation,target,of,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,this,state,shard,routing,state,initializing,this,allocation,id,get,id,equals,other,allocation,id,get,relocation,id,assert,b,false,other,state,shard,routing,state,relocating,shard,routing,is,a,relocation,target,but,the,source,shard,state,isn,t,relocating,this,this,other,other,assert,b,false,other,allocation,id,get,id,equals,this,allocation,id,get,relocation,id,shard,routing,is,a,relocation,target,but,the,source,id,isn,t,equal,to,source,s,allocation,id,get,relocation,id,this,this,other,other,assert,b,false,other,current,node,id,equals,this,relocating,node,id,shard,routing,is,a,relocation,target,but,source,current,node,id,isn,t,equal,to,target,relocating,node,this,this,other,other,assert,b,false,this,current,node,id,equals,other,relocating,node,id,shard,routing,is,a,relocation,target,but,current,node,id,isn,t,equal,to,source,relocating,node,this,this,other,other,assert,b,false,this,shard,id,equals,other,shard,id,shard,routing,is,a,relocation,target,but,both,index,routings,are,not,of,the,same,shard,id,this,this,other,other,assert,b,false,this,primary,other,primary,shard,routing,is,a,relocation,target,but,primary,flag,is,different,this,this,target,other,return,b
ShardRouting -> public boolean isRelocationTargetOf(ShardRouting other);1540847035;returns true if the routing is the relocation target of the given routing;public boolean isRelocationTargetOf(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && this.state == ShardRoutingState.INITIALIZING &&_            this.allocationId.getId().equals(other.allocationId.getRelocationId())___        assert b == false || other.state == ShardRoutingState.RELOCATING :_            "ShardRouting is a relocation target but the source shard state isn't relocating. This [" + this + "], other [" + other + "]"___        assert b == false || other.allocationId.getId().equals(this.allocationId.getRelocationId()) :_            "ShardRouting is a relocation target but the source id isn't equal to source's allocationId.getRelocationId." +_            " This [" + this + "], other [" + other + "]"___        assert b == false || other.currentNodeId().equals(this.relocatingNodeId) :_            "ShardRouting is a relocation target but source current node id isn't equal to target relocating node." +_            " This [" + this + "], other [" + other + "]"___        assert b == false || this.currentNodeId().equals(other.relocatingNodeId) :_            "ShardRouting is a relocation target but current node id isn't equal to source relocating node." +_                " This [" + this + "], other [" + other + "]"___        assert b == false || this.shardId.equals(other.shardId) :_            "ShardRouting is a relocation target but both indexRoutings are not of the same shard id." +_                " This [" + this + "], other [" + other + "]"___        assert b == false || this.primary == other.primary :_            "ShardRouting is a relocation target but primary flag is different." +_                " This [" + this + "], target [" + other + "]"___        return b__    };returns,true,if,the,routing,is,the,relocation,target,of,the,given,routing;public,boolean,is,relocation,target,of,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,this,state,shard,routing,state,initializing,this,allocation,id,get,id,equals,other,allocation,id,get,relocation,id,assert,b,false,other,state,shard,routing,state,relocating,shard,routing,is,a,relocation,target,but,the,source,shard,state,isn,t,relocating,this,this,other,other,assert,b,false,other,allocation,id,get,id,equals,this,allocation,id,get,relocation,id,shard,routing,is,a,relocation,target,but,the,source,id,isn,t,equal,to,source,s,allocation,id,get,relocation,id,this,this,other,other,assert,b,false,other,current,node,id,equals,this,relocating,node,id,shard,routing,is,a,relocation,target,but,source,current,node,id,isn,t,equal,to,target,relocating,node,this,this,other,other,assert,b,false,this,current,node,id,equals,other,relocating,node,id,shard,routing,is,a,relocation,target,but,current,node,id,isn,t,equal,to,source,relocating,node,this,this,other,other,assert,b,false,this,shard,id,equals,other,shard,id,shard,routing,is,a,relocation,target,but,both,index,routings,are,not,of,the,same,shard,id,this,this,other,other,assert,b,false,this,primary,other,primary,shard,routing,is,a,relocation,target,but,primary,flag,is,different,this,this,target,other,return,b
ShardRouting -> public ShardRoutingState state();1524684173;The shard state.;public ShardRoutingState state() {_        return this.state__    };the,shard,state;public,shard,routing,state,state,return,this,state
ShardRouting -> public ShardRoutingState state();1524780945;The shard state.;public ShardRoutingState state() {_        return this.state__    };the,shard,state;public,shard,routing,state,state,return,this,state
ShardRouting -> public ShardRoutingState state();1536611444;The shard state.;public ShardRoutingState state() {_        return this.state__    };the,shard,state;public,shard,routing,state,state,return,this,state
ShardRouting -> public ShardRoutingState state();1540847035;The shard state.;public ShardRoutingState state() {_        return this.state__    };the,shard,state;public,shard,routing,state,state,return,this,state
ShardRouting -> public boolean isRelocationTarget();1524684173;Returns <code>true</code> if this shard is a relocation target for another shard (i.e., was created with {@link #initializeTargetRelocatingShard()};public boolean isRelocationTarget() {_        return state == ShardRoutingState.INITIALIZING && relocatingNodeId != null__    };returns,code,true,code,if,this,shard,is,a,relocation,target,for,another,shard,i,e,was,created,with,link,initialize,target,relocating,shard;public,boolean,is,relocation,target,return,state,shard,routing,state,initializing,relocating,node,id,null
ShardRouting -> public boolean isRelocationTarget();1524780945;Returns <code>true</code> if this shard is a relocation target for another shard (i.e., was created with {@link #initializeTargetRelocatingShard()};public boolean isRelocationTarget() {_        return state == ShardRoutingState.INITIALIZING && relocatingNodeId != null__    };returns,code,true,code,if,this,shard,is,a,relocation,target,for,another,shard,i,e,was,created,with,link,initialize,target,relocating,shard;public,boolean,is,relocation,target,return,state,shard,routing,state,initializing,relocating,node,id,null
ShardRouting -> public boolean isRelocationTarget();1536611444;Returns <code>true</code> if this shard is a relocation target for another shard (i.e., was created with {@link #initializeTargetRelocatingShard()};public boolean isRelocationTarget() {_        return state == ShardRoutingState.INITIALIZING && relocatingNodeId != null__    };returns,code,true,code,if,this,shard,is,a,relocation,target,for,another,shard,i,e,was,created,with,link,initialize,target,relocating,shard;public,boolean,is,relocation,target,return,state,shard,routing,state,initializing,relocating,node,id,null
ShardRouting -> public boolean isRelocationTarget();1540847035;Returns <code>true</code> if this shard is a relocation target for another shard_(i.e., was created with {@link #initializeTargetRelocatingShard()};public boolean isRelocationTarget() {_        return state == ShardRoutingState.INITIALIZING && relocatingNodeId != null__    };returns,code,true,code,if,this,shard,is,a,relocation,target,for,another,shard,i,e,was,created,with,link,initialize,target,relocating,shard;public,boolean,is,relocation,target,return,state,shard,routing,state,initializing,relocating,node,id,null
ShardRouting -> public ShardIterator shardsIt();1524684173;A shard iterator with just this shard in it.;public ShardIterator shardsIt() {_        return new PlainShardIterator(shardId, asList)__    };a,shard,iterator,with,just,this,shard,in,it;public,shard,iterator,shards,it,return,new,plain,shard,iterator,shard,id,as,list
ShardRouting -> public ShardIterator shardsIt();1524780945;A shard iterator with just this shard in it.;public ShardIterator shardsIt() {_        return new PlainShardIterator(shardId, asList)__    };a,shard,iterator,with,just,this,shard,in,it;public,shard,iterator,shards,it,return,new,plain,shard,iterator,shard,id,as,list
ShardRouting -> public ShardIterator shardsIt();1536611444;A shard iterator with just this shard in it.;public ShardIterator shardsIt() {_        return new PlainShardIterator(shardId, asList)__    };a,shard,iterator,with,just,this,shard,in,it;public,shard,iterator,shards,it,return,new,plain,shard,iterator,shard,id,as,list
ShardRouting -> public ShardIterator shardsIt();1540847035;A shard iterator with just this shard in it.;public ShardIterator shardsIt() {_        return new PlainShardIterator(shardId, asList)__    };a,shard,iterator,with,just,this,shard,in,it;public,shard,iterator,shards,it,return,new,plain,shard,iterator,shard,id,as,list
ShardRouting -> public ShardRouting reinitializeReplicaShard();1524684173;Reinitializes a replica shard, giving it a fresh allocation id;public ShardRouting reinitializeReplicaShard() {_        assert state == ShardRoutingState.INITIALIZING : this__        assert primary == false : this__        assert isRelocationTarget() == false : this__        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.INITIALIZING,_            recoverySource, unassignedInfo, AllocationId.newInitializing(), expectedShardSize)__    };reinitializes,a,replica,shard,giving,it,a,fresh,allocation,id;public,shard,routing,reinitialize,replica,shard,assert,state,shard,routing,state,initializing,this,assert,primary,false,this,assert,is,relocation,target,false,this,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,initializing,recovery,source,unassigned,info,allocation,id,new,initializing,expected,shard,size
ShardRouting -> public ShardRouting reinitializeReplicaShard();1524780945;Reinitializes a replica shard, giving it a fresh allocation id;public ShardRouting reinitializeReplicaShard() {_        assert state == ShardRoutingState.INITIALIZING : this__        assert primary == false : this__        assert isRelocationTarget() == false : this__        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.INITIALIZING,_            recoverySource, unassignedInfo, AllocationId.newInitializing(), expectedShardSize)__    };reinitializes,a,replica,shard,giving,it,a,fresh,allocation,id;public,shard,routing,reinitialize,replica,shard,assert,state,shard,routing,state,initializing,this,assert,primary,false,this,assert,is,relocation,target,false,this,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,initializing,recovery,source,unassigned,info,allocation,id,new,initializing,expected,shard,size
ShardRouting -> public ShardRouting reinitializeReplicaShard();1536611444;Reinitializes a replica shard, giving it a fresh allocation id;public ShardRouting reinitializeReplicaShard() {_        assert state == ShardRoutingState.INITIALIZING : this__        assert primary == false : this__        assert isRelocationTarget() == false : this__        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.INITIALIZING,_            recoverySource, unassignedInfo, AllocationId.newInitializing(), expectedShardSize)__    };reinitializes,a,replica,shard,giving,it,a,fresh,allocation,id;public,shard,routing,reinitialize,replica,shard,assert,state,shard,routing,state,initializing,this,assert,primary,false,this,assert,is,relocation,target,false,this,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,initializing,recovery,source,unassigned,info,allocation,id,new,initializing,expected,shard,size
ShardRouting -> public ShardRouting reinitializeReplicaShard();1540847035;Reinitializes a replica shard, giving it a fresh allocation id;public ShardRouting reinitializeReplicaShard() {_        assert state == ShardRoutingState.INITIALIZING : this__        assert primary == false : this__        assert isRelocationTarget() == false : this__        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.INITIALIZING,_            recoverySource, unassignedInfo, AllocationId.newInitializing(), expectedShardSize)__    };reinitializes,a,replica,shard,giving,it,a,fresh,allocation,id;public,shard,routing,reinitialize,replica,shard,assert,state,shard,routing,state,initializing,this,assert,primary,false,this,assert,is,relocation,target,false,this,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,initializing,recovery,source,unassigned,info,allocation,id,new,initializing,expected,shard,size
ShardRouting -> public ShardRouting moveToStarted();1524684173;Set the shards state to <code>STARTED</code>. The shards state must be_<code>INITIALIZING</code> or <code>RELOCATING</code>. Any relocation will be_canceled.;public ShardRouting moveToStarted() {_        assert state == ShardRoutingState.INITIALIZING : "expected an initializing shard " + this__        AllocationId allocationId = this.allocationId__        if (allocationId.getRelocationId() != null) {_            _            allocationId = AllocationId.finishRelocation(allocationId)__        }_        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.STARTED, null, null, allocationId,_            UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };set,the,shards,state,to,code,started,code,the,shards,state,must,be,code,initializing,code,or,code,relocating,code,any,relocation,will,be,canceled;public,shard,routing,move,to,started,assert,state,shard,routing,state,initializing,expected,an,initializing,shard,this,allocation,id,allocation,id,this,allocation,id,if,allocation,id,get,relocation,id,null,allocation,id,allocation,id,finish,relocation,allocation,id,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,started,null,null,allocation,id
ShardRouting -> public ShardRouting moveToStarted();1524780945;Set the shards state to <code>STARTED</code>. The shards state must be_<code>INITIALIZING</code> or <code>RELOCATING</code>. Any relocation will be_canceled.;public ShardRouting moveToStarted() {_        assert state == ShardRoutingState.INITIALIZING : "expected an initializing shard " + this__        AllocationId allocationId = this.allocationId__        if (allocationId.getRelocationId() != null) {_            _            allocationId = AllocationId.finishRelocation(allocationId)__        }_        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.STARTED, null, null, allocationId,_            UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };set,the,shards,state,to,code,started,code,the,shards,state,must,be,code,initializing,code,or,code,relocating,code,any,relocation,will,be,canceled;public,shard,routing,move,to,started,assert,state,shard,routing,state,initializing,expected,an,initializing,shard,this,allocation,id,allocation,id,this,allocation,id,if,allocation,id,get,relocation,id,null,allocation,id,allocation,id,finish,relocation,allocation,id,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,started,null,null,allocation,id
ShardRouting -> public ShardRouting moveToStarted();1536611444;Set the shards state to <code>STARTED</code>. The shards state must be_<code>INITIALIZING</code> or <code>RELOCATING</code>. Any relocation will be_canceled.;public ShardRouting moveToStarted() {_        assert state == ShardRoutingState.INITIALIZING : "expected an initializing shard " + this__        AllocationId allocationId = this.allocationId__        if (allocationId.getRelocationId() != null) {_            _            allocationId = AllocationId.finishRelocation(allocationId)__        }_        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.STARTED, null, null, allocationId,_            UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };set,the,shards,state,to,code,started,code,the,shards,state,must,be,code,initializing,code,or,code,relocating,code,any,relocation,will,be,canceled;public,shard,routing,move,to,started,assert,state,shard,routing,state,initializing,expected,an,initializing,shard,this,allocation,id,allocation,id,this,allocation,id,if,allocation,id,get,relocation,id,null,allocation,id,allocation,id,finish,relocation,allocation,id,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,started,null,null,allocation,id
ShardRouting -> public ShardRouting moveToStarted();1540847035;Set the shards state to <code>STARTED</code>. The shards state must be_<code>INITIALIZING</code> or <code>RELOCATING</code>. Any relocation will be_canceled.;public ShardRouting moveToStarted() {_        assert state == ShardRoutingState.INITIALIZING : "expected an initializing shard " + this__        AllocationId allocationId = this.allocationId__        if (allocationId.getRelocationId() != null) {_            _            allocationId = AllocationId.finishRelocation(allocationId)__        }_        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.STARTED, null, null, allocationId,_            UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };set,the,shards,state,to,code,started,code,the,shards,state,must,be,code,initializing,code,or,code,relocating,code,any,relocation,will,be,canceled;public,shard,routing,move,to,started,assert,state,shard,routing,state,initializing,expected,an,initializing,shard,this,allocation,id,allocation,id,this,allocation,id,if,allocation,id,get,relocation,id,null,allocation,id,allocation,id,finish,relocation,allocation,id,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,started,null,null,allocation,id
ShardRouting -> public String shortSummary();1524684173;A short description of the shard.;public String shortSummary() {_        StringBuilder sb = new StringBuilder()__        sb.append('[').append(shardId.getIndexName()).append(']').append('[').append(shardId.getId()).append(']')__        sb.append(", node[").append(currentNodeId).append("], ")__        if (relocatingNodeId != null) {_            sb.append("relocating [").append(relocatingNodeId).append("], ")__        }_        if (primary) {_            sb.append("[P]")__        } else {_            sb.append("[R]")__        }_        if (recoverySource != null) {_            sb.append(", recovery_source[").append(recoverySource).append("]")__        }_        sb.append(", s[").append(state).append("]")__        if (allocationId != null) {_            sb.append(", a").append(allocationId)__        }_        if (this.unassignedInfo != null) {_            sb.append(", ").append(unassignedInfo.toString())__        }_        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE) {_            sb.append(", expected_shard_size[").append(expectedShardSize).append("]")__        }_        return sb.toString()__    };a,short,description,of,the,shard;public,string,short,summary,string,builder,sb,new,string,builder,sb,append,append,shard,id,get,index,name,append,append,append,shard,id,get,id,append,sb,append,node,append,current,node,id,append,if,relocating,node,id,null,sb,append,relocating,append,relocating,node,id,append,if,primary,sb,append,p,else,sb,append,r,if,recovery,source,null,sb,append,append,recovery,source,append,sb,append,s,append,state,append,if,allocation,id,null,sb,append,a,append,allocation,id,if,this,unassigned,info,null,sb,append,append,unassigned,info,to,string,if,expected,shard,size,sb,append,append,expected,shard,size,append,return,sb,to,string
ShardRouting -> public String shortSummary();1524780945;A short description of the shard.;public String shortSummary() {_        StringBuilder sb = new StringBuilder()__        sb.append('[').append(shardId.getIndexName()).append(']').append('[').append(shardId.getId()).append(']')__        sb.append(", node[").append(currentNodeId).append("], ")__        if (relocatingNodeId != null) {_            sb.append("relocating [").append(relocatingNodeId).append("], ")__        }_        if (primary) {_            sb.append("[P]")__        } else {_            sb.append("[R]")__        }_        if (recoverySource != null) {_            sb.append(", recovery_source[").append(recoverySource).append("]")__        }_        sb.append(", s[").append(state).append("]")__        if (allocationId != null) {_            sb.append(", a").append(allocationId)__        }_        if (this.unassignedInfo != null) {_            sb.append(", ").append(unassignedInfo.toString())__        }_        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE) {_            sb.append(", expected_shard_size[").append(expectedShardSize).append("]")__        }_        return sb.toString()__    };a,short,description,of,the,shard;public,string,short,summary,string,builder,sb,new,string,builder,sb,append,append,shard,id,get,index,name,append,append,append,shard,id,get,id,append,sb,append,node,append,current,node,id,append,if,relocating,node,id,null,sb,append,relocating,append,relocating,node,id,append,if,primary,sb,append,p,else,sb,append,r,if,recovery,source,null,sb,append,append,recovery,source,append,sb,append,s,append,state,append,if,allocation,id,null,sb,append,a,append,allocation,id,if,this,unassigned,info,null,sb,append,append,unassigned,info,to,string,if,expected,shard,size,sb,append,append,expected,shard,size,append,return,sb,to,string
ShardRouting -> public String shortSummary();1536611444;A short description of the shard.;public String shortSummary() {_        StringBuilder sb = new StringBuilder()__        sb.append('[').append(shardId.getIndexName()).append(']').append('[').append(shardId.getId()).append(']')__        sb.append(", node[").append(currentNodeId).append("], ")__        if (relocatingNodeId != null) {_            sb.append("relocating [").append(relocatingNodeId).append("], ")__        }_        if (primary) {_            sb.append("[P]")__        } else {_            sb.append("[R]")__        }_        if (recoverySource != null) {_            sb.append(", recovery_source[").append(recoverySource).append("]")__        }_        sb.append(", s[").append(state).append("]")__        if (allocationId != null) {_            sb.append(", a").append(allocationId)__        }_        if (this.unassignedInfo != null) {_            sb.append(", ").append(unassignedInfo.toString())__        }_        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE) {_            sb.append(", expected_shard_size[").append(expectedShardSize).append("]")__        }_        return sb.toString()__    };a,short,description,of,the,shard;public,string,short,summary,string,builder,sb,new,string,builder,sb,append,append,shard,id,get,index,name,append,append,append,shard,id,get,id,append,sb,append,node,append,current,node,id,append,if,relocating,node,id,null,sb,append,relocating,append,relocating,node,id,append,if,primary,sb,append,p,else,sb,append,r,if,recovery,source,null,sb,append,append,recovery,source,append,sb,append,s,append,state,append,if,allocation,id,null,sb,append,a,append,allocation,id,if,this,unassigned,info,null,sb,append,append,unassigned,info,to,string,if,expected,shard,size,sb,append,append,expected,shard,size,append,return,sb,to,string
ShardRouting -> public String shortSummary();1540847035;A short description of the shard.;public String shortSummary() {_        StringBuilder sb = new StringBuilder()__        sb.append('[').append(shardId.getIndexName()).append(']').append('[').append(shardId.getId()).append(']')__        sb.append(", node[").append(currentNodeId).append("], ")__        if (relocatingNodeId != null) {_            sb.append("relocating [").append(relocatingNodeId).append("], ")__        }_        if (primary) {_            sb.append("[P]")__        } else {_            sb.append("[R]")__        }_        if (recoverySource != null) {_            sb.append(", recovery_source[").append(recoverySource).append("]")__        }_        sb.append(", s[").append(state).append("]")__        if (allocationId != null) {_            sb.append(", a").append(allocationId)__        }_        if (this.unassignedInfo != null) {_            sb.append(", ").append(unassignedInfo.toString())__        }_        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE) {_            sb.append(", expected_shard_size[").append(expectedShardSize).append("]")__        }_        return sb.toString()__    };a,short,description,of,the,shard;public,string,short,summary,string,builder,sb,new,string,builder,sb,append,append,shard,id,get,index,name,append,append,append,shard,id,get,id,append,sb,append,node,append,current,node,id,append,if,relocating,node,id,null,sb,append,relocating,append,relocating,node,id,append,if,primary,sb,append,p,else,sb,append,r,if,recovery,source,null,sb,append,append,recovery,source,append,sb,append,s,append,state,append,if,allocation,id,null,sb,append,a,append,allocation,id,if,this,unassigned,info,null,sb,append,append,unassigned,info,to,string,if,expected,shard,size,sb,append,append,expected,shard,size,append,return,sb,to,string
ShardRouting -> public static ShardRouting newUnassigned(ShardId shardId, boolean primary, RecoverySource recoverySource, UnassignedInfo unassignedInfo);1524684173;Creates a new unassigned shard.;public static ShardRouting newUnassigned(ShardId shardId, boolean primary, RecoverySource recoverySource, UnassignedInfo unassignedInfo) {_        return new ShardRouting(shardId, null, null, primary, ShardRoutingState.UNASSIGNED, recoverySource, unassignedInfo, null, UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };creates,a,new,unassigned,shard;public,static,shard,routing,new,unassigned,shard,id,shard,id,boolean,primary,recovery,source,recovery,source,unassigned,info,unassigned,info,return,new,shard,routing,shard,id,null,null,primary,shard,routing,state,unassigned,recovery,source,unassigned,info,null
ShardRouting -> public static ShardRouting newUnassigned(ShardId shardId, boolean primary, RecoverySource recoverySource, UnassignedInfo unassignedInfo);1524780945;Creates a new unassigned shard.;public static ShardRouting newUnassigned(ShardId shardId, boolean primary, RecoverySource recoverySource, UnassignedInfo unassignedInfo) {_        return new ShardRouting(shardId, null, null, primary, ShardRoutingState.UNASSIGNED, recoverySource, unassignedInfo, null, UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };creates,a,new,unassigned,shard;public,static,shard,routing,new,unassigned,shard,id,shard,id,boolean,primary,recovery,source,recovery,source,unassigned,info,unassigned,info,return,new,shard,routing,shard,id,null,null,primary,shard,routing,state,unassigned,recovery,source,unassigned,info,null
ShardRouting -> public static ShardRouting newUnassigned(ShardId shardId, boolean primary, RecoverySource recoverySource, UnassignedInfo unassignedInfo);1536611444;Creates a new unassigned shard.;public static ShardRouting newUnassigned(ShardId shardId, boolean primary, RecoverySource recoverySource, UnassignedInfo unassignedInfo) {_        return new ShardRouting(shardId, null, null, primary, ShardRoutingState.UNASSIGNED, recoverySource, unassignedInfo, null, UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };creates,a,new,unassigned,shard;public,static,shard,routing,new,unassigned,shard,id,shard,id,boolean,primary,recovery,source,recovery,source,unassigned,info,unassigned,info,return,new,shard,routing,shard,id,null,null,primary,shard,routing,state,unassigned,recovery,source,unassigned,info,null
ShardRouting -> public boolean initializing();1524684173;The shard is initializing (usually recovering either from peer shard_or from gateway).;public boolean initializing() {_        return state == ShardRoutingState.INITIALIZING__    };the,shard,is,initializing,usually,recovering,either,from,peer,shard,or,from,gateway;public,boolean,initializing,return,state,shard,routing,state,initializing
ShardRouting -> public boolean initializing();1524780945;The shard is initializing (usually recovering either from peer shard_or from gateway).;public boolean initializing() {_        return state == ShardRoutingState.INITIALIZING__    };the,shard,is,initializing,usually,recovering,either,from,peer,shard,or,from,gateway;public,boolean,initializing,return,state,shard,routing,state,initializing
ShardRouting -> public boolean initializing();1536611444;The shard is initializing (usually recovering either from peer shard_or from gateway).;public boolean initializing() {_        return state == ShardRoutingState.INITIALIZING__    };the,shard,is,initializing,usually,recovering,either,from,peer,shard,or,from,gateway;public,boolean,initializing,return,state,shard,routing,state,initializing
ShardRouting -> public boolean initializing();1540847035;The shard is initializing (usually recovering either from peer shard_or from gateway).;public boolean initializing() {_        return state == ShardRoutingState.INITIALIZING__    };the,shard,is,initializing,usually,recovering,either,from,peer,shard,or,from,gateway;public,boolean,initializing,return,state,shard,routing,state,initializing
ShardRouting -> public boolean started();1524684173;The shard is in started mode.;public boolean started() {_        return state == ShardRoutingState.STARTED__    };the,shard,is,in,started,mode;public,boolean,started,return,state,shard,routing,state,started
ShardRouting -> public boolean started();1524780945;The shard is in started mode.;public boolean started() {_        return state == ShardRoutingState.STARTED__    };the,shard,is,in,started,mode;public,boolean,started,return,state,shard,routing,state,started
ShardRouting -> public boolean started();1536611444;The shard is in started mode.;public boolean started() {_        return state == ShardRoutingState.STARTED__    };the,shard,is,in,started,mode;public,boolean,started,return,state,shard,routing,state,started
ShardRouting -> public boolean started();1540847035;The shard is in started mode.;public boolean started() {_        return state == ShardRoutingState.STARTED__    };the,shard,is,in,started,mode;public,boolean,started,return,state,shard,routing,state,started
ShardRouting -> public boolean isRelocationSourceOf(ShardRouting other);1524684173;returns true if the routing is the relocation source for the given routing;public boolean isRelocationSourceOf(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && other.state == ShardRoutingState.INITIALIZING &&_            other.allocationId.getId().equals(this.allocationId.getRelocationId())___        assert b == false || this.state == ShardRoutingState.RELOCATING :_            "ShardRouting is a relocation source but shard state isn't relocating. This [" + this + "], other [" + other + "]"____        assert b == false || this.allocationId.getId().equals(other.allocationId.getRelocationId()) :_            "ShardRouting is a relocation source but the allocation id isn't equal to other.allocationId.getRelocationId. This [" + this + "], other [" + other + "]"___        assert b == false || this.currentNodeId().equals(other.relocatingNodeId) :_            "ShardRouting is a relocation source but current node isn't equal to other's relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || other.currentNodeId().equals(this.relocatingNodeId) :_            "ShardRouting is a relocation source but relocating node isn't equal to other's current node. This [" + this + "], other [" + other + "]"___        assert b == false || this.shardId.equals(other.shardId) :_            "ShardRouting is a relocation source but both routings are not of the same shard. This [" + this + "], target [" + other + "]"___        assert b == false || this.primary == other.primary :_            "ShardRouting is a relocation source but primary flag is different. This [" + this + "], target [" + other + "]"___        return b__    };returns,true,if,the,routing,is,the,relocation,source,for,the,given,routing;public,boolean,is,relocation,source,of,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,other,state,shard,routing,state,initializing,other,allocation,id,get,id,equals,this,allocation,id,get,relocation,id,assert,b,false,this,state,shard,routing,state,relocating,shard,routing,is,a,relocation,source,but,shard,state,isn,t,relocating,this,this,other,other,assert,b,false,this,allocation,id,get,id,equals,other,allocation,id,get,relocation,id,shard,routing,is,a,relocation,source,but,the,allocation,id,isn,t,equal,to,other,allocation,id,get,relocation,id,this,this,other,other,assert,b,false,this,current,node,id,equals,other,relocating,node,id,shard,routing,is,a,relocation,source,but,current,node,isn,t,equal,to,other,s,relocating,node,this,this,other,other,assert,b,false,other,current,node,id,equals,this,relocating,node,id,shard,routing,is,a,relocation,source,but,relocating,node,isn,t,equal,to,other,s,current,node,this,this,other,other,assert,b,false,this,shard,id,equals,other,shard,id,shard,routing,is,a,relocation,source,but,both,routings,are,not,of,the,same,shard,this,this,target,other,assert,b,false,this,primary,other,primary,shard,routing,is,a,relocation,source,but,primary,flag,is,different,this,this,target,other,return,b
ShardRouting -> public boolean isRelocationSourceOf(ShardRouting other);1524780945;returns true if the routing is the relocation source for the given routing;public boolean isRelocationSourceOf(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && other.state == ShardRoutingState.INITIALIZING &&_            other.allocationId.getId().equals(this.allocationId.getRelocationId())___        assert b == false || this.state == ShardRoutingState.RELOCATING :_            "ShardRouting is a relocation source but shard state isn't relocating. This [" + this + "], other [" + other + "]"____        assert b == false || this.allocationId.getId().equals(other.allocationId.getRelocationId()) :_            "ShardRouting is a relocation source but the allocation id isn't equal to other.allocationId.getRelocationId. This [" + this + "], other [" + other + "]"___        assert b == false || this.currentNodeId().equals(other.relocatingNodeId) :_            "ShardRouting is a relocation source but current node isn't equal to other's relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || other.currentNodeId().equals(this.relocatingNodeId) :_            "ShardRouting is a relocation source but relocating node isn't equal to other's current node. This [" + this + "], other [" + other + "]"___        assert b == false || this.shardId.equals(other.shardId) :_            "ShardRouting is a relocation source but both indexRoutings are not of the same shard. This [" + this + "], target [" + other + "]"___        assert b == false || this.primary == other.primary :_            "ShardRouting is a relocation source but primary flag is different. This [" + this + "], target [" + other + "]"___        return b__    };returns,true,if,the,routing,is,the,relocation,source,for,the,given,routing;public,boolean,is,relocation,source,of,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,other,state,shard,routing,state,initializing,other,allocation,id,get,id,equals,this,allocation,id,get,relocation,id,assert,b,false,this,state,shard,routing,state,relocating,shard,routing,is,a,relocation,source,but,shard,state,isn,t,relocating,this,this,other,other,assert,b,false,this,allocation,id,get,id,equals,other,allocation,id,get,relocation,id,shard,routing,is,a,relocation,source,but,the,allocation,id,isn,t,equal,to,other,allocation,id,get,relocation,id,this,this,other,other,assert,b,false,this,current,node,id,equals,other,relocating,node,id,shard,routing,is,a,relocation,source,but,current,node,isn,t,equal,to,other,s,relocating,node,this,this,other,other,assert,b,false,other,current,node,id,equals,this,relocating,node,id,shard,routing,is,a,relocation,source,but,relocating,node,isn,t,equal,to,other,s,current,node,this,this,other,other,assert,b,false,this,shard,id,equals,other,shard,id,shard,routing,is,a,relocation,source,but,both,index,routings,are,not,of,the,same,shard,this,this,target,other,assert,b,false,this,primary,other,primary,shard,routing,is,a,relocation,source,but,primary,flag,is,different,this,this,target,other,return,b
ShardRouting -> public boolean isRelocationSourceOf(ShardRouting other);1536611444;returns true if the routing is the relocation source for the given routing;public boolean isRelocationSourceOf(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && other.state == ShardRoutingState.INITIALIZING &&_            other.allocationId.getId().equals(this.allocationId.getRelocationId())___        assert b == false || this.state == ShardRoutingState.RELOCATING :_            "ShardRouting is a relocation source but shard state isn't relocating. This [" + this + "], other [" + other + "]"____        assert b == false || this.allocationId.getId().equals(other.allocationId.getRelocationId()) :_            "ShardRouting is a relocation source but the allocation id isn't equal to other.allocationId.getRelocationId. This [" + this + "], other [" + other + "]"___        assert b == false || this.currentNodeId().equals(other.relocatingNodeId) :_            "ShardRouting is a relocation source but current node isn't equal to other's relocating node. This [" + this + "], other [" + other + "]"___        assert b == false || other.currentNodeId().equals(this.relocatingNodeId) :_            "ShardRouting is a relocation source but relocating node isn't equal to other's current node. This [" + this + "], other [" + other + "]"___        assert b == false || this.shardId.equals(other.shardId) :_            "ShardRouting is a relocation source but both indexRoutings are not of the same shard. This [" + this + "], target [" + other + "]"___        assert b == false || this.primary == other.primary :_            "ShardRouting is a relocation source but primary flag is different. This [" + this + "], target [" + other + "]"___        return b__    };returns,true,if,the,routing,is,the,relocation,source,for,the,given,routing;public,boolean,is,relocation,source,of,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,other,state,shard,routing,state,initializing,other,allocation,id,get,id,equals,this,allocation,id,get,relocation,id,assert,b,false,this,state,shard,routing,state,relocating,shard,routing,is,a,relocation,source,but,shard,state,isn,t,relocating,this,this,other,other,assert,b,false,this,allocation,id,get,id,equals,other,allocation,id,get,relocation,id,shard,routing,is,a,relocation,source,but,the,allocation,id,isn,t,equal,to,other,allocation,id,get,relocation,id,this,this,other,other,assert,b,false,this,current,node,id,equals,other,relocating,node,id,shard,routing,is,a,relocation,source,but,current,node,isn,t,equal,to,other,s,relocating,node,this,this,other,other,assert,b,false,other,current,node,id,equals,this,relocating,node,id,shard,routing,is,a,relocation,source,but,relocating,node,isn,t,equal,to,other,s,current,node,this,this,other,other,assert,b,false,this,shard,id,equals,other,shard,id,shard,routing,is,a,relocation,source,but,both,index,routings,are,not,of,the,same,shard,this,this,target,other,assert,b,false,this,primary,other,primary,shard,routing,is,a,relocation,source,but,primary,flag,is,different,this,this,target,other,return,b
ShardRouting -> public boolean isRelocationSourceOf(ShardRouting other);1540847035;returns true if the routing is the relocation source for the given routing;public boolean isRelocationSourceOf(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && other.state == ShardRoutingState.INITIALIZING &&_            other.allocationId.getId().equals(this.allocationId.getRelocationId())___        assert b == false || this.state == ShardRoutingState.RELOCATING :_            "ShardRouting is a relocation source but shard state isn't relocating. This [" + this + "], other [" + other + "]"____        assert b == false || this.allocationId.getId().equals(other.allocationId.getRelocationId()) :_            "ShardRouting is a relocation source but the allocation id isn't equal to other.allocationId.getRelocationId." +_                " This [" + this + "], other [" + other + "]"___        assert b == false || this.currentNodeId().equals(other.relocatingNodeId) :_            "ShardRouting is a relocation source but current node isn't equal to other's relocating node." +_                " This [" + this + "], other [" + other + "]"___        assert b == false || other.currentNodeId().equals(this.relocatingNodeId) :_            "ShardRouting is a relocation source but relocating node isn't equal to other's current node." +_                " This [" + this + "], other [" + other + "]"___        assert b == false || this.shardId.equals(other.shardId) :_            "ShardRouting is a relocation source but both indexRoutings are not of the same shard." +_                " This [" + this + "], target [" + other + "]"___        assert b == false || this.primary == other.primary :_            "ShardRouting is a relocation source but primary flag is different. This [" + this + "], target [" + other + "]"___        return b__    };returns,true,if,the,routing,is,the,relocation,source,for,the,given,routing;public,boolean,is,relocation,source,of,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,other,state,shard,routing,state,initializing,other,allocation,id,get,id,equals,this,allocation,id,get,relocation,id,assert,b,false,this,state,shard,routing,state,relocating,shard,routing,is,a,relocation,source,but,shard,state,isn,t,relocating,this,this,other,other,assert,b,false,this,allocation,id,get,id,equals,other,allocation,id,get,relocation,id,shard,routing,is,a,relocation,source,but,the,allocation,id,isn,t,equal,to,other,allocation,id,get,relocation,id,this,this,other,other,assert,b,false,this,current,node,id,equals,other,relocating,node,id,shard,routing,is,a,relocation,source,but,current,node,isn,t,equal,to,other,s,relocating,node,this,this,other,other,assert,b,false,other,current,node,id,equals,this,relocating,node,id,shard,routing,is,a,relocation,source,but,relocating,node,isn,t,equal,to,other,s,current,node,this,this,other,other,assert,b,false,this,shard,id,equals,other,shard,id,shard,routing,is,a,relocation,source,but,both,index,routings,are,not,of,the,same,shard,this,this,target,other,assert,b,false,this,primary,other,primary,shard,routing,is,a,relocation,source,but,primary,flag,is,different,this,this,target,other,return,b
ShardRouting -> public boolean isSameAllocation(ShardRouting other);1524684173;returns true if this routing has the same allocation ID as another._<p>_Note: if both shard routing has a null as their {@link #allocationId()}, this method returns false as the routing describe_no allocation at all..;public boolean isSameAllocation(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && this.allocationId.getId().equals(other.allocationId.getId())__        assert b == false || this.currentNodeId.equals(other.currentNodeId) : "ShardRoutings have the same allocation id but not the same node. This [" + this + "], other [" + other + "]"__        return b__    };returns,true,if,this,routing,has,the,same,allocation,id,as,another,p,note,if,both,shard,routing,has,a,null,as,their,link,allocation,id,this,method,returns,false,as,the,routing,describe,no,allocation,at,all;public,boolean,is,same,allocation,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,this,allocation,id,get,id,equals,other,allocation,id,get,id,assert,b,false,this,current,node,id,equals,other,current,node,id,shard,routings,have,the,same,allocation,id,but,not,the,same,node,this,this,other,other,return,b
ShardRouting -> public boolean isSameAllocation(ShardRouting other);1524780945;returns true if this routing has the same allocation ID as another._<p>_Note: if both shard routing has a null as their {@link #allocationId()}, this method returns false as the routing describe_no allocation at all..;public boolean isSameAllocation(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && this.allocationId.getId().equals(other.allocationId.getId())__        assert b == false || this.currentNodeId.equals(other.currentNodeId) : "ShardRoutings have the same allocation id but not the same node. This [" + this + "], other [" + other + "]"__        return b__    };returns,true,if,this,routing,has,the,same,allocation,id,as,another,p,note,if,both,shard,routing,has,a,null,as,their,link,allocation,id,this,method,returns,false,as,the,routing,describe,no,allocation,at,all;public,boolean,is,same,allocation,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,this,allocation,id,get,id,equals,other,allocation,id,get,id,assert,b,false,this,current,node,id,equals,other,current,node,id,shard,routings,have,the,same,allocation,id,but,not,the,same,node,this,this,other,other,return,b
ShardRouting -> public boolean isSameAllocation(ShardRouting other);1536611444;returns true if this routing has the same allocation ID as another._<p>_Note: if both shard routing has a null as their {@link #allocationId()}, this method returns false as the routing describe_no allocation at all..;public boolean isSameAllocation(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && this.allocationId.getId().equals(other.allocationId.getId())__        assert b == false || this.currentNodeId.equals(other.currentNodeId) : "ShardRoutings have the same allocation id but not the same node. This [" + this + "], other [" + other + "]"__        return b__    };returns,true,if,this,routing,has,the,same,allocation,id,as,another,p,note,if,both,shard,routing,has,a,null,as,their,link,allocation,id,this,method,returns,false,as,the,routing,describe,no,allocation,at,all;public,boolean,is,same,allocation,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,this,allocation,id,get,id,equals,other,allocation,id,get,id,assert,b,false,this,current,node,id,equals,other,current,node,id,shard,routings,have,the,same,allocation,id,but,not,the,same,node,this,this,other,other,return,b
ShardRouting -> public boolean isSameAllocation(ShardRouting other);1540847035;returns true if this routing has the same allocation ID as another._<p>_Note: if both shard routing has a null as their {@link #allocationId()}, this method returns false as the routing describe_no allocation at all..;public boolean isSameAllocation(ShardRouting other) {_        boolean b = this.allocationId != null && other.allocationId != null && this.allocationId.getId().equals(other.allocationId.getId())__        assert b == false || this.currentNodeId.equals(other.currentNodeId) :_            "ShardRoutings have the same allocation id but not the same node. This [" + this + "], other [" + other + "]"__        return b__    };returns,true,if,this,routing,has,the,same,allocation,id,as,another,p,note,if,both,shard,routing,has,a,null,as,their,link,allocation,id,this,method,returns,false,as,the,routing,describe,no,allocation,at,all;public,boolean,is,same,allocation,shard,routing,other,boolean,b,this,allocation,id,null,other,allocation,id,null,this,allocation,id,get,id,equals,other,allocation,id,get,id,assert,b,false,this,current,node,id,equals,other,current,node,id,shard,routings,have,the,same,allocation,id,but,not,the,same,node,this,this,other,other,return,b
ShardRouting -> public int getId();1524684173;The shard id.;public int getId() {_        return id()__    };the,shard,id;public,int,get,id,return,id
ShardRouting -> public int getId();1524780945;The shard id.;public int getId() {_        return id()__    };the,shard,id;public,int,get,id,return,id
ShardRouting -> public int getId();1536611444;The shard id.;public int getId() {_        return id()__    };the,shard,id;public,int,get,id,return,id
ShardRouting -> public int getId();1540847035;The shard id.;public int getId() {_        return id()__    };the,shard,id;public,int,get,id,return,id
ShardRouting -> ShardRouting(ShardId shardId, String currentNodeId,                  String relocatingNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource,                  UnassignedInfo unassignedInfo, AllocationId allocationId, long expectedShardSize);1524684173;A constructor to internally create shard routing instances, note, the internal flag should only be set to true_by either this class or tests. Visible for testing.;ShardRouting(ShardId shardId, String currentNodeId,_                 String relocatingNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource,_                 UnassignedInfo unassignedInfo, AllocationId allocationId, long expectedShardSize) {_        this.shardId = shardId__        this.currentNodeId = currentNodeId__        this.relocatingNodeId = relocatingNodeId__        this.primary = primary__        this.state = state__        this.recoverySource = recoverySource__        this.unassignedInfo = unassignedInfo__        this.allocationId = allocationId__        this.expectedShardSize = expectedShardSize__        this.targetRelocatingShard = initializeTargetRelocatingShard()__        this.asList = Collections.singletonList(this)__        assert expectedShardSize == UNAVAILABLE_EXPECTED_SHARD_SIZE || state == ShardRoutingState.INITIALIZING || state == ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state__        assert expectedShardSize >= 0 || state != ShardRoutingState.INITIALIZING || state != ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state__        assert !(state == ShardRoutingState.UNASSIGNED && unassignedInfo == null) : "unassigned shard must be created with meta"__        assert (state == ShardRoutingState.UNASSIGNED || state == ShardRoutingState.INITIALIZING) == (recoverySource != null) : "recovery source only available on unassigned or initializing shard but was " + state__        assert recoverySource == null || recoverySource == PeerRecoverySource.INSTANCE || primary : "replica shards always recover from primary"__        assert (currentNodeId == null) == (state == ShardRoutingState.UNASSIGNED)  : "unassigned shard must not be assigned to a node " + this__    };a,constructor,to,internally,create,shard,routing,instances,note,the,internal,flag,should,only,be,set,to,true,by,either,this,class,or,tests,visible,for,testing;shard,routing,shard,id,shard,id,string,current,node,id,string,relocating,node,id,boolean,primary,shard,routing,state,state,recovery,source,recovery,source,unassigned,info,unassigned,info,allocation,id,allocation,id,long,expected,shard,size,this,shard,id,shard,id,this,current,node,id,current,node,id,this,relocating,node,id,relocating,node,id,this,primary,primary,this,state,state,this,recovery,source,recovery,source,this,unassigned,info,unassigned,info,this,allocation,id,allocation,id,this,expected,shard,size,expected,shard,size,this,target,relocating,shard,initialize,target,relocating,shard,this,as,list,collections,singleton,list,this,assert,expected,shard,size,state,shard,routing,state,initializing,state,shard,routing,state,relocating,expected,shard,size,state,state,assert,expected,shard,size,0,state,shard,routing,state,initializing,state,shard,routing,state,relocating,expected,shard,size,state,state,assert,state,shard,routing,state,unassigned,unassigned,info,null,unassigned,shard,must,be,created,with,meta,assert,state,shard,routing,state,unassigned,state,shard,routing,state,initializing,recovery,source,null,recovery,source,only,available,on,unassigned,or,initializing,shard,but,was,state,assert,recovery,source,null,recovery,source,peer,recovery,source,instance,primary,replica,shards,always,recover,from,primary,assert,current,node,id,null,state,shard,routing,state,unassigned,unassigned,shard,must,not,be,assigned,to,a,node,this
ShardRouting -> ShardRouting(ShardId shardId, String currentNodeId,                  String relocatingNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource,                  UnassignedInfo unassignedInfo, AllocationId allocationId, long expectedShardSize);1524780945;A constructor to internally create shard routing instances, note, the internal flag should only be set to true_by either this class or tests. Visible for testing.;ShardRouting(ShardId shardId, String currentNodeId,_                 String relocatingNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource,_                 UnassignedInfo unassignedInfo, AllocationId allocationId, long expectedShardSize) {_        this.shardId = shardId__        this.currentNodeId = currentNodeId__        this.relocatingNodeId = relocatingNodeId__        this.primary = primary__        this.state = state__        this.recoverySource = recoverySource__        this.unassignedInfo = unassignedInfo__        this.allocationId = allocationId__        this.expectedShardSize = expectedShardSize__        this.targetRelocatingShard = initializeTargetRelocatingShard()__        this.asList = Collections.singletonList(this)__        assert expectedShardSize == UNAVAILABLE_EXPECTED_SHARD_SIZE || state == ShardRoutingState.INITIALIZING || state == ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state__        assert expectedShardSize >= 0 || state != ShardRoutingState.INITIALIZING || state != ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state__        assert !(state == ShardRoutingState.UNASSIGNED && unassignedInfo == null) : "unassigned shard must be created with meta"__        assert (state == ShardRoutingState.UNASSIGNED || state == ShardRoutingState.INITIALIZING) == (recoverySource != null) : "recovery source only available on unassigned or initializing shard but was " + state__        assert recoverySource == null || recoverySource == PeerRecoverySource.INSTANCE || primary : "replica shards always recover from primary"__        assert (currentNodeId == null) == (state == ShardRoutingState.UNASSIGNED)  : "unassigned shard must not be assigned to a node " + this__    };a,constructor,to,internally,create,shard,routing,instances,note,the,internal,flag,should,only,be,set,to,true,by,either,this,class,or,tests,visible,for,testing;shard,routing,shard,id,shard,id,string,current,node,id,string,relocating,node,id,boolean,primary,shard,routing,state,state,recovery,source,recovery,source,unassigned,info,unassigned,info,allocation,id,allocation,id,long,expected,shard,size,this,shard,id,shard,id,this,current,node,id,current,node,id,this,relocating,node,id,relocating,node,id,this,primary,primary,this,state,state,this,recovery,source,recovery,source,this,unassigned,info,unassigned,info,this,allocation,id,allocation,id,this,expected,shard,size,expected,shard,size,this,target,relocating,shard,initialize,target,relocating,shard,this,as,list,collections,singleton,list,this,assert,expected,shard,size,state,shard,routing,state,initializing,state,shard,routing,state,relocating,expected,shard,size,state,state,assert,expected,shard,size,0,state,shard,routing,state,initializing,state,shard,routing,state,relocating,expected,shard,size,state,state,assert,state,shard,routing,state,unassigned,unassigned,info,null,unassigned,shard,must,be,created,with,meta,assert,state,shard,routing,state,unassigned,state,shard,routing,state,initializing,recovery,source,null,recovery,source,only,available,on,unassigned,or,initializing,shard,but,was,state,assert,recovery,source,null,recovery,source,peer,recovery,source,instance,primary,replica,shards,always,recover,from,primary,assert,current,node,id,null,state,shard,routing,state,unassigned,unassigned,shard,must,not,be,assigned,to,a,node,this
ShardRouting -> ShardRouting(ShardId shardId, String currentNodeId,                  String relocatingNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource,                  UnassignedInfo unassignedInfo, AllocationId allocationId, long expectedShardSize);1536611444;A constructor to internally create shard routing instances, note, the internal flag should only be set to true_by either this class or tests. Visible for testing.;ShardRouting(ShardId shardId, String currentNodeId,_                 String relocatingNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource,_                 UnassignedInfo unassignedInfo, AllocationId allocationId, long expectedShardSize) {_        this.shardId = shardId__        this.currentNodeId = currentNodeId__        this.relocatingNodeId = relocatingNodeId__        this.primary = primary__        this.state = state__        this.recoverySource = recoverySource__        this.unassignedInfo = unassignedInfo__        this.allocationId = allocationId__        this.expectedShardSize = expectedShardSize__        this.targetRelocatingShard = initializeTargetRelocatingShard()__        this.asList = Collections.singletonList(this)__        assert expectedShardSize == UNAVAILABLE_EXPECTED_SHARD_SIZE || state == ShardRoutingState.INITIALIZING || state == ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state__        assert expectedShardSize >= 0 || state != ShardRoutingState.INITIALIZING || state != ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state__        assert !(state == ShardRoutingState.UNASSIGNED && unassignedInfo == null) : "unassigned shard must be created with meta"__        assert (state == ShardRoutingState.UNASSIGNED || state == ShardRoutingState.INITIALIZING) == (recoverySource != null) : "recovery source only available on unassigned or initializing shard but was " + state__        assert recoverySource == null || recoverySource == PeerRecoverySource.INSTANCE || primary : "replica shards always recover from primary"__        assert (currentNodeId == null) == (state == ShardRoutingState.UNASSIGNED)  : "unassigned shard must not be assigned to a node " + this__    };a,constructor,to,internally,create,shard,routing,instances,note,the,internal,flag,should,only,be,set,to,true,by,either,this,class,or,tests,visible,for,testing;shard,routing,shard,id,shard,id,string,current,node,id,string,relocating,node,id,boolean,primary,shard,routing,state,state,recovery,source,recovery,source,unassigned,info,unassigned,info,allocation,id,allocation,id,long,expected,shard,size,this,shard,id,shard,id,this,current,node,id,current,node,id,this,relocating,node,id,relocating,node,id,this,primary,primary,this,state,state,this,recovery,source,recovery,source,this,unassigned,info,unassigned,info,this,allocation,id,allocation,id,this,expected,shard,size,expected,shard,size,this,target,relocating,shard,initialize,target,relocating,shard,this,as,list,collections,singleton,list,this,assert,expected,shard,size,state,shard,routing,state,initializing,state,shard,routing,state,relocating,expected,shard,size,state,state,assert,expected,shard,size,0,state,shard,routing,state,initializing,state,shard,routing,state,relocating,expected,shard,size,state,state,assert,state,shard,routing,state,unassigned,unassigned,info,null,unassigned,shard,must,be,created,with,meta,assert,state,shard,routing,state,unassigned,state,shard,routing,state,initializing,recovery,source,null,recovery,source,only,available,on,unassigned,or,initializing,shard,but,was,state,assert,recovery,source,null,recovery,source,peer,recovery,source,instance,primary,replica,shards,always,recover,from,primary,assert,current,node,id,null,state,shard,routing,state,unassigned,unassigned,shard,must,not,be,assigned,to,a,node,this
ShardRouting -> ShardRouting(ShardId shardId, String currentNodeId,                  String relocatingNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource,                  UnassignedInfo unassignedInfo, AllocationId allocationId, long expectedShardSize);1540847035;A constructor to internally create shard routing instances, note, the internal flag should only be set to true_by either this class or tests. Visible for testing.;ShardRouting(ShardId shardId, String currentNodeId,_                 String relocatingNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource,_                 UnassignedInfo unassignedInfo, AllocationId allocationId, long expectedShardSize) {_        this.shardId = shardId__        this.currentNodeId = currentNodeId__        this.relocatingNodeId = relocatingNodeId__        this.primary = primary__        this.state = state__        this.recoverySource = recoverySource__        this.unassignedInfo = unassignedInfo__        this.allocationId = allocationId__        this.expectedShardSize = expectedShardSize__        this.targetRelocatingShard = initializeTargetRelocatingShard()__        this.asList = Collections.singletonList(this)__        assert expectedShardSize == UNAVAILABLE_EXPECTED_SHARD_SIZE || state == ShardRoutingState.INITIALIZING ||_            state == ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state__        assert expectedShardSize >= 0 || state != ShardRoutingState.INITIALIZING || state != ShardRoutingState.RELOCATING :_            expectedShardSize + " state: " + state__        assert !(state == ShardRoutingState.UNASSIGNED && unassignedInfo == null) : "unassigned shard must be created with meta"__        assert (state == ShardRoutingState.UNASSIGNED || state == ShardRoutingState.INITIALIZING) == (recoverySource != null) :_            "recovery source only available on unassigned or initializing shard but was " + state__        assert recoverySource == null || recoverySource == PeerRecoverySource.INSTANCE || primary :_            "replica shards always recover from primary"__        assert (currentNodeId == null) == (state == ShardRoutingState.UNASSIGNED)  :_            "unassigned shard must not be assigned to a node " + this__    };a,constructor,to,internally,create,shard,routing,instances,note,the,internal,flag,should,only,be,set,to,true,by,either,this,class,or,tests,visible,for,testing;shard,routing,shard,id,shard,id,string,current,node,id,string,relocating,node,id,boolean,primary,shard,routing,state,state,recovery,source,recovery,source,unassigned,info,unassigned,info,allocation,id,allocation,id,long,expected,shard,size,this,shard,id,shard,id,this,current,node,id,current,node,id,this,relocating,node,id,relocating,node,id,this,primary,primary,this,state,state,this,recovery,source,recovery,source,this,unassigned,info,unassigned,info,this,allocation,id,allocation,id,this,expected,shard,size,expected,shard,size,this,target,relocating,shard,initialize,target,relocating,shard,this,as,list,collections,singleton,list,this,assert,expected,shard,size,state,shard,routing,state,initializing,state,shard,routing,state,relocating,expected,shard,size,state,state,assert,expected,shard,size,0,state,shard,routing,state,initializing,state,shard,routing,state,relocating,expected,shard,size,state,state,assert,state,shard,routing,state,unassigned,unassigned,info,null,unassigned,shard,must,be,created,with,meta,assert,state,shard,routing,state,unassigned,state,shard,routing,state,initializing,recovery,source,null,recovery,source,only,available,on,unassigned,or,initializing,shard,but,was,state,assert,recovery,source,null,recovery,source,peer,recovery,source,instance,primary,replica,shards,always,recover,from,primary,assert,current,node,id,null,state,shard,routing,state,unassigned,unassigned,shard,must,not,be,assigned,to,a,node,this
ShardRouting -> public ShardRouting initialize(String nodeId, @Nullable String existingAllocationId, long expectedShardSize);1524684173;Initializes an unassigned shard on a node.__@param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.;public ShardRouting initialize(String nodeId, @Nullable String existingAllocationId, long expectedShardSize) {_        assert state == ShardRoutingState.UNASSIGNED : this__        assert relocatingNodeId == null : this__        final AllocationId allocationId__        if (existingAllocationId == null) {_            allocationId = AllocationId.newInitializing()__        } else {_            allocationId = AllocationId.newInitializing(existingAllocationId)__        }_        return new ShardRouting(shardId, nodeId, null, primary, ShardRoutingState.INITIALIZING, recoverySource,_            unassignedInfo, allocationId, expectedShardSize)__    };initializes,an,unassigned,shard,on,a,node,param,existing,allocation,id,allocation,id,to,use,if,null,a,fresh,allocation,id,is,generated;public,shard,routing,initialize,string,node,id,nullable,string,existing,allocation,id,long,expected,shard,size,assert,state,shard,routing,state,unassigned,this,assert,relocating,node,id,null,this,final,allocation,id,allocation,id,if,existing,allocation,id,null,allocation,id,allocation,id,new,initializing,else,allocation,id,allocation,id,new,initializing,existing,allocation,id,return,new,shard,routing,shard,id,node,id,null,primary,shard,routing,state,initializing,recovery,source,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting initialize(String nodeId, @Nullable String existingAllocationId, long expectedShardSize);1524780945;Initializes an unassigned shard on a node.__@param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.;public ShardRouting initialize(String nodeId, @Nullable String existingAllocationId, long expectedShardSize) {_        assert state == ShardRoutingState.UNASSIGNED : this__        assert relocatingNodeId == null : this__        final AllocationId allocationId__        if (existingAllocationId == null) {_            allocationId = AllocationId.newInitializing()__        } else {_            allocationId = AllocationId.newInitializing(existingAllocationId)__        }_        return new ShardRouting(shardId, nodeId, null, primary, ShardRoutingState.INITIALIZING, recoverySource,_            unassignedInfo, allocationId, expectedShardSize)__    };initializes,an,unassigned,shard,on,a,node,param,existing,allocation,id,allocation,id,to,use,if,null,a,fresh,allocation,id,is,generated;public,shard,routing,initialize,string,node,id,nullable,string,existing,allocation,id,long,expected,shard,size,assert,state,shard,routing,state,unassigned,this,assert,relocating,node,id,null,this,final,allocation,id,allocation,id,if,existing,allocation,id,null,allocation,id,allocation,id,new,initializing,else,allocation,id,allocation,id,new,initializing,existing,allocation,id,return,new,shard,routing,shard,id,node,id,null,primary,shard,routing,state,initializing,recovery,source,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting initialize(String nodeId, @Nullable String existingAllocationId, long expectedShardSize);1536611444;Initializes an unassigned shard on a node.__@param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.;public ShardRouting initialize(String nodeId, @Nullable String existingAllocationId, long expectedShardSize) {_        assert state == ShardRoutingState.UNASSIGNED : this__        assert relocatingNodeId == null : this__        final AllocationId allocationId__        if (existingAllocationId == null) {_            allocationId = AllocationId.newInitializing()__        } else {_            allocationId = AllocationId.newInitializing(existingAllocationId)__        }_        return new ShardRouting(shardId, nodeId, null, primary, ShardRoutingState.INITIALIZING, recoverySource,_            unassignedInfo, allocationId, expectedShardSize)__    };initializes,an,unassigned,shard,on,a,node,param,existing,allocation,id,allocation,id,to,use,if,null,a,fresh,allocation,id,is,generated;public,shard,routing,initialize,string,node,id,nullable,string,existing,allocation,id,long,expected,shard,size,assert,state,shard,routing,state,unassigned,this,assert,relocating,node,id,null,this,final,allocation,id,allocation,id,if,existing,allocation,id,null,allocation,id,allocation,id,new,initializing,else,allocation,id,allocation,id,new,initializing,existing,allocation,id,return,new,shard,routing,shard,id,node,id,null,primary,shard,routing,state,initializing,recovery,source,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting initialize(String nodeId, @Nullable String existingAllocationId, long expectedShardSize);1540847035;Initializes an unassigned shard on a node.__@param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.;public ShardRouting initialize(String nodeId, @Nullable String existingAllocationId, long expectedShardSize) {_        assert state == ShardRoutingState.UNASSIGNED : this__        assert relocatingNodeId == null : this__        final AllocationId allocationId__        if (existingAllocationId == null) {_            allocationId = AllocationId.newInitializing()__        } else {_            allocationId = AllocationId.newInitializing(existingAllocationId)__        }_        return new ShardRouting(shardId, nodeId, null, primary, ShardRoutingState.INITIALIZING, recoverySource,_            unassignedInfo, allocationId, expectedShardSize)__    };initializes,an,unassigned,shard,on,a,node,param,existing,allocation,id,allocation,id,to,use,if,null,a,fresh,allocation,id,is,generated;public,shard,routing,initialize,string,node,id,nullable,string,existing,allocation,id,long,expected,shard,size,assert,state,shard,routing,state,unassigned,this,assert,relocating,node,id,null,this,final,allocation,id,allocation,id,if,existing,allocation,id,null,allocation,id,allocation,id,new,initializing,else,allocation,id,allocation,id,new,initializing,existing,allocation,id,return,new,shard,routing,shard,id,node,id,null,primary,shard,routing,state,initializing,recovery,source,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public boolean active();1524684173;Returns <code>true</code> iff the this shard is currently_{@link ShardRoutingState#STARTED started} or_{@link ShardRoutingState#RELOCATING relocating} to another node._Otherwise <code>false</code>;public boolean active() {_        return started() || relocating()__    };returns,code,true,code,iff,the,this,shard,is,currently,link,shard,routing,state,started,started,or,link,shard,routing,state,relocating,relocating,to,another,node,otherwise,code,false,code;public,boolean,active,return,started,relocating
ShardRouting -> public boolean active();1524780945;Returns <code>true</code> iff the this shard is currently_{@link ShardRoutingState#STARTED started} or_{@link ShardRoutingState#RELOCATING relocating} to another node._Otherwise <code>false</code>;public boolean active() {_        return started() || relocating()__    };returns,code,true,code,iff,the,this,shard,is,currently,link,shard,routing,state,started,started,or,link,shard,routing,state,relocating,relocating,to,another,node,otherwise,code,false,code;public,boolean,active,return,started,relocating
ShardRouting -> public boolean active();1536611444;Returns <code>true</code> iff the this shard is currently_{@link ShardRoutingState#STARTED started} or_{@link ShardRoutingState#RELOCATING relocating} to another node._Otherwise <code>false</code>;public boolean active() {_        return started() || relocating()__    };returns,code,true,code,iff,the,this,shard,is,currently,link,shard,routing,state,started,started,or,link,shard,routing,state,relocating,relocating,to,another,node,otherwise,code,false,code;public,boolean,active,return,started,relocating
ShardRouting -> public boolean active();1540847035;Returns <code>true</code> iff the this shard is currently_{@link ShardRoutingState#STARTED started} or_{@link ShardRoutingState#RELOCATING relocating} to another node._Otherwise <code>false</code>;public boolean active() {_        return started() || relocating()__    };returns,code,true,code,iff,the,this,shard,is,currently,link,shard,routing,state,started,started,or,link,shard,routing,state,relocating,relocating,to,another,node,otherwise,code,false,code;public,boolean,active,return,started,relocating
ShardRouting -> public String currentNodeId();1524684173;The current node id the shard is allocated on.;public String currentNodeId() {_        return this.currentNodeId__    };the,current,node,id,the,shard,is,allocated,on;public,string,current,node,id,return,this,current,node,id
ShardRouting -> public String currentNodeId();1524780945;The current node id the shard is allocated on.;public String currentNodeId() {_        return this.currentNodeId__    };the,current,node,id,the,shard,is,allocated,on;public,string,current,node,id,return,this,current,node,id
ShardRouting -> public String currentNodeId();1536611444;The current node id the shard is allocated on.;public String currentNodeId() {_        return this.currentNodeId__    };the,current,node,id,the,shard,is,allocated,on;public,string,current,node,id,return,this,current,node,id
ShardRouting -> public String currentNodeId();1540847035;The current node id the shard is allocated on.;public String currentNodeId() {_        return this.currentNodeId__    };the,current,node,id,the,shard,is,allocated,on;public,string,current,node,id,return,this,current,node,id
ShardRouting -> public ShardRouting moveUnassignedFromPrimary();1524684173;Set the unassigned primary shard to non-primary__@throws IllegalShardRoutingStateException if shard is already a replica;public ShardRouting moveUnassignedFromPrimary() {_        assert state == ShardRoutingState.UNASSIGNED : "expected an unassigned shard " + this__        if (!primary) {_            throw new IllegalShardRoutingStateException(this, "Not primary, can't move to replica")__        }_        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, false, state, PeerRecoverySource.INSTANCE, unassignedInfo,_            allocationId, expectedShardSize)__    };set,the,unassigned,primary,shard,to,non,primary,throws,illegal,shard,routing,state,exception,if,shard,is,already,a,replica;public,shard,routing,move,unassigned,from,primary,assert,state,shard,routing,state,unassigned,expected,an,unassigned,shard,this,if,primary,throw,new,illegal,shard,routing,state,exception,this,not,primary,can,t,move,to,replica,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,false,state,peer,recovery,source,instance,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting moveUnassignedFromPrimary();1524780945;Set the unassigned primary shard to non-primary__@throws IllegalShardRoutingStateException if shard is already a replica;public ShardRouting moveUnassignedFromPrimary() {_        assert state == ShardRoutingState.UNASSIGNED : "expected an unassigned shard " + this__        if (!primary) {_            throw new IllegalShardRoutingStateException(this, "Not primary, can't move to replica")__        }_        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, false, state, PeerRecoverySource.INSTANCE, unassignedInfo,_            allocationId, expectedShardSize)__    };set,the,unassigned,primary,shard,to,non,primary,throws,illegal,shard,routing,state,exception,if,shard,is,already,a,replica;public,shard,routing,move,unassigned,from,primary,assert,state,shard,routing,state,unassigned,expected,an,unassigned,shard,this,if,primary,throw,new,illegal,shard,routing,state,exception,this,not,primary,can,t,move,to,replica,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,false,state,peer,recovery,source,instance,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting moveUnassignedFromPrimary();1536611444;Set the unassigned primary shard to non-primary__@throws IllegalShardRoutingStateException if shard is already a replica;public ShardRouting moveUnassignedFromPrimary() {_        assert state == ShardRoutingState.UNASSIGNED : "expected an unassigned shard " + this__        if (!primary) {_            throw new IllegalShardRoutingStateException(this, "Not primary, can't move to replica")__        }_        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, false, state, PeerRecoverySource.INSTANCE, unassignedInfo,_            allocationId, expectedShardSize)__    };set,the,unassigned,primary,shard,to,non,primary,throws,illegal,shard,routing,state,exception,if,shard,is,already,a,replica;public,shard,routing,move,unassigned,from,primary,assert,state,shard,routing,state,unassigned,expected,an,unassigned,shard,this,if,primary,throw,new,illegal,shard,routing,state,exception,this,not,primary,can,t,move,to,replica,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,false,state,peer,recovery,source,instance,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting moveUnassignedFromPrimary();1540847035;Set the unassigned primary shard to non-primary__@throws IllegalShardRoutingStateException if shard is already a replica;public ShardRouting moveUnassignedFromPrimary() {_        assert state == ShardRoutingState.UNASSIGNED : "expected an unassigned shard " + this__        if (!primary) {_            throw new IllegalShardRoutingStateException(this, "Not primary, can't move to replica")__        }_        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, false, state, PeerRecoverySource.INSTANCE, unassignedInfo,_            allocationId, expectedShardSize)__    };set,the,unassigned,primary,shard,to,non,primary,throws,illegal,shard,routing,state,exception,if,shard,is,already,a,replica;public,shard,routing,move,unassigned,from,primary,assert,state,shard,routing,state,unassigned,expected,an,unassigned,shard,this,if,primary,throw,new,illegal,shard,routing,state,exception,this,not,primary,can,t,move,to,replica,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,false,state,peer,recovery,source,instance,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> @Nullable     public RecoverySource recoverySource();1524684173;Returns recovery source for the given shard. Replica shards always recover from the primary {@link PeerRecoverySource}.__@return recovery source or null if shard is {@link #active()};@Nullable_    public RecoverySource recoverySource() {_        return recoverySource__    };returns,recovery,source,for,the,given,shard,replica,shards,always,recover,from,the,primary,link,peer,recovery,source,return,recovery,source,or,null,if,shard,is,link,active;nullable,public,recovery,source,recovery,source,return,recovery,source
ShardRouting -> @Nullable     public RecoverySource recoverySource();1524780945;Returns recovery source for the given shard. Replica shards always recover from the primary {@link PeerRecoverySource}.__@return recovery source or null if shard is {@link #active()};@Nullable_    public RecoverySource recoverySource() {_        return recoverySource__    };returns,recovery,source,for,the,given,shard,replica,shards,always,recover,from,the,primary,link,peer,recovery,source,return,recovery,source,or,null,if,shard,is,link,active;nullable,public,recovery,source,recovery,source,return,recovery,source
ShardRouting -> @Nullable     public RecoverySource recoverySource();1536611444;Returns recovery source for the given shard. Replica shards always recover from the primary {@link PeerRecoverySource}.__@return recovery source or null if shard is {@link #active()};@Nullable_    public RecoverySource recoverySource() {_        return recoverySource__    };returns,recovery,source,for,the,given,shard,replica,shards,always,recover,from,the,primary,link,peer,recovery,source,return,recovery,source,or,null,if,shard,is,link,active;nullable,public,recovery,source,recovery,source,return,recovery,source
ShardRouting -> @Nullable     public RecoverySource recoverySource();1540847035;Returns recovery source for the given shard. Replica shards always recover from the primary {@link PeerRecoverySource}.__@return recovery source or null if shard is {@link #active()};@Nullable_    public RecoverySource recoverySource() {_        return recoverySource__    };returns,recovery,source,for,the,given,shard,replica,shards,always,recover,from,the,primary,link,peer,recovery,source,return,recovery,source,or,null,if,shard,is,link,active;nullable,public,recovery,source,recovery,source,return,recovery,source
ShardRouting -> @Nullable     public UnassignedInfo unassignedInfo();1524684173;Additional metadata on why the shard is/was unassigned. The metadata is kept around_until the shard moves to STARTED.;@Nullable_    public UnassignedInfo unassignedInfo() {_        return unassignedInfo__    };additional,metadata,on,why,the,shard,is,was,unassigned,the,metadata,is,kept,around,until,the,shard,moves,to,started;nullable,public,unassigned,info,unassigned,info,return,unassigned,info
ShardRouting -> @Nullable     public UnassignedInfo unassignedInfo();1524780945;Additional metadata on why the shard is/was unassigned. The metadata is kept around_until the shard moves to STARTED.;@Nullable_    public UnassignedInfo unassignedInfo() {_        return unassignedInfo__    };additional,metadata,on,why,the,shard,is,was,unassigned,the,metadata,is,kept,around,until,the,shard,moves,to,started;nullable,public,unassigned,info,unassigned,info,return,unassigned,info
ShardRouting -> @Nullable     public UnassignedInfo unassignedInfo();1536611444;Additional metadata on why the shard is/was unassigned. The metadata is kept around_until the shard moves to STARTED.;@Nullable_    public UnassignedInfo unassignedInfo() {_        return unassignedInfo__    };additional,metadata,on,why,the,shard,is,was,unassigned,the,metadata,is,kept,around,until,the,shard,moves,to,started;nullable,public,unassigned,info,unassigned,info,return,unassigned,info
ShardRouting -> @Nullable     public UnassignedInfo unassignedInfo();1540847035;Additional metadata on why the shard is/was unassigned. The metadata is kept around_until the shard moves to STARTED.;@Nullable_    public UnassignedInfo unassignedInfo() {_        return unassignedInfo__    };additional,metadata,on,why,the,shard,is,was,unassigned,the,metadata,is,kept,around,until,the,shard,moves,to,started;nullable,public,unassigned,info,unassigned,info,return,unassigned,info
ShardRouting -> public ShardRouting cancelRelocation();1524684173;Cancel relocation of a shard. The shards state must be set_to <code>RELOCATING</code>.;public ShardRouting cancelRelocation() {_        assert state == ShardRoutingState.RELOCATING : this__        assert assignedToNode() : this__        assert relocatingNodeId != null : this__        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.STARTED, recoverySource,_            null, AllocationId.cancelRelocation(allocationId), UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };cancel,relocation,of,a,shard,the,shards,state,must,be,set,to,code,relocating,code;public,shard,routing,cancel,relocation,assert,state,shard,routing,state,relocating,this,assert,assigned,to,node,this,assert,relocating,node,id,null,this,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,started,recovery,source,null,allocation,id,cancel,relocation,allocation,id
ShardRouting -> public ShardRouting cancelRelocation();1524780945;Cancel relocation of a shard. The shards state must be set_to <code>RELOCATING</code>.;public ShardRouting cancelRelocation() {_        assert state == ShardRoutingState.RELOCATING : this__        assert assignedToNode() : this__        assert relocatingNodeId != null : this__        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.STARTED, recoverySource,_            null, AllocationId.cancelRelocation(allocationId), UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };cancel,relocation,of,a,shard,the,shards,state,must,be,set,to,code,relocating,code;public,shard,routing,cancel,relocation,assert,state,shard,routing,state,relocating,this,assert,assigned,to,node,this,assert,relocating,node,id,null,this,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,started,recovery,source,null,allocation,id,cancel,relocation,allocation,id
ShardRouting -> public ShardRouting cancelRelocation();1536611444;Cancel relocation of a shard. The shards state must be set_to <code>RELOCATING</code>.;public ShardRouting cancelRelocation() {_        assert state == ShardRoutingState.RELOCATING : this__        assert assignedToNode() : this__        assert relocatingNodeId != null : this__        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.STARTED, recoverySource,_            null, AllocationId.cancelRelocation(allocationId), UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };cancel,relocation,of,a,shard,the,shards,state,must,be,set,to,code,relocating,code;public,shard,routing,cancel,relocation,assert,state,shard,routing,state,relocating,this,assert,assigned,to,node,this,assert,relocating,node,id,null,this,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,started,recovery,source,null,allocation,id,cancel,relocation,allocation,id
ShardRouting -> public ShardRouting cancelRelocation();1540847035;Cancel relocation of a shard. The shards state must be set_to <code>RELOCATING</code>.;public ShardRouting cancelRelocation() {_        assert state == ShardRoutingState.RELOCATING : this__        assert assignedToNode() : this__        assert relocatingNodeId != null : this__        return new ShardRouting(shardId, currentNodeId, null, primary, ShardRoutingState.STARTED, recoverySource,_            null, AllocationId.cancelRelocation(allocationId), UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };cancel,relocation,of,a,shard,the,shards,state,must,be,set,to,code,relocating,code;public,shard,routing,cancel,relocation,assert,state,shard,routing,state,relocating,this,assert,assigned,to,node,this,assert,relocating,node,id,null,this,return,new,shard,routing,shard,id,current,node,id,null,primary,shard,routing,state,started,recovery,source,null,allocation,id,cancel,relocation,allocation,id
ShardRouting -> public boolean equalsIgnoringMetaData(ShardRouting other);1524684173;returns true if the current routing is identical to the other routing in all but meta fields, i.e., unassigned info;public boolean equalsIgnoringMetaData(ShardRouting other) {_        if (primary != other.primary) {_            return false__        }_        if (shardId != null ? !shardId.equals(other.shardId) : other.shardId != null) {_            return false__        }_        if (currentNodeId != null ? !currentNodeId.equals(other.currentNodeId) : other.currentNodeId != null) {_            return false__        }_        if (relocatingNodeId != null ? !relocatingNodeId.equals(other.relocatingNodeId) : other.relocatingNodeId != null) {_            return false__        }_        if (allocationId != null ? !allocationId.equals(other.allocationId) : other.allocationId != null) {_            return false__        }_        if (state != other.state) {_            return false__        }_        if (recoverySource != null ? !recoverySource.equals(other.recoverySource) : other.recoverySource != null) {_            return false__        }_        return true__    };returns,true,if,the,current,routing,is,identical,to,the,other,routing,in,all,but,meta,fields,i,e,unassigned,info;public,boolean,equals,ignoring,meta,data,shard,routing,other,if,primary,other,primary,return,false,if,shard,id,null,shard,id,equals,other,shard,id,other,shard,id,null,return,false,if,current,node,id,null,current,node,id,equals,other,current,node,id,other,current,node,id,null,return,false,if,relocating,node,id,null,relocating,node,id,equals,other,relocating,node,id,other,relocating,node,id,null,return,false,if,allocation,id,null,allocation,id,equals,other,allocation,id,other,allocation,id,null,return,false,if,state,other,state,return,false,if,recovery,source,null,recovery,source,equals,other,recovery,source,other,recovery,source,null,return,false,return,true
ShardRouting -> public boolean equalsIgnoringMetaData(ShardRouting other);1524780945;returns true if the current routing is identical to the other routing in all but meta fields, i.e., unassigned info;public boolean equalsIgnoringMetaData(ShardRouting other) {_        if (primary != other.primary) {_            return false__        }_        if (shardId != null ? !shardId.equals(other.shardId) : other.shardId != null) {_            return false__        }_        if (currentNodeId != null ? !currentNodeId.equals(other.currentNodeId) : other.currentNodeId != null) {_            return false__        }_        if (relocatingNodeId != null ? !relocatingNodeId.equals(other.relocatingNodeId) : other.relocatingNodeId != null) {_            return false__        }_        if (allocationId != null ? !allocationId.equals(other.allocationId) : other.allocationId != null) {_            return false__        }_        if (state != other.state) {_            return false__        }_        if (recoverySource != null ? !recoverySource.equals(other.recoverySource) : other.recoverySource != null) {_            return false__        }_        return true__    };returns,true,if,the,current,routing,is,identical,to,the,other,routing,in,all,but,meta,fields,i,e,unassigned,info;public,boolean,equals,ignoring,meta,data,shard,routing,other,if,primary,other,primary,return,false,if,shard,id,null,shard,id,equals,other,shard,id,other,shard,id,null,return,false,if,current,node,id,null,current,node,id,equals,other,current,node,id,other,current,node,id,null,return,false,if,relocating,node,id,null,relocating,node,id,equals,other,relocating,node,id,other,relocating,node,id,null,return,false,if,allocation,id,null,allocation,id,equals,other,allocation,id,other,allocation,id,null,return,false,if,state,other,state,return,false,if,recovery,source,null,recovery,source,equals,other,recovery,source,other,recovery,source,null,return,false,return,true
ShardRouting -> public boolean equalsIgnoringMetaData(ShardRouting other);1536611444;returns true if the current routing is identical to the other routing in all but meta fields, i.e., unassigned info;public boolean equalsIgnoringMetaData(ShardRouting other) {_        if (primary != other.primary) {_            return false__        }_        if (shardId != null ? !shardId.equals(other.shardId) : other.shardId != null) {_            return false__        }_        if (currentNodeId != null ? !currentNodeId.equals(other.currentNodeId) : other.currentNodeId != null) {_            return false__        }_        if (relocatingNodeId != null ? !relocatingNodeId.equals(other.relocatingNodeId) : other.relocatingNodeId != null) {_            return false__        }_        if (allocationId != null ? !allocationId.equals(other.allocationId) : other.allocationId != null) {_            return false__        }_        if (state != other.state) {_            return false__        }_        if (recoverySource != null ? !recoverySource.equals(other.recoverySource) : other.recoverySource != null) {_            return false__        }_        return true__    };returns,true,if,the,current,routing,is,identical,to,the,other,routing,in,all,but,meta,fields,i,e,unassigned,info;public,boolean,equals,ignoring,meta,data,shard,routing,other,if,primary,other,primary,return,false,if,shard,id,null,shard,id,equals,other,shard,id,other,shard,id,null,return,false,if,current,node,id,null,current,node,id,equals,other,current,node,id,other,current,node,id,null,return,false,if,relocating,node,id,null,relocating,node,id,equals,other,relocating,node,id,other,relocating,node,id,null,return,false,if,allocation,id,null,allocation,id,equals,other,allocation,id,other,allocation,id,null,return,false,if,state,other,state,return,false,if,recovery,source,null,recovery,source,equals,other,recovery,source,other,recovery,source,null,return,false,return,true
ShardRouting -> public boolean equalsIgnoringMetaData(ShardRouting other);1540847035;returns true if the current routing is identical to the other routing in all but meta fields, i.e., unassigned info;public boolean equalsIgnoringMetaData(ShardRouting other) {_        if (primary != other.primary) {_            return false__        }_        if (shardId != null ? !shardId.equals(other.shardId) : other.shardId != null) {_            return false__        }_        if (currentNodeId != null ? !currentNodeId.equals(other.currentNodeId) : other.currentNodeId != null) {_            return false__        }_        if (relocatingNodeId != null ? !relocatingNodeId.equals(other.relocatingNodeId) : other.relocatingNodeId != null) {_            return false__        }_        if (allocationId != null ? !allocationId.equals(other.allocationId) : other.allocationId != null) {_            return false__        }_        if (state != other.state) {_            return false__        }_        if (recoverySource != null ? !recoverySource.equals(other.recoverySource) : other.recoverySource != null) {_            return false__        }_        return true__    };returns,true,if,the,current,routing,is,identical,to,the,other,routing,in,all,but,meta,fields,i,e,unassigned,info;public,boolean,equals,ignoring,meta,data,shard,routing,other,if,primary,other,primary,return,false,if,shard,id,null,shard,id,equals,other,shard,id,other,shard,id,null,return,false,if,current,node,id,null,current,node,id,equals,other,current,node,id,other,current,node,id,null,return,false,if,relocating,node,id,null,relocating,node,id,equals,other,relocating,node,id,other,relocating,node,id,null,return,false,if,allocation,id,null,allocation,id,equals,other,allocation,id,other,allocation,id,null,return,false,if,state,other,state,return,false,if,recovery,source,null,recovery,source,equals,other,recovery,source,other,recovery,source,null,return,false,return,true
ShardRouting -> public boolean primary();1524684173;Returns <code>true</code> iff this shard is a primary.;public boolean primary() {_        return this.primary__    };returns,code,true,code,iff,this,shard,is,a,primary;public,boolean,primary,return,this,primary
ShardRouting -> public boolean primary();1524780945;Returns <code>true</code> iff this shard is a primary.;public boolean primary() {_        return this.primary__    };returns,code,true,code,iff,this,shard,is,a,primary;public,boolean,primary,return,this,primary
ShardRouting -> public boolean primary();1536611444;Returns <code>true</code> iff this shard is a primary.;public boolean primary() {_        return this.primary__    };returns,code,true,code,iff,this,shard,is,a,primary;public,boolean,primary,return,this,primary
ShardRouting -> public boolean primary();1540847035;Returns <code>true</code> iff this shard is a primary.;public boolean primary() {_        return this.primary__    };returns,code,true,code,iff,this,shard,is,a,primary;public,boolean,primary,return,this,primary
ShardRouting -> public ShardRouting moveToUnassigned(UnassignedInfo unassignedInfo);1524684173;Moves the shard to unassigned state.;public ShardRouting moveToUnassigned(UnassignedInfo unassignedInfo) {_        assert state != ShardRoutingState.UNASSIGNED : this__        final RecoverySource recoverySource__        if (active()) {_            if (primary()) {_                recoverySource = StoreRecoverySource.EXISTING_STORE_INSTANCE__            } else {_                recoverySource = PeerRecoverySource.INSTANCE__            }_        } else {_            recoverySource = recoverySource()__        }_        return new ShardRouting(shardId, null, null, primary, ShardRoutingState.UNASSIGNED, recoverySource,_            unassignedInfo, null, UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };moves,the,shard,to,unassigned,state;public,shard,routing,move,to,unassigned,unassigned,info,unassigned,info,assert,state,shard,routing,state,unassigned,this,final,recovery,source,recovery,source,if,active,if,primary,recovery,source,store,recovery,source,else,recovery,source,peer,recovery,source,instance,else,recovery,source,recovery,source,return,new,shard,routing,shard,id,null,null,primary,shard,routing,state,unassigned,recovery,source,unassigned,info,null
ShardRouting -> public ShardRouting moveToUnassigned(UnassignedInfo unassignedInfo);1524780945;Moves the shard to unassigned state.;public ShardRouting moveToUnassigned(UnassignedInfo unassignedInfo) {_        assert state != ShardRoutingState.UNASSIGNED : this__        final RecoverySource recoverySource__        if (active()) {_            if (primary()) {_                recoverySource = StoreRecoverySource.EXISTING_STORE_INSTANCE__            } else {_                recoverySource = PeerRecoverySource.INSTANCE__            }_        } else {_            recoverySource = recoverySource()__        }_        return new ShardRouting(shardId, null, null, primary, ShardRoutingState.UNASSIGNED, recoverySource,_            unassignedInfo, null, UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };moves,the,shard,to,unassigned,state;public,shard,routing,move,to,unassigned,unassigned,info,unassigned,info,assert,state,shard,routing,state,unassigned,this,final,recovery,source,recovery,source,if,active,if,primary,recovery,source,store,recovery,source,else,recovery,source,peer,recovery,source,instance,else,recovery,source,recovery,source,return,new,shard,routing,shard,id,null,null,primary,shard,routing,state,unassigned,recovery,source,unassigned,info,null
ShardRouting -> public ShardRouting moveToUnassigned(UnassignedInfo unassignedInfo);1536611444;Moves the shard to unassigned state.;public ShardRouting moveToUnassigned(UnassignedInfo unassignedInfo) {_        assert state != ShardRoutingState.UNASSIGNED : this__        final RecoverySource recoverySource__        if (active()) {_            if (primary()) {_                recoverySource = ExistingStoreRecoverySource.INSTANCE__            } else {_                recoverySource = PeerRecoverySource.INSTANCE__            }_        } else {_            recoverySource = recoverySource()__        }_        return new ShardRouting(shardId, null, null, primary, ShardRoutingState.UNASSIGNED, recoverySource,_            unassignedInfo, null, UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };moves,the,shard,to,unassigned,state;public,shard,routing,move,to,unassigned,unassigned,info,unassigned,info,assert,state,shard,routing,state,unassigned,this,final,recovery,source,recovery,source,if,active,if,primary,recovery,source,existing,store,recovery,source,instance,else,recovery,source,peer,recovery,source,instance,else,recovery,source,recovery,source,return,new,shard,routing,shard,id,null,null,primary,shard,routing,state,unassigned,recovery,source,unassigned,info,null
ShardRouting -> public ShardRouting moveToUnassigned(UnassignedInfo unassignedInfo);1540847035;Moves the shard to unassigned state.;public ShardRouting moveToUnassigned(UnassignedInfo unassignedInfo) {_        assert state != ShardRoutingState.UNASSIGNED : this__        final RecoverySource recoverySource__        if (active()) {_            if (primary()) {_                recoverySource = ExistingStoreRecoverySource.INSTANCE__            } else {_                recoverySource = PeerRecoverySource.INSTANCE__            }_        } else {_            recoverySource = recoverySource()__        }_        return new ShardRouting(shardId, null, null, primary, ShardRoutingState.UNASSIGNED, recoverySource,_            unassignedInfo, null, UNAVAILABLE_EXPECTED_SHARD_SIZE)__    };moves,the,shard,to,unassigned,state;public,shard,routing,move,to,unassigned,unassigned,info,unassigned,info,assert,state,shard,routing,state,unassigned,this,final,recovery,source,recovery,source,if,active,if,primary,recovery,source,existing,store,recovery,source,instance,else,recovery,source,peer,recovery,source,instance,else,recovery,source,recovery,source,return,new,shard,routing,shard,id,null,null,primary,shard,routing,state,unassigned,recovery,source,unassigned,info,null
ShardRouting -> public void writeToThin(StreamOutput out) throws IOException;1524684173;Writes shard information to {@link StreamOutput} without writing index name and shard id__@param out {@link StreamOutput} to write shard information to_@throws IOException if something happens during write;public void writeToThin(StreamOutput out) throws IOException {_        out.writeOptionalString(currentNodeId)__        out.writeOptionalString(relocatingNodeId)__        out.writeBoolean(primary)__        out.writeByte(state.value())__        if (state == ShardRoutingState.UNASSIGNED || state == ShardRoutingState.INITIALIZING) {_            recoverySource.writeTo(out)__        }_        out.writeOptionalWriteable(unassignedInfo)__        out.writeOptionalWriteable(allocationId)__        if (state == ShardRoutingState.RELOCATING || state == ShardRoutingState.INITIALIZING) {_            out.writeLong(expectedShardSize)__        }_    };writes,shard,information,to,link,stream,output,without,writing,index,name,and,shard,id,param,out,link,stream,output,to,write,shard,information,to,throws,ioexception,if,something,happens,during,write;public,void,write,to,thin,stream,output,out,throws,ioexception,out,write,optional,string,current,node,id,out,write,optional,string,relocating,node,id,out,write,boolean,primary,out,write,byte,state,value,if,state,shard,routing,state,unassigned,state,shard,routing,state,initializing,recovery,source,write,to,out,out,write,optional,writeable,unassigned,info,out,write,optional,writeable,allocation,id,if,state,shard,routing,state,relocating,state,shard,routing,state,initializing,out,write,long,expected,shard,size
ShardRouting -> public void writeToThin(StreamOutput out) throws IOException;1524780945;Writes shard information to {@link StreamOutput} without writing index name and shard id__@param out {@link StreamOutput} to write shard information to_@throws IOException if something happens during write;public void writeToThin(StreamOutput out) throws IOException {_        out.writeOptionalString(currentNodeId)__        out.writeOptionalString(relocatingNodeId)__        out.writeBoolean(primary)__        out.writeByte(state.value())__        if (state == ShardRoutingState.UNASSIGNED || state == ShardRoutingState.INITIALIZING) {_            recoverySource.writeTo(out)__        }_        out.writeOptionalWriteable(unassignedInfo)__        out.writeOptionalWriteable(allocationId)__        if (state == ShardRoutingState.RELOCATING || state == ShardRoutingState.INITIALIZING) {_            out.writeLong(expectedShardSize)__        }_    };writes,shard,information,to,link,stream,output,without,writing,index,name,and,shard,id,param,out,link,stream,output,to,write,shard,information,to,throws,ioexception,if,something,happens,during,write;public,void,write,to,thin,stream,output,out,throws,ioexception,out,write,optional,string,current,node,id,out,write,optional,string,relocating,node,id,out,write,boolean,primary,out,write,byte,state,value,if,state,shard,routing,state,unassigned,state,shard,routing,state,initializing,recovery,source,write,to,out,out,write,optional,writeable,unassigned,info,out,write,optional,writeable,allocation,id,if,state,shard,routing,state,relocating,state,shard,routing,state,initializing,out,write,long,expected,shard,size
ShardRouting -> public void writeToThin(StreamOutput out) throws IOException;1536611444;Writes shard information to {@link StreamOutput} without writing index name and shard id__@param out {@link StreamOutput} to write shard information to_@throws IOException if something happens during write;public void writeToThin(StreamOutput out) throws IOException {_        out.writeOptionalString(currentNodeId)__        out.writeOptionalString(relocatingNodeId)__        out.writeBoolean(primary)__        out.writeByte(state.value())__        if (state == ShardRoutingState.UNASSIGNED || state == ShardRoutingState.INITIALIZING) {_            recoverySource.writeTo(out)__        }_        out.writeOptionalWriteable(unassignedInfo)__        out.writeOptionalWriteable(allocationId)__        if (state == ShardRoutingState.RELOCATING || state == ShardRoutingState.INITIALIZING) {_            out.writeLong(expectedShardSize)__        }_    };writes,shard,information,to,link,stream,output,without,writing,index,name,and,shard,id,param,out,link,stream,output,to,write,shard,information,to,throws,ioexception,if,something,happens,during,write;public,void,write,to,thin,stream,output,out,throws,ioexception,out,write,optional,string,current,node,id,out,write,optional,string,relocating,node,id,out,write,boolean,primary,out,write,byte,state,value,if,state,shard,routing,state,unassigned,state,shard,routing,state,initializing,recovery,source,write,to,out,out,write,optional,writeable,unassigned,info,out,write,optional,writeable,allocation,id,if,state,shard,routing,state,relocating,state,shard,routing,state,initializing,out,write,long,expected,shard,size
ShardRouting -> public void writeToThin(StreamOutput out) throws IOException;1540847035;Writes shard information to {@link StreamOutput} without writing index name and shard id__@param out {@link StreamOutput} to write shard information to_@throws IOException if something happens during write;public void writeToThin(StreamOutput out) throws IOException {_        out.writeOptionalString(currentNodeId)__        out.writeOptionalString(relocatingNodeId)__        out.writeBoolean(primary)__        out.writeByte(state.value())__        if (state == ShardRoutingState.UNASSIGNED || state == ShardRoutingState.INITIALIZING) {_            recoverySource.writeTo(out)__        }_        out.writeOptionalWriteable(unassignedInfo)__        out.writeOptionalWriteable(allocationId)__        if (state == ShardRoutingState.RELOCATING || state == ShardRoutingState.INITIALIZING) {_            out.writeLong(expectedShardSize)__        }_    };writes,shard,information,to,link,stream,output,without,writing,index,name,and,shard,id,param,out,link,stream,output,to,write,shard,information,to,throws,ioexception,if,something,happens,during,write;public,void,write,to,thin,stream,output,out,throws,ioexception,out,write,optional,string,current,node,id,out,write,optional,string,relocating,node,id,out,write,boolean,primary,out,write,byte,state,value,if,state,shard,routing,state,unassigned,state,shard,routing,state,initializing,recovery,source,write,to,out,out,write,optional,writeable,unassigned,info,out,write,optional,writeable,allocation,id,if,state,shard,routing,state,relocating,state,shard,routing,state,initializing,out,write,long,expected,shard,size
ShardRouting -> public ShardRouting getTargetRelocatingShard();1524684173;Returns a shard routing representing the target shard._The target shard routing will be the INITIALIZING state and have relocatingNodeId set to the_source node.;public ShardRouting getTargetRelocatingShard() {_        assert relocating()__        return targetRelocatingShard__    };returns,a,shard,routing,representing,the,target,shard,the,target,shard,routing,will,be,the,initializing,state,and,have,relocating,node,id,set,to,the,source,node;public,shard,routing,get,target,relocating,shard,assert,relocating,return,target,relocating,shard
ShardRouting -> public ShardRouting getTargetRelocatingShard();1524780945;Returns a shard routing representing the target shard._The target shard routing will be the INITIALIZING state and have relocatingNodeId set to the_source node.;public ShardRouting getTargetRelocatingShard() {_        assert relocating()__        return targetRelocatingShard__    };returns,a,shard,routing,representing,the,target,shard,the,target,shard,routing,will,be,the,initializing,state,and,have,relocating,node,id,set,to,the,source,node;public,shard,routing,get,target,relocating,shard,assert,relocating,return,target,relocating,shard
ShardRouting -> public ShardRouting getTargetRelocatingShard();1536611444;Returns a shard routing representing the target shard._The target shard routing will be the INITIALIZING state and have relocatingNodeId set to the_source node.;public ShardRouting getTargetRelocatingShard() {_        assert relocating()__        return targetRelocatingShard__    };returns,a,shard,routing,representing,the,target,shard,the,target,shard,routing,will,be,the,initializing,state,and,have,relocating,node,id,set,to,the,source,node;public,shard,routing,get,target,relocating,shard,assert,relocating,return,target,relocating,shard
ShardRouting -> public ShardRouting getTargetRelocatingShard();1540847035;Returns a shard routing representing the target shard._The target shard routing will be the INITIALIZING state and have relocatingNodeId set to the_source node.;public ShardRouting getTargetRelocatingShard() {_        assert relocating()__        return targetRelocatingShard__    };returns,a,shard,routing,representing,the,target,shard,the,target,shard,routing,will,be,the,initializing,state,and,have,relocating,node,id,set,to,the,source,node;public,shard,routing,get,target,relocating,shard,assert,relocating,return,target,relocating,shard
ShardRouting -> public String getIndexName();1524684173;The index name.;public String getIndexName() {_        return shardId.getIndexName()__    };the,index,name;public,string,get,index,name,return,shard,id,get,index,name
ShardRouting -> public String getIndexName();1524780945;The index name.;public String getIndexName() {_        return shardId.getIndexName()__    };the,index,name;public,string,get,index,name,return,shard,id,get,index,name
ShardRouting -> public String getIndexName();1536611444;The index name.;public String getIndexName() {_        return shardId.getIndexName()__    };the,index,name;public,string,get,index,name,return,shard,id,get,index,name
ShardRouting -> public String getIndexName();1540847035;The index name.;public String getIndexName() {_        return shardId.getIndexName()__    };the,index,name;public,string,get,index,name,return,shard,id,get,index,name
ShardRouting -> @Nullable     public AllocationId allocationId();1524684173;An id that uniquely identifies an allocation.;@Nullable_    public AllocationId allocationId() {_        return this.allocationId__    };an,id,that,uniquely,identifies,an,allocation;nullable,public,allocation,id,allocation,id,return,this,allocation,id
ShardRouting -> @Nullable     public AllocationId allocationId();1524780945;An id that uniquely identifies an allocation.;@Nullable_    public AllocationId allocationId() {_        return this.allocationId__    };an,id,that,uniquely,identifies,an,allocation;nullable,public,allocation,id,allocation,id,return,this,allocation,id
ShardRouting -> @Nullable     public AllocationId allocationId();1536611444;An id that uniquely identifies an allocation.;@Nullable_    public AllocationId allocationId() {_        return this.allocationId__    };an,id,that,uniquely,identifies,an,allocation;nullable,public,allocation,id,allocation,id,return,this,allocation,id
ShardRouting -> @Nullable     public AllocationId allocationId();1540847035;An id that uniquely identifies an allocation.;@Nullable_    public AllocationId allocationId() {_        return this.allocationId__    };an,id,that,uniquely,identifies,an,allocation;nullable,public,allocation,id,allocation,id,return,this,allocation,id
ShardRouting -> public ShardRouting moveActiveReplicaToPrimary();1524684173;Make the active shard primary unless it's not primary__@throws IllegalShardRoutingStateException if shard is already a primary;public ShardRouting moveActiveReplicaToPrimary() {_        assert active(): "expected an active shard " + this__        if (primary) {_            throw new IllegalShardRoutingStateException(this, "Already primary, can't move to primary")__        }_        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, true, state, recoverySource, unassignedInfo, allocationId,_            expectedShardSize)__    };make,the,active,shard,primary,unless,it,s,not,primary,throws,illegal,shard,routing,state,exception,if,shard,is,already,a,primary;public,shard,routing,move,active,replica,to,primary,assert,active,expected,an,active,shard,this,if,primary,throw,new,illegal,shard,routing,state,exception,this,already,primary,can,t,move,to,primary,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,true,state,recovery,source,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting moveActiveReplicaToPrimary();1524780945;Make the active shard primary unless it's not primary__@throws IllegalShardRoutingStateException if shard is already a primary;public ShardRouting moveActiveReplicaToPrimary() {_        assert active(): "expected an active shard " + this__        if (primary) {_            throw new IllegalShardRoutingStateException(this, "Already primary, can't move to primary")__        }_        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, true, state, recoverySource, unassignedInfo, allocationId,_            expectedShardSize)__    };make,the,active,shard,primary,unless,it,s,not,primary,throws,illegal,shard,routing,state,exception,if,shard,is,already,a,primary;public,shard,routing,move,active,replica,to,primary,assert,active,expected,an,active,shard,this,if,primary,throw,new,illegal,shard,routing,state,exception,this,already,primary,can,t,move,to,primary,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,true,state,recovery,source,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting moveActiveReplicaToPrimary();1536611444;Make the active shard primary unless it's not primary__@throws IllegalShardRoutingStateException if shard is already a primary;public ShardRouting moveActiveReplicaToPrimary() {_        assert active(): "expected an active shard " + this__        if (primary) {_            throw new IllegalShardRoutingStateException(this, "Already primary, can't move to primary")__        }_        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, true, state, recoverySource, unassignedInfo, allocationId,_            expectedShardSize)__    };make,the,active,shard,primary,unless,it,s,not,primary,throws,illegal,shard,routing,state,exception,if,shard,is,already,a,primary;public,shard,routing,move,active,replica,to,primary,assert,active,expected,an,active,shard,this,if,primary,throw,new,illegal,shard,routing,state,exception,this,already,primary,can,t,move,to,primary,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,true,state,recovery,source,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting moveActiveReplicaToPrimary();1540847035;Make the active shard primary unless it's not primary__@throws IllegalShardRoutingStateException if shard is already a primary;public ShardRouting moveActiveReplicaToPrimary() {_        assert active(): "expected an active shard " + this__        if (primary) {_            throw new IllegalShardRoutingStateException(this, "Already primary, can't move to primary")__        }_        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, true, state, recoverySource, unassignedInfo, allocationId,_            expectedShardSize)__    };make,the,active,shard,primary,unless,it,s,not,primary,throws,illegal,shard,routing,state,exception,if,shard,is,already,a,primary;public,shard,routing,move,active,replica,to,primary,assert,active,expected,an,active,shard,this,if,primary,throw,new,illegal,shard,routing,state,exception,this,already,primary,can,t,move,to,primary,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,true,state,recovery,source,unassigned,info,allocation,id,expected,shard,size
ShardRouting -> public long getExpectedShardSize();1524684173;Returns the expected shard size for {@link ShardRoutingState#RELOCATING} and {@link ShardRoutingState#INITIALIZING}_shards. If it's size is not available {@value #UNAVAILABLE_EXPECTED_SHARD_SIZE} will be returned.;public long getExpectedShardSize() {_        return expectedShardSize__    };returns,the,expected,shard,size,for,link,shard,routing,state,relocating,and,link,shard,routing,state,initializing,shards,if,it,s,size,is,not,available,value,will,be,returned;public,long,get,expected,shard,size,return,expected,shard,size
ShardRouting -> public long getExpectedShardSize();1524780945;Returns the expected shard size for {@link ShardRoutingState#RELOCATING} and {@link ShardRoutingState#INITIALIZING}_shards. If it's size is not available {@value #UNAVAILABLE_EXPECTED_SHARD_SIZE} will be returned.;public long getExpectedShardSize() {_        return expectedShardSize__    };returns,the,expected,shard,size,for,link,shard,routing,state,relocating,and,link,shard,routing,state,initializing,shards,if,it,s,size,is,not,available,value,will,be,returned;public,long,get,expected,shard,size,return,expected,shard,size
ShardRouting -> public long getExpectedShardSize();1536611444;Returns the expected shard size for {@link ShardRoutingState#RELOCATING} and {@link ShardRoutingState#INITIALIZING}_shards. If it's size is not available {@value #UNAVAILABLE_EXPECTED_SHARD_SIZE} will be returned.;public long getExpectedShardSize() {_        return expectedShardSize__    };returns,the,expected,shard,size,for,link,shard,routing,state,relocating,and,link,shard,routing,state,initializing,shards,if,it,s,size,is,not,available,value,will,be,returned;public,long,get,expected,shard,size,return,expected,shard,size
ShardRouting -> public long getExpectedShardSize();1540847035;Returns the expected shard size for {@link ShardRoutingState#RELOCATING} and {@link ShardRoutingState#INITIALIZING}_shards. If it's size is not available {@value #UNAVAILABLE_EXPECTED_SHARD_SIZE} will be returned.;public long getExpectedShardSize() {_        return expectedShardSize__    };returns,the,expected,shard,size,for,link,shard,routing,state,relocating,and,link,shard,routing,state,initializing,shards,if,it,s,size,is,not,available,value,will,be,returned;public,long,get,expected,shard,size,return,expected,shard,size
ShardRouting -> public ShardRouting relocate(String relocatingNodeId, long expectedShardSize);1524684173;Relocate the shard to another node.__@param relocatingNodeId id of the node to relocate the shard;public ShardRouting relocate(String relocatingNodeId, long expectedShardSize) {_        assert state == ShardRoutingState.STARTED : "current shard has to be started in order to be relocated " + this__        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, primary, ShardRoutingState.RELOCATING, recoverySource,_            null, AllocationId.newRelocation(allocationId), expectedShardSize)__    };relocate,the,shard,to,another,node,param,relocating,node,id,id,of,the,node,to,relocate,the,shard;public,shard,routing,relocate,string,relocating,node,id,long,expected,shard,size,assert,state,shard,routing,state,started,current,shard,has,to,be,started,in,order,to,be,relocated,this,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,primary,shard,routing,state,relocating,recovery,source,null,allocation,id,new,relocation,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting relocate(String relocatingNodeId, long expectedShardSize);1524780945;Relocate the shard to another node.__@param relocatingNodeId id of the node to relocate the shard;public ShardRouting relocate(String relocatingNodeId, long expectedShardSize) {_        assert state == ShardRoutingState.STARTED : "current shard has to be started in order to be relocated " + this__        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, primary, ShardRoutingState.RELOCATING, recoverySource,_            null, AllocationId.newRelocation(allocationId), expectedShardSize)__    };relocate,the,shard,to,another,node,param,relocating,node,id,id,of,the,node,to,relocate,the,shard;public,shard,routing,relocate,string,relocating,node,id,long,expected,shard,size,assert,state,shard,routing,state,started,current,shard,has,to,be,started,in,order,to,be,relocated,this,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,primary,shard,routing,state,relocating,recovery,source,null,allocation,id,new,relocation,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting relocate(String relocatingNodeId, long expectedShardSize);1536611444;Relocate the shard to another node.__@param relocatingNodeId id of the node to relocate the shard;public ShardRouting relocate(String relocatingNodeId, long expectedShardSize) {_        assert state == ShardRoutingState.STARTED : "current shard has to be started in order to be relocated " + this__        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, primary, ShardRoutingState.RELOCATING, recoverySource,_            null, AllocationId.newRelocation(allocationId), expectedShardSize)__    };relocate,the,shard,to,another,node,param,relocating,node,id,id,of,the,node,to,relocate,the,shard;public,shard,routing,relocate,string,relocating,node,id,long,expected,shard,size,assert,state,shard,routing,state,started,current,shard,has,to,be,started,in,order,to,be,relocated,this,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,primary,shard,routing,state,relocating,recovery,source,null,allocation,id,new,relocation,allocation,id,expected,shard,size
ShardRouting -> public ShardRouting relocate(String relocatingNodeId, long expectedShardSize);1540847035;Relocate the shard to another node.__@param relocatingNodeId id of the node to relocate the shard;public ShardRouting relocate(String relocatingNodeId, long expectedShardSize) {_        assert state == ShardRoutingState.STARTED : "current shard has to be started in order to be relocated " + this__        return new ShardRouting(shardId, currentNodeId, relocatingNodeId, primary, ShardRoutingState.RELOCATING, recoverySource,_            null, AllocationId.newRelocation(allocationId), expectedShardSize)__    };relocate,the,shard,to,another,node,param,relocating,node,id,id,of,the,node,to,relocate,the,shard;public,shard,routing,relocate,string,relocating,node,id,long,expected,shard,size,assert,state,shard,routing,state,started,current,shard,has,to,be,started,in,order,to,be,relocated,this,return,new,shard,routing,shard,id,current,node,id,relocating,node,id,primary,shard,routing,state,relocating,recovery,source,null,allocation,id,new,relocation,allocation,id,expected,shard,size
ShardRouting -> public ShardId shardId();1524684173;The shard id.;public ShardId shardId() {_        return shardId__    };the,shard,id;public,shard,id,shard,id,return,shard,id
ShardRouting -> public ShardId shardId();1524780945;The shard id.;public ShardId shardId() {_        return shardId__    };the,shard,id;public,shard,id,shard,id,return,shard,id
ShardRouting -> public ShardId shardId();1536611444;The shard id.;public ShardId shardId() {_        return shardId__    };the,shard,id;public,shard,id,shard,id,return,shard,id
ShardRouting -> public ShardId shardId();1540847035;The shard id.;public ShardId shardId() {_        return shardId__    };the,shard,id;public,shard,id,shard,id,return,shard,id
ShardRouting -> public String relocatingNodeId();1524684173;The relocating node id the shard is either relocating to or relocating from.;public String relocatingNodeId() {_        return this.relocatingNodeId__    };the,relocating,node,id,the,shard,is,either,relocating,to,or,relocating,from;public,string,relocating,node,id,return,this,relocating,node,id
ShardRouting -> public String relocatingNodeId();1524780945;The relocating node id the shard is either relocating to or relocating from.;public String relocatingNodeId() {_        return this.relocatingNodeId__    };the,relocating,node,id,the,shard,is,either,relocating,to,or,relocating,from;public,string,relocating,node,id,return,this,relocating,node,id
ShardRouting -> public String relocatingNodeId();1536611444;The relocating node id the shard is either relocating to or relocating from.;public String relocatingNodeId() {_        return this.relocatingNodeId__    };the,relocating,node,id,the,shard,is,either,relocating,to,or,relocating,from;public,string,relocating,node,id,return,this,relocating,node,id
ShardRouting -> public String relocatingNodeId();1540847035;The relocating node id the shard is either relocating to or relocating from.;public String relocatingNodeId() {_        return this.relocatingNodeId__    };the,relocating,node,id,the,shard,is,either,relocating,to,or,relocating,from;public,string,relocating,node,id,return,this,relocating,node,id
ShardRouting -> public boolean assignedToNode();1524684173;Returns <code>true</code> iff this shard is assigned to a node ie. not_{@link ShardRoutingState#UNASSIGNED unassigned}. Otherwise <code>false</code>;public boolean assignedToNode() {_        return currentNodeId != null__    };returns,code,true,code,iff,this,shard,is,assigned,to,a,node,ie,not,link,shard,routing,state,unassigned,unassigned,otherwise,code,false,code;public,boolean,assigned,to,node,return,current,node,id,null
ShardRouting -> public boolean assignedToNode();1524780945;Returns <code>true</code> iff this shard is assigned to a node ie. not_{@link ShardRoutingState#UNASSIGNED unassigned}. Otherwise <code>false</code>;public boolean assignedToNode() {_        return currentNodeId != null__    };returns,code,true,code,iff,this,shard,is,assigned,to,a,node,ie,not,link,shard,routing,state,unassigned,unassigned,otherwise,code,false,code;public,boolean,assigned,to,node,return,current,node,id,null
ShardRouting -> public boolean assignedToNode();1536611444;Returns <code>true</code> iff this shard is assigned to a node ie. not_{@link ShardRoutingState#UNASSIGNED unassigned}. Otherwise <code>false</code>;public boolean assignedToNode() {_        return currentNodeId != null__    };returns,code,true,code,iff,this,shard,is,assigned,to,a,node,ie,not,link,shard,routing,state,unassigned,unassigned,otherwise,code,false,code;public,boolean,assigned,to,node,return,current,node,id,null
ShardRouting -> public boolean assignedToNode();1540847035;Returns <code>true</code> iff this shard is assigned to a node ie. not_{@link ShardRoutingState#UNASSIGNED unassigned}. Otherwise <code>false</code>;public boolean assignedToNode() {_        return currentNodeId != null__    };returns,code,true,code,iff,this,shard,is,assigned,to,a,node,ie,not,link,shard,routing,state,unassigned,unassigned,otherwise,code,false,code;public,boolean,assigned,to,node,return,current,node,id,null
ShardRouting -> public boolean unassigned();1524684173;The shard is unassigned (not allocated to any node).;public boolean unassigned() {_        return state == ShardRoutingState.UNASSIGNED__    };the,shard,is,unassigned,not,allocated,to,any,node;public,boolean,unassigned,return,state,shard,routing,state,unassigned
ShardRouting -> public boolean unassigned();1524780945;The shard is unassigned (not allocated to any node).;public boolean unassigned() {_        return state == ShardRoutingState.UNASSIGNED__    };the,shard,is,unassigned,not,allocated,to,any,node;public,boolean,unassigned,return,state,shard,routing,state,unassigned
ShardRouting -> public boolean unassigned();1536611444;The shard is unassigned (not allocated to any node).;public boolean unassigned() {_        return state == ShardRoutingState.UNASSIGNED__    };the,shard,is,unassigned,not,allocated,to,any,node;public,boolean,unassigned,return,state,shard,routing,state,unassigned
ShardRouting -> public boolean unassigned();1540847035;The shard is unassigned (not allocated to any node).;public boolean unassigned() {_        return state == ShardRoutingState.UNASSIGNED__    };the,shard,is,unassigned,not,allocated,to,any,node;public,boolean,unassigned,return,state,shard,routing,state,unassigned
