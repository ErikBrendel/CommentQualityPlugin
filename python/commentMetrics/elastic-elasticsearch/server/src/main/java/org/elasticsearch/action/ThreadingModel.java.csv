commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public byte id() {     return this.id. }
true;public;0;3;/**  * {@code true} if the actual operation the action represents will be executed  * on a different thread than the calling thread (assuming it will be executed  * on the same node).  */ ;/**  * {@code true} if the actual operation the action represents will be executed  * on a different thread than the calling thread (assuming it will be executed  * on the same node).  */ public boolean threadedOperation() {     return this == OPERATION || this == OPERATION_LISTENER. }
true;public;0;3;/**  * {@code true} if the invocation of the action result listener will be executed  * on a different thread (than the calling thread or an "expensive" thread, like the  * IO thread).  */ ;/**  * {@code true} if the invocation of the action result listener will be executed  * on a different thread (than the calling thread or an "expensive" thread, like the  * IO thread).  */ public boolean threadedListener() {     return this == LISTENER || this == OPERATION_LISTENER. }
false;public;0;9;;public ThreadingModel addListener() {     if (this == NONE) {         return LISTENER.     }     if (this == OPERATION) {         return OPERATION_LISTENER.     }     return this. }
false;public;0;9;;public ThreadingModel removeListener() {     if (this == LISTENER) {         return NONE.     }     if (this == OPERATION_LISTENER) {         return OPERATION.     }     return this. }
false;public;0;9;;public ThreadingModel addOperation() {     if (this == NONE) {         return OPERATION.     }     if (this == LISTENER) {         return OPERATION_LISTENER.     }     return this. }
false;public;0;9;;public ThreadingModel removeOperation() {     if (this == OPERATION) {         return NONE.     }     if (this == OPERATION_LISTENER) {         return LISTENER.     }     return this. }
false;public,static;1;13;;public static ThreadingModel fromId(byte id) {     if (id == 0) {         return NONE.     } else if (id == 1) {         return OPERATION.     } else if (id == 2) {         return LISTENER.     } else if (id == 3) {         return OPERATION_LISTENER.     } else {         throw new IllegalArgumentException("No threading model for [" + id + "]").     } }
