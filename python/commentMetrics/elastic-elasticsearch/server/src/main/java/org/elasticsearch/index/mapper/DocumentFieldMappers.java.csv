commented;modifiers;parameterAmount;loc;comment;code
false;private,static;4;6;;private static void put(Map<String, Analyzer> analyzers, String key, Analyzer value, Analyzer defaultValue) {     if (value == null) {         value = defaultValue.     }     analyzers.put(key, value). }
true;public;1;3;/**  * Returns the leaf mapper associated with this field name. Note that the returned mapper  * could be either a concrete {@link FieldMapper}, or a {@link FieldAliasMapper}.  *  * To access a field's type information, {@link MapperService#fullName} should be used instead.  */ ;/**  * Returns the leaf mapper associated with this field name. Note that the returned mapper  * could be either a concrete {@link FieldMapper}, or a {@link FieldAliasMapper}.  *  * To access a field's type information, {@link MapperService#fullName} should be used instead.  */ public Mapper getMapper(String field) {     return fieldMappers.get(field). }
true;public;0;3;/**  * A smart analyzer used for indexing that takes into account specific analyzers configured  * per {@link FieldMapper}.  */ ;/**  * A smart analyzer used for indexing that takes into account specific analyzers configured  * per {@link FieldMapper}.  */ public Analyzer indexAnalyzer() {     return this.indexAnalyzer. }
true;public;0;3;/**  * A smart analyzer used for searching that takes into account specific analyzers configured  * per {@link FieldMapper}.  */ ;/**  * A smart analyzer used for searching that takes into account specific analyzers configured  * per {@link FieldMapper}.  */ public Analyzer searchAnalyzer() {     return this.searchAnalyzer. }
false;public;0;3;;public Analyzer searchQuoteAnalyzer() {     return this.searchQuoteAnalyzer. }
false;public;0;3;;public Iterator<Mapper> iterator() {     return fieldMappers.values().iterator(). }
