commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;1;3;;public void setRelocationId(String relocationId) {     this.relocationId = relocationId. }
false;public;0;3;;public AllocationId build() {     return new AllocationId(id, relocationId). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(this.id).     out.writeOptionalString(this.relocationId). }
true;public,static;0;3;/**  * Creates a new allocation id for initializing allocation.  */ ;/**  * Creates a new allocation id for initializing allocation.  */ public static AllocationId newInitializing() {     return new AllocationId(UUIDs.randomBase64UUID(), null). }
true;public,static;1;3;/**  * Creates a new allocation id for initializing allocation based on an existing id.  */ ;/**  * Creates a new allocation id for initializing allocation based on an existing id.  */ public static AllocationId newInitializing(String existingAllocationId) {     return new AllocationId(existingAllocationId, null). }
true;public,static;1;4;/**  * Creates a new allocation id for the target initializing shard that is the result  * of a relocation.  */ ;/**  * Creates a new allocation id for the target initializing shard that is the result  * of a relocation.  */ public static AllocationId newTargetRelocation(AllocationId allocationId) {     assert allocationId.getRelocationId() != null.     return new AllocationId(allocationId.getRelocationId(), allocationId.getId()). }
true;public,static;1;4;/**  * Creates a new allocation id for a shard that moves to be relocated, populating  * the transient holder for relocationId.  */ ;/**  * Creates a new allocation id for a shard that moves to be relocated, populating  * the transient holder for relocationId.  */ public static AllocationId newRelocation(AllocationId allocationId) {     assert allocationId.getRelocationId() == null.     return new AllocationId(allocationId.getId(), UUIDs.randomBase64UUID()). }
true;public,static;1;4;/**  * Creates a new allocation id representing a cancelled relocation.  * <p>  * Note that this is expected to be called on the allocation id  * of the *source* shard  */ ;/**  * Creates a new allocation id representing a cancelled relocation.  * <p>  * Note that this is expected to be called on the allocation id  * of the *source* shard  */ public static AllocationId cancelRelocation(AllocationId allocationId) {     assert allocationId.getRelocationId() != null.     return new AllocationId(allocationId.getId(), null). }
true;public,static;1;4;/**  * Creates a new allocation id finalizing a relocation.  * <p>  * Note that this is expected to be called on the allocation id  * of the *target* shard and thus it only needs to clear the relocating id.  */ ;/**  * Creates a new allocation id finalizing a relocation.  * <p>  * Note that this is expected to be called on the allocation id  * of the *target* shard and thus it only needs to clear the relocating id.  */ public static AllocationId finishRelocation(AllocationId allocationId) {     assert allocationId.getRelocationId() != null.     return new AllocationId(allocationId.getId(), null). }
true;public;0;3;/**  * The allocation id uniquely identifying an allocation, note, if it is relocation  * the {@link #getRelocationId()} need to be taken into account as well.  */ ;/**  * The allocation id uniquely identifying an allocation, note, if it is relocation  * the {@link #getRelocationId()} need to be taken into account as well.  */ public String getId() {     return id. }
true;public;0;3;/**  * The transient relocation id holding the unique id that is used for relocation.  */ ;/**  * The transient relocation id holding the unique id that is used for relocation.  */ public String getRelocationId() {     return relocationId. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     AllocationId that = (AllocationId) o.     if (!id.equals(that.id)) {         return false.     }     return !(relocationId != null ? !relocationId.equals(that.relocationId) : that.relocationId != null). }
false;public;0;6;;@Override public int hashCode() {     int result = id.hashCode().     result = 31 * result + (relocationId != null ? relocationId.hashCode() : 0).     return result. }
false;public;0;4;;@Override public String toString() {     return "[id=" + id + (relocationId == null ? "" : ", rId=" + relocationId) + "]". }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ID_KEY, id).     if (relocationId != null) {         builder.field(RELOCATION_ID_KEY, relocationId).     }     builder.endObject().     return builder. }
false;public,static;1;3;;public static AllocationId fromXContent(XContentParser parser) throws IOException {     return ALLOCATION_ID_PARSER.parse(parser, new AllocationId.Builder(), null).build(). }
