commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (name == null) {         validationException = addValidationError("name is missing", validationException).     }     if (type == null) {         validationException = addValidationError("type is missing", validationException).     }     return validationException. }
true;public;1;4;/**  * Sets the name of the repository.  *  * @param name repository name  */ ;/**  * Sets the name of the repository.  *  * @param name repository name  */ public PutRepositoryRequest name(String name) {     this.name = name.     return this. }
true;public;0;3;/**  * The name of the repository.  *  * @return repository name  */ ;/**  * The name of the repository.  *  * @return repository name  */ public String name() {     return this.name. }
true;public;1;4;/**  * The type of the repository  * <ul>  * <li>"fs" - shared filesystem repository</li>  * </ul>  *  * @param type repository type  * @return this request  */ ;/**  * The type of the repository  * <ul>  * <li>"fs" - shared filesystem repository</li>  * </ul>  *  * @param type repository type  * @return this request  */ public PutRepositoryRequest type(String type) {     this.type = type.     return this. }
true;public;0;3;/**  * Returns repository type  *  * @return repository type  */ ;/**  * Returns repository type  *  * @return repository type  */ public String type() {     return this.type. }
true;public;1;4;/**  * Sets the repository settings  *  * @param settings repository settings  * @return this request  */ ;/**  * Sets the repository settings  *  * @param settings repository settings  * @return this request  */ public PutRepositoryRequest settings(Settings settings) {     this.settings = settings.     return this. }
true;public;1;4;/**  * Sets the repository settings  *  * @param settings repository settings  * @return this request  */ ;/**  * Sets the repository settings  *  * @param settings repository settings  * @return this request  */ public PutRepositoryRequest settings(Settings.Builder settings) {     this.settings = settings.build().     return this. }
true;public;2;4;/**  * Sets the repository settings.  *  * @param source repository settings in json or yaml format  * @param xContentType the content type of the source  * @return this request  */ ;/**  * Sets the repository settings.  *  * @param source repository settings in json or yaml format  * @param xContentType the content type of the source  * @return this request  */ public PutRepositoryRequest settings(String source, XContentType xContentType) {     this.settings = Settings.builder().loadFromSource(source, xContentType).build().     return this. }
true;public;1;10;/**  * Sets the repository settings.  *  * @param source repository settings  * @return this request  */ ;/**  * Sets the repository settings.  *  * @param source repository settings  * @return this request  */ public PutRepositoryRequest settings(Map<String, Object> source) {     try {         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).         builder.map(source).         settings(Strings.toString(builder), builder.contentType()).     } catch (IOException e) {         throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e).     }     return this. }
true;public;0;3;/**  * Returns repository settings  *  * @return repository settings  */ ;/**  * Returns repository settings  *  * @return repository settings  */ public Settings settings() {     return this.settings. }
true;public;1;4;/**  * Sets whether or not the repository should be verified after creation  */ ;/**  * Sets whether or not the repository should be verified after creation  */ public PutRepositoryRequest verify(boolean verify) {     this.verify = verify.     return this. }
true;public;0;3;/**  * Returns true if repository should be verified after creation  */ ;/**  * Returns true if repository should be verified after creation  */ public boolean verify() {     return this.verify. }
true;public;1;16;/**  * Parses repository definition.  *  * @param repositoryDefinition repository definition  */ ;/**  * Parses repository definition.  *  * @param repositoryDefinition repository definition  */ public PutRepositoryRequest source(Map<String, Object> repositoryDefinition) {     for (Map.Entry<String, Object> entry : repositoryDefinition.entrySet()) {         String name = entry.getKey().         if (name.equals("type")) {             type(entry.getValue().toString()).         } else if (name.equals("settings")) {             if (!(entry.getValue() instanceof Map)) {                 throw new IllegalArgumentException("Malformed settings section, should include an inner object").             }             @SuppressWarnings("unchecked")             Map<String, Object> sub = (Map<String, Object>) entry.getValue().             settings(sub).         }     }     return this. }
false;public;1;8;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     name = in.readString().     type = in.readString().     settings = readSettingsFromStream(in).     verify = in.readBoolean(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(name).     out.writeString(type).     writeSettingsToStream(settings, out).     out.writeBoolean(verify). }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("name", name).     builder.field("type", type).     builder.startObject("settings").     settings.toXContent(builder, params).     builder.endObject().     builder.field("verify", verify).     builder.endObject().     return builder. }
