# id;timestamp;commentText;codeText;commentWords;codeWords
GetResponse -> public long getVersion();1524684173;The version of the doc.;public long getVersion() {_        return getResult.getVersion()__    };the,version,of,the,doc;public,long,get,version,return,get,result,get,version
GetResponse -> public long getVersion();1532353780;The version of the doc.;public long getVersion() {_        return getResult.getVersion()__    };the,version,of,the,doc;public,long,get,version,return,get,result,get,version
GetResponse -> public long getVersion();1543619489;The version of the doc.;public long getVersion() {_        return getResult.getVersion()__    };the,version,of,the,doc;public,long,get,version,return,get,result,get,version
GetResponse -> public long getVersion();1545056533;The version of the doc.;public long getVersion() {_        return getResult.getVersion()__    };the,version,of,the,doc;public,long,get,version,return,get,result,get,version
GetResponse -> public long getVersion();1545126962;The version of the doc.;public long getVersion() {_        return getResult.getVersion()__    };the,version,of,the,doc;public,long,get,version,return,get,result,get,version
GetResponse -> public long getPrimaryTerm();1545056533;The primary term of the last primary that has changed this document, if found.;public long getPrimaryTerm() {_        return getResult.getPrimaryTerm()__    };the,primary,term,of,the,last,primary,that,has,changed,this,document,if,found;public,long,get,primary,term,return,get,result,get,primary,term
GetResponse -> public long getPrimaryTerm();1545126962;The primary term of the last primary that has changed this document, if found.;public long getPrimaryTerm() {_        return getResult.getPrimaryTerm()__    };the,primary,term,of,the,last,primary,that,has,changed,this,document,if,found;public,long,get,primary,term,return,get,result,get,primary,term
GetResponse -> public long getSeqNo();1545056533;The sequence number assigned to the last operation to have changed this document, if found.;public long getSeqNo() {_        return getResult.getSeqNo()__    };the,sequence,number,assigned,to,the,last,operation,to,have,changed,this,document,if,found;public,long,get,seq,no,return,get,result,get,seq,no
GetResponse -> public long getSeqNo();1545126962;The sequence number assigned to the last operation that has changed this document, if found.;public long getSeqNo() {_        return getResult.getSeqNo()__    };the,sequence,number,assigned,to,the,last,operation,that,has,changed,this,document,if,found;public,long,get,seq,no,return,get,result,get,seq,no
GetResponse -> public BytesReference getSourceAsBytesRef();1524684173;Returns bytes reference, also un compress the source if needed.;public BytesReference getSourceAsBytesRef() {_        return getResult.sourceRef()__    };returns,bytes,reference,also,un,compress,the,source,if,needed;public,bytes,reference,get,source,as,bytes,ref,return,get,result,source,ref
GetResponse -> public BytesReference getSourceAsBytesRef();1532353780;Returns bytes reference, also un compress the source if needed.;public BytesReference getSourceAsBytesRef() {_        return getResult.sourceRef()__    };returns,bytes,reference,also,un,compress,the,source,if,needed;public,bytes,reference,get,source,as,bytes,ref,return,get,result,source,ref
GetResponse -> public BytesReference getSourceAsBytesRef();1543619489;Returns bytes reference, also un compress the source if needed.;public BytesReference getSourceAsBytesRef() {_        return getResult.sourceRef()__    };returns,bytes,reference,also,un,compress,the,source,if,needed;public,bytes,reference,get,source,as,bytes,ref,return,get,result,source,ref
GetResponse -> public BytesReference getSourceAsBytesRef();1545056533;Returns bytes reference, also un compress the source if needed.;public BytesReference getSourceAsBytesRef() {_        return getResult.sourceRef()__    };returns,bytes,reference,also,un,compress,the,source,if,needed;public,bytes,reference,get,source,as,bytes,ref,return,get,result,source,ref
GetResponse -> public BytesReference getSourceAsBytesRef();1545126962;Returns bytes reference, also un compress the source if needed.;public BytesReference getSourceAsBytesRef() {_        return getResult.sourceRef()__    };returns,bytes,reference,also,un,compress,the,source,if,needed;public,bytes,reference,get,source,as,bytes,ref,return,get,result,source,ref
GetResponse -> public static GetResponse fromXContent(XContentParser parser) throws IOException;1524684173;This method can be used to parse a {@link GetResponse} object when it has been printed out_as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method._<p>_For forward compatibility reason this method might not fail if it tries to parse a field it_doesn't know. But before returning the result it will check that enough information were_parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}_otherwise. This is the case when we get a 404 back, which can be parsed as a normal_{@link GetResponse} with found set to false, or as an elasticsearch exception. The caller_of this method needs a way to figure out whether we got back a valid get response, which_can be done by catching ParsingException.__@param parser {@link XContentParser} to parse the response from_@return a {@link GetResponse}_@throws IOException is an I/O exception occurs during the parsing;public static GetResponse fromXContent(XContentParser parser) throws IOException {_        GetResult getResult = GetResult.fromXContent(parser)___        _        _        _        if (getResult.getIndex() == null && getResult.getType() == null && getResult.getId() == null) {_            throw new ParsingException(parser.getTokenLocation(),_                    String.format(Locale.ROOT, "Missing required fields [%s,%s,%s]", GetResult._INDEX, GetResult._TYPE, GetResult._ID))__        }_        return new GetResponse(getResult)__    };this,method,can,be,used,to,parse,a,link,get,response,object,when,it,has,been,printed,out,as,a,xcontent,using,the,link,to,xcontent,xcontent,builder,params,method,p,for,forward,compatibility,reason,this,method,might,not,fail,if,it,tries,to,parse,a,field,it,doesn,t,know,but,before,returning,the,result,it,will,check,that,enough,information,were,parsed,to,return,a,valid,link,get,response,instance,and,throws,a,link,parsing,exception,otherwise,this,is,the,case,when,we,get,a,404,back,which,can,be,parsed,as,a,normal,link,get,response,with,found,set,to,false,or,as,an,elasticsearch,exception,the,caller,of,this,method,needs,a,way,to,figure,out,whether,we,got,back,a,valid,get,response,which,can,be,done,by,catching,parsing,exception,param,parser,link,xcontent,parser,to,parse,the,response,from,return,a,link,get,response,throws,ioexception,is,an,i,o,exception,occurs,during,the,parsing;public,static,get,response,from,xcontent,xcontent,parser,parser,throws,ioexception,get,result,get,result,get,result,from,xcontent,parser,if,get,result,get,index,null,get,result,get,type,null,get,result,get,id,null,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,missing,required,fields,s,s,s,get,result,get,result,get,result,return,new,get,response,get,result
GetResponse -> public static GetResponse fromXContent(XContentParser parser) throws IOException;1532353780;This method can be used to parse a {@link GetResponse} object when it has been printed out_as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method._<p>_For forward compatibility reason this method might not fail if it tries to parse a field it_doesn't know. But before returning the result it will check that enough information were_parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}_otherwise. This is the case when we get a 404 back, which can be parsed as a normal_{@link GetResponse} with found set to false, or as an elasticsearch exception. The caller_of this method needs a way to figure out whether we got back a valid get response, which_can be done by catching ParsingException.__@param parser {@link XContentParser} to parse the response from_@return a {@link GetResponse}_@throws IOException is an I/O exception occurs during the parsing;public static GetResponse fromXContent(XContentParser parser) throws IOException {_        GetResult getResult = GetResult.fromXContent(parser)___        _        _        _        if (getResult.getIndex() == null && getResult.getType() == null && getResult.getId() == null) {_            throw new ParsingException(parser.getTokenLocation(),_                    String.format(Locale.ROOT, "Missing required fields [%s,%s,%s]", GetResult._INDEX, GetResult._TYPE, GetResult._ID))__        }_        return new GetResponse(getResult)__    };this,method,can,be,used,to,parse,a,link,get,response,object,when,it,has,been,printed,out,as,a,xcontent,using,the,link,to,xcontent,xcontent,builder,params,method,p,for,forward,compatibility,reason,this,method,might,not,fail,if,it,tries,to,parse,a,field,it,doesn,t,know,but,before,returning,the,result,it,will,check,that,enough,information,were,parsed,to,return,a,valid,link,get,response,instance,and,throws,a,link,parsing,exception,otherwise,this,is,the,case,when,we,get,a,404,back,which,can,be,parsed,as,a,normal,link,get,response,with,found,set,to,false,or,as,an,elasticsearch,exception,the,caller,of,this,method,needs,a,way,to,figure,out,whether,we,got,back,a,valid,get,response,which,can,be,done,by,catching,parsing,exception,param,parser,link,xcontent,parser,to,parse,the,response,from,return,a,link,get,response,throws,ioexception,is,an,i,o,exception,occurs,during,the,parsing;public,static,get,response,from,xcontent,xcontent,parser,parser,throws,ioexception,get,result,get,result,get,result,from,xcontent,parser,if,get,result,get,index,null,get,result,get,type,null,get,result,get,id,null,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,missing,required,fields,s,s,s,get,result,get,result,get,result,return,new,get,response,get,result
GetResponse -> public static GetResponse fromXContent(XContentParser parser) throws IOException;1543619489;This method can be used to parse a {@link GetResponse} object when it has been printed out_as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method._<p>_For forward compatibility reason this method might not fail if it tries to parse a field it_doesn't know. But before returning the result it will check that enough information were_parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}_otherwise. This is the case when we get a 404 back, which can be parsed as a normal_{@link GetResponse} with found set to false, or as an elasticsearch exception. The caller_of this method needs a way to figure out whether we got back a valid get response, which_can be done by catching ParsingException.__@param parser {@link XContentParser} to parse the response from_@return a {@link GetResponse}_@throws IOException is an I/O exception occurs during the parsing;public static GetResponse fromXContent(XContentParser parser) throws IOException {_        GetResult getResult = GetResult.fromXContent(parser)___        _        _        _        if (getResult.getIndex() == null && getResult.getType() == null && getResult.getId() == null) {_            throw new ParsingException(parser.getTokenLocation(),_                    String.format(Locale.ROOT, "Missing required fields [%s,%s,%s]", GetResult._INDEX, GetResult._TYPE, GetResult._ID))__        }_        return new GetResponse(getResult)__    };this,method,can,be,used,to,parse,a,link,get,response,object,when,it,has,been,printed,out,as,a,xcontent,using,the,link,to,xcontent,xcontent,builder,params,method,p,for,forward,compatibility,reason,this,method,might,not,fail,if,it,tries,to,parse,a,field,it,doesn,t,know,but,before,returning,the,result,it,will,check,that,enough,information,were,parsed,to,return,a,valid,link,get,response,instance,and,throws,a,link,parsing,exception,otherwise,this,is,the,case,when,we,get,a,404,back,which,can,be,parsed,as,a,normal,link,get,response,with,found,set,to,false,or,as,an,elasticsearch,exception,the,caller,of,this,method,needs,a,way,to,figure,out,whether,we,got,back,a,valid,get,response,which,can,be,done,by,catching,parsing,exception,param,parser,link,xcontent,parser,to,parse,the,response,from,return,a,link,get,response,throws,ioexception,is,an,i,o,exception,occurs,during,the,parsing;public,static,get,response,from,xcontent,xcontent,parser,parser,throws,ioexception,get,result,get,result,get,result,from,xcontent,parser,if,get,result,get,index,null,get,result,get,type,null,get,result,get,id,null,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,missing,required,fields,s,s,s,get,result,get,result,get,result,return,new,get,response,get,result
GetResponse -> public static GetResponse fromXContent(XContentParser parser) throws IOException;1545056533;This method can be used to parse a {@link GetResponse} object when it has been printed out_as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method._<p>_For forward compatibility reason this method might not fail if it tries to parse a field it_doesn't know. But before returning the result it will check that enough information were_parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}_otherwise. This is the case when we get a 404 back, which can be parsed as a normal_{@link GetResponse} with found set to false, or as an elasticsearch exception. The caller_of this method needs a way to figure out whether we got back a valid get response, which_can be done by catching ParsingException.__@param parser {@link XContentParser} to parse the response from_@return a {@link GetResponse}_@throws IOException is an I/O exception occurs during the parsing;public static GetResponse fromXContent(XContentParser parser) throws IOException {_        GetResult getResult = GetResult.fromXContent(parser)___        _        _        _        if (getResult.getIndex() == null && getResult.getType() == null && getResult.getId() == null) {_            throw new ParsingException(parser.getTokenLocation(),_                    String.format(Locale.ROOT, "Missing required fields [%s,%s,%s]", GetResult._INDEX, GetResult._TYPE, GetResult._ID))__        }_        return new GetResponse(getResult)__    };this,method,can,be,used,to,parse,a,link,get,response,object,when,it,has,been,printed,out,as,a,xcontent,using,the,link,to,xcontent,xcontent,builder,params,method,p,for,forward,compatibility,reason,this,method,might,not,fail,if,it,tries,to,parse,a,field,it,doesn,t,know,but,before,returning,the,result,it,will,check,that,enough,information,were,parsed,to,return,a,valid,link,get,response,instance,and,throws,a,link,parsing,exception,otherwise,this,is,the,case,when,we,get,a,404,back,which,can,be,parsed,as,a,normal,link,get,response,with,found,set,to,false,or,as,an,elasticsearch,exception,the,caller,of,this,method,needs,a,way,to,figure,out,whether,we,got,back,a,valid,get,response,which,can,be,done,by,catching,parsing,exception,param,parser,link,xcontent,parser,to,parse,the,response,from,return,a,link,get,response,throws,ioexception,is,an,i,o,exception,occurs,during,the,parsing;public,static,get,response,from,xcontent,xcontent,parser,parser,throws,ioexception,get,result,get,result,get,result,from,xcontent,parser,if,get,result,get,index,null,get,result,get,type,null,get,result,get,id,null,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,missing,required,fields,s,s,s,get,result,get,result,get,result,return,new,get,response,get,result
GetResponse -> public static GetResponse fromXContent(XContentParser parser) throws IOException;1545126962;This method can be used to parse a {@link GetResponse} object when it has been printed out_as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method._<p>_For forward compatibility reason this method might not fail if it tries to parse a field it_doesn't know. But before returning the result it will check that enough information were_parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}_otherwise. This is the case when we get a 404 back, which can be parsed as a normal_{@link GetResponse} with found set to false, or as an elasticsearch exception. The caller_of this method needs a way to figure out whether we got back a valid get response, which_can be done by catching ParsingException.__@param parser {@link XContentParser} to parse the response from_@return a {@link GetResponse}_@throws IOException is an I/O exception occurs during the parsing;public static GetResponse fromXContent(XContentParser parser) throws IOException {_        GetResult getResult = GetResult.fromXContent(parser)___        _        _        _        if (getResult.getIndex() == null && getResult.getType() == null && getResult.getId() == null) {_            throw new ParsingException(parser.getTokenLocation(),_                    String.format(Locale.ROOT, "Missing required fields [%s,%s,%s]", GetResult._INDEX, GetResult._TYPE, GetResult._ID))__        }_        return new GetResponse(getResult)__    };this,method,can,be,used,to,parse,a,link,get,response,object,when,it,has,been,printed,out,as,a,xcontent,using,the,link,to,xcontent,xcontent,builder,params,method,p,for,forward,compatibility,reason,this,method,might,not,fail,if,it,tries,to,parse,a,field,it,doesn,t,know,but,before,returning,the,result,it,will,check,that,enough,information,were,parsed,to,return,a,valid,link,get,response,instance,and,throws,a,link,parsing,exception,otherwise,this,is,the,case,when,we,get,a,404,back,which,can,be,parsed,as,a,normal,link,get,response,with,found,set,to,false,or,as,an,elasticsearch,exception,the,caller,of,this,method,needs,a,way,to,figure,out,whether,we,got,back,a,valid,get,response,which,can,be,done,by,catching,parsing,exception,param,parser,link,xcontent,parser,to,parse,the,response,from,return,a,link,get,response,throws,ioexception,is,an,i,o,exception,occurs,during,the,parsing;public,static,get,response,from,xcontent,xcontent,parser,parser,throws,ioexception,get,result,get,result,get,result,from,xcontent,parser,if,get,result,get,index,null,get,result,get,type,null,get,result,get,id,null,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,missing,required,fields,s,s,s,get,result,get,result,get,result,return,new,get,response,get,result
GetResponse -> public String getId();1524684173;The id of the document.;public String getId() {_        return getResult.getId()__    };the,id,of,the,document;public,string,get,id,return,get,result,get,id
GetResponse -> public String getId();1532353780;The id of the document.;public String getId() {_        return getResult.getId()__    };the,id,of,the,document;public,string,get,id,return,get,result,get,id
GetResponse -> public String getId();1543619489;The id of the document.;public String getId() {_        return getResult.getId()__    };the,id,of,the,document;public,string,get,id,return,get,result,get,id
GetResponse -> public String getId();1545056533;The id of the document.;public String getId() {_        return getResult.getId()__    };the,id,of,the,document;public,string,get,id,return,get,result,get,id
GetResponse -> public String getId();1545126962;The id of the document.;public String getId() {_        return getResult.getId()__    };the,id,of,the,document;public,string,get,id,return,get,result,get,id
GetResponse -> public byte[] getSourceAsBytes();1524684173;The source of the document if exists.;public byte[] getSourceAsBytes() {_        return getResult.source()__    };the,source,of,the,document,if,exists;public,byte,get,source,as,bytes,return,get,result,source
GetResponse -> public byte[] getSourceAsBytes();1532353780;The source of the document if exists.;public byte[] getSourceAsBytes() {_        return getResult.source()__    };the,source,of,the,document,if,exists;public,byte,get,source,as,bytes,return,get,result,source
GetResponse -> public byte[] getSourceAsBytes();1543619489;The source of the document if exists.;public byte[] getSourceAsBytes() {_        return getResult.source()__    };the,source,of,the,document,if,exists;public,byte,get,source,as,bytes,return,get,result,source
GetResponse -> public byte[] getSourceAsBytes();1545056533;The source of the document if exists.;public byte[] getSourceAsBytes() {_        return getResult.source()__    };the,source,of,the,document,if,exists;public,byte,get,source,as,bytes,return,get,result,source
GetResponse -> public byte[] getSourceAsBytes();1545126962;The source of the document if exists.;public byte[] getSourceAsBytes() {_        return getResult.source()__    };the,source,of,the,document,if,exists;public,byte,get,source,as,bytes,return,get,result,source
GetResponse -> public String getIndex();1524684173;The index the document was fetched from.;public String getIndex() {_        return getResult.getIndex()__    };the,index,the,document,was,fetched,from;public,string,get,index,return,get,result,get,index
GetResponse -> public String getIndex();1532353780;The index the document was fetched from.;public String getIndex() {_        return getResult.getIndex()__    };the,index,the,document,was,fetched,from;public,string,get,index,return,get,result,get,index
GetResponse -> public String getIndex();1543619489;The index the document was fetched from.;public String getIndex() {_        return getResult.getIndex()__    };the,index,the,document,was,fetched,from;public,string,get,index,return,get,result,get,index
GetResponse -> public String getIndex();1545056533;The index the document was fetched from.;public String getIndex() {_        return getResult.getIndex()__    };the,index,the,document,was,fetched,from;public,string,get,index,return,get,result,get,index
GetResponse -> public String getIndex();1545126962;The index the document was fetched from.;public String getIndex() {_        return getResult.getIndex()__    };the,index,the,document,was,fetched,from;public,string,get,index,return,get,result,get,index
GetResponse -> public BytesReference getSourceInternal();1524684173;Returns the internal source bytes, as they are returned without munging (for example,_might still be compressed).;public BytesReference getSourceInternal() {_        return getResult.internalSourceRef()__    };returns,the,internal,source,bytes,as,they,are,returned,without,munging,for,example,might,still,be,compressed;public,bytes,reference,get,source,internal,return,get,result,internal,source,ref
GetResponse -> public BytesReference getSourceInternal();1532353780;Returns the internal source bytes, as they are returned without munging (for example,_might still be compressed).;public BytesReference getSourceInternal() {_        return getResult.internalSourceRef()__    };returns,the,internal,source,bytes,as,they,are,returned,without,munging,for,example,might,still,be,compressed;public,bytes,reference,get,source,internal,return,get,result,internal,source,ref
GetResponse -> public BytesReference getSourceInternal();1543619489;Returns the internal source bytes, as they are returned without munging (for example,_might still be compressed).;public BytesReference getSourceInternal() {_        return getResult.internalSourceRef()__    };returns,the,internal,source,bytes,as,they,are,returned,without,munging,for,example,might,still,be,compressed;public,bytes,reference,get,source,internal,return,get,result,internal,source,ref
GetResponse -> public BytesReference getSourceInternal();1545056533;Returns the internal source bytes, as they are returned without munging (for example,_might still be compressed).;public BytesReference getSourceInternal() {_        return getResult.internalSourceRef()__    };returns,the,internal,source,bytes,as,they,are,returned,without,munging,for,example,might,still,be,compressed;public,bytes,reference,get,source,internal,return,get,result,internal,source,ref
GetResponse -> public BytesReference getSourceInternal();1545126962;Returns the internal source bytes, as they are returned without munging (for example,_might still be compressed).;public BytesReference getSourceInternal() {_        return getResult.internalSourceRef()__    };returns,the,internal,source,bytes,as,they,are,returned,without,munging,for,example,might,still,be,compressed;public,bytes,reference,get,source,internal,return,get,result,internal,source,ref
GetResponse -> public boolean isSourceEmpty();1524684173;Is the source empty (not available) or not.;public boolean isSourceEmpty() {_        return getResult.isSourceEmpty()__    };is,the,source,empty,not,available,or,not;public,boolean,is,source,empty,return,get,result,is,source,empty
GetResponse -> public boolean isSourceEmpty();1532353780;Is the source empty (not available) or not.;public boolean isSourceEmpty() {_        return getResult.isSourceEmpty()__    };is,the,source,empty,not,available,or,not;public,boolean,is,source,empty,return,get,result,is,source,empty
GetResponse -> public boolean isSourceEmpty();1543619489;Is the source empty (not available) or not.;public boolean isSourceEmpty() {_        return getResult.isSourceEmpty()__    };is,the,source,empty,not,available,or,not;public,boolean,is,source,empty,return,get,result,is,source,empty
GetResponse -> public boolean isSourceEmpty();1545056533;Is the source empty (not available) or not.;public boolean isSourceEmpty() {_        return getResult.isSourceEmpty()__    };is,the,source,empty,not,available,or,not;public,boolean,is,source,empty,return,get,result,is,source,empty
GetResponse -> public boolean isSourceEmpty();1545126962;Is the source empty (not available) or not.;public boolean isSourceEmpty() {_        return getResult.isSourceEmpty()__    };is,the,source,empty,not,available,or,not;public,boolean,is,source,empty,return,get,result,is,source,empty
GetResponse -> public String getSourceAsString();1524684173;The source of the document (as a string).;public String getSourceAsString() {_        return getResult.sourceAsString()__    };the,source,of,the,document,as,a,string;public,string,get,source,as,string,return,get,result,source,as,string
GetResponse -> public String getSourceAsString();1532353780;The source of the document (as a string).;public String getSourceAsString() {_        return getResult.sourceAsString()__    };the,source,of,the,document,as,a,string;public,string,get,source,as,string,return,get,result,source,as,string
GetResponse -> public String getSourceAsString();1543619489;The source of the document (as a string).;public String getSourceAsString() {_        return getResult.sourceAsString()__    };the,source,of,the,document,as,a,string;public,string,get,source,as,string,return,get,result,source,as,string
GetResponse -> public String getSourceAsString();1545056533;The source of the document (as a string).;public String getSourceAsString() {_        return getResult.sourceAsString()__    };the,source,of,the,document,as,a,string;public,string,get,source,as,string,return,get,result,source,as,string
GetResponse -> public String getSourceAsString();1545126962;The source of the document (as a string).;public String getSourceAsString() {_        return getResult.sourceAsString()__    };the,source,of,the,document,as,a,string;public,string,get,source,as,string,return,get,result,source,as,string
GetResponse -> public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException;1532353780;The source of the document (As a map).;public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException {_        return getResult.sourceAsMap()__    };the,source,of,the,document,as,a,map;public,map,string,object,get,source,as,map,throws,elasticsearch,parse,exception,return,get,result,source,as,map
GetResponse -> public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException;1543619489;The source of the document (As a map).;public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException {_        return getResult.sourceAsMap()__    };the,source,of,the,document,as,a,map;public,map,string,object,get,source,as,map,throws,elasticsearch,parse,exception,return,get,result,source,as,map
GetResponse -> public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException;1545056533;The source of the document (As a map).;public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException {_        return getResult.sourceAsMap()__    };the,source,of,the,document,as,a,map;public,map,string,object,get,source,as,map,throws,elasticsearch,parse,exception,return,get,result,source,as,map
GetResponse -> public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException;1545126962;The source of the document (As a map).;public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException {_        return getResult.sourceAsMap()__    };the,source,of,the,document,as,a,map;public,map,string,object,get,source,as,map,throws,elasticsearch,parse,exception,return,get,result,source,as,map
GetResponse -> public boolean isExists();1524684173;Does the document exists.;public boolean isExists() {_        return getResult.isExists()__    };does,the,document,exists;public,boolean,is,exists,return,get,result,is,exists
GetResponse -> public boolean isExists();1532353780;Does the document exists.;public boolean isExists() {_        return getResult.isExists()__    };does,the,document,exists;public,boolean,is,exists,return,get,result,is,exists
GetResponse -> public boolean isExists();1543619489;Does the document exists.;public boolean isExists() {_        return getResult.isExists()__    };does,the,document,exists;public,boolean,is,exists,return,get,result,is,exists
GetResponse -> public boolean isExists();1545056533;Does the document exists.;public boolean isExists() {_        return getResult.isExists()__    };does,the,document,exists;public,boolean,is,exists,return,get,result,is,exists
GetResponse -> public boolean isExists();1545126962;Does the document exists.;public boolean isExists() {_        return getResult.isExists()__    };does,the,document,exists;public,boolean,is,exists,return,get,result,is,exists
GetResponse -> public String getType();1524684173;The type of the document.;public String getType() {_        return getResult.getType()__    };the,type,of,the,document;public,string,get,type,return,get,result,get,type
GetResponse -> public String getType();1532353780;The type of the document.;public String getType() {_        return getResult.getType()__    };the,type,of,the,document;public,string,get,type,return,get,result,get,type
GetResponse -> public String getType();1543619489;The type of the document.;public String getType() {_        return getResult.getType()__    };the,type,of,the,document;public,string,get,type,return,get,result,get,type
GetResponse -> public String getType();1545056533;The type of the document.;public String getType() {_        return getResult.getType()__    };the,type,of,the,document;public,string,get,type,return,get,result,get,type
GetResponse -> public String getType();1545126962;The type of the document.;public String getType() {_        return getResult.getType()__    };the,type,of,the,document;public,string,get,type,return,get,result,get,type
GetResponse -> @Deprecated     public Iterator<DocumentField> iterator();1543619489;@deprecated Use {@link GetResponse#getSource()} instead;@Deprecated_    public Iterator<DocumentField> iterator() {_        return getResult.iterator()__    };deprecated,use,link,get,response,get,source,instead;deprecated,public,iterator,document,field,iterator,return,get,result,iterator
GetResponse -> @Deprecated     public Iterator<DocumentField> iterator();1545056533;@deprecated Use {@link GetResponse#getSource()} instead;@Deprecated_    public Iterator<DocumentField> iterator() {_        return getResult.iterator()__    };deprecated,use,link,get,response,get,source,instead;deprecated,public,iterator,document,field,iterator,return,get,result,iterator
GetResponse -> @Deprecated     public Iterator<DocumentField> iterator();1545126962;@deprecated Use {@link GetResponse#getSource()} instead;@Deprecated_    public Iterator<DocumentField> iterator() {_        return getResult.iterator()__    };deprecated,use,link,get,response,get,source,instead;deprecated,public,iterator,document,field,iterator,return,get,result,iterator
GetResponse -> @Deprecated     @Override     public Iterator<DocumentField> iterator();1524684173;@deprecated Use {@link GetResponse#getSource()} instead;@Deprecated_    @Override_    public Iterator<DocumentField> iterator() {_        return getResult.iterator()__    };deprecated,use,link,get,response,get,source,instead;deprecated,override,public,iterator,document,field,iterator,return,get,result,iterator
GetResponse -> @Deprecated     @Override     public Iterator<DocumentField> iterator();1532353780;@deprecated Use {@link GetResponse#getSource()} instead;@Deprecated_    @Override_    public Iterator<DocumentField> iterator() {_        return getResult.iterator()__    };deprecated,use,link,get,response,get,source,instead;deprecated,override,public,iterator,document,field,iterator,return,get,result,iterator
