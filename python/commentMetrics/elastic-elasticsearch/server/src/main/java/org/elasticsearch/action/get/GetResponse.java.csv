commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Does the document exists.  */ ;/**  * Does the document exists.  */ public boolean isExists() {     return getResult.isExists(). }
true;public;0;3;/**  * The index the document was fetched from.  */ ;/**  * The index the document was fetched from.  */ public String getIndex() {     return getResult.getIndex(). }
true;public;0;3;/**  * The type of the document.  */ ;/**  * The type of the document.  */ public String getType() {     return getResult.getType(). }
true;public;0;3;/**  * The id of the document.  */ ;/**  * The id of the document.  */ public String getId() {     return getResult.getId(). }
true;public;0;3;/**  * The version of the doc.  */ ;/**  * The version of the doc.  */ public long getVersion() {     return getResult.getVersion(). }
true;public;0;3;/**  * The sequence number assigned to the last operation that has changed this document, if found.  */ ;/**  * The sequence number assigned to the last operation that has changed this document, if found.  */ public long getSeqNo() {     return getResult.getSeqNo(). }
true;public;0;3;/**  * The primary term of the last primary that has changed this document, if found.  */ ;/**  * The primary term of the last primary that has changed this document, if found.  */ public long getPrimaryTerm() {     return getResult.getPrimaryTerm(). }
true;public;0;3;/**  * The source of the document if exists.  */ ;/**  * The source of the document if exists.  */ public byte[] getSourceAsBytes() {     return getResult.source(). }
true;public;0;3;/**  * Returns the internal source bytes, as they are returned without munging (for example,  * might still be compressed).  */ ;/**  * Returns the internal source bytes, as they are returned without munging (for example,  * might still be compressed).  */ public BytesReference getSourceInternal() {     return getResult.internalSourceRef(). }
true;public;0;3;/**  * Returns bytes reference, also un compress the source if needed.  */ ;/**  * Returns bytes reference, also un compress the source if needed.  */ public BytesReference getSourceAsBytesRef() {     return getResult.sourceRef(). }
true;public;0;3;/**  * Is the source empty (not available) or not.  */ ;/**  * Is the source empty (not available) or not.  */ public boolean isSourceEmpty() {     return getResult.isSourceEmpty(). }
true;public;0;3;/**  * The source of the document (as a string).  */ ;/**  * The source of the document (as a string).  */ public String getSourceAsString() {     return getResult.sourceAsString(). }
true;public;0;3;/**  * The source of the document (As a map).  */ ;/**  * The source of the document (As a map).  */ public Map<String, Object> getSourceAsMap() throws ElasticsearchParseException {     return getResult.sourceAsMap(). }
false;public;0;3;;public Map<String, Object> getSource() {     return getResult.getSource(). }
false;public;0;3;;public Map<String, DocumentField> getFields() {     return getResult.getFields(). }
false;public;1;3;;public DocumentField getField(String name) {     return getResult.field(name). }
true;public;0;4;/**  * @deprecated Use {@link GetResponse#getSource()} instead  */ ;/**  * @deprecated Use {@link GetResponse#getSource()} instead  */ @Deprecated public Iterator<DocumentField> iterator() {     return getResult.iterator(). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return getResult.toXContent(builder, params). }
true;public,static;1;12;/**  * This method can be used to parse a {@link GetResponse} object when it has been printed out  * as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method.  * <p>  * For forward compatibility reason this method might not fail if it tries to parse a field it  * doesn't know. But before returning the result it will check that enough information were  * parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}  * otherwise. This is the case when we get a 404 back, which can be parsed as a normal  * {@link GetResponse} with found set to false, or as an elasticsearch exception. The caller  * of this method needs a way to figure out whether we got back a valid get response, which  * can be done by catching ParsingException.  *  * @param parser {@link XContentParser} to parse the response from  * @return a {@link GetResponse}  * @throws IOException is an I/O exception occurs during the parsing  */ ;/**  * This method can be used to parse a {@link GetResponse} object when it has been printed out  * as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method.  * <p>  * For forward compatibility reason this method might not fail if it tries to parse a field it  * doesn't know. But before returning the result it will check that enough information were  * parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}  * otherwise. This is the case when we get a 404 back, which can be parsed as a normal  * {@link GetResponse} with found set to false, or as an elasticsearch exception. The caller  * of this method needs a way to figure out whether we got back a valid get response, which  * can be done by catching ParsingException.  *  * @param parser {@link XContentParser} to parse the response from  * @return a {@link GetResponse}  * @throws IOException is an I/O exception occurs during the parsing  */ public static GetResponse fromXContent(XContentParser parser) throws IOException {     GetResult getResult = GetResult.fromXContent(parser).     // exception so that callers know it and can handle it correctly.     if (getResult.getIndex() == null && getResult.getType() == null && getResult.getId() == null) {         throw new ParsingException(parser.getTokenLocation(), String.format(Locale.ROOT, "Missing required fields [%s,%s,%s]", GetResult._INDEX, GetResult._TYPE, GetResult._ID)).     }     return new GetResponse(getResult). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     getResult = GetResult.readGetResult(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     getResult.writeTo(out). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     GetResponse getResponse = (GetResponse) o.     return Objects.equals(getResult, getResponse.getResult). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(getResult). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
