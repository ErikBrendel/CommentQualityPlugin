commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ShardId getShardId() {     return this.shardId. }
false;public;0;3;;public ShardStats[] getShards() {     return shards. }
false;public;1;3;;public ShardStats getAt(int position) {     return shards[position]. }
false;public;0;4;;@Override public Iterator<ShardStats> iterator() {     return Arrays.stream(shards).iterator(). }
false;public;0;11;;public CommonStats getTotal() {     if (total != null) {         return total.     }     CommonStats stats = new CommonStats().     for (ShardStats shard : shards) {         stats.add(shard.getStats()).     }     total = stats.     return stats. }
false;public;0;13;;public CommonStats getPrimary() {     if (primary != null) {         return primary.     }     CommonStats stats = new CommonStats().     for (ShardStats shard : shards) {         if (shard.getShardRouting().primary()) {             stats.add(shard.getStats()).         }     }     primary = stats.     return stats. }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     shardId = ShardId.readShardId(in).     int shardSize = in.readVInt().     shards = new ShardStats[shardSize].     for (int i = 0. i < shardSize. i++) {         shards[i] = ShardStats.readShardStats(in).     } }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     shardId.writeTo(out).     out.writeVInt(shards.length).     for (ShardStats stats : shards) {         stats.writeTo(out).     } }
false;public,static;1;5;;public static IndexShardStats readIndexShardStats(StreamInput in) throws IOException {     IndexShardStats indexShardStats = new IndexShardStats().     indexShardStats.readFrom(in).     return indexShardStats. }
