commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Create a new {@link ValueCount} aggregation with the given name.  */ ;/**  * Create a new {@link ValueCount} aggregation with the given name.  */ public static ValueCountAggregationBuilder count(String name) {     return new ValueCountAggregationBuilder(name, null). }
true;public,static;1;3;/**  * Create a new {@link Avg} aggregation with the given name.  */ ;/**  * Create a new {@link Avg} aggregation with the given name.  */ public static AvgAggregationBuilder avg(String name) {     return new AvgAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Avg} aggregation with the given name.  */ ;/**  * Create a new {@link Avg} aggregation with the given name.  */ public static WeightedAvgAggregationBuilder weightedAvg(String name) {     return new WeightedAvgAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Max} aggregation with the given name.  */ ;/**  * Create a new {@link Max} aggregation with the given name.  */ public static MaxAggregationBuilder max(String name) {     return new MaxAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Min} aggregation with the given name.  */ ;/**  * Create a new {@link Min} aggregation with the given name.  */ public static MinAggregationBuilder min(String name) {     return new MinAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Sum} aggregation with the given name.  */ ;/**  * Create a new {@link Sum} aggregation with the given name.  */ public static SumAggregationBuilder sum(String name) {     return new SumAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Stats} aggregation with the given name.  */ ;/**  * Create a new {@link Stats} aggregation with the given name.  */ public static StatsAggregationBuilder stats(String name) {     return new StatsAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link ExtendedStats} aggregation with the given name.  */ ;/**  * Create a new {@link ExtendedStats} aggregation with the given name.  */ public static ExtendedStatsAggregationBuilder extendedStats(String name) {     return new ExtendedStatsAggregationBuilder(name). }
true;public,static;2;3;/**  * Create a new {@link Filter} aggregation with the given name.  */ ;/**  * Create a new {@link Filter} aggregation with the given name.  */ public static FilterAggregationBuilder filter(String name, QueryBuilder filter) {     return new FilterAggregationBuilder(name, filter). }
true;public,static;2;3;/**  * Create a new {@link Filters} aggregation with the given name.  */ ;/**  * Create a new {@link Filters} aggregation with the given name.  */ public static FiltersAggregationBuilder filters(String name, KeyedFilter... filters) {     return new FiltersAggregationBuilder(name, filters). }
true;public,static;2;3;/**  * Create a new {@link Filters} aggregation with the given name.  */ ;/**  * Create a new {@link Filters} aggregation with the given name.  */ public static FiltersAggregationBuilder filters(String name, QueryBuilder... filters) {     return new FiltersAggregationBuilder(name, filters). }
true;public,static;2;3;/**  * Create a new {@link AdjacencyMatrix} aggregation with the given name.  */ ;/**  * Create a new {@link AdjacencyMatrix} aggregation with the given name.  */ public static AdjacencyMatrixAggregationBuilder adjacencyMatrix(String name, Map<String, QueryBuilder> filters) {     return new AdjacencyMatrixAggregationBuilder(name, filters). }
true;public,static;3;3;/**  * Create a new {@link AdjacencyMatrix} aggregation with the given name and separator  */ ;/**  * Create a new {@link AdjacencyMatrix} aggregation with the given name and separator  */ public static AdjacencyMatrixAggregationBuilder adjacencyMatrix(String name, String separator, Map<String, QueryBuilder> filters) {     return new AdjacencyMatrixAggregationBuilder(name, separator, filters). }
true;public,static;1;3;/**  * Create a new {@link Sampler} aggregation with the given name.  */ ;/**  * Create a new {@link Sampler} aggregation with the given name.  */ public static SamplerAggregationBuilder sampler(String name) {     return new SamplerAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Sampler} aggregation with the given name.  */ ;/**  * Create a new {@link Sampler} aggregation with the given name.  */ public static DiversifiedAggregationBuilder diversifiedSampler(String name) {     return new DiversifiedAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Global} aggregation with the given name.  */ ;/**  * Create a new {@link Global} aggregation with the given name.  */ public static GlobalAggregationBuilder global(String name) {     return new GlobalAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Missing} aggregation with the given name.  */ ;/**  * Create a new {@link Missing} aggregation with the given name.  */ public static MissingAggregationBuilder missing(String name) {     return new MissingAggregationBuilder(name, null). }
true;public,static;2;3;/**  * Create a new {@link Nested} aggregation with the given name.  */ ;/**  * Create a new {@link Nested} aggregation with the given name.  */ public static NestedAggregationBuilder nested(String name, String path) {     return new NestedAggregationBuilder(name, path). }
true;public,static;1;3;/**  * Create a new {@link ReverseNested} aggregation with the given name.  */ ;/**  * Create a new {@link ReverseNested} aggregation with the given name.  */ public static ReverseNestedAggregationBuilder reverseNested(String name) {     return new ReverseNestedAggregationBuilder(name). }
true;public,static;2;3;/**  * Create a new {@link GeoDistance} aggregation with the given name.  */ ;/**  * Create a new {@link GeoDistance} aggregation with the given name.  */ public static GeoDistanceAggregationBuilder geoDistance(String name, GeoPoint origin) {     return new GeoDistanceAggregationBuilder(name, origin). }
true;public,static;1;3;/**  * Create a new {@link Histogram} aggregation with the given name.  */ ;/**  * Create a new {@link Histogram} aggregation with the given name.  */ public static HistogramAggregationBuilder histogram(String name) {     return new HistogramAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link InternalGeoHashGrid} aggregation with the given name.  */ ;/**  * Create a new {@link InternalGeoHashGrid} aggregation with the given name.  */ public static GeoHashGridAggregationBuilder geohashGrid(String name) {     return new GeoHashGridAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link InternalGeoTileGrid} aggregation with the given name.  */ ;/**  * Create a new {@link InternalGeoTileGrid} aggregation with the given name.  */ public static GeoTileGridAggregationBuilder geotileGrid(String name) {     return new GeoTileGridAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link SignificantTerms} aggregation with the given name.  */ ;/**  * Create a new {@link SignificantTerms} aggregation with the given name.  */ public static SignificantTermsAggregationBuilder significantTerms(String name) {     return new SignificantTermsAggregationBuilder(name, null). }
true;public,static;2;3;/**  * Create a new {@link SignificantTextAggregationBuilder} aggregation with the given name and text field name  */ ;/**  * Create a new {@link SignificantTextAggregationBuilder} aggregation with the given name and text field name  */ public static SignificantTextAggregationBuilder significantText(String name, String fieldName) {     return new SignificantTextAggregationBuilder(name, fieldName). }
true;public,static;1;3;/**  * Create a new {@link DateHistogramAggregationBuilder} aggregation with the given  * name.  */ ;/**  * Create a new {@link DateHistogramAggregationBuilder} aggregation with the given  * name.  */ public static DateHistogramAggregationBuilder dateHistogram(String name) {     return new DateHistogramAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Range} aggregation with the given name.  */ ;/**  * Create a new {@link Range} aggregation with the given name.  */ public static RangeAggregationBuilder range(String name) {     return new RangeAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link DateRangeAggregationBuilder} aggregation with the  * given name.  */ ;/**  * Create a new {@link DateRangeAggregationBuilder} aggregation with the  * given name.  */ public static DateRangeAggregationBuilder dateRange(String name) {     return new DateRangeAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link IpRangeAggregationBuilder} aggregation with the  * given name.  */ ;/**  * Create a new {@link IpRangeAggregationBuilder} aggregation with the  * given name.  */ public static IpRangeAggregationBuilder ipRange(String name) {     return new IpRangeAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Terms} aggregation with the given name.  */ ;/**  * Create a new {@link Terms} aggregation with the given name.  */ public static TermsAggregationBuilder terms(String name) {     return new TermsAggregationBuilder(name, null). }
true;public,static;1;3;/**  * Create a new {@link Percentiles} aggregation with the given name.  */ ;/**  * Create a new {@link Percentiles} aggregation with the given name.  */ public static PercentilesAggregationBuilder percentiles(String name) {     return new PercentilesAggregationBuilder(name). }
true;public,static;2;3;/**  * Create a new {@link PercentileRanks} aggregation with the given name.  */ ;/**  * Create a new {@link PercentileRanks} aggregation with the given name.  */ public static PercentileRanksAggregationBuilder percentileRanks(String name, double[] values) {     return new PercentileRanksAggregationBuilder(name, values). }
true;public,static;1;3;/**  * Create a new {@link MedianAbsoluteDeviation} aggregation with the given name  */ ;/**  * Create a new {@link MedianAbsoluteDeviation} aggregation with the given name  */ public static MedianAbsoluteDeviationAggregationBuilder medianAbsoluteDeviation(String name) {     return new MedianAbsoluteDeviationAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link Cardinality} aggregation with the given name.  */ ;/**  * Create a new {@link Cardinality} aggregation with the given name.  */ public static CardinalityAggregationBuilder cardinality(String name) {     return new CardinalityAggregationBuilder(name, null). }
true;public,static;1;3;/**  * Create a new {@link TopHits} aggregation with the given name.  */ ;/**  * Create a new {@link TopHits} aggregation with the given name.  */ public static TopHitsAggregationBuilder topHits(String name) {     return new TopHitsAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link GeoBounds} aggregation with the given name.  */ ;/**  * Create a new {@link GeoBounds} aggregation with the given name.  */ public static GeoBoundsAggregationBuilder geoBounds(String name) {     return new GeoBoundsAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link GeoCentroid} aggregation with the given name.  */ ;/**  * Create a new {@link GeoCentroid} aggregation with the given name.  */ public static GeoCentroidAggregationBuilder geoCentroid(String name) {     return new GeoCentroidAggregationBuilder(name). }
true;public,static;1;3;/**  * Create a new {@link ScriptedMetric} aggregation with the given name.  */ ;/**  * Create a new {@link ScriptedMetric} aggregation with the given name.  */ public static ScriptedMetricAggregationBuilder scriptedMetric(String name) {     return new ScriptedMetricAggregationBuilder(name). }
true;public,static;2;3;/**  * Create a new {@link CompositeAggregationBuilder} aggregation with the given name.  */ ;/**  * Create a new {@link CompositeAggregationBuilder} aggregation with the given name.  */ public static CompositeAggregationBuilder composite(String name, List<CompositeValuesSourceBuilder<?>> sources) {     return new CompositeAggregationBuilder(name, sources). }
