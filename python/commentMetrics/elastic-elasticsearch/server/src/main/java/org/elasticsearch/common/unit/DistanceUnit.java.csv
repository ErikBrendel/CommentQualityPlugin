commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Measures the circumference of earth in this unit  *  * @return length of earth circumference in this unit  */ ;/**  * Measures the circumference of earth in this unit  *  * @return length of earth circumference in this unit  */ public double getEarthCircumference() {     return GeoUtils.EARTH_EQUATOR / meters. }
true;public;0;3;/**  * Measures the radius of earth in this unit  *  * @return length of earth radius in this unit  */ ;/**  * Measures the radius of earth in this unit  *  * @return length of earth radius in this unit  */ public double getEarthRadius() {     return GeoUtils.EARTH_SEMI_MAJOR_AXIS / meters. }
true;public;0;3;/**  * Measures a longitude in this unit  *  * @return length of a longitude degree in this unit  */ ;/**  * Measures a longitude in this unit  *  * @return length of a longitude degree in this unit  */ public double getDistancePerDegree() {     return GeoUtils.EARTH_EQUATOR / (360.0 * meters). }
true;public;1;3;/**  * Convert a value into meters  *  * @param distance distance in this unit  * @return value in meters  */ ;/**  * Convert a value into meters  *  * @param distance distance in this unit  * @return value in meters  */ public double toMeters(double distance) {     return convert(distance, this, DistanceUnit.METERS). }
true;public;1;3;/**  * Convert a value given in meters to a value of this unit  *  * @param distance distance in meters  * @return value in this unit  */ ;/**  * Convert a value given in meters to a value of this unit  *  * @param distance distance in meters  * @return value in this unit  */ public double fromMeters(double distance) {     return convert(distance, DistanceUnit.METERS, this). }
true;public;2;3;/**  * Convert a given value into another unit  *  * @param distance value in this unit  * @param unit source unit  * @return value in this unit  */ ;/**  * Convert a given value into another unit  *  * @param distance value in this unit  * @param unit source unit  * @return value in this unit  */ public double convert(double distance, DistanceUnit unit) {     return convert(distance, unit, this). }
true;public;1;3;/**  * Convert a value to a distance string  *  * @param distance value to convert  * @return String representation of the distance  */ ;/**  * Convert a value to a distance string  *  * @param distance value to convert  * @return String representation of the distance  */ public String toString(double distance) {     return distance + toString(). }
false;public;0;4;;@Override public String toString() {     return names[0]. }
true;public,static;3;7;/**  * Converts the given distance from the given DistanceUnit, to the given DistanceUnit  *  * @param distance Distance to convert  * @param from     Unit to convert the distance from  * @param to       Unit of distance to convert to  * @return Given distance converted to the distance in the given unit  */ ;/**  * Converts the given distance from the given DistanceUnit, to the given DistanceUnit  *  * @param distance Distance to convert  * @param from     Unit to convert the distance from  * @param to       Unit of distance to convert to  * @return Given distance converted to the distance in the given unit  */ public static double convert(double distance, DistanceUnit from, DistanceUnit to) {     if (from == to) {         return distance.     } else {         return distance * from.meters / to.meters.     } }
true;public,static;3;4;/**  * Parses a given distance and converts it to the specified unit.  *  * @param distance String defining a distance (value and unit)  * @param defaultUnit unit assumed if none is defined  * @param to unit of result  * @return parsed distance  */ ;/**  * Parses a given distance and converts it to the specified unit.  *  * @param distance String defining a distance (value and unit)  * @param defaultUnit unit assumed if none is defined  * @param to unit of result  * @return parsed distance  */ public static double parse(String distance, DistanceUnit defaultUnit, DistanceUnit to) {     Distance dist = Distance.parseDistance(distance, defaultUnit).     return convert(dist.value, dist.unit, to). }
true;public;2;3;/**  * Parses a given distance and converts it to this unit.  *  * @param distance String defining a distance (value and unit)  * @param defaultUnit unit to expect if none if provided  * @return parsed distance  */ ;/**  * Parses a given distance and converts it to this unit.  *  * @param distance String defining a distance (value and unit)  * @param defaultUnit unit to expect if none if provided  * @return parsed distance  */ public double parse(String distance, DistanceUnit defaultUnit) {     return parse(distance, defaultUnit, this). }
true;public,static;1;10;/**  * Convert a String to a {@link DistanceUnit}  *  * @param unit name of the unit  * @return unit matching the given name  * @throws IllegalArgumentException if no unit matches the given name  */ ;/**  * Convert a String to a {@link DistanceUnit}  *  * @param unit name of the unit  * @return unit matching the given name  * @throws IllegalArgumentException if no unit matches the given name  */ public static DistanceUnit fromString(String unit) {     for (DistanceUnit dunit : values()) {         for (String name : dunit.names) {             if (name.equals(unit)) {                 return dunit.             }         }     }     throw new IllegalArgumentException("No distance unit match [" + unit + "]"). }
true;public,static;2;10;/**  * Parses the suffix of a given distance string and return the corresponding {@link DistanceUnit}  *  * @param distance string representing a distance  * @param defaultUnit default unit to use, if no unit is provided by the string  * @return unit of the given distance  */ ;/**  * Parses the suffix of a given distance string and return the corresponding {@link DistanceUnit}  *  * @param distance string representing a distance  * @param defaultUnit default unit to use, if no unit is provided by the string  * @return unit of the given distance  */ public static DistanceUnit parseUnit(String distance, DistanceUnit defaultUnit) {     for (DistanceUnit unit : values()) {         for (String name : unit.names) {             if (distance.endsWith(name)) {                 return unit.             }         }     }     return defaultUnit. }
true;public;1;7;/**  * Converts a {@link Distance} value given in a specific {@link DistanceUnit} into  * a value equal to the specified value but in a other {@link DistanceUnit}.  *  * @param unit unit of the result  * @return converted distance  */ ;/**  * Converts a {@link Distance} value given in a specific {@link DistanceUnit} into  * a value equal to the specified value but in a other {@link DistanceUnit}.  *  * @param unit unit of the result  * @return converted distance  */ public Distance convert(DistanceUnit unit) {     if (this.unit == unit) {         return this.     } else {         return new Distance(DistanceUnit.convert(value, this.unit, unit), unit).     } }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     } else if (obj instanceof Distance) {         Distance other = (Distance) obj.         return DistanceUnit.convert(value, unit, other.unit) == other.value.     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return Double.valueOf(value * unit.meters).hashCode(). }
false;public;1;4;;@Override public int compareTo(Distance o) {     return Double.compare(value, DistanceUnit.convert(o.value, o.unit, unit)). }
false;public;0;4;;@Override public String toString() {     return unit.toString(value). }
true;public,static;1;3;/**  * Parse a {@link Distance} from a given String. If no unit is given  * <code>DistanceUnit.DEFAULT</code> will be used  *  * @param distance String defining a {@link Distance}  * @return parsed {@link Distance}  */ ;/**  * Parse a {@link Distance} from a given String. If no unit is given  * <code>DistanceUnit.DEFAULT</code> will be used  *  * @param distance String defining a {@link Distance}  * @return parsed {@link Distance}  */ public static Distance parseDistance(String distance) {     return parseDistance(distance, DEFAULT). }
true;private,static;2;10;/**  * Parse a {@link Distance} from a given String  *  * @param distance String defining a {@link Distance}  * @param defaultUnit {@link DistanceUnit} to be assumed  *          if not unit is provided in the first argument  * @return parsed {@link Distance}  */ ;/**  * Parse a {@link Distance} from a given String  *  * @param distance String defining a {@link Distance}  * @param defaultUnit {@link DistanceUnit} to be assumed  *          if not unit is provided in the first argument  * @return parsed {@link Distance}  */ private static Distance parseDistance(String distance, DistanceUnit defaultUnit) {     for (DistanceUnit unit : values()) {         for (String name : unit.names) {             if (distance.endsWith(name)) {                 return new Distance(Double.parseDouble(distance.substring(0, distance.length() - name.length())), unit).             }         }     }     return new Distance(Double.parseDouble(distance), defaultUnit). }
true;public,static;1;8;/**  * Read a {@link DistanceUnit} from a {@link StreamInput}.  *  * @param in {@link StreamInput} to read the {@link DistanceUnit} from  * @return {@link DistanceUnit} read from the {@link StreamInput}  * @throws IOException if no unit can be read from the {@link StreamInput}  * @throws IllegalArgumentException if no matching {@link DistanceUnit} can be found  */ ;/**  * Read a {@link DistanceUnit} from a {@link StreamInput}.  *  * @param in {@link StreamInput} to read the {@link DistanceUnit} from  * @return {@link DistanceUnit} read from the {@link StreamInput}  * @throws IOException if no unit can be read from the {@link StreamInput}  * @throws IllegalArgumentException if no matching {@link DistanceUnit} can be found  */ public static DistanceUnit readFromStream(StreamInput in) throws IOException {     byte b = in.readByte().     if (b < 0 || b >= values().length) {         throw new IllegalArgumentException("No type for distance unit matching [" + b + "]").     }     return values()[b]. }
true;public;1;4;/**  * Write a {@link DistanceUnit} to a {@link StreamOutput}.  *  * @param out {@link StreamOutput} to write to  */ ;/**  * Write a {@link DistanceUnit} to a {@link StreamOutput}.  *  * @param out {@link StreamOutput} to write to  */ @Override public void writeTo(StreamOutput out) throws IOException {     out.writeByte((byte) this.ordinal()). }
