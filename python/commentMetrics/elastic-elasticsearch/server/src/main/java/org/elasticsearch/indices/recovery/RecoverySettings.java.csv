commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public RateLimiter rateLimiter() {     return rateLimiter. }
false;public;0;3;;public TimeValue retryDelayNetwork() {     return retryDelayNetwork. }
false;public;0;3;;public TimeValue retryDelayStateSync() {     return retryDelayStateSync. }
false;public;0;3;;public TimeValue activityTimeout() {     return activityTimeout. }
false;public;0;3;;public TimeValue internalActionTimeout() {     return internalActionTimeout. }
false;public;0;3;;public TimeValue internalActionLongTimeout() {     return internalActionLongTimeout. }
false;public;0;1;;public ByteSizeValue getChunkSize() {     return chunkSize. }
false;public;1;6;;public void setChunkSize(ByteSizeValue chunkSize) {     // only settable for tests     if (chunkSize.bytesAsInt() <= 0) {         throw new IllegalArgumentException("chunkSize must be > 0").     }     this.chunkSize = chunkSize. }
false;public;1;3;;public void setRetryDelayStateSync(TimeValue retryDelayStateSync) {     this.retryDelayStateSync = retryDelayStateSync. }
false;public;1;3;;public void setRetryDelayNetwork(TimeValue retryDelayNetwork) {     this.retryDelayNetwork = retryDelayNetwork. }
false;public;1;3;;public void setActivityTimeout(TimeValue activityTimeout) {     this.activityTimeout = activityTimeout. }
false;public;1;3;;public void setInternalActionTimeout(TimeValue internalActionTimeout) {     this.internalActionTimeout = internalActionTimeout. }
false;public;1;3;;public void setInternalActionLongTimeout(TimeValue internalActionLongTimeout) {     this.internalActionLongTimeout = internalActionLongTimeout. }
false;private;1;10;;private void setMaxBytesPerSec(ByteSizeValue maxBytesPerSec) {     this.maxBytesPerSec = maxBytesPerSec.     if (maxBytesPerSec.getBytes() <= 0) {         rateLimiter = null.     } else if (rateLimiter != null) {         rateLimiter.setMBPerSec(maxBytesPerSec.getMbFrac()).     } else {         rateLimiter = new SimpleRateLimiter(maxBytesPerSec.getMbFrac()).     } }
false;public;0;3;;public int getMaxConcurrentFileChunks() {     return maxConcurrentFileChunks. }
false;private;1;3;;private void setMaxConcurrentFileChunks(int maxConcurrentFileChunks) {     this.maxConcurrentFileChunks = maxConcurrentFileChunks. }
