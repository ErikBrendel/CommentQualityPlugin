# id;timestamp;commentText;codeText;commentWords;codeWords
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1524684173;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1527096592;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1528762805;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1540486836;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1540583181;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1541543628;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1542402283;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1543342759;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1543512976;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1544035746;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1544210484;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1545358001;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            searchSourceBuilder.trackTotalHits(request.paramAsBoolean("track_total_hits", true))__        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,search,source,builder,track,total,hits,request,param,as,boolean,true,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1546630609;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            if (Booleans.isBoolean(request.param("track_total_hits"))) {_                searchSourceBuilder.trackTotalHits(_                    request.paramAsBoolean("track_total_hits", true)_                )__            } else {_                searchSourceBuilder.trackTotalHitsUpTo(_                    request.paramAsInt("track_total_hits", SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO)_                )__            }_        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,if,booleans,is,boolean,request,param,search,source,builder,track,total,hits,request,param,as,boolean,true,else,search,source,builder,track,total,hits,up,to,request,param,as,int,search,context,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1548230518;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("seq_no_primary_term")) {_            searchSourceBuilder.seqNoAndPrimaryTerm(request.paramAsBoolean("seq_no_primary_term", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }__        if (request.hasParam("track_total_hits")) {_            if (Booleans.isBoolean(request.param("track_total_hits"))) {_                searchSourceBuilder.trackTotalHits(_                    request.paramAsBoolean("track_total_hits", true)_                )__            } else {_                searchSourceBuilder.trackTotalHitsUpTo(_                    request.paramAsInt("track_total_hits", SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO)_                )__            }_        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,search,source,builder,seq,no,and,primary,term,request,param,as,boolean,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,if,booleans,is,boolean,request,param,search,source,builder,track,total,hits,request,param,as,boolean,true,else,search,source,builder,track,total,hits,up,to,request,param,as,int,search,context,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1548420339;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("seq_no_primary_term")) {_            searchSourceBuilder.seqNoAndPrimaryTerm(request.paramAsBoolean("seq_no_primary_term", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }___        if (request.hasParam("track_total_hits")) {_            if (Booleans.isBoolean(request.param("track_total_hits"))) {_                searchSourceBuilder.trackTotalHits(_                    request.paramAsBoolean("track_total_hits", true)_                )__            } else {_                searchSourceBuilder.trackTotalHitsUpTo(_                    request.paramAsInt("track_total_hits", SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO)_                )__            }_        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,search,source,builder,seq,no,and,primary,term,request,param,as,boolean,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,if,booleans,is,boolean,request,param,search,source,builder,track,total,hits,request,param,as,boolean,true,else,search,source,builder,track,total,hits,up,to,request,param,as,int,search,context,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize);1548943934;Parses the rest request on top of the SearchSourceBuilder, preserving_values that are not overridden by the rest request.;private static void parseSearchSource(final SearchSourceBuilder searchSourceBuilder, RestRequest request, IntConsumer setSize) {_        QueryBuilder queryBuilder = RestActions.urlParamsToQueryBuilder(request)__        if (queryBuilder != null) {_            searchSourceBuilder.query(queryBuilder)__        }__        int from = request.paramAsInt("from", -1)__        if (from != -1) {_            searchSourceBuilder.from(from)__        }_        int size = request.paramAsInt("size", -1)__        if (size != -1) {_            setSize.accept(size)__        }__        if (request.hasParam("explain")) {_            searchSourceBuilder.explain(request.paramAsBoolean("explain", null))__        }_        if (request.hasParam("version")) {_            searchSourceBuilder.version(request.paramAsBoolean("version", null))__        }_        if (request.hasParam("seq_no_primary_term")) {_            searchSourceBuilder.seqNoAndPrimaryTerm(request.paramAsBoolean("seq_no_primary_term", null))__        }_        if (request.hasParam("timeout")) {_            searchSourceBuilder.timeout(request.paramAsTime("timeout", null))__        }_        if (request.hasParam("terminate_after")) {_            int terminateAfter = request.paramAsInt("terminate_after",_                    SearchContext.DEFAULT_TERMINATE_AFTER)__            if (terminateAfter < 0) {_                throw new IllegalArgumentException("terminateAfter must be > 0")__            } else if (terminateAfter > 0) {_                searchSourceBuilder.terminateAfter(terminateAfter)__            }_        }__        StoredFieldsContext storedFieldsContext =_            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request)__        if (storedFieldsContext != null) {_            searchSourceBuilder.storedFields(storedFieldsContext)__        }_        String sDocValueFields = request.param("docvalue_fields")__        if (sDocValueFields != null) {_            if (Strings.hasText(sDocValueFields)) {_                String[] sFields = Strings.splitStringByCommaToArray(sDocValueFields)__                for (String field : sFields) {_                    searchSourceBuilder.docValueField(field, null)__                }_            }_        }_        FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request)__        if (fetchSourceContext != null) {_            searchSourceBuilder.fetchSource(fetchSourceContext)__        }__        if (request.hasParam("track_scores")) {_            searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores", false))__        }___        if (request.hasParam("track_total_hits")) {_            if (Booleans.isBoolean(request.param("track_total_hits"))) {_                searchSourceBuilder.trackTotalHits(_                    request.paramAsBoolean("track_total_hits", true)_                )__            } else {_                searchSourceBuilder.trackTotalHitsUpTo(_                    request.paramAsInt("track_total_hits", SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO)_                )__            }_        }__        String sSorts = request.param("sort")__        if (sSorts != null) {_            String[] sorts = Strings.splitStringByCommaToArray(sSorts)__            for (String sort : sorts) {_                int delimiter = sort.lastIndexOf(":")__                if (delimiter != -1) {_                    String sortField = sort.substring(0, delimiter)__                    String reverse = sort.substring(delimiter + 1)__                    if ("asc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.ASC)__                    } else if ("desc".equals(reverse)) {_                        searchSourceBuilder.sort(sortField, SortOrder.DESC)__                    }_                } else {_                    searchSourceBuilder.sort(sort)__                }_            }_        }__        String sStats = request.param("stats")__        if (sStats != null) {_            searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)))__        }__        String suggestField = request.param("suggest_field")__        if (suggestField != null) {_            String suggestText = request.param("suggest_text", request.param("q"))__            int suggestSize = request.paramAsInt("suggest_size", 5)__            String suggestMode = request.param("suggest_mode")__            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,_                    termSuggestion(suggestField)_                        .text(suggestText).size(suggestSize)_                        .suggestMode(SuggestMode.resolve(suggestMode))))__        }_    };parses,the,rest,request,on,top,of,the,search,source,builder,preserving,values,that,are,not,overridden,by,the,rest,request;private,static,void,parse,search,source,final,search,source,builder,search,source,builder,rest,request,request,int,consumer,set,size,query,builder,query,builder,rest,actions,url,params,to,query,builder,request,if,query,builder,null,search,source,builder,query,query,builder,int,from,request,param,as,int,from,1,if,from,1,search,source,builder,from,from,int,size,request,param,as,int,size,1,if,size,1,set,size,accept,size,if,request,has,param,explain,search,source,builder,explain,request,param,as,boolean,explain,null,if,request,has,param,version,search,source,builder,version,request,param,as,boolean,version,null,if,request,has,param,search,source,builder,seq,no,and,primary,term,request,param,as,boolean,null,if,request,has,param,timeout,search,source,builder,timeout,request,param,as,time,timeout,null,if,request,has,param,int,terminate,after,request,param,as,int,search,context,if,terminate,after,0,throw,new,illegal,argument,exception,terminate,after,must,be,0,else,if,terminate,after,0,search,source,builder,terminate,after,terminate,after,stored,fields,context,stored,fields,context,stored,fields,context,from,rest,request,search,source,builder,get,preferred,name,request,if,stored,fields,context,null,search,source,builder,stored,fields,stored,fields,context,string,s,doc,value,fields,request,param,if,s,doc,value,fields,null,if,strings,has,text,s,doc,value,fields,string,s,fields,strings,split,string,by,comma,to,array,s,doc,value,fields,for,string,field,s,fields,search,source,builder,doc,value,field,field,null,fetch,source,context,fetch,source,context,fetch,source,context,parse,from,rest,request,request,if,fetch,source,context,null,search,source,builder,fetch,source,fetch,source,context,if,request,has,param,search,source,builder,track,scores,request,param,as,boolean,false,if,request,has,param,if,booleans,is,boolean,request,param,search,source,builder,track,total,hits,request,param,as,boolean,true,else,search,source,builder,track,total,hits,up,to,request,param,as,int,search,context,string,s,sorts,request,param,sort,if,s,sorts,null,string,sorts,strings,split,string,by,comma,to,array,s,sorts,for,string,sort,sorts,int,delimiter,sort,last,index,of,if,delimiter,1,string,sort,field,sort,substring,0,delimiter,string,reverse,sort,substring,delimiter,1,if,asc,equals,reverse,search,source,builder,sort,sort,field,sort,order,asc,else,if,desc,equals,reverse,search,source,builder,sort,sort,field,sort,order,desc,else,search,source,builder,sort,sort,string,s,stats,request,param,stats,if,s,stats,null,search,source,builder,stats,arrays,as,list,strings,split,string,by,comma,to,array,s,stats,string,suggest,field,request,param,if,suggest,field,null,string,suggest,text,request,param,request,param,q,int,suggest,size,request,param,as,int,5,string,suggest,mode,request,param,search,source,builder,suggest,new,suggest,builder,add,suggestion,suggest,field,term,suggestion,suggest,field,text,suggest,text,size,suggest,size,suggest,mode,suggest,mode,resolve,suggest,mode
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1524684173;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        final boolean includeTypeName = request.paramAsBoolean("include_type_name", true)__        String types = request.param("type")__        if (types != null) {_            if (includeTypeName == false) {_                throw new IllegalArgumentException("You may only use the [include_type_name=false] option with the search API with the " +_                        "[{index}/_search] endpoint.")__            }_            DEPRECATION_LOGGER.deprecated("The {index}/{type}/_search endpoint is deprecated, use {index}/_search instead")__        }_        searchRequest.types(Strings.splitStringByCommaToArray(types))__        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,final,boolean,include,type,name,request,param,as,boolean,true,string,types,request,param,type,if,types,null,if,include,type,name,false,throw,new,illegal,argument,exception,you,may,only,use,the,false,option,with,the,search,api,with,the,index,endpoint,deprecated,the,index,type,endpoint,is,deprecated,use,index,instead,search,request,types,strings,split,string,by,comma,to,array,types,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1527096592;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        final boolean includeTypeName = request.paramAsBoolean("include_type_name", true)__        String types = request.param("type")__        if (types != null) {_            if (includeTypeName == false) {_                throw new IllegalArgumentException("You may only use the [include_type_name=false] option with the search API with the " +_                        "[{index}/_search] endpoint.")__            }_            DEPRECATION_LOGGER.deprecated("The {index}/{type}/_search endpoint is deprecated, use {index}/_search instead")__        }_        searchRequest.types(Strings.splitStringByCommaToArray(types))__        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,final,boolean,include,type,name,request,param,as,boolean,true,string,types,request,param,type,if,types,null,if,include,type,name,false,throw,new,illegal,argument,exception,you,may,only,use,the,false,option,with,the,search,api,with,the,index,endpoint,deprecated,the,index,type,endpoint,is,deprecated,use,index,instead,search,request,types,strings,split,string,by,comma,to,array,types,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1528762805;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        final boolean includeTypeName = request.paramAsBoolean("include_type_name", true)__        String types = request.param("type")__        if (types != null) {_            if (includeTypeName == false) {_                throw new IllegalArgumentException("You may only use the [include_type_name=false] option with the search API with the " +_                        "[{index}/_search] endpoint.")__            }_            DEPRECATION_LOGGER.deprecated("The {index}/{type}/_search endpoint is deprecated, use {index}/_search instead")__        }_        searchRequest.types(Strings.splitStringByCommaToArray(types))__        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,final,boolean,include,type,name,request,param,as,boolean,true,string,types,request,param,type,if,types,null,if,include,type,name,false,throw,new,illegal,argument,exception,you,may,only,use,the,false,option,with,the,search,api,with,the,index,endpoint,deprecated,the,index,type,endpoint,is,deprecated,use,index,instead,search,request,types,strings,split,string,by,comma,to,array,types,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1540486836;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        final boolean includeTypeName = request.paramAsBoolean("include_type_name", true)__        String types = request.param("type")__        if (types != null) {_            if (includeTypeName == false) {_                throw new IllegalArgumentException("You may only use the [include_type_name=false] option with the search API with the " +_                        "[{index}/_search] endpoint.")__            }_            DEPRECATION_LOGGER.deprecated("The {index}/{type}/_search endpoint is deprecated, use {index}/_search instead")__        }_        searchRequest.types(Strings.splitStringByCommaToArray(types))__        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,final,boolean,include,type,name,request,param,as,boolean,true,string,types,request,param,type,if,types,null,if,include,type,name,false,throw,new,illegal,argument,exception,you,may,only,use,the,false,option,with,the,search,api,with,the,index,endpoint,deprecated,the,index,type,endpoint,is,deprecated,use,index,instead,search,request,types,strings,split,string,by,comma,to,array,types,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1540583181;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        final boolean includeTypeName = request.paramAsBoolean("include_type_name", true)__        String types = request.param("type")__        if (types != null) {_            if (includeTypeName == false) {_                throw new IllegalArgumentException("You may only use the [include_type_name=false] option with the search API with the " +_                        "[{index}/_search] endpoint.")__            }_            deprecationLogger.deprecated("The {index}/{type}/_search endpoint is deprecated, use {index}/_search instead")__        }_        searchRequest.types(Strings.splitStringByCommaToArray(types))__        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,final,boolean,include,type,name,request,param,as,boolean,true,string,types,request,param,type,if,types,null,if,include,type,name,false,throw,new,illegal,argument,exception,you,may,only,use,the,false,option,with,the,search,api,with,the,index,endpoint,deprecation,logger,deprecated,the,index,type,endpoint,is,deprecated,use,index,instead,search,request,types,strings,split,string,by,comma,to,array,types,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1541543628;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        String types = request.param("type")__        if (types != null) {_            deprecationLogger.deprecated("The {index}/{type}/_search endpoint is deprecated, use {index}/_search instead")__        }_        searchRequest.types(Strings.splitStringByCommaToArray(types))__        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,string,types,request,param,type,if,types,null,deprecation,logger,deprecated,the,index,type,endpoint,is,deprecated,use,index,instead,search,request,types,strings,split,string,by,comma,to,array,types,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1542402283;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1543342759;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1543512976;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1544035746;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1544210484;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecatedAndMaybeLog("search_with_types", TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,and,maybe,log,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1545358001;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecatedAndMaybeLog("search_with_types", TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,and,maybe,log,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1546630609;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecatedAndMaybeLog("search_with_types", TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__        checkRestTotalHits(request, searchRequest)__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,and,maybe,log,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options,check,rest,total,hits,request,search,request
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1548230518;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecatedAndMaybeLog("search_with_types", TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__        checkRestTotalHits(request, searchRequest)__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,and,maybe,log,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options,check,rest,total,hits,request,search,request
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1548420339;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecatedAndMaybeLog("search_with_types", TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))___        checkRestTotalHits(request, searchRequest)__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,and,maybe,log,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options,check,rest,total,hits,request,search,request
RestSearchAction -> public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,                                           XContentParser requestContentParser,                                           IntConsumer setSize) throws IOException;1548943934;Parses the rest request on top of the SearchRequest, preserving values that are not overridden by the rest request.__@param requestContentParser body of the request to read. This method does not attempt to read the body from the {@code request}_parameter_@param setSize how the size url parameter is handled. {@code udpate_by_query} and regular search differ here.;public static void parseSearchRequest(SearchRequest searchRequest, RestRequest request,_                                          XContentParser requestContentParser,_                                          IntConsumer setSize) throws IOException {__        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        searchRequest.indices(Strings.splitStringByCommaToArray(request.param("index")))__        if (requestContentParser != null) {_            searchRequest.source().parseXContent(requestContentParser, true)__        }__        final int batchedReduceSize = request.paramAsInt("batched_reduce_size", searchRequest.getBatchedReduceSize())__        searchRequest.setBatchedReduceSize(batchedReduceSize)__        searchRequest.setPreFilterShardSize(request.paramAsInt("pre_filter_shard_size", searchRequest.getPreFilterShardSize()))___        if (request.hasParam("max_concurrent_shard_requests")) {_            _            _            final int maxConcurrentShardRequests = request.paramAsInt("max_concurrent_shard_requests",_                searchRequest.getMaxConcurrentShardRequests())__            searchRequest.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__        }__        if (request.hasParam("allow_partial_search_results")) {_            _            searchRequest.allowPartialSearchResults(request.paramAsBoolean("allow_partial_search_results", null))__        }__        _        _        _        String searchType = request.param("search_type")__        if ("query_and_fetch".equals(searchType) ||_                "dfs_query_and_fetch".equals(searchType)) {_            throw new IllegalArgumentException("Unsupported search type [" + searchType + "]")__        } else {_            searchRequest.searchType(searchType)__        }_        parseSearchSource(searchRequest.source(), request, setSize)__        searchRequest.requestCache(request.paramAsBoolean("request_cache", null))___        String scroll = request.param("scroll")__        if (scroll != null) {_            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")))__        }__        if (request.hasParam("type")) {_            deprecationLogger.deprecatedAndMaybeLog("search_with_types", TYPES_DEPRECATION_MESSAGE)__            searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")))__        }_        searchRequest.routing(request.param("routing"))__        searchRequest.preference(request.param("preference"))__        searchRequest.indicesOptions(IndicesOptions.fromRequest(request, searchRequest.indicesOptions()))__        searchRequest.setCcsMinimizeRoundtrips(request.paramAsBoolean("ccs_minimize_roundtrips", true))___        checkRestTotalHits(request, searchRequest)__    };parses,the,rest,request,on,top,of,the,search,request,preserving,values,that,are,not,overridden,by,the,rest,request,param,request,content,parser,body,of,the,request,to,read,this,method,does,not,attempt,to,read,the,body,from,the,code,request,parameter,param,set,size,how,the,size,url,parameter,is,handled,code,and,regular,search,differ,here;public,static,void,parse,search,request,search,request,search,request,rest,request,request,xcontent,parser,request,content,parser,int,consumer,set,size,throws,ioexception,if,search,request,source,null,search,request,source,new,search,source,builder,search,request,indices,strings,split,string,by,comma,to,array,request,param,index,if,request,content,parser,null,search,request,source,parse,xcontent,request,content,parser,true,final,int,batched,reduce,size,request,param,as,int,search,request,get,batched,reduce,size,search,request,set,batched,reduce,size,batched,reduce,size,search,request,set,pre,filter,shard,size,request,param,as,int,search,request,get,pre,filter,shard,size,if,request,has,param,final,int,max,concurrent,shard,requests,request,param,as,int,search,request,get,max,concurrent,shard,requests,search,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,if,request,has,param,search,request,allow,partial,search,results,request,param,as,boolean,null,string,search,type,request,param,if,equals,search,type,equals,search,type,throw,new,illegal,argument,exception,unsupported,search,type,search,type,else,search,request,search,type,search,type,parse,search,source,search,request,source,request,set,size,search,request,request,cache,request,param,as,boolean,null,string,scroll,request,param,scroll,if,scroll,null,search,request,scroll,new,scroll,parse,time,value,scroll,null,scroll,if,request,has,param,type,deprecation,logger,deprecated,and,maybe,log,search,request,types,strings,split,string,by,comma,to,array,request,param,type,search,request,routing,request,param,routing,search,request,preference,request,param,preference,search,request,indices,options,indices,options,from,request,request,search,request,indices,options,search,request,set,ccs,minimize,roundtrips,request,param,as,boolean,true,check,rest,total,hits,request,search,request
RestSearchAction -> public static void checkRestTotalHits(RestRequest restRequest, SearchRequest searchRequest);1546630609;Throws an {@link IllegalArgumentException} if {@link #TOTAL_HITS_AS_INT_PARAM}_is used in conjunction with a lower bound value for the track_total_hits option.;public static void checkRestTotalHits(RestRequest restRequest, SearchRequest searchRequest) {_        int trackTotalHitsUpTo = searchRequest.source() == null ?_            SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO : searchRequest.source().trackTotalHitsUpTo()__        if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_ACCURATE ||_                trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_            return __        }_        if (restRequest.paramAsBoolean(TOTAL_HITS_AS_INT_PARAM, false)) {_            throw new IllegalArgumentException("[" + TOTAL_HITS_AS_INT_PARAM + "] cannot be used " +_                "if the tracking of total hits is not accurate, got " + trackTotalHitsUpTo)__        }_    };throws,an,link,illegal,argument,exception,if,link,is,used,in,conjunction,with,a,lower,bound,value,for,the,option;public,static,void,check,rest,total,hits,rest,request,rest,request,search,request,search,request,int,track,total,hits,up,to,search,request,source,null,search,context,search,request,source,track,total,hits,up,to,if,track,total,hits,up,to,search,context,track,total,hits,up,to,search,context,return,if,rest,request,param,as,boolean,false,throw,new,illegal,argument,exception,cannot,be,used,if,the,tracking,of,total,hits,is,not,accurate,got,track,total,hits,up,to
RestSearchAction -> public static void checkRestTotalHits(RestRequest restRequest, SearchRequest searchRequest);1548230518;Throws an {@link IllegalArgumentException} if {@link #TOTAL_HITS_AS_INT_PARAM}_is used in conjunction with a lower bound value for the track_total_hits option.;public static void checkRestTotalHits(RestRequest restRequest, SearchRequest searchRequest) {_        int trackTotalHitsUpTo = searchRequest.source() == null ?_            SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO : searchRequest.source().trackTotalHitsUpTo()__        if (trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_ACCURATE ||_                trackTotalHitsUpTo == SearchContext.TRACK_TOTAL_HITS_DISABLED) {_            return __        }_        if (restRequest.paramAsBoolean(TOTAL_HITS_AS_INT_PARAM, false)) {_            throw new IllegalArgumentException("[" + TOTAL_HITS_AS_INT_PARAM + "] cannot be used " +_                "if the tracking of total hits is not accurate, got " + trackTotalHitsUpTo)__        }_    };throws,an,link,illegal,argument,exception,if,link,is,used,in,conjunction,with,a,lower,bound,value,for,the,option;public,static,void,check,rest,total,hits,rest,request,rest,request,search,request,search,request,int,track,total,hits,up,to,search,request,source,null,search,context,search,request,source,track,total,hits,up,to,if,track,total,hits,up,to,search,context,track,total,hits,up,to,search,context,return,if,rest,request,param,as,boolean,false,throw,new,illegal,argument,exception,cannot,be,used,if,the,tracking,of,total,hits,is,not,accurate,got,track,total,hits,up,to
RestSearchAction -> public static void checkRestTotalHits(RestRequest restRequest, SearchRequest searchRequest);1548420339;Modify the search request to accurately count the total hits that match the query_if {@link #TOTAL_HITS_AS_INT_PARAM} is set.__@throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}_is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})_for the track_total_hits option.;public static void checkRestTotalHits(RestRequest restRequest, SearchRequest searchRequest) {_        boolean totalHitsAsInt = restRequest.paramAsBoolean(TOTAL_HITS_AS_INT_PARAM, false)__        if (totalHitsAsInt == false) {_            return__        }_        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo()__        if (trackTotalHitsUpTo == null) {_            searchRequest.source().trackTotalHits(true)__        } else if (trackTotalHitsUpTo != SearchContext.TRACK_TOTAL_HITS_ACCURATE_                && trackTotalHitsUpTo != SearchContext.TRACK_TOTAL_HITS_DISABLED) {_            throw new IllegalArgumentException("[" + TOTAL_HITS_AS_INT_PARAM + "] cannot be used " +_                "if the tracking of total hits is not accurate, got " + trackTotalHitsUpTo)__        }_    };modify,the,search,request,to,accurately,count,the,total,hits,that,match,the,query,if,link,is,set,throws,illegal,argument,exception,if,link,is,used,in,conjunction,with,a,lower,bound,value,other,than,link,search,context,for,the,option;public,static,void,check,rest,total,hits,rest,request,rest,request,search,request,search,request,boolean,total,hits,as,int,rest,request,param,as,boolean,false,if,total,hits,as,int,false,return,if,search,request,source,null,search,request,source,new,search,source,builder,integer,track,total,hits,up,to,search,request,source,track,total,hits,up,to,if,track,total,hits,up,to,null,search,request,source,track,total,hits,true,else,if,track,total,hits,up,to,search,context,track,total,hits,up,to,search,context,throw,new,illegal,argument,exception,cannot,be,used,if,the,tracking,of,total,hits,is,not,accurate,got,track,total,hits,up,to
RestSearchAction -> public static void checkRestTotalHits(RestRequest restRequest, SearchRequest searchRequest);1548943934;Modify the search request to accurately count the total hits that match the query_if {@link #TOTAL_HITS_AS_INT_PARAM} is set.__@throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}_is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})_for the track_total_hits option.;public static void checkRestTotalHits(RestRequest restRequest, SearchRequest searchRequest) {_        boolean totalHitsAsInt = restRequest.paramAsBoolean(TOTAL_HITS_AS_INT_PARAM, false)__        if (totalHitsAsInt == false) {_            return__        }_        if (searchRequest.source() == null) {_            searchRequest.source(new SearchSourceBuilder())__        }_        Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo()__        if (trackTotalHitsUpTo == null) {_            searchRequest.source().trackTotalHits(true)__        } else if (trackTotalHitsUpTo != SearchContext.TRACK_TOTAL_HITS_ACCURATE_                && trackTotalHitsUpTo != SearchContext.TRACK_TOTAL_HITS_DISABLED) {_            throw new IllegalArgumentException("[" + TOTAL_HITS_AS_INT_PARAM + "] cannot be used " +_                "if the tracking of total hits is not accurate, got " + trackTotalHitsUpTo)__        }_    };modify,the,search,request,to,accurately,count,the,total,hits,that,match,the,query,if,link,is,set,throws,illegal,argument,exception,if,link,is,used,in,conjunction,with,a,lower,bound,value,other,than,link,search,context,for,the,option;public,static,void,check,rest,total,hits,rest,request,rest,request,search,request,search,request,boolean,total,hits,as,int,rest,request,param,as,boolean,false,if,total,hits,as,int,false,return,if,search,request,source,null,search,request,source,new,search,source,builder,integer,track,total,hits,up,to,search,request,source,track,total,hits,up,to,if,track,total,hits,up,to,null,search,request,source,track,total,hits,true,else,if,track,total,hits,up,to,search,context,track,total,hits,up,to,search,context,throw,new,illegal,argument,exception,cannot,be,used,if,the,tracking,of,total,hits,is,not,accurate,got,track,total,hits,up,to
