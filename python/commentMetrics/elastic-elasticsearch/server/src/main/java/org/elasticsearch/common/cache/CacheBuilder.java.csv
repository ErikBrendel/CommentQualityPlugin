commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static <K, V> CacheBuilder<K, V> builder() {     return new CacheBuilder<>(). }
false;public;1;7;;public CacheBuilder<K, V> setMaximumWeight(long maximumWeight) {     if (maximumWeight < 0) {         throw new IllegalArgumentException("maximumWeight < 0").     }     this.maximumWeight = maximumWeight.     return this. }
true;public;1;9;/**  * Sets the amount of time before an entry in the cache expires after it was last accessed.  *  * @param expireAfterAccess The amount of time before an entry expires after it was last accessed. Must not be {@code null} and must  *                          be greater than 0.  */ ;/**  * Sets the amount of time before an entry in the cache expires after it was last accessed.  *  * @param expireAfterAccess The amount of time before an entry expires after it was last accessed. Must not be {@code null} and must  *                          be greater than 0.  */ public CacheBuilder<K, V> setExpireAfterAccess(TimeValue expireAfterAccess) {     Objects.requireNonNull(expireAfterAccess).     final long expireAfterAccessNanos = expireAfterAccess.getNanos().     if (expireAfterAccessNanos <= 0) {         throw new IllegalArgumentException("expireAfterAccess <= 0").     }     this.expireAfterAccessNanos = expireAfterAccessNanos.     return this. }
true;public;1;9;/**  * Sets the amount of time before an entry in the cache expires after it was written.  *  * @param expireAfterWrite The amount of time before an entry expires after it was written. Must not be {@code null} and must be  *                         greater than 0.  */ ;/**  * Sets the amount of time before an entry in the cache expires after it was written.  *  * @param expireAfterWrite The amount of time before an entry expires after it was written. Must not be {@code null} and must be  *                         greater than 0.  */ public CacheBuilder<K, V> setExpireAfterWrite(TimeValue expireAfterWrite) {     Objects.requireNonNull(expireAfterWrite).     final long expireAfterWriteNanos = expireAfterWrite.getNanos().     if (expireAfterWriteNanos <= 0) {         throw new IllegalArgumentException("expireAfterWrite <= 0").     }     this.expireAfterWriteNanos = expireAfterWriteNanos.     return this. }
false;public;1;5;;public CacheBuilder<K, V> weigher(ToLongBiFunction<K, V> weigher) {     Objects.requireNonNull(weigher).     this.weigher = weigher.     return this. }
false;public;1;5;;public CacheBuilder<K, V> removalListener(RemovalListener<K, V> removalListener) {     Objects.requireNonNull(removalListener).     this.removalListener = removalListener.     return this. }
false;public;0;19;;public Cache<K, V> build() {     Cache<K, V> cache = new Cache<>().     if (maximumWeight != -1) {         cache.setMaximumWeight(maximumWeight).     }     if (expireAfterAccessNanos != -1) {         cache.setExpireAfterAccessNanos(expireAfterAccessNanos).     }     if (expireAfterWriteNanos != -1) {         cache.setExpireAfterWriteNanos(expireAfterWriteNanos).     }     if (weigher != null) {         cache.setWeigher(weigher).     }     if (removalListener != null) {         cache.setRemovalListener(removalListener).     }     return cache. }
