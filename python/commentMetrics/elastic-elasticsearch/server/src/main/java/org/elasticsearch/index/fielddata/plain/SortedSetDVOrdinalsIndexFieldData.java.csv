commented;modifiers;parameterAmount;loc;comment;code
false;public;4;18;;@Override public SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse) {     XFieldComparatorSource source = new BytesRefFieldComparatorSource(this, missingValue, sortMode, nested).     /**      * Check if we can use a simple {@link SortedSetSortField} compatible with index sorting and      * returns a custom sort field otherwise.      */     if (nested != null || (sortMode != MultiValueMode.MAX && sortMode != MultiValueMode.MIN) || (source.sortMissingLast(missingValue) == false && source.sortMissingFirst(missingValue) == false)) {         return new SortField(getFieldName(), source, reverse).     }     SortField sortField = new SortedSetSortField(fieldName, reverse, sortMode == MultiValueMode.MAX ? SortedSetSelector.Type.MAX : SortedSetSelector.Type.MIN).     sortField.setMissingValue(source.sortMissingLast(missingValue) ^ reverse ? SortedSetSortField.STRING_LAST : SortedSetSortField.STRING_FIRST).     return sortField. }
false;public;1;4;;@Override public AtomicOrdinalsFieldData load(LeafReaderContext context) {     return new SortedSetDVBytesAtomicFieldData(context.reader(), fieldName, scriptFunction). }
false;public;1;4;;@Override public AtomicOrdinalsFieldData loadDirect(LeafReaderContext context) throws Exception {     return load(context). }
false;public;1;34;;@Override public IndexOrdinalsFieldData loadGlobal(DirectoryReader indexReader) {     if (indexReader.leaves().size() <= 1) {         // ordinals are already global         return this.     }     boolean fieldFound = false.     for (LeafReaderContext context : indexReader.leaves()) {         if (context.reader().getFieldInfos().fieldInfo(getFieldName()) != null) {             fieldFound = true.             break.         }     }     if (fieldFound == false) {         // The next time the field is found, we do cache.         try {             return GlobalOrdinalsBuilder.buildEmpty(indexSettings, indexReader, this).         } catch (IOException e) {             throw new RuntimeException(e).         }     }     try {         return cache.load(indexReader, this).     } catch (Exception e) {         if (e instanceof ElasticsearchException) {             throw (ElasticsearchException) e.         } else {             throw new ElasticsearchException(e).         }     } }
false;public;1;4;;@Override public IndexOrdinalsFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception {     return GlobalOrdinalsBuilder.build(indexReader, this, indexSettings, breakerService, logger, scriptFunction). }
false;public;0;4;;@Override public OrdinalMap getOrdinalMap() {     return null. }
