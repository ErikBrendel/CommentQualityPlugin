commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;int parse(XContentParser parser) throws IOException.
false;public,static;2;9;;public static ObjectParser<GeoGridAggregationBuilder, Void> createParser(String name, PrecisionParser precisionParser) {     ObjectParser<GeoGridAggregationBuilder, Void> parser = new ObjectParser<>(name).     ValuesSourceParserHelper.declareGeoFields(parser, false, false).     parser.declareField((p, builder, context) -> builder.precision(precisionParser.parse(p)), FIELD_PRECISION, org.elasticsearch.common.xcontent.ObjectParser.ValueType.INT).     parser.declareInt(GeoGridAggregationBuilder::size, FIELD_SIZE).     parser.declareInt(GeoGridAggregationBuilder::shardSize, FIELD_SHARD_SIZE).     return parser. }
false;protected;1;6;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeVInt(precision).     out.writeVInt(requiredSize).     out.writeVInt(shardSize). }
true;public,abstract;1;1;/**  * method to validate and set the precision value  * @param precision the precision to set for the aggregation  * @return the {@link GeoGridAggregationBuilder} builder  */ ;/**  * method to validate and set the precision value  * @param precision the precision to set for the aggregation  * @return the {@link GeoGridAggregationBuilder} builder  */ public abstract GeoGridAggregationBuilder precision(int precision).
true;protected,abstract;9;4;/**  * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.  */ ;/**  * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.  */ protected abstract ValuesSourceAggregatorFactory<ValuesSource.GeoPoint, ?> createFactory(String name, ValuesSourceConfig<ValuesSource.GeoPoint> config, int precision, int requiredSize, int shardSize, SearchContext context, AggregatorFactory<?> parent, Builder subFactoriesBuilder, Map<String, Object> metaData) throws IOException.
false;public;0;3;;public int precision() {     return precision. }
false;public;1;8;;public GeoGridAggregationBuilder size(int size) {     if (size <= 0) {         throw new IllegalArgumentException("[size] must be greater than 0. Found [" + size + "] in [" + name + "]").     }     this.requiredSize = size.     return this. }
false;public;0;3;;public int size() {     return requiredSize. }
false;public;1;8;;public GeoGridAggregationBuilder shardSize(int shardSize) {     if (shardSize <= 0) {         throw new IllegalArgumentException("[shardSize] must be greater than 0. Found [" + shardSize + "] in [" + name + "]").     }     this.shardSize = shardSize.     return this. }
false;public;0;3;;public int shardSize() {     return shardSize. }
false;protected;4;25;;@Override protected ValuesSourceAggregatorFactory<ValuesSource.GeoPoint, ?> innerBuild(SearchContext context, ValuesSourceConfig<ValuesSource.GeoPoint> config, AggregatorFactory<?> parent, Builder subFactoriesBuilder) throws IOException {     int shardSize = this.shardSize.     int requiredSize = this.requiredSize.     if (shardSize < 0) {         // Use default heuristic to avoid any wrong-ranking caused by         // distributed counting         shardSize = BucketUtils.suggestShardSideQueueSize(requiredSize).     }     if (requiredSize <= 0 || shardSize <= 0) {         throw new ElasticsearchException("parameters [required_size] and [shard_size] must be > 0 in " + getType() + " aggregation [" + name + "].").     }     if (shardSize < requiredSize) {         shardSize = requiredSize.     }     return createFactory(name, config, precision, requiredSize, shardSize, context, parent, subFactoriesBuilder, metaData). }
false;protected;2;9;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(FIELD_PRECISION.getPreferredName(), precision).     builder.field(FIELD_SIZE.getPreferredName(), requiredSize).     if (shardSize > -1) {         builder.field(FIELD_SHARD_SIZE.getPreferredName(), shardSize).     }     return builder. }
false;protected;1;14;;@Override protected boolean innerEquals(Object obj) {     GeoGridAggregationBuilder other = (GeoGridAggregationBuilder) obj.     if (precision != other.precision) {         return false.     }     if (requiredSize != other.requiredSize) {         return false.     }     if (shardSize != other.shardSize) {         return false.     }     return true. }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(precision, requiredSize, shardSize). }
