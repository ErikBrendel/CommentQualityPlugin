commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public long toBytes(long size) {     return size. }
false;public;1;4;;@Override public long toKB(long size) {     return size / (C1 / C0). }
false;public;1;4;;@Override public long toMB(long size) {     return size / (C2 / C0). }
false;public;1;4;;@Override public long toGB(long size) {     return size / (C3 / C0). }
false;public;1;4;;@Override public long toTB(long size) {     return size / (C4 / C0). }
false;public;1;4;;@Override public long toPB(long size) {     return size / (C5 / C0). }
false;public;0;4;;@Override public String getSuffix() {     return "b". }
false;public;1;4;;@Override public long toBytes(long size) {     return x(size, C1 / C0, MAX / (C1 / C0)). }
false;public;1;4;;@Override public long toKB(long size) {     return size. }
false;public;1;4;;@Override public long toMB(long size) {     return size / (C2 / C1). }
false;public;1;4;;@Override public long toGB(long size) {     return size / (C3 / C1). }
false;public;1;4;;@Override public long toTB(long size) {     return size / (C4 / C1). }
false;public;1;4;;@Override public long toPB(long size) {     return size / (C5 / C1). }
false;public;0;4;;@Override public String getSuffix() {     return "kb". }
false;public;1;4;;@Override public long toBytes(long size) {     return x(size, C2 / C0, MAX / (C2 / C0)). }
false;public;1;4;;@Override public long toKB(long size) {     return x(size, C2 / C1, MAX / (C2 / C1)). }
false;public;1;4;;@Override public long toMB(long size) {     return size. }
false;public;1;4;;@Override public long toGB(long size) {     return size / (C3 / C2). }
false;public;1;4;;@Override public long toTB(long size) {     return size / (C4 / C2). }
false;public;1;4;;@Override public long toPB(long size) {     return size / (C5 / C2). }
false;public;0;4;;@Override public String getSuffix() {     return "mb". }
false;public;1;4;;@Override public long toBytes(long size) {     return x(size, C3 / C0, MAX / (C3 / C0)). }
false;public;1;4;;@Override public long toKB(long size) {     return x(size, C3 / C1, MAX / (C3 / C1)). }
false;public;1;4;;@Override public long toMB(long size) {     return x(size, C3 / C2, MAX / (C3 / C2)). }
false;public;1;4;;@Override public long toGB(long size) {     return size. }
false;public;1;4;;@Override public long toTB(long size) {     return size / (C4 / C3). }
false;public;1;4;;@Override public long toPB(long size) {     return size / (C5 / C3). }
false;public;0;4;;@Override public String getSuffix() {     return "gb". }
false;public;1;4;;@Override public long toBytes(long size) {     return x(size, C4 / C0, MAX / (C4 / C0)). }
false;public;1;4;;@Override public long toKB(long size) {     return x(size, C4 / C1, MAX / (C4 / C1)). }
false;public;1;4;;@Override public long toMB(long size) {     return x(size, C4 / C2, MAX / (C4 / C2)). }
false;public;1;4;;@Override public long toGB(long size) {     return x(size, C4 / C3, MAX / (C4 / C3)). }
false;public;1;4;;@Override public long toTB(long size) {     return size. }
false;public;1;4;;@Override public long toPB(long size) {     return size / (C5 / C4). }
false;public;0;4;;@Override public String getSuffix() {     return "tb". }
false;public;1;4;;@Override public long toBytes(long size) {     return x(size, C5 / C0, MAX / (C5 / C0)). }
false;public;1;4;;@Override public long toKB(long size) {     return x(size, C5 / C1, MAX / (C5 / C1)). }
false;public;1;4;;@Override public long toMB(long size) {     return x(size, C5 / C2, MAX / (C5 / C2)). }
false;public;1;4;;@Override public long toGB(long size) {     return x(size, C5 / C3, MAX / (C5 / C3)). }
false;public;1;4;;@Override public long toTB(long size) {     return x(size, C5 / C4, MAX / (C5 / C4)). }
false;public;1;4;;@Override public long toPB(long size) {     return size. }
false;public;0;4;;@Override public String getSuffix() {     return "pb". }
false;public,static;1;6;;public static ByteSizeUnit fromId(int id) {     if (id < 0 || id >= values().length) {         throw new IllegalArgumentException("No byte size unit found for id [" + id + "]").     }     return values()[id]. }
true;static;3;5;/**  * Scale d by m, checking for overflow.  * This has a short name to make above code more readable.  */ ;/**  * Scale d by m, checking for overflow.  * This has a short name to make above code more readable.  */ static long x(long d, long m, long over) {     if (d > over)         return Long.MAX_VALUE.     if (d < -over)         return Long.MIN_VALUE.     return d * m. }
false;public,abstract;1;1;;public abstract long toBytes(long size).
false;public,abstract;1;1;;public abstract long toKB(long size).
false;public,abstract;1;1;;public abstract long toMB(long size).
false;public,abstract;1;1;;public abstract long toGB(long size).
false;public,abstract;1;1;;public abstract long toTB(long size).
false;public,abstract;1;1;;public abstract long toPB(long size).
false;public,abstract;0;1;;public abstract String getSuffix().
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(this.ordinal()). }
true;public,static;1;3;/**  * Reads a {@link ByteSizeUnit} from a given {@link StreamInput}  */ ;/**  * Reads a {@link ByteSizeUnit} from a given {@link StreamInput}  */ public static ByteSizeUnit readFrom(StreamInput in) throws IOException {     return ByteSizeUnit.fromId(in.readVInt()). }
