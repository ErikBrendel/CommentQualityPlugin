# id;timestamp;commentText;codeText;commentWords;codeWords
BigArrays -> public BigArrays withCircuitBreaking();1524684173;Return an instance of this BigArrays class with circuit breaking_explicitly enabled, instead of only accounting enabled;public BigArrays withCircuitBreaking() {_        return this.circuitBreakingInstance__    };return,an,instance,of,this,big,arrays,class,with,circuit,breaking,explicitly,enabled,instead,of,only,accounting,enabled;public,big,arrays,with,circuit,breaking,return,this,circuit,breaking,instance
BigArrays -> public BigArrays withCircuitBreaking();1528762805;Return an instance of this BigArrays class with circuit breaking_explicitly enabled, instead of only accounting enabled;public BigArrays withCircuitBreaking() {_        return this.circuitBreakingInstance__    };return,an,instance,of,this,big,arrays,class,with,circuit,breaking,explicitly,enabled,instead,of,only,accounting,enabled;public,big,arrays,with,circuit,breaking,return,this,circuit,breaking,instance
BigArrays -> public BigArrays withCircuitBreaking();1540583181;Return an instance of this BigArrays class with circuit breaking_explicitly enabled, instead of only accounting enabled;public BigArrays withCircuitBreaking() {_        return this.circuitBreakingInstance__    };return,an,instance,of,this,big,arrays,class,with,circuit,breaking,explicitly,enabled,instead,of,only,accounting,enabled;public,big,arrays,with,circuit,breaking,return,this,circuit,breaking,instance
BigArrays -> public BigArrays withCircuitBreaking();1544554541;Return an instance of this BigArrays class with circuit breaking_explicitly enabled, instead of only accounting enabled;public BigArrays withCircuitBreaking() {_        return this.circuitBreakingInstance__    };return,an,instance,of,this,big,arrays,class,with,circuit,breaking,explicitly,enabled,instead,of,only,accounting,enabled;public,big,arrays,with,circuit,breaking,return,this,circuit,breaking,instance
BigArrays -> public BigArrays withCircuitBreaking();1544623250;Return an instance of this BigArrays class with circuit breaking_explicitly enabled, instead of only accounting enabled;public BigArrays withCircuitBreaking() {_        return this.circuitBreakingInstance__    };return,an,instance,of,this,big,arrays,class,with,circuit,breaking,explicitly,enabled,instead,of,only,accounting,enabled;public,big,arrays,with,circuit,breaking,return,this,circuit,breaking,instance
BigArrays -> public LongArray resize(LongArray array, long size);1524684173;Resize the array to the exact provided size.;public LongArray resize(LongArray array, long size) {_        if (array instanceof BigLongArray) {_            return resizeInPlace((BigLongArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final LongArray newArray = newLongArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,long,array,resize,long,array,array,long,size,if,array,instanceof,big,long,array,return,resize,in,place,big,long,array,array,size,else,abstract,array,arr,abstract,array,array,final,long,array,new,array,new,long,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public LongArray resize(LongArray array, long size);1528762805;Resize the array to the exact provided size.;public LongArray resize(LongArray array, long size) {_        if (array instanceof BigLongArray) {_            return resizeInPlace((BigLongArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final LongArray newArray = newLongArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,long,array,resize,long,array,array,long,size,if,array,instanceof,big,long,array,return,resize,in,place,big,long,array,array,size,else,abstract,array,arr,abstract,array,array,final,long,array,new,array,new,long,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public LongArray resize(LongArray array, long size);1540583181;Resize the array to the exact provided size.;public LongArray resize(LongArray array, long size) {_        if (array instanceof BigLongArray) {_            return resizeInPlace((BigLongArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final LongArray newArray = newLongArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,long,array,resize,long,array,array,long,size,if,array,instanceof,big,long,array,return,resize,in,place,big,long,array,array,size,else,abstract,array,arr,abstract,array,array,final,long,array,new,array,new,long,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public LongArray resize(LongArray array, long size);1544554541;Resize the array to the exact provided size.;public LongArray resize(LongArray array, long size) {_        if (array instanceof BigLongArray) {_            return resizeInPlace((BigLongArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final LongArray newArray = newLongArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,long,array,resize,long,array,array,long,size,if,array,instanceof,big,long,array,return,resize,in,place,big,long,array,array,size,else,abstract,array,arr,abstract,array,array,final,long,array,new,array,new,long,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public LongArray resize(LongArray array, long size);1544623250;Resize the array to the exact provided size.;public LongArray resize(LongArray array, long size) {_        if (array instanceof BigLongArray) {_            return resizeInPlace((BigLongArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final LongArray newArray = newLongArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,long,array,resize,long,array,array,long,size,if,array,instanceof,big,long,array,return,resize,in,place,big,long,array,array,size,else,abstract,array,arr,abstract,array,array,final,long,array,new,array,new,long,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public static long overSize(long minTargetSize, int pageSize, int bytesPerElement);1524684173;Return the next size to grow to that is &gt_= <code>minTargetSize</code>._Inspired from {@link ArrayUtil#oversize(int, int)} and adapted to play nicely with paging.;public static long overSize(long minTargetSize, int pageSize, int bytesPerElement) {_        if (minTargetSize < 0) {_            throw new IllegalArgumentException("minTargetSize must be >= 0")__        }_        if (pageSize < 0) {_            throw new IllegalArgumentException("pageSize must be > 0")__        }_        if (bytesPerElement <= 0) {_            throw new IllegalArgumentException("bytesPerElement must be > 0")__        }__        long newSize__        if (minTargetSize < pageSize) {_            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement)__        } else {_            newSize = minTargetSize + (minTargetSize >>> 3)__        }__        if (newSize > pageSize) {_            _            newSize = newSize - (newSize % pageSize) + pageSize__            assert newSize % pageSize == 0__        }__        return newSize__    };return,the,next,size,to,grow,to,that,is,gt,code,min,target,size,code,inspired,from,link,array,util,oversize,int,int,and,adapted,to,play,nicely,with,paging;public,static,long,over,size,long,min,target,size,int,page,size,int,bytes,per,element,if,min,target,size,0,throw,new,illegal,argument,exception,min,target,size,must,be,0,if,page,size,0,throw,new,illegal,argument,exception,page,size,must,be,0,if,bytes,per,element,0,throw,new,illegal,argument,exception,bytes,per,element,must,be,0,long,new,size,if,min,target,size,page,size,new,size,array,util,oversize,int,min,target,size,bytes,per,element,else,new,size,min,target,size,min,target,size,3,if,new,size,page,size,new,size,new,size,new,size,page,size,page,size,assert,new,size,page,size,0,return,new,size
BigArrays -> public static long overSize(long minTargetSize, int pageSize, int bytesPerElement);1528762805;Return the next size to grow to that is &gt_= <code>minTargetSize</code>._Inspired from {@link ArrayUtil#oversize(int, int)} and adapted to play nicely with paging.;public static long overSize(long minTargetSize, int pageSize, int bytesPerElement) {_        if (minTargetSize < 0) {_            throw new IllegalArgumentException("minTargetSize must be >= 0")__        }_        if (pageSize < 0) {_            throw new IllegalArgumentException("pageSize must be > 0")__        }_        if (bytesPerElement <= 0) {_            throw new IllegalArgumentException("bytesPerElement must be > 0")__        }__        long newSize__        if (minTargetSize < pageSize) {_            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement)__        } else {_            newSize = minTargetSize + (minTargetSize >>> 3)__        }__        if (newSize > pageSize) {_            _            newSize = newSize - (newSize % pageSize) + pageSize__            assert newSize % pageSize == 0__        }__        return newSize__    };return,the,next,size,to,grow,to,that,is,gt,code,min,target,size,code,inspired,from,link,array,util,oversize,int,int,and,adapted,to,play,nicely,with,paging;public,static,long,over,size,long,min,target,size,int,page,size,int,bytes,per,element,if,min,target,size,0,throw,new,illegal,argument,exception,min,target,size,must,be,0,if,page,size,0,throw,new,illegal,argument,exception,page,size,must,be,0,if,bytes,per,element,0,throw,new,illegal,argument,exception,bytes,per,element,must,be,0,long,new,size,if,min,target,size,page,size,new,size,array,util,oversize,int,min,target,size,bytes,per,element,else,new,size,min,target,size,min,target,size,3,if,new,size,page,size,new,size,new,size,new,size,page,size,page,size,assert,new,size,page,size,0,return,new,size
BigArrays -> public static long overSize(long minTargetSize, int pageSize, int bytesPerElement);1540583181;Return the next size to grow to that is &gt_= <code>minTargetSize</code>._Inspired from {@link ArrayUtil#oversize(int, int)} and adapted to play nicely with paging.;public static long overSize(long minTargetSize, int pageSize, int bytesPerElement) {_        if (minTargetSize < 0) {_            throw new IllegalArgumentException("minTargetSize must be >= 0")__        }_        if (pageSize < 0) {_            throw new IllegalArgumentException("pageSize must be > 0")__        }_        if (bytesPerElement <= 0) {_            throw new IllegalArgumentException("bytesPerElement must be > 0")__        }__        long newSize__        if (minTargetSize < pageSize) {_            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement)__        } else {_            newSize = minTargetSize + (minTargetSize >>> 3)__        }__        if (newSize > pageSize) {_            _            newSize = newSize - (newSize % pageSize) + pageSize__            assert newSize % pageSize == 0__        }__        return newSize__    };return,the,next,size,to,grow,to,that,is,gt,code,min,target,size,code,inspired,from,link,array,util,oversize,int,int,and,adapted,to,play,nicely,with,paging;public,static,long,over,size,long,min,target,size,int,page,size,int,bytes,per,element,if,min,target,size,0,throw,new,illegal,argument,exception,min,target,size,must,be,0,if,page,size,0,throw,new,illegal,argument,exception,page,size,must,be,0,if,bytes,per,element,0,throw,new,illegal,argument,exception,bytes,per,element,must,be,0,long,new,size,if,min,target,size,page,size,new,size,array,util,oversize,int,min,target,size,bytes,per,element,else,new,size,min,target,size,min,target,size,3,if,new,size,page,size,new,size,new,size,new,size,page,size,page,size,assert,new,size,page,size,0,return,new,size
BigArrays -> public static long overSize(long minTargetSize, int pageSize, int bytesPerElement);1544554541;Return the next size to grow to that is &gt_= <code>minTargetSize</code>._Inspired from {@link ArrayUtil#oversize(int, int)} and adapted to play nicely with paging.;public static long overSize(long minTargetSize, int pageSize, int bytesPerElement) {_        if (minTargetSize < 0) {_            throw new IllegalArgumentException("minTargetSize must be >= 0")__        }_        if (pageSize < 0) {_            throw new IllegalArgumentException("pageSize must be > 0")__        }_        if (bytesPerElement <= 0) {_            throw new IllegalArgumentException("bytesPerElement must be > 0")__        }__        long newSize__        if (minTargetSize < pageSize) {_            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement)__        } else {_            newSize = minTargetSize + (minTargetSize >>> 3)__        }__        if (newSize > pageSize) {_            _            newSize = newSize - (newSize % pageSize) + pageSize__            assert newSize % pageSize == 0__        }__        return newSize__    };return,the,next,size,to,grow,to,that,is,gt,code,min,target,size,code,inspired,from,link,array,util,oversize,int,int,and,adapted,to,play,nicely,with,paging;public,static,long,over,size,long,min,target,size,int,page,size,int,bytes,per,element,if,min,target,size,0,throw,new,illegal,argument,exception,min,target,size,must,be,0,if,page,size,0,throw,new,illegal,argument,exception,page,size,must,be,0,if,bytes,per,element,0,throw,new,illegal,argument,exception,bytes,per,element,must,be,0,long,new,size,if,min,target,size,page,size,new,size,array,util,oversize,int,min,target,size,bytes,per,element,else,new,size,min,target,size,min,target,size,3,if,new,size,page,size,new,size,new,size,new,size,page,size,page,size,assert,new,size,page,size,0,return,new,size
BigArrays -> public static long overSize(long minTargetSize, int pageSize, int bytesPerElement);1544623250;Return the next size to grow to that is &gt_= <code>minTargetSize</code>._Inspired from {@link ArrayUtil#oversize(int, int)} and adapted to play nicely with paging.;public static long overSize(long minTargetSize, int pageSize, int bytesPerElement) {_        if (minTargetSize < 0) {_            throw new IllegalArgumentException("minTargetSize must be >= 0")__        }_        if (pageSize < 0) {_            throw new IllegalArgumentException("pageSize must be > 0")__        }_        if (bytesPerElement <= 0) {_            throw new IllegalArgumentException("bytesPerElement must be > 0")__        }__        long newSize__        if (minTargetSize < pageSize) {_            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement)__        } else {_            newSize = minTargetSize + (minTargetSize >>> 3)__        }__        if (newSize > pageSize) {_            _            newSize = newSize - (newSize % pageSize) + pageSize__            assert newSize % pageSize == 0__        }__        return newSize__    };return,the,next,size,to,grow,to,that,is,gt,code,min,target,size,code,inspired,from,link,array,util,oversize,int,int,and,adapted,to,play,nicely,with,paging;public,static,long,over,size,long,min,target,size,int,page,size,int,bytes,per,element,if,min,target,size,0,throw,new,illegal,argument,exception,min,target,size,must,be,0,if,page,size,0,throw,new,illegal,argument,exception,page,size,must,be,0,if,bytes,per,element,0,throw,new,illegal,argument,exception,bytes,per,element,must,be,0,long,new,size,if,min,target,size,page,size,new,size,array,util,oversize,int,min,target,size,bytes,per,element,else,new,size,min,target,size,min,target,size,3,if,new,size,page,size,new,size,new,size,new,size,page,size,page,size,assert,new,size,page,size,0,return,new,size
BigArrays -> public ByteArray newByteArray(long size, boolean clearOnResize);1524684173;Allocate a new {@link ByteArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public ByteArray newByteArray(long size, boolean clearOnResize) {_        if (size > BYTE_PAGE_SIZE) {_            _            _            adjustBreaker(BigByteArray.estimateRamBytes(size), false)__            return new BigByteArray(size, this, clearOnResize)__        } else if (size >= BYTE_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<byte[]> page = recycler.bytePage(clearOnResize)__            return validate(new ByteArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new ByteArrayWrapper(this, new byte[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,byte,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,byte,array,new,byte,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,byte,array,estimate,ram,bytes,size,false,return,new,big,byte,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,byte,page,recycler,byte,page,clear,on,resize,return,validate,new,byte,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,byte,array,wrapper,this,new,byte,int,size,size,null,clear,on,resize
BigArrays -> public ByteArray newByteArray(long size, boolean clearOnResize);1528762805;Allocate a new {@link ByteArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public ByteArray newByteArray(long size, boolean clearOnResize) {_        if (size > BYTE_PAGE_SIZE) {_            _            _            adjustBreaker(BigByteArray.estimateRamBytes(size), false)__            return new BigByteArray(size, this, clearOnResize)__        } else if (size >= BYTE_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<byte[]> page = recycler.bytePage(clearOnResize)__            return validate(new ByteArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new ByteArrayWrapper(this, new byte[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,byte,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,byte,array,new,byte,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,byte,array,estimate,ram,bytes,size,false,return,new,big,byte,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,byte,page,recycler,byte,page,clear,on,resize,return,validate,new,byte,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,byte,array,wrapper,this,new,byte,int,size,size,null,clear,on,resize
BigArrays -> public ByteArray newByteArray(long size, boolean clearOnResize);1540583181;Allocate a new {@link ByteArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public ByteArray newByteArray(long size, boolean clearOnResize) {_        if (size > BYTE_PAGE_SIZE) {_            _            _            adjustBreaker(BigByteArray.estimateRamBytes(size), false)__            return new BigByteArray(size, this, clearOnResize)__        } else if (size >= BYTE_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<byte[]> page = recycler.bytePage(clearOnResize)__            return validate(new ByteArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new ByteArrayWrapper(this, new byte[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,byte,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,byte,array,new,byte,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,byte,array,estimate,ram,bytes,size,false,return,new,big,byte,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,byte,page,recycler,byte,page,clear,on,resize,return,validate,new,byte,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,byte,array,wrapper,this,new,byte,int,size,size,null,clear,on,resize
BigArrays -> public ByteArray newByteArray(long size, boolean clearOnResize);1544554541;Allocate a new {@link ByteArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public ByteArray newByteArray(long size, boolean clearOnResize) {_        if (size > BYTE_PAGE_SIZE) {_            _            _            adjustBreaker(BigByteArray.estimateRamBytes(size), false)__            return new BigByteArray(size, this, clearOnResize)__        } else if (size >= BYTE_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<byte[]> page = recycler.bytePage(clearOnResize)__            return validate(new ByteArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new ByteArrayWrapper(this, new byte[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,byte,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,byte,array,new,byte,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,byte,array,estimate,ram,bytes,size,false,return,new,big,byte,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,byte,page,recycler,byte,page,clear,on,resize,return,validate,new,byte,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,byte,array,wrapper,this,new,byte,int,size,size,null,clear,on,resize
BigArrays -> public ByteArray newByteArray(long size, boolean clearOnResize);1544623250;Allocate a new {@link ByteArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public ByteArray newByteArray(long size, boolean clearOnResize) {_        if (size > PageCacheRecycler.BYTE_PAGE_SIZE) {_            _            _            adjustBreaker(BigByteArray.estimateRamBytes(size), false)__            return new BigByteArray(size, this, clearOnResize)__        } else if (size >= PageCacheRecycler.BYTE_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<byte[]> page = recycler.bytePage(clearOnResize)__            return validate(new ByteArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new ByteArrayWrapper(this, new byte[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,byte,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,byte,array,new,byte,array,long,size,boolean,clear,on,resize,if,size,page,cache,recycler,adjust,breaker,big,byte,array,estimate,ram,bytes,size,false,return,new,big,byte,array,size,this,clear,on,resize,else,if,size,page,cache,recycler,2,recycler,null,final,recycler,v,byte,page,recycler,byte,page,clear,on,resize,return,validate,new,byte,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,byte,array,wrapper,this,new,byte,int,size,size,null,clear,on,resize
BigArrays -> public FloatArray grow(FloatArray array, long minSize);1524684173;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public FloatArray grow(FloatArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, INT_PAGE_SIZE, Float.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,float,array,grow,float,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,float,bytes,return,resize,array,new,size
BigArrays -> public FloatArray grow(FloatArray array, long minSize);1528762805;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public FloatArray grow(FloatArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, INT_PAGE_SIZE, Float.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,float,array,grow,float,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,float,bytes,return,resize,array,new,size
BigArrays -> public FloatArray grow(FloatArray array, long minSize);1540583181;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public FloatArray grow(FloatArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, INT_PAGE_SIZE, Float.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,float,array,grow,float,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,float,bytes,return,resize,array,new,size
BigArrays -> public FloatArray grow(FloatArray array, long minSize);1544554541;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public FloatArray grow(FloatArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, INT_PAGE_SIZE, Float.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,float,array,grow,float,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,float,bytes,return,resize,array,new,size
BigArrays -> public FloatArray grow(FloatArray array, long minSize);1544623250;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public FloatArray grow(FloatArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, PageCacheRecycler.INT_PAGE_SIZE, Float.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,float,array,grow,float,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,page,cache,recycler,float,bytes,return,resize,array,new,size
BigArrays -> public DoubleArray newDoubleArray(long size);1524684173;Allocate a new {@link DoubleArray} of the given capacity.;public DoubleArray newDoubleArray(long size) {_        return newDoubleArray(size, true)__    };allocate,a,new,link,double,array,of,the,given,capacity;public,double,array,new,double,array,long,size,return,new,double,array,size,true
BigArrays -> public DoubleArray newDoubleArray(long size);1528762805;Allocate a new {@link DoubleArray} of the given capacity.;public DoubleArray newDoubleArray(long size) {_        return newDoubleArray(size, true)__    };allocate,a,new,link,double,array,of,the,given,capacity;public,double,array,new,double,array,long,size,return,new,double,array,size,true
BigArrays -> public DoubleArray newDoubleArray(long size);1540583181;Allocate a new {@link DoubleArray} of the given capacity.;public DoubleArray newDoubleArray(long size) {_        return newDoubleArray(size, true)__    };allocate,a,new,link,double,array,of,the,given,capacity;public,double,array,new,double,array,long,size,return,new,double,array,size,true
BigArrays -> public DoubleArray newDoubleArray(long size);1544554541;Allocate a new {@link DoubleArray} of the given capacity.;public DoubleArray newDoubleArray(long size) {_        return newDoubleArray(size, true)__    };allocate,a,new,link,double,array,of,the,given,capacity;public,double,array,new,double,array,long,size,return,new,double,array,size,true
BigArrays -> public DoubleArray newDoubleArray(long size);1544623250;Allocate a new {@link DoubleArray} of the given capacity.;public DoubleArray newDoubleArray(long size) {_        return newDoubleArray(size, true)__    };allocate,a,new,link,double,array,of,the,given,capacity;public,double,array,new,double,array,long,size,return,new,double,array,size,true
BigArrays -> public FloatArray newFloatArray(long size, boolean clearOnResize);1524684173;Allocate a new {@link FloatArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public FloatArray newFloatArray(long size, boolean clearOnResize) {_        if (size > INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigFloatArray.estimateRamBytes(size), false)__            return new BigFloatArray(size, this, clearOnResize)__        } else if (size >= INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new FloatArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new FloatArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,float,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,float,array,new,float,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,float,array,estimate,ram,bytes,size,false,return,new,big,float,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,float,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,float,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public FloatArray newFloatArray(long size, boolean clearOnResize);1528762805;Allocate a new {@link FloatArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public FloatArray newFloatArray(long size, boolean clearOnResize) {_        if (size > INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigFloatArray.estimateRamBytes(size), false)__            return new BigFloatArray(size, this, clearOnResize)__        } else if (size >= INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new FloatArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new FloatArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,float,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,float,array,new,float,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,float,array,estimate,ram,bytes,size,false,return,new,big,float,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,float,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,float,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public FloatArray newFloatArray(long size, boolean clearOnResize);1540583181;Allocate a new {@link FloatArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public FloatArray newFloatArray(long size, boolean clearOnResize) {_        if (size > INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigFloatArray.estimateRamBytes(size), false)__            return new BigFloatArray(size, this, clearOnResize)__        } else if (size >= INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new FloatArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new FloatArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,float,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,float,array,new,float,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,float,array,estimate,ram,bytes,size,false,return,new,big,float,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,float,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,float,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public FloatArray newFloatArray(long size, boolean clearOnResize);1544554541;Allocate a new {@link FloatArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public FloatArray newFloatArray(long size, boolean clearOnResize) {_        if (size > INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigFloatArray.estimateRamBytes(size), false)__            return new BigFloatArray(size, this, clearOnResize)__        } else if (size >= INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new FloatArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new FloatArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,float,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,float,array,new,float,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,float,array,estimate,ram,bytes,size,false,return,new,big,float,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,float,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,float,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public FloatArray newFloatArray(long size, boolean clearOnResize);1544623250;Allocate a new {@link FloatArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public FloatArray newFloatArray(long size, boolean clearOnResize) {_        if (size > PageCacheRecycler.INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigFloatArray.estimateRamBytes(size), false)__            return new BigFloatArray(size, this, clearOnResize)__        } else if (size >= PageCacheRecycler.INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new FloatArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new FloatArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,float,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,float,array,new,float,array,long,size,boolean,clear,on,resize,if,size,page,cache,recycler,adjust,breaker,big,float,array,estimate,ram,bytes,size,false,return,new,big,float,array,size,this,clear,on,resize,else,if,size,page,cache,recycler,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,float,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,float,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public <T> ObjectArray<T> resize(ObjectArray<T> array, long size);1524684173;Resize the array to the exact provided size.;public <T> ObjectArray<T> resize(ObjectArray<T> array, long size) {_        if (array instanceof BigObjectArray) {_            return resizeInPlace((BigObjectArray<T>) array, size)__        } else {_            final ObjectArray<T> newArray = newObjectArray(size)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,t,object,array,t,resize,object,array,t,array,long,size,if,array,instanceof,big,object,array,return,resize,in,place,big,object,array,t,array,size,else,final,object,array,t,new,array,new,object,array,size,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public <T> ObjectArray<T> resize(ObjectArray<T> array, long size);1528762805;Resize the array to the exact provided size.;public <T> ObjectArray<T> resize(ObjectArray<T> array, long size) {_        if (array instanceof BigObjectArray) {_            return resizeInPlace((BigObjectArray<T>) array, size)__        } else {_            final ObjectArray<T> newArray = newObjectArray(size)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,t,object,array,t,resize,object,array,t,array,long,size,if,array,instanceof,big,object,array,return,resize,in,place,big,object,array,t,array,size,else,final,object,array,t,new,array,new,object,array,size,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public <T> ObjectArray<T> resize(ObjectArray<T> array, long size);1540583181;Resize the array to the exact provided size.;public <T> ObjectArray<T> resize(ObjectArray<T> array, long size) {_        if (array instanceof BigObjectArray) {_            return resizeInPlace((BigObjectArray<T>) array, size)__        } else {_            final ObjectArray<T> newArray = newObjectArray(size)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,t,object,array,t,resize,object,array,t,array,long,size,if,array,instanceof,big,object,array,return,resize,in,place,big,object,array,t,array,size,else,final,object,array,t,new,array,new,object,array,size,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public <T> ObjectArray<T> resize(ObjectArray<T> array, long size);1544554541;Resize the array to the exact provided size.;public <T> ObjectArray<T> resize(ObjectArray<T> array, long size) {_        if (array instanceof BigObjectArray) {_            return resizeInPlace((BigObjectArray<T>) array, size)__        } else {_            final ObjectArray<T> newArray = newObjectArray(size)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,t,object,array,t,resize,object,array,t,array,long,size,if,array,instanceof,big,object,array,return,resize,in,place,big,object,array,t,array,size,else,final,object,array,t,new,array,new,object,array,size,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public <T> ObjectArray<T> resize(ObjectArray<T> array, long size);1544623250;Resize the array to the exact provided size.;public <T> ObjectArray<T> resize(ObjectArray<T> array, long size) {_        if (array instanceof BigObjectArray) {_            return resizeInPlace((BigObjectArray<T>) array, size)__        } else {_            final ObjectArray<T> newArray = newObjectArray(size)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,t,object,array,t,resize,object,array,t,array,long,size,if,array,instanceof,big,object,array,return,resize,in,place,big,object,array,t,array,size,else,final,object,array,t,new,array,new,object,array,size,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public ByteArray grow(ByteArray array, long minSize);1524684173;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public ByteArray grow(ByteArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, BYTE_PAGE_SIZE, 1)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,byte,array,grow,byte,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,1,return,resize,array,new,size
BigArrays -> public ByteArray grow(ByteArray array, long minSize);1528762805;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public ByteArray grow(ByteArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, BYTE_PAGE_SIZE, 1)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,byte,array,grow,byte,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,1,return,resize,array,new,size
BigArrays -> public ByteArray grow(ByteArray array, long minSize);1540583181;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public ByteArray grow(ByteArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, BYTE_PAGE_SIZE, 1)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,byte,array,grow,byte,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,1,return,resize,array,new,size
BigArrays -> public ByteArray grow(ByteArray array, long minSize);1544554541;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public ByteArray grow(ByteArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, BYTE_PAGE_SIZE, 1)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,byte,array,grow,byte,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,1,return,resize,array,new,size
BigArrays -> public ByteArray grow(ByteArray array, long minSize);1544623250;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public ByteArray grow(ByteArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, PageCacheRecycler.BYTE_PAGE_SIZE, 1)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,byte,array,grow,byte,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,page,cache,recycler,1,return,resize,array,new,size
BigArrays -> public FloatArray resize(FloatArray array, long size);1524684173;Resize the array to the exact provided size.;public FloatArray resize(FloatArray array, long size) {_        if (array instanceof BigFloatArray) {_            return resizeInPlace((BigFloatArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final FloatArray newArray = newFloatArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,float,array,resize,float,array,array,long,size,if,array,instanceof,big,float,array,return,resize,in,place,big,float,array,array,size,else,abstract,array,arr,abstract,array,array,final,float,array,new,array,new,float,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,arr,close,return,new,array
BigArrays -> public FloatArray resize(FloatArray array, long size);1528762805;Resize the array to the exact provided size.;public FloatArray resize(FloatArray array, long size) {_        if (array instanceof BigFloatArray) {_            return resizeInPlace((BigFloatArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final FloatArray newArray = newFloatArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,float,array,resize,float,array,array,long,size,if,array,instanceof,big,float,array,return,resize,in,place,big,float,array,array,size,else,abstract,array,arr,abstract,array,array,final,float,array,new,array,new,float,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,arr,close,return,new,array
BigArrays -> public FloatArray resize(FloatArray array, long size);1540583181;Resize the array to the exact provided size.;public FloatArray resize(FloatArray array, long size) {_        if (array instanceof BigFloatArray) {_            return resizeInPlace((BigFloatArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final FloatArray newArray = newFloatArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,float,array,resize,float,array,array,long,size,if,array,instanceof,big,float,array,return,resize,in,place,big,float,array,array,size,else,abstract,array,arr,abstract,array,array,final,float,array,new,array,new,float,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,arr,close,return,new,array
BigArrays -> public FloatArray resize(FloatArray array, long size);1544554541;Resize the array to the exact provided size.;public FloatArray resize(FloatArray array, long size) {_        if (array instanceof BigFloatArray) {_            return resizeInPlace((BigFloatArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final FloatArray newArray = newFloatArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,float,array,resize,float,array,array,long,size,if,array,instanceof,big,float,array,return,resize,in,place,big,float,array,array,size,else,abstract,array,arr,abstract,array,array,final,float,array,new,array,new,float,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,arr,close,return,new,array
BigArrays -> public FloatArray resize(FloatArray array, long size);1544623250;Resize the array to the exact provided size.;public FloatArray resize(FloatArray array, long size) {_        if (array instanceof BigFloatArray) {_            return resizeInPlace((BigFloatArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final FloatArray newArray = newFloatArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,float,array,resize,float,array,array,long,size,if,array,instanceof,big,float,array,return,resize,in,place,big,float,array,array,size,else,abstract,array,arr,abstract,array,array,final,float,array,new,array,new,float,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,arr,close,return,new,array
BigArrays -> public LongArray newLongArray(long size);1524684173;Allocate a new {@link LongArray}._@param size          the initial length of the array;public LongArray newLongArray(long size) {_        return newLongArray(size, true)__    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array;public,long,array,new,long,array,long,size,return,new,long,array,size,true
BigArrays -> public LongArray newLongArray(long size);1528762805;Allocate a new {@link LongArray}._@param size          the initial length of the array;public LongArray newLongArray(long size) {_        return newLongArray(size, true)__    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array;public,long,array,new,long,array,long,size,return,new,long,array,size,true
BigArrays -> public LongArray newLongArray(long size);1540583181;Allocate a new {@link LongArray}._@param size          the initial length of the array;public LongArray newLongArray(long size) {_        return newLongArray(size, true)__    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array;public,long,array,new,long,array,long,size,return,new,long,array,size,true
BigArrays -> public LongArray newLongArray(long size);1544554541;Allocate a new {@link LongArray}._@param size          the initial length of the array;public LongArray newLongArray(long size) {_        return newLongArray(size, true)__    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array;public,long,array,new,long,array,long,size,return,new,long,array,size,true
BigArrays -> public LongArray newLongArray(long size);1544623250;Allocate a new {@link LongArray}._@param size          the initial length of the array;public LongArray newLongArray(long size) {_        return newLongArray(size, true)__    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array;public,long,array,new,long,array,long,size,return,new,long,array,size,true
BigArrays -> public DoubleArray grow(DoubleArray array, long minSize);1524684173;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public DoubleArray grow(DoubleArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,double,array,grow,double,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,long,bytes,return,resize,array,new,size
BigArrays -> public DoubleArray grow(DoubleArray array, long minSize);1528762805;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public DoubleArray grow(DoubleArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,double,array,grow,double,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,long,bytes,return,resize,array,new,size
BigArrays -> public DoubleArray grow(DoubleArray array, long minSize);1540583181;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public DoubleArray grow(DoubleArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,double,array,grow,double,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,long,bytes,return,resize,array,new,size
BigArrays -> public DoubleArray grow(DoubleArray array, long minSize);1544554541;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public DoubleArray grow(DoubleArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,double,array,grow,double,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,long,bytes,return,resize,array,new,size
BigArrays -> public DoubleArray grow(DoubleArray array, long minSize);1544623250;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public DoubleArray grow(DoubleArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, PageCacheRecycler.LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,double,array,grow,double,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,page,cache,recycler,long,bytes,return,resize,array,new,size
BigArrays -> public ByteArray newByteArray(long size);1524684173;Allocate a new {@link ByteArray} initialized with zeros._@param size          the initial length of the array;public ByteArray newByteArray(long size) {_        return newByteArray(size, true)__    };allocate,a,new,link,byte,array,initialized,with,zeros,param,size,the,initial,length,of,the,array;public,byte,array,new,byte,array,long,size,return,new,byte,array,size,true
BigArrays -> public ByteArray newByteArray(long size);1528762805;Allocate a new {@link ByteArray} initialized with zeros._@param size          the initial length of the array;public ByteArray newByteArray(long size) {_        return newByteArray(size, true)__    };allocate,a,new,link,byte,array,initialized,with,zeros,param,size,the,initial,length,of,the,array;public,byte,array,new,byte,array,long,size,return,new,byte,array,size,true
BigArrays -> public ByteArray newByteArray(long size);1540583181;Allocate a new {@link ByteArray} initialized with zeros._@param size          the initial length of the array;public ByteArray newByteArray(long size) {_        return newByteArray(size, true)__    };allocate,a,new,link,byte,array,initialized,with,zeros,param,size,the,initial,length,of,the,array;public,byte,array,new,byte,array,long,size,return,new,byte,array,size,true
BigArrays -> public ByteArray newByteArray(long size);1544554541;Allocate a new {@link ByteArray} initialized with zeros._@param size          the initial length of the array;public ByteArray newByteArray(long size) {_        return newByteArray(size, true)__    };allocate,a,new,link,byte,array,initialized,with,zeros,param,size,the,initial,length,of,the,array;public,byte,array,new,byte,array,long,size,return,new,byte,array,size,true
BigArrays -> public ByteArray newByteArray(long size);1544623250;Allocate a new {@link ByteArray} initialized with zeros._@param size          the initial length of the array;public ByteArray newByteArray(long size) {_        return newByteArray(size, true)__    };allocate,a,new,link,byte,array,initialized,with,zeros,param,size,the,initial,length,of,the,array;public,byte,array,new,byte,array,long,size,return,new,byte,array,size,true
BigArrays -> public IntArray resize(IntArray array, long size);1524684173;Resize the array to the exact provided size.;public IntArray resize(IntArray array, long size) {_        if (array instanceof BigIntArray) {_            return resizeInPlace((BigIntArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final IntArray newArray = newIntArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,int,array,resize,int,array,array,long,size,if,array,instanceof,big,int,array,return,resize,in,place,big,int,array,array,size,else,abstract,array,arr,abstract,array,array,final,int,array,new,array,new,int,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public IntArray resize(IntArray array, long size);1528762805;Resize the array to the exact provided size.;public IntArray resize(IntArray array, long size) {_        if (array instanceof BigIntArray) {_            return resizeInPlace((BigIntArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final IntArray newArray = newIntArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,int,array,resize,int,array,array,long,size,if,array,instanceof,big,int,array,return,resize,in,place,big,int,array,array,size,else,abstract,array,arr,abstract,array,array,final,int,array,new,array,new,int,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public IntArray resize(IntArray array, long size);1540583181;Resize the array to the exact provided size.;public IntArray resize(IntArray array, long size) {_        if (array instanceof BigIntArray) {_            return resizeInPlace((BigIntArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final IntArray newArray = newIntArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,int,array,resize,int,array,array,long,size,if,array,instanceof,big,int,array,return,resize,in,place,big,int,array,array,size,else,abstract,array,arr,abstract,array,array,final,int,array,new,array,new,int,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public IntArray resize(IntArray array, long size);1544554541;Resize the array to the exact provided size.;public IntArray resize(IntArray array, long size) {_        if (array instanceof BigIntArray) {_            return resizeInPlace((BigIntArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final IntArray newArray = newIntArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,int,array,resize,int,array,array,long,size,if,array,instanceof,big,int,array,return,resize,in,place,big,int,array,array,size,else,abstract,array,arr,abstract,array,array,final,int,array,new,array,new,int,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public IntArray resize(IntArray array, long size);1544623250;Resize the array to the exact provided size.;public IntArray resize(IntArray array, long size) {_        if (array instanceof BigIntArray) {_            return resizeInPlace((BigIntArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final IntArray newArray = newIntArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,int,array,resize,int,array,array,long,size,if,array,instanceof,big,int,array,return,resize,in,place,big,int,array,array,size,else,abstract,array,arr,abstract,array,array,final,int,array,new,array,new,int,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public int hashCode(ByteArray array);1524684173;@see Arrays#hashCode(byte[]);public int hashCode(ByteArray array) {_        if (array == null) {_            return 0__        }__        int hash = 1__        for (long i = 0_ i < array.size()_ i++) {_            hash = 31 * hash + array.get(i)__        }__        return hash__    };see,arrays,hash,code,byte;public,int,hash,code,byte,array,array,if,array,null,return,0,int,hash,1,for,long,i,0,i,array,size,i,hash,31,hash,array,get,i,return,hash
BigArrays -> public int hashCode(ByteArray array);1528762805;@see Arrays#hashCode(byte[]);public int hashCode(ByteArray array) {_        if (array == null) {_            return 0__        }__        int hash = 1__        for (long i = 0_ i < array.size()_ i++) {_            hash = 31 * hash + array.get(i)__        }__        return hash__    };see,arrays,hash,code,byte;public,int,hash,code,byte,array,array,if,array,null,return,0,int,hash,1,for,long,i,0,i,array,size,i,hash,31,hash,array,get,i,return,hash
BigArrays -> public int hashCode(ByteArray array);1540583181;@see Arrays#hashCode(byte[]);public int hashCode(ByteArray array) {_        if (array == null) {_            return 0__        }__        int hash = 1__        for (long i = 0_ i < array.size()_ i++) {_            hash = 31 * hash + array.get(i)__        }__        return hash__    };see,arrays,hash,code,byte;public,int,hash,code,byte,array,array,if,array,null,return,0,int,hash,1,for,long,i,0,i,array,size,i,hash,31,hash,array,get,i,return,hash
BigArrays -> public int hashCode(ByteArray array);1544554541;@see Arrays#hashCode(byte[]);public int hashCode(ByteArray array) {_        if (array == null) {_            return 0__        }__        int hash = 1__        for (long i = 0_ i < array.size()_ i++) {_            hash = 31 * hash + array.get(i)__        }__        return hash__    };see,arrays,hash,code,byte;public,int,hash,code,byte,array,array,if,array,null,return,0,int,hash,1,for,long,i,0,i,array,size,i,hash,31,hash,array,get,i,return,hash
BigArrays -> public int hashCode(ByteArray array);1544623250;@see Arrays#hashCode(byte[]);public int hashCode(ByteArray array) {_        if (array == null) {_            return 0__        }__        int hash = 1__        for (long i = 0_ i < array.size()_ i++) {_            hash = 31 * hash + array.get(i)__        }__        return hash__    };see,arrays,hash,code,byte;public,int,hash,code,byte,array,array,if,array,null,return,0,int,hash,1,for,long,i,0,i,array,size,i,hash,31,hash,array,get,i,return,hash
BigArrays -> public IntArray newIntArray(long size, boolean clearOnResize);1524684173;Allocate a new {@link IntArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public IntArray newIntArray(long size, boolean clearOnResize) {_        if (size > INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigIntArray.estimateRamBytes(size), false)__            return new BigIntArray(size, this, clearOnResize)__        } else if (size >= INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new IntArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new IntArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,int,array,new,int,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,int,array,estimate,ram,bytes,size,false,return,new,big,int,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,int,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,int,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public IntArray newIntArray(long size, boolean clearOnResize);1528762805;Allocate a new {@link IntArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public IntArray newIntArray(long size, boolean clearOnResize) {_        if (size > INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigIntArray.estimateRamBytes(size), false)__            return new BigIntArray(size, this, clearOnResize)__        } else if (size >= INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new IntArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new IntArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,int,array,new,int,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,int,array,estimate,ram,bytes,size,false,return,new,big,int,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,int,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,int,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public IntArray newIntArray(long size, boolean clearOnResize);1540583181;Allocate a new {@link IntArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public IntArray newIntArray(long size, boolean clearOnResize) {_        if (size > INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigIntArray.estimateRamBytes(size), false)__            return new BigIntArray(size, this, clearOnResize)__        } else if (size >= INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new IntArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new IntArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,int,array,new,int,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,int,array,estimate,ram,bytes,size,false,return,new,big,int,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,int,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,int,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public IntArray newIntArray(long size, boolean clearOnResize);1544554541;Allocate a new {@link IntArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public IntArray newIntArray(long size, boolean clearOnResize) {_        if (size > INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigIntArray.estimateRamBytes(size), false)__            return new BigIntArray(size, this, clearOnResize)__        } else if (size >= INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new IntArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new IntArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,int,array,new,int,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,int,array,estimate,ram,bytes,size,false,return,new,big,int,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,int,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,int,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public IntArray newIntArray(long size, boolean clearOnResize);1544623250;Allocate a new {@link IntArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public IntArray newIntArray(long size, boolean clearOnResize) {_        if (size > PageCacheRecycler.INT_PAGE_SIZE) {_            _            _            adjustBreaker(BigIntArray.estimateRamBytes(size), false)__            return new BigIntArray(size, this, clearOnResize)__        } else if (size >= PageCacheRecycler.INT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<int[]> page = recycler.intPage(clearOnResize)__            return validate(new IntArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new IntArrayWrapper(this, new int[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,int,array,new,int,array,long,size,boolean,clear,on,resize,if,size,page,cache,recycler,adjust,breaker,big,int,array,estimate,ram,bytes,size,false,return,new,big,int,array,size,this,clear,on,resize,else,if,size,page,cache,recycler,2,recycler,null,final,recycler,v,int,page,recycler,int,page,clear,on,resize,return,validate,new,int,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,int,array,wrapper,this,new,int,int,size,size,null,clear,on,resize
BigArrays -> public <T> ObjectArray<T> newObjectArray(long size);1524684173;Allocate a new {@link ObjectArray}._@param size          the initial length of the array;public <T> ObjectArray<T> newObjectArray(long size) {_        if (size > OBJECT_PAGE_SIZE) {_            _            _            adjustBreaker(BigObjectArray.estimateRamBytes(size), false)__            return new BigObjectArray<>(size, this)__        } else if (size >= OBJECT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<Object[]> page = recycler.objectPage()__            return validate(new ObjectArrayWrapper<>(this, page.v(), size, page))__        } else {_            return validate(new ObjectArrayWrapper<>(this, new Object[(int) size], size, null))__        }_    };allocate,a,new,link,object,array,param,size,the,initial,length,of,the,array;public,t,object,array,t,new,object,array,long,size,if,size,adjust,breaker,big,object,array,estimate,ram,bytes,size,false,return,new,big,object,array,size,this,else,if,size,2,recycler,null,final,recycler,v,object,page,recycler,object,page,return,validate,new,object,array,wrapper,this,page,v,size,page,else,return,validate,new,object,array,wrapper,this,new,object,int,size,size,null
BigArrays -> public <T> ObjectArray<T> newObjectArray(long size);1528762805;Allocate a new {@link ObjectArray}._@param size          the initial length of the array;public <T> ObjectArray<T> newObjectArray(long size) {_        if (size > OBJECT_PAGE_SIZE) {_            _            _            adjustBreaker(BigObjectArray.estimateRamBytes(size), false)__            return new BigObjectArray<>(size, this)__        } else if (size >= OBJECT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<Object[]> page = recycler.objectPage()__            return validate(new ObjectArrayWrapper<>(this, page.v(), size, page))__        } else {_            return validate(new ObjectArrayWrapper<>(this, new Object[(int) size], size, null))__        }_    };allocate,a,new,link,object,array,param,size,the,initial,length,of,the,array;public,t,object,array,t,new,object,array,long,size,if,size,adjust,breaker,big,object,array,estimate,ram,bytes,size,false,return,new,big,object,array,size,this,else,if,size,2,recycler,null,final,recycler,v,object,page,recycler,object,page,return,validate,new,object,array,wrapper,this,page,v,size,page,else,return,validate,new,object,array,wrapper,this,new,object,int,size,size,null
BigArrays -> public <T> ObjectArray<T> newObjectArray(long size);1540583181;Allocate a new {@link ObjectArray}._@param size          the initial length of the array;public <T> ObjectArray<T> newObjectArray(long size) {_        if (size > OBJECT_PAGE_SIZE) {_            _            _            adjustBreaker(BigObjectArray.estimateRamBytes(size), false)__            return new BigObjectArray<>(size, this)__        } else if (size >= OBJECT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<Object[]> page = recycler.objectPage()__            return validate(new ObjectArrayWrapper<>(this, page.v(), size, page))__        } else {_            return validate(new ObjectArrayWrapper<>(this, new Object[(int) size], size, null))__        }_    };allocate,a,new,link,object,array,param,size,the,initial,length,of,the,array;public,t,object,array,t,new,object,array,long,size,if,size,adjust,breaker,big,object,array,estimate,ram,bytes,size,false,return,new,big,object,array,size,this,else,if,size,2,recycler,null,final,recycler,v,object,page,recycler,object,page,return,validate,new,object,array,wrapper,this,page,v,size,page,else,return,validate,new,object,array,wrapper,this,new,object,int,size,size,null
BigArrays -> public <T> ObjectArray<T> newObjectArray(long size);1544554541;Allocate a new {@link ObjectArray}._@param size          the initial length of the array;public <T> ObjectArray<T> newObjectArray(long size) {_        if (size > OBJECT_PAGE_SIZE) {_            _            _            adjustBreaker(BigObjectArray.estimateRamBytes(size), false)__            return new BigObjectArray<>(size, this)__        } else if (size >= OBJECT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<Object[]> page = recycler.objectPage()__            return validate(new ObjectArrayWrapper<>(this, page.v(), size, page))__        } else {_            return validate(new ObjectArrayWrapper<>(this, new Object[(int) size], size, null))__        }_    };allocate,a,new,link,object,array,param,size,the,initial,length,of,the,array;public,t,object,array,t,new,object,array,long,size,if,size,adjust,breaker,big,object,array,estimate,ram,bytes,size,false,return,new,big,object,array,size,this,else,if,size,2,recycler,null,final,recycler,v,object,page,recycler,object,page,return,validate,new,object,array,wrapper,this,page,v,size,page,else,return,validate,new,object,array,wrapper,this,new,object,int,size,size,null
BigArrays -> public <T> ObjectArray<T> newObjectArray(long size);1544623250;Allocate a new {@link ObjectArray}._@param size          the initial length of the array;public <T> ObjectArray<T> newObjectArray(long size) {_        if (size > PageCacheRecycler.OBJECT_PAGE_SIZE) {_            _            _            adjustBreaker(BigObjectArray.estimateRamBytes(size), false)__            return new BigObjectArray<>(size, this)__        } else if (size >= PageCacheRecycler.OBJECT_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<Object[]> page = recycler.objectPage()__            return validate(new ObjectArrayWrapper<>(this, page.v(), size, page))__        } else {_            return validate(new ObjectArrayWrapper<>(this, new Object[(int) size], size, null))__        }_    };allocate,a,new,link,object,array,param,size,the,initial,length,of,the,array;public,t,object,array,t,new,object,array,long,size,if,size,page,cache,recycler,adjust,breaker,big,object,array,estimate,ram,bytes,size,false,return,new,big,object,array,size,this,else,if,size,page,cache,recycler,2,recycler,null,final,recycler,v,object,page,recycler,object,page,return,validate,new,object,array,wrapper,this,page,v,size,page,else,return,validate,new,object,array,wrapper,this,new,object,int,size,size,null
BigArrays -> public static long overSize(long minTargetSize);1524684173;Returns the next size to grow when working with parallel arrays that may have different page sizes or number of bytes per element.;public static long overSize(long minTargetSize) {_        return overSize(minTargetSize, PAGE_SIZE_IN_BYTES / 8, 1)__    };returns,the,next,size,to,grow,when,working,with,parallel,arrays,that,may,have,different,page,sizes,or,number,of,bytes,per,element;public,static,long,over,size,long,min,target,size,return,over,size,min,target,size,8,1
BigArrays -> public static long overSize(long minTargetSize);1528762805;Returns the next size to grow when working with parallel arrays that may have different page sizes or number of bytes per element.;public static long overSize(long minTargetSize) {_        return overSize(minTargetSize, PAGE_SIZE_IN_BYTES / 8, 1)__    };returns,the,next,size,to,grow,when,working,with,parallel,arrays,that,may,have,different,page,sizes,or,number,of,bytes,per,element;public,static,long,over,size,long,min,target,size,return,over,size,min,target,size,8,1
BigArrays -> public static long overSize(long minTargetSize);1540583181;Returns the next size to grow when working with parallel arrays that_may have different page sizes or number of bytes per element.;public static long overSize(long minTargetSize) {_        return overSize(minTargetSize, PAGE_SIZE_IN_BYTES / 8, 1)__    };returns,the,next,size,to,grow,when,working,with,parallel,arrays,that,may,have,different,page,sizes,or,number,of,bytes,per,element;public,static,long,over,size,long,min,target,size,return,over,size,min,target,size,8,1
BigArrays -> public static long overSize(long minTargetSize);1544554541;Returns the next size to grow when working with parallel arrays that_may have different page sizes or number of bytes per element.;public static long overSize(long minTargetSize) {_        return overSize(minTargetSize, PAGE_SIZE_IN_BYTES / 8, 1)__    };returns,the,next,size,to,grow,when,working,with,parallel,arrays,that,may,have,different,page,sizes,or,number,of,bytes,per,element;public,static,long,over,size,long,min,target,size,return,over,size,min,target,size,8,1
BigArrays -> public static long overSize(long minTargetSize);1544623250;Returns the next size to grow when working with parallel arrays that_may have different page sizes or number of bytes per element.;public static long overSize(long minTargetSize) {_        return overSize(minTargetSize, PageCacheRecycler.PAGE_SIZE_IN_BYTES / 8, 1)__    };returns,the,next,size,to,grow,when,working,with,parallel,arrays,that,may,have,different,page,sizes,or,number,of,bytes,per,element;public,static,long,over,size,long,min,target,size,return,over,size,min,target,size,page,cache,recycler,8,1
BigArrays -> public DoubleArray resize(DoubleArray array, long size);1524684173;Resize the array to the exact provided size.;public DoubleArray resize(DoubleArray array, long size) {_        if (array instanceof BigDoubleArray) {_            return resizeInPlace((BigDoubleArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final DoubleArray newArray = newDoubleArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,double,array,resize,double,array,array,long,size,if,array,instanceof,big,double,array,return,resize,in,place,big,double,array,array,size,else,abstract,array,arr,abstract,array,array,final,double,array,new,array,new,double,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public DoubleArray resize(DoubleArray array, long size);1528762805;Resize the array to the exact provided size.;public DoubleArray resize(DoubleArray array, long size) {_        if (array instanceof BigDoubleArray) {_            return resizeInPlace((BigDoubleArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final DoubleArray newArray = newDoubleArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,double,array,resize,double,array,array,long,size,if,array,instanceof,big,double,array,return,resize,in,place,big,double,array,array,size,else,abstract,array,arr,abstract,array,array,final,double,array,new,array,new,double,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public DoubleArray resize(DoubleArray array, long size);1540583181;Resize the array to the exact provided size.;public DoubleArray resize(DoubleArray array, long size) {_        if (array instanceof BigDoubleArray) {_            return resizeInPlace((BigDoubleArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final DoubleArray newArray = newDoubleArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,double,array,resize,double,array,array,long,size,if,array,instanceof,big,double,array,return,resize,in,place,big,double,array,array,size,else,abstract,array,arr,abstract,array,array,final,double,array,new,array,new,double,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public DoubleArray resize(DoubleArray array, long size);1544554541;Resize the array to the exact provided size.;public DoubleArray resize(DoubleArray array, long size) {_        if (array instanceof BigDoubleArray) {_            return resizeInPlace((BigDoubleArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final DoubleArray newArray = newDoubleArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,double,array,resize,double,array,array,long,size,if,array,instanceof,big,double,array,return,resize,in,place,big,double,array,array,size,else,abstract,array,arr,abstract,array,array,final,double,array,new,array,new,double,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public DoubleArray resize(DoubleArray array, long size);1544623250;Resize the array to the exact provided size.;public DoubleArray resize(DoubleArray array, long size) {_        if (array instanceof BigDoubleArray) {_            return resizeInPlace((BigDoubleArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final DoubleArray newArray = newDoubleArray(size, arr.clearOnResize)__            for (long i = 0, end = Math.min(size, array.size())_ i < end_ ++i) {_                newArray.set(i, array.get(i))__            }_            array.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,double,array,resize,double,array,array,long,size,if,array,instanceof,big,double,array,return,resize,in,place,big,double,array,array,size,else,abstract,array,arr,abstract,array,array,final,double,array,new,array,new,double,array,size,arr,clear,on,resize,for,long,i,0,end,math,min,size,array,size,i,end,i,new,array,set,i,array,get,i,array,close,return,new,array
BigArrays -> public FloatArray newFloatArray(long size);1524684173;Allocate a new {@link FloatArray} of the given capacity.;public FloatArray newFloatArray(long size) {_        return newFloatArray(size, true)__    };allocate,a,new,link,float,array,of,the,given,capacity;public,float,array,new,float,array,long,size,return,new,float,array,size,true
BigArrays -> public FloatArray newFloatArray(long size);1528762805;Allocate a new {@link FloatArray} of the given capacity.;public FloatArray newFloatArray(long size) {_        return newFloatArray(size, true)__    };allocate,a,new,link,float,array,of,the,given,capacity;public,float,array,new,float,array,long,size,return,new,float,array,size,true
BigArrays -> public FloatArray newFloatArray(long size);1540583181;Allocate a new {@link FloatArray} of the given capacity.;public FloatArray newFloatArray(long size) {_        return newFloatArray(size, true)__    };allocate,a,new,link,float,array,of,the,given,capacity;public,float,array,new,float,array,long,size,return,new,float,array,size,true
BigArrays -> public FloatArray newFloatArray(long size);1544554541;Allocate a new {@link FloatArray} of the given capacity.;public FloatArray newFloatArray(long size) {_        return newFloatArray(size, true)__    };allocate,a,new,link,float,array,of,the,given,capacity;public,float,array,new,float,array,long,size,return,new,float,array,size,true
BigArrays -> public FloatArray newFloatArray(long size);1544623250;Allocate a new {@link FloatArray} of the given capacity.;public FloatArray newFloatArray(long size) {_        return newFloatArray(size, true)__    };allocate,a,new,link,float,array,of,the,given,capacity;public,float,array,new,float,array,long,size,return,new,float,array,size,true
BigArrays -> public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize);1524684173;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, OBJECT_PAGE_SIZE, RamUsageEstimator.NUM_BYTES_OBJECT_REF)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,t,object,array,t,grow,object,array,t,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,ram,usage,estimator,return,resize,array,new,size
BigArrays -> public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize);1528762805;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, OBJECT_PAGE_SIZE, RamUsageEstimator.NUM_BYTES_OBJECT_REF)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,t,object,array,t,grow,object,array,t,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,ram,usage,estimator,return,resize,array,new,size
BigArrays -> public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize);1540583181;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, OBJECT_PAGE_SIZE, RamUsageEstimator.NUM_BYTES_OBJECT_REF)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,t,object,array,t,grow,object,array,t,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,ram,usage,estimator,return,resize,array,new,size
BigArrays -> public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize);1544554541;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, OBJECT_PAGE_SIZE, RamUsageEstimator.NUM_BYTES_OBJECT_REF)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,t,object,array,t,grow,object,array,t,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,ram,usage,estimator,return,resize,array,new,size
BigArrays -> public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize);1544623250;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public <T> ObjectArray<T> grow(ObjectArray<T> array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, PageCacheRecycler.OBJECT_PAGE_SIZE, RamUsageEstimator.NUM_BYTES_OBJECT_REF)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,t,object,array,t,grow,object,array,t,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,page,cache,recycler,ram,usage,estimator,return,resize,array,new,size
BigArrays -> public IntArray newIntArray(long size);1524684173;Allocate a new {@link IntArray}._@param size          the initial length of the array;public IntArray newIntArray(long size) {_        return newIntArray(size, true)__    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array;public,int,array,new,int,array,long,size,return,new,int,array,size,true
BigArrays -> public IntArray newIntArray(long size);1528762805;Allocate a new {@link IntArray}._@param size          the initial length of the array;public IntArray newIntArray(long size) {_        return newIntArray(size, true)__    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array;public,int,array,new,int,array,long,size,return,new,int,array,size,true
BigArrays -> public IntArray newIntArray(long size);1540583181;Allocate a new {@link IntArray}._@param size          the initial length of the array;public IntArray newIntArray(long size) {_        return newIntArray(size, true)__    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array;public,int,array,new,int,array,long,size,return,new,int,array,size,true
BigArrays -> public IntArray newIntArray(long size);1544554541;Allocate a new {@link IntArray}._@param size          the initial length of the array;public IntArray newIntArray(long size) {_        return newIntArray(size, true)__    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array;public,int,array,new,int,array,long,size,return,new,int,array,size,true
BigArrays -> public IntArray newIntArray(long size);1544623250;Allocate a new {@link IntArray}._@param size          the initial length of the array;public IntArray newIntArray(long size) {_        return newIntArray(size, true)__    };allocate,a,new,link,int,array,param,size,the,initial,length,of,the,array;public,int,array,new,int,array,long,size,return,new,int,array,size,true
BigArrays -> public LongArray grow(LongArray array, long minSize);1524684173;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public LongArray grow(LongArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,long,array,grow,long,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,long,bytes,return,resize,array,new,size
BigArrays -> public LongArray grow(LongArray array, long minSize);1528762805;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public LongArray grow(LongArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,long,array,grow,long,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,long,bytes,return,resize,array,new,size
BigArrays -> public LongArray grow(LongArray array, long minSize);1540583181;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public LongArray grow(LongArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,long,array,grow,long,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,long,bytes,return,resize,array,new,size
BigArrays -> public LongArray grow(LongArray array, long minSize);1544554541;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public LongArray grow(LongArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,long,array,grow,long,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,long,bytes,return,resize,array,new,size
BigArrays -> public LongArray grow(LongArray array, long minSize);1544623250;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public LongArray grow(LongArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, PageCacheRecycler.LONG_PAGE_SIZE, Long.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,long,array,grow,long,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,page,cache,recycler,long,bytes,return,resize,array,new,size
BigArrays -> public ByteArray resize(ByteArray array, long size);1524684173;Resize the array to the exact provided size.;public ByteArray resize(ByteArray array, long size) {_        if (array instanceof BigByteArray) {_            return resizeInPlace((BigByteArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final ByteArray newArray = newByteArray(size, arr.clearOnResize)__            final byte[] rawArray = ((ByteArrayWrapper) array).array__            newArray.set(0, rawArray, 0, (int) Math.min(rawArray.length, newArray.size()))__            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,byte,array,resize,byte,array,array,long,size,if,array,instanceof,big,byte,array,return,resize,in,place,big,byte,array,array,size,else,abstract,array,arr,abstract,array,array,final,byte,array,new,array,new,byte,array,size,arr,clear,on,resize,final,byte,raw,array,byte,array,wrapper,array,array,new,array,set,0,raw,array,0,int,math,min,raw,array,length,new,array,size,arr,close,return,new,array
BigArrays -> public ByteArray resize(ByteArray array, long size);1528762805;Resize the array to the exact provided size.;public ByteArray resize(ByteArray array, long size) {_        if (array instanceof BigByteArray) {_            return resizeInPlace((BigByteArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final ByteArray newArray = newByteArray(size, arr.clearOnResize)__            final byte[] rawArray = ((ByteArrayWrapper) array).array__            newArray.set(0, rawArray, 0, (int) Math.min(rawArray.length, newArray.size()))__            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,byte,array,resize,byte,array,array,long,size,if,array,instanceof,big,byte,array,return,resize,in,place,big,byte,array,array,size,else,abstract,array,arr,abstract,array,array,final,byte,array,new,array,new,byte,array,size,arr,clear,on,resize,final,byte,raw,array,byte,array,wrapper,array,array,new,array,set,0,raw,array,0,int,math,min,raw,array,length,new,array,size,arr,close,return,new,array
BigArrays -> public ByteArray resize(ByteArray array, long size);1540583181;Resize the array to the exact provided size.;public ByteArray resize(ByteArray array, long size) {_        if (array instanceof BigByteArray) {_            return resizeInPlace((BigByteArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final ByteArray newArray = newByteArray(size, arr.clearOnResize)__            final byte[] rawArray = ((ByteArrayWrapper) array).array__            newArray.set(0, rawArray, 0, (int) Math.min(rawArray.length, newArray.size()))__            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,byte,array,resize,byte,array,array,long,size,if,array,instanceof,big,byte,array,return,resize,in,place,big,byte,array,array,size,else,abstract,array,arr,abstract,array,array,final,byte,array,new,array,new,byte,array,size,arr,clear,on,resize,final,byte,raw,array,byte,array,wrapper,array,array,new,array,set,0,raw,array,0,int,math,min,raw,array,length,new,array,size,arr,close,return,new,array
BigArrays -> public ByteArray resize(ByteArray array, long size);1544554541;Resize the array to the exact provided size.;public ByteArray resize(ByteArray array, long size) {_        if (array instanceof BigByteArray) {_            return resizeInPlace((BigByteArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final ByteArray newArray = newByteArray(size, arr.clearOnResize)__            final byte[] rawArray = ((ByteArrayWrapper) array).array__            newArray.set(0, rawArray, 0, (int) Math.min(rawArray.length, newArray.size()))__            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,byte,array,resize,byte,array,array,long,size,if,array,instanceof,big,byte,array,return,resize,in,place,big,byte,array,array,size,else,abstract,array,arr,abstract,array,array,final,byte,array,new,array,new,byte,array,size,arr,clear,on,resize,final,byte,raw,array,byte,array,wrapper,array,array,new,array,set,0,raw,array,0,int,math,min,raw,array,length,new,array,size,arr,close,return,new,array
BigArrays -> public ByteArray resize(ByteArray array, long size);1544623250;Resize the array to the exact provided size.;public ByteArray resize(ByteArray array, long size) {_        if (array instanceof BigByteArray) {_            return resizeInPlace((BigByteArray) array, size)__        } else {_            AbstractArray arr = (AbstractArray) array__            final ByteArray newArray = newByteArray(size, arr.clearOnResize)__            final byte[] rawArray = ((ByteArrayWrapper) array).array__            newArray.set(0, rawArray, 0, (int) Math.min(rawArray.length, newArray.size()))__            arr.close()__            return newArray__        }_    };resize,the,array,to,the,exact,provided,size;public,byte,array,resize,byte,array,array,long,size,if,array,instanceof,big,byte,array,return,resize,in,place,big,byte,array,array,size,else,abstract,array,arr,abstract,array,array,final,byte,array,new,array,new,byte,array,size,arr,clear,on,resize,final,byte,raw,array,byte,array,wrapper,array,array,new,array,set,0,raw,array,0,int,math,min,raw,array,length,new,array,size,arr,close,return,new,array
BigArrays -> void adjustBreaker(final long delta, final boolean isDataAlreadyCreated);1524684173;Adjust the circuit breaker with the given delta, if the delta is_negative, or checkBreaker is false, the breaker will be adjusted_without tripping.  If the data was already created before calling_this method, and the breaker trips, we add the delta without breaking_to account for the created data.  If the data has not been created yet,_we do not add the delta to the breaker if it trips.;void adjustBreaker(final long delta, final boolean isDataAlreadyCreated) {_        if (this.breakerService != null) {_            CircuitBreaker breaker = this.breakerService.getBreaker(CircuitBreaker.REQUEST)__            if (this.checkBreaker) {_                _                _                if (delta > 0) {_                    try {_                        breaker.addEstimateBytesAndMaybeBreak(delta, "<reused_arrays>")__                    } catch (CircuitBreakingException e) {_                        if (isDataAlreadyCreated) {_                            _                            _                            breaker.addWithoutBreaking(delta)__                        }_                        _                        throw e__                    }_                } else {_                    breaker.addWithoutBreaking(delta)__                }_            } else {_                _                _                breaker.addWithoutBreaking(delta)__            }_        }_    };adjust,the,circuit,breaker,with,the,given,delta,if,the,delta,is,negative,or,check,breaker,is,false,the,breaker,will,be,adjusted,without,tripping,if,the,data,was,already,created,before,calling,this,method,and,the,breaker,trips,we,add,the,delta,without,breaking,to,account,for,the,created,data,if,the,data,has,not,been,created,yet,we,do,not,add,the,delta,to,the,breaker,if,it,trips;void,adjust,breaker,final,long,delta,final,boolean,is,data,already,created,if,this,breaker,service,null,circuit,breaker,breaker,this,breaker,service,get,breaker,circuit,breaker,request,if,this,check,breaker,if,delta,0,try,breaker,add,estimate,bytes,and,maybe,break,delta,catch,circuit,breaking,exception,e,if,is,data,already,created,breaker,add,without,breaking,delta,throw,e,else,breaker,add,without,breaking,delta,else,breaker,add,without,breaking,delta
BigArrays -> void adjustBreaker(final long delta, final boolean isDataAlreadyCreated);1528762805;Adjust the circuit breaker with the given delta, if the delta is_negative, or checkBreaker is false, the breaker will be adjusted_without tripping.  If the data was already created before calling_this method, and the breaker trips, we add the delta without breaking_to account for the created data.  If the data has not been created yet,_we do not add the delta to the breaker if it trips.;void adjustBreaker(final long delta, final boolean isDataAlreadyCreated) {_        if (this.breakerService != null) {_            CircuitBreaker breaker = this.breakerService.getBreaker(CircuitBreaker.REQUEST)__            if (this.checkBreaker) {_                _                _                if (delta > 0) {_                    try {_                        breaker.addEstimateBytesAndMaybeBreak(delta, "<reused_arrays>")__                    } catch (CircuitBreakingException e) {_                        if (isDataAlreadyCreated) {_                            _                            _                            breaker.addWithoutBreaking(delta)__                        }_                        _                        throw e__                    }_                } else {_                    breaker.addWithoutBreaking(delta)__                }_            } else {_                _                _                breaker.addWithoutBreaking(delta)__            }_        }_    };adjust,the,circuit,breaker,with,the,given,delta,if,the,delta,is,negative,or,check,breaker,is,false,the,breaker,will,be,adjusted,without,tripping,if,the,data,was,already,created,before,calling,this,method,and,the,breaker,trips,we,add,the,delta,without,breaking,to,account,for,the,created,data,if,the,data,has,not,been,created,yet,we,do,not,add,the,delta,to,the,breaker,if,it,trips;void,adjust,breaker,final,long,delta,final,boolean,is,data,already,created,if,this,breaker,service,null,circuit,breaker,breaker,this,breaker,service,get,breaker,circuit,breaker,request,if,this,check,breaker,if,delta,0,try,breaker,add,estimate,bytes,and,maybe,break,delta,catch,circuit,breaking,exception,e,if,is,data,already,created,breaker,add,without,breaking,delta,throw,e,else,breaker,add,without,breaking,delta,else,breaker,add,without,breaking,delta
BigArrays -> void adjustBreaker(final long delta, final boolean isDataAlreadyCreated);1540583181;Adjust the circuit breaker with the given delta, if the delta is_negative, or checkBreaker is false, the breaker will be adjusted_without tripping.  If the data was already created before calling_this method, and the breaker trips, we add the delta without breaking_to account for the created data.  If the data has not been created yet,_we do not add the delta to the breaker if it trips.;void adjustBreaker(final long delta, final boolean isDataAlreadyCreated) {_        if (this.breakerService != null) {_            CircuitBreaker breaker = this.breakerService.getBreaker(CircuitBreaker.REQUEST)__            if (this.checkBreaker) {_                _                _                if (delta > 0) {_                    try {_                        breaker.addEstimateBytesAndMaybeBreak(delta, "<reused_arrays>")__                    } catch (CircuitBreakingException e) {_                        if (isDataAlreadyCreated) {_                            _                            _                            breaker.addWithoutBreaking(delta)__                        }_                        _                        throw e__                    }_                } else {_                    breaker.addWithoutBreaking(delta)__                }_            } else {_                _                _                breaker.addWithoutBreaking(delta)__            }_        }_    };adjust,the,circuit,breaker,with,the,given,delta,if,the,delta,is,negative,or,check,breaker,is,false,the,breaker,will,be,adjusted,without,tripping,if,the,data,was,already,created,before,calling,this,method,and,the,breaker,trips,we,add,the,delta,without,breaking,to,account,for,the,created,data,if,the,data,has,not,been,created,yet,we,do,not,add,the,delta,to,the,breaker,if,it,trips;void,adjust,breaker,final,long,delta,final,boolean,is,data,already,created,if,this,breaker,service,null,circuit,breaker,breaker,this,breaker,service,get,breaker,circuit,breaker,request,if,this,check,breaker,if,delta,0,try,breaker,add,estimate,bytes,and,maybe,break,delta,catch,circuit,breaking,exception,e,if,is,data,already,created,breaker,add,without,breaking,delta,throw,e,else,breaker,add,without,breaking,delta,else,breaker,add,without,breaking,delta
BigArrays -> void adjustBreaker(final long delta, final boolean isDataAlreadyCreated);1544554541;Adjust the circuit breaker with the given delta, if the delta is_negative, or checkBreaker is false, the breaker will be adjusted_without tripping.  If the data was already created before calling_this method, and the breaker trips, we add the delta without breaking_to account for the created data.  If the data has not been created yet,_we do not add the delta to the breaker if it trips.;void adjustBreaker(final long delta, final boolean isDataAlreadyCreated) {_        if (this.breakerService != null) {_            CircuitBreaker breaker = this.breakerService.getBreaker(breakerName)__            if (this.checkBreaker) {_                _                _                if (delta > 0) {_                    try {_                        breaker.addEstimateBytesAndMaybeBreak(delta, "<reused_arrays>")__                    } catch (CircuitBreakingException e) {_                        if (isDataAlreadyCreated) {_                            _                            _                            breaker.addWithoutBreaking(delta)__                        }_                        _                        throw e__                    }_                } else {_                    breaker.addWithoutBreaking(delta)__                }_            } else {_                _                _                breaker.addWithoutBreaking(delta)__            }_        }_    };adjust,the,circuit,breaker,with,the,given,delta,if,the,delta,is,negative,or,check,breaker,is,false,the,breaker,will,be,adjusted,without,tripping,if,the,data,was,already,created,before,calling,this,method,and,the,breaker,trips,we,add,the,delta,without,breaking,to,account,for,the,created,data,if,the,data,has,not,been,created,yet,we,do,not,add,the,delta,to,the,breaker,if,it,trips;void,adjust,breaker,final,long,delta,final,boolean,is,data,already,created,if,this,breaker,service,null,circuit,breaker,breaker,this,breaker,service,get,breaker,breaker,name,if,this,check,breaker,if,delta,0,try,breaker,add,estimate,bytes,and,maybe,break,delta,catch,circuit,breaking,exception,e,if,is,data,already,created,breaker,add,without,breaking,delta,throw,e,else,breaker,add,without,breaking,delta,else,breaker,add,without,breaking,delta
BigArrays -> void adjustBreaker(final long delta, final boolean isDataAlreadyCreated);1544623250;Adjust the circuit breaker with the given delta, if the delta is_negative, or checkBreaker is false, the breaker will be adjusted_without tripping.  If the data was already created before calling_this method, and the breaker trips, we add the delta without breaking_to account for the created data.  If the data has not been created yet,_we do not add the delta to the breaker if it trips.;void adjustBreaker(final long delta, final boolean isDataAlreadyCreated) {_        if (this.breakerService != null) {_            CircuitBreaker breaker = this.breakerService.getBreaker(breakerName)__            if (this.checkBreaker) {_                _                _                if (delta > 0) {_                    try {_                        breaker.addEstimateBytesAndMaybeBreak(delta, "<reused_arrays>")__                    } catch (CircuitBreakingException e) {_                        if (isDataAlreadyCreated) {_                            _                            _                            breaker.addWithoutBreaking(delta)__                        }_                        _                        throw e__                    }_                } else {_                    breaker.addWithoutBreaking(delta)__                }_            } else {_                _                _                breaker.addWithoutBreaking(delta)__            }_        }_    };adjust,the,circuit,breaker,with,the,given,delta,if,the,delta,is,negative,or,check,breaker,is,false,the,breaker,will,be,adjusted,without,tripping,if,the,data,was,already,created,before,calling,this,method,and,the,breaker,trips,we,add,the,delta,without,breaking,to,account,for,the,created,data,if,the,data,has,not,been,created,yet,we,do,not,add,the,delta,to,the,breaker,if,it,trips;void,adjust,breaker,final,long,delta,final,boolean,is,data,already,created,if,this,breaker,service,null,circuit,breaker,breaker,this,breaker,service,get,breaker,breaker,name,if,this,check,breaker,if,delta,0,try,breaker,add,estimate,bytes,and,maybe,break,delta,catch,circuit,breaking,exception,e,if,is,data,already,created,breaker,add,without,breaking,delta,throw,e,else,breaker,add,without,breaking,delta,else,breaker,add,without,breaking,delta
BigArrays -> public DoubleArray newDoubleArray(long size, boolean clearOnResize);1524684173;Allocate a new {@link DoubleArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public DoubleArray newDoubleArray(long size, boolean clearOnResize) {_        if (size > LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigDoubleArray.estimateRamBytes(size), false)__            return new BigDoubleArray(size, this, clearOnResize)__        } else if (size >= LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new DoubleArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new DoubleArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,double,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,double,array,new,double,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,double,array,estimate,ram,bytes,size,false,return,new,big,double,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,double,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,double,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public DoubleArray newDoubleArray(long size, boolean clearOnResize);1528762805;Allocate a new {@link DoubleArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public DoubleArray newDoubleArray(long size, boolean clearOnResize) {_        if (size > LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigDoubleArray.estimateRamBytes(size), false)__            return new BigDoubleArray(size, this, clearOnResize)__        } else if (size >= LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new DoubleArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new DoubleArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,double,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,double,array,new,double,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,double,array,estimate,ram,bytes,size,false,return,new,big,double,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,double,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,double,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public DoubleArray newDoubleArray(long size, boolean clearOnResize);1540583181;Allocate a new {@link DoubleArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public DoubleArray newDoubleArray(long size, boolean clearOnResize) {_        if (size > LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigDoubleArray.estimateRamBytes(size), false)__            return new BigDoubleArray(size, this, clearOnResize)__        } else if (size >= LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new DoubleArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new DoubleArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,double,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,double,array,new,double,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,double,array,estimate,ram,bytes,size,false,return,new,big,double,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,double,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,double,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public DoubleArray newDoubleArray(long size, boolean clearOnResize);1544554541;Allocate a new {@link DoubleArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public DoubleArray newDoubleArray(long size, boolean clearOnResize) {_        if (size > LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigDoubleArray.estimateRamBytes(size), false)__            return new BigDoubleArray(size, this, clearOnResize)__        } else if (size >= LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new DoubleArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new DoubleArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,double,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,double,array,new,double,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,double,array,estimate,ram,bytes,size,false,return,new,big,double,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,double,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,double,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public DoubleArray newDoubleArray(long size, boolean clearOnResize);1544623250;Allocate a new {@link DoubleArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public DoubleArray newDoubleArray(long size, boolean clearOnResize) {_        if (size > PageCacheRecycler.LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigDoubleArray.estimateRamBytes(size), false)__            return new BigDoubleArray(size, this, clearOnResize)__        } else if (size >= PageCacheRecycler.LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new DoubleArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new DoubleArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,double,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,double,array,new,double,array,long,size,boolean,clear,on,resize,if,size,page,cache,recycler,adjust,breaker,big,double,array,estimate,ram,bytes,size,false,return,new,big,double,array,size,this,clear,on,resize,else,if,size,page,cache,recycler,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,double,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,double,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public boolean equals(ByteArray array, ByteArray other);1524684173;@see Arrays#equals(byte[], byte[]);public boolean equals(ByteArray array, ByteArray other) {_        if (array == other) {_            return true__        }__        if (array.size() != other.size()) {_            return false__        }__        for (long i = 0_ i < array.size()_ i++) {_            if (array.get(i) != other.get(i)) {_                return false__            }_        }__        return true__    };see,arrays,equals,byte,byte;public,boolean,equals,byte,array,array,byte,array,other,if,array,other,return,true,if,array,size,other,size,return,false,for,long,i,0,i,array,size,i,if,array,get,i,other,get,i,return,false,return,true
BigArrays -> public boolean equals(ByteArray array, ByteArray other);1528762805;@see Arrays#equals(byte[], byte[]);public boolean equals(ByteArray array, ByteArray other) {_        if (array == other) {_            return true__        }__        if (array.size() != other.size()) {_            return false__        }__        for (long i = 0_ i < array.size()_ i++) {_            if (array.get(i) != other.get(i)) {_                return false__            }_        }__        return true__    };see,arrays,equals,byte,byte;public,boolean,equals,byte,array,array,byte,array,other,if,array,other,return,true,if,array,size,other,size,return,false,for,long,i,0,i,array,size,i,if,array,get,i,other,get,i,return,false,return,true
BigArrays -> public boolean equals(ByteArray array, ByteArray other);1540583181;@see Arrays#equals(byte[], byte[]);public boolean equals(ByteArray array, ByteArray other) {_        if (array == other) {_            return true__        }__        if (array.size() != other.size()) {_            return false__        }__        for (long i = 0_ i < array.size()_ i++) {_            if (array.get(i) != other.get(i)) {_                return false__            }_        }__        return true__    };see,arrays,equals,byte,byte;public,boolean,equals,byte,array,array,byte,array,other,if,array,other,return,true,if,array,size,other,size,return,false,for,long,i,0,i,array,size,i,if,array,get,i,other,get,i,return,false,return,true
BigArrays -> public boolean equals(ByteArray array, ByteArray other);1544554541;@see Arrays#equals(byte[], byte[]);public boolean equals(ByteArray array, ByteArray other) {_        if (array == other) {_            return true__        }__        if (array.size() != other.size()) {_            return false__        }__        for (long i = 0_ i < array.size()_ i++) {_            if (array.get(i) != other.get(i)) {_                return false__            }_        }__        return true__    };see,arrays,equals,byte,byte;public,boolean,equals,byte,array,array,byte,array,other,if,array,other,return,true,if,array,size,other,size,return,false,for,long,i,0,i,array,size,i,if,array,get,i,other,get,i,return,false,return,true
BigArrays -> public boolean equals(ByteArray array, ByteArray other);1544623250;@see Arrays#equals(byte[], byte[]);public boolean equals(ByteArray array, ByteArray other) {_        if (array == other) {_            return true__        }__        if (array.size() != other.size()) {_            return false__        }__        for (long i = 0_ i < array.size()_ i++) {_            if (array.get(i) != other.get(i)) {_                return false__            }_        }__        return true__    };see,arrays,equals,byte,byte;public,boolean,equals,byte,array,array,byte,array,other,if,array,other,return,true,if,array,size,other,size,return,false,for,long,i,0,i,array,size,i,if,array,get,i,other,get,i,return,false,return,true
BigArrays -> public IntArray grow(IntArray array, long minSize);1524684173;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public IntArray grow(IntArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, INT_PAGE_SIZE, Integer.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,int,array,grow,int,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,integer,bytes,return,resize,array,new,size
BigArrays -> public IntArray grow(IntArray array, long minSize);1528762805;Grow an array to a size that is larger than <code>minSize</code>, preserving content, and potentially reusing part of the provided array.;public IntArray grow(IntArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, INT_PAGE_SIZE, Integer.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,int,array,grow,int,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,integer,bytes,return,resize,array,new,size
BigArrays -> public IntArray grow(IntArray array, long minSize);1540583181;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public IntArray grow(IntArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, INT_PAGE_SIZE, Integer.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,int,array,grow,int,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,integer,bytes,return,resize,array,new,size
BigArrays -> public IntArray grow(IntArray array, long minSize);1544554541;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public IntArray grow(IntArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, INT_PAGE_SIZE, Integer.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,int,array,grow,int,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,integer,bytes,return,resize,array,new,size
BigArrays -> public IntArray grow(IntArray array, long minSize);1544623250;Grow an array to a size that is larger than <code>minSize</code>,_preserving content, and potentially reusing part of the provided array.;public IntArray grow(IntArray array, long minSize) {_        if (minSize <= array.size()) {_            return array__        }_        final long newSize = overSize(minSize, PageCacheRecycler.INT_PAGE_SIZE, Integer.BYTES)__        return resize(array, newSize)__    };grow,an,array,to,a,size,that,is,larger,than,code,min,size,code,preserving,content,and,potentially,reusing,part,of,the,provided,array;public,int,array,grow,int,array,array,long,min,size,if,min,size,array,size,return,array,final,long,new,size,over,size,min,size,page,cache,recycler,integer,bytes,return,resize,array,new,size
BigArrays -> public LongArray newLongArray(long size, boolean clearOnResize);1524684173;Allocate a new {@link LongArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public LongArray newLongArray(long size, boolean clearOnResize) {_        if (size > LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigLongArray.estimateRamBytes(size), false)__            return new BigLongArray(size, this, clearOnResize)__        } else if (size >= LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new LongArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new LongArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,long,array,new,long,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,long,array,estimate,ram,bytes,size,false,return,new,big,long,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,long,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,long,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public LongArray newLongArray(long size, boolean clearOnResize);1528762805;Allocate a new {@link LongArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public LongArray newLongArray(long size, boolean clearOnResize) {_        if (size > LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigLongArray.estimateRamBytes(size), false)__            return new BigLongArray(size, this, clearOnResize)__        } else if (size >= LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new LongArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new LongArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,long,array,new,long,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,long,array,estimate,ram,bytes,size,false,return,new,big,long,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,long,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,long,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public LongArray newLongArray(long size, boolean clearOnResize);1540583181;Allocate a new {@link LongArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public LongArray newLongArray(long size, boolean clearOnResize) {_        if (size > LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigLongArray.estimateRamBytes(size), false)__            return new BigLongArray(size, this, clearOnResize)__        } else if (size >= LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new LongArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new LongArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,long,array,new,long,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,long,array,estimate,ram,bytes,size,false,return,new,big,long,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,long,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,long,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public LongArray newLongArray(long size, boolean clearOnResize);1544554541;Allocate a new {@link LongArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public LongArray newLongArray(long size, boolean clearOnResize) {_        if (size > LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigLongArray.estimateRamBytes(size), false)__            return new BigLongArray(size, this, clearOnResize)__        } else if (size >= LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new LongArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new LongArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,long,array,new,long,array,long,size,boolean,clear,on,resize,if,size,adjust,breaker,big,long,array,estimate,ram,bytes,size,false,return,new,big,long,array,size,this,clear,on,resize,else,if,size,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,long,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,long,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
BigArrays -> public LongArray newLongArray(long size, boolean clearOnResize);1544623250;Allocate a new {@link LongArray}._@param size          the initial length of the array_@param clearOnResize whether values should be set to 0 on initialization and resize;public LongArray newLongArray(long size, boolean clearOnResize) {_        if (size > PageCacheRecycler.LONG_PAGE_SIZE) {_            _            _            adjustBreaker(BigLongArray.estimateRamBytes(size), false)__            return new BigLongArray(size, this, clearOnResize)__        } else if (size >= PageCacheRecycler.LONG_PAGE_SIZE / 2 && recycler != null) {_            final Recycler.V<long[]> page = recycler.longPage(clearOnResize)__            return validate(new LongArrayWrapper(this, page.v(), size, page, clearOnResize))__        } else {_            return validate(new LongArrayWrapper(this, new long[(int) size], size, null, clearOnResize))__        }_    };allocate,a,new,link,long,array,param,size,the,initial,length,of,the,array,param,clear,on,resize,whether,values,should,be,set,to,0,on,initialization,and,resize;public,long,array,new,long,array,long,size,boolean,clear,on,resize,if,size,page,cache,recycler,adjust,breaker,big,long,array,estimate,ram,bytes,size,false,return,new,big,long,array,size,this,clear,on,resize,else,if,size,page,cache,recycler,2,recycler,null,final,recycler,v,long,page,recycler,long,page,clear,on,resize,return,validate,new,long,array,wrapper,this,page,v,size,page,clear,on,resize,else,return,validate,new,long,array,wrapper,this,new,long,int,size,size,null,clear,on,resize
