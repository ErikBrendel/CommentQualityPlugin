commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onFailure(Exception e) {     task.markAsFailed(e). }
false;protected;0;9;;@Override protected void doRun() throws Exception {     try {         executor.nodeOperation(task, params, state).     } catch (Exception ex) {         task.markAsFailed(ex).     } }
false;public;4;21;;public <Params extends PersistentTaskParams> void executeTask(final Params params, @Nullable final PersistentTaskState state, final AllocatedPersistentTask task, final PersistentTasksExecutor<Params> executor) {     threadPool.executor(executor.getExecutor()).execute(new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             task.markAsFailed(e).         }          @Override         protected void doRun() throws Exception {             try {                 executor.nodeOperation(task, params, state).             } catch (Exception ex) {                 task.markAsFailed(ex).             }         }     }). }
