commented;modifiers;parameterAmount;loc;comment;code
true;public;0;16;/**  * Sets all the request flags.  */ ;/**  * Sets all the request flags.  */ public NodesStatsRequest all() {     this.indices.all().     this.os = true.     this.process = true.     this.jvm = true.     this.threadPool = true.     this.fs = true.     this.transport = true.     this.http = true.     this.breaker = true.     this.script = true.     this.discovery = true.     this.ingest = true.     this.adaptiveSelection = true.     return this. }
true;public;0;16;/**  * Clears all the request flags.  */ ;/**  * Clears all the request flags.  */ public NodesStatsRequest clear() {     this.indices.clear().     this.os = false.     this.process = false.     this.jvm = false.     this.threadPool = false.     this.fs = false.     this.transport = false.     this.http = false.     this.breaker = false.     this.script = false.     this.discovery = false.     this.ingest = false.     this.adaptiveSelection = false.     return this. }
false;public;0;3;;public CommonStatsFlags indices() {     return indices. }
false;public;1;4;;public NodesStatsRequest indices(CommonStatsFlags indices) {     this.indices = indices.     return this. }
true;public;1;8;/**  * Should indices stats be returned.  */ ;/**  * Should indices stats be returned.  */ public NodesStatsRequest indices(boolean indices) {     if (indices) {         this.indices.all().     } else {         this.indices.clear().     }     return this. }
true;public;0;3;/**  * Should the node OS be returned.  */ ;/**  * Should the node OS be returned.  */ public boolean os() {     return this.os. }
true;public;1;4;/**  * Should the node OS be returned.  */ ;/**  * Should the node OS be returned.  */ public NodesStatsRequest os(boolean os) {     this.os = os.     return this. }
true;public;0;3;/**  * Should the node Process be returned.  */ ;/**  * Should the node Process be returned.  */ public boolean process() {     return this.process. }
true;public;1;4;/**  * Should the node Process be returned.  */ ;/**  * Should the node Process be returned.  */ public NodesStatsRequest process(boolean process) {     this.process = process.     return this. }
true;public;0;3;/**  * Should the node JVM be returned.  */ ;/**  * Should the node JVM be returned.  */ public boolean jvm() {     return this.jvm. }
true;public;1;4;/**  * Should the node JVM be returned.  */ ;/**  * Should the node JVM be returned.  */ public NodesStatsRequest jvm(boolean jvm) {     this.jvm = jvm.     return this. }
true;public;0;3;/**  * Should the node Thread Pool be returned.  */ ;/**  * Should the node Thread Pool be returned.  */ public boolean threadPool() {     return this.threadPool. }
true;public;1;4;/**  * Should the node Thread Pool be returned.  */ ;/**  * Should the node Thread Pool be returned.  */ public NodesStatsRequest threadPool(boolean threadPool) {     this.threadPool = threadPool.     return this. }
true;public;0;3;/**  * Should the node file system stats be returned.  */ ;/**  * Should the node file system stats be returned.  */ public boolean fs() {     return this.fs. }
true;public;1;4;/**  * Should the node file system stats be returned.  */ ;/**  * Should the node file system stats be returned.  */ public NodesStatsRequest fs(boolean fs) {     this.fs = fs.     return this. }
true;public;0;3;/**  * Should the node Transport be returned.  */ ;/**  * Should the node Transport be returned.  */ public boolean transport() {     return this.transport. }
true;public;1;4;/**  * Should the node Transport be returned.  */ ;/**  * Should the node Transport be returned.  */ public NodesStatsRequest transport(boolean transport) {     this.transport = transport.     return this. }
true;public;0;3;/**  * Should the node HTTP be returned.  */ ;/**  * Should the node HTTP be returned.  */ public boolean http() {     return this.http. }
true;public;1;4;/**  * Should the node HTTP be returned.  */ ;/**  * Should the node HTTP be returned.  */ public NodesStatsRequest http(boolean http) {     this.http = http.     return this. }
false;public;0;3;;public boolean breaker() {     return this.breaker. }
true;public;1;4;/**  * Should the node's circuit breaker stats be returned.  */ ;/**  * Should the node's circuit breaker stats be returned.  */ public NodesStatsRequest breaker(boolean breaker) {     this.breaker = breaker.     return this. }
false;public;0;3;;public boolean script() {     return script. }
false;public;1;4;;public NodesStatsRequest script(boolean script) {     this.script = script.     return this. }
false;public;0;3;;public boolean discovery() {     return this.discovery. }
true;public;1;4;/**  * Should the node's discovery stats be returned.  */ ;/**  * Should the node's discovery stats be returned.  */ public NodesStatsRequest discovery(boolean discovery) {     this.discovery = discovery.     return this. }
false;public;0;3;;public boolean ingest() {     return ingest. }
true;public;1;4;/**  * Should ingest statistics be returned.  */ ;/**  * Should ingest statistics be returned.  */ public NodesStatsRequest ingest(boolean ingest) {     this.ingest = ingest.     return this. }
false;public;0;3;;public boolean adaptiveSelection() {     return adaptiveSelection. }
true;public;1;4;/**  * Should adaptiveSelection statistics be returned.  */ ;/**  * Should adaptiveSelection statistics be returned.  */ public NodesStatsRequest adaptiveSelection(boolean adaptiveSelection) {     this.adaptiveSelection = adaptiveSelection.     return this. }
false;public;1;21;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     indices = new CommonStatsFlags(in).     os = in.readBoolean().     process = in.readBoolean().     jvm = in.readBoolean().     threadPool = in.readBoolean().     fs = in.readBoolean().     transport = in.readBoolean().     http = in.readBoolean().     breaker = in.readBoolean().     script = in.readBoolean().     discovery = in.readBoolean().     ingest = in.readBoolean().     if (in.getVersion().onOrAfter(Version.V_6_1_0)) {         adaptiveSelection = in.readBoolean().     } else {         adaptiveSelection = false.     } }
false;public;1;19;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     indices.writeTo(out).     out.writeBoolean(os).     out.writeBoolean(process).     out.writeBoolean(jvm).     out.writeBoolean(threadPool).     out.writeBoolean(fs).     out.writeBoolean(transport).     out.writeBoolean(http).     out.writeBoolean(breaker).     out.writeBoolean(script).     out.writeBoolean(discovery).     out.writeBoolean(ingest).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         out.writeBoolean(adaptiveSelection).     } }
