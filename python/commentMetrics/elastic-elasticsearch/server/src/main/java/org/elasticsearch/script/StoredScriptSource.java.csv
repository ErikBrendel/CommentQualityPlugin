# id;timestamp;commentText;codeText;commentWords;codeWords
StoredScriptSource -> @Override     public void writeTo(StreamOutput out) throws IOException;1524684173;Writes a {@link StoredScriptSource} to a stream.  Version 5.3+ will write_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;@Override_    public void writeTo(StreamOutput out) throws IOException {_        if (out.getVersion().onOrAfter(Version.V_5_3_0)) {_            out.writeString(lang)__            out.writeString(source)__            @SuppressWarnings("unchecked")_            Map<String, Object> options = (Map<String, Object>)(Map)this.options__            out.writeMap(options)__        } else {_            out.writeBytesReference(new BytesArray(source))__        }_    };writes,a,link,stored,script,source,to,a,stream,version,5,3,will,write,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;override,public,void,write,to,stream,output,out,throws,ioexception,if,out,get,version,on,or,after,version,out,write,string,lang,out,write,string,source,suppress,warnings,unchecked,map,string,object,options,map,string,object,map,this,options,out,write,map,options,else,out,write,bytes,reference,new,bytes,array,source
StoredScriptSource -> @Override     public void writeTo(StreamOutput out) throws IOException;1526374795;Writes a {@link StoredScriptSource} to a stream.  Version 5.3+ will write_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;@Override_    public void writeTo(StreamOutput out) throws IOException {_        if (out.getVersion().onOrAfter(Version.V_5_3_0)) {_            out.writeString(lang)__            out.writeString(source)__            @SuppressWarnings("unchecked")_            Map<String, Object> options = (Map<String, Object>)(Map)this.options__            out.writeMap(options)__        } else {_            out.writeBytesReference(new BytesArray(source))__        }_    };writes,a,link,stored,script,source,to,a,stream,version,5,3,will,write,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;override,public,void,write,to,stream,output,out,throws,ioexception,if,out,get,version,on,or,after,version,out,write,string,lang,out,write,string,source,suppress,warnings,unchecked,map,string,object,options,map,string,object,map,this,options,out,write,map,options,else,out,write,bytes,reference,new,bytes,array,source
StoredScriptSource -> @Override     public void writeTo(StreamOutput out) throws IOException;1527622193;Writes a {@link StoredScriptSource} to a stream.  Version 5.3+ will write_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;@Override_    public void writeTo(StreamOutput out) throws IOException {_        if (out.getVersion().onOrAfter(Version.V_5_3_0)) {_            out.writeString(lang)__            out.writeString(source)__            @SuppressWarnings("unchecked")_            Map<String, Object> options = (Map<String, Object>)(Map)this.options__            out.writeMap(options)__        } else {_            out.writeBytesReference(new BytesArray(source))__        }_    };writes,a,link,stored,script,source,to,a,stream,version,5,3,will,write,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;override,public,void,write,to,stream,output,out,throws,ioexception,if,out,get,version,on,or,after,version,out,write,string,lang,out,write,string,source,suppress,warnings,unchecked,map,string,object,options,map,string,object,map,this,options,out,write,map,options,else,out,write,bytes,reference,new,bytes,array,source
StoredScriptSource -> @Override     public void writeTo(StreamOutput out) throws IOException;1529433467;Writes a {@link StoredScriptSource} to a stream.  Version 5.3+ will write_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;@Override_    public void writeTo(StreamOutput out) throws IOException {_        if (out.getVersion().onOrAfter(Version.V_5_3_0)) {_            out.writeString(lang)__            out.writeString(source)__            @SuppressWarnings("unchecked")_            Map<String, Object> options = (Map<String, Object>)(Map)this.options__            out.writeMap(options)__        } else {_            out.writeBytesReference(new BytesArray(source))__        }_    };writes,a,link,stored,script,source,to,a,stream,version,5,3,will,write,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;override,public,void,write,to,stream,output,out,throws,ioexception,if,out,get,version,on,or,after,version,out,write,string,lang,out,write,string,source,suppress,warnings,unchecked,map,string,object,options,map,string,object,map,this,options,out,write,map,options,else,out,write,bytes,reference,new,bytes,array,source
StoredScriptSource -> @Override     public void writeTo(StreamOutput out) throws IOException;1531179852;Writes a {@link StoredScriptSource} to a stream. Will write_all of the lang, source, and options parameters.;@Override_    public void writeTo(StreamOutput out) throws IOException {_        out.writeString(lang)__        out.writeString(source)__        @SuppressWarnings("unchecked")_        Map<String, Object> options = (Map<String, Object>)(Map)this.options__        out.writeMap(options)__    };writes,a,link,stored,script,source,to,a,stream,will,write,all,of,the,lang,source,and,options,parameters;override,public,void,write,to,stream,output,out,throws,ioexception,out,write,string,lang,out,write,string,source,suppress,warnings,unchecked,map,string,object,options,map,string,object,map,this,options,out,write,map,options
StoredScriptSource -> @Override     public void writeTo(StreamOutput out) throws IOException;1540486836;Writes a {@link StoredScriptSource} to a stream. Will write_all of the lang, source, and options parameters.;@Override_    public void writeTo(StreamOutput out) throws IOException {_        out.writeString(lang)__        out.writeString(source)__        @SuppressWarnings("unchecked")_        Map<String, Object> options = (Map<String, Object>)(Map)this.options__        out.writeMap(options)__    };writes,a,link,stored,script,source,to,a,stream,will,write,all,of,the,lang,source,and,options,parameters;override,public,void,write,to,stream,output,out,throws,ioexception,out,write,string,lang,out,write,string,source,suppress,warnings,unchecked,map,string,object,options,map,string,object,map,this,options,out,write,map,options
StoredScriptSource -> @Override     public void writeTo(StreamOutput out) throws IOException;1540583181;Writes a {@link StoredScriptSource} to a stream. Will write_all of the lang, source, and options parameters.;@Override_    public void writeTo(StreamOutput out) throws IOException {_        out.writeString(lang)__        out.writeString(source)__        @SuppressWarnings("unchecked")_        Map<String, Object> options = (Map<String, Object>)(Map)this.options__        out.writeMap(options)__    };writes,a,link,stored,script,source,to,a,stream,will,write,all,of,the,lang,source,and,options,parameters;override,public,void,write,to,stream,output,out,throws,ioexception,out,write,string,lang,out,write,string,source,suppress,warnings,unchecked,map,string,object,options,map,string,object,map,this,options,out,write,map,options
StoredScriptSource -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1524684173;This will write XContent from a {@link StoredScriptSource}. The following format will be written:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the 'source' parameter can also handle templates written as complex JSON.;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        builder.startObject()__        builder.field(LANG_PARSE_FIELD.getPreferredName(), lang)__        builder.field(SOURCE_PARSE_FIELD.getPreferredName(), source)__        builder.field(OPTIONS_PARSE_FIELD.getPreferredName(), options)__        builder.endObject()___        return builder__    };this,will,write,xcontent,from,a,link,stored,script,source,the,following,format,will,be,written,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,templates,written,as,complex,json;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,builder,start,object,builder,field,get,preferred,name,lang,builder,field,get,preferred,name,source,builder,field,get,preferred,name,options,builder,end,object,return,builder
StoredScriptSource -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1526374795;This will write XContent from a {@link StoredScriptSource}. The following format will be written:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the 'source' parameter can also handle templates written as complex JSON.;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        builder.startObject()__        builder.field(LANG_PARSE_FIELD.getPreferredName(), lang)__        builder.field(SOURCE_PARSE_FIELD.getPreferredName(), source)__        builder.field(OPTIONS_PARSE_FIELD.getPreferredName(), options)__        builder.endObject()___        return builder__    };this,will,write,xcontent,from,a,link,stored,script,source,the,following,format,will,be,written,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,templates,written,as,complex,json;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,builder,start,object,builder,field,get,preferred,name,lang,builder,field,get,preferred,name,source,builder,field,get,preferred,name,options,builder,end,object,return,builder
StoredScriptSource -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1527622193;This will write XContent from a {@link StoredScriptSource}. The following format will be written:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the 'source' parameter can also handle templates written as complex JSON.;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        builder.startObject()__        builder.field(LANG_PARSE_FIELD.getPreferredName(), lang)__        builder.field(SOURCE_PARSE_FIELD.getPreferredName(), source)__        builder.field(OPTIONS_PARSE_FIELD.getPreferredName(), options)__        builder.endObject()___        return builder__    };this,will,write,xcontent,from,a,link,stored,script,source,the,following,format,will,be,written,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,templates,written,as,complex,json;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,builder,start,object,builder,field,get,preferred,name,lang,builder,field,get,preferred,name,source,builder,field,get,preferred,name,options,builder,end,object,return,builder
StoredScriptSource -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1529433467;This will write XContent from a {@link StoredScriptSource}. The following format will be written:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the 'source' parameter can also handle templates written as complex JSON.;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        builder.startObject()__        builder.field(LANG_PARSE_FIELD.getPreferredName(), lang)__        builder.field(SOURCE_PARSE_FIELD.getPreferredName(), source)__        if (options.isEmpty() == false) {_            builder.field(OPTIONS_PARSE_FIELD.getPreferredName(), options)__        }_        builder.endObject()___        return builder__    };this,will,write,xcontent,from,a,link,stored,script,source,the,following,format,will,be,written,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,templates,written,as,complex,json;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,builder,start,object,builder,field,get,preferred,name,lang,builder,field,get,preferred,name,source,if,options,is,empty,false,builder,field,get,preferred,name,options,builder,end,object,return,builder
StoredScriptSource -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1531179852;This will write XContent from a {@link StoredScriptSource}. The following format will be written:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the 'source' parameter can also handle templates written as complex JSON.;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        builder.startObject()__        builder.field(LANG_PARSE_FIELD.getPreferredName(), lang)__        builder.field(SOURCE_PARSE_FIELD.getPreferredName(), source)__        if (options.isEmpty() == false) {_            builder.field(OPTIONS_PARSE_FIELD.getPreferredName(), options)__        }_        builder.endObject()___        return builder__    };this,will,write,xcontent,from,a,link,stored,script,source,the,following,format,will,be,written,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,templates,written,as,complex,json;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,builder,start,object,builder,field,get,preferred,name,lang,builder,field,get,preferred,name,source,if,options,is,empty,false,builder,field,get,preferred,name,options,builder,end,object,return,builder
StoredScriptSource -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1540486836;This will write XContent from a {@link StoredScriptSource}. The following format will be written:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the 'source' parameter can also handle templates written as complex JSON.;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        builder.startObject()__        builder.field(LANG_PARSE_FIELD.getPreferredName(), lang)__        builder.field(SOURCE_PARSE_FIELD.getPreferredName(), source)__        if (options.isEmpty() == false) {_            builder.field(OPTIONS_PARSE_FIELD.getPreferredName(), options)__        }_        builder.endObject()___        return builder__    };this,will,write,xcontent,from,a,link,stored,script,source,the,following,format,will,be,written,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,templates,written,as,complex,json;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,builder,start,object,builder,field,get,preferred,name,lang,builder,field,get,preferred,name,source,if,options,is,empty,false,builder,field,get,preferred,name,options,builder,end,object,return,builder
StoredScriptSource -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1540583181;This will write XContent from a {@link StoredScriptSource}. The following format will be written:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the 'source' parameter can also handle templates written as complex JSON.;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        builder.startObject()__        builder.field(LANG_PARSE_FIELD.getPreferredName(), lang)__        builder.field(SOURCE_PARSE_FIELD.getPreferredName(), source)__        if (options.isEmpty() == false) {_            builder.field(OPTIONS_PARSE_FIELD.getPreferredName(), options)__        }_        builder.endObject()___        return builder__    };this,will,write,xcontent,from,a,link,stored,script,source,the,following,format,will,be,written,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,templates,written,as,complex,json;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,builder,start,object,builder,field,get,preferred,name,lang,builder,field,get,preferred,name,source,if,options,is,empty,false,builder,field,get,preferred,name,options,builder,end,object,return,builder
StoredScriptSource -> public String getLang();1524684173;@return The language used for compiling this script.;public String getLang() {_        return lang__    };return,the,language,used,for,compiling,this,script;public,string,get,lang,return,lang
StoredScriptSource -> public String getLang();1526374795;@return The language used for compiling this script.;public String getLang() {_        return lang__    };return,the,language,used,for,compiling,this,script;public,string,get,lang,return,lang
StoredScriptSource -> public String getLang();1527622193;@return The language used for compiling this script.;public String getLang() {_        return lang__    };return,the,language,used,for,compiling,this,script;public,string,get,lang,return,lang
StoredScriptSource -> public String getLang();1529433467;@return The language used for compiling this script.;public String getLang() {_        return lang__    };return,the,language,used,for,compiling,this,script;public,string,get,lang,return,lang
StoredScriptSource -> public String getLang();1531179852;@return The language used for compiling this script.;public String getLang() {_        return lang__    };return,the,language,used,for,compiling,this,script;public,string,get,lang,return,lang
StoredScriptSource -> public String getLang();1540486836;@return The language used for compiling this script.;public String getLang() {_        return lang__    };return,the,language,used,for,compiling,this,script;public,string,get,lang,return,lang
StoredScriptSource -> public String getLang();1540583181;@return The language used for compiling this script.;public String getLang() {_        return lang__    };return,the,language,used,for,compiling,this,script;public,string,get,lang,return,lang
StoredScriptSource -> public Map<String, String> getOptions();1524684173;@return The compiler options used for this script.;public Map<String, String> getOptions() {_        return options__    };return,the,compiler,options,used,for,this,script;public,map,string,string,get,options,return,options
StoredScriptSource -> public Map<String, String> getOptions();1526374795;@return The compiler options used for this script.;public Map<String, String> getOptions() {_        return options__    };return,the,compiler,options,used,for,this,script;public,map,string,string,get,options,return,options
StoredScriptSource -> public Map<String, String> getOptions();1527622193;@return The compiler options used for this script.;public Map<String, String> getOptions() {_        return options__    };return,the,compiler,options,used,for,this,script;public,map,string,string,get,options,return,options
StoredScriptSource -> public Map<String, String> getOptions();1529433467;@return The compiler options used for this script.;public Map<String, String> getOptions() {_        return options__    };return,the,compiler,options,used,for,this,script;public,map,string,string,get,options,return,options
StoredScriptSource -> public Map<String, String> getOptions();1531179852;@return The compiler options used for this script.;public Map<String, String> getOptions() {_        return options__    };return,the,compiler,options,used,for,this,script;public,map,string,string,get,options,return,options
StoredScriptSource -> public Map<String, String> getOptions();1540486836;@return The compiler options used for this script.;public Map<String, String> getOptions() {_        return options__    };return,the,compiler,options,used,for,this,script;public,map,string,string,get,options,return,options
StoredScriptSource -> public Map<String, String> getOptions();1540583181;@return The compiler options used for this script.;public Map<String, String> getOptions() {_        return options__    };return,the,compiler,options,used,for,this,script;public,map,string,string,get,options,return,options
StoredScriptSource -> Builder -> private StoredScriptSource build(boolean ignoreEmpty);1526374795;Validates the parameters and creates an {@link StoredScriptSource}.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allow empty templates to be loaded for backwards compatibility._This allow empty templates to be loaded for backwards compatibility.;private StoredScriptSource build(boolean ignoreEmpty) {_            if (lang == null) {_                throw new IllegalArgumentException("must specify lang for stored script")__            } else if (lang.isEmpty()) {_                throw new IllegalArgumentException("lang cannot be empty")__            }__            if (source == null) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("must specify source for stored script")__                }_            } else if (source.isEmpty()) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("source cannot be empty")__                }_            }__            if (options.size() > 1 || options.size() == 1 && options.get(Script.CONTENT_TYPE_OPTION) == null) {_                throw new IllegalArgumentException("illegal compiler options [" + options + "] specified")__            }__            return new StoredScriptSource(lang, source, options)__        };validates,the,parameters,and,creates,an,link,stored,script,source,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility;private,stored,script,source,build,boolean,ignore,empty,if,lang,null,throw,new,illegal,argument,exception,must,specify,lang,for,stored,script,else,if,lang,is,empty,throw,new,illegal,argument,exception,lang,cannot,be,empty,if,source,null,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,must,specify,source,for,stored,script,else,if,source,is,empty,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,source,cannot,be,empty,if,options,size,1,options,size,1,options,get,script,null,throw,new,illegal,argument,exception,illegal,compiler,options,options,specified,return,new,stored,script,source,lang,source,options
StoredScriptSource -> Builder -> private StoredScriptSource build(boolean ignoreEmpty);1527622193;Validates the parameters and creates an {@link StoredScriptSource}.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allow empty templates to be loaded for backwards compatibility._This allow empty templates to be loaded for backwards compatibility.;private StoredScriptSource build(boolean ignoreEmpty) {_            if (lang == null) {_                throw new IllegalArgumentException("must specify lang for stored script")__            } else if (lang.isEmpty()) {_                throw new IllegalArgumentException("lang cannot be empty")__            }__            if (source == null) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("must specify source for stored script")__                }_            } else if (source.isEmpty()) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("source cannot be empty")__                }_            }__            if (options.size() > 1 || options.size() == 1 && options.get(Script.CONTENT_TYPE_OPTION) == null) {_                throw new IllegalArgumentException("illegal compiler options [" + options + "] specified")__            }__            return new StoredScriptSource(lang, source, options)__        };validates,the,parameters,and,creates,an,link,stored,script,source,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility;private,stored,script,source,build,boolean,ignore,empty,if,lang,null,throw,new,illegal,argument,exception,must,specify,lang,for,stored,script,else,if,lang,is,empty,throw,new,illegal,argument,exception,lang,cannot,be,empty,if,source,null,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,must,specify,source,for,stored,script,else,if,source,is,empty,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,source,cannot,be,empty,if,options,size,1,options,size,1,options,get,script,null,throw,new,illegal,argument,exception,illegal,compiler,options,options,specified,return,new,stored,script,source,lang,source,options
StoredScriptSource -> Builder -> private StoredScriptSource build(boolean ignoreEmpty);1529433467;Validates the parameters and creates an {@link StoredScriptSource}.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allow empty templates to be loaded for backwards compatibility._This allow empty templates to be loaded for backwards compatibility.;private StoredScriptSource build(boolean ignoreEmpty) {_            if (lang == null) {_                throw new IllegalArgumentException("must specify lang for stored script")__            } else if (lang.isEmpty()) {_                throw new IllegalArgumentException("lang cannot be empty")__            }__            if (source == null) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("must specify source for stored script")__                }_            } else if (source.isEmpty()) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("source cannot be empty")__                }_            }__            if (options.size() > 1 || options.size() == 1 && options.get(Script.CONTENT_TYPE_OPTION) == null) {_                throw new IllegalArgumentException("illegal compiler options [" + options + "] specified")__            }__            return new StoredScriptSource(lang, source, options)__        };validates,the,parameters,and,creates,an,link,stored,script,source,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility;private,stored,script,source,build,boolean,ignore,empty,if,lang,null,throw,new,illegal,argument,exception,must,specify,lang,for,stored,script,else,if,lang,is,empty,throw,new,illegal,argument,exception,lang,cannot,be,empty,if,source,null,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,must,specify,source,for,stored,script,else,if,source,is,empty,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,source,cannot,be,empty,if,options,size,1,options,size,1,options,get,script,null,throw,new,illegal,argument,exception,illegal,compiler,options,options,specified,return,new,stored,script,source,lang,source,options
StoredScriptSource -> Builder -> private StoredScriptSource build(boolean ignoreEmpty);1531179852;Validates the parameters and creates an {@link StoredScriptSource}.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allow empty templates to be loaded for backwards compatibility._This allow empty templates to be loaded for backwards compatibility.;private StoredScriptSource build(boolean ignoreEmpty) {_            if (lang == null) {_                throw new IllegalArgumentException("must specify lang for stored script")__            } else if (lang.isEmpty()) {_                throw new IllegalArgumentException("lang cannot be empty")__            }__            if (source == null) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("must specify source for stored script")__                }_            } else if (source.isEmpty()) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("source cannot be empty")__                }_            }__            if (options.size() > 1 || options.size() == 1 && options.get(Script.CONTENT_TYPE_OPTION) == null) {_                throw new IllegalArgumentException("illegal compiler options [" + options + "] specified")__            }__            return new StoredScriptSource(lang, source, options)__        };validates,the,parameters,and,creates,an,link,stored,script,source,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility;private,stored,script,source,build,boolean,ignore,empty,if,lang,null,throw,new,illegal,argument,exception,must,specify,lang,for,stored,script,else,if,lang,is,empty,throw,new,illegal,argument,exception,lang,cannot,be,empty,if,source,null,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,must,specify,source,for,stored,script,else,if,source,is,empty,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,source,cannot,be,empty,if,options,size,1,options,size,1,options,get,script,null,throw,new,illegal,argument,exception,illegal,compiler,options,options,specified,return,new,stored,script,source,lang,source,options
StoredScriptSource -> Builder -> private StoredScriptSource build(boolean ignoreEmpty);1540486836;Validates the parameters and creates an {@link StoredScriptSource}.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allow empty templates to be loaded for backwards compatibility._This allow empty templates to be loaded for backwards compatibility.;private StoredScriptSource build(boolean ignoreEmpty) {_            if (lang == null) {_                throw new IllegalArgumentException("must specify lang for stored script")__            } else if (lang.isEmpty()) {_                throw new IllegalArgumentException("lang cannot be empty")__            }__            if (source == null) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("must specify source for stored script")__                }_            } else if (source.isEmpty()) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    } else {_                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("source cannot be empty")__                }_            }__            if (options.size() > 1 || options.size() == 1 && options.get(Script.CONTENT_TYPE_OPTION) == null) {_                throw new IllegalArgumentException("illegal compiler options [" + options + "] specified")__            }__            return new StoredScriptSource(lang, source, options)__        };validates,the,parameters,and,creates,an,link,stored,script,source,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility;private,stored,script,source,build,boolean,ignore,empty,if,lang,null,throw,new,illegal,argument,exception,must,specify,lang,for,stored,script,else,if,lang,is,empty,throw,new,illegal,argument,exception,lang,cannot,be,empty,if,source,null,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,must,specify,source,for,stored,script,else,if,source,is,empty,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,source,cannot,be,empty,if,options,size,1,options,size,1,options,get,script,null,throw,new,illegal,argument,exception,illegal,compiler,options,options,specified,return,new,stored,script,source,lang,source,options
StoredScriptSource -> Builder -> private StoredScriptSource build(boolean ignoreEmpty);1540583181;Validates the parameters and creates an {@link StoredScriptSource}.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allow empty templates to be loaded for backwards compatibility._This allow empty templates to be loaded for backwards compatibility.;private StoredScriptSource build(boolean ignoreEmpty) {_            if (lang == null) {_                throw new IllegalArgumentException("must specify lang for stored script")__            } else if (lang.isEmpty()) {_                throw new IllegalArgumentException("lang cannot be empty")__            }__            if (source == null) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        deprecationLogger.deprecated("empty templates should no longer be used")__                    } else {_                        deprecationLogger.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("must specify source for stored script")__                }_            } else if (source.isEmpty()) {_                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {_                        deprecationLogger.deprecated("empty templates should no longer be used")__                    } else {_                        deprecationLogger.deprecated("empty scripts should no longer be used")__                    }_                } else {_                    throw new IllegalArgumentException("source cannot be empty")__                }_            }__            if (options.size() > 1 || options.size() == 1 && options.get(Script.CONTENT_TYPE_OPTION) == null) {_                throw new IllegalArgumentException("illegal compiler options [" + options + "] specified")__            }__            return new StoredScriptSource(lang, source, options)__        };validates,the,parameters,and,creates,an,link,stored,script,source,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility,this,allow,empty,templates,to,be,loaded,for,backwards,compatibility;private,stored,script,source,build,boolean,ignore,empty,if,lang,null,throw,new,illegal,argument,exception,must,specify,lang,for,stored,script,else,if,lang,is,empty,throw,new,illegal,argument,exception,lang,cannot,be,empty,if,source,null,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecation,logger,deprecated,empty,templates,should,no,longer,be,used,else,deprecation,logger,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,must,specify,source,for,stored,script,else,if,source,is,empty,if,ignore,empty,script,equals,lang,if,script,equals,lang,deprecation,logger,deprecated,empty,templates,should,no,longer,be,used,else,deprecation,logger,deprecated,empty,scripts,should,no,longer,be,used,else,throw,new,illegal,argument,exception,source,cannot,be,empty,if,options,size,1,options,size,1,options,get,script,null,throw,new,illegal,argument,exception,illegal,compiler,options,options,specified,return,new,stored,script,source,lang,source,options
StoredScriptSource -> public StoredScriptSource(String lang, String source, Map<String, String> options);1524684173;Standard StoredScriptSource constructor._@param lang    The language to compile the script with.  Must not be {@code null}._@param source  The source source to compile with.  Must not be {@code null}._@param options Compiler options to be compiled with.  Must not be {@code null},_use an empty {@link Map} to represent no options.;public StoredScriptSource(String lang, String source, Map<String, String> options) {_        this.lang = Objects.requireNonNull(lang)__        this.source = Objects.requireNonNull(source)__        this.options = Collections.unmodifiableMap(Objects.requireNonNull(options))__    };standard,stored,script,source,constructor,param,lang,the,language,to,compile,the,script,with,must,not,be,code,null,param,source,the,source,source,to,compile,with,must,not,be,code,null,param,options,compiler,options,to,be,compiled,with,must,not,be,code,null,use,an,empty,link,map,to,represent,no,options;public,stored,script,source,string,lang,string,source,map,string,string,options,this,lang,objects,require,non,null,lang,this,source,objects,require,non,null,source,this,options,collections,unmodifiable,map,objects,require,non,null,options
StoredScriptSource -> public StoredScriptSource(String lang, String source, Map<String, String> options);1526374795;Standard StoredScriptSource constructor._@param lang    The language to compile the script with.  Must not be {@code null}._@param source  The source source to compile with.  Must not be {@code null}._@param options Compiler options to be compiled with.  Must not be {@code null},_use an empty {@link Map} to represent no options.;public StoredScriptSource(String lang, String source, Map<String, String> options) {_        this.lang = Objects.requireNonNull(lang)__        this.source = Objects.requireNonNull(source)__        this.options = Collections.unmodifiableMap(Objects.requireNonNull(options))__    };standard,stored,script,source,constructor,param,lang,the,language,to,compile,the,script,with,must,not,be,code,null,param,source,the,source,source,to,compile,with,must,not,be,code,null,param,options,compiler,options,to,be,compiled,with,must,not,be,code,null,use,an,empty,link,map,to,represent,no,options;public,stored,script,source,string,lang,string,source,map,string,string,options,this,lang,objects,require,non,null,lang,this,source,objects,require,non,null,source,this,options,collections,unmodifiable,map,objects,require,non,null,options
StoredScriptSource -> public StoredScriptSource(String lang, String source, Map<String, String> options);1527622193;Standard StoredScriptSource constructor._@param lang    The language to compile the script with.  Must not be {@code null}._@param source  The source source to compile with.  Must not be {@code null}._@param options Compiler options to be compiled with.  Must not be {@code null},_use an empty {@link Map} to represent no options.;public StoredScriptSource(String lang, String source, Map<String, String> options) {_        this.lang = Objects.requireNonNull(lang)__        this.source = Objects.requireNonNull(source)__        this.options = Collections.unmodifiableMap(Objects.requireNonNull(options))__    };standard,stored,script,source,constructor,param,lang,the,language,to,compile,the,script,with,must,not,be,code,null,param,source,the,source,source,to,compile,with,must,not,be,code,null,param,options,compiler,options,to,be,compiled,with,must,not,be,code,null,use,an,empty,link,map,to,represent,no,options;public,stored,script,source,string,lang,string,source,map,string,string,options,this,lang,objects,require,non,null,lang,this,source,objects,require,non,null,source,this,options,collections,unmodifiable,map,objects,require,non,null,options
StoredScriptSource -> public StoredScriptSource(String lang, String source, Map<String, String> options);1529433467;Standard StoredScriptSource constructor._@param lang    The language to compile the script with.  Must not be {@code null}._@param source  The source source to compile with.  Must not be {@code null}._@param options Compiler options to be compiled with.  Must not be {@code null},_use an empty {@link Map} to represent no options.;public StoredScriptSource(String lang, String source, Map<String, String> options) {_        this.lang = Objects.requireNonNull(lang)__        this.source = Objects.requireNonNull(source)__        this.options = Collections.unmodifiableMap(Objects.requireNonNull(options))__    };standard,stored,script,source,constructor,param,lang,the,language,to,compile,the,script,with,must,not,be,code,null,param,source,the,source,source,to,compile,with,must,not,be,code,null,param,options,compiler,options,to,be,compiled,with,must,not,be,code,null,use,an,empty,link,map,to,represent,no,options;public,stored,script,source,string,lang,string,source,map,string,string,options,this,lang,objects,require,non,null,lang,this,source,objects,require,non,null,source,this,options,collections,unmodifiable,map,objects,require,non,null,options
StoredScriptSource -> public StoredScriptSource(String lang, String source, Map<String, String> options);1531179852;Standard StoredScriptSource constructor._@param lang    The language to compile the script with.  Must not be {@code null}._@param source  The source source to compile with.  Must not be {@code null}._@param options Compiler options to be compiled with.  Must not be {@code null},_use an empty {@link Map} to represent no options.;public StoredScriptSource(String lang, String source, Map<String, String> options) {_        this.lang = Objects.requireNonNull(lang)__        this.source = Objects.requireNonNull(source)__        this.options = Collections.unmodifiableMap(Objects.requireNonNull(options))__    };standard,stored,script,source,constructor,param,lang,the,language,to,compile,the,script,with,must,not,be,code,null,param,source,the,source,source,to,compile,with,must,not,be,code,null,param,options,compiler,options,to,be,compiled,with,must,not,be,code,null,use,an,empty,link,map,to,represent,no,options;public,stored,script,source,string,lang,string,source,map,string,string,options,this,lang,objects,require,non,null,lang,this,source,objects,require,non,null,source,this,options,collections,unmodifiable,map,objects,require,non,null,options
StoredScriptSource -> public StoredScriptSource(String lang, String source, Map<String, String> options);1540486836;Standard StoredScriptSource constructor._@param lang    The language to compile the script with.  Must not be {@code null}._@param source  The source source to compile with.  Must not be {@code null}._@param options Compiler options to be compiled with.  Must not be {@code null},_use an empty {@link Map} to represent no options.;public StoredScriptSource(String lang, String source, Map<String, String> options) {_        this.lang = Objects.requireNonNull(lang)__        this.source = Objects.requireNonNull(source)__        this.options = Collections.unmodifiableMap(Objects.requireNonNull(options))__    };standard,stored,script,source,constructor,param,lang,the,language,to,compile,the,script,with,must,not,be,code,null,param,source,the,source,source,to,compile,with,must,not,be,code,null,param,options,compiler,options,to,be,compiled,with,must,not,be,code,null,use,an,empty,link,map,to,represent,no,options;public,stored,script,source,string,lang,string,source,map,string,string,options,this,lang,objects,require,non,null,lang,this,source,objects,require,non,null,source,this,options,collections,unmodifiable,map,objects,require,non,null,options
StoredScriptSource -> public StoredScriptSource(String lang, String source, Map<String, String> options);1540583181;Standard StoredScriptSource constructor._@param lang    The language to compile the script with.  Must not be {@code null}._@param source  The source source to compile with.  Must not be {@code null}._@param options Compiler options to be compiled with.  Must not be {@code null},_use an empty {@link Map} to represent no options.;public StoredScriptSource(String lang, String source, Map<String, String> options) {_        this.lang = Objects.requireNonNull(lang)__        this.source = Objects.requireNonNull(source)__        this.options = Collections.unmodifiableMap(Objects.requireNonNull(options))__    };standard,stored,script,source,constructor,param,lang,the,language,to,compile,the,script,with,must,not,be,code,null,param,source,the,source,source,to,compile,with,must,not,be,code,null,param,options,compiler,options,to,be,compiled,with,must,not,be,code,null,use,an,empty,link,map,to,represent,no,options;public,stored,script,source,string,lang,string,source,map,string,string,options,this,lang,objects,require,non,null,lang,this,source,objects,require,non,null,source,this,options,collections,unmodifiable,map,objects,require,non,null,options
StoredScriptSource -> public static StoredScriptSource parse(BytesReference content, XContentType xContentType);1524684173;This will parse XContent into a {@link StoredScriptSource}.  The following formats can be parsed:__The simple script format with no compiler options or user-defined params:__Example:_{@code_{"script": "return Math.log(doc.popularity) * 100_"}___The above format requires the lang to be specified using the deprecated stored script namespace_(as a url parameter during a put request).  See {@link ScriptMetaData} for more information about_the stored script namespaces.__The complex script format using the new stored script namespace_where lang and source are required but options is optional:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Example:_{@code__"script": {_"lang" : "painless",_"source" : "return Math.log(doc.popularity) * params.multiplier"_____The use of "source" may also be substituted with "code" for backcompat with 5.3 to 5.5 format. For example:__{@code__"script" : {_"lang" : "<lang>",_"code" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______The simple template format:__{@code__"query" : ...____The complex template format:__{@code__"template": {_"query" : ..._____Note that templates can be handled as both strings and complex JSON objects._Also templates may be part of the 'source' parameter in a script.  The Parser_can handle this case as well.__@param content The content from the request to be parsed as described above._@return        The parsed {@link StoredScriptSource}.;public static StoredScriptSource parse(BytesReference content, XContentType xContentType) {_        try (InputStream stream = content.streamInput()__             XContentParser parser = xContentType.xContent()_                 .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            Token token = parser.nextToken()___            if (token != Token.START_OBJECT) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__            }__            token = parser.nextToken()___            if (token == Token.END_OBJECT) {_                return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, "", Collections.emptyMap())__            }__            if (token != Token.FIELD_NAME) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + ", expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + ", " + TEMPLATE_PARSE_FIELD.getPreferredName())__            }__            String name = parser.currentName()___            if (SCRIPT_PARSE_FIELD.getPreferredName().equals(name)) {_                token = parser.nextToken()___                if (token == Token.START_OBJECT) {_                    return PARSER.apply(parser, null).build()__                } else {_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{, <source>]")__                }_            } else {_                if (TEMPLATE_PARSE_FIELD.getPreferredName().equals(name)) {_                    token = parser.nextToken()___                    if (token == Token.VALUE_STRING) {_                        return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, parser.text(), Collections.emptyMap())__                    }_                }__                try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                    if (token != Token.START_OBJECT) {_                        builder.startObject()__                        builder.copyCurrentStructure(parser)__                        builder.endObject()__                    } else {_                        builder.copyCurrentStructure(parser)__                    }__                    return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, Strings.toString(builder), Collections.emptyMap())__                }_            }_        } catch (IOException ioe) {_            throw new UncheckedIOException(ioe)__        }_    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,formats,can,be,parsed,the,simple,script,format,with,no,compiler,options,or,user,defined,params,example,code,script,return,math,log,doc,popularity,100,the,above,format,requires,the,lang,to,be,specified,using,the,deprecated,stored,script,namespace,as,a,url,parameter,during,a,put,request,see,link,script,meta,data,for,more,information,about,the,stored,script,namespaces,the,complex,script,format,using,the,new,stored,script,namespace,where,lang,and,source,are,required,but,options,is,optional,code,script,lang,lang,source,source,options,option0,option0,option1,option1,example,code,script,lang,painless,source,return,math,log,doc,popularity,params,multiplier,the,use,of,source,may,also,be,substituted,with,code,for,backcompat,with,5,3,to,5,5,format,for,example,code,script,lang,lang,code,source,options,option0,option0,option1,option1,the,simple,template,format,code,query,the,complex,template,format,code,template,query,note,that,templates,can,be,handled,as,both,strings,and,complex,json,objects,also,templates,may,be,part,of,the,source,parameter,in,a,script,the,parser,can,handle,this,case,as,well,param,content,the,content,from,the,request,to,be,parsed,as,described,above,return,the,parsed,link,stored,script,source;public,static,stored,script,source,parse,bytes,reference,content,xcontent,type,x,content,type,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,token,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,if,token,token,return,new,stored,script,source,script,collections,empty,map,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,get,preferred,name,get,preferred,name,string,name,parser,current,name,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,return,parser,apply,parser,null,build,else,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,source,else,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,return,new,stored,script,source,script,parser,text,collections,empty,map,try,xcontent,builder,builder,xcontent,factory,json,builder,if,token,token,builder,start,object,builder,copy,current,structure,parser,builder,end,object,else,builder,copy,current,structure,parser,return,new,stored,script,source,script,strings,to,string,builder,collections,empty,map,catch,ioexception,ioe,throw,new,unchecked,ioexception,ioe
StoredScriptSource -> public static StoredScriptSource parse(BytesReference content, XContentType xContentType);1526374795;This will parse XContent into a {@link StoredScriptSource}.  The following formats can be parsed:__The simple script format with no compiler options or user-defined params:__Example:_{@code_{"script": "return Math.log(doc.popularity) * 100_"}___The above format requires the lang to be specified using the deprecated stored script namespace_(as a url parameter during a put request).  See {@link ScriptMetaData} for more information about_the stored script namespaces.__The complex script format using the new stored script namespace_where lang and source are required but options is optional:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Example:_{@code__"script": {_"lang" : "painless",_"source" : "return Math.log(doc.popularity) * params.multiplier"_____The use of "source" may also be substituted with "code" for backcompat with 5.3 to 5.5 format. For example:__{@code__"script" : {_"lang" : "<lang>",_"code" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______The simple template format:__{@code__"query" : ...____The complex template format:__{@code__"template": {_"query" : ..._____Note that templates can be handled as both strings and complex JSON objects._Also templates may be part of the 'source' parameter in a script.  The Parser_can handle this case as well.__@param content The content from the request to be parsed as described above._@return        The parsed {@link StoredScriptSource}.;public static StoredScriptSource parse(BytesReference content, XContentType xContentType) {_        try (InputStream stream = content.streamInput()__             XContentParser parser = xContentType.xContent()_                 .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            Token token = parser.nextToken()___            if (token != Token.START_OBJECT) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__            }__            token = parser.nextToken()___            if (token == Token.END_OBJECT) {_                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")___                return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, "", Collections.emptyMap())__            }__            if (token != Token.FIELD_NAME) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + ", expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + ", " + TEMPLATE_PARSE_FIELD.getPreferredName())__            }__            String name = parser.currentName()___            if (SCRIPT_PARSE_FIELD.getPreferredName().equals(name)) {_                token = parser.nextToken()___                if (token == Token.START_OBJECT) {_                    return PARSER.apply(parser, null).build(false)__                } else {_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{, <source>]")__                }_            } else {_                if (TEMPLATE_PARSE_FIELD.getPreferredName().equals(name)) {_                    token = parser.nextToken()___                    if (token == Token.VALUE_STRING) {_                        String source = parser.text()___                        if (source == null || source.isEmpty()) {_                            DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                        }__                        return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, source, Collections.emptyMap())__                    }_                }__                try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                    if (token != Token.START_OBJECT) {_                        builder.startObject()__                        builder.copyCurrentStructure(parser)__                        builder.endObject()__                    } else {_                        builder.copyCurrentStructure(parser)__                    }__                    String source = Strings.toString(builder)___                    if (source == null || source.isEmpty()) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    }__                    return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, source, Collections.emptyMap())__                }_            }_        } catch (IOException ioe) {_            throw new UncheckedIOException(ioe)__        }_    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,formats,can,be,parsed,the,simple,script,format,with,no,compiler,options,or,user,defined,params,example,code,script,return,math,log,doc,popularity,100,the,above,format,requires,the,lang,to,be,specified,using,the,deprecated,stored,script,namespace,as,a,url,parameter,during,a,put,request,see,link,script,meta,data,for,more,information,about,the,stored,script,namespaces,the,complex,script,format,using,the,new,stored,script,namespace,where,lang,and,source,are,required,but,options,is,optional,code,script,lang,lang,source,source,options,option0,option0,option1,option1,example,code,script,lang,painless,source,return,math,log,doc,popularity,params,multiplier,the,use,of,source,may,also,be,substituted,with,code,for,backcompat,with,5,3,to,5,5,format,for,example,code,script,lang,lang,code,source,options,option0,option0,option1,option1,the,simple,template,format,code,query,the,complex,template,format,code,template,query,note,that,templates,can,be,handled,as,both,strings,and,complex,json,objects,also,templates,may,be,part,of,the,source,parameter,in,a,script,the,parser,can,handle,this,case,as,well,param,content,the,content,from,the,request,to,be,parsed,as,described,above,return,the,parsed,link,stored,script,source;public,static,stored,script,source,parse,bytes,reference,content,xcontent,type,x,content,type,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,token,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,if,token,token,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,collections,empty,map,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,get,preferred,name,get,preferred,name,string,name,parser,current,name,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,return,parser,apply,parser,null,build,false,else,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,source,else,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,string,source,parser,text,if,source,null,source,is,empty,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,source,collections,empty,map,try,xcontent,builder,builder,xcontent,factory,json,builder,if,token,token,builder,start,object,builder,copy,current,structure,parser,builder,end,object,else,builder,copy,current,structure,parser,string,source,strings,to,string,builder,if,source,null,source,is,empty,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,source,collections,empty,map,catch,ioexception,ioe,throw,new,unchecked,ioexception,ioe
StoredScriptSource -> public static StoredScriptSource parse(BytesReference content, XContentType xContentType);1527622193;This will parse XContent into a {@link StoredScriptSource}.  The following formats can be parsed:__The simple script format with no compiler options or user-defined params:__Example:_{@code_{"script": "return Math.log(doc.popularity) * 100_"}___The above format requires the lang to be specified using the deprecated stored script namespace_(as a url parameter during a put request).  See {@link ScriptMetaData} for more information about_the stored script namespaces.__The complex script format using the new stored script namespace_where lang and source are required but options is optional:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Example:_{@code__"script": {_"lang" : "painless",_"source" : "return Math.log(doc.popularity) * params.multiplier"_____The use of "source" may also be substituted with "code" for backcompat with 5.3 to 5.5 format. For example:__{@code__"script" : {_"lang" : "<lang>",_"code" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______The simple template format:__{@code__"query" : ...____The complex template format:__{@code__"template": {_"query" : ..._____Note that templates can be handled as both strings and complex JSON objects._Also templates may be part of the 'source' parameter in a script.  The Parser_can handle this case as well.__@param content The content from the request to be parsed as described above._@return        The parsed {@link StoredScriptSource}.;public static StoredScriptSource parse(BytesReference content, XContentType xContentType) {_        try (InputStream stream = content.streamInput()__             XContentParser parser = xContentType.xContent()_                 .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            Token token = parser.nextToken()___            if (token != Token.START_OBJECT) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__            }__            token = parser.nextToken()___            if (token == Token.END_OBJECT) {_                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")___                return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, "", Collections.emptyMap())__            }__            if (token != Token.FIELD_NAME) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + ", expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + ", " + TEMPLATE_PARSE_FIELD.getPreferredName())__            }__            String name = parser.currentName()___            if (SCRIPT_PARSE_FIELD.getPreferredName().equals(name)) {_                token = parser.nextToken()___                if (token == Token.START_OBJECT) {_                    return PARSER.apply(parser, null).build(false)__                } else {_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{, <source>]")__                }_            } else if (TEMPLATE_PARSE_FIELD.getPreferredName().equals(name)) {__                DEPRECATION_LOGGER.deprecated("the template context is now deprecated. Specify templates in a \"script\" element.")___                token = parser.nextToken()__                if (token == Token.VALUE_STRING) {_                    String source = parser.text()___                    if (source == null || source.isEmpty()) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    }__                    return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, source, Collections.emptyMap())__                } else {_                    return parseRemaining(token, parser)__                }_            } else if (TEMPLATE_NO_WRAPPER_PARSE_FIELD.getPreferredName().equals(name)) {_                DEPRECATION_LOGGER.deprecated("the template context is now deprecated. Specify templates in a \"script\" element.")__                return parseRemaining(token, parser)__            } else {_                DEPRECATION_LOGGER.deprecated("scripts should not be stored without a context. Specify them in a \"script\" element.")__                return parseRemaining(token, parser)__            }_        } catch (IOException ioe) {_            throw new UncheckedIOException(ioe)__        }_    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,formats,can,be,parsed,the,simple,script,format,with,no,compiler,options,or,user,defined,params,example,code,script,return,math,log,doc,popularity,100,the,above,format,requires,the,lang,to,be,specified,using,the,deprecated,stored,script,namespace,as,a,url,parameter,during,a,put,request,see,link,script,meta,data,for,more,information,about,the,stored,script,namespaces,the,complex,script,format,using,the,new,stored,script,namespace,where,lang,and,source,are,required,but,options,is,optional,code,script,lang,lang,source,source,options,option0,option0,option1,option1,example,code,script,lang,painless,source,return,math,log,doc,popularity,params,multiplier,the,use,of,source,may,also,be,substituted,with,code,for,backcompat,with,5,3,to,5,5,format,for,example,code,script,lang,lang,code,source,options,option0,option0,option1,option1,the,simple,template,format,code,query,the,complex,template,format,code,template,query,note,that,templates,can,be,handled,as,both,strings,and,complex,json,objects,also,templates,may,be,part,of,the,source,parameter,in,a,script,the,parser,can,handle,this,case,as,well,param,content,the,content,from,the,request,to,be,parsed,as,described,above,return,the,parsed,link,stored,script,source;public,static,stored,script,source,parse,bytes,reference,content,xcontent,type,x,content,type,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,token,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,if,token,token,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,collections,empty,map,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,get,preferred,name,get,preferred,name,string,name,parser,current,name,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,return,parser,apply,parser,null,build,false,else,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,source,else,if,get,preferred,name,equals,name,deprecated,the,template,context,is,now,deprecated,specify,templates,in,a,script,element,token,parser,next,token,if,token,token,string,source,parser,text,if,source,null,source,is,empty,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,source,collections,empty,map,else,return,parse,remaining,token,parser,else,if,get,preferred,name,equals,name,deprecated,the,template,context,is,now,deprecated,specify,templates,in,a,script,element,return,parse,remaining,token,parser,else,deprecated,scripts,should,not,be,stored,without,a,context,specify,them,in,a,script,element,return,parse,remaining,token,parser,catch,ioexception,ioe,throw,new,unchecked,ioexception,ioe
StoredScriptSource -> public static StoredScriptSource parse(BytesReference content, XContentType xContentType);1529433467;This will parse XContent into a {@link StoredScriptSource}.  The following formats can be parsed:__The simple script format with no compiler options or user-defined params:__Example:_{@code_{"script": "return Math.log(doc.popularity) * 100_"}___The above format requires the lang to be specified using the deprecated stored script namespace_(as a url parameter during a put request).  See {@link ScriptMetaData} for more information about_the stored script namespaces.__The complex script format using the new stored script namespace_where lang and source are required but options is optional:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Example:_{@code__"script": {_"lang" : "painless",_"source" : "return Math.log(doc.popularity) * params.multiplier"_____The use of "source" may also be substituted with "code" for backcompat with 5.3 to 5.5 format. For example:__{@code__"script" : {_"lang" : "<lang>",_"code" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______The simple template format:__{@code__"query" : ...____The complex template format:__{@code__"template": {_"query" : ..._____Note that templates can be handled as both strings and complex JSON objects._Also templates may be part of the 'source' parameter in a script.  The Parser_can handle this case as well.__@param content The content from the request to be parsed as described above._@return        The parsed {@link StoredScriptSource}.;public static StoredScriptSource parse(BytesReference content, XContentType xContentType) {_        try (InputStream stream = content.streamInput()__             XContentParser parser = xContentType.xContent()_                 .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            Token token = parser.nextToken()___            if (token != Token.START_OBJECT) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__            }__            token = parser.nextToken()___            if (token == Token.END_OBJECT) {_                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")___                return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, "", Collections.emptyMap())__            }__            if (token != Token.FIELD_NAME) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + ", expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + ", " + TEMPLATE_PARSE_FIELD.getPreferredName())__            }__            String name = parser.currentName()___            if (SCRIPT_PARSE_FIELD.getPreferredName().equals(name)) {_                token = parser.nextToken()___                if (token == Token.START_OBJECT) {_                    return PARSER.apply(parser, null).build(false)__                } else {_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{, <source>]")__                }_            } else if (TEMPLATE_PARSE_FIELD.getPreferredName().equals(name)) {__                DEPRECATION_LOGGER.deprecated("the template context is now deprecated. Specify templates in a \"script\" element.")___                token = parser.nextToken()__                if (token == Token.VALUE_STRING) {_                    String source = parser.text()___                    if (source == null || source.isEmpty()) {_                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                    }__                    return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, source, Collections.emptyMap())__                } else {_                    return parseRemaining(token, parser)__                }_            } else if (TEMPLATE_NO_WRAPPER_PARSE_FIELD.getPreferredName().equals(name)) {_                DEPRECATION_LOGGER.deprecated("the template context is now deprecated. Specify templates in a \"script\" element.")__                return parseRemaining(token, parser)__            } else {_                DEPRECATION_LOGGER.deprecated("scripts should not be stored without a context. Specify them in a \"script\" element.")__                return parseRemaining(token, parser)__            }_        } catch (IOException ioe) {_            throw new UncheckedIOException(ioe)__        }_    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,formats,can,be,parsed,the,simple,script,format,with,no,compiler,options,or,user,defined,params,example,code,script,return,math,log,doc,popularity,100,the,above,format,requires,the,lang,to,be,specified,using,the,deprecated,stored,script,namespace,as,a,url,parameter,during,a,put,request,see,link,script,meta,data,for,more,information,about,the,stored,script,namespaces,the,complex,script,format,using,the,new,stored,script,namespace,where,lang,and,source,are,required,but,options,is,optional,code,script,lang,lang,source,source,options,option0,option0,option1,option1,example,code,script,lang,painless,source,return,math,log,doc,popularity,params,multiplier,the,use,of,source,may,also,be,substituted,with,code,for,backcompat,with,5,3,to,5,5,format,for,example,code,script,lang,lang,code,source,options,option0,option0,option1,option1,the,simple,template,format,code,query,the,complex,template,format,code,template,query,note,that,templates,can,be,handled,as,both,strings,and,complex,json,objects,also,templates,may,be,part,of,the,source,parameter,in,a,script,the,parser,can,handle,this,case,as,well,param,content,the,content,from,the,request,to,be,parsed,as,described,above,return,the,parsed,link,stored,script,source;public,static,stored,script,source,parse,bytes,reference,content,xcontent,type,x,content,type,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,token,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,if,token,token,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,collections,empty,map,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,get,preferred,name,get,preferred,name,string,name,parser,current,name,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,return,parser,apply,parser,null,build,false,else,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,source,else,if,get,preferred,name,equals,name,deprecated,the,template,context,is,now,deprecated,specify,templates,in,a,script,element,token,parser,next,token,if,token,token,string,source,parser,text,if,source,null,source,is,empty,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,source,collections,empty,map,else,return,parse,remaining,token,parser,else,if,get,preferred,name,equals,name,deprecated,the,template,context,is,now,deprecated,specify,templates,in,a,script,element,return,parse,remaining,token,parser,else,deprecated,scripts,should,not,be,stored,without,a,context,specify,them,in,a,script,element,return,parse,remaining,token,parser,catch,ioexception,ioe,throw,new,unchecked,ioexception,ioe
StoredScriptSource -> public static StoredScriptSource parse(BytesReference content, XContentType xContentType);1531179852;This will parse XContent into a {@link StoredScriptSource}.  The following formats can be parsed:__The simple script format with no compiler options or user-defined params:__Example:_{@code_{"script": "return Math.log(doc.popularity) * 100_"}___The above format requires the lang to be specified using the deprecated stored script namespace_(as a url parameter during a put request).  See {@link ScriptMetaData} for more information about_the stored script namespaces.__The complex script format using the new stored script namespace_where lang and source are required but options is optional:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Example:_{@code__"script": {_"lang" : "painless",_"source" : "return Math.log(doc.popularity) * params.multiplier"_____The use of "source" may also be substituted with "code" for backcompat with 5.3 to 5.5 format. For example:__{@code__"script" : {_"lang" : "<lang>",_"code" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param content The content from the request to be parsed as described above._@return        The parsed {@link StoredScriptSource}.;public static StoredScriptSource parse(BytesReference content, XContentType xContentType) {_        try (InputStream stream = content.streamInput()__             XContentParser parser = xContentType.xContent()_                 .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            Token token = parser.nextToken()___            if (token != Token.START_OBJECT) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__            }__            token = parser.nextToken()___            if (token == Token.END_OBJECT) {_                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")___                return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, "", Collections.emptyMap())__            }__            if (token != Token.FIELD_NAME) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + ", expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + "]")__            }__            String name = parser.currentName()___            if (SCRIPT_PARSE_FIELD.getPreferredName().equals(name)) {_                token = parser.nextToken()___                if (token == Token.START_OBJECT) {_                    return PARSER.apply(parser, null).build(false)__                } else {_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{, <source>]")__                }_            } else {_                throw new ParsingException(parser.getTokenLocation(), "unexpected field [" + name + "], expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + "]")__            }_        } catch (IOException ioe) {_            throw new UncheckedIOException(ioe)__        }_    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,formats,can,be,parsed,the,simple,script,format,with,no,compiler,options,or,user,defined,params,example,code,script,return,math,log,doc,popularity,100,the,above,format,requires,the,lang,to,be,specified,using,the,deprecated,stored,script,namespace,as,a,url,parameter,during,a,put,request,see,link,script,meta,data,for,more,information,about,the,stored,script,namespaces,the,complex,script,format,using,the,new,stored,script,namespace,where,lang,and,source,are,required,but,options,is,optional,code,script,lang,lang,source,source,options,option0,option0,option1,option1,example,code,script,lang,painless,source,return,math,log,doc,popularity,params,multiplier,the,use,of,source,may,also,be,substituted,with,code,for,backcompat,with,5,3,to,5,5,format,for,example,code,script,lang,lang,code,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,content,the,content,from,the,request,to,be,parsed,as,described,above,return,the,parsed,link,stored,script,source;public,static,stored,script,source,parse,bytes,reference,content,xcontent,type,x,content,type,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,token,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,if,token,token,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,collections,empty,map,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,get,preferred,name,string,name,parser,current,name,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,return,parser,apply,parser,null,build,false,else,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,source,else,throw,new,parsing,exception,parser,get,token,location,unexpected,field,name,expected,get,preferred,name,catch,ioexception,ioe,throw,new,unchecked,ioexception,ioe
StoredScriptSource -> public static StoredScriptSource parse(BytesReference content, XContentType xContentType);1540486836;This will parse XContent into a {@link StoredScriptSource}.  The following formats can be parsed:__The simple script format with no compiler options or user-defined params:__Example:_{@code_{"script": "return Math.log(doc.popularity) * 100_"}___The above format requires the lang to be specified using the deprecated stored script namespace_(as a url parameter during a put request).  See {@link ScriptMetaData} for more information about_the stored script namespaces.__The complex script format using the new stored script namespace_where lang and source are required but options is optional:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Example:_{@code__"script": {_"lang" : "painless",_"source" : "return Math.log(doc.popularity) * params.multiplier"_____The use of "source" may also be substituted with "code" for backcompat with 5.3 to 5.5 format. For example:__{@code__"script" : {_"lang" : "<lang>",_"code" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param content The content from the request to be parsed as described above._@return        The parsed {@link StoredScriptSource}.;public static StoredScriptSource parse(BytesReference content, XContentType xContentType) {_        try (InputStream stream = content.streamInput()__             XContentParser parser = xContentType.xContent()_                 .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            Token token = parser.nextToken()___            if (token != Token.START_OBJECT) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__            }__            token = parser.nextToken()___            if (token == Token.END_OBJECT) {_                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")___                return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, "", Collections.emptyMap())__            }__            if (token != Token.FIELD_NAME) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + ", expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + "]")__            }__            String name = parser.currentName()___            if (SCRIPT_PARSE_FIELD.getPreferredName().equals(name)) {_                token = parser.nextToken()___                if (token == Token.START_OBJECT) {_                    return PARSER.apply(parser, null).build(false)__                } else {_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{, <source>]")__                }_            } else {_                throw new ParsingException(parser.getTokenLocation(), "unexpected field [" + name + "], expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + "]")__            }_        } catch (IOException ioe) {_            throw new UncheckedIOException(ioe)__        }_    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,formats,can,be,parsed,the,simple,script,format,with,no,compiler,options,or,user,defined,params,example,code,script,return,math,log,doc,popularity,100,the,above,format,requires,the,lang,to,be,specified,using,the,deprecated,stored,script,namespace,as,a,url,parameter,during,a,put,request,see,link,script,meta,data,for,more,information,about,the,stored,script,namespaces,the,complex,script,format,using,the,new,stored,script,namespace,where,lang,and,source,are,required,but,options,is,optional,code,script,lang,lang,source,source,options,option0,option0,option1,option1,example,code,script,lang,painless,source,return,math,log,doc,popularity,params,multiplier,the,use,of,source,may,also,be,substituted,with,code,for,backcompat,with,5,3,to,5,5,format,for,example,code,script,lang,lang,code,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,content,the,content,from,the,request,to,be,parsed,as,described,above,return,the,parsed,link,stored,script,source;public,static,stored,script,source,parse,bytes,reference,content,xcontent,type,x,content,type,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,token,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,if,token,token,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,collections,empty,map,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,get,preferred,name,string,name,parser,current,name,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,return,parser,apply,parser,null,build,false,else,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,source,else,throw,new,parsing,exception,parser,get,token,location,unexpected,field,name,expected,get,preferred,name,catch,ioexception,ioe,throw,new,unchecked,ioexception,ioe
StoredScriptSource -> public static StoredScriptSource parse(BytesReference content, XContentType xContentType);1540583181;This will parse XContent into a {@link StoredScriptSource}.  The following formats can be parsed:__The simple script format with no compiler options or user-defined params:__Example:_{@code_{"script": "return Math.log(doc.popularity) * 100_"}___The above format requires the lang to be specified using the deprecated stored script namespace_(as a url parameter during a put request).  See {@link ScriptMetaData} for more information about_the stored script namespaces.__The complex script format using the new stored script namespace_where lang and source are required but options is optional:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Example:_{@code__"script": {_"lang" : "painless",_"source" : "return Math.log(doc.popularity) * params.multiplier"_____The use of "source" may also be substituted with "code" for backcompat with 5.3 to 5.5 format. For example:__{@code__"script" : {_"lang" : "<lang>",_"code" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param content The content from the request to be parsed as described above._@return        The parsed {@link StoredScriptSource}.;public static StoredScriptSource parse(BytesReference content, XContentType xContentType) {_        try (InputStream stream = content.streamInput()__             XContentParser parser = xContentType.xContent()_                 .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            Token token = parser.nextToken()___            if (token != Token.START_OBJECT) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__            }__            token = parser.nextToken()___            if (token == Token.END_OBJECT) {_                deprecationLogger.deprecated("empty templates should no longer be used")___                return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, "", Collections.emptyMap())__            }__            if (token != Token.FIELD_NAME) {_                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + ", expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + "]")__            }__            String name = parser.currentName()___            if (SCRIPT_PARSE_FIELD.getPreferredName().equals(name)) {_                token = parser.nextToken()___                if (token == Token.START_OBJECT) {_                    return PARSER.apply(parser, null).build(false)__                } else {_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{, <source>]")__                }_            } else {_                throw new ParsingException(parser.getTokenLocation(), "unexpected field [" + name + "], expected [" +_                    SCRIPT_PARSE_FIELD.getPreferredName() + "]")__            }_        } catch (IOException ioe) {_            throw new UncheckedIOException(ioe)__        }_    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,formats,can,be,parsed,the,simple,script,format,with,no,compiler,options,or,user,defined,params,example,code,script,return,math,log,doc,popularity,100,the,above,format,requires,the,lang,to,be,specified,using,the,deprecated,stored,script,namespace,as,a,url,parameter,during,a,put,request,see,link,script,meta,data,for,more,information,about,the,stored,script,namespaces,the,complex,script,format,using,the,new,stored,script,namespace,where,lang,and,source,are,required,but,options,is,optional,code,script,lang,lang,source,source,options,option0,option0,option1,option1,example,code,script,lang,painless,source,return,math,log,doc,popularity,params,multiplier,the,use,of,source,may,also,be,substituted,with,code,for,backcompat,with,5,3,to,5,5,format,for,example,code,script,lang,lang,code,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,content,the,content,from,the,request,to,be,parsed,as,described,above,return,the,parsed,link,stored,script,source;public,static,stored,script,source,parse,bytes,reference,content,xcontent,type,x,content,type,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,token,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,if,token,token,deprecation,logger,deprecated,empty,templates,should,no,longer,be,used,return,new,stored,script,source,script,collections,empty,map,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,get,preferred,name,string,name,parser,current,name,if,get,preferred,name,equals,name,token,parser,next,token,if,token,token,return,parser,apply,parser,null,build,false,else,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,source,else,throw,new,parsing,exception,parser,get,token,location,unexpected,field,name,expected,get,preferred,name,catch,ioexception,ioe,throw,new,unchecked,ioexception,ioe
StoredScriptSource -> public String getSource();1524684173;@return The source used for compiling this script.;public String getSource() {_        return source__    };return,the,source,used,for,compiling,this,script;public,string,get,source,return,source
StoredScriptSource -> public String getSource();1526374795;@return The source used for compiling this script.;public String getSource() {_        return source__    };return,the,source,used,for,compiling,this,script;public,string,get,source,return,source
StoredScriptSource -> public String getSource();1527622193;@return The source used for compiling this script.;public String getSource() {_        return source__    };return,the,source,used,for,compiling,this,script;public,string,get,source,return,source
StoredScriptSource -> public String getSource();1529433467;@return The source used for compiling this script.;public String getSource() {_        return source__    };return,the,source,used,for,compiling,this,script;public,string,get,source,return,source
StoredScriptSource -> public String getSource();1531179852;@return The source used for compiling this script.;public String getSource() {_        return source__    };return,the,source,used,for,compiling,this,script;public,string,get,source,return,source
StoredScriptSource -> public String getSource();1540486836;@return The source used for compiling this script.;public String getSource() {_        return source__    };return,the,source,used,for,compiling,this,script;public,string,get,source,return,source
StoredScriptSource -> public String getSource();1540583181;@return The source used for compiling this script.;public String getSource() {_        return source__    };return,the,source,used,for,compiling,this,script;public,string,get,source,return,source
StoredScriptSource -> public StoredScriptSource(String source);1524684173;Constructor for use with {@link GetStoredScriptResponse}_to support the deprecated stored script namespace.;public StoredScriptSource(String source) {_        this.lang = null__        this.source = Objects.requireNonNull(source)__        this.options = null__    };constructor,for,use,with,link,get,stored,script,response,to,support,the,deprecated,stored,script,namespace;public,stored,script,source,string,source,this,lang,null,this,source,objects,require,non,null,source,this,options,null
StoredScriptSource -> public StoredScriptSource(String source);1526374795;Constructor for use with {@link GetStoredScriptResponse}_to support the deprecated stored script namespace.;public StoredScriptSource(String source) {_        this.lang = null__        this.source = Objects.requireNonNull(source)__        this.options = null__    };constructor,for,use,with,link,get,stored,script,response,to,support,the,deprecated,stored,script,namespace;public,stored,script,source,string,source,this,lang,null,this,source,objects,require,non,null,source,this,options,null
StoredScriptSource -> public StoredScriptSource(String source);1527622193;Constructor for use with {@link GetStoredScriptResponse}_to support the deprecated stored script namespace.;public StoredScriptSource(String source) {_        this.lang = null__        this.source = Objects.requireNonNull(source)__        this.options = null__    };constructor,for,use,with,link,get,stored,script,response,to,support,the,deprecated,stored,script,namespace;public,stored,script,source,string,source,this,lang,null,this,source,objects,require,non,null,source,this,options,null
StoredScriptSource -> public StoredScriptSource(String source);1529433467;Constructor for use with {@link GetStoredScriptResponse}_to support the deprecated stored script namespace.;public StoredScriptSource(String source) {_        this.lang = null__        this.source = Objects.requireNonNull(source)__        this.options = null__    };constructor,for,use,with,link,get,stored,script,response,to,support,the,deprecated,stored,script,namespace;public,stored,script,source,string,source,this,lang,null,this,source,objects,require,non,null,source,this,options,null
StoredScriptSource -> public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty);1526374795;This will parse XContent into a {@link StoredScriptSource}. The following format is what will be parsed:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allows empty templates to be loaded for backwards compatibility.;public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty) {_        return PARSER.apply(parser, null).build(ignoreEmpty)__    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,format,is,what,will,be,parsed,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allows,empty,templates,to,be,loaded,for,backwards,compatibility;public,static,stored,script,source,from,xcontent,xcontent,parser,parser,boolean,ignore,empty,return,parser,apply,parser,null,build,ignore,empty
StoredScriptSource -> public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty);1527622193;This will parse XContent into a {@link StoredScriptSource}. The following format is what will be parsed:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allows empty templates to be loaded for backwards compatibility.;public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty) {_        return PARSER.apply(parser, null).build(ignoreEmpty)__    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,format,is,what,will,be,parsed,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allows,empty,templates,to,be,loaded,for,backwards,compatibility;public,static,stored,script,source,from,xcontent,xcontent,parser,parser,boolean,ignore,empty,return,parser,apply,parser,null,build,ignore,empty
StoredScriptSource -> public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty);1529433467;This will parse XContent into a {@link StoredScriptSource}. The following format is what will be parsed:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allows empty templates to be loaded for backwards compatibility.;public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty) {_        return PARSER.apply(parser, null).build(ignoreEmpty)__    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,format,is,what,will,be,parsed,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allows,empty,templates,to,be,loaded,for,backwards,compatibility;public,static,stored,script,source,from,xcontent,xcontent,parser,parser,boolean,ignore,empty,return,parser,apply,parser,null,build,ignore,empty
StoredScriptSource -> public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty);1531179852;This will parse XContent into a {@link StoredScriptSource}. The following format is what will be parsed:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allows empty templates to be loaded for backwards compatibility.;public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty) {_        return PARSER.apply(parser, null).build(ignoreEmpty)__    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,format,is,what,will,be,parsed,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allows,empty,templates,to,be,loaded,for,backwards,compatibility;public,static,stored,script,source,from,xcontent,xcontent,parser,parser,boolean,ignore,empty,return,parser,apply,parser,null,build,ignore,empty
StoredScriptSource -> public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty);1540486836;This will parse XContent into a {@link StoredScriptSource}. The following format is what will be parsed:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allows empty templates to be loaded for backwards compatibility.;public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty) {_        return PARSER.apply(parser, null).build(ignoreEmpty)__    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,format,is,what,will,be,parsed,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allows,empty,templates,to,be,loaded,for,backwards,compatibility;public,static,stored,script,source,from,xcontent,xcontent,parser,parser,boolean,ignore,empty,return,parser,apply,parser,null,build,ignore,empty
StoredScriptSource -> public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty);1540583181;This will parse XContent into a {@link StoredScriptSource}. The following format is what will be parsed:__{@code__"script" : {_"lang" : "<lang>",_"source" : "<source>",_"options" : {_"option0" : "<option0>",_"option1" : "<option1>",_...______Note that the "source" parameter can also handle template parsing including from_a complex JSON object.__@param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check._This allows empty templates to be loaded for backwards compatibility.;public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty) {_        return PARSER.apply(parser, null).build(ignoreEmpty)__    };this,will,parse,xcontent,into,a,link,stored,script,source,the,following,format,is,what,will,be,parsed,code,script,lang,lang,source,source,options,option0,option0,option1,option1,note,that,the,source,parameter,can,also,handle,template,parsing,including,from,a,complex,json,object,param,ignore,empty,specify,as,code,true,to,ignore,empty,the,empty,source,check,this,allows,empty,templates,to,be,loaded,for,backwards,compatibility;public,static,stored,script,source,from,xcontent,xcontent,parser,parser,boolean,ignore,empty,return,parser,apply,parser,null,build,ignore,empty
StoredScriptSource -> Builder -> private void setOptions(Map<String, String> options);1524684173;Options may have already been added if a template was specified._Appends the user-defined compiler options with the internal compiler options.;private void setOptions(Map<String, String> options) {_            this.options.putAll(options)__        };options,may,have,already,been,added,if,a,template,was,specified,appends,the,user,defined,compiler,options,with,the,internal,compiler,options;private,void,set,options,map,string,string,options,this,options,put,all,options
StoredScriptSource -> Builder -> private void setOptions(Map<String, String> options);1526374795;Options may have already been added if a template was specified._Appends the user-defined compiler options with the internal compiler options.;private void setOptions(Map<String, String> options) {_            this.options.putAll(options)__        };options,may,have,already,been,added,if,a,template,was,specified,appends,the,user,defined,compiler,options,with,the,internal,compiler,options;private,void,set,options,map,string,string,options,this,options,put,all,options
StoredScriptSource -> Builder -> private void setOptions(Map<String, String> options);1527622193;Options may have already been added if a template was specified._Appends the user-defined compiler options with the internal compiler options.;private void setOptions(Map<String, String> options) {_            this.options.putAll(options)__        };options,may,have,already,been,added,if,a,template,was,specified,appends,the,user,defined,compiler,options,with,the,internal,compiler,options;private,void,set,options,map,string,string,options,this,options,put,all,options
StoredScriptSource -> Builder -> private void setOptions(Map<String, String> options);1529433467;Options may have already been added if a template was specified._Appends the user-defined compiler options with the internal compiler options.;private void setOptions(Map<String, String> options) {_            this.options.putAll(options)__        };options,may,have,already,been,added,if,a,template,was,specified,appends,the,user,defined,compiler,options,with,the,internal,compiler,options;private,void,set,options,map,string,string,options,this,options,put,all,options
StoredScriptSource -> Builder -> private void setOptions(Map<String, String> options);1531179852;Options may have already been added if a template was specified._Appends the user-defined compiler options with the internal compiler options.;private void setOptions(Map<String, String> options) {_            this.options.putAll(options)__        };options,may,have,already,been,added,if,a,template,was,specified,appends,the,user,defined,compiler,options,with,the,internal,compiler,options;private,void,set,options,map,string,string,options,this,options,put,all,options
StoredScriptSource -> Builder -> private void setOptions(Map<String, String> options);1540486836;Options may have already been added if a template was specified._Appends the user-defined compiler options with the internal compiler options.;private void setOptions(Map<String, String> options) {_            this.options.putAll(options)__        };options,may,have,already,been,added,if,a,template,was,specified,appends,the,user,defined,compiler,options,with,the,internal,compiler,options;private,void,set,options,map,string,string,options,this,options,put,all,options
StoredScriptSource -> Builder -> private void setOptions(Map<String, String> options);1540583181;Options may have already been added if a template was specified._Appends the user-defined compiler options with the internal compiler options.;private void setOptions(Map<String, String> options) {_            this.options.putAll(options)__        };options,may,have,already,been,added,if,a,template,was,specified,appends,the,user,defined,compiler,options,with,the,internal,compiler,options;private,void,set,options,map,string,string,options,this,options,put,all,options
StoredScriptSource -> public StoredScriptSource(StreamInput in) throws IOException;1524684173;Reads a {@link StoredScriptSource} from a stream.  Version 5.3+ will read_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;public StoredScriptSource(StreamInput in) throws IOException {_        if (in.getVersion().onOrAfter(Version.V_5_3_0)) {_            this.lang = in.readString()__            this.source = in.readString()__            @SuppressWarnings("unchecked")_            Map<String, String> options = (Map<String, String>)(Map)in.readMap()__            this.options = options__        } else {_            this.lang = null__            this.source = in.readBytesReference().utf8ToString()__            this.options = null__        }_    };reads,a,link,stored,script,source,from,a,stream,version,5,3,will,read,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;public,stored,script,source,stream,input,in,throws,ioexception,if,in,get,version,on,or,after,version,this,lang,in,read,string,this,source,in,read,string,suppress,warnings,unchecked,map,string,string,options,map,string,string,map,in,read,map,this,options,options,else,this,lang,null,this,source,in,read,bytes,reference,utf8to,string,this,options,null
StoredScriptSource -> public StoredScriptSource(StreamInput in) throws IOException;1526374795;Reads a {@link StoredScriptSource} from a stream.  Version 5.3+ will read_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;public StoredScriptSource(StreamInput in) throws IOException {_        if (in.getVersion().onOrAfter(Version.V_5_3_0)) {_            this.lang = in.readString()__            this.source = in.readString()__            @SuppressWarnings("unchecked")_            Map<String, String> options = (Map<String, String>)(Map)in.readMap()__            this.options = options__        } else {_            this.lang = null__            this.source = in.readBytesReference().utf8ToString()__            this.options = null__        }_    };reads,a,link,stored,script,source,from,a,stream,version,5,3,will,read,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;public,stored,script,source,stream,input,in,throws,ioexception,if,in,get,version,on,or,after,version,this,lang,in,read,string,this,source,in,read,string,suppress,warnings,unchecked,map,string,string,options,map,string,string,map,in,read,map,this,options,options,else,this,lang,null,this,source,in,read,bytes,reference,utf8to,string,this,options,null
StoredScriptSource -> public StoredScriptSource(StreamInput in) throws IOException;1527622193;Reads a {@link StoredScriptSource} from a stream.  Version 5.3+ will read_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;public StoredScriptSource(StreamInput in) throws IOException {_        if (in.getVersion().onOrAfter(Version.V_5_3_0)) {_            this.lang = in.readString()__            this.source = in.readString()__            @SuppressWarnings("unchecked")_            Map<String, String> options = (Map<String, String>)(Map)in.readMap()__            this.options = options__        } else {_            this.lang = null__            this.source = in.readBytesReference().utf8ToString()__            this.options = null__        }_    };reads,a,link,stored,script,source,from,a,stream,version,5,3,will,read,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;public,stored,script,source,stream,input,in,throws,ioexception,if,in,get,version,on,or,after,version,this,lang,in,read,string,this,source,in,read,string,suppress,warnings,unchecked,map,string,string,options,map,string,string,map,in,read,map,this,options,options,else,this,lang,null,this,source,in,read,bytes,reference,utf8to,string,this,options,null
StoredScriptSource -> public StoredScriptSource(StreamInput in) throws IOException;1529433467;Reads a {@link StoredScriptSource} from a stream.  Version 5.3+ will read_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;public StoredScriptSource(StreamInput in) throws IOException {_        if (in.getVersion().onOrAfter(Version.V_5_3_0)) {_            this.lang = in.readString()__            this.source = in.readString()__            @SuppressWarnings("unchecked")_            Map<String, String> options = (Map<String, String>)(Map)in.readMap()__            this.options = options__        } else {_            this.lang = null__            this.source = in.readBytesReference().utf8ToString()__            this.options = null__        }_    };reads,a,link,stored,script,source,from,a,stream,version,5,3,will,read,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;public,stored,script,source,stream,input,in,throws,ioexception,if,in,get,version,on,or,after,version,this,lang,in,read,string,this,source,in,read,string,suppress,warnings,unchecked,map,string,string,options,map,string,string,map,in,read,map,this,options,options,else,this,lang,null,this,source,in,read,bytes,reference,utf8to,string,this,options,null
StoredScriptSource -> public StoredScriptSource(StreamInput in) throws IOException;1531179852;Reads a {@link StoredScriptSource} from a stream.  Version 5.3+ will read_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;public StoredScriptSource(StreamInput in) throws IOException {_        this.lang = in.readString()__        this.source = in.readString()__        @SuppressWarnings("unchecked")_        Map<String, String> options = (Map<String, String>)(Map)in.readMap()__        this.options = options__    };reads,a,link,stored,script,source,from,a,stream,version,5,3,will,read,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;public,stored,script,source,stream,input,in,throws,ioexception,this,lang,in,read,string,this,source,in,read,string,suppress,warnings,unchecked,map,string,string,options,map,string,string,map,in,read,map,this,options,options
StoredScriptSource -> public StoredScriptSource(StreamInput in) throws IOException;1540486836;Reads a {@link StoredScriptSource} from a stream.  Version 5.3+ will read_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;public StoredScriptSource(StreamInput in) throws IOException {_        this.lang = in.readString()__        this.source = in.readString()__        @SuppressWarnings("unchecked")_        Map<String, String> options = (Map<String, String>)(Map)in.readMap()__        this.options = options__    };reads,a,link,stored,script,source,from,a,stream,version,5,3,will,read,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;public,stored,script,source,stream,input,in,throws,ioexception,this,lang,in,read,string,this,source,in,read,string,suppress,warnings,unchecked,map,string,string,options,map,string,string,map,in,read,map,this,options,options
StoredScriptSource -> public StoredScriptSource(StreamInput in) throws IOException;1540583181;Reads a {@link StoredScriptSource} from a stream.  Version 5.3+ will read_all of the lang, source, and options parameters.  For versions prior to 5.3,_only the source parameter will be read in as a bytes reference.;public StoredScriptSource(StreamInput in) throws IOException {_        this.lang = in.readString()__        this.source = in.readString()__        @SuppressWarnings("unchecked")_        Map<String, String> options = (Map<String, String>)(Map)in.readMap()__        this.options = options__    };reads,a,link,stored,script,source,from,a,stream,version,5,3,will,read,all,of,the,lang,source,and,options,parameters,for,versions,prior,to,5,3,only,the,source,parameter,will,be,read,in,as,a,bytes,reference;public,stored,script,source,stream,input,in,throws,ioexception,this,lang,in,read,string,this,source,in,read,string,suppress,warnings,unchecked,map,string,string,options,map,string,string,map,in,read,map,this,options,options
StoredScriptSource -> Builder -> private void setSource(XContentParser parser);1524684173;Since stored scripts can accept templates rather than just scripts, they must also be able_to handle template parsing, hence the need for custom parsing source.  Templates can_consist of either an {@link String} or a JSON object.  If a JSON object is discovered_then the content type option must also be saved as a compiler option.;private void setSource(XContentParser parser) {_            try {_                if (parser.currentToken() == Token.START_OBJECT) {_                    _                    XContentBuilder builder = XContentFactory.jsonBuilder()__                    source = Strings.toString(builder.copyCurrentStructure(parser))__                    options.put(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())__                } else {_                    source = parser.text()__                }_            } catch (IOException exception) {_                throw new UncheckedIOException(exception)__            }_        };since,stored,scripts,can,accept,templates,rather,than,just,scripts,they,must,also,be,able,to,handle,template,parsing,hence,the,need,for,custom,parsing,source,templates,can,consist,of,either,an,link,string,or,a,json,object,if,a,json,object,is,discovered,then,the,content,type,option,must,also,be,saved,as,a,compiler,option;private,void,set,source,xcontent,parser,parser,try,if,parser,current,token,token,xcontent,builder,builder,xcontent,factory,json,builder,source,strings,to,string,builder,copy,current,structure,parser,options,put,script,xcontent,type,json,media,type,else,source,parser,text,catch,ioexception,exception,throw,new,unchecked,ioexception,exception
StoredScriptSource -> Builder -> private void setSource(XContentParser parser);1526374795;Since stored scripts can accept templates rather than just scripts, they must also be able_to handle template parsing, hence the need for custom parsing source.  Templates can_consist of either an {@link String} or a JSON object.  If a JSON object is discovered_then the content type option must also be saved as a compiler option.;private void setSource(XContentParser parser) {_            try {_                if (parser.currentToken() == Token.START_OBJECT) {_                    _                    XContentBuilder builder = XContentFactory.jsonBuilder()__                    source = Strings.toString(builder.copyCurrentStructure(parser))__                    options.put(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())__                } else {_                    source = parser.text()__                }_            } catch (IOException exception) {_                throw new UncheckedIOException(exception)__            }_        };since,stored,scripts,can,accept,templates,rather,than,just,scripts,they,must,also,be,able,to,handle,template,parsing,hence,the,need,for,custom,parsing,source,templates,can,consist,of,either,an,link,string,or,a,json,object,if,a,json,object,is,discovered,then,the,content,type,option,must,also,be,saved,as,a,compiler,option;private,void,set,source,xcontent,parser,parser,try,if,parser,current,token,token,xcontent,builder,builder,xcontent,factory,json,builder,source,strings,to,string,builder,copy,current,structure,parser,options,put,script,xcontent,type,json,media,type,else,source,parser,text,catch,ioexception,exception,throw,new,unchecked,ioexception,exception
StoredScriptSource -> Builder -> private void setSource(XContentParser parser);1527622193;Since stored scripts can accept templates rather than just scripts, they must also be able_to handle template parsing, hence the need for custom parsing source.  Templates can_consist of either an {@link String} or a JSON object.  If a JSON object is discovered_then the content type option must also be saved as a compiler option.;private void setSource(XContentParser parser) {_            try {_                if (parser.currentToken() == Token.START_OBJECT) {_                    _                    XContentBuilder builder = XContentFactory.jsonBuilder()__                    source = Strings.toString(builder.copyCurrentStructure(parser))__                    options.put(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())__                } else {_                    source = parser.text()__                }_            } catch (IOException exception) {_                throw new UncheckedIOException(exception)__            }_        };since,stored,scripts,can,accept,templates,rather,than,just,scripts,they,must,also,be,able,to,handle,template,parsing,hence,the,need,for,custom,parsing,source,templates,can,consist,of,either,an,link,string,or,a,json,object,if,a,json,object,is,discovered,then,the,content,type,option,must,also,be,saved,as,a,compiler,option;private,void,set,source,xcontent,parser,parser,try,if,parser,current,token,token,xcontent,builder,builder,xcontent,factory,json,builder,source,strings,to,string,builder,copy,current,structure,parser,options,put,script,xcontent,type,json,media,type,else,source,parser,text,catch,ioexception,exception,throw,new,unchecked,ioexception,exception
StoredScriptSource -> Builder -> private void setSource(XContentParser parser);1529433467;Since stored scripts can accept templates rather than just scripts, they must also be able_to handle template parsing, hence the need for custom parsing source.  Templates can_consist of either an {@link String} or a JSON object.  If a JSON object is discovered_then the content type option must also be saved as a compiler option.;private void setSource(XContentParser parser) {_            try {_                if (parser.currentToken() == Token.START_OBJECT) {_                    _                    XContentBuilder builder = XContentFactory.jsonBuilder()__                    source = Strings.toString(builder.copyCurrentStructure(parser))__                    options.put(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())__                } else {_                    source = parser.text()__                }_            } catch (IOException exception) {_                throw new UncheckedIOException(exception)__            }_        };since,stored,scripts,can,accept,templates,rather,than,just,scripts,they,must,also,be,able,to,handle,template,parsing,hence,the,need,for,custom,parsing,source,templates,can,consist,of,either,an,link,string,or,a,json,object,if,a,json,object,is,discovered,then,the,content,type,option,must,also,be,saved,as,a,compiler,option;private,void,set,source,xcontent,parser,parser,try,if,parser,current,token,token,xcontent,builder,builder,xcontent,factory,json,builder,source,strings,to,string,builder,copy,current,structure,parser,options,put,script,xcontent,type,json,media,type,else,source,parser,text,catch,ioexception,exception,throw,new,unchecked,ioexception,exception
StoredScriptSource -> Builder -> private void setSource(XContentParser parser);1531179852;Since stored scripts can accept templates rather than just scripts, they must also be able_to handle template parsing, hence the need for custom parsing source.  Templates can_consist of either an {@link String} or a JSON object.  If a JSON object is discovered_then the content type option must also be saved as a compiler option.;private void setSource(XContentParser parser) {_            try {_                if (parser.currentToken() == Token.START_OBJECT) {_                    _                    XContentBuilder builder = XContentFactory.jsonBuilder()__                    source = Strings.toString(builder.copyCurrentStructure(parser))__                    options.put(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())__                } else {_                    source = parser.text()__                }_            } catch (IOException exception) {_                throw new UncheckedIOException(exception)__            }_        };since,stored,scripts,can,accept,templates,rather,than,just,scripts,they,must,also,be,able,to,handle,template,parsing,hence,the,need,for,custom,parsing,source,templates,can,consist,of,either,an,link,string,or,a,json,object,if,a,json,object,is,discovered,then,the,content,type,option,must,also,be,saved,as,a,compiler,option;private,void,set,source,xcontent,parser,parser,try,if,parser,current,token,token,xcontent,builder,builder,xcontent,factory,json,builder,source,strings,to,string,builder,copy,current,structure,parser,options,put,script,xcontent,type,json,media,type,else,source,parser,text,catch,ioexception,exception,throw,new,unchecked,ioexception,exception
StoredScriptSource -> Builder -> private void setSource(XContentParser parser);1540486836;Since stored scripts can accept templates rather than just scripts, they must also be able_to handle template parsing, hence the need for custom parsing source.  Templates can_consist of either an {@link String} or a JSON object.  If a JSON object is discovered_then the content type option must also be saved as a compiler option.;private void setSource(XContentParser parser) {_            try {_                if (parser.currentToken() == Token.START_OBJECT) {_                    _                    XContentBuilder builder = XContentFactory.jsonBuilder()__                    source = Strings.toString(builder.copyCurrentStructure(parser))__                    options.put(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())__                } else {_                    source = parser.text()__                }_            } catch (IOException exception) {_                throw new UncheckedIOException(exception)__            }_        };since,stored,scripts,can,accept,templates,rather,than,just,scripts,they,must,also,be,able,to,handle,template,parsing,hence,the,need,for,custom,parsing,source,templates,can,consist,of,either,an,link,string,or,a,json,object,if,a,json,object,is,discovered,then,the,content,type,option,must,also,be,saved,as,a,compiler,option;private,void,set,source,xcontent,parser,parser,try,if,parser,current,token,token,xcontent,builder,builder,xcontent,factory,json,builder,source,strings,to,string,builder,copy,current,structure,parser,options,put,script,xcontent,type,json,media,type,else,source,parser,text,catch,ioexception,exception,throw,new,unchecked,ioexception,exception
StoredScriptSource -> Builder -> private void setSource(XContentParser parser);1540583181;Since stored scripts can accept templates rather than just scripts, they must also be able_to handle template parsing, hence the need for custom parsing source.  Templates can_consist of either an {@link String} or a JSON object.  If a JSON object is discovered_then the content type option must also be saved as a compiler option.;private void setSource(XContentParser parser) {_            try {_                if (parser.currentToken() == Token.START_OBJECT) {_                    _                    XContentBuilder builder = XContentFactory.jsonBuilder()__                    source = Strings.toString(builder.copyCurrentStructure(parser))__                    options.put(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())__                } else {_                    source = parser.text()__                }_            } catch (IOException exception) {_                throw new UncheckedIOException(exception)__            }_        };since,stored,scripts,can,accept,templates,rather,than,just,scripts,they,must,also,be,able,to,handle,template,parsing,hence,the,need,for,custom,parsing,source,templates,can,consist,of,either,an,link,string,or,a,json,object,if,a,json,object,is,discovered,then,the,content,type,option,must,also,be,saved,as,a,compiler,option;private,void,set,source,xcontent,parser,parser,try,if,parser,current,token,token,xcontent,builder,builder,xcontent,factory,json,builder,source,strings,to,string,builder,copy,current,structure,parser,options,put,script,xcontent,type,json,media,type,else,source,parser,text,catch,ioexception,exception,throw,new,unchecked,ioexception,exception
StoredScriptSource -> public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException;1524684173;Required for {@link ScriptMetaData.ScriptMetadataDiff}.  Uses_the {@link StoredScriptSource#StoredScriptSource(StreamInput)}_constructor.;public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException {_        return readDiffFrom(StoredScriptSource::new, in)__    };required,for,link,script,meta,data,script,metadata,diff,uses,the,link,stored,script,source,stored,script,source,stream,input,constructor;public,static,diff,stored,script,source,read,diff,from,stream,input,in,throws,ioexception,return,read,diff,from,stored,script,source,new,in
StoredScriptSource -> public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException;1526374795;Required for {@link ScriptMetaData.ScriptMetadataDiff}.  Uses_the {@link StoredScriptSource#StoredScriptSource(StreamInput)}_constructor.;public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException {_        return readDiffFrom(StoredScriptSource::new, in)__    };required,for,link,script,meta,data,script,metadata,diff,uses,the,link,stored,script,source,stored,script,source,stream,input,constructor;public,static,diff,stored,script,source,read,diff,from,stream,input,in,throws,ioexception,return,read,diff,from,stored,script,source,new,in
StoredScriptSource -> public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException;1527622193;Required for {@link ScriptMetaData.ScriptMetadataDiff}.  Uses_the {@link StoredScriptSource#StoredScriptSource(StreamInput)}_constructor.;public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException {_        return readDiffFrom(StoredScriptSource::new, in)__    };required,for,link,script,meta,data,script,metadata,diff,uses,the,link,stored,script,source,stored,script,source,stream,input,constructor;public,static,diff,stored,script,source,read,diff,from,stream,input,in,throws,ioexception,return,read,diff,from,stored,script,source,new,in
StoredScriptSource -> public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException;1529433467;Required for {@link ScriptMetaData.ScriptMetadataDiff}.  Uses_the {@link StoredScriptSource#StoredScriptSource(StreamInput)}_constructor.;public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException {_        return readDiffFrom(StoredScriptSource::new, in)__    };required,for,link,script,meta,data,script,metadata,diff,uses,the,link,stored,script,source,stored,script,source,stream,input,constructor;public,static,diff,stored,script,source,read,diff,from,stream,input,in,throws,ioexception,return,read,diff,from,stored,script,source,new,in
StoredScriptSource -> public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException;1531179852;Required for {@link ScriptMetaData.ScriptMetadataDiff}.  Uses_the {@link StoredScriptSource#StoredScriptSource(StreamInput)}_constructor.;public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException {_        return readDiffFrom(StoredScriptSource::new, in)__    };required,for,link,script,meta,data,script,metadata,diff,uses,the,link,stored,script,source,stored,script,source,stream,input,constructor;public,static,diff,stored,script,source,read,diff,from,stream,input,in,throws,ioexception,return,read,diff,from,stored,script,source,new,in
StoredScriptSource -> public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException;1540486836;Required for {@link ScriptMetaData.ScriptMetadataDiff}.  Uses_the {@link StoredScriptSource#StoredScriptSource(StreamInput)}_constructor.;public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException {_        return readDiffFrom(StoredScriptSource::new, in)__    };required,for,link,script,meta,data,script,metadata,diff,uses,the,link,stored,script,source,stored,script,source,stream,input,constructor;public,static,diff,stored,script,source,read,diff,from,stream,input,in,throws,ioexception,return,read,diff,from,stored,script,source,new,in
StoredScriptSource -> public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException;1540583181;Required for {@link ScriptMetaData.ScriptMetadataDiff}.  Uses_the {@link StoredScriptSource#StoredScriptSource(StreamInput)}_constructor.;public static Diff<StoredScriptSource> readDiffFrom(StreamInput in) throws IOException {_        return readDiffFrom(StoredScriptSource::new, in)__    };required,for,link,script,meta,data,script,metadata,diff,uses,the,link,stored,script,source,stored,script,source,stream,input,constructor;public,static,diff,stored,script,source,read,diff,from,stream,input,in,throws,ioexception,return,read,diff,from,stored,script,source,new,in
