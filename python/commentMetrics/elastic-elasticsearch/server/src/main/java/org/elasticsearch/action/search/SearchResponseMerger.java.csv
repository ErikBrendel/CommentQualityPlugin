# id;timestamp;commentText;codeText;commentWords;codeWords
SearchResponseMerger -> void add(SearchResponse searchResponse);1548067907;Add a search response to the list of responses to be merged together into one._Merges currently happen at once when all responses are available and {@link #getMergedResponse(Clusters)} )} is called._That may change in the future as it's possible to introduce incremental merges as responses come in if necessary.;void add(SearchResponse searchResponse) {_        searchResponses.add(searchResponse)__    };add,a,search,response,to,the,list,of,responses,to,be,merged,together,into,one,merges,currently,happen,at,once,when,all,responses,are,available,and,link,get,merged,response,clusters,is,called,that,may,change,in,the,future,as,it,s,possible,to,introduce,incremental,merges,as,responses,come,in,if,necessary;void,add,search,response,search,response,search,responses,add,search,response
SearchResponseMerger -> void add(SearchResponse searchResponse);1548943934;Add a search response to the list of responses to be merged together into one._Merges currently happen at once when all responses are available and {@link #getMergedResponse(Clusters)} )} is called._That may change in the future as it's possible to introduce incremental merges as responses come in if necessary.;void add(SearchResponse searchResponse) {_        assert searchResponse.getScrollId() == null : "merging scroll results is not supported"__        searchResponses.add(searchResponse)__    };add,a,search,response,to,the,list,of,responses,to,be,merged,together,into,one,merges,currently,happen,at,once,when,all,responses,are,available,and,link,get,merged,response,clusters,is,called,that,may,change,in,the,future,as,it,s,possible,to,introduce,incremental,merges,as,responses,come,in,if,necessary;void,add,search,response,search,response,assert,search,response,get,scroll,id,null,merging,scroll,results,is,not,supported,search,responses,add,search,response
SearchResponseMerger -> void add(SearchResponse searchResponse);1549019502;Add a search response to the list of responses to be merged together into one._Merges currently happen at once when all responses are available and {@link #getMergedResponse(Clusters)} )} is called._That may change in the future as it's possible to introduce incremental merges as responses come in if necessary.;void add(SearchResponse searchResponse) {_        assert searchResponse.getScrollId() == null : "merging scroll results is not supported"__        searchResponses.add(searchResponse)__    };add,a,search,response,to,the,list,of,responses,to,be,merged,together,into,one,merges,currently,happen,at,once,when,all,responses,are,available,and,link,get,merged,response,clusters,is,called,that,may,change,in,the,future,as,it,s,possible,to,introduce,incremental,merges,as,responses,come,in,if,necessary;void,add,search,response,search,response,assert,search,response,get,scroll,id,null,merging,scroll,results,is,not,supported,search,responses,add,search,response
SearchResponseMerger -> void add(SearchResponse searchResponse);1549897254;Add a search response to the list of responses to be merged together into one._Merges currently happen at once when all responses are available and {@link #getMergedResponse(Clusters)} )} is called._That may change in the future as it's possible to introduce incremental merges as responses come in if necessary.;void add(SearchResponse searchResponse) {_        assert searchResponse.getScrollId() == null : "merging scroll results is not supported"__        searchResponses.add(searchResponse)__    };add,a,search,response,to,the,list,of,responses,to,be,merged,together,into,one,merges,currently,happen,at,once,when,all,responses,are,available,and,link,get,merged,response,clusters,is,called,that,may,change,in,the,future,as,it,s,possible,to,introduce,incremental,merges,as,responses,come,in,if,necessary;void,add,search,response,search,response,assert,search,response,get,scroll,id,null,merging,scroll,results,is,not,supported,search,responses,add,search,response
SearchResponseMerger -> void add(SearchResponse searchResponse);1550234695;Add a search response to the list of responses to be merged together into one._Merges currently happen at once when all responses are available and {@link #getMergedResponse(Clusters)} )} is called._That may change in the future as it's possible to introduce incremental merges as responses come in if necessary.;void add(SearchResponse searchResponse) {_        assert searchResponse.getScrollId() == null : "merging scroll results is not supported"__        searchResponses.add(searchResponse)__    };add,a,search,response,to,the,list,of,responses,to,be,merged,together,into,one,merges,currently,happen,at,once,when,all,responses,are,available,and,link,get,merged,response,clusters,is,called,that,may,change,in,the,future,as,it,s,possible,to,introduce,incremental,merges,as,responses,come,in,if,necessary;void,add,search,response,search,response,assert,search,response,get,scroll,id,null,merging,scroll,results,is,not,supported,search,responses,add,search,response
SearchResponseMerger -> SearchResponse getMergedResponse(Clusters clusters);1548067907;Returns the merged response. To be called once all responses have been added through {@link #add(SearchResponse)}_so that all responses are merged into a single one.;SearchResponse getMergedResponse(Clusters clusters) {_        assert searchResponses.size() > 1__        int totalShards = 0__        int skippedShards = 0__        int successfulShards = 0__        _        int numReducePhases = 1__        List<ShardSearchFailure> failures = new ArrayList<>()__        Map<String, ProfileShardResult> profileResults = new HashMap<>()__        List<InternalAggregations> aggs = new ArrayList<>()__        Map<ShardId, Integer> shards = new TreeMap<>()__        List<TopDocs> topDocsList = new ArrayList<>(searchResponses.size())__        Map<String, List<Suggest.Suggestion>> groupedSuggestions = new HashMap<>()__        Boolean trackTotalHits = null___        TopDocsStats topDocsStats = new TopDocsStats(trackTotalHitsUpTo)___        for (SearchResponse searchResponse : searchResponses) {_            totalShards += searchResponse.getTotalShards()__            skippedShards += searchResponse.getSkippedShards()__            successfulShards += searchResponse.getSuccessfulShards()__            numReducePhases += searchResponse.getNumReducePhases()___            Collections.addAll(failures, searchResponse.getShardFailures())___            profileResults.putAll(searchResponse.getProfileResults())___            if (searchResponse.getAggregations() != null) {_                InternalAggregations internalAggs = (InternalAggregations) searchResponse.getAggregations()__                aggs.add(internalAggs)__            }__            Suggest suggest = searchResponse.getSuggest()__            if (suggest != null) {_                for (Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> entries : suggest) {_                    List<Suggest.Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(entries.getName(), s -> new ArrayList<>())__                    suggestionList.add(entries)__                }_            }__            SearchHits searchHits = searchResponse.getHits()___            final TotalHits totalHits__            if (searchHits.getTotalHits() == null) {_                _                totalHits = new TotalHits(0, TotalHits.Relation.EQUAL_TO)__                assert trackTotalHits == null || trackTotalHits == false__                trackTotalHits = false__            } else {_                totalHits = searchHits.getTotalHits()__                assert trackTotalHits == null || trackTotalHits__                trackTotalHits = true__            }_            TopDocs topDocs = searchHitsToTopDocs(searchHits, totalHits, shards)__            topDocsStats.add(new TopDocsAndMaxScore(topDocs, searchHits.getMaxScore()),_                searchResponse.isTimedOut(), searchResponse.isTerminatedEarly())__            topDocsList.add(topDocs)__        }__        _        setShardIndex(shards, topDocsList)__        TopDocs topDocs = mergeTopDocs(topDocsList, size, from)__        SearchHits mergedSearchHits = topDocsToSearchHits(topDocs, topDocsStats)__        Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        InternalAggregations reducedAggs = InternalAggregations.reduce(aggs, reduceContextFunction.apply(true))__        ShardSearchFailure[] shardFailures = failures.toArray(ShardSearchFailure.EMPTY_ARRAY)__        _        Arrays.sort(shardFailures, FAILURES_COMPARATOR)__        InternalSearchResponse response = new InternalSearchResponse(mergedSearchHits, reducedAggs, suggest,_            new SearchProfileShardResults(profileResults), topDocsStats.timedOut, topDocsStats.terminatedEarly, numReducePhases)__        long tookInMillis = searchTimeProvider.buildTookInMillis()__        return new SearchResponse(response, null, totalShards, successfulShards, skippedShards, tookInMillis, shardFailures, clusters)__    };returns,the,merged,response,to,be,called,once,all,responses,have,been,added,through,link,add,search,response,so,that,all,responses,are,merged,into,a,single,one;search,response,get,merged,response,clusters,clusters,assert,search,responses,size,1,int,total,shards,0,int,skipped,shards,0,int,successful,shards,0,int,num,reduce,phases,1,list,shard,search,failure,failures,new,array,list,map,string,profile,shard,result,profile,results,new,hash,map,list,internal,aggregations,aggs,new,array,list,map,shard,id,integer,shards,new,tree,map,list,top,docs,top,docs,list,new,array,list,search,responses,size,map,string,list,suggest,suggestion,grouped,suggestions,new,hash,map,boolean,track,total,hits,null,top,docs,stats,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,for,search,response,search,response,search,responses,total,shards,search,response,get,total,shards,skipped,shards,search,response,get,skipped,shards,successful,shards,search,response,get,successful,shards,num,reduce,phases,search,response,get,num,reduce,phases,collections,add,all,failures,search,response,get,shard,failures,profile,results,put,all,search,response,get,profile,results,if,search,response,get,aggregations,null,internal,aggregations,internal,aggs,internal,aggregations,search,response,get,aggregations,aggs,add,internal,aggs,suggest,suggest,search,response,get,suggest,if,suggest,null,for,suggest,suggestion,extends,suggest,suggestion,entry,extends,suggest,suggestion,entry,option,entries,suggest,list,suggest,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,entries,get,name,s,new,array,list,suggestion,list,add,entries,search,hits,search,hits,search,response,get,hits,final,total,hits,total,hits,if,search,hits,get,total,hits,null,total,hits,new,total,hits,0,total,hits,relation,assert,track,total,hits,null,track,total,hits,false,track,total,hits,false,else,total,hits,search,hits,get,total,hits,assert,track,total,hits,null,track,total,hits,track,total,hits,true,top,docs,top,docs,search,hits,to,top,docs,search,hits,total,hits,shards,top,docs,stats,add,new,top,docs,and,max,score,top,docs,search,hits,get,max,score,search,response,is,timed,out,search,response,is,terminated,early,top,docs,list,add,top,docs,set,shard,index,shards,top,docs,list,top,docs,top,docs,merge,top,docs,top,docs,list,size,from,search,hits,merged,search,hits,top,docs,to,search,hits,top,docs,top,docs,stats,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,internal,aggregations,reduced,aggs,internal,aggregations,reduce,aggs,reduce,context,function,apply,true,shard,search,failure,shard,failures,failures,to,array,shard,search,failure,arrays,sort,shard,failures,internal,search,response,response,new,internal,search,response,merged,search,hits,reduced,aggs,suggest,new,search,profile,shard,results,profile,results,top,docs,stats,timed,out,top,docs,stats,terminated,early,num,reduce,phases,long,took,in,millis,search,time,provider,build,took,in,millis,return,new,search,response,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,failures,clusters
SearchResponseMerger -> SearchResponse getMergedResponse(Clusters clusters);1548943934;Returns the merged response. To be called once all responses have been added through {@link #add(SearchResponse)}_so that all responses are merged into a single one.;SearchResponse getMergedResponse(Clusters clusters) {_        _        _        if (searchResponses.size() == 0) {_            SearchHits searchHits = new SearchHits(new SearchHit[0], new TotalHits(0L, TotalHits.Relation.EQUAL_TO), Float.NaN)__            InternalSearchResponse internalSearchResponse = new InternalSearchResponse(searchHits,_                InternalAggregations.EMPTY, null, null, false, null, 0)__            return new SearchResponse(internalSearchResponse, null, 0, 0, 0, searchTimeProvider.buildTookInMillis(),_                ShardSearchFailure.EMPTY_ARRAY, clusters)__        }_        int totalShards = 0__        int skippedShards = 0__        int successfulShards = 0__        _        int numReducePhases = 1__        List<ShardSearchFailure> failures = new ArrayList<>()__        Map<String, ProfileShardResult> profileResults = new HashMap<>()__        List<InternalAggregations> aggs = new ArrayList<>()__        Map<ShardIdAndClusterAlias, Integer> shards = new TreeMap<>()__        List<TopDocs> topDocsList = new ArrayList<>(searchResponses.size())__        Map<String, List<Suggest.Suggestion>> groupedSuggestions = new HashMap<>()__        Boolean trackTotalHits = null___        TopDocsStats topDocsStats = new TopDocsStats(trackTotalHitsUpTo)___        for (SearchResponse searchResponse : searchResponses) {_            totalShards += searchResponse.getTotalShards()__            skippedShards += searchResponse.getSkippedShards()__            successfulShards += searchResponse.getSuccessfulShards()__            numReducePhases += searchResponse.getNumReducePhases()___            Collections.addAll(failures, searchResponse.getShardFailures())___            profileResults.putAll(searchResponse.getProfileResults())___            if (searchResponse.getAggregations() != null) {_                InternalAggregations internalAggs = (InternalAggregations) searchResponse.getAggregations()__                aggs.add(internalAggs)__            }__            Suggest suggest = searchResponse.getSuggest()__            if (suggest != null) {_                for (Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> entries : suggest) {_                    List<Suggest.Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(entries.getName(), s -> new ArrayList<>())__                    suggestionList.add(entries)__                }_            }__            SearchHits searchHits = searchResponse.getHits()___            final TotalHits totalHits__            if (searchHits.getTotalHits() == null) {_                _                totalHits = new TotalHits(0, TotalHits.Relation.EQUAL_TO)__                assert trackTotalHits == null || trackTotalHits == false__                trackTotalHits = false__            } else {_                totalHits = searchHits.getTotalHits()__                assert trackTotalHits == null || trackTotalHits__                trackTotalHits = true__            }_            TopDocs topDocs = searchHitsToTopDocs(searchHits, totalHits, shards)__            topDocsStats.add(new TopDocsAndMaxScore(topDocs, searchHits.getMaxScore()),_                searchResponse.isTimedOut(), searchResponse.isTerminatedEarly())__            topDocsList.add(topDocs)__        }__        _        setShardIndex(shards, topDocsList)__        TopDocs topDocs = mergeTopDocs(topDocsList, size, from)__        SearchHits mergedSearchHits = topDocsToSearchHits(topDocs, topDocsStats)__        Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        InternalAggregations reducedAggs = InternalAggregations.reduce(aggs, reduceContextFunction.apply(true))__        ShardSearchFailure[] shardFailures = failures.toArray(ShardSearchFailure.EMPTY_ARRAY)__        SearchProfileShardResults profileShardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        _        Arrays.sort(shardFailures, FAILURES_COMPARATOR)__        InternalSearchResponse response = new InternalSearchResponse(mergedSearchHits, reducedAggs, suggest, profileShardResults,_            topDocsStats.timedOut, topDocsStats.terminatedEarly, numReducePhases)__        long tookInMillis = searchTimeProvider.buildTookInMillis()__        return new SearchResponse(response, null, totalShards, successfulShards, skippedShards, tookInMillis, shardFailures, clusters)__    };returns,the,merged,response,to,be,called,once,all,responses,have,been,added,through,link,add,search,response,so,that,all,responses,are,merged,into,a,single,one;search,response,get,merged,response,clusters,clusters,if,search,responses,size,0,search,hits,search,hits,new,search,hits,new,search,hit,0,new,total,hits,0l,total,hits,relation,float,na,n,internal,search,response,internal,search,response,new,internal,search,response,search,hits,internal,aggregations,empty,null,null,false,null,0,return,new,search,response,internal,search,response,null,0,0,0,search,time,provider,build,took,in,millis,shard,search,failure,clusters,int,total,shards,0,int,skipped,shards,0,int,successful,shards,0,int,num,reduce,phases,1,list,shard,search,failure,failures,new,array,list,map,string,profile,shard,result,profile,results,new,hash,map,list,internal,aggregations,aggs,new,array,list,map,shard,id,and,cluster,alias,integer,shards,new,tree,map,list,top,docs,top,docs,list,new,array,list,search,responses,size,map,string,list,suggest,suggestion,grouped,suggestions,new,hash,map,boolean,track,total,hits,null,top,docs,stats,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,for,search,response,search,response,search,responses,total,shards,search,response,get,total,shards,skipped,shards,search,response,get,skipped,shards,successful,shards,search,response,get,successful,shards,num,reduce,phases,search,response,get,num,reduce,phases,collections,add,all,failures,search,response,get,shard,failures,profile,results,put,all,search,response,get,profile,results,if,search,response,get,aggregations,null,internal,aggregations,internal,aggs,internal,aggregations,search,response,get,aggregations,aggs,add,internal,aggs,suggest,suggest,search,response,get,suggest,if,suggest,null,for,suggest,suggestion,extends,suggest,suggestion,entry,extends,suggest,suggestion,entry,option,entries,suggest,list,suggest,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,entries,get,name,s,new,array,list,suggestion,list,add,entries,search,hits,search,hits,search,response,get,hits,final,total,hits,total,hits,if,search,hits,get,total,hits,null,total,hits,new,total,hits,0,total,hits,relation,assert,track,total,hits,null,track,total,hits,false,track,total,hits,false,else,total,hits,search,hits,get,total,hits,assert,track,total,hits,null,track,total,hits,track,total,hits,true,top,docs,top,docs,search,hits,to,top,docs,search,hits,total,hits,shards,top,docs,stats,add,new,top,docs,and,max,score,top,docs,search,hits,get,max,score,search,response,is,timed,out,search,response,is,terminated,early,top,docs,list,add,top,docs,set,shard,index,shards,top,docs,list,top,docs,top,docs,merge,top,docs,top,docs,list,size,from,search,hits,merged,search,hits,top,docs,to,search,hits,top,docs,top,docs,stats,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,internal,aggregations,reduced,aggs,internal,aggregations,reduce,aggs,reduce,context,function,apply,true,shard,search,failure,shard,failures,failures,to,array,shard,search,failure,search,profile,shard,results,profile,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,arrays,sort,shard,failures,internal,search,response,response,new,internal,search,response,merged,search,hits,reduced,aggs,suggest,profile,shard,results,top,docs,stats,timed,out,top,docs,stats,terminated,early,num,reduce,phases,long,took,in,millis,search,time,provider,build,took,in,millis,return,new,search,response,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,failures,clusters
SearchResponseMerger -> SearchResponse getMergedResponse(Clusters clusters);1549019502;Returns the merged response. To be called once all responses have been added through {@link #add(SearchResponse)}_so that all responses are merged into a single one.;SearchResponse getMergedResponse(Clusters clusters) {_        _        _        if (searchResponses.size() == 0) {_            return SearchResponse.empty(searchTimeProvider::buildTookInMillis, clusters)__        }_        int totalShards = 0__        int skippedShards = 0__        int successfulShards = 0__        _        int numReducePhases = 1__        List<ShardSearchFailure> failures = new ArrayList<>()__        Map<String, ProfileShardResult> profileResults = new HashMap<>()__        List<InternalAggregations> aggs = new ArrayList<>()__        Map<ShardIdAndClusterAlias, Integer> shards = new TreeMap<>()__        List<TopDocs> topDocsList = new ArrayList<>(searchResponses.size())__        Map<String, List<Suggest.Suggestion>> groupedSuggestions = new HashMap<>()__        Boolean trackTotalHits = null___        TopDocsStats topDocsStats = new TopDocsStats(trackTotalHitsUpTo)___        for (SearchResponse searchResponse : searchResponses) {_            totalShards += searchResponse.getTotalShards()__            skippedShards += searchResponse.getSkippedShards()__            successfulShards += searchResponse.getSuccessfulShards()__            numReducePhases += searchResponse.getNumReducePhases()___            Collections.addAll(failures, searchResponse.getShardFailures())___            profileResults.putAll(searchResponse.getProfileResults())___            if (searchResponse.getAggregations() != null) {_                InternalAggregations internalAggs = (InternalAggregations) searchResponse.getAggregations()__                aggs.add(internalAggs)__            }__            Suggest suggest = searchResponse.getSuggest()__            if (suggest != null) {_                for (Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> entries : suggest) {_                    List<Suggest.Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(entries.getName(), s -> new ArrayList<>())__                    suggestionList.add(entries)__                }_            }__            SearchHits searchHits = searchResponse.getHits()___            final TotalHits totalHits__            if (searchHits.getTotalHits() == null) {_                _                totalHits = new TotalHits(0, TotalHits.Relation.EQUAL_TO)__                assert trackTotalHits == null || trackTotalHits == false__                trackTotalHits = false__            } else {_                totalHits = searchHits.getTotalHits()__                assert trackTotalHits == null || trackTotalHits__                trackTotalHits = true__            }_            TopDocs topDocs = searchHitsToTopDocs(searchHits, totalHits, shards)__            topDocsStats.add(new TopDocsAndMaxScore(topDocs, searchHits.getMaxScore()),_                searchResponse.isTimedOut(), searchResponse.isTerminatedEarly())__            topDocsList.add(topDocs)__        }__        _        setShardIndex(shards, topDocsList)__        TopDocs topDocs = mergeTopDocs(topDocsList, size, from)__        SearchHits mergedSearchHits = topDocsToSearchHits(topDocs, topDocsStats)__        Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        InternalAggregations reducedAggs = InternalAggregations.reduce(aggs, reduceContextFunction.apply(true))__        ShardSearchFailure[] shardFailures = failures.toArray(ShardSearchFailure.EMPTY_ARRAY)__        SearchProfileShardResults profileShardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        _        Arrays.sort(shardFailures, FAILURES_COMPARATOR)__        InternalSearchResponse response = new InternalSearchResponse(mergedSearchHits, reducedAggs, suggest, profileShardResults,_            topDocsStats.timedOut, topDocsStats.terminatedEarly, numReducePhases)__        long tookInMillis = searchTimeProvider.buildTookInMillis()__        return new SearchResponse(response, null, totalShards, successfulShards, skippedShards, tookInMillis, shardFailures, clusters)__    };returns,the,merged,response,to,be,called,once,all,responses,have,been,added,through,link,add,search,response,so,that,all,responses,are,merged,into,a,single,one;search,response,get,merged,response,clusters,clusters,if,search,responses,size,0,return,search,response,empty,search,time,provider,build,took,in,millis,clusters,int,total,shards,0,int,skipped,shards,0,int,successful,shards,0,int,num,reduce,phases,1,list,shard,search,failure,failures,new,array,list,map,string,profile,shard,result,profile,results,new,hash,map,list,internal,aggregations,aggs,new,array,list,map,shard,id,and,cluster,alias,integer,shards,new,tree,map,list,top,docs,top,docs,list,new,array,list,search,responses,size,map,string,list,suggest,suggestion,grouped,suggestions,new,hash,map,boolean,track,total,hits,null,top,docs,stats,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,for,search,response,search,response,search,responses,total,shards,search,response,get,total,shards,skipped,shards,search,response,get,skipped,shards,successful,shards,search,response,get,successful,shards,num,reduce,phases,search,response,get,num,reduce,phases,collections,add,all,failures,search,response,get,shard,failures,profile,results,put,all,search,response,get,profile,results,if,search,response,get,aggregations,null,internal,aggregations,internal,aggs,internal,aggregations,search,response,get,aggregations,aggs,add,internal,aggs,suggest,suggest,search,response,get,suggest,if,suggest,null,for,suggest,suggestion,extends,suggest,suggestion,entry,extends,suggest,suggestion,entry,option,entries,suggest,list,suggest,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,entries,get,name,s,new,array,list,suggestion,list,add,entries,search,hits,search,hits,search,response,get,hits,final,total,hits,total,hits,if,search,hits,get,total,hits,null,total,hits,new,total,hits,0,total,hits,relation,assert,track,total,hits,null,track,total,hits,false,track,total,hits,false,else,total,hits,search,hits,get,total,hits,assert,track,total,hits,null,track,total,hits,track,total,hits,true,top,docs,top,docs,search,hits,to,top,docs,search,hits,total,hits,shards,top,docs,stats,add,new,top,docs,and,max,score,top,docs,search,hits,get,max,score,search,response,is,timed,out,search,response,is,terminated,early,top,docs,list,add,top,docs,set,shard,index,shards,top,docs,list,top,docs,top,docs,merge,top,docs,top,docs,list,size,from,search,hits,merged,search,hits,top,docs,to,search,hits,top,docs,top,docs,stats,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,internal,aggregations,reduced,aggs,internal,aggregations,reduce,aggs,reduce,context,function,apply,true,shard,search,failure,shard,failures,failures,to,array,shard,search,failure,search,profile,shard,results,profile,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,arrays,sort,shard,failures,internal,search,response,response,new,internal,search,response,merged,search,hits,reduced,aggs,suggest,profile,shard,results,top,docs,stats,timed,out,top,docs,stats,terminated,early,num,reduce,phases,long,took,in,millis,search,time,provider,build,took,in,millis,return,new,search,response,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,failures,clusters
SearchResponseMerger -> SearchResponse getMergedResponse(Clusters clusters);1549897254;Returns the merged response. To be called once all responses have been added through {@link #add(SearchResponse)}_so that all responses are merged into a single one.;SearchResponse getMergedResponse(Clusters clusters) {_        _        _        if (searchResponses.size() == 0) {_            return SearchResponse.empty(searchTimeProvider::buildTookInMillis, clusters)__        }_        int totalShards = 0__        int skippedShards = 0__        int successfulShards = 0__        _        int numReducePhases = 1__        List<ShardSearchFailure> failures = new ArrayList<>()__        Map<String, ProfileShardResult> profileResults = new HashMap<>()__        List<InternalAggregations> aggs = new ArrayList<>()__        Map<ShardIdAndClusterAlias, Integer> shards = new TreeMap<>()__        List<TopDocs> topDocsList = new ArrayList<>(searchResponses.size())__        Map<String, List<Suggest.Suggestion>> groupedSuggestions = new HashMap<>()__        Boolean trackTotalHits = null___        TopDocsStats topDocsStats = new TopDocsStats(trackTotalHitsUpTo)___        for (SearchResponse searchResponse : searchResponses) {_            totalShards += searchResponse.getTotalShards()__            skippedShards += searchResponse.getSkippedShards()__            successfulShards += searchResponse.getSuccessfulShards()__            numReducePhases += searchResponse.getNumReducePhases()___            Collections.addAll(failures, searchResponse.getShardFailures())___            profileResults.putAll(searchResponse.getProfileResults())___            if (searchResponse.getAggregations() != null) {_                InternalAggregations internalAggs = (InternalAggregations) searchResponse.getAggregations()__                aggs.add(internalAggs)__            }__            Suggest suggest = searchResponse.getSuggest()__            if (suggest != null) {_                for (Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> entries : suggest) {_                    List<Suggest.Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(entries.getName(), s -> new ArrayList<>())__                    suggestionList.add(entries)__                }_            }__            SearchHits searchHits = searchResponse.getHits()___            final TotalHits totalHits__            if (searchHits.getTotalHits() == null) {_                _                totalHits = new TotalHits(0, TotalHits.Relation.EQUAL_TO)__                assert trackTotalHits == null || trackTotalHits == false__                trackTotalHits = false__            } else {_                totalHits = searchHits.getTotalHits()__                assert trackTotalHits == null || trackTotalHits__                trackTotalHits = true__            }_            TopDocs topDocs = searchHitsToTopDocs(searchHits, totalHits, shards)__            topDocsStats.add(new TopDocsAndMaxScore(topDocs, searchHits.getMaxScore()),_                searchResponse.isTimedOut(), searchResponse.isTerminatedEarly())__            topDocsList.add(topDocs)__        }__        _        setShardIndex(shards, topDocsList)__        TopDocs topDocs = mergeTopDocs(topDocsList, size, from)__        SearchHits mergedSearchHits = topDocsToSearchHits(topDocs, topDocsStats)__        Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        InternalAggregations reducedAggs = InternalAggregations.reduce(aggs, reduceContextFunction.apply(true))__        ShardSearchFailure[] shardFailures = failures.toArray(ShardSearchFailure.EMPTY_ARRAY)__        SearchProfileShardResults profileShardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        _        Arrays.sort(shardFailures, FAILURES_COMPARATOR)__        InternalSearchResponse response = new InternalSearchResponse(mergedSearchHits, reducedAggs, suggest, profileShardResults,_            topDocsStats.timedOut, topDocsStats.terminatedEarly, numReducePhases)__        long tookInMillis = searchTimeProvider.buildTookInMillis()__        return new SearchResponse(response, null, totalShards, successfulShards, skippedShards, tookInMillis, shardFailures, clusters)__    };returns,the,merged,response,to,be,called,once,all,responses,have,been,added,through,link,add,search,response,so,that,all,responses,are,merged,into,a,single,one;search,response,get,merged,response,clusters,clusters,if,search,responses,size,0,return,search,response,empty,search,time,provider,build,took,in,millis,clusters,int,total,shards,0,int,skipped,shards,0,int,successful,shards,0,int,num,reduce,phases,1,list,shard,search,failure,failures,new,array,list,map,string,profile,shard,result,profile,results,new,hash,map,list,internal,aggregations,aggs,new,array,list,map,shard,id,and,cluster,alias,integer,shards,new,tree,map,list,top,docs,top,docs,list,new,array,list,search,responses,size,map,string,list,suggest,suggestion,grouped,suggestions,new,hash,map,boolean,track,total,hits,null,top,docs,stats,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,for,search,response,search,response,search,responses,total,shards,search,response,get,total,shards,skipped,shards,search,response,get,skipped,shards,successful,shards,search,response,get,successful,shards,num,reduce,phases,search,response,get,num,reduce,phases,collections,add,all,failures,search,response,get,shard,failures,profile,results,put,all,search,response,get,profile,results,if,search,response,get,aggregations,null,internal,aggregations,internal,aggs,internal,aggregations,search,response,get,aggregations,aggs,add,internal,aggs,suggest,suggest,search,response,get,suggest,if,suggest,null,for,suggest,suggestion,extends,suggest,suggestion,entry,extends,suggest,suggestion,entry,option,entries,suggest,list,suggest,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,entries,get,name,s,new,array,list,suggestion,list,add,entries,search,hits,search,hits,search,response,get,hits,final,total,hits,total,hits,if,search,hits,get,total,hits,null,total,hits,new,total,hits,0,total,hits,relation,assert,track,total,hits,null,track,total,hits,false,track,total,hits,false,else,total,hits,search,hits,get,total,hits,assert,track,total,hits,null,track,total,hits,track,total,hits,true,top,docs,top,docs,search,hits,to,top,docs,search,hits,total,hits,shards,top,docs,stats,add,new,top,docs,and,max,score,top,docs,search,hits,get,max,score,search,response,is,timed,out,search,response,is,terminated,early,top,docs,list,add,top,docs,set,shard,index,shards,top,docs,list,top,docs,top,docs,merge,top,docs,top,docs,list,size,from,search,hits,merged,search,hits,top,docs,to,search,hits,top,docs,top,docs,stats,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,internal,aggregations,reduced,aggs,internal,aggregations,reduce,aggs,reduce,context,function,apply,true,shard,search,failure,shard,failures,failures,to,array,shard,search,failure,search,profile,shard,results,profile,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,arrays,sort,shard,failures,internal,search,response,response,new,internal,search,response,merged,search,hits,reduced,aggs,suggest,profile,shard,results,top,docs,stats,timed,out,top,docs,stats,terminated,early,num,reduce,phases,long,took,in,millis,search,time,provider,build,took,in,millis,return,new,search,response,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,failures,clusters
SearchResponseMerger -> SearchResponse getMergedResponse(Clusters clusters);1550234695;Returns the merged response. To be called once all responses have been added through {@link #add(SearchResponse)}_so that all responses are merged into a single one.;SearchResponse getMergedResponse(Clusters clusters) {_        _        _        if (searchResponses.size() == 0) {_            return SearchResponse.empty(searchTimeProvider::buildTookInMillis, clusters)__        }_        int totalShards = 0__        int skippedShards = 0__        int successfulShards = 0__        _        int numReducePhases = 1__        List<ShardSearchFailure> failures = new ArrayList<>()__        Map<String, ProfileShardResult> profileResults = new HashMap<>()__        List<InternalAggregations> aggs = new ArrayList<>()__        Map<ShardIdAndClusterAlias, Integer> shards = new TreeMap<>()__        List<TopDocs> topDocsList = new ArrayList<>(searchResponses.size())__        Map<String, List<Suggest.Suggestion>> groupedSuggestions = new HashMap<>()__        Boolean trackTotalHits = null___        TopDocsStats topDocsStats = new TopDocsStats(trackTotalHitsUpTo)___        for (SearchResponse searchResponse : searchResponses) {_            totalShards += searchResponse.getTotalShards()__            skippedShards += searchResponse.getSkippedShards()__            successfulShards += searchResponse.getSuccessfulShards()__            numReducePhases += searchResponse.getNumReducePhases()___            Collections.addAll(failures, searchResponse.getShardFailures())___            profileResults.putAll(searchResponse.getProfileResults())___            if (searchResponse.getAggregations() != null) {_                InternalAggregations internalAggs = (InternalAggregations) searchResponse.getAggregations()__                aggs.add(internalAggs)__            }__            Suggest suggest = searchResponse.getSuggest()__            if (suggest != null) {_                for (Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> entries : suggest) {_                    List<Suggest.Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(entries.getName(), s -> new ArrayList<>())__                    suggestionList.add(entries)__                }_            }__            SearchHits searchHits = searchResponse.getHits()___            final TotalHits totalHits__            if (searchHits.getTotalHits() == null) {_                _                totalHits = new TotalHits(0, TotalHits.Relation.EQUAL_TO)__                assert trackTotalHits == null || trackTotalHits == false__                trackTotalHits = false__            } else {_                totalHits = searchHits.getTotalHits()__                assert trackTotalHits == null || trackTotalHits__                trackTotalHits = true__            }_            TopDocs topDocs = searchHitsToTopDocs(searchHits, totalHits, shards)__            topDocsStats.add(new TopDocsAndMaxScore(topDocs, searchHits.getMaxScore()),_                searchResponse.isTimedOut(), searchResponse.isTerminatedEarly())__            topDocsList.add(topDocs)__        }__        _        setShardIndex(shards, topDocsList)__        TopDocs topDocs = mergeTopDocs(topDocsList, size, from)__        SearchHits mergedSearchHits = topDocsToSearchHits(topDocs, topDocsStats)__        Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        InternalAggregations reducedAggs = InternalAggregations.reduce(aggs, reduceContextFunction.apply(true))__        ShardSearchFailure[] shardFailures = failures.toArray(ShardSearchFailure.EMPTY_ARRAY)__        SearchProfileShardResults profileShardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        _        Arrays.sort(shardFailures, FAILURES_COMPARATOR)__        InternalSearchResponse response = new InternalSearchResponse(mergedSearchHits, reducedAggs, suggest, profileShardResults,_            topDocsStats.timedOut, topDocsStats.terminatedEarly, numReducePhases)__        long tookInMillis = searchTimeProvider.buildTookInMillis()__        return new SearchResponse(response, null, totalShards, successfulShards, skippedShards, tookInMillis, shardFailures, clusters)__    };returns,the,merged,response,to,be,called,once,all,responses,have,been,added,through,link,add,search,response,so,that,all,responses,are,merged,into,a,single,one;search,response,get,merged,response,clusters,clusters,if,search,responses,size,0,return,search,response,empty,search,time,provider,build,took,in,millis,clusters,int,total,shards,0,int,skipped,shards,0,int,successful,shards,0,int,num,reduce,phases,1,list,shard,search,failure,failures,new,array,list,map,string,profile,shard,result,profile,results,new,hash,map,list,internal,aggregations,aggs,new,array,list,map,shard,id,and,cluster,alias,integer,shards,new,tree,map,list,top,docs,top,docs,list,new,array,list,search,responses,size,map,string,list,suggest,suggestion,grouped,suggestions,new,hash,map,boolean,track,total,hits,null,top,docs,stats,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,for,search,response,search,response,search,responses,total,shards,search,response,get,total,shards,skipped,shards,search,response,get,skipped,shards,successful,shards,search,response,get,successful,shards,num,reduce,phases,search,response,get,num,reduce,phases,collections,add,all,failures,search,response,get,shard,failures,profile,results,put,all,search,response,get,profile,results,if,search,response,get,aggregations,null,internal,aggregations,internal,aggs,internal,aggregations,search,response,get,aggregations,aggs,add,internal,aggs,suggest,suggest,search,response,get,suggest,if,suggest,null,for,suggest,suggestion,extends,suggest,suggestion,entry,extends,suggest,suggestion,entry,option,entries,suggest,list,suggest,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,entries,get,name,s,new,array,list,suggestion,list,add,entries,search,hits,search,hits,search,response,get,hits,final,total,hits,total,hits,if,search,hits,get,total,hits,null,total,hits,new,total,hits,0,total,hits,relation,assert,track,total,hits,null,track,total,hits,false,track,total,hits,false,else,total,hits,search,hits,get,total,hits,assert,track,total,hits,null,track,total,hits,track,total,hits,true,top,docs,top,docs,search,hits,to,top,docs,search,hits,total,hits,shards,top,docs,stats,add,new,top,docs,and,max,score,top,docs,search,hits,get,max,score,search,response,is,timed,out,search,response,is,terminated,early,top,docs,list,add,top,docs,set,shard,index,shards,top,docs,list,top,docs,top,docs,merge,top,docs,top,docs,list,size,from,search,hits,merged,search,hits,top,docs,to,search,hits,top,docs,top,docs,stats,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,internal,aggregations,reduced,aggs,internal,aggregations,reduce,aggs,reduce,context,function,apply,true,shard,search,failure,shard,failures,failures,to,array,shard,search,failure,search,profile,shard,results,profile,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,arrays,sort,shard,failures,internal,search,response,response,new,internal,search,response,merged,search,hits,reduced,aggs,suggest,profile,shard,results,top,docs,stats,timed,out,top,docs,stats,terminated,early,num,reduce,phases,long,took,in,millis,search,time,provider,build,took,in,millis,return,new,search,response,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,failures,clusters
