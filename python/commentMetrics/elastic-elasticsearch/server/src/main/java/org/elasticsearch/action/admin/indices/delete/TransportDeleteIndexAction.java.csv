commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;protected;3;5;;@Override protected void doExecute(Task task, DeleteIndexRequest request, ActionListener<AcknowledgedResponse> listener) {     destructiveOperations.failDestructive(request.indices()).     super.doExecute(task, request, listener). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(DeleteIndexRequest request, ClusterState state) {     return state.blocks().indicesAllowReleaseResources(indexNameExpressionResolver.concreteIndexNames(state, request)). }
false;public;1;4;;@Override public void onResponse(ClusterStateUpdateResponse response) {     listener.onResponse(new AcknowledgedResponse(response.isAcknowledged())). }
false;public;1;5;;@Override public void onFailure(Exception t) {     logger.debug(() -> new ParameterizedMessage("failed to delete indices [{}]", concreteIndices), t).     listener.onFailure(t). }
false;protected;3;27;;@Override protected void masterOperation(final DeleteIndexRequest request, final ClusterState state, final ActionListener<AcknowledgedResponse> listener) {     final Set<Index> concreteIndices = new HashSet<>(Arrays.asList(indexNameExpressionResolver.concreteIndices(state, request))).     if (concreteIndices.isEmpty()) {         listener.onResponse(new AcknowledgedResponse(true)).         return.     }     DeleteIndexClusterStateUpdateRequest deleteRequest = new DeleteIndexClusterStateUpdateRequest().ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout()).indices(concreteIndices.toArray(new Index[concreteIndices.size()])).     deleteIndexService.deleteIndices(deleteRequest, new ActionListener<ClusterStateUpdateResponse>() {          @Override         public void onResponse(ClusterStateUpdateResponse response) {             listener.onResponse(new AcknowledgedResponse(response.isAcknowledged())).         }          @Override         public void onFailure(Exception t) {             logger.debug(() -> new ParameterizedMessage("failed to delete indices [{}]", concreteIndices), t).             listener.onFailure(t).         }     }). }
