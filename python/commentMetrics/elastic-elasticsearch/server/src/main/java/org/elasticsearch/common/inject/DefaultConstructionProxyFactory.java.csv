commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public T newInstance(Object... arguments) throws InvocationTargetException {     try {         return constructor.newInstance(arguments).     } catch (InstantiationException e) {         // shouldn't happen, we know this is a concrete type         throw new AssertionError(e).     } catch (IllegalAccessException e) {         // a security manager is blocking us, we're hosed         throw new AssertionError("Wrong access modifiers on " + constructor, e).     } }
false;public;0;4;;@Override public InjectionPoint getInjectionPoint() {     return injectionPoint. }
false;public;0;4;;@Override public Constructor<T> getConstructor() {     return constructor. }
false;public;0;29;;@Override public ConstructionProxy<T> create() {     // the injection point is for a constructor of T     @SuppressWarnings("unchecked")     final Constructor<T> constructor = (Constructor<T>) injectionPoint.getMember().     return new ConstructionProxy<T>() {          @Override         public T newInstance(Object... arguments) throws InvocationTargetException {             try {                 return constructor.newInstance(arguments).             } catch (InstantiationException e) {                 // shouldn't happen, we know this is a concrete type                 throw new AssertionError(e).             } catch (IllegalAccessException e) {                 // a security manager is blocking us, we're hosed                 throw new AssertionError("Wrong access modifiers on " + constructor, e).             }         }          @Override         public InjectionPoint getInjectionPoint() {             return injectionPoint.         }          @Override         public Constructor<T> getConstructor() {             return constructor.         }     }. }
