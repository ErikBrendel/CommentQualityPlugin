commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public float combine(float primary, float secondary) {     return (primary + secondary) / 2. }
false;public;0;4;;@Override public String toString() {     return "avg". }
false;public;2;4;;@Override public float combine(float primary, float secondary) {     return Math.max(primary, secondary). }
false;public;0;4;;@Override public String toString() {     return "max". }
false;public;2;4;;@Override public float combine(float primary, float secondary) {     return Math.min(primary, secondary). }
false;public;0;4;;@Override public String toString() {     return "min". }
false;public;2;4;;@Override public float combine(float primary, float secondary) {     return primary + secondary. }
false;public;0;4;;@Override public String toString() {     return "sum". }
false;public;2;4;;@Override public float combine(float primary, float secondary) {     return primary * secondary. }
false;public;0;4;;@Override public String toString() {     return "product". }
false;public,abstract;2;1;;public abstract float combine(float primary, float secondary).
false;public,static;1;3;;public static QueryRescoreMode readFromStream(StreamInput in) throws IOException {     return in.readEnum(QueryRescoreMode.class). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(this). }
false;public,static;1;8;;public static QueryRescoreMode fromString(String scoreMode) {     for (QueryRescoreMode mode : values()) {         if (scoreMode.toLowerCase(Locale.ROOT).equals(mode.name().toLowerCase(Locale.ROOT))) {             return mode.         }     }     throw new IllegalArgumentException("illegal score_mode [" + scoreMode + "]"). }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
