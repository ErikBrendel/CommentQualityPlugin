commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public RolloverRequestBuilder setAlias(String alias) {     this.request.setAlias(alias).     return this. }
false;public;1;4;;public RolloverRequestBuilder setNewIndexName(String newIndexName) {     this.request.setNewIndexName(newIndexName).     return this. }
false;public;1;4;;public RolloverRequestBuilder addMaxIndexAgeCondition(TimeValue age) {     this.request.addMaxIndexAgeCondition(age).     return this. }
false;public;1;4;;public RolloverRequestBuilder addMaxIndexDocsCondition(long docs) {     this.request.addMaxIndexDocsCondition(docs).     return this. }
false;public;1;4;;public RolloverRequestBuilder addMaxIndexSizeCondition(ByteSizeValue size) {     this.request.addMaxIndexSizeCondition(size).     return this. }
false;public;1;4;;public RolloverRequestBuilder dryRun(boolean dryRun) {     this.request.dryRun(dryRun).     return this. }
false;public;1;4;;public RolloverRequestBuilder settings(Settings settings) {     this.request.getCreateIndexRequest().settings(settings).     return this. }
false;public;1;4;;public RolloverRequestBuilder alias(Alias alias) {     this.request.getCreateIndexRequest().alias(alias).     return this. }
false;public;2;4;;public RolloverRequestBuilder mapping(String type, Object... source) {     this.request.getCreateIndexRequest().mapping(type, source).     return this. }
false;public;3;4;;public RolloverRequestBuilder mapping(String type, String source, XContentType xContentType) {     this.request.getCreateIndexRequest().mapping(type, source, xContentType).     return this. }
true;public;1;4;/**  * Sets the number of shard copies that should be active for creation of the  * new rollover index to return. Defaults to {@link ActiveShardCount#DEFAULT}, which will  * wait for one shard copy (the primary) to become active. Set this value to  * {@link ActiveShardCount#ALL} to wait for all shards (primary and all replicas) to be active  * before returning. Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any  * non-negative integer, up to the number of copies per shard (number of replicas + 1),  * to wait for the desired amount of shard copies to become active before returning.  * Index creation will only wait up until the timeout value for the number of shard copies  * to be active before returning.  Check {@link RolloverResponse#isShardsAcknowledged()} to  * determine if the requisite shard copies were all started before returning or timing out.  *  * @param waitForActiveShards number of active shard copies to wait on  */ ;/**  * Sets the number of shard copies that should be active for creation of the  * new rollover index to return. Defaults to {@link ActiveShardCount#DEFAULT}, which will  * wait for one shard copy (the primary) to become active. Set this value to  * {@link ActiveShardCount#ALL} to wait for all shards (primary and all replicas) to be active  * before returning. Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any  * non-negative integer, up to the number of copies per shard (number of replicas + 1),  * to wait for the desired amount of shard copies to become active before returning.  * Index creation will only wait up until the timeout value for the number of shard copies  * to be active before returning.  Check {@link RolloverResponse#isShardsAcknowledged()} to  * determine if the requisite shard copies were all started before returning or timing out.  *  * @param waitForActiveShards number of active shard copies to wait on  */ public RolloverRequestBuilder waitForActiveShards(ActiveShardCount waitForActiveShards) {     this.request.getCreateIndexRequest().waitForActiveShards(waitForActiveShards).     return this. }
true;public;1;3;/**  * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ ;/**  * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ public RolloverRequestBuilder waitForActiveShards(final int waitForActiveShards) {     return waitForActiveShards(ActiveShardCount.from(waitForActiveShards)). }
