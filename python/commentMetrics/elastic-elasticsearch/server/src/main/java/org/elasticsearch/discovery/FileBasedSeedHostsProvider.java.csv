commented;modifiers;parameterAmount;loc;comment;code
false;private;0;15;;private List<String> getHostsList() {     if (Files.exists(unicastHostsFilePath)) {         try (Stream<String> lines = Files.lines(unicastHostsFilePath)) {             return // lines starting with `#` are comments             lines.filter(line -> line.startsWith("#") == false).collect(Collectors.toList()).         } catch (IOException e) {             logger.warn(() -> new ParameterizedMessage("failed to read file [{}]", unicastHostsFilePath), e).             return Collections.emptyList().         }     }     logger.warn("expected, but did not find, a dynamic hosts list at [{}]", unicastHostsFilePath).     return Collections.emptyList(). }
false;public;1;6;;@Override public List<TransportAddress> getSeedAddresses(HostsResolver hostsResolver) {     final List<TransportAddress> transportAddresses = hostsResolver.resolveHosts(getHostsList(), 1).     logger.debug("seed addresses: {}", transportAddresses).     return transportAddresses. }
