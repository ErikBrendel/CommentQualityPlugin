commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Publish all the changes to the cluster from the master (can be called just by the master). The publish  * process should apply this state to the master as well!  *  * The publishListener allows to wait for the publication to complete, which can be either successful completion, timing out or failing.  * The method is guaranteed to pass back a {@link FailedToCommitClusterStateException} to the publishListener if the change is not  * committed and should be rejected. Any other exception signals that something bad happened but the change is committed.  *  * The {@link AckListener} allows to keep track of the ack received from nodes, and verify whether  * they updated their own cluster state or not.  */ ;/**  * Publish all the changes to the cluster from the master (can be called just by the master). The publish  * process should apply this state to the master as well!  *  * The publishListener allows to wait for the publication to complete, which can be either successful completion, timing out or failing.  * The method is guaranteed to pass back a {@link FailedToCommitClusterStateException} to the publishListener if the change is not  * committed and should be rejected. Any other exception signals that something bad happened but the change is committed.  *  * The {@link AckListener} allows to keep track of the ack received from nodes, and verify whether  * they updated their own cluster state or not.  */ void publish(ClusterChangedEvent clusterChangedEvent, ActionListener<Void> publishListener, AckListener ackListener).
true;;1;1;/**  * Should be called when the cluster coordination layer has committed the cluster state (i.e. even if this publication fails,  * it is guaranteed to appear in future publications).  * @param commitTime the time it took to commit the cluster state  */ ;/**  * Should be called when the cluster coordination layer has committed the cluster state (i.e. even if this publication fails,  * it is guaranteed to appear in future publications).  * @param commitTime the time it took to commit the cluster state  */ void onCommit(TimeValue commitTime).
true;;2;1;/**  * Should be called whenever the cluster coordination layer receives confirmation from a node that it has successfully applied  * the cluster state. In case of failures, an exception should be provided as parameter.  * @param node the node  * @param e the optional exception  */ ;/**  * Should be called whenever the cluster coordination layer receives confirmation from a node that it has successfully applied  * the cluster state. In case of failures, an exception should be provided as parameter.  * @param node the node  * @param e the optional exception  */ void onNodeAck(DiscoveryNode node, @Nullable Exception e).
