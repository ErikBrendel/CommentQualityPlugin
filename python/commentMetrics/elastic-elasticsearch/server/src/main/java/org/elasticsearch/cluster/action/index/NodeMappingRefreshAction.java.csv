commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;public void nodeMappingRefresh(final DiscoveryNode masterNode, final NodeMappingRefreshRequest request) {     if (masterNode == null) {         logger.warn("can't send mapping refresh for [{}], no master known.", request.index()).         return.     }     transportService.sendRequest(masterNode, ACTION_NAME, request, EmptyTransportResponseHandler.INSTANCE_SAME). }
false;public;3;5;;@Override public void messageReceived(NodeMappingRefreshRequest request, TransportChannel channel, Task task) throws Exception {     metaDataMappingService.refreshMapping(request.index(), request.indexUUID()).     channel.sendResponse(TransportResponse.Empty.INSTANCE). }
false;public;0;4;;@Override public String[] indices() {     return new String[] { index }. }
false;public;0;4;;@Override public IndicesOptions indicesOptions() {     return IndicesOptions.strictSingleIndexNoExpandForbidClosed(). }
false;public;0;3;;public String index() {     return index. }
false;public;0;3;;public String indexUUID() {     return indexUUID. }
false;public;0;3;;public String nodeId() {     return nodeId. }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(index).     out.writeString(nodeId).     out.writeString(indexUUID). }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     index = in.readString().     nodeId = in.readString().     indexUUID = in.readString(). }
