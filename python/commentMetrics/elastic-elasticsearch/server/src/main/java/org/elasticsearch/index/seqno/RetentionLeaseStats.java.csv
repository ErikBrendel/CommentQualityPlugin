commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The underlying retention lease collection backing this stats object.  *  * @return the retention lease collection  */ ;/**  * The underlying retention lease collection backing this stats object.  *  * @return the retention lease collection  */ public RetentionLeases retentionLeases() {     return retentionLeases. }
true;public;1;4;/**  * Writes a retention lease stats object to a stream in a manner suitable for later reconstruction via  * {@link #RetentionLeaseStats(StreamInput)} (StreamInput)}.  *  * @param out the stream to write the retention lease stats to  * @throws IOException if an I/O exception occurs writing to the stream  */ ;/**  * Writes a retention lease stats object to a stream in a manner suitable for later reconstruction via  * {@link #RetentionLeaseStats(StreamInput)} (StreamInput)}.  *  * @param out the stream to write the retention lease stats to  * @throws IOException if an I/O exception occurs writing to the stream  */ @Override public void writeTo(final StreamOutput out) throws IOException {     retentionLeases.writeTo(out). }
true;public;2;24;/**  * Converts the retention lease stats to {@link org.elasticsearch.common.xcontent.XContent} using the specified builder and pararms.  *  * @param builder the builder  * @param params  the params  * @return the builder that this retention lease collection was converted to {@link org.elasticsearch.common.xcontent.XContent} into  * @throws IOException if an I/O exception occurs writing to the builder  */ ;/**  * Converts the retention lease stats to {@link org.elasticsearch.common.xcontent.XContent} using the specified builder and pararms.  *  * @param builder the builder  * @param params  the params  * @return the builder that this retention lease collection was converted to {@link org.elasticsearch.common.xcontent.XContent} into  * @throws IOException if an I/O exception occurs writing to the builder  */ @Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject("retention_leases").     {         builder.field("primary_term", retentionLeases.primaryTerm()).         builder.field("version", retentionLeases.version()).         builder.startArray("leases").         {             for (final RetentionLease retentionLease : retentionLeases.leases()) {                 builder.startObject().                 {                     builder.field("id", retentionLease.id()).                     builder.field("retaining_seq_no", retentionLease.retainingSequenceNumber()).                     builder.field("timestamp", retentionLease.timestamp()).                     builder.field("source", retentionLease.source()).                 }                 builder.endObject().             }         }         builder.endArray().     }     builder.endObject().     return builder. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     final RetentionLeaseStats that = (RetentionLeaseStats) o.     return Objects.equals(retentionLeases, that.retentionLeases). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(retentionLeases). }
