# id;timestamp;commentText;codeText;commentWords;codeWords
RestGetFieldMappingAction -> private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex);1524684173;Helper method to find out if the only included fieldmapping metadata is typed NULL, which means_that type and index exist, but the field did not;private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex) {_        if (mappingsByIndex.size() != 1) {_            return false__        }__        for (Map<String, Map<String, FieldMappingMetaData>> value : mappingsByIndex.values()) {_            for (Map<String, FieldMappingMetaData> fieldValue : value.values()) {_                for (Map.Entry<String, FieldMappingMetaData> fieldMappingMetaDataEntry : fieldValue.entrySet()) {_                    if (fieldMappingMetaDataEntry.getValue().isNull()) {_                        return true__                    }_                }_            }_        }_        return false__    };helper,method,to,find,out,if,the,only,included,fieldmapping,metadata,is,typed,null,which,means,that,type,and,index,exist,but,the,field,did,not;private,boolean,is,field,mapping,missing,field,map,string,map,string,map,string,field,mapping,meta,data,mappings,by,index,if,mappings,by,index,size,1,return,false,for,map,string,map,string,field,mapping,meta,data,value,mappings,by,index,values,for,map,string,field,mapping,meta,data,field,value,value,values,for,map,entry,string,field,mapping,meta,data,field,mapping,meta,data,entry,field,value,entry,set,if,field,mapping,meta,data,entry,get,value,is,null,return,true,return,false
RestGetFieldMappingAction -> private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex);1529916084;Helper method to find out if the only included fieldmapping metadata is typed NULL, which means_that type and index exist, but the field did not;private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex) {_        if (mappingsByIndex.size() != 1) {_            return false__        }__        for (Map<String, Map<String, FieldMappingMetaData>> value : mappingsByIndex.values()) {_            for (Map<String, FieldMappingMetaData> fieldValue : value.values()) {_                for (Map.Entry<String, FieldMappingMetaData> fieldMappingMetaDataEntry : fieldValue.entrySet()) {_                    if (fieldMappingMetaDataEntry.getValue().isNull()) {_                        return true__                    }_                }_            }_        }_        return false__    };helper,method,to,find,out,if,the,only,included,fieldmapping,metadata,is,typed,null,which,means,that,type,and,index,exist,but,the,field,did,not;private,boolean,is,field,mapping,missing,field,map,string,map,string,map,string,field,mapping,meta,data,mappings,by,index,if,mappings,by,index,size,1,return,false,for,map,string,map,string,field,mapping,meta,data,value,mappings,by,index,values,for,map,string,field,mapping,meta,data,field,value,value,values,for,map,entry,string,field,mapping,meta,data,field,mapping,meta,data,entry,field,value,entry,set,if,field,mapping,meta,data,entry,get,value,is,null,return,true,return,false
RestGetFieldMappingAction -> private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex);1547141048;Helper method to find out if the only included fieldmapping metadata is typed NULL, which means_that type and index exist, but the field did not;private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex) {_        if (mappingsByIndex.size() != 1) {_            return false__        }__        for (Map<String, Map<String, FieldMappingMetaData>> value : mappingsByIndex.values()) {_            for (Map<String, FieldMappingMetaData> fieldValue : value.values()) {_                for (Map.Entry<String, FieldMappingMetaData> fieldMappingMetaDataEntry : fieldValue.entrySet()) {_                    if (fieldMappingMetaDataEntry.getValue().isNull()) {_                        return true__                    }_                }_            }_        }_        return false__    };helper,method,to,find,out,if,the,only,included,fieldmapping,metadata,is,typed,null,which,means,that,type,and,index,exist,but,the,field,did,not;private,boolean,is,field,mapping,missing,field,map,string,map,string,map,string,field,mapping,meta,data,mappings,by,index,if,mappings,by,index,size,1,return,false,for,map,string,map,string,field,mapping,meta,data,value,mappings,by,index,values,for,map,string,field,mapping,meta,data,field,value,value,values,for,map,entry,string,field,mapping,meta,data,field,mapping,meta,data,entry,field,value,entry,set,if,field,mapping,meta,data,entry,get,value,is,null,return,true,return,false
RestGetFieldMappingAction -> private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex);1547500081;Helper method to find out if the only included fieldmapping metadata is typed NULL, which means_that type and index exist, but the field did not;private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex) {_        if (mappingsByIndex.size() != 1) {_            return false__        }__        for (Map<String, Map<String, FieldMappingMetaData>> value : mappingsByIndex.values()) {_            for (Map<String, FieldMappingMetaData> fieldValue : value.values()) {_                for (Map.Entry<String, FieldMappingMetaData> fieldMappingMetaDataEntry : fieldValue.entrySet()) {_                    if (fieldMappingMetaDataEntry.getValue().isNull()) {_                        return true__                    }_                }_            }_        }_        return false__    };helper,method,to,find,out,if,the,only,included,fieldmapping,metadata,is,typed,null,which,means,that,type,and,index,exist,but,the,field,did,not;private,boolean,is,field,mapping,missing,field,map,string,map,string,map,string,field,mapping,meta,data,mappings,by,index,if,mappings,by,index,size,1,return,false,for,map,string,map,string,field,mapping,meta,data,value,mappings,by,index,values,for,map,string,field,mapping,meta,data,field,value,value,values,for,map,entry,string,field,mapping,meta,data,field,mapping,meta,data,entry,field,value,entry,set,if,field,mapping,meta,data,entry,get,value,is,null,return,true,return,false
RestGetFieldMappingAction -> private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex);1548271475;Helper method to find out if the only included fieldmapping metadata is typed NULL, which means_that type and index exist, but the field did not;private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex) {_        if (mappingsByIndex.size() != 1) {_            return false__        }__        for (Map<String, Map<String, FieldMappingMetaData>> value : mappingsByIndex.values()) {_            for (Map<String, FieldMappingMetaData> fieldValue : value.values()) {_                for (Map.Entry<String, FieldMappingMetaData> fieldMappingMetaDataEntry : fieldValue.entrySet()) {_                    if (fieldMappingMetaDataEntry.getValue().isNull()) {_                        return true__                    }_                }_            }_        }_        return false__    };helper,method,to,find,out,if,the,only,included,fieldmapping,metadata,is,typed,null,which,means,that,type,and,index,exist,but,the,field,did,not;private,boolean,is,field,mapping,missing,field,map,string,map,string,map,string,field,mapping,meta,data,mappings,by,index,if,mappings,by,index,size,1,return,false,for,map,string,map,string,field,mapping,meta,data,value,mappings,by,index,values,for,map,string,field,mapping,meta,data,field,value,value,values,for,map,entry,string,field,mapping,meta,data,field,mapping,meta,data,entry,field,value,entry,set,if,field,mapping,meta,data,entry,get,value,is,null,return,true,return,false
RestGetFieldMappingAction -> private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex);1548418426;Helper method to find out if the only included fieldmapping metadata is typed NULL, which means_that type and index exist, but the field did not;private boolean isFieldMappingMissingField(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappingsByIndex) {_        if (mappingsByIndex.size() != 1) {_            return false__        }__        for (Map<String, Map<String, FieldMappingMetaData>> value : mappingsByIndex.values()) {_            for (Map<String, FieldMappingMetaData> fieldValue : value.values()) {_                for (Map.Entry<String, FieldMappingMetaData> fieldMappingMetaDataEntry : fieldValue.entrySet()) {_                    if (fieldMappingMetaDataEntry.getValue().isNull()) {_                        return true__                    }_                }_            }_        }_        return false__    };helper,method,to,find,out,if,the,only,included,fieldmapping,metadata,is,typed,null,which,means,that,type,and,index,exist,but,the,field,did,not;private,boolean,is,field,mapping,missing,field,map,string,map,string,map,string,field,mapping,meta,data,mappings,by,index,if,mappings,by,index,size,1,return,false,for,map,string,map,string,field,mapping,meta,data,value,mappings,by,index,values,for,map,string,field,mapping,meta,data,field,value,value,values,for,map,entry,string,field,mapping,meta,data,field,mapping,meta,data,entry,field,value,entry,set,if,field,mapping,meta,data,entry,get,value,is,null,return,true,return,false
