# id;timestamp;commentText;codeText;commentWords;codeWords
JNANatives -> static String getShortPathName(String path);1524684173;Retrieves the short path form of the specified path.__@param path the path_@return the short path name (or the original path if getting the short path name fails for any reason);static String getShortPathName(String path) {_        assert Constants.WINDOWS__        try {_            final WString longPath = new WString("\\\\?\\" + path)__            _            final int length = JNAKernel32Library.getInstance().GetShortPathNameW(longPath, null, 0)__            if (length == 0) {_                logger.warn("failed to get short path name: {}", Native.getLastError())__                return path__            }_            final char[] shortPath = new char[length]__            _            if (JNAKernel32Library.getInstance().GetShortPathNameW(longPath, shortPath, length) > 0) {_                return Native.toString(shortPath)__            } else {_                logger.warn("failed to get short path name: {}", Native.getLastError())__                return path__            }_        } catch (final UnsatisfiedLinkError e) {_            return path__        }_    };retrieves,the,short,path,form,of,the,specified,path,param,path,the,path,return,the,short,path,name,or,the,original,path,if,getting,the,short,path,name,fails,for,any,reason;static,string,get,short,path,name,string,path,assert,constants,windows,try,final,wstring,long,path,new,wstring,path,final,int,length,jnakernel32library,get,instance,get,short,path,name,w,long,path,null,0,if,length,0,logger,warn,failed,to,get,short,path,name,native,get,last,error,return,path,final,char,short,path,new,char,length,if,jnakernel32library,get,instance,get,short,path,name,w,long,path,short,path,length,0,return,native,to,string,short,path,else,logger,warn,failed,to,get,short,path,name,native,get,last,error,return,path,catch,final,unsatisfied,link,error,e,return,path
JNANatives -> static String getShortPathName(String path);1540486836;Retrieves the short path form of the specified path.__@param path the path_@return the short path name (or the original path if getting the short path name fails for any reason);static String getShortPathName(String path) {_        assert Constants.WINDOWS__        try {_            final WString longPath = new WString("\\\\?\\" + path)__            _            final int length = JNAKernel32Library.getInstance().GetShortPathNameW(longPath, null, 0)__            if (length == 0) {_                logger.warn("failed to get short path name: {}", Native.getLastError())__                return path__            }_            final char[] shortPath = new char[length]__            _            if (JNAKernel32Library.getInstance().GetShortPathNameW(longPath, shortPath, length) > 0) {_                return Native.toString(shortPath)__            } else {_                logger.warn("failed to get short path name: {}", Native.getLastError())__                return path__            }_        } catch (final UnsatisfiedLinkError e) {_            return path__        }_    };retrieves,the,short,path,form,of,the,specified,path,param,path,the,path,return,the,short,path,name,or,the,original,path,if,getting,the,short,path,name,fails,for,any,reason;static,string,get,short,path,name,string,path,assert,constants,windows,try,final,wstring,long,path,new,wstring,path,final,int,length,jnakernel32library,get,instance,get,short,path,name,w,long,path,null,0,if,length,0,logger,warn,failed,to,get,short,path,name,native,get,last,error,return,path,final,char,short,path,new,char,length,if,jnakernel32library,get,instance,get,short,path,name,w,long,path,short,path,length,0,return,native,to,string,short,path,else,logger,warn,failed,to,get,short,path,name,native,get,last,error,return,path,catch,final,unsatisfied,link,error,e,return,path
JNANatives -> static String getShortPathName(String path);1540847035;Retrieves the short path form of the specified path.__@param path the path_@return the short path name (or the original path if getting the short path name fails for any reason);static String getShortPathName(String path) {_        assert Constants.WINDOWS__        try {_            final WString longPath = new WString("\\\\?\\" + path)__            _            final int length = JNAKernel32Library.getInstance().GetShortPathNameW(longPath, null, 0)__            if (length == 0) {_                logger.warn("failed to get short path name: {}", Native.getLastError())__                return path__            }_            final char[] shortPath = new char[length]__            _            if (JNAKernel32Library.getInstance().GetShortPathNameW(longPath, shortPath, length) > 0) {_                return Native.toString(shortPath)__            } else {_                logger.warn("failed to get short path name: {}", Native.getLastError())__                return path__            }_        } catch (final UnsatisfiedLinkError e) {_            return path__        }_    };retrieves,the,short,path,form,of,the,specified,path,param,path,the,path,return,the,short,path,name,or,the,original,path,if,getting,the,short,path,name,fails,for,any,reason;static,string,get,short,path,name,string,path,assert,constants,windows,try,final,wstring,long,path,new,wstring,path,final,int,length,jnakernel32library,get,instance,get,short,path,name,w,long,path,null,0,if,length,0,logger,warn,failed,to,get,short,path,name,native,get,last,error,return,path,final,char,short,path,new,char,length,if,jnakernel32library,get,instance,get,short,path,name,w,long,path,short,path,length,0,return,native,to,string,short,path,else,logger,warn,failed,to,get,short,path,name,native,get,last,error,return,path,catch,final,unsatisfied,link,error,e,return,path
JNANatives -> private JNANatives();1524684173;no instantiation;private JNANatives() {};no,instantiation;private,jnanatives
JNANatives -> private JNANatives();1540486836;no instantiation;private JNANatives() {};no,instantiation;private,jnanatives
JNANatives -> private JNANatives();1540847035;no instantiation;private JNANatives() {};no,instantiation;private,jnanatives
JNANatives -> static boolean definitelyRunningAsRoot();1524684173;Returns true if user is root, false if not, or if we don't know;static boolean definitelyRunningAsRoot() {_        if (Constants.WINDOWS) {_            return false_ _        }_        try {_            return JNACLibrary.geteuid() == 0__        } catch (UnsatisfiedLinkError e) {_            _            return false__        }_    };returns,true,if,user,is,root,false,if,not,or,if,we,don,t,know;static,boolean,definitely,running,as,root,if,constants,windows,return,false,try,return,jnaclibrary,geteuid,0,catch,unsatisfied,link,error,e,return,false
JNANatives -> static boolean definitelyRunningAsRoot();1540486836;Returns true if user is root, false if not, or if we don't know;static boolean definitelyRunningAsRoot() {_        if (Constants.WINDOWS) {_            return false_ _        }_        try {_            return JNACLibrary.geteuid() == 0__        } catch (UnsatisfiedLinkError e) {_            _            return false__        }_    };returns,true,if,user,is,root,false,if,not,or,if,we,don,t,know;static,boolean,definitely,running,as,root,if,constants,windows,return,false,try,return,jnaclibrary,geteuid,0,catch,unsatisfied,link,error,e,return,false
JNANatives -> static boolean definitelyRunningAsRoot();1540847035;Returns true if user is root, false if not, or if we don't know;static boolean definitelyRunningAsRoot() {_        if (Constants.WINDOWS) {_            return false_ _        }_        try {_            return JNACLibrary.geteuid() == 0__        } catch (UnsatisfiedLinkError e) {_            _            return false__        }_    };returns,true,if,user,is,root,false,if,not,or,if,we,don,t,know;static,boolean,definitely,running,as,root,if,constants,windows,return,false,try,return,jnaclibrary,geteuid,0,catch,unsatisfied,link,error,e,return,false
