commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Returns a new parameterized type, applying {@code typeArguments} to  * {@code rawType}. The returned type does not have an owner type.  *  * @return a parameterized type.  */ ;/**  * Returns a new parameterized type, applying {@code typeArguments} to  * {@code rawType}. The returned type does not have an owner type.  *  * @return a parameterized type.  */ public static ParameterizedType newParameterizedType(Type rawType, Type... typeArguments) {     return newParameterizedTypeWithOwner(null, rawType, typeArguments). }
true;public,static;3;4;/**  * Returns a new parameterized type, applying {@code typeArguments} to  * {@code rawType} and enclosed by {@code ownerType}.  *  * @return a parameterized type.  */ ;/**  * Returns a new parameterized type, applying {@code typeArguments} to  * {@code rawType} and enclosed by {@code ownerType}.  *  * @return a parameterized type.  */ public static ParameterizedType newParameterizedTypeWithOwner(Type ownerType, Type rawType, Type... typeArguments) {     return new ParameterizedTypeImpl(ownerType, rawType, typeArguments). }
true;public,static;1;3;/**  * Returns an array type whose elements are all instances of  * {@code componentType}.  *  * @return a generic array type.  */ ;/**  * Returns an array type whose elements are all instances of  * {@code componentType}.  *  * @return a generic array type.  */ public static GenericArrayType arrayOf(Type componentType) {     return new GenericArrayTypeImpl(componentType). }
true;public,static;1;3;/**  * Returns a type that represents an unknown type that extends {@code bound}.  * For example, if {@code bound} is {@code CharSequence.class}, this returns  * {@code ? extends CharSequence}. If {@code bound} is {@code Object.class},  * this returns {@code ?}, which is shorthand for {@code ? extends Object}.  */ ;/**  * Returns a type that represents an unknown type that extends {@code bound}.  * For example, if {@code bound} is {@code CharSequence.class}, this returns  * {@code ? extends CharSequence}. If {@code bound} is {@code Object.class},  * this returns {@code ?}, which is shorthand for {@code ? extends Object}.  */ public static WildcardType subtypeOf(Type bound) {     return new WildcardTypeImpl(new Type[] { bound }, MoreTypes.EMPTY_TYPE_ARRAY). }
true;public,static;1;3;/**  * Returns a type that represents an unknown supertype of {@code bound}. For  * example, if {@code bound} is {@code String.class}, this returns {@code ?  * super String}.  */ ;/**  * Returns a type that represents an unknown supertype of {@code bound}. For  * example, if {@code bound} is {@code String.class}, this returns {@code ?  * super String}.  */ public static WildcardType supertypeOf(Type bound) {     return new WildcardTypeImpl(new Type[] { Object.class }, new Type[] { bound }). }
true;public,static;1;3;/**  * Returns a type modelling a {@link List} whose elements are of type  * {@code elementType}.  *  * @return a parameterized type.  */ ;/**  * Returns a type modelling a {@link List} whose elements are of type  * {@code elementType}.  *  * @return a parameterized type.  */ public static ParameterizedType listOf(Type elementType) {     return newParameterizedType(List.class, elementType). }
true;public,static;1;3;/**  * Returns a type modelling a {@link Set} whose elements are of type  * {@code elementType}.  *  * @return a parameterized type.  */ ;/**  * Returns a type modelling a {@link Set} whose elements are of type  * {@code elementType}.  *  * @return a parameterized type.  */ public static ParameterizedType setOf(Type elementType) {     return newParameterizedType(Set.class, elementType). }
true;public,static;2;3;/**  * Returns a type modelling a {@link Map} whose keys are of type  * {@code keyType} and whose values are of type {@code valueType}.  *  * @return a parameterized type.  */ ;/**  * Returns a type modelling a {@link Map} whose keys are of type  * {@code keyType} and whose values are of type {@code valueType}.  *  * @return a parameterized type.  */ public static ParameterizedType mapOf(Type keyType, Type valueType) {     return newParameterizedType(Map.class, keyType, valueType). }
true;public,static;1;3;/**  * Returns a type modelling a {@link Provider} that provides elements of type  * {@code elementType}.  *  * @return a parameterized type.  */ ;// for other custom collections types, use newParameterizedType() /**  * Returns a type modelling a {@link Provider} that provides elements of type  * {@code elementType}.  *  * @return a parameterized type.  */ public static ParameterizedType providerOf(Type providedType) {     return newParameterizedType(Provider.class, providedType). }
