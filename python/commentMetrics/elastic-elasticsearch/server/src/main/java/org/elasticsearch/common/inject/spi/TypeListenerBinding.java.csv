commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the registered listener.  */ ;/**  * Returns the registered listener.  */ public TypeListener getListener() {     return listener. }
true;public;0;3;/**  * Returns the type matcher which chooses which types the listener should be notified of.  */ ;/**  * Returns the type matcher which chooses which types the listener should be notified of.  */ public Matcher<? super TypeLiteral<?>> getTypeMatcher() {     return typeMatcher. }
false;public;0;4;;@Override public Object getSource() {     return source. }
false;public;1;4;;@Override public <T> T acceptVisitor(ElementVisitor<T> visitor) {     return visitor.visit(this). }
false;public;1;4;;@Override public void applyTo(Binder binder) {     binder.withSource(getSource()).bindListener(typeMatcher, listener). }
