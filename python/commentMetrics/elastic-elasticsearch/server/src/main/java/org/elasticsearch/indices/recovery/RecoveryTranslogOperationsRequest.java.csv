commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long recoveryId() {     return this.recoveryId. }
false;public;0;3;;public ShardId shardId() {     return shardId. }
false;public;0;3;;public List<Translog.Operation> operations() {     return operations. }
false;public;0;3;;public int totalTranslogOps() {     return totalTranslogOps. }
false;public;0;3;;public long maxSeenAutoIdTimestampOnPrimary() {     return maxSeenAutoIdTimestampOnPrimary. }
false;public;0;3;;public long maxSeqNoOfUpdatesOrDeletesOnPrimary() {     return maxSeqNoOfUpdatesOrDeletesOnPrimary. }
false;public;0;3;;public RetentionLeases retentionLeases() {     return retentionLeases. }
false;public;1;24;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     recoveryId = in.readLong().     shardId = ShardId.readShardId(in).     operations = Translog.readOperations(in, "recovery").     totalTranslogOps = in.readVInt().     if (in.getVersion().onOrAfter(Version.V_6_5_0)) {         maxSeenAutoIdTimestampOnPrimary = in.readZLong().     } else {         maxSeenAutoIdTimestampOnPrimary = IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP.     }     if (in.getVersion().onOrAfter(Version.V_6_5_0)) {         maxSeqNoOfUpdatesOrDeletesOnPrimary = in.readZLong().     } else {         // UNASSIGNED_SEQ_NO means uninitialized and replica won't enable optimization using seq_no         maxSeqNoOfUpdatesOrDeletesOnPrimary = SequenceNumbers.UNASSIGNED_SEQ_NO.     }     if (in.getVersion().onOrAfter(Version.V_6_7_0)) {         retentionLeases = new RetentionLeases(in).     } else {         retentionLeases = RetentionLeases.EMPTY.     } }
false;public;1;17;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeLong(recoveryId).     shardId.writeTo(out).     Translog.writeOperations(out, operations).     out.writeVInt(totalTranslogOps).     if (out.getVersion().onOrAfter(Version.V_6_5_0)) {         out.writeZLong(maxSeenAutoIdTimestampOnPrimary).     }     if (out.getVersion().onOrAfter(Version.V_6_5_0)) {         out.writeZLong(maxSeqNoOfUpdatesOrDeletesOnPrimary).     }     if (out.getVersion().onOrAfter(Version.V_6_7_0)) {         retentionLeases.writeTo(out).     } }
