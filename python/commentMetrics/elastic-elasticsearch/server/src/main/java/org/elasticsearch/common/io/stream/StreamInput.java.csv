# id;timestamp;commentText;codeText;commentWords;codeWords
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1524684173;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1526449283;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1532353780;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1532456624;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1548236405;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1548265937;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1548420339;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1548943934;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;1549336917;Reads a specified number of bytes into an array at the specified offset.__@param b      the array to read bytes into_@param offset the offset in the array to start storing bytes_@param len    the number of bytes to read;public abstract void readBytes(byte[] b, int offset, int len) throws IOException_;reads,a,specified,number,of,bytes,into,an,array,at,the,specified,offset,param,b,the,array,to,read,bytes,into,param,offset,the,offset,in,the,array,to,start,storing,bytes,param,len,the,number,of,bytes,to,read;public,abstract,void,read,bytes,byte,b,int,offset,int,len,throws,ioexception
StreamInput -> private int readArraySize() throws IOException;1524684173;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> private int readArraySize() throws IOException;1526449283;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> private int readArraySize() throws IOException;1532353780;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> private int readArraySize() throws IOException;1532456624;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> private int readArraySize() throws IOException;1548236405;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> private int readArraySize() throws IOException;1548265937;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> private int readArraySize() throws IOException;1548420339;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> private int readArraySize() throws IOException;1548943934;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> private int readArraySize() throws IOException;1549336917;Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane._This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.;private int readArraySize() throws IOException {_        final int arraySize = readVInt()__        if (arraySize > ArrayUtil.MAX_ARRAY_LENGTH) {_            throw new IllegalStateException("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: " + arraySize)__        }_        if (arraySize < 0) {_            throw new NegativeArraySizeException("array size must be positive but was: " + arraySize)__        }_        _        _        _        ensureCanReadBytes(arraySize)__        return arraySize__    };reads,a,vint,via,link,read,vint,and,applies,basic,checks,to,ensure,the,read,array,size,is,sane,this,method,uses,link,ensure,can,read,bytes,int,to,ensure,this,stream,has,enough,bytes,to,read,for,the,read,array,size;private,int,read,array,size,throws,ioexception,final,int,array,size,read,vint,if,array,size,array,util,throw,new,illegal,state,exception,array,length,must,be,to,array,util,but,was,array,size,if,array,size,0,throw,new,negative,array,size,exception,array,size,must,be,positive,but,was,array,size,ensure,can,read,bytes,array,size,return,array,size
StreamInput -> public int readInt() throws IOException;1524684173;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> public int readInt() throws IOException;1526449283;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> public int readInt() throws IOException;1532353780;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> public int readInt() throws IOException;1532456624;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> public int readInt() throws IOException;1548236405;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> public int readInt() throws IOException;1548265937;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> public int readInt() throws IOException;1548420339;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> public int readInt() throws IOException;1548943934;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> public int readInt() throws IOException;1549336917;Reads four bytes and returns an int.;public int readInt() throws IOException {_        return ((readByte() & 0xFF) << 24) | ((readByte() & 0xFF) << 16)_                | ((readByte() & 0xFF) << 8) | (readByte() & 0xFF)__    };reads,four,bytes,and,returns,an,int;public,int,read,int,throws,ioexception,return,read,byte,0x,ff,24,read,byte,0x,ff,16,read,byte,0x,ff,8,read,byte,0x,ff
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1524684173;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1526449283;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1532353780;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1532456624;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1548236405;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1548265937;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1548420339;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1548943934;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,                                                            @SuppressWarnings("unused") String name) throws IOException;1549336917;Reads a {@link NamedWriteable} from the current stream with the given name. It is assumed that the caller obtained the name_from other source, so it's not read from the stream. The name is used for looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.__Prefer {@link StreamInput#readNamedWriteable(Class)} and {@link StreamOutput#writeNamedWriteable(NamedWriteable)} unless you_have a compelling reason to use this method instead.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass,_                                                           @SuppressWarnings("unused") String name) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,with,the,given,name,it,is,assumed,that,the,caller,obtained,the,name,from,other,source,so,it,s,not,read,from,the,stream,the,name,is,used,for,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too,prefer,link,stream,input,read,named,writeable,class,and,link,stream,output,write,named,writeable,named,writeable,unless,you,have,a,compelling,reason,to,use,this,method,instead;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,suppress,warnings,unused,string,name,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1524684173;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1526449283;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1532353780;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1532456624;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1548236405;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1548265937;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1548420339;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1548943934;Reads an enum with type E that was serialized based on the value of its ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,its,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException;1549336917;Reads an enum with type E that was serialized based on the value of its ordinal;public <E extends Enum<E>> E readEnum(Class<E> enumClass) throws IOException {_        int ordinal = readVInt()__        E[] values = enumClass.getEnumConstants()__        if (ordinal < 0 || ordinal >= values.length) {_            throw new IOException("Unknown " + enumClass.getSimpleName() + " ordinal [" + ordinal + "]")__        }_        return values[ordinal]__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,its,ordinal;public,e,extends,enum,e,e,read,enum,class,e,enum,class,throws,ioexception,int,ordinal,read,vint,e,values,enum,class,get,enum,constants,if,ordinal,0,ordinal,values,length,throw,new,ioexception,unknown,enum,class,get,simple,name,ordinal,ordinal,return,values,ordinal
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1524684173;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1526449283;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1532353780;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1532456624;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1548236405;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1548265937;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1548420339;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1548943934;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)             throws IOException;1549336917;Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s._<pre><code>_Map&lt_String, List&lt_String&gt_&gt_ map = in.readMapOfLists(StreamInput::readString, StreamInput::readString)__</code></pre>__@param keyReader The key reader_@param valueReader The value reader_@return Never {@code null}.;public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader)_            throws IOException {_        final int size = readArraySize()__        if (size == 0) {_            return Collections.emptyMap()__        }_        final Map<K, List<V>> map = new HashMap<>(size)__        for (int i = 0_ i < size_ ++i) {_            map.put(keyReader.read(this), readList(valueReader))__        }_        return map__    };read,a,link,map,of,code,k,type,keys,to,code,v,type,link,list,s,pre,code,map,lt,string,list,lt,string,gt,gt,map,in,read,map,of,lists,stream,input,read,string,stream,input,read,string,code,pre,param,key,reader,the,key,reader,param,value,reader,the,value,reader,return,never,code,null;public,k,v,map,k,list,v,read,map,of,lists,final,writeable,reader,k,key,reader,final,writeable,reader,v,value,reader,throws,ioexception,final,int,size,read,array,size,if,size,0,return,collections,empty,map,final,map,k,list,v,map,new,hash,map,size,for,int,i,0,i,size,i,map,put,key,reader,read,this,read,list,value,reader,return,map
StreamInput -> public TimeValue readTimeValue() throws IOException;1524684173;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> public TimeValue readTimeValue() throws IOException;1526449283;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> public TimeValue readTimeValue() throws IOException;1532353780;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> public TimeValue readTimeValue() throws IOException;1532456624;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> public TimeValue readTimeValue() throws IOException;1548236405;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> public TimeValue readTimeValue() throws IOException;1548265937;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> public TimeValue readTimeValue() throws IOException;1548420339;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> public TimeValue readTimeValue() throws IOException;1548943934;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> public TimeValue readTimeValue() throws IOException;1549336917;Read a {@link TimeValue} from the stream;public TimeValue readTimeValue() throws IOException {_        long duration = readZLong()__        TimeUnit timeUnit = BYTE_TIME_UNIT_MAP.get(readByte())__        return new TimeValue(duration, timeUnit)__    };read,a,link,time,value,from,the,stream;public,time,value,read,time,value,throws,ioexception,long,duration,read,zlong,time,unit,time,unit,get,read,byte,return,new,time,value,duration,time,unit
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1524684173;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1526449283;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1532353780;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1532456624;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1548236405;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1548265937;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1548420339;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1548943934;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> @Nullable     public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException;1549336917;Serializes a potential null value.;@Nullable_    public <T extends Streamable> T readOptionalStreamable(Supplier<T> supplier) throws IOException {_        if (readBoolean()) {_            T streamable = supplier.get()__            streamable.readFrom(this)__            return streamable__        } else {_            return null__        }_    };serializes,a,potential,null,value;nullable,public,t,extends,streamable,t,read,optional,streamable,supplier,t,supplier,throws,ioexception,if,read,boolean,t,streamable,supplier,get,streamable,read,from,this,return,streamable,else,return,null
StreamInput -> public ZoneId readOptionalZoneId() throws IOException;1548236405;Read an optional {@linkplain ZoneId}.;public ZoneId readOptionalZoneId() throws IOException {_        if (readBoolean()) {_            return ZoneId.of(readString())__        }_        return null__    };read,an,optional,linkplain,zone,id;public,zone,id,read,optional,zone,id,throws,ioexception,if,read,boolean,return,zone,id,of,read,string,return,null
StreamInput -> public ZoneId readOptionalZoneId() throws IOException;1548265937;Read an optional {@linkplain ZoneId}.;public ZoneId readOptionalZoneId() throws IOException {_        if (readBoolean()) {_            return ZoneId.of(readString())__        }_        return null__    };read,an,optional,linkplain,zone,id;public,zone,id,read,optional,zone,id,throws,ioexception,if,read,boolean,return,zone,id,of,read,string,return,null
StreamInput -> public ZoneId readOptionalZoneId() throws IOException;1548420339;Read an optional {@linkplain ZoneId}.;public ZoneId readOptionalZoneId() throws IOException {_        if (readBoolean()) {_            return ZoneId.of(readString())__        }_        return null__    };read,an,optional,linkplain,zone,id;public,zone,id,read,optional,zone,id,throws,ioexception,if,read,boolean,return,zone,id,of,read,string,return,null
StreamInput -> public ZoneId readOptionalZoneId() throws IOException;1548943934;Read an optional {@linkplain ZoneId}.;public ZoneId readOptionalZoneId() throws IOException {_        if (readBoolean()) {_            return ZoneId.of(readString())__        }_        return null__    };read,an,optional,linkplain,zone,id;public,zone,id,read,optional,zone,id,throws,ioexception,if,read,boolean,return,zone,id,of,read,string,return,null
StreamInput -> public ZoneId readOptionalZoneId() throws IOException;1549336917;Read an optional {@linkplain ZoneId}.;public ZoneId readOptionalZoneId() throws IOException {_        if (readBoolean()) {_            return ZoneId.of(readString())__        }_        return null__    };read,an,optional,linkplain,zone,id;public,zone,id,read,optional,zone,id,throws,ioexception,if,read,boolean,return,zone,id,of,read,string,return,null
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1524684173;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1526449283;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1532353780;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1532456624;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1548236405;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1548265937;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1548420339;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1548943934;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> @Nullable     public BytesReference readOptionalBytesReference() throws IOException;1549336917;Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this_only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and_{@link StreamOutput#writeBytesReference(BytesReference)} if you do not.;@Nullable_    public BytesReference readOptionalBytesReference() throws IOException {_        int length = readVInt() - 1__        if (length < 0) {_            return null__        }_        return readBytesReference(length)__    };reads,an,optional,bytes,reference,from,this,stream,it,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream,use,this,only,if,you,must,differentiate,null,from,empty,use,link,stream,input,read,bytes,reference,and,link,stream,output,write,bytes,reference,bytes,reference,if,you,do,not;nullable,public,bytes,reference,read,optional,bytes,reference,throws,ioexception,int,length,read,vint,1,if,length,0,return,null,return,read,bytes,reference,length
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1524684173;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1526449283;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1532353780;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1532456624;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1548236405;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1548265937;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1548420339;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1548943934;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException;1549336917;Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance._<p>_This is expected to take the form:_<code>_List&lt_MyStreamableClass&gt_ list = in.readStreamList(MyStreamableClass::new)__</code>__@param constructor Streamable instance creator_@return Never {@code null}._@throws IOException if any step fails;public <T extends Streamable> List<T> readStreamableList(Supplier<T> constructor) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            T instance = constructor.get()__            instance.readFrom(this)__            builder.add(instance)__        }_        return builder__    };read,a,link,list,of,link,streamable,objects,using,the,code,constructor,to,instantiate,each,instance,p,this,is,expected,to,take,the,form,code,list,lt,my,streamable,class,gt,list,in,read,stream,list,my,streamable,class,new,code,param,constructor,streamable,instance,creator,return,never,code,null,throws,ioexception,if,any,step,fails;public,t,extends,streamable,list,t,read,streamable,list,supplier,t,constructor,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,t,instance,constructor,get,instance,read,from,this,builder,add,instance,return,builder
StreamInput -> public long readLong() throws IOException;1524684173;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public long readLong() throws IOException;1526449283;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public long readLong() throws IOException;1532353780;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public long readLong() throws IOException;1532456624;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public long readLong() throws IOException;1548236405;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public long readLong() throws IOException;1548265937;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public long readLong() throws IOException;1548420339;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public long readLong() throws IOException;1548943934;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public long readLong() throws IOException;1549336917;Reads eight bytes and returns a long.;public long readLong() throws IOException {_        return (((long) readInt()) << 32) | (readInt() & 0xFFFFFFFFL)__    };reads,eight,bytes,and,returns,a,long;public,long,read,long,throws,ioexception,return,long,read,int,32,read,int,0x,ffffffffl
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1524684173;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1526449283;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1532353780;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1532456624;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1548236405;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1548265937;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1548420339;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1548943934;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException;1549336917;Reads an array from the stream using the specified {@link org.elasticsearch.common.io.stream.Writeable.Reader} to read array elements_from the stream. This method can be seen as the reader version of {@link StreamOutput#writeArray(Writeable.Writer, Object[])}. It is_assumed that the stream first contains a variable-length integer representing the size of the array, and then contains that many_elements that can be read from the stream.__@param reader        the reader used to read individual elements_@param arraySupplier a supplier used to construct a new array_@param <T>           the type of the elements of the array_@return an array read from the stream_@throws IOException if an I/O exception occurs while reading the array;public <T> T[] readArray(final Writeable.Reader<T> reader, final IntFunction<T[]> arraySupplier) throws IOException {_        final int length = readArraySize()__        final T[] values = arraySupplier.apply(length)__        for (int i = 0_ i < length_ i++) {_            values[i] = reader.read(this)__        }_        return values__    };reads,an,array,from,the,stream,using,the,specified,link,org,elasticsearch,common,io,stream,writeable,reader,to,read,array,elements,from,the,stream,this,method,can,be,seen,as,the,reader,version,of,link,stream,output,write,array,writeable,writer,object,it,is,assumed,that,the,stream,first,contains,a,variable,length,integer,representing,the,size,of,the,array,and,then,contains,that,many,elements,that,can,be,read,from,the,stream,param,reader,the,reader,used,to,read,individual,elements,param,array,supplier,a,supplier,used,to,construct,a,new,array,param,t,the,type,of,the,elements,of,the,array,return,an,array,read,from,the,stream,throws,ioexception,if,an,i,o,exception,occurs,while,reading,the,array;public,t,t,read,array,final,writeable,reader,t,reader,final,int,function,t,array,supplier,throws,ioexception,final,int,length,read,array,size,final,t,values,array,supplier,apply,length,for,int,i,0,i,length,i,values,i,reader,read,this,return,values
StreamInput -> public Integer readOptionalInt() throws IOException;1548420339;Reads an optional {@link Integer}.;public Integer readOptionalInt() throws IOException {_        if (readBoolean()) {_            return readInt()__        }_        return null__    };reads,an,optional,link,integer;public,integer,read,optional,int,throws,ioexception,if,read,boolean,return,read,int,return,null
StreamInput -> public Integer readOptionalInt() throws IOException;1548943934;Reads an optional {@link Integer}.;public Integer readOptionalInt() throws IOException {_        if (readBoolean()) {_            return readInt()__        }_        return null__    };reads,an,optional,link,integer;public,integer,read,optional,int,throws,ioexception,if,read,boolean,return,read,int,return,null
StreamInput -> public Integer readOptionalInt() throws IOException;1549336917;Reads an optional {@link Integer}.;public Integer readOptionalInt() throws IOException {_        if (readBoolean()) {_            return readInt()__        }_        return null__    };reads,an,optional,link,integer;public,integer,read,optional,int,throws,ioexception,if,read,boolean,return,read,int,return,null
StreamInput -> public void setVersion(Version version);1524684173;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public void setVersion(Version version);1526449283;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public void setVersion(Version version);1532353780;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public void setVersion(Version version);1532456624;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public void setVersion(Version version);1548236405;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public void setVersion(Version version);1548265937;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public void setVersion(Version version);1548420339;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public void setVersion(Version version);1548943934;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public void setVersion(Version version);1549336917;Set the version of the node on the other side of this stream.;public void setVersion(Version version) {_        this.version = version__    };set,the,version,of,the,node,on,the,other,side,of,this,stream;public,void,set,version,version,version,this,version,version
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1524684173;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1526449283;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1532353780;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1532456624;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1548236405;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1548265937;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1548420339;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1548943934;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public GeoPoint readGeoPoint() throws IOException;1549336917;Reads a {@link GeoPoint} from this stream input;public GeoPoint readGeoPoint() throws IOException {_        return new GeoPoint(readDouble(), readDouble())__    };reads,a,link,geo,point,from,this,stream,input;public,geo,point,read,geo,point,throws,ioexception,return,new,geo,point,read,double,read,double
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1524684173;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1526449283;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1532353780;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1532456624;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1548236405;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1548265937;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1548420339;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1548943934;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> public @Nullable TimeValue readOptionalTimeValue() throws IOException;1549336917;Read an optional {@link TimeValue} from the stream, returning null if no TimeValue was written.;public @Nullable TimeValue readOptionalTimeValue() throws IOException {_        if (readBoolean()) {_            return readTimeValue()__        } else {_            return null__        }_    };read,an,optional,link,time,value,from,the,stream,returning,null,if,no,time,value,was,written;public,nullable,time,value,read,optional,time,value,throws,ioexception,if,read,boolean,return,read,time,value,else,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1524684173;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1526449283;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1532353780;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1532456624;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1548236405;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1548265937;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1548420339;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1548943934;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> @Nullable     public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException;1549336917;Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for_the corresponding entry in the registry by name, so that the proper object can be read and returned._Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry._Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.;@Nullable_    public <C extends NamedWriteable> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {_        throw new UnsupportedOperationException("can't read named writeable from StreamInput")__    };reads,a,link,named,writeable,from,the,current,stream,by,first,reading,its,name,and,then,looking,for,the,corresponding,entry,in,the,registry,by,name,so,that,the,proper,object,can,be,read,and,returned,default,implementation,throws,link,unsupported,operation,exception,as,stream,input,doesn,t,hold,a,registry,use,link,filter,input,stream,instead,which,wraps,a,stream,and,supports,a,link,named,writeable,registry,too;nullable,public,c,extends,named,writeable,c,read,named,writeable,suppress,warnings,unused,class,c,category,class,throws,ioexception,throw,new,unsupported,operation,exception,can,t,read,named,writeable,from,stream,input
StreamInput -> public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException;1524684173;Reads a list of objects;public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,list,of,objects;public,t,list,t,read,list,writeable,reader,t,reader,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException;1526449283;Reads a list of objects;public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,list,of,objects;public,t,list,t,read,list,writeable,reader,t,reader,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException;1532353780;Reads a list of objects;public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,list,of,objects;public,t,list,t,read,list,writeable,reader,t,reader,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException;1532456624;Reads a list of objects;public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, ArrayList::new)__    };reads,a,list,of,objects;public,t,list,t,read,list,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,array,list,new
StreamInput -> public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException;1548236405;Reads a list of objects;public <T> List<T> readList(Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, ArrayList::new)__    };reads,a,list,of,objects;public,t,list,t,read,list,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,array,list,new
StreamInput -> public long readVLong() throws IOException;1524684173;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public long readVLong() throws IOException;1526449283;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public long readVLong() throws IOException;1532353780;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public long readVLong() throws IOException;1532456624;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public long readVLong() throws IOException;1548236405;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public long readVLong() throws IOException;1548265937;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public long readVLong() throws IOException;1548420339;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public long readVLong() throws IOException;1548943934;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public long readVLong() throws IOException;1549336917;Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers_are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.;public long readVLong() throws IOException {_        byte b = readByte()__        long i = b & 0x7FL__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 28__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 35__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 42__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7FL) << 49__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= ((b & 0x7FL) << 56)__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if (b != 0 && b != 1) {_            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i))__        }_        i |= ((long) b) << 63__        return i__    };reads,a,long,stored,in,variable,length,format,reads,between,one,and,ten,bytes,smaller,values,take,fewer,bytes,negative,numbers,are,encoded,in,ten,bytes,so,prefer,link,read,long,or,link,read,zlong,for,negative,numbers;public,long,read,vlong,throws,ioexception,byte,b,read,byte,long,i,b,0x7fl,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,21,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,28,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,35,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,42,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,49,if,b,0x80,0,return,i,b,read,byte,i,b,0x7fl,56,if,b,0x80,0,return,i,b,read,byte,if,b,0,b,1,throw,new,ioexception,invalid,vlong,integer,to,hex,string,b,63,long,to,hex,string,i,i,long,b,63,return,i
StreamInput -> public abstract byte readByte() throws IOException_;1524684173;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public abstract byte readByte() throws IOException_;1526449283;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public abstract byte readByte() throws IOException_;1532353780;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public abstract byte readByte() throws IOException_;1532456624;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public abstract byte readByte() throws IOException_;1548236405;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public abstract byte readByte() throws IOException_;1548265937;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public abstract byte readByte() throws IOException_;1548420339;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public abstract byte readByte() throws IOException_;1548943934;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public abstract byte readByte() throws IOException_;1549336917;Reads and returns a single byte.;public abstract byte readByte() throws IOException_;reads,and,returns,a,single,byte;public,abstract,byte,read,byte,throws,ioexception
StreamInput -> public <T> List<T> readList(final Writeable.Reader<T> reader) throws IOException;1548265937;Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or_{@link StreamOutput#writeStreamableList(List)}.__@return the list of objects_@throws IOException if an I/O exception occurs reading the list;public <T> List<T> readList(final Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, ArrayList::new)__    };reads,a,list,of,objects,the,list,is,expected,to,have,been,written,using,link,stream,output,write,list,list,or,link,stream,output,write,streamable,list,list,return,the,list,of,objects,throws,ioexception,if,an,i,o,exception,occurs,reading,the,list;public,t,list,t,read,list,final,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,array,list,new
StreamInput -> public <T> List<T> readList(final Writeable.Reader<T> reader) throws IOException;1548420339;Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or_{@link StreamOutput#writeStreamableList(List)}.__@return the list of objects_@throws IOException if an I/O exception occurs reading the list;public <T> List<T> readList(final Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, ArrayList::new)__    };reads,a,list,of,objects,the,list,is,expected,to,have,been,written,using,link,stream,output,write,list,list,or,link,stream,output,write,streamable,list,list,return,the,list,of,objects,throws,ioexception,if,an,i,o,exception,occurs,reading,the,list;public,t,list,t,read,list,final,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,array,list,new
StreamInput -> public <T> List<T> readList(final Writeable.Reader<T> reader) throws IOException;1548943934;Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or_{@link StreamOutput#writeStreamableList(List)}.__@return the list of objects_@throws IOException if an I/O exception occurs reading the list;public <T> List<T> readList(final Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, ArrayList::new)__    };reads,a,list,of,objects,the,list,is,expected,to,have,been,written,using,link,stream,output,write,list,list,or,link,stream,output,write,streamable,list,list,return,the,list,of,objects,throws,ioexception,if,an,i,o,exception,occurs,reading,the,list;public,t,list,t,read,list,final,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,array,list,new
StreamInput -> public <T> List<T> readList(final Writeable.Reader<T> reader) throws IOException;1549336917;Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or_{@link StreamOutput#writeStreamableList(List)}.__@return the list of objects_@throws IOException if an I/O exception occurs reading the list;public <T> List<T> readList(final Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, ArrayList::new)__    };reads,a,list,of,objects,the,list,is,expected,to,have,been,written,using,link,stream,output,write,list,list,or,link,stream,output,write,streamable,list,list,return,the,list,of,objects,throws,ioexception,if,an,i,o,exception,occurs,reading,the,list;public,t,list,t,read,list,final,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,array,list,new
StreamInput -> public int readVInt() throws IOException;1524684173;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> public int readVInt() throws IOException;1526449283;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> public int readVInt() throws IOException;1532353780;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> public int readVInt() throws IOException;1532456624;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> public int readVInt() throws IOException;1548236405;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> public int readVInt() throws IOException;1548265937;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> public int readVInt() throws IOException;1548420339;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> public int readVInt() throws IOException;1548943934;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> public int readVInt() throws IOException;1549336917;Reads an int stored in variable-length format.  Reads between one and_five bytes.  Smaller values take fewer bytes.  Negative numbers_will always use all 5 bytes and are therefore better serialized_using {@link #readInt};public int readVInt() throws IOException {_        byte b = readByte()__        int i = b & 0x7F__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 7__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 14__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        i |= (b & 0x7F) << 21__        if ((b & 0x80) == 0) {_            return i__        }_        b = readByte()__        if ((b & 0x80) != 0) {_            throw new IOException("Invalid vInt ((" + Integer.toHexString(b) + " & 0x7f) << 28) | " + Integer.toHexString(i))__        }_        return i | ((b & 0x7F) << 28)__    };reads,an,int,stored,in,variable,length,format,reads,between,one,and,five,bytes,smaller,values,take,fewer,bytes,negative,numbers,will,always,use,all,5,bytes,and,are,therefore,better,serialized,using,link,read,int;public,int,read,vint,throws,ioexception,byte,b,read,byte,int,i,b,0x7f,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,7,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,14,if,b,0x80,0,return,i,b,read,byte,i,b,0x7f,21,if,b,0x80,0,return,i,b,read,byte,if,b,0x80,0,throw,new,ioexception,invalid,v,int,integer,to,hex,string,b,0x7f,28,integer,to,hex,string,i,return,i,b,0x7f,28
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1524684173;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1526449283;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1532353780;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1532456624;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1548236405;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1548265937;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1548420339;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1548943934;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> protected abstract void ensureCanReadBytes(int length) throws EOFException_;1549336917;This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might_be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.;protected abstract void ensureCanReadBytes(int length) throws EOFException_;this,method,throws,an,link,eofexception,if,the,given,number,of,bytes,can,not,be,read,from,the,this,stream,this,method,might,be,a,no,op,depending,on,the,underlying,implementation,if,the,information,of,the,remaining,bytes,is,not,present;protected,abstract,void,ensure,can,read,bytes,int,length,throws,eofexception
StreamInput -> public BytesReference readBytesReference() throws IOException;1524684173;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public BytesReference readBytesReference() throws IOException;1526449283;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public BytesReference readBytesReference() throws IOException;1532353780;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public BytesReference readBytesReference() throws IOException;1532456624;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public BytesReference readBytesReference() throws IOException;1548236405;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public BytesReference readBytesReference() throws IOException;1548265937;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public BytesReference readBytesReference() throws IOException;1548420339;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public BytesReference readBytesReference() throws IOException;1548943934;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public BytesReference readBytesReference() throws IOException;1549336917;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference() throws IOException {_        int length = readArraySize()__        return readBytesReference(length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,throws,ioexception,int,length,read,array,size,return,read,bytes,reference,length
StreamInput -> public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException;1526449283;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException {_        int size = readVInt()__        if (size == 0) {_             return EnumSet.noneOf(enumClass)__        }_        Set<E> enums = new HashSet<>(size)__        for (int i = 0_ i < size_ i++) {_            enums.add(readEnum(enumClass))__        }_        return EnumSet.copyOf(enums)__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,enum,set,e,read,enum,set,class,e,enum,class,throws,ioexception,int,size,read,vint,if,size,0,return,enum,set,none,of,enum,class,set,e,enums,new,hash,set,size,for,int,i,0,i,size,i,enums,add,read,enum,enum,class,return,enum,set,copy,of,enums
StreamInput -> public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException;1532353780;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException {_        int size = readVInt()__        if (size == 0) {_             return EnumSet.noneOf(enumClass)__        }_        Set<E> enums = new HashSet<>(size)__        for (int i = 0_ i < size_ i++) {_            enums.add(readEnum(enumClass))__        }_        return EnumSet.copyOf(enums)__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,enum,set,e,read,enum,set,class,e,enum,class,throws,ioexception,int,size,read,vint,if,size,0,return,enum,set,none,of,enum,class,set,e,enums,new,hash,set,size,for,int,i,0,i,size,i,enums,add,read,enum,enum,class,return,enum,set,copy,of,enums
StreamInput -> public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException;1532456624;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException {_        int size = readVInt()__        if (size == 0) {_             return EnumSet.noneOf(enumClass)__        }_        Set<E> enums = new HashSet<>(size)__        for (int i = 0_ i < size_ i++) {_            enums.add(readEnum(enumClass))__        }_        return EnumSet.copyOf(enums)__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,enum,set,e,read,enum,set,class,e,enum,class,throws,ioexception,int,size,read,vint,if,size,0,return,enum,set,none,of,enum,class,set,e,enums,new,hash,set,size,for,int,i,0,i,size,i,enums,add,read,enum,enum,class,return,enum,set,copy,of,enums
StreamInput -> public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException;1548236405;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException {_        int size = readVInt()__        if (size == 0) {_             return EnumSet.noneOf(enumClass)__        }_        Set<E> enums = new HashSet<>(size)__        for (int i = 0_ i < size_ i++) {_            enums.add(readEnum(enumClass))__        }_        return EnumSet.copyOf(enums)__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,enum,set,e,read,enum,set,class,e,enum,class,throws,ioexception,int,size,read,vint,if,size,0,return,enum,set,none,of,enum,class,set,e,enums,new,hash,set,size,for,int,i,0,i,size,i,enums,add,read,enum,enum,class,return,enum,set,copy,of,enums
StreamInput -> public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException;1548265937;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException {_        int size = readVInt()__        if (size == 0) {_             return EnumSet.noneOf(enumClass)__        }_        Set<E> enums = new HashSet<>(size)__        for (int i = 0_ i < size_ i++) {_            enums.add(readEnum(enumClass))__        }_        return EnumSet.copyOf(enums)__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,enum,set,e,read,enum,set,class,e,enum,class,throws,ioexception,int,size,read,vint,if,size,0,return,enum,set,none,of,enum,class,set,e,enums,new,hash,set,size,for,int,i,0,i,size,i,enums,add,read,enum,enum,class,return,enum,set,copy,of,enums
StreamInput -> public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException;1548420339;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException {_        int size = readVInt()__        if (size == 0) {_             return EnumSet.noneOf(enumClass)__        }_        Set<E> enums = new HashSet<>(size)__        for (int i = 0_ i < size_ i++) {_            enums.add(readEnum(enumClass))__        }_        return EnumSet.copyOf(enums)__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,enum,set,e,read,enum,set,class,e,enum,class,throws,ioexception,int,size,read,vint,if,size,0,return,enum,set,none,of,enum,class,set,e,enums,new,hash,set,size,for,int,i,0,i,size,i,enums,add,read,enum,enum,class,return,enum,set,copy,of,enums
StreamInput -> public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException;1548943934;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException {_        int size = readVInt()__        if (size == 0) {_             return EnumSet.noneOf(enumClass)__        }_        Set<E> enums = new HashSet<>(size)__        for (int i = 0_ i < size_ i++) {_            enums.add(readEnum(enumClass))__        }_        return EnumSet.copyOf(enums)__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,enum,set,e,read,enum,set,class,e,enum,class,throws,ioexception,int,size,read,vint,if,size,0,return,enum,set,none,of,enum,class,set,e,enums,new,hash,set,size,for,int,i,0,i,size,i,enums,add,read,enum,enum,class,return,enum,set,copy,of,enums
StreamInput -> public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException;1549336917;Reads an enum with type E that was serialized based on the value of it's ordinal;public <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> enumClass) throws IOException {_        int size = readVInt()__        if (size == 0) {_             return EnumSet.noneOf(enumClass)__        }_        Set<E> enums = new HashSet<>(size)__        for (int i = 0_ i < size_ i++) {_            enums.add(readEnum(enumClass))__        }_        return EnumSet.copyOf(enums)__    };reads,an,enum,with,type,e,that,was,serialized,based,on,the,value,of,it,s,ordinal;public,e,extends,enum,e,enum,set,e,read,enum,set,class,e,enum,class,throws,ioexception,int,size,read,vint,if,size,0,return,enum,set,none,of,enum,class,set,e,enums,new,hash,set,size,for,int,i,0,i,size,i,enums,add,read,enum,enum,class,return,enum,set,copy,of,enums
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1524684173;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1526449283;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1532353780;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1532456624;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1548236405;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1548265937;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1548420339;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1548943934;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException;1549336917;Reads a list of {@link NamedWriteable}s.;public <T extends NamedWriteable> List<T> readNamedWriteableList(Class<T> categoryClass) throws IOException {_        int count = readArraySize()__        List<T> builder = new ArrayList<>(count)__        for (int i=0_ i<count_ i++) {_            builder.add(readNamedWriteable(categoryClass))__        }_        return builder__    };reads,a,list,of,link,named,writeable,s;public,t,extends,named,writeable,list,t,read,named,writeable,list,class,t,category,class,throws,ioexception,int,count,read,array,size,list,t,builder,new,array,list,count,for,int,i,0,i,count,i,builder,add,read,named,writeable,category,class,return,builder
StreamInput -> public Version getVersion();1524684173;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public Version getVersion();1526449283;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public Version getVersion();1532353780;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public Version getVersion();1532456624;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public Version getVersion();1548236405;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public Version getVersion();1548265937;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public Version getVersion();1548420339;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public Version getVersion();1548943934;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public Version getVersion();1549336917;The version of the node on the other side of this stream.;public Version getVersion() {_        return this.version__    };the,version,of,the,node,on,the,other,side,of,this,stream;public,version,get,version,return,this,version
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1524684173;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1526449283;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1532353780;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1532456624;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1548236405;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1548265937;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1548420339;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1548943934;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public DateTimeZone readOptionalTimeZone() throws IOException;1549336917;Read an optional {@linkplain DateTimeZone}.;public DateTimeZone readOptionalTimeZone() throws IOException {_        if (readBoolean()) {_            return DateTimeZone.forID(readString())__        }_        return null__    };read,an,optional,linkplain,date,time,zone;public,date,time,zone,read,optional,time,zone,throws,ioexception,if,read,boolean,return,date,time,zone,for,id,read,string,return,null
StreamInput -> public List<String> readStringList() throws IOException;1548265937;Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.__@return the list of strings_@throws IOException if an I/O exception occurs reading the list;public List<String> readStringList() throws IOException {_        return readList(StreamInput::readString)__    };reads,a,list,of,strings,the,list,is,expected,to,have,been,written,using,link,stream,output,write,string,collection,collection,return,the,list,of,strings,throws,ioexception,if,an,i,o,exception,occurs,reading,the,list;public,list,string,read,string,list,throws,ioexception,return,read,list,stream,input,read,string
StreamInput -> public List<String> readStringList() throws IOException;1548420339;Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.__@return the list of strings_@throws IOException if an I/O exception occurs reading the list;public List<String> readStringList() throws IOException {_        return readList(StreamInput::readString)__    };reads,a,list,of,strings,the,list,is,expected,to,have,been,written,using,link,stream,output,write,string,collection,collection,return,the,list,of,strings,throws,ioexception,if,an,i,o,exception,occurs,reading,the,list;public,list,string,read,string,list,throws,ioexception,return,read,list,stream,input,read,string
StreamInput -> public List<String> readStringList() throws IOException;1548943934;Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.__@return the list of strings_@throws IOException if an I/O exception occurs reading the list;public List<String> readStringList() throws IOException {_        return readList(StreamInput::readString)__    };reads,a,list,of,strings,the,list,is,expected,to,have,been,written,using,link,stream,output,write,string,collection,collection,return,the,list,of,strings,throws,ioexception,if,an,i,o,exception,occurs,reading,the,list;public,list,string,read,string,list,throws,ioexception,return,read,list,stream,input,read,string
StreamInput -> public List<String> readStringList() throws IOException;1549336917;Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.__@return the list of strings_@throws IOException if an I/O exception occurs reading the list;public List<String> readStringList() throws IOException {_        return readList(StreamInput::readString)__    };reads,a,list,of,strings,the,list,is,expected,to,have,been,written,using,link,stream,output,write,string,collection,collection,return,the,list,of,strings,throws,ioexception,if,an,i,o,exception,occurs,reading,the,list;public,list,string,read,string,list,throws,ioexception,return,read,list,stream,input,read,string
StreamInput -> private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,                                                                   IntFunction<C> constructor) throws IOException;1532456624;Reads a collection of objects;private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,_                                                                  IntFunction<C> constructor) throws IOException {_        int count = readArraySize()__        C builder = constructor.apply(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,collection,of,objects;private,t,c,extends,collection,super,t,c,read,collection,writeable,reader,t,reader,int,function,c,constructor,throws,ioexception,int,count,read,array,size,c,builder,constructor,apply,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,                                                                   IntFunction<C> constructor) throws IOException;1548236405;Reads a collection of objects;private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,_                                                                  IntFunction<C> constructor) throws IOException {_        int count = readArraySize()__        C builder = constructor.apply(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,collection,of,objects;private,t,c,extends,collection,super,t,c,read,collection,writeable,reader,t,reader,int,function,c,constructor,throws,ioexception,int,count,read,array,size,c,builder,constructor,apply,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,                                                                   IntFunction<C> constructor) throws IOException;1548265937;Reads a collection of objects;private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,_                                                                  IntFunction<C> constructor) throws IOException {_        int count = readArraySize()__        C builder = constructor.apply(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,collection,of,objects;private,t,c,extends,collection,super,t,c,read,collection,writeable,reader,t,reader,int,function,c,constructor,throws,ioexception,int,count,read,array,size,c,builder,constructor,apply,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,                                                                   IntFunction<C> constructor) throws IOException;1548420339;Reads a collection of objects;private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,_                                                                  IntFunction<C> constructor) throws IOException {_        int count = readArraySize()__        C builder = constructor.apply(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,collection,of,objects;private,t,c,extends,collection,super,t,c,read,collection,writeable,reader,t,reader,int,function,c,constructor,throws,ioexception,int,count,read,array,size,c,builder,constructor,apply,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,                                                                   IntFunction<C> constructor) throws IOException;1548943934;Reads a collection of objects;private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,_                                                                  IntFunction<C> constructor) throws IOException {_        int count = readArraySize()__        C builder = constructor.apply(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,collection,of,objects;private,t,c,extends,collection,super,t,c,read,collection,writeable,reader,t,reader,int,function,c,constructor,throws,ioexception,int,count,read,array,size,c,builder,constructor,apply,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,                                                                   IntFunction<C> constructor) throws IOException;1549336917;Reads a collection of objects;private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,_                                                                  IntFunction<C> constructor) throws IOException {_        int count = readArraySize()__        C builder = constructor.apply(count)__        for (int i=0_ i<count_ i++) {_            builder.add(reader.read(this))__        }_        return builder__    };reads,a,collection,of,objects;private,t,c,extends,collection,super,t,c,read,collection,writeable,reader,t,reader,int,function,c,constructor,throws,ioexception,int,count,read,array,size,c,builder,constructor,apply,count,for,int,i,0,i,count,i,builder,add,reader,read,this,return,builder
StreamInput -> @Override     public abstract void close() throws IOException_;1524684173;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> @Override     public abstract void close() throws IOException_;1526449283;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> @Override     public abstract void close() throws IOException_;1532353780;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> @Override     public abstract void close() throws IOException_;1532456624;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> @Override     public abstract void close() throws IOException_;1548236405;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> @Override     public abstract void close() throws IOException_;1548265937;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> @Override     public abstract void close() throws IOException_;1548420339;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> @Override     public abstract void close() throws IOException_;1548943934;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> @Override     public abstract void close() throws IOException_;1549336917;Closes the stream to further operations.;@Override_    public abstract void close() throws IOException_;closes,the,stream,to,further,operations;override,public,abstract,void,close,throws,ioexception
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1524684173;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1526449283;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1532353780;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1532456624;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1548236405;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1548265937;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1548420339;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1548943934;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public DateTimeZone readTimeZone() throws IOException;1549336917;Read a {@linkplain DateTimeZone}.;public DateTimeZone readTimeZone() throws IOException {_        return DateTimeZone.forID(readString())__    };read,a,linkplain,date,time,zone;public,date,time,zone,read,time,zone,throws,ioexception,return,date,time,zone,for,id,read,string
StreamInput -> public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException;1532456624;Reads a set of objects;public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, HashSet::new)__    };reads,a,set,of,objects;public,t,set,t,read,set,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,hash,set,new
StreamInput -> public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException;1548236405;Reads a set of objects;public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, HashSet::new)__    };reads,a,set,of,objects;public,t,set,t,read,set,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,hash,set,new
StreamInput -> public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException;1548265937;Reads a set of objects;public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, HashSet::new)__    };reads,a,set,of,objects;public,t,set,t,read,set,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,hash,set,new
StreamInput -> public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException;1548420339;Reads a set of objects;public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, HashSet::new)__    };reads,a,set,of,objects;public,t,set,t,read,set,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,hash,set,new
StreamInput -> public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException;1548943934;Reads a set of objects;public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, HashSet::new)__    };reads,a,set,of,objects;public,t,set,t,read,set,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,hash,set,new
StreamInput -> public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException;1549336917;Reads a set of objects;public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {_        return readCollection(reader, HashSet::new)__    };reads,a,set,of,objects;public,t,set,t,read,set,writeable,reader,t,reader,throws,ioexception,return,read,collection,reader,hash,set,new
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1524684173;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1526449283;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1532353780;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1532456624;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1548236405;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1548265937;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1548420339;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1548943934;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> @Nullable     public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException;1549336917;Reads an optional {@link NamedWriteable}.;@Nullable_    public <C extends NamedWriteable> C readOptionalNamedWriteable(Class<C> categoryClass) throws IOException {_        if (readBoolean()) {_            return readNamedWriteable(categoryClass)__        }_        return null__    };reads,an,optional,link,named,writeable;nullable,public,c,extends,named,writeable,c,read,optional,named,writeable,class,c,category,class,throws,ioexception,if,read,boolean,return,read,named,writeable,category,class,return,null
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1524684173;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1526449283;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1532353780;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1532456624;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1548236405;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1548265937;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1548420339;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1548943934;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public BytesReference readBytesReference(int length) throws IOException;1549336917;Reads a bytes reference from this stream, might hold an actual reference to the underlying_bytes of the stream.;public BytesReference readBytesReference(int length) throws IOException {_        if (length == 0) {_            return BytesArray.EMPTY__        }_        byte[] bytes = new byte[length]__        readBytes(bytes, 0, length)__        return new BytesArray(bytes, 0, length)__    };reads,a,bytes,reference,from,this,stream,might,hold,an,actual,reference,to,the,underlying,bytes,of,the,stream;public,bytes,reference,read,bytes,reference,int,length,throws,ioexception,if,length,0,return,bytes,array,empty,byte,bytes,new,byte,length,read,bytes,bytes,0,length,return,new,bytes,array,bytes,0,length
StreamInput -> public final boolean readBoolean() throws IOException;1524684173;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public final boolean readBoolean() throws IOException;1526449283;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public final boolean readBoolean() throws IOException;1532353780;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public final boolean readBoolean() throws IOException;1532456624;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public final boolean readBoolean() throws IOException;1548236405;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public final boolean readBoolean() throws IOException;1548265937;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public final boolean readBoolean() throws IOException;1548420339;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public final boolean readBoolean() throws IOException;1548943934;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public final boolean readBoolean() throws IOException;1549336917;Reads a boolean.;public final boolean readBoolean() throws IOException {_        return readBoolean(readByte())__    };reads,a,boolean;public,final,boolean,read,boolean,throws,ioexception,return,read,boolean,read,byte
StreamInput -> public ZoneId readZoneId() throws IOException;1548236405;Read a {@linkplain DateTimeZone}.;public ZoneId readZoneId() throws IOException {_        return ZoneId.of(readString())__    };read,a,linkplain,date,time,zone;public,zone,id,read,zone,id,throws,ioexception,return,zone,id,of,read,string
StreamInput -> public ZoneId readZoneId() throws IOException;1548265937;Read a {@linkplain DateTimeZone}.;public ZoneId readZoneId() throws IOException {_        return ZoneId.of(readString())__    };read,a,linkplain,date,time,zone;public,zone,id,read,zone,id,throws,ioexception,return,zone,id,of,read,string
StreamInput -> public ZoneId readZoneId() throws IOException;1548420339;Read a {@linkplain DateTimeZone}.;public ZoneId readZoneId() throws IOException {_        return ZoneId.of(readString())__    };read,a,linkplain,date,time,zone;public,zone,id,read,zone,id,throws,ioexception,return,zone,id,of,read,string
StreamInput -> public ZoneId readZoneId() throws IOException;1548943934;Read a {@linkplain DateTimeZone}.;public ZoneId readZoneId() throws IOException {_        return ZoneId.of(readString())__    };read,a,linkplain,date,time,zone;public,zone,id,read,zone,id,throws,ioexception,return,zone,id,of,read,string
StreamInput -> public ZoneId readZoneId() throws IOException;1549336917;Read a {@linkplain DateTimeZone}.;public ZoneId readZoneId() throws IOException {_        return ZoneId.of(readString())__    };read,a,linkplain,date,time,zone;public,zone,id,read,zone,id,throws,ioexception,return,zone,id,of,read,string
