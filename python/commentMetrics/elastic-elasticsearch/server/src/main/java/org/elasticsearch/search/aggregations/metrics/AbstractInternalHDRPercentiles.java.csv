commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;11;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(format).     out.writeDoubleArray(keys).     out.writeLong(state.getHighestToLowestValueRatio()).     ByteBuffer stateBuffer = ByteBuffer.allocate(state.getNeededByteBufferCapacity()).     final int serializedLen = state.encodeIntoCompressedByteBuffer(stateBuffer).     out.writeVInt(serializedLen).     out.writeBytes(stateBuffer.array(), 0, serializedLen).     out.writeBoolean(keyed). }
false;public;1;4;;@Override public double value(String name) {     return value(Double.parseDouble(name)). }
false;;0;3;;DocValueFormat formatter() {     return format. }
false;public,abstract;1;1;;public abstract double value(double key).
false;public;0;3;;public long getEstimatedMemoryFootprint() {     return state.getEstimatedFootprintInBytes(). }
false;;0;3;;DoubleHistogram getState() {     return state. }
false;public;2;13;;@Override public AbstractInternalHDRPercentiles doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {     DoubleHistogram merged = null.     for (InternalAggregation aggregation : aggregations) {         final AbstractInternalHDRPercentiles percentiles = (AbstractInternalHDRPercentiles) aggregation.         if (merged == null) {             merged = new DoubleHistogram(percentiles.state).             merged.setAutoResize(true).         }         merged.add(percentiles.state).     }     return createReduced(getName(), keys, merged, keyed, pipelineAggregators(), getMetaData()). }
false;protected,abstract;6;2;;protected abstract AbstractInternalHDRPercentiles createReduced(String name, double[] keys, DoubleHistogram merged, boolean keyed, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData).
false;public;2;29;;@Override public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     if (keyed) {         builder.startObject(CommonFields.VALUES.getPreferredName()).         for (int i = 0. i < keys.length. ++i) {             String key = String.valueOf(keys[i]).             double value = value(keys[i]).             builder.field(key, state.getTotalCount() == 0 ? null : value).             if (format != DocValueFormat.RAW && state.getTotalCount() > 0) {                 builder.field(key + "_as_string", format.format(value).toString()).             }         }         builder.endObject().     } else {         builder.startArray(CommonFields.VALUES.getPreferredName()).         for (int i = 0. i < keys.length. i++) {             double value = value(keys[i]).             builder.startObject().             builder.field(CommonFields.KEY.getPreferredName(), keys[i]).             builder.field(CommonFields.VALUE.getPreferredName(), state.getTotalCount() == 0 ? null : value).             if (format != DocValueFormat.RAW && state.getTotalCount() > 0) {                 builder.field(CommonFields.VALUE_AS_STRING.getPreferredName(), format.format(value).toString()).             }             builder.endObject().         }         builder.endArray().     }     return builder. }
false;protected;1;7;;@Override protected boolean doEquals(Object obj) {     AbstractInternalHDRPercentiles that = (AbstractInternalHDRPercentiles) obj.     return keyed == that.keyed && Arrays.equals(keys, that.keys) && Objects.equals(state, that.state). }
false;protected;0;7;;@Override protected int doHashCode() {     // TODO: upgrade the HDRHistogram library     return Objects.hash(keyed, Arrays.hashCode(keys), state.getIntegerToDoubleValueConversionRatio(), state.getTotalCount()). }
