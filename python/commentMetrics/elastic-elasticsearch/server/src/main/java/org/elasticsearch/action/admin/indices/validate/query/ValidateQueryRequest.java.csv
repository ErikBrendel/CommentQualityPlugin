commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = super.validate().     if (query == null) {         validationException = ValidateActions.addValidationError("query cannot be null", validationException).     }     return validationException. }
true;public;0;3;/**  * The query to validate.  */ ;/**  * The query to validate.  */ public QueryBuilder query() {     return query. }
false;public;1;4;;public ValidateQueryRequest query(QueryBuilder query) {     this.query = query.     return this. }
true;public;0;4;/**  * The types of documents the query will run against. Defaults to all types.  *  * @deprecated Types are in the process of being removed. Instead of using a type, prefer to  * filter on a field on the document.  */ ;/**  * The types of documents the query will run against. Defaults to all types.  *  * @deprecated Types are in the process of being removed. Instead of using a type, prefer to  * filter on a field on the document.  */ @Deprecated public String[] types() {     return this.types. }
true;public;1;5;/**  * The types of documents the query will run against. Defaults to all types.  *  * @deprecated Types are in the process of being removed. Instead of using a type, prefer to  * filter on a field on the document.  */ ;/**  * The types of documents the query will run against. Defaults to all types.  *  * @deprecated Types are in the process of being removed. Instead of using a type, prefer to  * filter on a field on the document.  */ @Deprecated public ValidateQueryRequest types(String... types) {     this.types = types.     return this. }
true;public;1;3;/**  * Indicate if detailed information about query is requested  */ ;/**  * Indicate if detailed information about query is requested  */ public void explain(boolean explain) {     this.explain = explain. }
true;public;0;3;/**  * Indicates if detailed information about query is requested  */ ;/**  * Indicates if detailed information about query is requested  */ public boolean explain() {     return explain. }
true;public;1;3;/**  * Indicates whether the query should be rewritten into primitive queries  */ ;/**  * Indicates whether the query should be rewritten into primitive queries  */ public void rewrite(boolean rewrite) {     this.rewrite = rewrite. }
true;public;0;3;/**  * Indicates whether the query should be rewritten into primitive queries  */ ;/**  * Indicates whether the query should be rewritten into primitive queries  */ public boolean rewrite() {     return rewrite. }
true;public;1;3;/**  * Indicates whether the query should be validated on all shards instead of one random shard  */ ;/**  * Indicates whether the query should be validated on all shards instead of one random shard  */ public void allShards(boolean allShards) {     this.allShards = allShards. }
true;public;0;3;/**  * Indicates whether the query should be validated on all shards instead of one random shard  */ ;/**  * Indicates whether the query should be validated on all shards instead of one random shard  */ public boolean allShards() {     return allShards. }
false;public;1;15;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     query = in.readNamedWriteable(QueryBuilder.class).     int typesSize = in.readVInt().     if (typesSize > 0) {         types = new String[typesSize].         for (int i = 0. i < typesSize. i++) {             types[i] = in.readString().         }     }     explain = in.readBoolean().     rewrite = in.readBoolean().     allShards = in.readBoolean(). }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeNamedWriteable(query).     out.writeVInt(types.length).     for (String type : types) {         out.writeString(type).     }     out.writeBoolean(explain).     out.writeBoolean(rewrite).     out.writeBoolean(allShards). }
false;public;0;5;;@Override public String toString() {     return "[" + Arrays.toString(indices) + "]" + Arrays.toString(types) + ", query[" + query + "], explain:" + explain + ", rewrite:" + rewrite + ", all_shards:" + allShards. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("query").     query.toXContent(builder, params).     return builder.endObject(). }
