commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;15;/**  * Validate the name for an index against some static rules and a cluster state.  */ ;/**  * Validate the name for an index against some static rules and a cluster state.  */ public static void validateIndexName(String index, ClusterState state) {     validateIndexOrAliasName(index, InvalidIndexNameException::new).     if (!index.toLowerCase(Locale.ROOT).equals(index)) {         throw new InvalidIndexNameException(index, "must be lowercase").     }     if (state.routingTable().hasIndex(index)) {         throw new ResourceAlreadyExistsException(state.routingTable().index(index).getIndex()).     }     if (state.metaData().hasIndex(index)) {         throw new ResourceAlreadyExistsException(state.metaData().index(index).getIndex()).     }     if (state.metaData().hasAlias(index)) {         throw new InvalidIndexNameException(index, "already exists as alias").     } }
true;public,static;2;27;/**  * Validate the name for an index or alias against some static rules.  */ ;/**  * Validate the name for an index or alias against some static rules.  */ public static void validateIndexOrAliasName(String index, BiFunction<String, String, ? extends RuntimeException> exceptionCtor) {     if (!Strings.validFileName(index)) {         throw exceptionCtor.apply(index, "must not contain the following characters " + Strings.INVALID_FILENAME_CHARS).     }     if (index.contains("#")) {         throw exceptionCtor.apply(index, "must not contain '#'").     }     if (index.contains(":")) {         throw exceptionCtor.apply(index, "must not contain ':'").     }     if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {         throw exceptionCtor.apply(index, "must not start with '_', '-', or '+'").     }     int byteCount = 0.     try {         byteCount = index.getBytes("UTF-8").length.     } catch (UnsupportedEncodingException e) {         // UTF-8 should always be supported, but rethrow this if it is not for some reason         throw new ElasticsearchException("Unable to determine length of index name", e).     }     if (byteCount > MAX_INDEX_NAME_BYTES) {         throw exceptionCtor.apply(index, "index name is too long, (" + byteCount + " > " + MAX_INDEX_NAME_BYTES + ")").     }     if (index.equals(".") || index.equals("..")) {         throw exceptionCtor.apply(index, "must not be '.' or '..'").     } }
true;public;2;17;/**  * Creates an index in the cluster state and waits for the specified number of shard copies to  * become active (as specified in {@link CreateIndexClusterStateUpdateRequest#waitForActiveShards()})  * before sending the response on the listener. If the index creation was successfully applied on  * the cluster state, then {@link CreateIndexClusterStateUpdateResponse#isAcknowledged()} will return  * true, otherwise it will return false and no waiting will occur for started shards  * ({@link CreateIndexClusterStateUpdateResponse#isShardsAcknowledged()} will also be false).  If the index  * creation in the cluster state was successful and the requisite shard copies were started before  * the timeout, then {@link CreateIndexClusterStateUpdateResponse#isShardsAcknowledged()} will  * return true, otherwise if the operation timed out, then it will return false.  *  * @param request the index creation cluster state update request  * @param listener the listener on which to send the index creation cluster state update response  */ ;/**  * Creates an index in the cluster state and waits for the specified number of shard copies to  * become active (as specified in {@link CreateIndexClusterStateUpdateRequest#waitForActiveShards()})  * before sending the response on the listener. If the index creation was successfully applied on  * the cluster state, then {@link CreateIndexClusterStateUpdateResponse#isAcknowledged()} will return  * true, otherwise it will return false and no waiting will occur for started shards  * ({@link CreateIndexClusterStateUpdateResponse#isShardsAcknowledged()} will also be false).  If the index  * creation in the cluster state was successful and the requisite shard copies were started before  * the timeout, then {@link CreateIndexClusterStateUpdateResponse#isShardsAcknowledged()} will  * return true, otherwise if the operation timed out, then it will return false.  *  * @param request the index creation cluster state update request  * @param listener the listener on which to send the index creation cluster state update response  */ public void createIndex(final CreateIndexClusterStateUpdateRequest request, final ActionListener<CreateIndexClusterStateUpdateResponse> listener) {     onlyCreateIndex(request, ActionListener.wrap(response -> {         if (response.isAcknowledged()) {             activeShardsObserver.waitForActiveShards(new String[] { request.index() }, request.waitForActiveShards(), request.ackTimeout(), shardsAcknowledged -> {                 if (shardsAcknowledged == false) {                     logger.debug("[{}] index created, but the operation timed out while waiting for " + "enough shards to be started.", request.index()).                 }                 listener.onResponse(new CreateIndexClusterStateUpdateResponse(response.isAcknowledged(), shardsAcknowledged)).             }, listener::onFailure).         } else {             listener.onResponse(new CreateIndexClusterStateUpdateResponse(false, false)).         }     }, listener::onFailure)). }
false;private;2;20;;private void onlyCreateIndex(final CreateIndexClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {     Settings.Builder updatedSettingsBuilder = Settings.builder().     Settings build = updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build().     // we do validate here - index setting must be consistent     indexScopedSettings.validate(build, true).     request.settings(build).     clusterService.submitStateUpdateTask("create-index [" + request.index() + "], cause [" + request.cause() + "]", new IndexCreationTask(logger, allocationService, request, listener, indicesService, aliasValidator, xContentRegistry, settings, this::validate, indexScopedSettings)). }
false;;2;1;;void validate(CreateIndexClusterStateUpdateRequest request, ClusterState state).
false;protected;1;4;;@Override protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {     return new ClusterStateUpdateResponse(acknowledged). }
false;public;1;310;;@Override public ClusterState execute(ClusterState currentState) throws Exception {     Index createdIndex = null.     String removalExtraInfo = null.     IndexRemovalReason removalReason = IndexRemovalReason.FAILURE.     try {         validator.validate(request, currentState).         for (Alias alias : request.aliases()) {             aliasValidator.validateAlias(alias, request.index(), currentState.metaData()).         }         // we only find a template when its an API call (a new index)         // find templates, highest order are better matching         List<IndexTemplateMetaData> templates = MetaDataIndexTemplateService.findTemplates(currentState.metaData(), request.index()).         Map<String, Map<String, String>> customs = new HashMap<>().         // add the request mapping         Map<String, Map<String, Object>> mappings = new HashMap<>().         Map<String, AliasMetaData> templatesAliases = new HashMap<>().         List<String> templateNames = new ArrayList<>().         for (Map.Entry<String, String> entry : request.mappings().entrySet()) {             mappings.put(entry.getKey(), MapperService.parseMapping(xContentRegistry, entry.getValue())).         }         final Index recoverFromIndex = request.recoverFrom().         if (recoverFromIndex == null) {             // apply templates, merging the mappings into the request mapping if exists             for (IndexTemplateMetaData template : templates) {                 templateNames.add(template.getName()).                 for (ObjectObjectCursor<String, CompressedXContent> cursor : template.mappings()) {                     String mappingString = cursor.value.string().                     if (mappings.containsKey(cursor.key)) {                         XContentHelper.mergeDefaults(mappings.get(cursor.key), MapperService.parseMapping(xContentRegistry, mappingString)).                     } else if (mappings.size() == 1 && cursor.key.equals(MapperService.SINGLE_MAPPING_NAME)) {                         // Typeless template with typed mapping                         Map<String, Object> templateMapping = MapperService.parseMapping(xContentRegistry, mappingString).                         assert templateMapping.size() == 1 : templateMapping.                         assert cursor.key.equals(templateMapping.keySet().iterator().next()) : cursor.key + " != " + templateMapping.                         Map.Entry<String, Map<String, Object>> mappingEntry = mappings.entrySet().iterator().next().                         templateMapping = Collections.singletonMap(// reuse type name from the mapping                         mappingEntry.getKey(), // but actual mappings from the template                         templateMapping.values().iterator().next()).                         XContentHelper.mergeDefaults(mappingEntry.getValue(), templateMapping).                     } else if (template.mappings().size() == 1 && mappings.containsKey(MapperService.SINGLE_MAPPING_NAME)) {                         // Typed template with typeless mapping                         Map<String, Object> templateMapping = MapperService.parseMapping(xContentRegistry, mappingString).                         assert templateMapping.size() == 1 : templateMapping.                         assert cursor.key.equals(templateMapping.keySet().iterator().next()) : cursor.key + " != " + templateMapping.                         Map<String, Object> mapping = mappings.get(MapperService.SINGLE_MAPPING_NAME).                         templateMapping = Collections.singletonMap(// make template mapping typeless                         MapperService.SINGLE_MAPPING_NAME, templateMapping.values().iterator().next()).                         XContentHelper.mergeDefaults(mapping, templateMapping).                     } else {                         mappings.put(cursor.key, MapperService.parseMapping(xContentRegistry, mappingString)).                     }                 }                 // handle aliases                 for (ObjectObjectCursor<String, AliasMetaData> cursor : template.aliases()) {                     AliasMetaData aliasMetaData = cursor.value.                     // ignore this one taken from the index template                     if (request.aliases().contains(new Alias(aliasMetaData.alias()))) {                         continue.                     }                     // if an alias with same name was already processed, ignore this one                     if (templatesAliases.containsKey(cursor.key)) {                         continue.                     }                     // name of the index that we are applying it to                     if (aliasMetaData.alias().contains("{index}")) {                         String templatedAlias = aliasMetaData.alias().replace("{index}", request.index()).                         aliasMetaData = AliasMetaData.newAliasMetaData(aliasMetaData, templatedAlias).                     }                     aliasValidator.validateAliasMetaData(aliasMetaData, request.index(), currentState.metaData()).                     templatesAliases.put(aliasMetaData.alias(), aliasMetaData).                 }             }         }         Settings.Builder indexSettingsBuilder = Settings.builder().         if (recoverFromIndex == null) {             // apply templates, here, in reverse order, since first ones are better matching             for (int i = templates.size() - 1. i >= 0. i--) {                 indexSettingsBuilder.put(templates.get(i).settings()).             }         }         // now, put the request settings, so they override templates         indexSettingsBuilder.put(request.settings()).         if (indexSettingsBuilder.get(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey()) == null) {             final DiscoveryNodes nodes = currentState.nodes().             final Version createdVersion = Version.min(Version.CURRENT, nodes.getSmallestNonClientNodeVersion()).             indexSettingsBuilder.put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(), createdVersion).         }         if (indexSettingsBuilder.get(SETTING_NUMBER_OF_SHARDS) == null) {             final int numberOfShards = getNumberOfShards(indexSettingsBuilder).             indexSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS, settings.getAsInt(SETTING_NUMBER_OF_SHARDS, numberOfShards)).         }         if (indexSettingsBuilder.get(SETTING_NUMBER_OF_REPLICAS) == null) {             indexSettingsBuilder.put(SETTING_NUMBER_OF_REPLICAS, settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, 1)).         }         if (settings.get(SETTING_AUTO_EXPAND_REPLICAS) != null && indexSettingsBuilder.get(SETTING_AUTO_EXPAND_REPLICAS) == null) {             indexSettingsBuilder.put(SETTING_AUTO_EXPAND_REPLICAS, settings.get(SETTING_AUTO_EXPAND_REPLICAS)).         }         if (indexSettingsBuilder.get(SETTING_CREATION_DATE) == null) {             indexSettingsBuilder.put(SETTING_CREATION_DATE, Instant.now().toEpochMilli()).         }         indexSettingsBuilder.put(IndexMetaData.SETTING_INDEX_PROVIDED_NAME, request.getProvidedName()).         indexSettingsBuilder.put(SETTING_INDEX_UUID, UUIDs.randomBase64UUID()).         final IndexMetaData.Builder tmpImdBuilder = IndexMetaData.builder(request.index()).         final Settings idxSettings = indexSettingsBuilder.build().         int numTargetShards = IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.get(idxSettings).         final int routingNumShards.         final Version indexVersionCreated = IndexMetaData.SETTING_INDEX_VERSION_CREATED.get(idxSettings).         final IndexMetaData sourceMetaData = recoverFromIndex == null ? null : currentState.metaData().getIndexSafe(recoverFromIndex).         if (sourceMetaData == null || sourceMetaData.getNumberOfShards() == 1) {             // or one that is valid in that case we can split into whatever and auto-generate a new factor.             if (IndexMetaData.INDEX_NUMBER_OF_ROUTING_SHARDS_SETTING.exists(idxSettings)) {                 routingNumShards = IndexMetaData.INDEX_NUMBER_OF_ROUTING_SHARDS_SETTING.get(idxSettings).             } else {                 routingNumShards = calculateNumRoutingShards(numTargetShards, indexVersionCreated).             }         } else {             assert IndexMetaData.INDEX_NUMBER_OF_ROUTING_SHARDS_SETTING.exists(indexSettingsBuilder.build()) == false : "index.number_of_routing_shards should not be present on the target index on resize".             routingNumShards = sourceMetaData.getRoutingNumShards().         }         // remove the setting it's temporary and is only relevant once we create the index         indexSettingsBuilder.remove(IndexMetaData.INDEX_NUMBER_OF_ROUTING_SHARDS_SETTING.getKey()).         tmpImdBuilder.setRoutingNumShards(routingNumShards).         if (recoverFromIndex != null) {             assert request.resizeType() != null.             prepareResizeIndexSettings(currentState, mappings.keySet(), indexSettingsBuilder, recoverFromIndex, request.index(), request.resizeType(), request.copySettings(), indexScopedSettings).         }         final Settings actualIndexSettings = indexSettingsBuilder.build().         tmpImdBuilder.settings(actualIndexSettings).         if (recoverFromIndex != null) {             /*                      * We need to arrange that the primary term on all the shards in the shrunken index is at least as large as                      * the maximum primary term on all the shards in the source index. This ensures that we have correct                      * document-level semantics regarding sequence numbers in the shrunken index.                      */             final long primaryTerm = IntStream.range(0, sourceMetaData.getNumberOfShards()).mapToLong(sourceMetaData::primaryTerm).max().getAsLong().             for (int shardId = 0. shardId < tmpImdBuilder.numberOfShards(). shardId++) {                 tmpImdBuilder.primaryTerm(shardId, primaryTerm).             }         }         // Set up everything, now locally create the index to see that things are ok, and apply         final IndexMetaData tmpImd = tmpImdBuilder.build().         ActiveShardCount waitForActiveShards = request.waitForActiveShards().         if (waitForActiveShards == ActiveShardCount.DEFAULT) {             waitForActiveShards = tmpImd.getWaitForActiveShards().         }         if (waitForActiveShards.validate(tmpImd.getNumberOfReplicas()) == false) {             throw new IllegalArgumentException("invalid wait_for_active_shards[" + request.waitForActiveShards() + "]: cannot be greater than number of shard copies [" + (tmpImd.getNumberOfReplicas() + 1) + "]").         }         // create the index here (on the master) to validate it can be created, as well as adding the mapping         final IndexService indexService = indicesService.createIndex(tmpImd, Collections.emptyList()).         createdIndex = indexService.index().         // now add the mappings         MapperService mapperService = indexService.mapperService().         try {             mapperService.merge(mappings, MergeReason.MAPPING_UPDATE).         } catch (Exception e) {             removalExtraInfo = "failed on parsing default mapping/mappings on index creation".             throw e.         }         if (request.recoverFrom() == null) {             // now that the mapping is merged we can validate the index sort.             // we cannot validate for index shrinking since the mapping is empty             // at this point. The validation will take place later in the process             // (when all shards are copied in a single place).             indexService.getIndexSortSupplier().get().         }         // the context is only used for validation so it's fine to pass fake values for the shard id and the current         // timestamp         final QueryShardContext queryShardContext = indexService.newQueryShardContext(0, null, () -> 0L, null).         for (Alias alias : request.aliases()) {             if (Strings.hasLength(alias.filter())) {                 aliasValidator.validateAliasFilter(alias.name(), alias.filter(), queryShardContext, xContentRegistry).             }         }         for (AliasMetaData aliasMetaData : templatesAliases.values()) {             if (aliasMetaData.filter() != null) {                 aliasValidator.validateAliasFilter(aliasMetaData.alias(), aliasMetaData.filter().uncompressed(), queryShardContext, xContentRegistry).             }         }         // now, update the mappings with the actual source         Map<String, MappingMetaData> mappingsMetaData = new HashMap<>().         for (DocumentMapper mapper : Arrays.asList(mapperService.documentMapper(), mapperService.documentMapper(MapperService.DEFAULT_MAPPING))) {             if (mapper != null) {                 MappingMetaData mappingMd = new MappingMetaData(mapper).                 mappingsMetaData.put(mapper.type(), mappingMd).             }         }         final IndexMetaData.Builder indexMetaDataBuilder = IndexMetaData.builder(request.index()).settings(actualIndexSettings).setRoutingNumShards(routingNumShards).         for (int shardId = 0. shardId < tmpImd.getNumberOfShards(). shardId++) {             indexMetaDataBuilder.primaryTerm(shardId, tmpImd.primaryTerm(shardId)).         }         for (MappingMetaData mappingMd : mappingsMetaData.values()) {             indexMetaDataBuilder.putMapping(mappingMd).         }         for (AliasMetaData aliasMetaData : templatesAliases.values()) {             indexMetaDataBuilder.putAlias(aliasMetaData).         }         for (Alias alias : request.aliases()) {             AliasMetaData aliasMetaData = AliasMetaData.builder(alias.name()).filter(alias.filter()).indexRouting(alias.indexRouting()).searchRouting(alias.searchRouting()).writeIndex(alias.writeIndex()).build().             indexMetaDataBuilder.putAlias(aliasMetaData).         }         for (Map.Entry<String, Map<String, String>> customEntry : customs.entrySet()) {             indexMetaDataBuilder.putCustom(customEntry.getKey(), customEntry.getValue()).         }         indexMetaDataBuilder.state(request.state()).         final IndexMetaData indexMetaData.         try {             indexMetaData = indexMetaDataBuilder.build().         } catch (Exception e) {             removalExtraInfo = "failed to build index metadata".             throw e.         }         indexService.getIndexEventListener().beforeIndexAddedToCluster(indexMetaData.getIndex(), indexMetaData.getSettings()).         MetaData newMetaData = MetaData.builder(currentState.metaData()).put(indexMetaData, false).build().         logger.info("[{}] creating index, cause [{}], templates {}, shards [{}]/[{}], mappings {}", request.index(), request.cause(), templateNames, indexMetaData.getNumberOfShards(), indexMetaData.getNumberOfReplicas(), mappings.keySet()).         ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks()).         if (!request.blocks().isEmpty()) {             for (ClusterBlock block : request.blocks()) {                 blocks.addIndexBlock(request.index(), block).             }         }         blocks.updateBlocks(indexMetaData).         ClusterState updatedState = ClusterState.builder(currentState).blocks(blocks).metaData(newMetaData).build().         if (request.state() == State.OPEN) {             RoutingTable.Builder routingTableBuilder = RoutingTable.builder(updatedState.routingTable()).addAsNew(updatedState.metaData().index(request.index())).             updatedState = allocationService.reroute(ClusterState.builder(updatedState).routingTable(routingTableBuilder.build()).build(), "index [" + request.index() + "] created").         }         removalExtraInfo = "cleaning up after validating index on master".         removalReason = IndexRemovalReason.NO_LONGER_ASSIGNED.         return updatedState.     } finally {         if (createdIndex != null) {             // Index was already partially created - need to clean up             indicesService.removeIndex(createdIndex, removalReason, removalExtraInfo).         }     } }
false;static;1;14;;static int getNumberOfShards(final Settings.Builder indexSettingsBuilder) {     // TODO: this logic can be removed when the current major version is 8     // TODO: https://github.com/elastic/elasticsearch/issues/38556     // assert Version.CURRENT.major == 7.     final int numberOfShards.     final Version indexVersionCreated = Version.fromId(Integer.parseInt(indexSettingsBuilder.get(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey()))).     if (indexVersionCreated.before(Version.V_7_0_0)) {         numberOfShards = 5.     } else {         numberOfShards = 1.     }     return numberOfShards. }
false;public;2;9;;@Override public void onFailure(String source, Exception e) {     if (e instanceof ResourceAlreadyExistsException) {         logger.trace(() -> new ParameterizedMessage("[{}] failed to create", request.index()), e).     } else {         logger.debug(() -> new ParameterizedMessage("[{}] failed to create", request.index()), e).     }     super.onFailure(source, e). }
false;private;2;4;;private void validate(CreateIndexClusterStateUpdateRequest request, ClusterState state) {     validateIndexName(request.index(), state).     validateIndexSettings(request.index(), request.settings(), state, forbidPrivateIndexSettings). }
false;public;4;13;;public void validateIndexSettings(String indexName, final Settings settings, final ClusterState clusterState, final boolean forbidPrivateIndexSettings) throws IndexCreationException {     List<String> validationErrors = getIndexSettingsValidationErrors(settings, forbidPrivateIndexSettings).     Optional<String> shardAllocation = checkShardLimit(settings, clusterState).     shardAllocation.ifPresent(validationErrors::add).     if (validationErrors.isEmpty() == false) {         ValidationException validationException = new ValidationException().         validationException.addValidationErrors(validationErrors).         throw new IndexCreationException(indexName, validationException).     } }
true;static;2;6;/**  * Checks whether an index can be created without going over the cluster shard limit.  *  * @param settings The settings of the index to be created.  * @param clusterState The current cluster state.  * @return If present, an error message to be used to reject index creation. If empty, a signal that this operation may be carried out.  */ ;/**  * Checks whether an index can be created without going over the cluster shard limit.  *  * @param settings The settings of the index to be created.  * @param clusterState The current cluster state.  * @return If present, an error message to be used to reject index creation. If empty, a signal that this operation may be carried out.  */ static Optional<String> checkShardLimit(Settings settings, ClusterState clusterState) {     int shardsToCreate = IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.get(settings) * (1 + IndexMetaData.INDEX_NUMBER_OF_REPLICAS_SETTING.get(settings)).     return IndicesService.checkShardLimit(shardsToCreate, clusterState). }
false;;2;24;;List<String> getIndexSettingsValidationErrors(final Settings settings, final boolean forbidPrivateIndexSettings) {     String customPath = IndexMetaData.INDEX_DATA_PATH_SETTING.get(settings).     List<String> validationErrors = new ArrayList<>().     if (Strings.isEmpty(customPath) == false && env.sharedDataFile() == null) {         validationErrors.add("path.shared_data must be set in order to use custom data paths").     } else if (Strings.isEmpty(customPath) == false) {         Path resolvedPath = PathUtils.get(new Path[] { env.sharedDataFile() }, customPath).         if (resolvedPath == null) {             validationErrors.add("custom path [" + customPath + "] is not a sub-path of path.shared_data [" + env.sharedDataFile() + "]").         }     }     if (forbidPrivateIndexSettings) {         for (final String key : settings.keySet()) {             final Setting<?> setting = indexScopedSettings.get(key).             if (setting == null) {                 assert indexScopedSettings.isPrivateSetting(key).             } else if (setting.isPrivateIndex()) {                 validationErrors.add("private index setting [" + key + "] can not be set explicitly").             }         }     }     return validationErrors. }
true;static;5;32;/**  * Validates the settings and mappings for shrinking an index.  * @return the list of nodes at least one instance of the source index shards are allocated  */ ;/**  * Validates the settings and mappings for shrinking an index.  * @return the list of nodes at least one instance of the source index shards are allocated  */ static List<String> validateShrinkIndex(ClusterState state, String sourceIndex, Set<String> targetIndexMappingsTypes, String targetIndexName, Settings targetIndexSettings) {     IndexMetaData sourceMetaData = validateResize(state, sourceIndex, targetIndexMappingsTypes, targetIndexName, targetIndexSettings).     assert IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.exists(targetIndexSettings).     IndexMetaData.selectShrinkShards(0, sourceMetaData, IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.get(targetIndexSettings)).     if (sourceMetaData.getNumberOfShards() == 1) {         throw new IllegalArgumentException("can't shrink an index with only one shard").     }     // now check that index is all on one node     final IndexRoutingTable table = state.routingTable().index(sourceIndex).     Map<String, AtomicInteger> nodesToNumRouting = new HashMap<>().     int numShards = sourceMetaData.getNumberOfShards().     for (ShardRouting routing : table.shardsWithState(ShardRoutingState.STARTED)) {         nodesToNumRouting.computeIfAbsent(routing.currentNodeId(), (s) -> new AtomicInteger(0)).incrementAndGet().     }     List<String> nodesToAllocateOn = new ArrayList<>().     for (Map.Entry<String, AtomicInteger> entries : nodesToNumRouting.entrySet()) {         int numAllocations = entries.getValue().get().         assert numAllocations <= numShards : "wait what? " + numAllocations + " is > than num shards " + numShards.         if (numAllocations == numShards) {             nodesToAllocateOn.add(entries.getKey()).         }     }     if (nodesToAllocateOn.isEmpty()) {         throw new IllegalStateException("index " + sourceIndex + " must have all shards allocated on the same node to shrink index").     }     return nodesToAllocateOn. }
false;static;5;13;;static void validateSplitIndex(ClusterState state, String sourceIndex, Set<String> targetIndexMappingsTypes, String targetIndexName, Settings targetIndexSettings) {     IndexMetaData sourceMetaData = validateResize(state, sourceIndex, targetIndexMappingsTypes, targetIndexName, targetIndexSettings).     IndexMetaData.selectSplitShard(0, sourceMetaData, IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.get(targetIndexSettings)).     if (sourceMetaData.getCreationVersion().before(Version.V_6_0_0_alpha1)) {         // since in 5.x we don't have a setting to artificially set the number of routing shards         throw new IllegalStateException("source index created version is too old to apply a split operation").     } }
false;static;5;29;;static IndexMetaData validateResize(ClusterState state, String sourceIndex, Set<String> targetIndexMappingsTypes, String targetIndexName, Settings targetIndexSettings) {     if (state.metaData().hasIndex(targetIndexName)) {         throw new ResourceAlreadyExistsException(state.metaData().index(targetIndexName).getIndex()).     }     final IndexMetaData sourceMetaData = state.metaData().index(sourceIndex).     if (sourceMetaData == null) {         throw new IndexNotFoundException(sourceIndex).     }     // ensure index is read-only     if (state.blocks().indexBlocked(ClusterBlockLevel.WRITE, sourceIndex) == false) {         throw new IllegalStateException("index " + sourceIndex + " must be read-only to resize index. use \"index.blocks.write=true\"").     }     if ((targetIndexMappingsTypes.size() > 1 || (targetIndexMappingsTypes.isEmpty() || targetIndexMappingsTypes.contains(MapperService.DEFAULT_MAPPING)) == false)) {         throw new IllegalArgumentException("mappings are not allowed when resizing indices" + ", all mappings are copied from the source index").     }     if (IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.exists(targetIndexSettings)) {         // this method applies all necessary checks ie. if the target shards are less than the source shards         // of if the source shards are divisible by the number of target shards         IndexMetaData.getRoutingFactor(sourceMetaData.getNumberOfShards(), IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.get(targetIndexSettings)).     }     return sourceMetaData. }
false;static;8;58;;static void prepareResizeIndexSettings(final ClusterState currentState, final Set<String> mappingKeys, final Settings.Builder indexSettingsBuilder, final Index resizeSourceIndex, final String resizeIntoName, final ResizeType type, final boolean copySettings, final IndexScopedSettings indexScopedSettings) {     final IndexMetaData sourceMetaData = currentState.metaData().index(resizeSourceIndex.getName()).     if (type == ResizeType.SHRINK) {         final List<String> nodesToAllocateOn = validateShrinkIndex(currentState, resizeSourceIndex.getName(), mappingKeys, resizeIntoName, indexSettingsBuilder.build()).         indexSettingsBuilder.put(IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING.getKey() + "_id", Strings.arrayToCommaDelimitedString(nodesToAllocateOn.toArray())).put("index.allocation.max_retries", 1).     } else if (type == ResizeType.SPLIT) {         validateSplitIndex(currentState, resizeSourceIndex.getName(), mappingKeys, resizeIntoName, indexSettingsBuilder.build()).     } else {         throw new IllegalStateException("unknown resize type is " + type).     }     final Settings.Builder builder = Settings.builder().     if (copySettings) {         // copy all settings and non-copyable settings and settings that have already been set (e.g., from the request)         for (final String key : sourceMetaData.getSettings().keySet()) {             final Setting<?> setting = indexScopedSettings.get(key).             if (setting == null) {                 assert indexScopedSettings.isPrivateSetting(key) : key.             } else if (setting.getProperties().contains(Setting.Property.NotCopyableOnResize)) {                 continue.             }             // do not override settings that have already been set (for example, from the request)             if (indexSettingsBuilder.keys().contains(key)) {                 continue.             }             builder.copy(key, sourceMetaData.getSettings()).         }     } else {         final Predicate<String> sourceSettingsPredicate = (s) -> (s.startsWith("index.similarity.") || s.startsWith("index.analysis.") || s.startsWith("index.sort.") || s.equals("index.soft_deletes.enabled")) && indexSettingsBuilder.keys().contains(s) == false.         builder.put(sourceMetaData.getSettings().filter(sourceSettingsPredicate)).     }     indexSettingsBuilder.put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(), sourceMetaData.getCreationVersion()).put(IndexMetaData.SETTING_VERSION_UPGRADED, sourceMetaData.getUpgradedVersion()).put(builder.build()).put(IndexMetaData.SETTING_ROUTING_PARTITION_SIZE, sourceMetaData.getRoutingPartitionSize()).put(IndexMetaData.INDEX_RESIZE_SOURCE_NAME.getKey(), resizeSourceIndex.getName()).put(IndexMetaData.INDEX_RESIZE_SOURCE_UUID.getKey(), resizeSourceIndex.getUUID()). }
true;public,static;2;17;/**  * Returns a default number of routing shards based on the number of shards of the index. The default number of routing shards will  * allow any index to be split at least once and at most 10 times by a factor of two. The closer the number or shards gets to 1024  * the less default split operations are supported  */ ;/**  * Returns a default number of routing shards based on the number of shards of the index. The default number of routing shards will  * allow any index to be split at least once and at most 10 times by a factor of two. The closer the number or shards gets to 1024  * the less default split operations are supported  */ public static int calculateNumRoutingShards(int numShards, Version indexVersionCreated) {     if (indexVersionCreated.onOrAfter(Version.V_7_0_0)) {         // only select this automatically for indices that are created on or after 7.0 this will prevent this new behaviour         // until we have a fully upgraded cluster. Additionally it will make integratin testing easier since mixed clusters         // will always have the behavior of the min node in the cluster.         //          // We use as a default number of routing shards the higher number that can be expressed         // as {@code numShards * 2^x`} that is less than or equal to the maximum number of shards: 1024.         // logBase2(1024)         int log2MaxNumShards = 10.         // ceil(logBase2(numShards))         int log2NumShards = 32 - Integer.numberOfLeadingZeros(numShards - 1).         int numSplits = log2MaxNumShards - log2NumShards.         // Ensure the index can be split at least once         numSplits = Math.max(1, numSplits).         return numShards * 1 << numSplits.     } else {         return numShards.     } }
