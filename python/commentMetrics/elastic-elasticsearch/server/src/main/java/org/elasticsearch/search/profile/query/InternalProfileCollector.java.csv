commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return the profiled time for this collector (inclusive of children)  */ ;/**  * @return the profiled time for this collector (inclusive of children)  */ public long getTime() {     return collector.getTime(). }
true;public;0;3;/**  * @return a human readable "hint" about what this collector was used for  */ ;/**  * @return a human readable "hint" about what this collector was used for  */ public String getReason() {     return this.reason. }
true;public;0;3;/**  * @return the lucene class name of the collector  */ ;/**  * @return the lucene class name of the collector  */ public String getName() {     return this.collectorName. }
true;private;1;16;/**  * Creates a human-friendly representation of the Collector name.  *  * InternalBucket Collectors use the aggregation name in their toString() method,  * which makes the profiled output a bit nicer.  *  * @param c The Collector to derive a name from  * @return  A (hopefully) prettier name  */ ;/**  * Creates a human-friendly representation of the Collector name.  *  * InternalBucket Collectors use the aggregation name in their toString() method,  * which makes the profiled output a bit nicer.  *  * @param c The Collector to derive a name from  * @return  A (hopefully) prettier name  */ private String deriveCollectorName(Collector c) {     String s = c.getClass().getSimpleName().     // asking the enclosingClass     if (s.equals("")) {         s = c.getClass().getEnclosingClass().getSimpleName().     }     // Aggregation collector toString()'s include the user-defined agg name     if (reason.equals(CollectorResult.REASON_AGGREGATION) || reason.equals(CollectorResult.REASON_AGGREGATION_GLOBAL)) {         s += ": [" + c.toString() + "]".     }     return s. }
false;public;1;4;;@Override public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {     return collector.getLeafCollector(context). }
false;public;0;4;;@Override public ScoreMode scoreMode() {     return collector.scoreMode(). }
false;public;0;3;;public CollectorResult getCollectorTree() {     return InternalProfileCollector.doGetCollectorTree(this). }
false;private,static;1;8;;private static CollectorResult doGetCollectorTree(InternalProfileCollector collector) {     List<CollectorResult> childResults = new ArrayList<>(collector.children.size()).     for (InternalProfileCollector child : collector.children) {         CollectorResult result = doGetCollectorTree(child).         childResults.add(result).     }     return new CollectorResult(collector.getName(), collector.getReason(), collector.getTime(), childResults). }
