# id;timestamp;commentText;codeText;commentWords;codeWords
CompletionSuggestion -> public CompletionSuggestion(String name, int size, boolean skipDuplicates);1524684173;Ctr_@param name The name for the suggestions_@param size The number of suggestions to return_@param skipDuplicates Whether duplicate suggestions should be filtered out;public CompletionSuggestion(String name, int size, boolean skipDuplicates) {_        super(name, size)__        this.skipDuplicates = skipDuplicates__    };ctr,param,name,the,name,for,the,suggestions,param,size,the,number,of,suggestions,to,return,param,skip,duplicates,whether,duplicate,suggestions,should,be,filtered,out;public,completion,suggestion,string,name,int,size,boolean,skip,duplicates,super,name,size,this,skip,duplicates,skip,duplicates
CompletionSuggestion -> public CompletionSuggestion(String name, int size, boolean skipDuplicates);1533738061;Ctr_@param name The name for the suggestions_@param size The number of suggestions to return_@param skipDuplicates Whether duplicate suggestions should be filtered out;public CompletionSuggestion(String name, int size, boolean skipDuplicates) {_        super(name, size)__        this.skipDuplicates = skipDuplicates__    };ctr,param,name,the,name,for,the,suggestions,param,size,the,number,of,suggestions,to,return,param,skip,duplicates,whether,duplicate,suggestions,should,be,filtered,out;public,completion,suggestion,string,name,int,size,boolean,skip,duplicates,super,name,size,this,skip,duplicates,skip,duplicates
CompletionSuggestion -> public CompletionSuggestion(String name, int size, boolean skipDuplicates);1542357322;Ctr_@param name The name for the suggestions_@param size The number of suggestions to return_@param skipDuplicates Whether duplicate suggestions should be filtered out;public CompletionSuggestion(String name, int size, boolean skipDuplicates) {_        super(name, size)__        this.skipDuplicates = skipDuplicates__    };ctr,param,name,the,name,for,the,suggestions,param,size,the,number,of,suggestions,to,return,param,skip,duplicates,whether,duplicate,suggestions,should,be,filtered,out;public,completion,suggestion,string,name,int,size,boolean,skip,duplicates,super,name,size,this,skip,duplicates,skip,duplicates
CompletionSuggestion -> public CompletionSuggestion(String name, int size, boolean skipDuplicates);1547451165;Creates a completion suggestion given its name, size and whether it should skip duplicates_@param name The name for the suggestions_@param size The number of suggestions to return_@param skipDuplicates Whether duplicate suggestions should be filtered out;public CompletionSuggestion(String name, int size, boolean skipDuplicates) {_        super(name, size)__        this.skipDuplicates = skipDuplicates__    };creates,a,completion,suggestion,given,its,name,size,and,whether,it,should,skip,duplicates,param,name,the,name,for,the,suggestions,param,size,the,number,of,suggestions,to,return,param,skip,duplicates,whether,duplicate,suggestions,should,be,filtered,out;public,completion,suggestion,string,name,int,size,boolean,skip,duplicates,super,name,size,this,skip,duplicates,skip,duplicates
CompletionSuggestion -> public CompletionSuggestion(String name, int size, boolean skipDuplicates);1547576851;Creates a completion suggestion given its name, size and whether it should skip duplicates_@param name The name for the suggestions_@param size The number of suggestions to return_@param skipDuplicates Whether duplicate suggestions should be filtered out;public CompletionSuggestion(String name, int size, boolean skipDuplicates) {_        super(name, size)__        this.skipDuplicates = skipDuplicates__    };creates,a,completion,suggestion,given,its,name,size,and,whether,it,should,skip,duplicates,param,name,the,name,for,the,suggestions,param,size,the,number,of,suggestions,to,return,param,skip,duplicates,whether,duplicate,suggestions,should,be,filtered,out;public,completion,suggestion,string,name,int,size,boolean,skip,duplicates,super,name,size,this,skip,duplicates,skip,duplicates
CompletionSuggestion -> public CompletionSuggestion(String name, int size, boolean skipDuplicates);1548846354;Creates a completion suggestion given its name, size and whether it should skip duplicates_@param name The name for the suggestions_@param size The number of suggestions to return_@param skipDuplicates Whether duplicate suggestions should be filtered out;public CompletionSuggestion(String name, int size, boolean skipDuplicates) {_        super(name, size)__        this.skipDuplicates = skipDuplicates__    };creates,a,completion,suggestion,given,its,name,size,and,whether,it,should,skip,duplicates,param,name,the,name,for,the,suggestions,param,size,the,number,of,suggestions,to,return,param,skip,duplicates,whether,duplicate,suggestions,should,be,filtered,out;public,completion,suggestion,string,name,int,size,boolean,skip,duplicates,super,name,size,this,skip,duplicates,skip,duplicates
CompletionSuggestion -> public CompletionSuggestion(String name, int size, boolean skipDuplicates);1551177682;Creates a completion suggestion given its name, size and whether it should skip duplicates_@param name The name for the suggestions_@param size The number of suggestions to return_@param skipDuplicates Whether duplicate suggestions should be filtered out;public CompletionSuggestion(String name, int size, boolean skipDuplicates) {_        super(name, size)__        this.skipDuplicates = skipDuplicates__    };creates,a,completion,suggestion,given,its,name,size,and,whether,it,should,skip,duplicates,param,name,the,name,for,the,suggestions,param,size,the,number,of,suggestions,to,return,param,skip,duplicates,whether,duplicate,suggestions,should,be,filtered,out;public,completion,suggestion,string,name,int,size,boolean,skip,duplicates,super,name,size,this,skip,duplicates,skip,duplicates
CompletionSuggestion -> public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce);1524684173;Reduces suggestions to a single suggestion containing at most_top {@link CompletionSuggestion#getSize()} options across <code>toReduce</code>;public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce) {_        if (toReduce.isEmpty()) {_            return null__        } else {_            final CompletionSuggestion leader = (CompletionSuggestion) toReduce.get(0)__            final Entry leaderEntry = leader.getEntries().get(0)__            final String name = leader.getName()__            if (toReduce.size() == 1) {_                return leader__            } else {_                _                _                _                OptionPriorityQueue priorityQueue = new OptionPriorityQueue(leader.getSize(), COMPARATOR)__                _                final CharArraySet seenSurfaceForms = leader.skipDuplicates ? new CharArraySet(leader.getSize(), false) : null__                for (Suggest.Suggestion<Entry> suggestion : toReduce) {_                    assert suggestion.getName().equals(name) : "name should be identical across all suggestions"__                    for (Entry.Option option : ((CompletionSuggestion) suggestion).getOptions()) {_                        if (leader.skipDuplicates) {_                            assert ((CompletionSuggestion) suggestion).skipDuplicates__                            String text = option.getText().string()__                            if (seenSurfaceForms.contains(text)) {_                                continue__                            }_                            seenSurfaceForms.add(text)__                        }_                        if (option == priorityQueue.insertWithOverflow(option)) {_                            _                            _                            _                            break__                        }_                    }_                }_                final CompletionSuggestion suggestion = new CompletionSuggestion(leader.getName(), leader.getSize(), leader.skipDuplicates)__                final Entry entry = new Entry(leaderEntry.getText(), leaderEntry.getOffset(), leaderEntry.getLength())__                Collections.addAll(entry.getOptions(), priorityQueue.get())__                suggestion.addTerm(entry)__                return suggestion__            }_        }_    };reduces,suggestions,to,a,single,suggestion,containing,at,most,top,link,completion,suggestion,get,size,options,across,code,to,reduce,code;public,static,completion,suggestion,reduce,to,list,suggest,suggestion,entry,to,reduce,if,to,reduce,is,empty,return,null,else,final,completion,suggestion,leader,completion,suggestion,to,reduce,get,0,final,entry,leader,entry,leader,get,entries,get,0,final,string,name,leader,get,name,if,to,reduce,size,1,return,leader,else,option,priority,queue,priority,queue,new,option,priority,queue,leader,get,size,comparator,final,char,array,set,seen,surface,forms,leader,skip,duplicates,new,char,array,set,leader,get,size,false,null,for,suggest,suggestion,entry,suggestion,to,reduce,assert,suggestion,get,name,equals,name,name,should,be,identical,across,all,suggestions,for,entry,option,option,completion,suggestion,suggestion,get,options,if,leader,skip,duplicates,assert,completion,suggestion,suggestion,skip,duplicates,string,text,option,get,text,string,if,seen,surface,forms,contains,text,continue,seen,surface,forms,add,text,if,option,priority,queue,insert,with,overflow,option,break,final,completion,suggestion,suggestion,new,completion,suggestion,leader,get,name,leader,get,size,leader,skip,duplicates,final,entry,entry,new,entry,leader,entry,get,text,leader,entry,get,offset,leader,entry,get,length,collections,add,all,entry,get,options,priority,queue,get,suggestion,add,term,entry,return,suggestion
CompletionSuggestion -> public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce);1533738061;Reduces suggestions to a single suggestion containing at most_top {@link CompletionSuggestion#getSize()} options across <code>toReduce</code>;public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce) {_        if (toReduce.isEmpty()) {_            return null__        } else {_            final CompletionSuggestion leader = (CompletionSuggestion) toReduce.get(0)__            final Entry leaderEntry = leader.getEntries().get(0)__            final String name = leader.getName()__            if (toReduce.size() == 1) {_                return leader__            } else {_                _                _                _                OptionPriorityQueue priorityQueue = new OptionPriorityQueue(leader.getSize(), COMPARATOR)__                _                final CharArraySet seenSurfaceForms = leader.skipDuplicates ? new CharArraySet(leader.getSize(), false) : null__                for (Suggest.Suggestion<Entry> suggestion : toReduce) {_                    assert suggestion.getName().equals(name) : "name should be identical across all suggestions"__                    for (Entry.Option option : ((CompletionSuggestion) suggestion).getOptions()) {_                        if (leader.skipDuplicates) {_                            assert ((CompletionSuggestion) suggestion).skipDuplicates__                            String text = option.getText().string()__                            if (seenSurfaceForms.contains(text)) {_                                continue__                            }_                            seenSurfaceForms.add(text)__                        }_                        if (option == priorityQueue.insertWithOverflow(option)) {_                            _                            _                            _                            break__                        }_                    }_                }_                final CompletionSuggestion suggestion = new CompletionSuggestion(leader.getName(), leader.getSize(), leader.skipDuplicates)__                final Entry entry = new Entry(leaderEntry.getText(), leaderEntry.getOffset(), leaderEntry.getLength())__                Collections.addAll(entry.getOptions(), priorityQueue.get())__                suggestion.addTerm(entry)__                return suggestion__            }_        }_    };reduces,suggestions,to,a,single,suggestion,containing,at,most,top,link,completion,suggestion,get,size,options,across,code,to,reduce,code;public,static,completion,suggestion,reduce,to,list,suggest,suggestion,entry,to,reduce,if,to,reduce,is,empty,return,null,else,final,completion,suggestion,leader,completion,suggestion,to,reduce,get,0,final,entry,leader,entry,leader,get,entries,get,0,final,string,name,leader,get,name,if,to,reduce,size,1,return,leader,else,option,priority,queue,priority,queue,new,option,priority,queue,leader,get,size,comparator,final,char,array,set,seen,surface,forms,leader,skip,duplicates,new,char,array,set,leader,get,size,false,null,for,suggest,suggestion,entry,suggestion,to,reduce,assert,suggestion,get,name,equals,name,name,should,be,identical,across,all,suggestions,for,entry,option,option,completion,suggestion,suggestion,get,options,if,leader,skip,duplicates,assert,completion,suggestion,suggestion,skip,duplicates,string,text,option,get,text,string,if,seen,surface,forms,contains,text,continue,seen,surface,forms,add,text,if,option,priority,queue,insert,with,overflow,option,break,final,completion,suggestion,suggestion,new,completion,suggestion,leader,get,name,leader,get,size,leader,skip,duplicates,final,entry,entry,new,entry,leader,entry,get,text,leader,entry,get,offset,leader,entry,get,length,collections,add,all,entry,get,options,priority,queue,get,suggestion,add,term,entry,return,suggestion
CompletionSuggestion -> public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce);1542357322;Reduces suggestions to a single suggestion containing at most_top {@link CompletionSuggestion#getSize()} options across <code>toReduce</code>;public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce) {_        if (toReduce.isEmpty()) {_            return null__        } else {_            final CompletionSuggestion leader = (CompletionSuggestion) toReduce.get(0)__            final Entry leaderEntry = leader.getEntries().get(0)__            final String name = leader.getName()__            if (toReduce.size() == 1) {_                return leader__            } else {_                _                _                _                OptionPriorityQueue priorityQueue = new OptionPriorityQueue(leader.getSize(), COMPARATOR)__                _                final CharArraySet seenSurfaceForms = leader.skipDuplicates ? new CharArraySet(leader.getSize(), false) : null__                for (Suggest.Suggestion<Entry> suggestion : toReduce) {_                    assert suggestion.getName().equals(name) : "name should be identical across all suggestions"__                    for (Entry.Option option : ((CompletionSuggestion) suggestion).getOptions()) {_                        if (leader.skipDuplicates) {_                            assert ((CompletionSuggestion) suggestion).skipDuplicates__                            String text = option.getText().string()__                            if (seenSurfaceForms.contains(text)) {_                                continue__                            }_                            seenSurfaceForms.add(text)__                        }_                        if (option == priorityQueue.insertWithOverflow(option)) {_                            _                            _                            _                            break__                        }_                    }_                }_                final CompletionSuggestion suggestion = new CompletionSuggestion(leader.getName(), leader.getSize(), leader.skipDuplicates)__                final Entry entry = new Entry(leaderEntry.getText(), leaderEntry.getOffset(), leaderEntry.getLength())__                Collections.addAll(entry.getOptions(), priorityQueue.get())__                suggestion.addTerm(entry)__                return suggestion__            }_        }_    };reduces,suggestions,to,a,single,suggestion,containing,at,most,top,link,completion,suggestion,get,size,options,across,code,to,reduce,code;public,static,completion,suggestion,reduce,to,list,suggest,suggestion,entry,to,reduce,if,to,reduce,is,empty,return,null,else,final,completion,suggestion,leader,completion,suggestion,to,reduce,get,0,final,entry,leader,entry,leader,get,entries,get,0,final,string,name,leader,get,name,if,to,reduce,size,1,return,leader,else,option,priority,queue,priority,queue,new,option,priority,queue,leader,get,size,comparator,final,char,array,set,seen,surface,forms,leader,skip,duplicates,new,char,array,set,leader,get,size,false,null,for,suggest,suggestion,entry,suggestion,to,reduce,assert,suggestion,get,name,equals,name,name,should,be,identical,across,all,suggestions,for,entry,option,option,completion,suggestion,suggestion,get,options,if,leader,skip,duplicates,assert,completion,suggestion,suggestion,skip,duplicates,string,text,option,get,text,string,if,seen,surface,forms,contains,text,continue,seen,surface,forms,add,text,if,option,priority,queue,insert,with,overflow,option,break,final,completion,suggestion,suggestion,new,completion,suggestion,leader,get,name,leader,get,size,leader,skip,duplicates,final,entry,entry,new,entry,leader,entry,get,text,leader,entry,get,offset,leader,entry,get,length,collections,add,all,entry,get,options,priority,queue,get,suggestion,add,term,entry,return,suggestion
CompletionSuggestion -> public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce);1547451165;Reduces suggestions to a single suggestion containing at most_top {@link CompletionSuggestion#getSize()} options across <code>toReduce</code>;public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce) {_        if (toReduce.isEmpty()) {_            return null__        } else {_            final CompletionSuggestion leader = (CompletionSuggestion) toReduce.get(0)__            final Entry leaderEntry = leader.getEntries().get(0)__            final String name = leader.getName()__            if (toReduce.size() == 1) {_                return leader__            } else {_                _                _                _                OptionPriorityQueue priorityQueue = new OptionPriorityQueue(leader.getSize(), COMPARATOR)__                _                final CharArraySet seenSurfaceForms = leader.skipDuplicates ? new CharArraySet(leader.getSize(), false) : null__                for (Suggest.Suggestion<Entry> suggestion : toReduce) {_                    assert suggestion.getName().equals(name) : "name should be identical across all suggestions"__                    for (Entry.Option option : ((CompletionSuggestion) suggestion).getOptions()) {_                        if (leader.skipDuplicates) {_                            assert ((CompletionSuggestion) suggestion).skipDuplicates__                            String text = option.getText().string()__                            if (seenSurfaceForms.contains(text)) {_                                continue__                            }_                            seenSurfaceForms.add(text)__                        }_                        if (option == priorityQueue.insertWithOverflow(option)) {_                            _                            _                            _                            break__                        }_                    }_                }_                final CompletionSuggestion suggestion = new CompletionSuggestion(leader.getName(), leader.getSize(), leader.skipDuplicates)__                final Entry entry = new Entry(leaderEntry.getText(), leaderEntry.getOffset(), leaderEntry.getLength())__                Collections.addAll(entry.getOptions(), priorityQueue.get())__                suggestion.addTerm(entry)__                return suggestion__            }_        }_    };reduces,suggestions,to,a,single,suggestion,containing,at,most,top,link,completion,suggestion,get,size,options,across,code,to,reduce,code;public,static,completion,suggestion,reduce,to,list,suggest,suggestion,entry,to,reduce,if,to,reduce,is,empty,return,null,else,final,completion,suggestion,leader,completion,suggestion,to,reduce,get,0,final,entry,leader,entry,leader,get,entries,get,0,final,string,name,leader,get,name,if,to,reduce,size,1,return,leader,else,option,priority,queue,priority,queue,new,option,priority,queue,leader,get,size,comparator,final,char,array,set,seen,surface,forms,leader,skip,duplicates,new,char,array,set,leader,get,size,false,null,for,suggest,suggestion,entry,suggestion,to,reduce,assert,suggestion,get,name,equals,name,name,should,be,identical,across,all,suggestions,for,entry,option,option,completion,suggestion,suggestion,get,options,if,leader,skip,duplicates,assert,completion,suggestion,suggestion,skip,duplicates,string,text,option,get,text,string,if,seen,surface,forms,contains,text,continue,seen,surface,forms,add,text,if,option,priority,queue,insert,with,overflow,option,break,final,completion,suggestion,suggestion,new,completion,suggestion,leader,get,name,leader,get,size,leader,skip,duplicates,final,entry,entry,new,entry,leader,entry,get,text,leader,entry,get,offset,leader,entry,get,length,collections,add,all,entry,get,options,priority,queue,get,suggestion,add,term,entry,return,suggestion
CompletionSuggestion -> public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce);1547576851;Reduces suggestions to a single suggestion containing at most_top {@link CompletionSuggestion#getSize()} options across <code>toReduce</code>;public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce) {_        if (toReduce.isEmpty()) {_            return null__        } else {_            final CompletionSuggestion leader = (CompletionSuggestion) toReduce.get(0)__            final Entry leaderEntry = leader.getEntries().get(0)__            final String name = leader.getName()__            int size = leader.getSize()__            if (toReduce.size() == 1) {_                return leader__            } else {_                _                _                _                OptionPriorityQueue pq = new OptionPriorityQueue(toReduce.size())__                for (Suggest.Suggestion<Entry> suggestion : toReduce) {_                    assert suggestion.getName().equals(name) : "name should be identical across all suggestions"__                    Iterator<Entry.Option> it = ((CompletionSuggestion) suggestion).getOptions().iterator()__                    if (it.hasNext()) {_                        pq.add(new ShardOptions(it))__                    }_                }_                _                final CharArraySet seenSurfaceForms = leader.skipDuplicates ? new CharArraySet(leader.getSize(), false) : null__                final Entry entry = new Entry(leaderEntry.getText(), leaderEntry.getOffset(), leaderEntry.getLength())__                final List<Entry.Option> options = entry.getOptions()__                while (pq.size() > 0) {_                    ShardOptions top = pq.top()__                    Entry.Option current = top.current__                    if (top.advanceToNextOption()) {_                        pq.updateTop()__                    } else {_                        _                        pq.pop()__                    }_                    if (leader.skipDuplicates == false ||_                            seenSurfaceForms.add(current.getText().toString())) {_                        options.add(current)__                        if (options.size() >= size) {_                            break__                        }_                    }_                }_                final CompletionSuggestion suggestion = new CompletionSuggestion(leader.getName(), leader.getSize(), leader.skipDuplicates)__                suggestion.addTerm(entry)__                return suggestion__            }_        }_    };reduces,suggestions,to,a,single,suggestion,containing,at,most,top,link,completion,suggestion,get,size,options,across,code,to,reduce,code;public,static,completion,suggestion,reduce,to,list,suggest,suggestion,entry,to,reduce,if,to,reduce,is,empty,return,null,else,final,completion,suggestion,leader,completion,suggestion,to,reduce,get,0,final,entry,leader,entry,leader,get,entries,get,0,final,string,name,leader,get,name,int,size,leader,get,size,if,to,reduce,size,1,return,leader,else,option,priority,queue,pq,new,option,priority,queue,to,reduce,size,for,suggest,suggestion,entry,suggestion,to,reduce,assert,suggestion,get,name,equals,name,name,should,be,identical,across,all,suggestions,iterator,entry,option,it,completion,suggestion,suggestion,get,options,iterator,if,it,has,next,pq,add,new,shard,options,it,final,char,array,set,seen,surface,forms,leader,skip,duplicates,new,char,array,set,leader,get,size,false,null,final,entry,entry,new,entry,leader,entry,get,text,leader,entry,get,offset,leader,entry,get,length,final,list,entry,option,options,entry,get,options,while,pq,size,0,shard,options,top,pq,top,entry,option,current,top,current,if,top,advance,to,next,option,pq,update,top,else,pq,pop,if,leader,skip,duplicates,false,seen,surface,forms,add,current,get,text,to,string,options,add,current,if,options,size,size,break,final,completion,suggestion,suggestion,new,completion,suggestion,leader,get,name,leader,get,size,leader,skip,duplicates,suggestion,add,term,entry,return,suggestion
CompletionSuggestion -> public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce);1548846354;Reduces suggestions to a single suggestion containing at most_top {@link CompletionSuggestion#getSize()} options across <code>toReduce</code>;public static CompletionSuggestion reduceTo(List<Suggest.Suggestion<Entry>> toReduce) {_        if (toReduce.isEmpty()) {_            return null__        } else {_            final CompletionSuggestion leader = (CompletionSuggestion) toReduce.get(0)__            final Entry leaderEntry = leader.getEntries().get(0)__            final String name = leader.getName()__            int size = leader.getSize()__            if (toReduce.size() == 1) {_                return leader__            } else {_                _                _                _                OptionPriorityQueue pq = new OptionPriorityQueue(toReduce.size())__                for (Suggest.Suggestion<Entry> suggestion : toReduce) {_                    assert suggestion.getName().equals(name) : "name should be identical across all suggestions"__                    Iterator<Entry.Option> it = ((CompletionSuggestion) suggestion).getOptions().iterator()__                    if (it.hasNext()) {_                        pq.add(new ShardOptions(it))__                    }_                }_                _                final CharArraySet seenSurfaceForms = leader.skipDuplicates ? new CharArraySet(leader.getSize(), false) : null__                final Entry entry = new Entry(leaderEntry.getText(), leaderEntry.getOffset(), leaderEntry.getLength())__                final List<Entry.Option> options = entry.getOptions()__                while (pq.size() > 0) {_                    ShardOptions top = pq.top()__                    Entry.Option current = top.current__                    if (top.advanceToNextOption()) {_                        pq.updateTop()__                    } else {_                        _                        pq.pop()__                    }_                    if (leader.skipDuplicates == false ||_                            seenSurfaceForms.add(current.getText().toString())) {_                        options.add(current)__                        if (options.size() >= size) {_                            break__                        }_                    }_                }_                final CompletionSuggestion suggestion = new CompletionSuggestion(leader.getName(), leader.getSize(), leader.skipDuplicates)__                suggestion.addTerm(entry)__                return suggestion__            }_        }_    };reduces,suggestions,to,a,single,suggestion,containing,at,most,top,link,completion,suggestion,get,size,options,across,code,to,reduce,code;public,static,completion,suggestion,reduce,to,list,suggest,suggestion,entry,to,reduce,if,to,reduce,is,empty,return,null,else,final,completion,suggestion,leader,completion,suggestion,to,reduce,get,0,final,entry,leader,entry,leader,get,entries,get,0,final,string,name,leader,get,name,int,size,leader,get,size,if,to,reduce,size,1,return,leader,else,option,priority,queue,pq,new,option,priority,queue,to,reduce,size,for,suggest,suggestion,entry,suggestion,to,reduce,assert,suggestion,get,name,equals,name,name,should,be,identical,across,all,suggestions,iterator,entry,option,it,completion,suggestion,suggestion,get,options,iterator,if,it,has,next,pq,add,new,shard,options,it,final,char,array,set,seen,surface,forms,leader,skip,duplicates,new,char,array,set,leader,get,size,false,null,final,entry,entry,new,entry,leader,entry,get,text,leader,entry,get,offset,leader,entry,get,length,final,list,entry,option,options,entry,get,options,while,pq,size,0,shard,options,top,pq,top,entry,option,current,top,current,if,top,advance,to,next,option,pq,update,top,else,pq,pop,if,leader,skip,duplicates,false,seen,surface,forms,add,current,get,text,to,string,options,add,current,if,options,size,size,break,final,completion,suggestion,suggestion,new,completion,suggestion,leader,get,name,leader,get,size,leader,skip,duplicates,suggestion,add,term,entry,return,suggestion
CompletionSuggestion -> public List<Entry.Option> getOptions();1524684173;@return the result options for the suggestion;public List<Entry.Option> getOptions() {_        if (entries.isEmpty() == false) {_            assert entries.size() == 1 : "CompletionSuggestion must have only one entry"__            return entries.get(0).getOptions()__        } else {_            return Collections.emptyList()__        }_    };return,the,result,options,for,the,suggestion;public,list,entry,option,get,options,if,entries,is,empty,false,assert,entries,size,1,completion,suggestion,must,have,only,one,entry,return,entries,get,0,get,options,else,return,collections,empty,list
CompletionSuggestion -> public List<Entry.Option> getOptions();1533738061;@return the result options for the suggestion;public List<Entry.Option> getOptions() {_        if (entries.isEmpty() == false) {_            assert entries.size() == 1 : "CompletionSuggestion must have only one entry"__            return entries.get(0).getOptions()__        } else {_            return Collections.emptyList()__        }_    };return,the,result,options,for,the,suggestion;public,list,entry,option,get,options,if,entries,is,empty,false,assert,entries,size,1,completion,suggestion,must,have,only,one,entry,return,entries,get,0,get,options,else,return,collections,empty,list
CompletionSuggestion -> public List<Entry.Option> getOptions();1542357322;@return the result options for the suggestion;public List<Entry.Option> getOptions() {_        if (entries.isEmpty() == false) {_            assert entries.size() == 1 : "CompletionSuggestion must have only one entry"__            return entries.get(0).getOptions()__        } else {_            return Collections.emptyList()__        }_    };return,the,result,options,for,the,suggestion;public,list,entry,option,get,options,if,entries,is,empty,false,assert,entries,size,1,completion,suggestion,must,have,only,one,entry,return,entries,get,0,get,options,else,return,collections,empty,list
CompletionSuggestion -> public List<Entry.Option> getOptions();1547451165;@return the result options for the suggestion;public List<Entry.Option> getOptions() {_        if (entries.isEmpty() == false) {_            assert entries.size() == 1 : "CompletionSuggestion must have only one entry"__            return entries.get(0).getOptions()__        } else {_            return Collections.emptyList()__        }_    };return,the,result,options,for,the,suggestion;public,list,entry,option,get,options,if,entries,is,empty,false,assert,entries,size,1,completion,suggestion,must,have,only,one,entry,return,entries,get,0,get,options,else,return,collections,empty,list
CompletionSuggestion -> public List<Entry.Option> getOptions();1547576851;@return the result options for the suggestion;public List<Entry.Option> getOptions() {_        if (entries.isEmpty() == false) {_            assert entries.size() == 1 : "CompletionSuggestion must have only one entry"__            return entries.get(0).getOptions()__        } else {_            return Collections.emptyList()__        }_    };return,the,result,options,for,the,suggestion;public,list,entry,option,get,options,if,entries,is,empty,false,assert,entries,size,1,completion,suggestion,must,have,only,one,entry,return,entries,get,0,get,options,else,return,collections,empty,list
CompletionSuggestion -> public List<Entry.Option> getOptions();1548846354;@return the result options for the suggestion;public List<Entry.Option> getOptions() {_        if (entries.isEmpty() == false) {_            assert entries.size() == 1 : "CompletionSuggestion must have only one entry"__            return entries.get(0).getOptions()__        } else {_            return Collections.emptyList()__        }_    };return,the,result,options,for,the,suggestion;public,list,entry,option,get,options,if,entries,is,empty,false,assert,entries,size,1,completion,suggestion,must,have,only,one,entry,return,entries,get,0,get,options,else,return,collections,empty,list
CompletionSuggestion -> public List<Entry.Option> getOptions();1551177682;@return the result options for the suggestion;public List<Entry.Option> getOptions() {_        if (entries.isEmpty() == false) {_            assert entries.size() == 1 : "CompletionSuggestion must have only one entry"__            return entries.get(0).getOptions()__        } else {_            return Collections.emptyList()__        }_    };return,the,result,options,for,the,suggestion;public,list,entry,option,get,options,if,entries,is,empty,false,assert,entries,size,1,completion,suggestion,must,have,only,one,entry,return,entries,get,0,get,options,else,return,collections,empty,list
CompletionSuggestion -> public boolean hasScoreDocs();1524684173;@return whether there is any hits for the suggestion;public boolean hasScoreDocs() {_        return getOptions().size() > 0__    };return,whether,there,is,any,hits,for,the,suggestion;public,boolean,has,score,docs,return,get,options,size,0
CompletionSuggestion -> public boolean hasScoreDocs();1533738061;@return whether there is any hits for the suggestion;public boolean hasScoreDocs() {_        return getOptions().size() > 0__    };return,whether,there,is,any,hits,for,the,suggestion;public,boolean,has,score,docs,return,get,options,size,0
CompletionSuggestion -> public boolean hasScoreDocs();1542357322;@return whether there is any hits for the suggestion;public boolean hasScoreDocs() {_        return getOptions().size() > 0__    };return,whether,there,is,any,hits,for,the,suggestion;public,boolean,has,score,docs,return,get,options,size,0
CompletionSuggestion -> public boolean hasScoreDocs();1547451165;@return whether there is any hits for the suggestion;public boolean hasScoreDocs() {_        return getOptions().size() > 0__    };return,whether,there,is,any,hits,for,the,suggestion;public,boolean,has,score,docs,return,get,options,size,0
CompletionSuggestion -> public boolean hasScoreDocs();1547576851;@return whether there is any hits for the suggestion;public boolean hasScoreDocs() {_        return getOptions().size() > 0__    };return,whether,there,is,any,hits,for,the,suggestion;public,boolean,has,score,docs,return,get,options,size,0
CompletionSuggestion -> public boolean hasScoreDocs();1548846354;@return whether there is any hits for the suggestion;public boolean hasScoreDocs() {_        return getOptions().size() > 0__    };return,whether,there,is,any,hits,for,the,suggestion;public,boolean,has,score,docs,return,get,options,size,0
CompletionSuggestion -> public boolean hasScoreDocs();1551177682;@return whether there is any hits for the suggestion;public boolean hasScoreDocs() {_        return getOptions().size() > 0__    };return,whether,there,is,any,hits,for,the,suggestion;public,boolean,has,score,docs,return,get,options,size,0
