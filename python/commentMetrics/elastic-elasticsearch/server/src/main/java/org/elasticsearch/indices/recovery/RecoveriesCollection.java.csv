# id;timestamp;commentText;codeText;commentWords;codeWords
RecoveriesCollection -> public RecoveryRef getRecoverySafe(long id, ShardId shardId);1524684173;Similar to {@link #getRecovery(long)} but throws an exception if no recovery is found;public RecoveryRef getRecoverySafe(long id, ShardId shardId) {_        RecoveryRef recoveryRef = getRecovery(id)__        if (recoveryRef == null) {_            throw new IndexShardClosedException(shardId)__        }_        assert recoveryRef.target().shardId().equals(shardId)__        return recoveryRef__    };similar,to,link,get,recovery,long,but,throws,an,exception,if,no,recovery,is,found;public,recovery,ref,get,recovery,safe,long,id,shard,id,shard,id,recovery,ref,recovery,ref,get,recovery,id,if,recovery,ref,null,throw,new,index,shard,closed,exception,shard,id,assert,recovery,ref,target,shard,id,equals,shard,id,return,recovery,ref
RecoveriesCollection -> public RecoveryRef getRecoverySafe(long id, ShardId shardId);1545390648;Similar to {@link #getRecovery(long)} but throws an exception if no recovery is found;public RecoveryRef getRecoverySafe(long id, ShardId shardId) {_        RecoveryRef recoveryRef = getRecovery(id)__        if (recoveryRef == null) {_            throw new IndexShardClosedException(shardId)__        }_        assert recoveryRef.target().shardId().equals(shardId)__        return recoveryRef__    };similar,to,link,get,recovery,long,but,throws,an,exception,if,no,recovery,is,found;public,recovery,ref,get,recovery,safe,long,id,shard,id,shard,id,recovery,ref,recovery,ref,get,recovery,id,if,recovery,ref,null,throw,new,index,shard,closed,exception,shard,id,assert,recovery,ref,target,shard,id,equals,shard,id,return,recovery,ref
RecoveriesCollection -> public RecoveryRef getRecoverySafe(long id, ShardId shardId);1548953505;Similar to {@link #getRecovery(long)} but throws an exception if no recovery is found;public RecoveryRef getRecoverySafe(long id, ShardId shardId) {_        RecoveryRef recoveryRef = getRecovery(id)__        if (recoveryRef == null) {_            throw new IndexShardClosedException(shardId)__        }_        assert recoveryRef.target().shardId().equals(shardId)__        return recoveryRef__    };similar,to,link,get,recovery,long,but,throws,an,exception,if,no,recovery,is,found;public,recovery,ref,get,recovery,safe,long,id,shard,id,shard,id,recovery,ref,recovery,ref,get,recovery,id,if,recovery,ref,null,throw,new,index,shard,closed,exception,shard,id,assert,recovery,ref,target,shard,id,equals,shard,id,return,recovery,ref
RecoveriesCollection -> public long startRecovery(IndexShard indexShard, DiscoveryNode sourceNode,                               PeerRecoveryTargetService.RecoveryListener listener, TimeValue activityTimeout);1524684173;Starts are new recovery for the given shard, source node and state__@return the id of the new recovery.;public long startRecovery(IndexShard indexShard, DiscoveryNode sourceNode,_                              PeerRecoveryTargetService.RecoveryListener listener, TimeValue activityTimeout) {_        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener, ensureClusterStateVersionCallback)__        startRecoveryInternal(recoveryTarget, activityTimeout)__        return recoveryTarget.recoveryId()__    };starts,are,new,recovery,for,the,given,shard,source,node,and,state,return,the,id,of,the,new,recovery;public,long,start,recovery,index,shard,index,shard,discovery,node,source,node,peer,recovery,target,service,recovery,listener,listener,time,value,activity,timeout,recovery,target,recovery,target,new,recovery,target,index,shard,source,node,listener,ensure,cluster,state,version,callback,start,recovery,internal,recovery,target,activity,timeout,return,recovery,target,recovery,id
RecoveriesCollection -> public long startRecovery(IndexShard indexShard, DiscoveryNode sourceNode,                               PeerRecoveryTargetService.RecoveryListener listener, TimeValue activityTimeout);1545390648;Starts are new recovery for the given shard, source node and state__@return the id of the new recovery.;public long startRecovery(IndexShard indexShard, DiscoveryNode sourceNode,_                              PeerRecoveryTargetService.RecoveryListener listener, TimeValue activityTimeout) {_        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener, ensureClusterStateVersionCallback)__        startRecoveryInternal(recoveryTarget, activityTimeout)__        return recoveryTarget.recoveryId()__    };starts,are,new,recovery,for,the,given,shard,source,node,and,state,return,the,id,of,the,new,recovery;public,long,start,recovery,index,shard,index,shard,discovery,node,source,node,peer,recovery,target,service,recovery,listener,listener,time,value,activity,timeout,recovery,target,recovery,target,new,recovery,target,index,shard,source,node,listener,ensure,cluster,state,version,callback,start,recovery,internal,recovery,target,activity,timeout,return,recovery,target,recovery,id
RecoveriesCollection -> public long startRecovery(IndexShard indexShard, DiscoveryNode sourceNode,                               PeerRecoveryTargetService.RecoveryListener listener, TimeValue activityTimeout);1548953505;Starts are new recovery for the given shard, source node and state__@return the id of the new recovery.;public long startRecovery(IndexShard indexShard, DiscoveryNode sourceNode,_                              PeerRecoveryTargetService.RecoveryListener listener, TimeValue activityTimeout) {_        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener, ensureClusterStateVersionCallback)__        startRecoveryInternal(recoveryTarget, activityTimeout)__        return recoveryTarget.recoveryId()__    };starts,are,new,recovery,for,the,given,shard,source,node,and,state,return,the,id,of,the,new,recovery;public,long,start,recovery,index,shard,index,shard,discovery,node,source,node,peer,recovery,target,service,recovery,listener,listener,time,value,activity,timeout,recovery,target,recovery,target,new,recovery,target,index,shard,source,node,listener,ensure,cluster,state,version,callback,start,recovery,internal,recovery,target,activity,timeout,return,recovery,target,recovery,id
RecoveriesCollection -> public void markRecoveryAsDone(long id);1524684173;mark the recovery with the given id as done (if found);public void markRecoveryAsDone(long id) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        if (removed != null) {_            logger.trace("{} marking recovery from {} as done, id [{}]", removed.shardId(), removed.sourceNode(), removed.recoveryId())__            removed.markAsDone()__        }_    };mark,the,recovery,with,the,given,id,as,done,if,found;public,void,mark,recovery,as,done,long,id,recovery,target,removed,on,going,recoveries,remove,id,if,removed,null,logger,trace,marking,recovery,from,as,done,id,removed,shard,id,removed,source,node,removed,recovery,id,removed,mark,as,done
RecoveriesCollection -> public void markRecoveryAsDone(long id);1545390648;mark the recovery with the given id as done (if found);public void markRecoveryAsDone(long id) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        if (removed != null) {_            logger.trace("{} marking recovery from {} as done, id [{}]", removed.shardId(), removed.sourceNode(), removed.recoveryId())__            removed.markAsDone()__        }_    };mark,the,recovery,with,the,given,id,as,done,if,found;public,void,mark,recovery,as,done,long,id,recovery,target,removed,on,going,recoveries,remove,id,if,removed,null,logger,trace,marking,recovery,from,as,done,id,removed,shard,id,removed,source,node,removed,recovery,id,removed,mark,as,done
RecoveriesCollection -> public void markRecoveryAsDone(long id);1548953505;mark the recovery with the given id as done (if found);public void markRecoveryAsDone(long id) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        if (removed != null) {_            logger.trace("{} marking recovery from {} as done, id [{}]", removed.shardId(), removed.sourceNode(), removed.recoveryId())__            removed.markAsDone()__        }_    };mark,the,recovery,with,the,given,id,as,done,if,found;public,void,mark,recovery,as,done,long,id,recovery,target,removed,on,going,recoveries,remove,id,if,removed,null,logger,trace,marking,recovery,from,as,done,id,removed,shard,id,removed,source,node,removed,recovery,id,removed,mark,as,done
RecoveriesCollection -> public int size();1524684173;the number of ongoing recoveries;public int size() {_        return onGoingRecoveries.size()__    };the,number,of,ongoing,recoveries;public,int,size,return,on,going,recoveries,size
RecoveriesCollection -> public int size();1545390648;the number of ongoing recoveries;public int size() {_        return onGoingRecoveries.size()__    };the,number,of,ongoing,recoveries;public,int,size,return,on,going,recoveries,size
RecoveriesCollection -> public int size();1548953505;the number of ongoing recoveries;public int size() {_        return onGoingRecoveries.size()__    };the,number,of,ongoing,recoveries;public,int,size,return,on,going,recoveries,size
RecoveriesCollection -> public boolean cancelRecovery(long id, String reason);1524684173;cancel the recovery with the given id (if found) and remove it from the recovery collection;public boolean cancelRecovery(long id, String reason) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        boolean cancelled = false__        if (removed != null) {_            logger.trace("{} canceled recovery from {}, id [{}] (reason [{}])",_                    removed.shardId(), removed.sourceNode(), removed.recoveryId(), reason)__            removed.cancel(reason)__            cancelled = true__        }_        return cancelled__    };cancel,the,recovery,with,the,given,id,if,found,and,remove,it,from,the,recovery,collection;public,boolean,cancel,recovery,long,id,string,reason,recovery,target,removed,on,going,recoveries,remove,id,boolean,cancelled,false,if,removed,null,logger,trace,canceled,recovery,from,id,reason,removed,shard,id,removed,source,node,removed,recovery,id,reason,removed,cancel,reason,cancelled,true,return,cancelled
RecoveriesCollection -> public boolean cancelRecovery(long id, String reason);1545390648;cancel the recovery with the given id (if found) and remove it from the recovery collection;public boolean cancelRecovery(long id, String reason) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        boolean cancelled = false__        if (removed != null) {_            logger.trace("{} canceled recovery from {}, id [{}] (reason [{}])",_                    removed.shardId(), removed.sourceNode(), removed.recoveryId(), reason)__            removed.cancel(reason)__            cancelled = true__        }_        return cancelled__    };cancel,the,recovery,with,the,given,id,if,found,and,remove,it,from,the,recovery,collection;public,boolean,cancel,recovery,long,id,string,reason,recovery,target,removed,on,going,recoveries,remove,id,boolean,cancelled,false,if,removed,null,logger,trace,canceled,recovery,from,id,reason,removed,shard,id,removed,source,node,removed,recovery,id,reason,removed,cancel,reason,cancelled,true,return,cancelled
RecoveriesCollection -> public boolean cancelRecovery(long id, String reason);1548953505;cancel the recovery with the given id (if found) and remove it from the recovery collection;public boolean cancelRecovery(long id, String reason) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        boolean cancelled = false__        if (removed != null) {_            logger.trace("{} canceled recovery from {}, id [{}] (reason [{}])",_                    removed.shardId(), removed.sourceNode(), removed.recoveryId(), reason)__            removed.cancel(reason)__            cancelled = true__        }_        return cancelled__    };cancel,the,recovery,with,the,given,id,if,found,and,remove,it,from,the,recovery,collection;public,boolean,cancel,recovery,long,id,string,reason,recovery,target,removed,on,going,recoveries,remove,id,boolean,cancelled,false,if,removed,null,logger,trace,canceled,recovery,from,id,reason,removed,shard,id,removed,source,node,removed,recovery,id,reason,removed,cancel,reason,cancelled,true,return,cancelled
RecoveriesCollection -> public RecoveryRef getRecovery(long id);1524684173;gets the {@link RecoveryTarget } for a given id. The RecoveryStatus returned has it's ref count already incremented_to make sure it's safe to use. However, you must call {@link RecoveryTarget#decRef()} when you are done with it, typically_by using this method in a try-with-resources clause._<p>_Returns null if recovery is not found;public RecoveryRef getRecovery(long id) {_        RecoveryTarget status = onGoingRecoveries.get(id)__        if (status != null && status.tryIncRef()) {_            return new RecoveryRef(status)__        }_        return null__    };gets,the,link,recovery,target,for,a,given,id,the,recovery,status,returned,has,it,s,ref,count,already,incremented,to,make,sure,it,s,safe,to,use,however,you,must,call,link,recovery,target,dec,ref,when,you,are,done,with,it,typically,by,using,this,method,in,a,try,with,resources,clause,p,returns,null,if,recovery,is,not,found;public,recovery,ref,get,recovery,long,id,recovery,target,status,on,going,recoveries,get,id,if,status,null,status,try,inc,ref,return,new,recovery,ref,status,return,null
RecoveriesCollection -> public RecoveryRef getRecovery(long id);1545390648;gets the {@link RecoveryTarget } for a given id. The RecoveryStatus returned has it's ref count already incremented_to make sure it's safe to use. However, you must call {@link RecoveryTarget#decRef()} when you are done with it, typically_by using this method in a try-with-resources clause._<p>_Returns null if recovery is not found;public RecoveryRef getRecovery(long id) {_        RecoveryTarget status = onGoingRecoveries.get(id)__        if (status != null && status.tryIncRef()) {_            return new RecoveryRef(status)__        }_        return null__    };gets,the,link,recovery,target,for,a,given,id,the,recovery,status,returned,has,it,s,ref,count,already,incremented,to,make,sure,it,s,safe,to,use,however,you,must,call,link,recovery,target,dec,ref,when,you,are,done,with,it,typically,by,using,this,method,in,a,try,with,resources,clause,p,returns,null,if,recovery,is,not,found;public,recovery,ref,get,recovery,long,id,recovery,target,status,on,going,recoveries,get,id,if,status,null,status,try,inc,ref,return,new,recovery,ref,status,return,null
RecoveriesCollection -> public RecoveryRef getRecovery(long id);1548953505;gets the {@link RecoveryTarget } for a given id. The RecoveryStatus returned has it's ref count already incremented_to make sure it's safe to use. However, you must call {@link RecoveryTarget#decRef()} when you are done with it, typically_by using this method in a try-with-resources clause._<p>_Returns null if recovery is not found;public RecoveryRef getRecovery(long id) {_        RecoveryTarget status = onGoingRecoveries.get(id)__        if (status != null && status.tryIncRef()) {_            return new RecoveryRef(status)__        }_        return null__    };gets,the,link,recovery,target,for,a,given,id,the,recovery,status,returned,has,it,s,ref,count,already,incremented,to,make,sure,it,s,safe,to,use,however,you,must,call,link,recovery,target,dec,ref,when,you,are,done,with,it,typically,by,using,this,method,in,a,try,with,resources,clause,p,returns,null,if,recovery,is,not,found;public,recovery,ref,get,recovery,long,id,recovery,target,status,on,going,recoveries,get,id,if,status,null,status,try,inc,ref,return,new,recovery,ref,status,return,null
RecoveriesCollection -> public RecoveryTarget resetRecovery(final long recoveryId, final TimeValue activityTimeout);1524684173;Resets the recovery and performs a recovery restart on the currently recovering index shard__@see IndexShard#performRecoveryRestart()_@return newly created RecoveryTarget;public RecoveryTarget resetRecovery(final long recoveryId, final TimeValue activityTimeout) {_        RecoveryTarget oldRecoveryTarget = null__        final RecoveryTarget newRecoveryTarget___        try {_            synchronized (onGoingRecoveries) {_                _                _                oldRecoveryTarget = onGoingRecoveries.remove(recoveryId)__                if (oldRecoveryTarget == null) {_                    return null__                }__                newRecoveryTarget = oldRecoveryTarget.retryCopy()__                startRecoveryInternal(newRecoveryTarget, activityTimeout)__            }__            _            boolean successfulReset = oldRecoveryTarget.resetRecovery(newRecoveryTarget.cancellableThreads())__            if (successfulReset) {_                logger.trace("{} restarted recovery from {}, id [{}], previous id [{}]", newRecoveryTarget.shardId(),_                    newRecoveryTarget.sourceNode(), newRecoveryTarget.recoveryId(), oldRecoveryTarget.recoveryId())__                return newRecoveryTarget__            } else {_                logger.trace("{} recovery could not be reset as it is already cancelled, recovery from {}, id [{}], previous id [{}]",_                    newRecoveryTarget.shardId(), newRecoveryTarget.sourceNode(), newRecoveryTarget.recoveryId(),_                    oldRecoveryTarget.recoveryId())__                cancelRecovery(newRecoveryTarget.recoveryId(), "recovery cancelled during reset")__                return null__            }_        } catch (Exception e) {_            _            oldRecoveryTarget.notifyListener(new RecoveryFailedException(oldRecoveryTarget.state(), "failed to retry recovery", e), true)__            return null__        }_    };resets,the,recovery,and,performs,a,recovery,restart,on,the,currently,recovering,index,shard,see,index,shard,perform,recovery,restart,return,newly,created,recovery,target;public,recovery,target,reset,recovery,final,long,recovery,id,final,time,value,activity,timeout,recovery,target,old,recovery,target,null,final,recovery,target,new,recovery,target,try,synchronized,on,going,recoveries,old,recovery,target,on,going,recoveries,remove,recovery,id,if,old,recovery,target,null,return,null,new,recovery,target,old,recovery,target,retry,copy,start,recovery,internal,new,recovery,target,activity,timeout,boolean,successful,reset,old,recovery,target,reset,recovery,new,recovery,target,cancellable,threads,if,successful,reset,logger,trace,restarted,recovery,from,id,previous,id,new,recovery,target,shard,id,new,recovery,target,source,node,new,recovery,target,recovery,id,old,recovery,target,recovery,id,return,new,recovery,target,else,logger,trace,recovery,could,not,be,reset,as,it,is,already,cancelled,recovery,from,id,previous,id,new,recovery,target,shard,id,new,recovery,target,source,node,new,recovery,target,recovery,id,old,recovery,target,recovery,id,cancel,recovery,new,recovery,target,recovery,id,recovery,cancelled,during,reset,return,null,catch,exception,e,old,recovery,target,notify,listener,new,recovery,failed,exception,old,recovery,target,state,failed,to,retry,recovery,e,true,return,null
RecoveriesCollection -> public RecoveryTarget resetRecovery(final long recoveryId, final TimeValue activityTimeout);1545390648;Resets the recovery and performs a recovery restart on the currently recovering index shard__@see IndexShard#performRecoveryRestart()_@return newly created RecoveryTarget;public RecoveryTarget resetRecovery(final long recoveryId, final TimeValue activityTimeout) {_        RecoveryTarget oldRecoveryTarget = null__        final RecoveryTarget newRecoveryTarget___        try {_            synchronized (onGoingRecoveries) {_                _                _                oldRecoveryTarget = onGoingRecoveries.remove(recoveryId)__                if (oldRecoveryTarget == null) {_                    return null__                }__                newRecoveryTarget = oldRecoveryTarget.retryCopy()__                startRecoveryInternal(newRecoveryTarget, activityTimeout)__            }__            _            boolean successfulReset = oldRecoveryTarget.resetRecovery(newRecoveryTarget.cancellableThreads())__            if (successfulReset) {_                logger.trace("{} restarted recovery from {}, id [{}], previous id [{}]", newRecoveryTarget.shardId(),_                    newRecoveryTarget.sourceNode(), newRecoveryTarget.recoveryId(), oldRecoveryTarget.recoveryId())__                return newRecoveryTarget__            } else {_                logger.trace("{} recovery could not be reset as it is already cancelled, recovery from {}, id [{}], previous id [{}]",_                    newRecoveryTarget.shardId(), newRecoveryTarget.sourceNode(), newRecoveryTarget.recoveryId(),_                    oldRecoveryTarget.recoveryId())__                cancelRecovery(newRecoveryTarget.recoveryId(), "recovery cancelled during reset")__                return null__            }_        } catch (Exception e) {_            _            oldRecoveryTarget.notifyListener(new RecoveryFailedException(oldRecoveryTarget.state(), "failed to retry recovery", e), true)__            return null__        }_    };resets,the,recovery,and,performs,a,recovery,restart,on,the,currently,recovering,index,shard,see,index,shard,perform,recovery,restart,return,newly,created,recovery,target;public,recovery,target,reset,recovery,final,long,recovery,id,final,time,value,activity,timeout,recovery,target,old,recovery,target,null,final,recovery,target,new,recovery,target,try,synchronized,on,going,recoveries,old,recovery,target,on,going,recoveries,remove,recovery,id,if,old,recovery,target,null,return,null,new,recovery,target,old,recovery,target,retry,copy,start,recovery,internal,new,recovery,target,activity,timeout,boolean,successful,reset,old,recovery,target,reset,recovery,new,recovery,target,cancellable,threads,if,successful,reset,logger,trace,restarted,recovery,from,id,previous,id,new,recovery,target,shard,id,new,recovery,target,source,node,new,recovery,target,recovery,id,old,recovery,target,recovery,id,return,new,recovery,target,else,logger,trace,recovery,could,not,be,reset,as,it,is,already,cancelled,recovery,from,id,previous,id,new,recovery,target,shard,id,new,recovery,target,source,node,new,recovery,target,recovery,id,old,recovery,target,recovery,id,cancel,recovery,new,recovery,target,recovery,id,recovery,cancelled,during,reset,return,null,catch,exception,e,old,recovery,target,notify,listener,new,recovery,failed,exception,old,recovery,target,state,failed,to,retry,recovery,e,true,return,null
RecoveriesCollection -> public RecoveryTarget resetRecovery(final long recoveryId, final TimeValue activityTimeout);1548953505;Resets the recovery and performs a recovery restart on the currently recovering index shard__@see IndexShard#performRecoveryRestart()_@return newly created RecoveryTarget;public RecoveryTarget resetRecovery(final long recoveryId, final TimeValue activityTimeout) {_        RecoveryTarget oldRecoveryTarget = null__        final RecoveryTarget newRecoveryTarget___        try {_            synchronized (onGoingRecoveries) {_                _                _                oldRecoveryTarget = onGoingRecoveries.remove(recoveryId)__                if (oldRecoveryTarget == null) {_                    return null__                }__                newRecoveryTarget = oldRecoveryTarget.retryCopy()__                startRecoveryInternal(newRecoveryTarget, activityTimeout)__            }__            _            boolean successfulReset = oldRecoveryTarget.resetRecovery(newRecoveryTarget.cancellableThreads())__            if (successfulReset) {_                logger.trace("{} restarted recovery from {}, id [{}], previous id [{}]", newRecoveryTarget.shardId(),_                    newRecoveryTarget.sourceNode(), newRecoveryTarget.recoveryId(), oldRecoveryTarget.recoveryId())__                return newRecoveryTarget__            } else {_                logger.trace("{} recovery could not be reset as it is already cancelled, recovery from {}, id [{}], previous id [{}]",_                    newRecoveryTarget.shardId(), newRecoveryTarget.sourceNode(), newRecoveryTarget.recoveryId(),_                    oldRecoveryTarget.recoveryId())__                cancelRecovery(newRecoveryTarget.recoveryId(), "recovery cancelled during reset")__                return null__            }_        } catch (Exception e) {_            _            oldRecoveryTarget.notifyListener(new RecoveryFailedException(oldRecoveryTarget.state(), "failed to retry recovery", e), true)__            return null__        }_    };resets,the,recovery,and,performs,a,recovery,restart,on,the,currently,recovering,index,shard,see,index,shard,perform,recovery,restart,return,newly,created,recovery,target;public,recovery,target,reset,recovery,final,long,recovery,id,final,time,value,activity,timeout,recovery,target,old,recovery,target,null,final,recovery,target,new,recovery,target,try,synchronized,on,going,recoveries,old,recovery,target,on,going,recoveries,remove,recovery,id,if,old,recovery,target,null,return,null,new,recovery,target,old,recovery,target,retry,copy,start,recovery,internal,new,recovery,target,activity,timeout,boolean,successful,reset,old,recovery,target,reset,recovery,new,recovery,target,cancellable,threads,if,successful,reset,logger,trace,restarted,recovery,from,id,previous,id,new,recovery,target,shard,id,new,recovery,target,source,node,new,recovery,target,recovery,id,old,recovery,target,recovery,id,return,new,recovery,target,else,logger,trace,recovery,could,not,be,reset,as,it,is,already,cancelled,recovery,from,id,previous,id,new,recovery,target,shard,id,new,recovery,target,source,node,new,recovery,target,recovery,id,old,recovery,target,recovery,id,cancel,recovery,new,recovery,target,recovery,id,recovery,cancelled,during,reset,return,null,catch,exception,e,old,recovery,target,notify,listener,new,recovery,failed,exception,old,recovery,target,state,failed,to,retry,recovery,e,true,return,null
RecoveriesCollection -> public void failRecovery(long id, RecoveryFailedException e, boolean sendShardFailure);1524684173;fail the recovery with the given id (if found) and remove it from the recovery collection__@param id               id of the recovery to fail_@param e                exception with reason for the failure_@param sendShardFailure true a shard failed message should be sent to the master;public void failRecovery(long id, RecoveryFailedException e, boolean sendShardFailure) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        if (removed != null) {_            logger.trace("{} failing recovery from {}, id [{}]. Send shard failure: [{}]", removed.shardId(), removed.sourceNode(),_                removed.recoveryId(), sendShardFailure)__            removed.fail(e, sendShardFailure)__        }_    };fail,the,recovery,with,the,given,id,if,found,and,remove,it,from,the,recovery,collection,param,id,id,of,the,recovery,to,fail,param,e,exception,with,reason,for,the,failure,param,send,shard,failure,true,a,shard,failed,message,should,be,sent,to,the,master;public,void,fail,recovery,long,id,recovery,failed,exception,e,boolean,send,shard,failure,recovery,target,removed,on,going,recoveries,remove,id,if,removed,null,logger,trace,failing,recovery,from,id,send,shard,failure,removed,shard,id,removed,source,node,removed,recovery,id,send,shard,failure,removed,fail,e,send,shard,failure
RecoveriesCollection -> public void failRecovery(long id, RecoveryFailedException e, boolean sendShardFailure);1545390648;fail the recovery with the given id (if found) and remove it from the recovery collection__@param id               id of the recovery to fail_@param e                exception with reason for the failure_@param sendShardFailure true a shard failed message should be sent to the master;public void failRecovery(long id, RecoveryFailedException e, boolean sendShardFailure) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        if (removed != null) {_            logger.trace("{} failing recovery from {}, id [{}]. Send shard failure: [{}]", removed.shardId(), removed.sourceNode(),_                removed.recoveryId(), sendShardFailure)__            removed.fail(e, sendShardFailure)__        }_    };fail,the,recovery,with,the,given,id,if,found,and,remove,it,from,the,recovery,collection,param,id,id,of,the,recovery,to,fail,param,e,exception,with,reason,for,the,failure,param,send,shard,failure,true,a,shard,failed,message,should,be,sent,to,the,master;public,void,fail,recovery,long,id,recovery,failed,exception,e,boolean,send,shard,failure,recovery,target,removed,on,going,recoveries,remove,id,if,removed,null,logger,trace,failing,recovery,from,id,send,shard,failure,removed,shard,id,removed,source,node,removed,recovery,id,send,shard,failure,removed,fail,e,send,shard,failure
RecoveriesCollection -> public void failRecovery(long id, RecoveryFailedException e, boolean sendShardFailure);1548953505;fail the recovery with the given id (if found) and remove it from the recovery collection__@param id               id of the recovery to fail_@param e                exception with reason for the failure_@param sendShardFailure true a shard failed message should be sent to the master;public void failRecovery(long id, RecoveryFailedException e, boolean sendShardFailure) {_        RecoveryTarget removed = onGoingRecoveries.remove(id)__        if (removed != null) {_            logger.trace("{} failing recovery from {}, id [{}]. Send shard failure: [{}]", removed.shardId(), removed.sourceNode(),_                removed.recoveryId(), sendShardFailure)__            removed.fail(e, sendShardFailure)__        }_    };fail,the,recovery,with,the,given,id,if,found,and,remove,it,from,the,recovery,collection,param,id,id,of,the,recovery,to,fail,param,e,exception,with,reason,for,the,failure,param,send,shard,failure,true,a,shard,failed,message,should,be,sent,to,the,master;public,void,fail,recovery,long,id,recovery,failed,exception,e,boolean,send,shard,failure,recovery,target,removed,on,going,recoveries,remove,id,if,removed,null,logger,trace,failing,recovery,from,id,send,shard,failure,removed,shard,id,removed,source,node,removed,recovery,id,send,shard,failure,removed,fail,e,send,shard,failure
RecoveriesCollection -> public boolean cancelRecoveriesForShard(ShardId shardId, String reason);1524684173;cancel all ongoing recoveries for the given shard__@param reason       reason for cancellation_@param shardId      shardId for which to cancel recoveries_@return true if a recovery was cancelled;public boolean cancelRecoveriesForShard(ShardId shardId, String reason) {_        boolean cancelled = false__        List<RecoveryTarget> matchedRecoveries = new ArrayList<>()__        synchronized (onGoingRecoveries) {_            for (Iterator<RecoveryTarget> it = onGoingRecoveries.values().iterator()_ it.hasNext()_ ) {_                RecoveryTarget status = it.next()__                if (status.shardId().equals(shardId)) {_                    matchedRecoveries.add(status)__                    it.remove()__                }_            }_        }_        for (RecoveryTarget removed : matchedRecoveries) {_            logger.trace("{} canceled recovery from {}, id [{}] (reason [{}])",_                removed.shardId(), removed.sourceNode(), removed.recoveryId(), reason)__            removed.cancel(reason)__            cancelled = true__        }_        return cancelled__    };cancel,all,ongoing,recoveries,for,the,given,shard,param,reason,reason,for,cancellation,param,shard,id,shard,id,for,which,to,cancel,recoveries,return,true,if,a,recovery,was,cancelled;public,boolean,cancel,recoveries,for,shard,shard,id,shard,id,string,reason,boolean,cancelled,false,list,recovery,target,matched,recoveries,new,array,list,synchronized,on,going,recoveries,for,iterator,recovery,target,it,on,going,recoveries,values,iterator,it,has,next,recovery,target,status,it,next,if,status,shard,id,equals,shard,id,matched,recoveries,add,status,it,remove,for,recovery,target,removed,matched,recoveries,logger,trace,canceled,recovery,from,id,reason,removed,shard,id,removed,source,node,removed,recovery,id,reason,removed,cancel,reason,cancelled,true,return,cancelled
RecoveriesCollection -> public boolean cancelRecoveriesForShard(ShardId shardId, String reason);1545390648;cancel all ongoing recoveries for the given shard__@param reason       reason for cancellation_@param shardId      shardId for which to cancel recoveries_@return true if a recovery was cancelled;public boolean cancelRecoveriesForShard(ShardId shardId, String reason) {_        boolean cancelled = false__        List<RecoveryTarget> matchedRecoveries = new ArrayList<>()__        synchronized (onGoingRecoveries) {_            for (Iterator<RecoveryTarget> it = onGoingRecoveries.values().iterator()_ it.hasNext()_ ) {_                RecoveryTarget status = it.next()__                if (status.shardId().equals(shardId)) {_                    matchedRecoveries.add(status)__                    it.remove()__                }_            }_        }_        for (RecoveryTarget removed : matchedRecoveries) {_            logger.trace("{} canceled recovery from {}, id [{}] (reason [{}])",_                removed.shardId(), removed.sourceNode(), removed.recoveryId(), reason)__            removed.cancel(reason)__            cancelled = true__        }_        return cancelled__    };cancel,all,ongoing,recoveries,for,the,given,shard,param,reason,reason,for,cancellation,param,shard,id,shard,id,for,which,to,cancel,recoveries,return,true,if,a,recovery,was,cancelled;public,boolean,cancel,recoveries,for,shard,shard,id,shard,id,string,reason,boolean,cancelled,false,list,recovery,target,matched,recoveries,new,array,list,synchronized,on,going,recoveries,for,iterator,recovery,target,it,on,going,recoveries,values,iterator,it,has,next,recovery,target,status,it,next,if,status,shard,id,equals,shard,id,matched,recoveries,add,status,it,remove,for,recovery,target,removed,matched,recoveries,logger,trace,canceled,recovery,from,id,reason,removed,shard,id,removed,source,node,removed,recovery,id,reason,removed,cancel,reason,cancelled,true,return,cancelled
RecoveriesCollection -> public boolean cancelRecoveriesForShard(ShardId shardId, String reason);1548953505;cancel all ongoing recoveries for the given shard__@param reason       reason for cancellation_@param shardId      shardId for which to cancel recoveries_@return true if a recovery was cancelled;public boolean cancelRecoveriesForShard(ShardId shardId, String reason) {_        boolean cancelled = false__        List<RecoveryTarget> matchedRecoveries = new ArrayList<>()__        synchronized (onGoingRecoveries) {_            for (Iterator<RecoveryTarget> it = onGoingRecoveries.values().iterator()_ it.hasNext()_ ) {_                RecoveryTarget status = it.next()__                if (status.shardId().equals(shardId)) {_                    matchedRecoveries.add(status)__                    it.remove()__                }_            }_        }_        for (RecoveryTarget removed : matchedRecoveries) {_            logger.trace("{} canceled recovery from {}, id [{}] (reason [{}])",_                removed.shardId(), removed.sourceNode(), removed.recoveryId(), reason)__            removed.cancel(reason)__            cancelled = true__        }_        return cancelled__    };cancel,all,ongoing,recoveries,for,the,given,shard,param,reason,reason,for,cancellation,param,shard,id,shard,id,for,which,to,cancel,recoveries,return,true,if,a,recovery,was,cancelled;public,boolean,cancel,recoveries,for,shard,shard,id,shard,id,string,reason,boolean,cancelled,false,list,recovery,target,matched,recoveries,new,array,list,synchronized,on,going,recoveries,for,iterator,recovery,target,it,on,going,recoveries,values,iterator,it,has,next,recovery,target,status,it,next,if,status,shard,id,equals,shard,id,matched,recoveries,add,status,it,remove,for,recovery,target,removed,matched,recoveries,logger,trace,canceled,recovery,from,id,reason,removed,shard,id,removed,source,node,removed,recovery,id,reason,removed,cancel,reason,cancelled,true,return,cancelled
RecoveriesCollection -> RecoveryRef -> public RecoveryRef(RecoveryTarget status);1524684173;Important: {@link RecoveryTarget#tryIncRef()} should_be *successfully* called on status before;public RecoveryRef(RecoveryTarget status) {_            this.status = status__            this.status.setLastAccessTime()__        };important,link,recovery,target,try,inc,ref,should,be,successfully,called,on,status,before;public,recovery,ref,recovery,target,status,this,status,status,this,status,set,last,access,time
RecoveriesCollection -> RecoveryRef -> public RecoveryRef(RecoveryTarget status);1545390648;Important: {@link RecoveryTarget#tryIncRef()} should_be *successfully* called on status before;public RecoveryRef(RecoveryTarget status) {_            this.status = status__            this.status.setLastAccessTime()__        };important,link,recovery,target,try,inc,ref,should,be,successfully,called,on,status,before;public,recovery,ref,recovery,target,status,this,status,status,this,status,set,last,access,time
RecoveriesCollection -> RecoveryRef -> public RecoveryRef(RecoveryTarget status);1548953505;Important: {@link RecoveryTarget#tryIncRef()} should_be *successfully* called on status before;public RecoveryRef(RecoveryTarget status) {_            this.status = status__            this.status.setLastAccessTime()__        };important,link,recovery,target,try,inc,ref,should,be,successfully,called,on,status,before;public,recovery,ref,recovery,target,status,this,status,status,this,status,set,last,access,time
