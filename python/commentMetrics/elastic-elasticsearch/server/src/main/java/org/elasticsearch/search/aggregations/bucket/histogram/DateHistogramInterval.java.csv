commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static DateHistogramInterval seconds(int sec) {     return new DateHistogramInterval(sec + "s"). }
false;public,static;1;3;;public static DateHistogramInterval minutes(int min) {     return new DateHistogramInterval(min + "m"). }
false;public,static;1;3;;public static DateHistogramInterval hours(int hours) {     return new DateHistogramInterval(hours + "h"). }
false;public,static;1;3;;public static DateHistogramInterval days(int days) {     return new DateHistogramInterval(days + "d"). }
false;public,static;1;3;;public static DateHistogramInterval weeks(int weeks) {     return new DateHistogramInterval(weeks + "w"). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(expression). }
false;public;0;4;;@Override public String toString() {     return expression. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(expression). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     DateHistogramInterval other = (DateHistogramInterval) obj.     return Objects.equals(expression, other.expression). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.value(toString()). }
