commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (CollectionUtils.isEmpty(indices)) {         validationException = addValidationError("index is missing", validationException).     }     return validationException. }
true;public;0;4;/**  * The indices to be closed  * @return the indices to be closed  */ ;/**  * The indices to be closed  * @return the indices to be closed  */ @Override public String[] indices() {     return indices. }
true;public;1;5;/**  * Sets the indices to be closed  * @param indices the indices to be closed  * @return the request itself  */ ;/**  * Sets the indices to be closed  * @param indices the indices to be closed  * @return the request itself  */ @Override public CloseIndexRequest indices(String... indices) {     this.indices = indices.     return this. }
true;public;0;4;/**  * Specifies what type of requested indices to ignore and how to deal with wildcard expressions.  * For example indices that don't exist.  *  * @return the desired behaviour regarding indices to ignore and wildcard indices expressions  */ ;/**  * Specifies what type of requested indices to ignore and how to deal with wildcard expressions.  * For example indices that don't exist.  *  * @return the desired behaviour regarding indices to ignore and wildcard indices expressions  */ @Override public IndicesOptions indicesOptions() {     return indicesOptions. }
true;public;1;4;/**  * Specifies what type of requested indices to ignore and how to deal wild wildcard expressions.  * For example indices that don't exist.  *  * @param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions  * @return the request itself  */ ;/**  * Specifies what type of requested indices to ignore and how to deal wild wildcard expressions.  * For example indices that don't exist.  *  * @param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions  * @return the request itself  */ public CloseIndexRequest indicesOptions(IndicesOptions indicesOptions) {     this.indicesOptions = indicesOptions.     return this. }
false;public;0;3;;public ActiveShardCount waitForActiveShards() {     return waitForActiveShards. }
false;public;1;4;;public CloseIndexRequest waitForActiveShards(final ActiveShardCount waitForActiveShards) {     this.waitForActiveShards = waitForActiveShards.     return this. }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     indices = in.readStringArray().     indicesOptions = IndicesOptions.readIndicesOptions(in).     if (in.getVersion().onOrAfter(Version.V_7_1_0)) {         waitForActiveShards = ActiveShardCount.readFrom(in).     } else {         waitForActiveShards = ActiveShardCount.NONE.     } }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeStringArray(indices).     indicesOptions.writeIndicesOptions(out).     if (out.getVersion().onOrAfter(Version.V_7_1_0)) {         waitForActiveShards.writeTo(out).     } }
