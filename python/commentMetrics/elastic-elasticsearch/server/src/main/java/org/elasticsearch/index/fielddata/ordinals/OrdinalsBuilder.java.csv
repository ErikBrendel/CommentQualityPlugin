# id;timestamp;commentText;codeText;commentWords;codeWords
OrdinalsBuilder -> OrdinalsStore -> private static long position(int level, long offset);1524684173;Encode the position for the given level and offset. The idea is to encode the level using unary coding in the lower bits and_then the offset in the higher bits.;private static long position(int level, long offset) {_            assert level >= 1__            return (1 << (level - 1)) | (offset << level)__        };encode,the,position,for,the,given,level,and,offset,the,idea,is,to,encode,the,level,using,unary,coding,in,the,lower,bits,and,then,the,offset,in,the,higher,bits;private,static,long,position,int,level,long,offset,assert,level,1,return,1,level,1,offset,level
OrdinalsBuilder -> OrdinalsStore -> private static long position(int level, long offset);1525334055;Encode the position for the given level and offset. The idea is to encode the level using unary coding in the lower bits and_then the offset in the higher bits.;private static long position(int level, long offset) {_            assert level >= 1__            return (1 << (level - 1)) | (offset << level)__        };encode,the,position,for,the,given,level,and,offset,the,idea,is,to,encode,the,level,using,unary,coding,in,the,lower,bits,and,then,the,offset,in,the,higher,bits;private,static,long,position,int,level,long,offset,assert,level,1,return,1,level,1,offset,level
OrdinalsBuilder -> OrdinalsStore -> private static long position(int level, long offset);1540583181;Encode the position for the given level and offset. The idea is to encode the level using unary coding in the lower bits and_then the offset in the higher bits.;private static long position(int level, long offset) {_            assert level >= 1__            return (1 << (level - 1)) | (offset << level)__        };encode,the,position,for,the,given,level,and,offset,the,idea,is,to,encode,the,level,using,unary,coding,in,the,lower,bits,and,then,the,offset,in,the,higher,bits;private,static,long,position,int,level,long,offset,assert,level,1,return,1,level,1,offset,level
OrdinalsBuilder -> OrdinalsStore -> private static int level(long position);1524684173;Decode the level from an encoded position.;private static int level(long position) {_            return 1 + Long.numberOfTrailingZeros(position)__        };decode,the,level,from,an,encoded,position;private,static,int,level,long,position,return,1,long,number,of,trailing,zeros,position
OrdinalsBuilder -> OrdinalsStore -> private static int level(long position);1525334055;Decode the level from an encoded position.;private static int level(long position) {_            return 1 + Long.numberOfTrailingZeros(position)__        };decode,the,level,from,an,encoded,position;private,static,int,level,long,position,return,1,long,number,of,trailing,zeros,position
OrdinalsBuilder -> OrdinalsStore -> private static int level(long position);1540583181;Decode the level from an encoded position.;private static int level(long position) {_            return 1 + Long.numberOfTrailingZeros(position)__        };decode,the,level,from,an,encoded,position;private,static,int,level,long,position,return,1,long,number,of,trailing,zeros,position
OrdinalsBuilder -> public PackedInts.Reader getFirstOrdinals();1524684173;Return a {@link org.apache.lucene.util.packed.PackedInts.Reader} instance mapping every doc ID to its first ordinal + 1 if it exists and 0 otherwise.;public PackedInts.Reader getFirstOrdinals() {_        return ordinals.firstOrdinals__    };return,a,link,org,apache,lucene,util,packed,packed,ints,reader,instance,mapping,every,doc,id,to,its,first,ordinal,1,if,it,exists,and,0,otherwise;public,packed,ints,reader,get,first,ordinals,return,ordinals,first,ordinals
OrdinalsBuilder -> public PackedInts.Reader getFirstOrdinals();1525334055;Return a {@link org.apache.lucene.util.packed.PackedInts.Reader} instance mapping every doc ID to its first ordinal + 1 if it exists and 0 otherwise.;public PackedInts.Reader getFirstOrdinals() {_        return ordinals.firstOrdinals__    };return,a,link,org,apache,lucene,util,packed,packed,ints,reader,instance,mapping,every,doc,id,to,its,first,ordinal,1,if,it,exists,and,0,otherwise;public,packed,ints,reader,get,first,ordinals,return,ordinals,first,ordinals
OrdinalsBuilder -> public PackedInts.Reader getFirstOrdinals();1540583181;Return a {@link PackedInts.Reader} instance mapping every doc ID to its first ordinal + 1 if it exists and 0 otherwise.;public PackedInts.Reader getFirstOrdinals() {_        return ordinals.firstOrdinals__    };return,a,link,packed,ints,reader,instance,mapping,every,doc,id,to,its,first,ordinal,1,if,it,exists,and,0,otherwise;public,packed,ints,reader,get,first,ordinals,return,ordinals,first,ordinals
OrdinalsBuilder -> public long getValueCount();1524684173;Returns the number of distinct ordinals in this builder.;public long getValueCount() {_        return currentOrd + 1__    };returns,the,number,of,distinct,ordinals,in,this,builder;public,long,get,value,count,return,current,ord,1
OrdinalsBuilder -> public long getValueCount();1525334055;Returns the number of distinct ordinals in this builder.;public long getValueCount() {_        return currentOrd + 1__    };returns,the,number,of,distinct,ordinals,in,this,builder;public,long,get,value,count,return,current,ord,1
OrdinalsBuilder -> public long getValueCount();1540583181;Returns the number of distinct ordinals in this builder.;public long getValueCount() {_        return currentOrd + 1__    };returns,the,number,of,distinct,ordinals,in,this,builder;public,long,get,value,count,return,current,ord,1
OrdinalsBuilder -> public int getNumMultiValuesDocs();1524684173;Returns the number distinct of document IDs associated with two or more values.;public int getNumMultiValuesDocs() {_        return numMultiValuedDocs__    };returns,the,number,distinct,of,document,ids,associated,with,two,or,more,values;public,int,get,num,multi,values,docs,return,num,multi,valued,docs
OrdinalsBuilder -> public int getNumMultiValuesDocs();1525334055;Returns the number distinct of document IDs associated with two or more values.;public int getNumMultiValuesDocs() {_        return numMultiValuedDocs__    };returns,the,number,distinct,of,document,ids,associated,with,two,or,more,values;public,int,get,num,multi,values,docs,return,num,multi,valued,docs
OrdinalsBuilder -> public int getNumMultiValuesDocs();1540583181;Returns the number distinct of document IDs associated with two or more values.;public int getNumMultiValuesDocs() {_        return numMultiValuedDocs__    };returns,the,number,distinct,of,document,ids,associated,with,two,or,more,values;public,int,get,num,multi,values,docs,return,num,multi,valued,docs
OrdinalsBuilder -> public int maxDoc();1524684173;Returns the maximum document ID this builder can associate with an ordinal;public int maxDoc() {_        return maxDoc__    };returns,the,maximum,document,id,this,builder,can,associate,with,an,ordinal;public,int,max,doc,return,max,doc
OrdinalsBuilder -> public int maxDoc();1525334055;Returns the maximum document ID this builder can associate with an ordinal;public int maxDoc() {_        return maxDoc__    };returns,the,maximum,document,id,this,builder,can,associate,with,an,ordinal;public,int,max,doc,return,max,doc
OrdinalsBuilder -> public int maxDoc();1540583181;Returns the maximum document ID this builder can associate with an ordinal;public int maxDoc() {_        return maxDoc__    };returns,the,maximum,document,id,this,builder,can,associate,with,an,ordinal;public,int,max,doc,return,max,doc
OrdinalsBuilder -> public int getTotalNumOrds();1524684173;Returns the number of document ID to ordinal pairs in this builder.;public int getTotalNumOrds() {_        return totalNumOrds__    };returns,the,number,of,document,id,to,ordinal,pairs,in,this,builder;public,int,get,total,num,ords,return,total,num,ords
OrdinalsBuilder -> public int getTotalNumOrds();1525334055;Returns the number of document ID to ordinal pairs in this builder.;public int getTotalNumOrds() {_        return totalNumOrds__    };returns,the,number,of,document,id,to,ordinal,pairs,in,this,builder;public,int,get,total,num,ords,return,total,num,ords
OrdinalsBuilder -> public int getTotalNumOrds();1540583181;Returns the number of document ID to ordinal pairs in this builder.;public int getTotalNumOrds() {_        return totalNumOrds__    };returns,the,number,of,document,id,to,ordinal,pairs,in,this,builder;public,int,get,total,num,ords,return,total,num,ords
OrdinalsBuilder -> public long nextOrdinal();1524684173;Advances the {@link OrdinalsBuilder} to the next ordinal and_return the current ordinal.;public long nextOrdinal() {_        return ++currentOrd__    };advances,the,link,ordinals,builder,to,the,next,ordinal,and,return,the,current,ordinal;public,long,next,ordinal,return,current,ord
OrdinalsBuilder -> public long nextOrdinal();1525334055;Advances the {@link OrdinalsBuilder} to the next ordinal and_return the current ordinal.;public long nextOrdinal() {_        return ++currentOrd__    };advances,the,link,ordinals,builder,to,the,next,ordinal,and,return,the,current,ordinal;public,long,next,ordinal,return,current,ord
OrdinalsBuilder -> public long nextOrdinal();1540583181;Advances the {@link OrdinalsBuilder} to the next ordinal and_return the current ordinal.;public long nextOrdinal() {_        return ++currentOrd__    };advances,the,link,ordinals,builder,to,the,next,ordinal,and,return,the,current,ordinal;public,long,next,ordinal,return,current,ord
OrdinalsBuilder -> public BitSet buildDocsWithValuesSet();1524684173;Builds a {@link BitSet} where each documents bit is that that has one or more ordinals associated with it._if every document has an ordinal associated with it this method returns <code>null</code>;public BitSet buildDocsWithValuesSet() {_        if (numDocsWithValue == maxDoc) {_            return null__        }_        final FixedBitSet bitSet = new FixedBitSet(maxDoc)__        for (int docID = 0_ docID < maxDoc_ ++docID) {_            if (ordinals.firstOrdinals.get(docID) != 0) {_                bitSet.set(docID)__            }_        }_        return bitSet__    };builds,a,link,bit,set,where,each,documents,bit,is,that,that,has,one,or,more,ordinals,associated,with,it,if,every,document,has,an,ordinal,associated,with,it,this,method,returns,code,null,code;public,bit,set,build,docs,with,values,set,if,num,docs,with,value,max,doc,return,null,final,fixed,bit,set,bit,set,new,fixed,bit,set,max,doc,for,int,doc,id,0,doc,id,max,doc,doc,id,if,ordinals,first,ordinals,get,doc,id,0,bit,set,set,doc,id,return,bit,set
OrdinalsBuilder -> public BitSet buildDocsWithValuesSet();1525334055;Builds a {@link BitSet} where each documents bit is that that has one or more ordinals associated with it._if every document has an ordinal associated with it this method returns <code>null</code>;public BitSet buildDocsWithValuesSet() {_        if (numDocsWithValue == maxDoc) {_            return null__        }_        final FixedBitSet bitSet = new FixedBitSet(maxDoc)__        for (int docID = 0_ docID < maxDoc_ ++docID) {_            if (ordinals.firstOrdinals.get(docID) != 0) {_                bitSet.set(docID)__            }_        }_        return bitSet__    };builds,a,link,bit,set,where,each,documents,bit,is,that,that,has,one,or,more,ordinals,associated,with,it,if,every,document,has,an,ordinal,associated,with,it,this,method,returns,code,null,code;public,bit,set,build,docs,with,values,set,if,num,docs,with,value,max,doc,return,null,final,fixed,bit,set,bit,set,new,fixed,bit,set,max,doc,for,int,doc,id,0,doc,id,max,doc,doc,id,if,ordinals,first,ordinals,get,doc,id,0,bit,set,set,doc,id,return,bit,set
OrdinalsBuilder -> public OrdinalsBuilder addDoc(int doc);1524684173;Associates the given document id with the current ordinal.;public OrdinalsBuilder addDoc(int doc) {_        totalNumOrds++__        final int numValues = ordinals.addOrdinal(doc, currentOrd)__        if (numValues == 1) {_            ++numDocsWithValue__        } else if (numValues == 2) {_            ++numMultiValuedDocs__        }_        return this__    };associates,the,given,document,id,with,the,current,ordinal;public,ordinals,builder,add,doc,int,doc,total,num,ords,final,int,num,values,ordinals,add,ordinal,doc,current,ord,if,num,values,1,num,docs,with,value,else,if,num,values,2,num,multi,valued,docs,return,this
OrdinalsBuilder -> public OrdinalsBuilder addDoc(int doc);1525334055;Associates the given document id with the current ordinal.;public OrdinalsBuilder addDoc(int doc) {_        totalNumOrds++__        final int numValues = ordinals.addOrdinal(doc, currentOrd)__        if (numValues == 1) {_            ++numDocsWithValue__        } else if (numValues == 2) {_            ++numMultiValuedDocs__        }_        return this__    };associates,the,given,document,id,with,the,current,ordinal;public,ordinals,builder,add,doc,int,doc,total,num,ords,final,int,num,values,ordinals,add,ordinal,doc,current,ord,if,num,values,1,num,docs,with,value,else,if,num,values,2,num,multi,valued,docs,return,this
OrdinalsBuilder -> public OrdinalsBuilder addDoc(int doc);1540583181;Associates the given document id with the current ordinal.;public OrdinalsBuilder addDoc(int doc) {_        totalNumOrds++__        final int numValues = ordinals.addOrdinal(doc, currentOrd)__        if (numValues == 1) {_            ++numDocsWithValue__        } else if (numValues == 2) {_            ++numMultiValuedDocs__        }_        return this__    };associates,the,given,document,id,with,the,current,ordinal;public,ordinals,builder,add,doc,int,doc,total,num,ords,final,int,num,values,ordinals,add,ordinal,doc,current,ord,if,num,values,1,num,docs,with,value,else,if,num,values,2,num,multi,valued,docs,return,this
OrdinalsBuilder -> public BytesRefIterator buildFromTerms(final TermsEnum termsEnum) throws IOException;1524684173;This method iterates all terms in the given {@link TermsEnum} and_associates each terms ordinal with the terms documents. The caller must_exhaust the returned {@link BytesRefIterator} which returns all values_where the first returned value is associated with the ordinal <tt>1</tt>_etc.;public BytesRefIterator buildFromTerms(final TermsEnum termsEnum) throws IOException {_        return new BytesRefIterator() {_            private PostingsEnum docsEnum = null___            @Override_            public BytesRef next() throws IOException {_                BytesRef ref__                if ((ref = termsEnum.next()) != null) {_                    docsEnum = termsEnum.postings(docsEnum, PostingsEnum.NONE)__                    nextOrdinal()__                    int docId__                    while ((docId = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                        addDoc(docId)__                    }_                }_                return ref__            }_        }__    };this,method,iterates,all,terms,in,the,given,link,terms,enum,and,associates,each,terms,ordinal,with,the,terms,documents,the,caller,must,exhaust,the,returned,link,bytes,ref,iterator,which,returns,all,values,where,the,first,returned,value,is,associated,with,the,ordinal,tt,1,tt,etc;public,bytes,ref,iterator,build,from,terms,final,terms,enum,terms,enum,throws,ioexception,return,new,bytes,ref,iterator,private,postings,enum,docs,enum,null,override,public,bytes,ref,next,throws,ioexception,bytes,ref,ref,if,ref,terms,enum,next,null,docs,enum,terms,enum,postings,docs,enum,postings,enum,none,next,ordinal,int,doc,id,while,doc,id,docs,enum,next,doc,doc,id,set,iterator,add,doc,doc,id,return,ref
OrdinalsBuilder -> public BytesRefIterator buildFromTerms(final TermsEnum termsEnum) throws IOException;1525334055;This method iterates all terms in the given {@link TermsEnum} and_associates each terms ordinal with the terms documents. The caller must_exhaust the returned {@link BytesRefIterator} which returns all values_where the first returned value is associated with the ordinal {@code 1}_etc.;public BytesRefIterator buildFromTerms(final TermsEnum termsEnum) throws IOException {_        return new BytesRefIterator() {_            private PostingsEnum docsEnum = null___            @Override_            public BytesRef next() throws IOException {_                BytesRef ref__                if ((ref = termsEnum.next()) != null) {_                    docsEnum = termsEnum.postings(docsEnum, PostingsEnum.NONE)__                    nextOrdinal()__                    int docId__                    while ((docId = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                        addDoc(docId)__                    }_                }_                return ref__            }_        }__    };this,method,iterates,all,terms,in,the,given,link,terms,enum,and,associates,each,terms,ordinal,with,the,terms,documents,the,caller,must,exhaust,the,returned,link,bytes,ref,iterator,which,returns,all,values,where,the,first,returned,value,is,associated,with,the,ordinal,code,1,etc;public,bytes,ref,iterator,build,from,terms,final,terms,enum,terms,enum,throws,ioexception,return,new,bytes,ref,iterator,private,postings,enum,docs,enum,null,override,public,bytes,ref,next,throws,ioexception,bytes,ref,ref,if,ref,terms,enum,next,null,docs,enum,terms,enum,postings,docs,enum,postings,enum,none,next,ordinal,int,doc,id,while,doc,id,docs,enum,next,doc,doc,id,set,iterator,add,doc,doc,id,return,ref
OrdinalsBuilder -> OrdinalsStore -> private static long offset(long position, int level);1524684173;Decode the offset from the position.;private static long offset(long position, int level) {_            return position >>> level__        };decode,the,offset,from,the,position;private,static,long,offset,long,position,int,level,return,position,level
OrdinalsBuilder -> OrdinalsStore -> private static long offset(long position, int level);1525334055;Decode the offset from the position.;private static long offset(long position, int level) {_            return position >>> level__        };decode,the,offset,from,the,position;private,static,long,offset,long,position,int,level,return,position,level
OrdinalsBuilder -> OrdinalsStore -> private static long offset(long position, int level);1540583181;Decode the offset from the position.;private static long offset(long position, int level) {_            return position >>> level__        };decode,the,offset,from,the,position;private,static,long,offset,long,position,int,level,return,position,level
OrdinalsBuilder -> OrdinalsStore -> private static long startOffset(int level, long slice);1524684173;Compute the first offset of the given slice.;private static long startOffset(int level, long slice) {_            return slice << level__        };compute,the,first,offset,of,the,given,slice;private,static,long,start,offset,int,level,long,slice,return,slice,level
OrdinalsBuilder -> OrdinalsStore -> private static long startOffset(int level, long slice);1525334055;Compute the first offset of the given slice.;private static long startOffset(int level, long slice) {_            return slice << level__        };compute,the,first,offset,of,the,given,slice;private,static,long,start,offset,int,level,long,slice,return,slice,level
OrdinalsBuilder -> OrdinalsStore -> private static long startOffset(int level, long slice);1540583181;Compute the first offset of the given slice.;private static long startOffset(int level, long slice) {_            return slice << level__        };compute,the,first,offset,of,the,given,slice;private,static,long,start,offset,int,level,long,slice,return,slice,level
OrdinalsBuilder -> OrdinalsStore -> private long newSlice(int level);1524684173;Allocate a new slice and return its ID.;private long newSlice(int level) {_            final long newSlice = sizes[level]++__            _            if (ordinals[level] == null) {_                ordinals[level] = new PagedGrowableWriter(8L * numSlots(level), PAGE_SIZE, startBitsPerValue, acceptableOverheadRatio)__            } else {_                ordinals[level] = ordinals[level].grow(sizes[level] * numSlots(level))__                if (nextLevelSlices[level] != null) {_                    nextLevelSlices[level] = nextLevelSlices[level].grow(sizes[level])__                }_            }_            return newSlice__        };allocate,a,new,slice,and,return,its,id;private,long,new,slice,int,level,final,long,new,slice,sizes,level,if,ordinals,level,null,ordinals,level,new,paged,growable,writer,8l,num,slots,level,start,bits,per,value,acceptable,overhead,ratio,else,ordinals,level,ordinals,level,grow,sizes,level,num,slots,level,if,next,level,slices,level,null,next,level,slices,level,next,level,slices,level,grow,sizes,level,return,new,slice
OrdinalsBuilder -> OrdinalsStore -> private long newSlice(int level);1525334055;Allocate a new slice and return its ID.;private long newSlice(int level) {_            final long newSlice = sizes[level]++__            _            if (ordinals[level] == null) {_                ordinals[level] = new PagedGrowableWriter(8L * numSlots(level), PAGE_SIZE, startBitsPerValue, acceptableOverheadRatio)__            } else {_                ordinals[level] = ordinals[level].grow(sizes[level] * numSlots(level))__                if (nextLevelSlices[level] != null) {_                    nextLevelSlices[level] = nextLevelSlices[level].grow(sizes[level])__                }_            }_            return newSlice__        };allocate,a,new,slice,and,return,its,id;private,long,new,slice,int,level,final,long,new,slice,sizes,level,if,ordinals,level,null,ordinals,level,new,paged,growable,writer,8l,num,slots,level,start,bits,per,value,acceptable,overhead,ratio,else,ordinals,level,ordinals,level,grow,sizes,level,num,slots,level,if,next,level,slices,level,null,next,level,slices,level,next,level,slices,level,grow,sizes,level,return,new,slice
OrdinalsBuilder -> OrdinalsStore -> private long newSlice(int level);1540583181;Allocate a new slice and return its ID.;private long newSlice(int level) {_            final long newSlice = sizes[level]++__            _            if (ordinals[level] == null) {_                ordinals[level] = new PagedGrowableWriter(8L * numSlots(level), PAGE_SIZE, startBitsPerValue, acceptableOverheadRatio)__            } else {_                ordinals[level] = ordinals[level].grow(sizes[level] * numSlots(level))__                if (nextLevelSlices[level] != null) {_                    nextLevelSlices[level] = nextLevelSlices[level].grow(sizes[level])__                }_            }_            return newSlice__        };allocate,a,new,slice,and,return,its,id;private,long,new,slice,int,level,final,long,new,slice,sizes,level,if,ordinals,level,null,ordinals,level,new,paged,growable,writer,8l,num,slots,level,start,bits,per,value,acceptable,overhead,ratio,else,ordinals,level,ordinals,level,grow,sizes,level,num,slots,level,if,next,level,slices,level,null,next,level,slices,level,next,level,slices,level,grow,sizes,level,return,new,slice
OrdinalsBuilder -> public int getNumSingleValuedDocs();1524684173;Returns the number distinct of document IDs associated with exactly one value.;public int getNumSingleValuedDocs() {_        return numDocsWithValue - numMultiValuedDocs__    };returns,the,number,distinct,of,document,ids,associated,with,exactly,one,value;public,int,get,num,single,valued,docs,return,num,docs,with,value,num,multi,valued,docs
OrdinalsBuilder -> public int getNumSingleValuedDocs();1525334055;Returns the number distinct of document IDs associated with exactly one value.;public int getNumSingleValuedDocs() {_        return numDocsWithValue - numMultiValuedDocs__    };returns,the,number,distinct,of,document,ids,associated,with,exactly,one,value;public,int,get,num,single,valued,docs,return,num,docs,with,value,num,multi,valued,docs
OrdinalsBuilder -> OrdinalsStore -> private static long sliceID(int level, long offset);1524684173;Get the ID of the slice given an offset.;private static long sliceID(int level, long offset) {_            return offset >>> level__        };get,the,id,of,the,slice,given,an,offset;private,static,long,slice,id,int,level,long,offset,return,offset,level
OrdinalsBuilder -> OrdinalsStore -> private static long sliceID(int level, long offset);1525334055;Get the ID of the slice given an offset.;private static long sliceID(int level, long offset) {_            return offset >>> level__        };get,the,id,of,the,slice,given,an,offset;private,static,long,slice,id,int,level,long,offset,return,offset,level
OrdinalsBuilder -> OrdinalsStore -> private static long sliceID(int level, long offset);1540583181;Get the ID of the slice given an offset.;private static long sliceID(int level, long offset) {_            return offset >>> level__        };get,the,id,of,the,slice,given,an,offset;private,static,long,slice,id,int,level,long,offset,return,offset,level
OrdinalsBuilder -> OrdinalsStore -> private static int numOrdinals(int level, long offset);1524684173;Compute the number of ordinals stored for a value given its current position.;private static int numOrdinals(int level, long offset) {_            return (1 << level) + (int) (offset & slotsMask(level))__        };compute,the,number,of,ordinals,stored,for,a,value,given,its,current,position;private,static,int,num,ordinals,int,level,long,offset,return,1,level,int,offset,slots,mask,level
OrdinalsBuilder -> OrdinalsStore -> private static int numOrdinals(int level, long offset);1525334055;Compute the number of ordinals stored for a value given its current position.;private static int numOrdinals(int level, long offset) {_            return (1 << level) + (int) (offset & slotsMask(level))__        };compute,the,number,of,ordinals,stored,for,a,value,given,its,current,position;private,static,int,num,ordinals,int,level,long,offset,return,1,level,int,offset,slots,mask,level
OrdinalsBuilder -> OrdinalsStore -> private static int numOrdinals(int level, long offset);1540583181;Compute the number of ordinals stored for a value given its current position.;private static int numOrdinals(int level, long offset) {_            return (1 << level) + (int) (offset & slotsMask(level))__        };compute,the,number,of,ordinals,stored,for,a,value,given,its,current,position;private,static,int,num,ordinals,int,level,long,offset,return,1,level,int,offset,slots,mask,level
OrdinalsBuilder -> public boolean isMultiValued();1524684173;Returns <code>true</code> iff this builder contains a document ID that is associated with more than one ordinal. Otherwise <code>false</code>_;public boolean isMultiValued() {_        return numMultiValuedDocs > 0__    };returns,code,true,code,iff,this,builder,contains,a,document,id,that,is,associated,with,more,than,one,ordinal,otherwise,code,false,code;public,boolean,is,multi,valued,return,num,multi,valued,docs,0
OrdinalsBuilder -> public boolean isMultiValued();1525334055;Returns <code>true</code> iff this builder contains a document ID that is associated with more than one ordinal. Otherwise <code>false</code>_;public boolean isMultiValued() {_        return numMultiValuedDocs > 0__    };returns,code,true,code,iff,this,builder,contains,a,document,id,that,is,associated,with,more,than,one,ordinal,otherwise,code,false,code;public,boolean,is,multi,valued,return,num,multi,valued,docs,0
OrdinalsBuilder -> public long currentOrdinal();1524684173;Returns the current ordinal or <tt>0</tt> if this build has not been advanced via_{@link #nextOrdinal()}.;public long currentOrdinal() {_        return currentOrd__    };returns,the,current,ordinal,or,tt,0,tt,if,this,build,has,not,been,advanced,via,link,next,ordinal;public,long,current,ordinal,return,current,ord
OrdinalsBuilder -> public long currentOrdinal();1525334055;Returns the current ordinal or {@code 0} if this build has not been advanced via_{@link #nextOrdinal()}.;public long currentOrdinal() {_        return currentOrd__    };returns,the,current,ordinal,or,code,0,if,this,build,has,not,been,advanced,via,link,next,ordinal;public,long,current,ordinal,return,current,ord
OrdinalsBuilder -> public long currentOrdinal();1540583181;Returns the current ordinal or {@code 0} if this build has not been advanced via_{@link #nextOrdinal()}.;public long currentOrdinal() {_        return currentOrd__    };returns,the,current,ordinal,or,code,0,if,this,build,has,not,been,advanced,via,link,next,ordinal;public,long,current,ordinal,return,current,ord
OrdinalsBuilder -> OrdinalsStore -> private static int numSlots(int level);1524684173;Number of slots at <code>level</code>;private static int numSlots(int level) {_            return 1 << level__        };number,of,slots,at,code,level,code;private,static,int,num,slots,int,level,return,1,level
OrdinalsBuilder -> OrdinalsStore -> private static int numSlots(int level);1525334055;Number of slots at <code>level</code>;private static int numSlots(int level) {_            return 1 << level__        };number,of,slots,at,code,level,code;private,static,int,num,slots,int,level,return,1,level
OrdinalsBuilder -> OrdinalsStore -> private static int numSlots(int level);1540583181;Number of slots at <code>level</code>;private static int numSlots(int level) {_            return 1 << level__        };number,of,slots,at,code,level,code;private,static,int,num,slots,int,level,return,1,level
OrdinalsBuilder -> public LongsRef docOrds(int docID);1524684173;Returns a shared {@link LongsRef} instance for the given doc ID holding all ordinals associated with it.;public LongsRef docOrds(int docID) {_        spare.offset = spare.length = 0__        ordinals.appendOrdinals(docID, spare)__        return spare__    };returns,a,shared,link,longs,ref,instance,for,the,given,doc,id,holding,all,ordinals,associated,with,it;public,longs,ref,doc,ords,int,doc,id,spare,offset,spare,length,0,ordinals,append,ordinals,doc,id,spare,return,spare
OrdinalsBuilder -> public LongsRef docOrds(int docID);1525334055;Returns a shared {@link LongsRef} instance for the given doc ID holding all ordinals associated with it.;public LongsRef docOrds(int docID) {_        spare.offset = spare.length = 0__        ordinals.appendOrdinals(docID, spare)__        return spare__    };returns,a,shared,link,longs,ref,instance,for,the,given,doc,id,holding,all,ordinals,associated,with,it;public,longs,ref,doc,ords,int,doc,id,spare,offset,spare,length,0,ordinals,append,ordinals,doc,id,spare,return,spare
OrdinalsBuilder -> public LongsRef docOrds(int docID);1540583181;Returns a shared {@link LongsRef} instance for the given doc ID holding all ordinals associated with it.;public LongsRef docOrds(int docID) {_        spare.offset = spare.length = 0__        ordinals.appendOrdinals(docID, spare)__        return spare__    };returns,a,shared,link,longs,ref,instance,for,the,given,doc,id,holding,all,ordinals,associated,with,it;public,longs,ref,doc,ords,int,doc,id,spare,offset,spare,length,0,ordinals,append,ordinals,doc,id,spare,return,spare
OrdinalsBuilder -> public Ordinals build();1524684173;Builds an {@link Ordinals} instance from the builders current state.;public Ordinals build() {_        final float acceptableOverheadRatio = PackedInts.DEFAULT__        if (numMultiValuedDocs > 0 || MultiOrdinals.significantlySmallerThanSinglePackedOrdinals(maxDoc, numDocsWithValue, getValueCount(), acceptableOverheadRatio)) {_            _            return new MultiOrdinals(this, acceptableOverheadRatio)__        } else {_            return new SinglePackedOrdinals(this, acceptableOverheadRatio)__        }_    };builds,an,link,ordinals,instance,from,the,builders,current,state;public,ordinals,build,final,float,acceptable,overhead,ratio,packed,ints,default,if,num,multi,valued,docs,0,multi,ordinals,significantly,smaller,than,single,packed,ordinals,max,doc,num,docs,with,value,get,value,count,acceptable,overhead,ratio,return,new,multi,ordinals,this,acceptable,overhead,ratio,else,return,new,single,packed,ordinals,this,acceptable,overhead,ratio
OrdinalsBuilder -> public Ordinals build();1525334055;Builds an {@link Ordinals} instance from the builders current state.;public Ordinals build() {_        final float acceptableOverheadRatio = PackedInts.DEFAULT__        if (numMultiValuedDocs > 0 || MultiOrdinals.significantlySmallerThanSinglePackedOrdinals(maxDoc, numDocsWithValue, getValueCount(), acceptableOverheadRatio)) {_            _            return new MultiOrdinals(this, acceptableOverheadRatio)__        } else {_            return new SinglePackedOrdinals(this, acceptableOverheadRatio)__        }_    };builds,an,link,ordinals,instance,from,the,builders,current,state;public,ordinals,build,final,float,acceptable,overhead,ratio,packed,ints,default,if,num,multi,valued,docs,0,multi,ordinals,significantly,smaller,than,single,packed,ordinals,max,doc,num,docs,with,value,get,value,count,acceptable,overhead,ratio,return,new,multi,ordinals,this,acceptable,overhead,ratio,else,return,new,single,packed,ordinals,this,acceptable,overhead,ratio
OrdinalsBuilder -> public Ordinals build();1540583181;Builds an {@link Ordinals} instance from the builders current state.;public Ordinals build() {_        final float acceptableOverheadRatio = PackedInts.DEFAULT__        if (numMultiValuedDocs > 0_            || MultiOrdinals.significantlySmallerThanSinglePackedOrdinals(_                maxDoc, numDocsWithValue, getValueCount(), acceptableOverheadRatio)_        ) {_            _            return new MultiOrdinals(this, acceptableOverheadRatio)__        } else {_            return new SinglePackedOrdinals(this, acceptableOverheadRatio)__        }_    };builds,an,link,ordinals,instance,from,the,builders,current,state;public,ordinals,build,final,float,acceptable,overhead,ratio,packed,ints,default,if,num,multi,valued,docs,0,multi,ordinals,significantly,smaller,than,single,packed,ordinals,max,doc,num,docs,with,value,get,value,count,acceptable,overhead,ratio,return,new,multi,ordinals,this,acceptable,overhead,ratio,else,return,new,single,packed,ordinals,this,acceptable,overhead,ratio
OrdinalsBuilder -> public int getNumDocsWithValue();1524684173;Returns the number distinct of document IDs with one or more values.;public int getNumDocsWithValue() {_        return numDocsWithValue__    };returns,the,number,distinct,of,document,ids,with,one,or,more,values;public,int,get,num,docs,with,value,return,num,docs,with,value
OrdinalsBuilder -> public int getNumDocsWithValue();1525334055;Returns the number distinct of document IDs with one or more values.;public int getNumDocsWithValue() {_        return numDocsWithValue__    };returns,the,number,distinct,of,document,ids,with,one,or,more,values;public,int,get,num,docs,with,value,return,num,docs,with,value
OrdinalsBuilder -> @Override     public void close() throws IOException;1524684173;Closes this builder and release all resources.;@Override_    public void close() throws IOException {_        ordinals = null__    };closes,this,builder,and,release,all,resources;override,public,void,close,throws,ioexception,ordinals,null
OrdinalsBuilder -> @Override     public void close() throws IOException;1525334055;Closes this builder and release all resources.;@Override_    public void close() throws IOException {_        ordinals = null__    };closes,this,builder,and,release,all,resources;override,public,void,close,throws,ioexception,ordinals,null
OrdinalsBuilder -> @Override     public void close() throws IOException;1540583181;Closes this builder and release all resources.;@Override_    public void close() throws IOException {_        ordinals = null__    };closes,this,builder,and,release,all,resources;override,public,void,close,throws,ioexception,ordinals,null
