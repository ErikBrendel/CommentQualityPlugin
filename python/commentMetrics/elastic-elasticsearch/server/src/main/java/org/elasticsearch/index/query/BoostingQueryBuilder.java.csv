commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(positiveQuery).     out.writeNamedWriteable(negativeQuery).     out.writeFloat(negativeBoost). }
true;public;0;3;/**  * Get the positive query for this boosting query.  */ ;/**  * Get the positive query for this boosting query.  */ public QueryBuilder positiveQuery() {     return this.positiveQuery. }
true;public;0;3;/**  * Get the negative query for this boosting query.  */ ;/**  * Get the negative query for this boosting query.  */ public QueryBuilder negativeQuery() {     return this.negativeQuery. }
true;public;1;7;/**  * Set the negative boost factor.  */ ;/**  * Set the negative boost factor.  */ public BoostingQueryBuilder negativeBoost(float negativeBoost) {     if (negativeBoost < 0) {         throw new IllegalArgumentException("query requires negativeBoost to be set to positive value").     }     this.negativeBoost = negativeBoost.     return this. }
true;public;0;3;/**  * Get the negative boost factor.  */ ;/**  * Get the negative boost factor.  */ public float negativeBoost() {     return this.negativeBoost. }
false;protected;2;11;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.field(POSITIVE_FIELD.getPreferredName()).     positiveQuery.toXContent(builder, params).     builder.field(NEGATIVE_FIELD.getPreferredName()).     negativeQuery.toXContent(builder, params).     builder.field(NEGATIVE_BOOST_FIELD.getPreferredName(), negativeBoost).     printBoostAndQueryName(builder).     builder.endObject(). }
false;public,static;1;54;;public static BoostingQueryBuilder fromXContent(XContentParser parser) throws IOException {     QueryBuilder positiveQuery = null.     boolean positiveQueryFound = false.     QueryBuilder negativeQuery = null.     boolean negativeQueryFound = false.     float boost = DEFAULT_BOOST.     float negativeBoost = -1.     String queryName = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             if (POSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 positiveQuery = parseInnerQueryBuilder(parser).                 positiveQueryFound = true.             } else if (NEGATIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 negativeQuery = parseInnerQueryBuilder(parser).                 negativeQueryFound = true.             } else {                 throw new ParsingException(parser.getTokenLocation(), "[boosting] query does not support [" + currentFieldName + "]").             }         } else if (token.isValue()) {             if (NEGATIVE_BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 negativeBoost = parser.floatValue().             } else if (NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 queryName = parser.text().             } else if (BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 boost = parser.floatValue().             } else {                 throw new ParsingException(parser.getTokenLocation(), "[boosting] query does not support [" + currentFieldName + "]").             }         }     }     if (!positiveQueryFound) {         throw new ParsingException(parser.getTokenLocation(), "[boosting] query requires 'positive' query to be set'").     }     if (!negativeQueryFound) {         throw new ParsingException(parser.getTokenLocation(), "[boosting] query requires 'negative' query to be set'").     }     if (negativeBoost < 0) {         throw new ParsingException(parser.getTokenLocation(), "[boosting] query requires 'negative_boost' to be set to be a positive value'").     }     BoostingQueryBuilder boostingQuery = new BoostingQueryBuilder(positiveQuery, negativeQuery).     boostingQuery.negativeBoost(negativeBoost).     boostingQuery.boost(boost).     boostingQuery.queryName(queryName).     return boostingQuery. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;1;6;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     Query positive = positiveQuery.toQuery(context).     Query negative = negativeQuery.toQuery(context).     return FunctionScoreQuery.boostByQuery(positive, negative, negativeBoost). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(negativeBoost, positiveQuery, negativeQuery). }
false;protected;1;6;;@Override protected boolean doEquals(BoostingQueryBuilder other) {     return Objects.equals(negativeBoost, other.negativeBoost) && Objects.equals(positiveQuery, other.positiveQuery) && Objects.equals(negativeQuery, other.negativeQuery). }
false;protected;1;11;;@Override protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {     QueryBuilder positiveQuery = this.positiveQuery.rewrite(queryRewriteContext).     QueryBuilder negativeQuery = this.negativeQuery.rewrite(queryRewriteContext).     if (positiveQuery != this.positiveQuery || negativeQuery != this.negativeQuery) {         BoostingQueryBuilder newQueryBuilder = new BoostingQueryBuilder(positiveQuery, negativeQuery).         newQueryBuilder.negativeBoost = negativeBoost.         return newQueryBuilder.     }     return this. }
false;protected;1;5;;@Override protected void extractInnerHitBuilders(Map<String, InnerHitContextBuilder> innerHits) {     InnerHitContextBuilder.extractInnerHits(positiveQuery, innerHits).     InnerHitContextBuilder.extractInnerHits(negativeQuery, innerHits). }
