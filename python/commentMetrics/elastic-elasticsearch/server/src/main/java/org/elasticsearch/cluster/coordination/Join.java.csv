commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     sourceNode.writeTo(out).     targetNode.writeTo(out).     out.writeLong(term).     out.writeLong(lastAcceptedTerm).     out.writeLong(lastAcceptedVersion). }
false;public;0;3;;public DiscoveryNode getSourceNode() {     return sourceNode. }
false;public;0;3;;public DiscoveryNode getTargetNode() {     return targetNode. }
false;public;1;3;;public boolean targetMatches(DiscoveryNode matchingNode) {     return targetNode.getId().equals(matchingNode.getId()). }
false;public;0;3;;public long getLastAcceptedVersion() {     return lastAcceptedVersion. }
false;public;0;3;;public long getTerm() {     return term. }
false;public;0;3;;public long getLastAcceptedTerm() {     return lastAcceptedTerm. }
false;public;0;10;;@Override public String toString() {     return "Join{" + "term=" + term + ", lastAcceptedTerm=" + lastAcceptedTerm + ", lastAcceptedVersion=" + lastAcceptedVersion + ", sourceNode=" + sourceNode + ", targetNode=" + targetNode + '}'. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Join join = (Join) o.     if (sourceNode.equals(join.sourceNode) == false)         return false.     if (targetNode.equals(join.targetNode) == false)         return false.     if (lastAcceptedVersion != join.lastAcceptedVersion)         return false.     if (term != join.term)         return false.     return lastAcceptedTerm == join.lastAcceptedTerm. }
false;public;0;9;;@Override public int hashCode() {     int result = (int) (lastAcceptedVersion ^ (lastAcceptedVersion >>> 32)).     result = 31 * result + sourceNode.hashCode().     result = 31 * result + targetNode.hashCode().     result = 31 * result + (int) (term ^ (term >>> 32)).     result = 31 * result + (int) (lastAcceptedTerm ^ (lastAcceptedTerm >>> 32)).     return result. }
