commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public SuggestMode suggestMode() {     return suggestMode. }
false;public;1;3;;public void suggestMode(SuggestMode suggestMode) {     this.suggestMode = suggestMode. }
false;public;0;3;;public float accuracy() {     return accuracy. }
false;public;1;3;;public void accuracy(float accuracy) {     this.accuracy = accuracy. }
false;public;0;3;;public SortBy sort() {     return sort. }
false;public;1;3;;public void sort(SortBy sort) {     this.sort = sort. }
false;public;0;3;;public StringDistance stringDistance() {     return stringDistance. }
false;public;1;3;;public void stringDistance(StringDistance distance) {     this.stringDistance = distance. }
false;public;0;3;;public int maxEdits() {     return maxEdits. }
false;public;1;3;;public void maxEdits(int maxEdits) {     this.maxEdits = maxEdits. }
false;public;0;3;;public int maxInspections() {     return maxInspections. }
false;public;1;3;;public void maxInspections(int maxInspections) {     this.maxInspections = maxInspections. }
false;public;0;3;;public float maxTermFreq() {     return maxTermFreq. }
false;public;1;3;;public void maxTermFreq(float maxTermFreq) {     this.maxTermFreq = maxTermFreq. }
false;public;0;3;;public int prefixLength() {     return prefixLength. }
false;public;1;3;;public void prefixLength(int prefixLength) {     this.prefixLength = prefixLength. }
false;public;0;3;;public int minWordLength() {     return minWordLength. }
false;public;1;3;;public void minWordLength(int minWordLength) {     this.minWordLength = minWordLength. }
false;public;0;3;;public float minDocFreq() {     return minDocFreq. }
false;public;1;3;;public void minDocFreq(float minDocFreq) {     this.minDocFreq = minDocFreq. }
false;public;0;26;;public DirectSpellChecker createDirectSpellChecker() {     DirectSpellChecker directSpellChecker = new DirectSpellChecker().     directSpellChecker.setAccuracy(accuracy()).     Comparator<SuggestWord> comparator.     switch(sort()) {         case SCORE:             comparator = SCORE_COMPARATOR.             break.         case FREQUENCY:             comparator = LUCENE_FREQUENCY.             break.         default:             throw new IllegalArgumentException("Illegal suggest sort: " + sort()).     }     directSpellChecker.setComparator(comparator).     directSpellChecker.setDistance(stringDistance()).     directSpellChecker.setMaxEdits(maxEdits()).     directSpellChecker.setMaxInspections(maxInspections()).     directSpellChecker.setMaxQueryFrequency(maxTermFreq()).     directSpellChecker.setMinPrefix(prefixLength()).     directSpellChecker.setMinQueryLength(minWordLength()).     directSpellChecker.setThresholdFrequency(minDocFreq()).     directSpellChecker.setLowerCaseTerms(false).     return directSpellChecker. }
false;public;0;15;;@Override public String toString() {     return "[" + "suggestMode=" + suggestMode + ",sort=" + sort + ",stringDistance=" + stringDistance + ",accuracy=" + accuracy + ",maxEdits=" + maxEdits + ",maxInspections=" + maxInspections + ",maxTermFreq=" + maxTermFreq + ",prefixLength=" + prefixLength + ",minWordLength=" + minWordLength + ",minDocFreq=" + minDocFreq + "]". }
