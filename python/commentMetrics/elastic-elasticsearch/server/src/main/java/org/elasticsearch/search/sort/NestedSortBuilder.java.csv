commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getPath() {     return path. }
false;public;0;3;;public QueryBuilder getFilter() {     return filter. }
false;public;0;1;;public int getMaxChildren() {     return maxChildren. }
false;public;1;4;;public NestedSortBuilder setFilter(final QueryBuilder filter) {     this.filter = filter.     return this. }
false;public;1;4;;public NestedSortBuilder setMaxChildren(final int maxChildren) {     this.maxChildren = maxChildren.     return this. }
false;public;0;3;;public NestedSortBuilder getNestedSort() {     return nestedSort. }
false;public;1;4;;public NestedSortBuilder setNestedSort(final NestedSortBuilder nestedSortBuilder) {     this.nestedSort = nestedSortBuilder.     return this. }
true;public;1;9;/**  * Write this object's fields to a {@linkplain StreamOutput}.  */ ;/**  * Write this object's fields to a {@linkplain StreamOutput}.  */ @Override public void writeTo(final StreamOutput out) throws IOException {     out.writeOptionalString(path).     out.writeOptionalNamedWriteable(filter).     out.writeOptionalWriteable(nestedSort).     if (out.getVersion().onOrAfter(Version.V_6_5_0)) {         out.writeVInt(maxChildren).     } }
false;public;2;20;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     if (path != null) {         builder.field(PATH_FIELD.getPreferredName(), path).     }     if (filter != null) {         builder.field(FILTER_FIELD.getPreferredName(), filter).     }     if (maxChildren != Integer.MAX_VALUE) {         builder.field(MAX_CHILDREN_FIELD.getPreferredName(), maxChildren).     }     if (nestedSort != null) {         builder.field(NESTED_FIELD.getPreferredName(), nestedSort).     }     builder.endObject().     return builder. }
false;public,static;1;33;;public static NestedSortBuilder fromXContent(XContentParser parser) throws IOException {     String path = null.     QueryBuilder filter = null.     int maxChildren = Integer.MAX_VALUE.     NestedSortBuilder nestedSort = null.     XContentParser.Token token = parser.currentToken().     if (token == XContentParser.Token.START_OBJECT) {         while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {             if (token == XContentParser.Token.FIELD_NAME) {                 String currentName = parser.currentName().                 parser.nextToken().                 if (currentName.equals(PATH_FIELD.getPreferredName())) {                     path = parser.text().                 } else if (currentName.equals(FILTER_FIELD.getPreferredName())) {                     filter = parseNestedFilter(parser).                 } else if (currentName.equals(MAX_CHILDREN_FIELD.getPreferredName())) {                     maxChildren = parser.intValue().                 } else if (currentName.equals(NESTED_FIELD.getPreferredName())) {                     nestedSort = NestedSortBuilder.fromXContent(parser).                 } else {                     throw new IllegalArgumentException("malformed nested sort format, unknown field name [" + currentName + "]").                 }             } else {                 throw new IllegalArgumentException("malformed nested sort format, only field names are allowed").             }         }     } else {         throw new IllegalArgumentException("malformed nested sort format, must start with an object").     }     return new NestedSortBuilder(path).setFilter(filter).setMaxChildren(maxChildren).setNestedSort(nestedSort). }
false;public;1;14;;@Override public boolean equals(final Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     NestedSortBuilder that = (NestedSortBuilder) obj.     return Objects.equals(path, that.path) && Objects.equals(filter, that.filter) && Objects.equals(maxChildren, that.maxChildren) && Objects.equals(nestedSort, that.nestedSort). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(path, filter, nestedSort, maxChildren). }
false;public;1;18;;public NestedSortBuilder rewrite(QueryRewriteContext ctx) throws IOException {     if (filter == null && nestedSort == null) {         return this.     }     QueryBuilder rewriteFilter = this.filter.     NestedSortBuilder rewriteNested = this.nestedSort.     if (filter != null) {         rewriteFilter = filter.rewrite(ctx).     }     if (nestedSort != null) {         rewriteNested = nestedSort.rewrite(ctx).     }     if (rewriteFilter != this.filter || rewriteNested != this.nestedSort) {         return new NestedSortBuilder(this.path).setFilter(rewriteFilter).setMaxChildren(this.maxChildren).setNestedSort(rewriteNested).     } else {         return this.     } }
