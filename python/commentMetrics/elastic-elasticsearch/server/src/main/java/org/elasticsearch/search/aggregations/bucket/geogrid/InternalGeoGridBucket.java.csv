commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeLong(hashAsLong).     out.writeVLong(docCount).     aggregations.writeTo(out). }
false;abstract;4;1;;abstract B buildBucket(InternalGeoGridBucket bucket, long hashAsLong, long docCount, InternalAggregations aggregations).
false;;0;3;;long hashAsLong() {     return hashAsLong. }
false;public;0;4;;@Override public long getDocCount() {     return docCount. }
false;public;0;4;;@Override public Aggregations getAggregations() {     return aggregations. }
false;public;1;10;;@Override public int compareTo(InternalGeoGridBucket other) {     if (this.hashAsLong > other.hashAsLong) {         return 1.     }     if (this.hashAsLong < other.hashAsLong) {         return -1.     }     return 0. }
false;public;2;10;;public B reduce(List<B> buckets, InternalAggregation.ReduceContext context) {     List<InternalAggregations> aggregationsList = new ArrayList<>(buckets.size()).     long docCount = 0.     for (B bucket : buckets) {         docCount += bucket.docCount.         aggregationsList.add(bucket.aggregations).     }     final InternalAggregations aggs = InternalAggregations.reduce(aggregationsList, context).     return buildBucket(this, hashAsLong, docCount, aggs). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Aggregation.CommonFields.KEY.getPreferredName(), getKeyAsString()).     builder.field(Aggregation.CommonFields.DOC_COUNT.getPreferredName(), docCount).     aggregations.toXContentInternal(builder, params).     builder.endObject().     return builder. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     InternalGeoGridBucket bucket = (InternalGeoGridBucket) o.     return hashAsLong == bucket.hashAsLong && docCount == bucket.docCount && Objects.equals(aggregations, bucket.aggregations). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(hashAsLong, docCount, aggregations). }
