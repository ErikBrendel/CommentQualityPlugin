commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public long ramBytesUsed() {     // not exposed by lucene     return 0. }
false;public;0;4;;@Override public Collection<Accountable> getChildResources() {     return Collections.emptyList(). }
false;public;0;4;;@Override public void close() { // noop }
false;public;1;4;;@Override public boolean advanceExact(int doc) throws IOException {     return numericValues.advanceExact(doc). }
false;public;0;4;;@Override public int docValueCount() {     return numericValues.docValueCount(). }
false;public;0;7;;@Override public GeoPoint nextValue() throws IOException {     final long encoded = numericValues.nextValue().     point.reset(GeoEncodingUtils.decodeLatitude((int) (encoded >>> 32)), GeoEncodingUtils.decodeLongitude((int) encoded)).     return point. }
false;public;0;30;;@Override public MultiGeoPointValues getGeoPointValues() {     try {         final SortedNumericDocValues numericValues = DocValues.getSortedNumeric(reader, fieldName).         return new MultiGeoPointValues() {              final GeoPoint point = new GeoPoint().              @Override             public boolean advanceExact(int doc) throws IOException {                 return numericValues.advanceExact(doc).             }              @Override             public int docValueCount() {                 return numericValues.docValueCount().             }              @Override             public GeoPoint nextValue() throws IOException {                 final long encoded = numericValues.nextValue().                 point.reset(GeoEncodingUtils.decodeLatitude((int) (encoded >>> 32)), GeoEncodingUtils.decodeLongitude((int) encoded)).                 return point.             }         }.     } catch (IOException e) {         throw new IllegalStateException("Cannot load doc values", e).     } }
