commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public void preProcess(SearchContext context) { }
false;public;1;19;;@Override public void execute(SearchContext context) {     TopDocs topDocs = context.queryResult().topDocs().topDocs.     if (topDocs.scoreDocs.length == 0) {         return.     }     try {         for (RescoreContext ctx : context.rescore()) {             topDocs = ctx.rescorer().rescore(topDocs, context.searcher(), ctx).             // here we only assert that this condition is met.             assert context.sort() == null && topDocsSortedByScore(topDocs) : "topdocs should be sorted after rescore".         }         context.queryResult().topDocs(new TopDocsAndMaxScore(topDocs, topDocs.scoreDocs[0].score), context.queryResult().sortValueFormats()).     } catch (IOException e) {         throw new ElasticsearchException("Rescore Phase Failed", e).     } }
true;private;1;14;/**  * Returns true if the provided docs are sorted by score.  */ ;/**  * Returns true if the provided docs are sorted by score.  */ private boolean topDocsSortedByScore(TopDocs topDocs) {     if (topDocs == null || topDocs.scoreDocs == null || topDocs.scoreDocs.length < 2) {         return true.     }     float lastScore = topDocs.scoreDocs[0].score.     for (int i = 1. i < topDocs.scoreDocs.length. i++) {         ScoreDoc doc = topDocs.scoreDocs[i].         if (Float.compare(doc.score, lastScore) > 0) {             return false.         }         lastScore = doc.score.     }     return true. }
