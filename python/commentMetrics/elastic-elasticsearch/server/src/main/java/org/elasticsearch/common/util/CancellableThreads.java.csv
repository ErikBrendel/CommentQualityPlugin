# id;timestamp;commentText;codeText;commentWords;codeWords
CancellableThreads -> public synchronized void cancel(String reason);1524684173;cancel all current running operations. Future calls to {@link #checkForCancel()} will be failed with the given reason;public synchronized void cancel(String reason) {_        if (cancelled) {_            _            _            _            return__        }_        cancelled = true__        this.reason = reason__        for (Thread thread : threads) {_            thread.interrupt()__        }_        threads.clear()__    };cancel,all,current,running,operations,future,calls,to,link,check,for,cancel,will,be,failed,with,the,given,reason;public,synchronized,void,cancel,string,reason,if,cancelled,return,cancelled,true,this,reason,reason,for,thread,thread,threads,thread,interrupt,threads,clear
CancellableThreads -> public synchronized void cancel(String reason);1540583181;cancel all current running operations. Future calls to {@link #checkForCancel()} will be failed with the given reason;public synchronized void cancel(String reason) {_        if (cancelled) {_            _            _            _            return__        }_        cancelled = true__        this.reason = reason__        for (Thread thread : threads) {_            thread.interrupt()__        }_        threads.clear()__    };cancel,all,current,running,operations,future,calls,to,link,check,for,cancel,will,be,failed,with,the,given,reason;public,synchronized,void,cancel,string,reason,if,cancelled,return,cancelled,true,this,reason,reason,for,thread,thread,threads,thread,interrupt,threads,clear
CancellableThreads -> public synchronized void cancel(String reason);1546446953;cancel all current running operations. Future calls to {@link #checkForCancel()} will be failed with the given reason;public synchronized void cancel(String reason) {_        if (cancelled) {_            _            _            _            return__        }_        cancelled = true__        this.reason = reason__        for (Thread thread : threads) {_            thread.interrupt()__        }_        threads.clear()__    };cancel,all,current,running,operations,future,calls,to,link,check,for,cancel,will,be,failed,with,the,given,reason;public,synchronized,void,cancel,string,reason,if,cancelled,return,cancelled,true,this,reason,reason,for,thread,thread,threads,thread,interrupt,threads,clear
CancellableThreads -> public synchronized void cancel(String reason);1547315388;cancel all current running operations. Future calls to {@link #checkForCancel()} will be failed with the given reason;public synchronized void cancel(String reason) {_        if (cancelled) {_            _            _            _            return__        }_        cancelled = true__        this.reason = reason__        for (Thread thread : threads) {_            thread.interrupt()__        }_        threads.clear()__    };cancel,all,current,running,operations,future,calls,to,link,check,for,cancel,will,be,failed,with,the,given,reason;public,synchronized,void,cancel,string,reason,if,cancelled,return,cancelled,true,this,reason,reason,for,thread,thread,threads,thread,interrupt,threads,clear
CancellableThreads -> public void executeIO(IOInterruptible interruptible) throws IOException;1546446953;run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread_causing the call to prematurely return.__@param interruptible code to run;public void executeIO(IOInterruptible interruptible) throws IOException {_        boolean wasInterrupted = add()__        boolean cancelledByExternalInterrupt = false__        RuntimeException runtimeException = null__        IOException ioException = null___        try {_            interruptible.run()__        } catch (InterruptedException | ThreadInterruptedException e) {_            _            assert cancelled : "Interruption via Thread#interrupt() is unsupported. Use CancellableThreads#cancel() instead"__            _            _            cancelledByExternalInterrupt = !cancelled__        } catch (RuntimeException t) {_            runtimeException = t__        } catch (IOException e) {_            ioException = e__        } finally {_            remove()__        }_        _        _        if (wasInterrupted) {_            Thread.currentThread().interrupt()__        } else {_            _            Thread.interrupted()__        }_        synchronized (this) {_            if (isCancelled()) {_                onCancel(reason, ioException != null ? ioException : runtimeException)__            } else if (ioException != null) {_                _                throw ioException__            }_            if (runtimeException != null) {_                _                throw runtimeException__            }_        }_        if (cancelledByExternalInterrupt) {_            _            Thread.currentThread().interrupt()__            throw new RuntimeException("Interruption via Thread#interrupt() is unsupported. Use CancellableThreads#cancel() instead")__        }__    };run,the,interruptible,capturing,the,executing,thread,concurrent,calls,to,link,cancel,string,will,interrupt,this,thread,causing,the,call,to,prematurely,return,param,interruptible,code,to,run;public,void,execute,io,iointerruptible,interruptible,throws,ioexception,boolean,was,interrupted,add,boolean,cancelled,by,external,interrupt,false,runtime,exception,runtime,exception,null,ioexception,io,exception,null,try,interruptible,run,catch,interrupted,exception,thread,interrupted,exception,e,assert,cancelled,interruption,via,thread,interrupt,is,unsupported,use,cancellable,threads,cancel,instead,cancelled,by,external,interrupt,cancelled,catch,runtime,exception,t,runtime,exception,t,catch,ioexception,e,io,exception,e,finally,remove,if,was,interrupted,thread,current,thread,interrupt,else,thread,interrupted,synchronized,this,if,is,cancelled,on,cancel,reason,io,exception,null,io,exception,runtime,exception,else,if,io,exception,null,throw,io,exception,if,runtime,exception,null,throw,runtime,exception,if,cancelled,by,external,interrupt,thread,current,thread,interrupt,throw,new,runtime,exception,interruption,via,thread,interrupt,is,unsupported,use,cancellable,threads,cancel,instead
CancellableThreads -> public void executeIO(IOInterruptible interruptible) throws IOException;1547315388;run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread_causing the call to prematurely return.__@param interruptible code to run;public void executeIO(IOInterruptible interruptible) throws IOException {_        boolean wasInterrupted = add()__        boolean cancelledByExternalInterrupt = false__        RuntimeException runtimeException = null__        IOException ioException = null___        try {_            interruptible.run()__        } catch (InterruptedException | ThreadInterruptedException e) {_            _            assert cancelled : "Interruption via Thread#interrupt() is unsupported. Use CancellableThreads#cancel() instead"__            _            _            cancelledByExternalInterrupt = !cancelled__        } catch (RuntimeException t) {_            runtimeException = t__        } catch (IOException e) {_            ioException = e__        } finally {_            remove()__        }_        _        _        if (wasInterrupted) {_            Thread.currentThread().interrupt()__        } else {_            _            Thread.interrupted()__        }_        checkForCancel(ioException != null ? ioException : runtimeException)__        if (ioException != null) {_            _            throw ioException__        }_        if (runtimeException != null) {_            _            throw runtimeException__        }_        if (cancelledByExternalInterrupt) {_            _            Thread.currentThread().interrupt()__            throw new RuntimeException("Interruption via Thread#interrupt() is unsupported. Use CancellableThreads#cancel() instead")__        }__    };run,the,interruptible,capturing,the,executing,thread,concurrent,calls,to,link,cancel,string,will,interrupt,this,thread,causing,the,call,to,prematurely,return,param,interruptible,code,to,run;public,void,execute,io,iointerruptible,interruptible,throws,ioexception,boolean,was,interrupted,add,boolean,cancelled,by,external,interrupt,false,runtime,exception,runtime,exception,null,ioexception,io,exception,null,try,interruptible,run,catch,interrupted,exception,thread,interrupted,exception,e,assert,cancelled,interruption,via,thread,interrupt,is,unsupported,use,cancellable,threads,cancel,instead,cancelled,by,external,interrupt,cancelled,catch,runtime,exception,t,runtime,exception,t,catch,ioexception,e,io,exception,e,finally,remove,if,was,interrupted,thread,current,thread,interrupt,else,thread,interrupted,check,for,cancel,io,exception,null,io,exception,runtime,exception,if,io,exception,null,throw,io,exception,if,runtime,exception,null,throw,runtime,exception,if,cancelled,by,external,interrupt,thread,current,thread,interrupt,throw,new,runtime,exception,interruption,via,thread,interrupt,is,unsupported,use,cancellable,threads,cancel,instead
CancellableThreads -> public synchronized void checkForCancel();1524684173;call this will throw an exception if operation was cancelled. Override {@link #onCancel(String, Exception)} for custom failure logic;public synchronized void checkForCancel() {_        if (isCancelled()) {_            onCancel(reason, null)__        }_    };call,this,will,throw,an,exception,if,operation,was,cancelled,override,link,on,cancel,string,exception,for,custom,failure,logic;public,synchronized,void,check,for,cancel,if,is,cancelled,on,cancel,reason,null
CancellableThreads -> public synchronized void checkForCancel();1540583181;call this will throw an exception if operation was cancelled._Override {@link #onCancel(String, Exception)} for custom failure logic;public synchronized void checkForCancel() {_        if (isCancelled()) {_            onCancel(reason, null)__        }_    };call,this,will,throw,an,exception,if,operation,was,cancelled,override,link,on,cancel,string,exception,for,custom,failure,logic;public,synchronized,void,check,for,cancel,if,is,cancelled,on,cancel,reason,null
CancellableThreads -> public synchronized void checkForCancel();1546446953;call this will throw an exception if operation was cancelled._Override {@link #onCancel(String, Exception)} for custom failure logic;public synchronized void checkForCancel() {_        if (isCancelled()) {_            onCancel(reason, null)__        }_    };call,this,will,throw,an,exception,if,operation,was,cancelled,override,link,on,cancel,string,exception,for,custom,failure,logic;public,synchronized,void,check,for,cancel,if,is,cancelled,on,cancel,reason,null
CancellableThreads -> protected void onCancel(String reason, @Nullable Exception suppressedException);1524684173;called if {@link #checkForCancel()} was invoked after the operation was cancelled._the default implementation always throws an {@link ExecutionCancelledException}, suppressing_any other exception that occurred before cancellation_@param reason              reason for failure supplied by the caller of {@link #cancel}_@param suppressedException any error that was encountered during the execution before the operation was cancelled.;protected void onCancel(String reason, @Nullable Exception suppressedException) {_        RuntimeException e = new ExecutionCancelledException("operation was cancelled reason [" + reason + "]")__        if (suppressedException != null) {_            e.addSuppressed(suppressedException)__        }_        throw e__    };called,if,link,check,for,cancel,was,invoked,after,the,operation,was,cancelled,the,default,implementation,always,throws,an,link,execution,cancelled,exception,suppressing,any,other,exception,that,occurred,before,cancellation,param,reason,reason,for,failure,supplied,by,the,caller,of,link,cancel,param,suppressed,exception,any,error,that,was,encountered,during,the,execution,before,the,operation,was,cancelled;protected,void,on,cancel,string,reason,nullable,exception,suppressed,exception,runtime,exception,e,new,execution,cancelled,exception,operation,was,cancelled,reason,reason,if,suppressed,exception,null,e,add,suppressed,suppressed,exception,throw,e
CancellableThreads -> protected void onCancel(String reason, @Nullable Exception suppressedException);1540583181;called if {@link #checkForCancel()} was invoked after the operation was cancelled._the default implementation always throws an {@link ExecutionCancelledException}, suppressing_any other exception that occurred before cancellation_@param reason              reason for failure supplied by the caller of {@link #cancel}_@param suppressedException any error that was encountered during the execution before the operation was cancelled.;protected void onCancel(String reason, @Nullable Exception suppressedException) {_        RuntimeException e = new ExecutionCancelledException("operation was cancelled reason [" + reason + "]")__        if (suppressedException != null) {_            e.addSuppressed(suppressedException)__        }_        throw e__    };called,if,link,check,for,cancel,was,invoked,after,the,operation,was,cancelled,the,default,implementation,always,throws,an,link,execution,cancelled,exception,suppressing,any,other,exception,that,occurred,before,cancellation,param,reason,reason,for,failure,supplied,by,the,caller,of,link,cancel,param,suppressed,exception,any,error,that,was,encountered,during,the,execution,before,the,operation,was,cancelled;protected,void,on,cancel,string,reason,nullable,exception,suppressed,exception,runtime,exception,e,new,execution,cancelled,exception,operation,was,cancelled,reason,reason,if,suppressed,exception,null,e,add,suppressed,suppressed,exception,throw,e
CancellableThreads -> protected void onCancel(String reason, @Nullable Exception suppressedException);1546446953;called if {@link #checkForCancel()} was invoked after the operation was cancelled._the default implementation always throws an {@link ExecutionCancelledException}, suppressing_any other exception that occurred before cancellation_@param reason              reason for failure supplied by the caller of {@link #cancel}_@param suppressedException any error that was encountered during the execution before the operation was cancelled.;protected void onCancel(String reason, @Nullable Exception suppressedException) {_        RuntimeException e = new ExecutionCancelledException("operation was cancelled reason [" + reason + "]")__        if (suppressedException != null) {_            e.addSuppressed(suppressedException)__        }_        throw e__    };called,if,link,check,for,cancel,was,invoked,after,the,operation,was,cancelled,the,default,implementation,always,throws,an,link,execution,cancelled,exception,suppressing,any,other,exception,that,occurred,before,cancellation,param,reason,reason,for,failure,supplied,by,the,caller,of,link,cancel,param,suppressed,exception,any,error,that,was,encountered,during,the,execution,before,the,operation,was,cancelled;protected,void,on,cancel,string,reason,nullable,exception,suppressed,exception,runtime,exception,e,new,execution,cancelled,exception,operation,was,cancelled,reason,reason,if,suppressed,exception,null,e,add,suppressed,suppressed,exception,throw,e
CancellableThreads -> public void executeIO(IOInterruptable interruptable) throws IOException;1524684173;run the Interruptable, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread_causing the call to prematurely return.__@param interruptable code to run;public void executeIO(IOInterruptable interruptable) throws IOException {_        boolean wasInterrupted = add()__        boolean cancelledByExternalInterrupt = false__        RuntimeException runtimeException = null__        IOException ioException = null___        try {_            interruptable.run()__        } catch (InterruptedException | ThreadInterruptedException e) {_            _            assert cancelled : "Interruption via Thread#interrupt() is unsupported. Use CancellableThreads#cancel() instead"__            _            _            cancelledByExternalInterrupt = !cancelled__        } catch (RuntimeException t) {_            runtimeException = t__        } catch (IOException e) {_            ioException = e__        } finally {_            remove()__        }_        _        _        if (wasInterrupted) {_            Thread.currentThread().interrupt()__        } else {_            _            Thread.interrupted()__        }_        synchronized (this) {_            if (isCancelled()) {_                onCancel(reason, ioException != null ? ioException : runtimeException)__            } else if (ioException != null) {_                _                throw ioException__            }_            if (runtimeException != null) {_                _                throw runtimeException__            }_        }_        if (cancelledByExternalInterrupt) {_            _            Thread.currentThread().interrupt()__            throw new RuntimeException("Interruption via Thread#interrupt() is unsupported. Use CancellableThreads#cancel() instead")__        }__    };run,the,interruptable,capturing,the,executing,thread,concurrent,calls,to,link,cancel,string,will,interrupt,this,thread,causing,the,call,to,prematurely,return,param,interruptable,code,to,run;public,void,execute,io,iointerruptable,interruptable,throws,ioexception,boolean,was,interrupted,add,boolean,cancelled,by,external,interrupt,false,runtime,exception,runtime,exception,null,ioexception,io,exception,null,try,interruptable,run,catch,interrupted,exception,thread,interrupted,exception,e,assert,cancelled,interruption,via,thread,interrupt,is,unsupported,use,cancellable,threads,cancel,instead,cancelled,by,external,interrupt,cancelled,catch,runtime,exception,t,runtime,exception,t,catch,ioexception,e,io,exception,e,finally,remove,if,was,interrupted,thread,current,thread,interrupt,else,thread,interrupted,synchronized,this,if,is,cancelled,on,cancel,reason,io,exception,null,io,exception,runtime,exception,else,if,io,exception,null,throw,io,exception,if,runtime,exception,null,throw,runtime,exception,if,cancelled,by,external,interrupt,thread,current,thread,interrupt,throw,new,runtime,exception,interruption,via,thread,interrupt,is,unsupported,use,cancellable,threads,cancel,instead
CancellableThreads -> public void executeIO(IOInterruptable interruptable) throws IOException;1540583181;run the Interruptable, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread_causing the call to prematurely return.__@param interruptable code to run;public void executeIO(IOInterruptable interruptable) throws IOException {_        boolean wasInterrupted = add()__        boolean cancelledByExternalInterrupt = false__        RuntimeException runtimeException = null__        IOException ioException = null___        try {_            interruptable.run()__        } catch (InterruptedException | ThreadInterruptedException e) {_            _            assert cancelled : "Interruption via Thread#interrupt() is unsupported. Use CancellableThreads#cancel() instead"__            _            _            cancelledByExternalInterrupt = !cancelled__        } catch (RuntimeException t) {_            runtimeException = t__        } catch (IOException e) {_            ioException = e__        } finally {_            remove()__        }_        _        _        if (wasInterrupted) {_            Thread.currentThread().interrupt()__        } else {_            _            Thread.interrupted()__        }_        synchronized (this) {_            if (isCancelled()) {_                onCancel(reason, ioException != null ? ioException : runtimeException)__            } else if (ioException != null) {_                _                throw ioException__            }_            if (runtimeException != null) {_                _                throw runtimeException__            }_        }_        if (cancelledByExternalInterrupt) {_            _            Thread.currentThread().interrupt()__            throw new RuntimeException("Interruption via Thread#interrupt() is unsupported. Use CancellableThreads#cancel() instead")__        }__    };run,the,interruptable,capturing,the,executing,thread,concurrent,calls,to,link,cancel,string,will,interrupt,this,thread,causing,the,call,to,prematurely,return,param,interruptable,code,to,run;public,void,execute,io,iointerruptable,interruptable,throws,ioexception,boolean,was,interrupted,add,boolean,cancelled,by,external,interrupt,false,runtime,exception,runtime,exception,null,ioexception,io,exception,null,try,interruptable,run,catch,interrupted,exception,thread,interrupted,exception,e,assert,cancelled,interruption,via,thread,interrupt,is,unsupported,use,cancellable,threads,cancel,instead,cancelled,by,external,interrupt,cancelled,catch,runtime,exception,t,runtime,exception,t,catch,ioexception,e,io,exception,e,finally,remove,if,was,interrupted,thread,current,thread,interrupt,else,thread,interrupted,synchronized,this,if,is,cancelled,on,cancel,reason,io,exception,null,io,exception,runtime,exception,else,if,io,exception,null,throw,io,exception,if,runtime,exception,null,throw,runtime,exception,if,cancelled,by,external,interrupt,thread,current,thread,interrupt,throw,new,runtime,exception,interruption,via,thread,interrupt,is,unsupported,use,cancellable,threads,cancel,instead
CancellableThreads -> public void execute(Interruptable interruptable);1524684173;run the Interruptable, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread_causing the call to prematurely return.__@param interruptable code to run;public void execute(Interruptable interruptable) {_        try {_            executeIO(interruptable)__        } catch (IOException e) {_            assert false : "the passed interruptable can not result in an IOException"__            throw new RuntimeException("unexpected IO exception", e)__        }_    };run,the,interruptable,capturing,the,executing,thread,concurrent,calls,to,link,cancel,string,will,interrupt,this,thread,causing,the,call,to,prematurely,return,param,interruptable,code,to,run;public,void,execute,interruptable,interruptable,try,execute,io,interruptable,catch,ioexception,e,assert,false,the,passed,interruptable,can,not,result,in,an,ioexception,throw,new,runtime,exception,unexpected,io,exception,e
CancellableThreads -> public void execute(Interruptable interruptable);1540583181;run the Interruptable, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread_causing the call to prematurely return.__@param interruptable code to run;public void execute(Interruptable interruptable) {_        try {_            executeIO(interruptable)__        } catch (IOException e) {_            assert false : "the passed interruptable can not result in an IOException"__            throw new RuntimeException("unexpected IO exception", e)__        }_    };run,the,interruptable,capturing,the,executing,thread,concurrent,calls,to,link,cancel,string,will,interrupt,this,thread,causing,the,call,to,prematurely,return,param,interruptable,code,to,run;public,void,execute,interruptable,interruptable,try,execute,io,interruptable,catch,ioexception,e,assert,false,the,passed,interruptable,can,not,result,in,an,ioexception,throw,new,runtime,exception,unexpected,io,exception,e
CancellableThreads -> public void execute(Interruptible interruptible);1546446953;run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread_causing the call to prematurely return.__@param interruptible code to run;public void execute(Interruptible interruptible) {_        try {_            executeIO(interruptible)__        } catch (IOException e) {_            assert false : "the passed interruptible can not result in an IOException"__            throw new RuntimeException("unexpected IO exception", e)__        }_    };run,the,interruptible,capturing,the,executing,thread,concurrent,calls,to,link,cancel,string,will,interrupt,this,thread,causing,the,call,to,prematurely,return,param,interruptible,code,to,run;public,void,execute,interruptible,interruptible,try,execute,io,interruptible,catch,ioexception,e,assert,false,the,passed,interruptible,can,not,result,in,an,ioexception,throw,new,runtime,exception,unexpected,io,exception,e
CancellableThreads -> public void execute(Interruptible interruptible);1547315388;run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread_causing the call to prematurely return.__@param interruptible code to run;public void execute(Interruptible interruptible) {_        try {_            executeIO(interruptible)__        } catch (IOException e) {_            assert false : "the passed interruptible can not result in an IOException"__            throw new RuntimeException("unexpected IO exception", e)__        }_    };run,the,interruptible,capturing,the,executing,thread,concurrent,calls,to,link,cancel,string,will,interrupt,this,thread,causing,the,call,to,prematurely,return,param,interruptible,code,to,run;public,void,execute,interruptible,interruptible,try,execute,io,interruptible,catch,ioexception,e,assert,false,the,passed,interruptible,can,not,result,in,an,ioexception,throw,new,runtime,exception,unexpected,io,exception,e
