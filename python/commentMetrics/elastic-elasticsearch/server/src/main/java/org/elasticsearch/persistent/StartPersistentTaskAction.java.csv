commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public PersistentTaskResponse newResponse() {     return new PersistentTaskResponse(). }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     taskId = in.readString().     taskName = in.readString().     if (in.getVersion().onOrAfter(Version.V_6_3_0)) {         params = in.readNamedWriteable(PersistentTaskParams.class).     } else {         params = in.readOptionalNamedWriteable(PersistentTaskParams.class).     } }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(taskId).     out.writeString(taskName).     if (out.getVersion().onOrAfter(Version.V_6_3_0)) {         out.writeNamedWriteable(params).     } else {         out.writeOptionalNamedWriteable(params).     } }
false;public;0;17;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (this.taskId == null) {         validationException = addValidationError("task id must be specified", validationException).     }     if (this.taskName == null) {         validationException = addValidationError("action must be specified", validationException).     }     if (params != null) {         if (params.getWriteableName().equals(taskName) == false) {             validationException = addValidationError("params have to have the same writeable name as task. params: " + params.getWriteableName() + " task: " + taskName, validationException).         }     }     return validationException. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Request request1 = (Request) o.     return Objects.equals(taskId, request1.taskId) && Objects.equals(taskName, request1.taskName) && Objects.equals(params, request1.params). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(taskId, taskName, params). }
false;public;0;3;;public String getTaskName() {     return taskName. }
false;public;1;3;;public void setTaskName(String taskName) {     this.taskName = taskName. }
false;public;0;3;;public String getTaskId() {     return taskId. }
false;public;1;3;;public void setTaskId(String taskId) {     this.taskId = taskId. }
false;public;0;3;;public PersistentTaskParams getParams() {     return params. }
false;public;1;4;;@Nullable public void setParams(PersistentTaskParams params) {     this.params = params. }
false;public;1;4;;public RequestBuilder setTaskId(String taskId) {     request.setTaskId(taskId).     return this. }
false;public;1;4;;public RequestBuilder setAction(String action) {     request.setTaskName(action).     return this. }
false;public;1;4;;public RequestBuilder setRequest(PersistentTaskParams params) {     request.setParams(params).     return this. }
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.GENERIC. }
false;protected;0;4;;@Override protected PersistentTaskResponse newResponse() {     return new PersistentTaskResponse(). }
false;protected;2;5;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     // Cluster is not affected but we look up repositories in metadata     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
false;public;1;4;;@Override public void onResponse(PersistentTask<?> task) {     listener.onResponse(new PersistentTaskResponse(task)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;protected,final;3;17;;@Override protected final void masterOperation(final Request request, ClusterState state, final ActionListener<PersistentTaskResponse> listener) {     persistentTasksClusterService.createPersistentTask(request.taskId, request.taskName, request.params, new ActionListener<PersistentTask<?>>() {          @Override         public void onResponse(PersistentTask<?> task) {             listener.onResponse(new PersistentTaskResponse(task)).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
