# id;timestamp;commentText;codeText;commentWords;codeWords
TransportClientNodesService -> NodeSampler -> List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes);1527840262;Establishes the node connections. If validateInHandshake is set to true, the connection will fail if_node returned in the handshake response is different than the discovery node.;List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {_            for (Iterator<DiscoveryNode> it = nodes.iterator()_ it.hasNext()_ ) {_                DiscoveryNode node = it.next()__                if (!transportService.nodeConnected(node)) {_                    try {_                        logger.trace("connecting to node [{}]", node)__                        transportService.connectToNode(node)__                    } catch (Exception e) {_                        it.remove()__                        logger.debug(() -> new ParameterizedMessage("failed to connect to discovered node [{}]", node), e)__                    }_                }_            }__            return Collections.unmodifiableList(new ArrayList<>(nodes))__        };establishes,the,node,connections,if,validate,in,handshake,is,set,to,true,the,connection,will,fail,if,node,returned,in,the,handshake,response,is,different,than,the,discovery,node;list,discovery,node,establish,node,connections,set,discovery,node,nodes,for,iterator,discovery,node,it,nodes,iterator,it,has,next,discovery,node,node,it,next,if,transport,service,node,connected,node,try,logger,trace,connecting,to,node,node,transport,service,connect,to,node,node,catch,exception,e,it,remove,logger,debug,new,parameterized,message,failed,to,connect,to,discovered,node,node,e,return,collections,unmodifiable,list,new,array,list,nodes
TransportClientNodesService -> NodeSampler -> List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes);1540583181;Establishes the node connections. If validateInHandshake is set to true, the connection will fail if_node returned in the handshake response is different than the discovery node.;List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {_            for (Iterator<DiscoveryNode> it = nodes.iterator()_ it.hasNext()_ ) {_                DiscoveryNode node = it.next()__                if (!transportService.nodeConnected(node)) {_                    try {_                        logger.trace("connecting to node [{}]", node)__                        transportService.connectToNode(node)__                    } catch (Exception e) {_                        it.remove()__                        logger.debug(() -> new ParameterizedMessage("failed to connect to discovered node [{}]", node), e)__                    }_                }_            }__            return Collections.unmodifiableList(new ArrayList<>(nodes))__        };establishes,the,node,connections,if,validate,in,handshake,is,set,to,true,the,connection,will,fail,if,node,returned,in,the,handshake,response,is,different,than,the,discovery,node;list,discovery,node,establish,node,connections,set,discovery,node,nodes,for,iterator,discovery,node,it,nodes,iterator,it,has,next,discovery,node,node,it,next,if,transport,service,node,connected,node,try,logger,trace,connecting,to,node,node,transport,service,connect,to,node,node,catch,exception,e,it,remove,logger,debug,new,parameterized,message,failed,to,connect,to,discovered,node,node,e,return,collections,unmodifiable,list,new,array,list,nodes
TransportClientNodesService -> NodeSampler -> List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes);1541008027;Establishes the node connections. If validateInHandshake is set to true, the connection will fail if_node returned in the handshake response is different than the discovery node.;List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {_            for (Iterator<DiscoveryNode> it = nodes.iterator()_ it.hasNext()_ ) {_                DiscoveryNode node = it.next()__                if (!transportService.nodeConnected(node)) {_                    try {_                        logger.trace("connecting to node [{}]", node)__                        transportService.connectToNode(node)__                    } catch (Exception e) {_                        it.remove()__                        logger.debug(() -> new ParameterizedMessage("failed to connect to discovered node [{}]", node), e)__                    }_                }_            }__            return Collections.unmodifiableList(new ArrayList<>(nodes))__        };establishes,the,node,connections,if,validate,in,handshake,is,set,to,true,the,connection,will,fail,if,node,returned,in,the,handshake,response,is,different,than,the,discovery,node;list,discovery,node,establish,node,connections,set,discovery,node,nodes,for,iterator,discovery,node,it,nodes,iterator,it,has,next,discovery,node,node,it,next,if,transport,service,node,connected,node,try,logger,trace,connecting,to,node,node,transport,service,connect,to,node,node,catch,exception,e,it,remove,logger,debug,new,parameterized,message,failed,to,connect,to,discovered,node,node,e,return,collections,unmodifiable,list,new,array,list,nodes
TransportClientNodesService -> NodeSampler -> List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes);1541092382;Establishes the node connections. If validateInHandshake is set to true, the connection will fail if_node returned in the handshake response is different than the discovery node.;List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {_            for (Iterator<DiscoveryNode> it = nodes.iterator()_ it.hasNext()_ ) {_                DiscoveryNode node = it.next()__                if (!transportService.nodeConnected(node)) {_                    try {_                        logger.trace("connecting to node [{}]", node)__                        transportService.connectToNode(node)__                    } catch (Exception e) {_                        it.remove()__                        logger.debug(() -> new ParameterizedMessage("failed to connect to discovered node [{}]", node), e)__                    }_                }_            }__            return Collections.unmodifiableList(new ArrayList<>(nodes))__        };establishes,the,node,connections,if,validate,in,handshake,is,set,to,true,the,connection,will,fail,if,node,returned,in,the,handshake,response,is,different,than,the,discovery,node;list,discovery,node,establish,node,connections,set,discovery,node,nodes,for,iterator,discovery,node,it,nodes,iterator,it,has,next,discovery,node,node,it,next,if,transport,service,node,connected,node,try,logger,trace,connecting,to,node,node,transport,service,connect,to,node,node,catch,exception,e,it,remove,logger,debug,new,parameterized,message,failed,to,connect,to,discovered,node,node,e,return,collections,unmodifiable,list,new,array,list,nodes
TransportClientNodesService -> NodeSampler -> List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes);1542402632;Establishes the node connections. If validateInHandshake is set to true, the connection will fail if_node returned in the handshake response is different than the discovery node.;List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {_            for (Iterator<DiscoveryNode> it = nodes.iterator()_ it.hasNext()_ ) {_                DiscoveryNode node = it.next()__                if (!transportService.nodeConnected(node)) {_                    try {_                        logger.trace("connecting to node [{}]", node)__                        transportService.connectToNode(node)__                    } catch (Exception e) {_                        it.remove()__                        logger.debug(() -> new ParameterizedMessage("failed to connect to discovered node [{}]", node), e)__                    }_                }_            }__            return Collections.unmodifiableList(new ArrayList<>(nodes))__        };establishes,the,node,connections,if,validate,in,handshake,is,set,to,true,the,connection,will,fail,if,node,returned,in,the,handshake,response,is,different,than,the,discovery,node;list,discovery,node,establish,node,connections,set,discovery,node,nodes,for,iterator,discovery,node,it,nodes,iterator,it,has,next,discovery,node,node,it,next,if,transport,service,node,connected,node,try,logger,trace,connecting,to,node,node,transport,service,connect,to,node,node,catch,exception,e,it,remove,logger,debug,new,parameterized,message,failed,to,connect,to,discovered,node,node,e,return,collections,unmodifiable,list,new,array,list,nodes
TransportClientNodesService -> NodeSampler -> List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes);1548953505;Establishes the node connections. If validateInHandshake is set to true, the connection will fail if_node returned in the handshake response is different than the discovery node.;List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {_            for (Iterator<DiscoveryNode> it = nodes.iterator()_ it.hasNext()_ ) {_                DiscoveryNode node = it.next()__                if (!transportService.nodeConnected(node)) {_                    try {_                        logger.trace("connecting to node [{}]", node)__                        transportService.connectToNode(node)__                    } catch (Exception e) {_                        it.remove()__                        logger.debug(() -> new ParameterizedMessage("failed to connect to discovered node [{}]", node), e)__                    }_                }_            }__            return Collections.unmodifiableList(new ArrayList<>(nodes))__        };establishes,the,node,connections,if,validate,in,handshake,is,set,to,true,the,connection,will,fail,if,node,returned,in,the,handshake,response,is,different,than,the,discovery,node;list,discovery,node,establish,node,connections,set,discovery,node,nodes,for,iterator,discovery,node,it,nodes,iterator,it,has,next,discovery,node,node,it,next,if,transport,service,node,connected,node,try,logger,trace,connecting,to,node,node,transport,service,connect,to,node,node,catch,exception,e,it,remove,logger,debug,new,parameterized,message,failed,to,connect,to,discovered,node,node,e,return,collections,unmodifiable,list,new,array,list,nodes
