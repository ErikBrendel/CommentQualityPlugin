commented;modifiers;parameterAmount;loc;comment;code
false;public;3;7;;@Override public void messageReceived(T request, TransportChannel channel, Task task) throws Exception {     DiscoveryNode targetNode = request.targetNode.     TransportRequest wrappedRequest = request.wrapped.     service.sendRequest(targetNode, action, wrappedRequest, new ProxyResponseHandler<>(channel, responseFunction.apply(wrappedRequest))). }
false;public;1;4;;@Override public T read(StreamInput in) throws IOException {     return reader.read(in). }
false;public;1;8;;@Override public void handleResponse(T response) {     try {         channel.sendResponse(response).     } catch (IOException e) {         throw new UncheckedIOException(e).     } }
false;public;1;8;;@Override public void handleException(TransportException exp) {     try {         channel.sendResponse(exp).     } catch (IOException e) {         throw new UncheckedIOException(e).     } }
false;public;0;4;;@Override public String executor() {     return ThreadPool.Names.SAME. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     targetNode.writeTo(out).     wrapped.writeTo(out). }
true;public,static;3;7;/**  * Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the  * response type changes based on the upcoming request (quite rare)  */ ;/**  * Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the  * response type changes based on the upcoming request (quite rare)  */ public static void registerProxyActionWithDynamicResponseType(TransportService service, String action, Function<TransportRequest, Writeable.Reader<? extends TransportResponse>> responseFunction) {     RequestHandlerRegistry<? extends TransportRequest> requestHandler = service.getRequestHandler(action).     service.registerRequestHandler(getProxyAction(action), ThreadPool.Names.SAME, true, false, in -> new ProxyRequest<>(in, requestHandler::newRequest), new ProxyRequestHandler<>(service, action, responseFunction)). }
true;public,static;3;6;/**  * Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the  * response type is always the same (most of the cases).  */ ;/**  * Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the  * response type is always the same (most of the cases).  */ public static void registerProxyAction(TransportService service, String action, Writeable.Reader<? extends TransportResponse> reader) {     RequestHandlerRegistry<? extends TransportRequest> requestHandler = service.getRequestHandler(action).     service.registerRequestHandler(getProxyAction(action), ThreadPool.Names.SAME, true, false, in -> new ProxyRequest<>(in, requestHandler::newRequest), new ProxyRequestHandler<>(service, action, request -> reader)). }
true;public,static;1;3;/**  * Returns the corresponding proxy action for the given action  */ ;/**  * Returns the corresponding proxy action for the given action  */ public static String getProxyAction(String action) {     return PROXY_ACTION_PREFIX + action. }
true;public,static;2;3;/**  * Wraps the actual request in a proxy request object that encodes the target node.  */ ;/**  * Wraps the actual request in a proxy request object that encodes the target node.  */ public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request) {     return new ProxyRequest<>(request, node). }
true;public,static;1;6;/**  * Unwraps a proxy request and returns the original request  */ ;/**  * Unwraps a proxy request and returns the original request  */ public static TransportRequest unwrapRequest(TransportRequest request) {     if (request instanceof ProxyRequest) {         return ((ProxyRequest) request).wrapped.     }     return request. }
true;public,static;1;4;/**  * Unwraps a proxy action and returns the underlying action  */ ;/**  * Unwraps a proxy action and returns the underlying action  */ public static String unwrapAction(String action) {     assert isProxyAction(action) : "Attempted to unwrap non-proxy action: " + action.     return action.substring(PROXY_ACTION_PREFIX.length()). }
true;public,static;1;3;/**  * Returns <code>true</code> iff the given action is a proxy action  */ ;/**  * Returns <code>true</code> iff the given action is a proxy action  */ public static boolean isProxyAction(String action) {     return action.startsWith(PROXY_ACTION_PREFIX). }
true;public,static;1;3;/**  * Returns <code>true</code> iff the given request is a proxy request  */ ;/**  * Returns <code>true</code> iff the given request is a proxy request  */ public static boolean isProxyRequest(TransportRequest request) {     return request instanceof ProxyRequest. }
