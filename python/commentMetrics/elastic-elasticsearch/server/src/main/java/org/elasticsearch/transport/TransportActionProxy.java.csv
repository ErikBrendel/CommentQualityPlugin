# id;timestamp;commentText;codeText;commentWords;codeWords
TransportActionProxy -> public static void registerProxyAction(TransportService service, String action,                                            Writeable.Reader<? extends TransportResponse> reader);1540583181;Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the_response type is always the same (most of the cases).;public static void registerProxyAction(TransportService service, String action,_                                           Writeable.Reader<? extends TransportResponse> reader) {_        RequestHandlerRegistry<? extends TransportRequest> requestHandler = service.getRequestHandler(action)__        service.registerRequestHandler(getProxyAction(action), ThreadPool.Names.SAME, true, false,_            in -> new ProxyRequest<>(in, requestHandler::newRequest), new ProxyRequestHandler<>(service, action, request -> reader))__    };registers,a,proxy,request,handler,that,allows,to,forward,requests,for,the,given,action,to,another,node,to,be,used,when,the,response,type,is,always,the,same,most,of,the,cases;public,static,void,register,proxy,action,transport,service,service,string,action,writeable,reader,extends,transport,response,reader,request,handler,registry,extends,transport,request,request,handler,service,get,request,handler,action,service,register,request,handler,get,proxy,action,action,thread,pool,names,same,true,false,in,new,proxy,request,in,request,handler,new,request,new,proxy,request,handler,service,action,request,reader
TransportActionProxy -> public static void registerProxyAction(TransportService service, String action,                                            Writeable.Reader<? extends TransportResponse> reader);1547650358;Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the_response type is always the same (most of the cases).;public static void registerProxyAction(TransportService service, String action,_                                           Writeable.Reader<? extends TransportResponse> reader) {_        RequestHandlerRegistry<? extends TransportRequest> requestHandler = service.getRequestHandler(action)__        service.registerRequestHandler(getProxyAction(action), ThreadPool.Names.SAME, true, false,_            in -> new ProxyRequest<>(in, requestHandler::newRequest), new ProxyRequestHandler<>(service, action, request -> reader))__    };registers,a,proxy,request,handler,that,allows,to,forward,requests,for,the,given,action,to,another,node,to,be,used,when,the,response,type,is,always,the,same,most,of,the,cases;public,static,void,register,proxy,action,transport,service,service,string,action,writeable,reader,extends,transport,response,reader,request,handler,registry,extends,transport,request,request,handler,service,get,request,handler,action,service,register,request,handler,get,proxy,action,action,thread,pool,names,same,true,false,in,new,proxy,request,in,request,handler,new,request,new,proxy,request,handler,service,action,request,reader
TransportActionProxy -> public static boolean isProxyAction(String action);1524684173;Returns <code>true</code> iff the given action is a proxy action;public static boolean isProxyAction(String action) {_        return action.startsWith(PROXY_ACTION_PREFIX)__    };returns,code,true,code,iff,the,given,action,is,a,proxy,action;public,static,boolean,is,proxy,action,string,action,return,action,starts,with
TransportActionProxy -> public static boolean isProxyAction(String action);1529687475;Returns <code>true</code> iff the given action is a proxy action;public static boolean isProxyAction(String action) {_        return action.startsWith(PROXY_ACTION_PREFIX)__    };returns,code,true,code,iff,the,given,action,is,a,proxy,action;public,static,boolean,is,proxy,action,string,action,return,action,starts,with
TransportActionProxy -> public static boolean isProxyAction(String action);1540583181;Returns <code>true</code> iff the given action is a proxy action;public static boolean isProxyAction(String action) {_        return action.startsWith(PROXY_ACTION_PREFIX)__    };returns,code,true,code,iff,the,given,action,is,a,proxy,action;public,static,boolean,is,proxy,action,string,action,return,action,starts,with
TransportActionProxy -> public static boolean isProxyAction(String action);1547650358;Returns <code>true</code> iff the given action is a proxy action;public static boolean isProxyAction(String action) {_        return action.startsWith(PROXY_ACTION_PREFIX)__    };returns,code,true,code,iff,the,given,action,is,a,proxy,action;public,static,boolean,is,proxy,action,string,action,return,action,starts,with
TransportActionProxy -> public static boolean isProxyRequest(TransportRequest request);1524684173;Returns <code>true</code> iff the given request is a proxy request;public static boolean isProxyRequest(TransportRequest request) {_        return request instanceof ProxyRequest__    };returns,code,true,code,iff,the,given,request,is,a,proxy,request;public,static,boolean,is,proxy,request,transport,request,request,return,request,instanceof,proxy,request
TransportActionProxy -> public static boolean isProxyRequest(TransportRequest request);1529687475;Returns <code>true</code> iff the given request is a proxy request;public static boolean isProxyRequest(TransportRequest request) {_        return request instanceof ProxyRequest__    };returns,code,true,code,iff,the,given,request,is,a,proxy,request;public,static,boolean,is,proxy,request,transport,request,request,return,request,instanceof,proxy,request
TransportActionProxy -> public static boolean isProxyRequest(TransportRequest request);1540583181;Returns <code>true</code> iff the given request is a proxy request;public static boolean isProxyRequest(TransportRequest request) {_        return request instanceof ProxyRequest__    };returns,code,true,code,iff,the,given,request,is,a,proxy,request;public,static,boolean,is,proxy,request,transport,request,request,return,request,instanceof,proxy,request
TransportActionProxy -> public static boolean isProxyRequest(TransportRequest request);1547650358;Returns <code>true</code> iff the given request is a proxy request;public static boolean isProxyRequest(TransportRequest request) {_        return request instanceof ProxyRequest__    };returns,code,true,code,iff,the,given,request,is,a,proxy,request;public,static,boolean,is,proxy,request,transport,request,request,return,request,instanceof,proxy,request
TransportActionProxy -> public static void registerProxyActionWithDynamicResponseType(TransportService service, String action,                                                                   Function<TransportRequest,                                                                       Writeable.Reader<? extends TransportResponse>> responseFunction);1540583181;Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the_response type changes based on the upcoming request (quite rare);public static void registerProxyActionWithDynamicResponseType(TransportService service, String action,_                                                                  Function<TransportRequest,_                                                                      Writeable.Reader<? extends TransportResponse>> responseFunction) {_        RequestHandlerRegistry<? extends TransportRequest> requestHandler = service.getRequestHandler(action)__        service.registerRequestHandler(getProxyAction(action), ThreadPool.Names.SAME, true, false,_            in -> new ProxyRequest<>(in, requestHandler::newRequest), new ProxyRequestHandler<>(service, action, responseFunction))__    };registers,a,proxy,request,handler,that,allows,to,forward,requests,for,the,given,action,to,another,node,to,be,used,when,the,response,type,changes,based,on,the,upcoming,request,quite,rare;public,static,void,register,proxy,action,with,dynamic,response,type,transport,service,service,string,action,function,transport,request,writeable,reader,extends,transport,response,response,function,request,handler,registry,extends,transport,request,request,handler,service,get,request,handler,action,service,register,request,handler,get,proxy,action,action,thread,pool,names,same,true,false,in,new,proxy,request,in,request,handler,new,request,new,proxy,request,handler,service,action,response,function
TransportActionProxy -> public static void registerProxyActionWithDynamicResponseType(TransportService service, String action,                                                                   Function<TransportRequest,                                                                       Writeable.Reader<? extends TransportResponse>> responseFunction);1547650358;Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the_response type changes based on the upcoming request (quite rare);public static void registerProxyActionWithDynamicResponseType(TransportService service, String action,_                                                                  Function<TransportRequest,_                                                                      Writeable.Reader<? extends TransportResponse>> responseFunction) {_        RequestHandlerRegistry<? extends TransportRequest> requestHandler = service.getRequestHandler(action)__        service.registerRequestHandler(getProxyAction(action), ThreadPool.Names.SAME, true, false,_            in -> new ProxyRequest<>(in, requestHandler::newRequest), new ProxyRequestHandler<>(service, action, responseFunction))__    };registers,a,proxy,request,handler,that,allows,to,forward,requests,for,the,given,action,to,another,node,to,be,used,when,the,response,type,changes,based,on,the,upcoming,request,quite,rare;public,static,void,register,proxy,action,with,dynamic,response,type,transport,service,service,string,action,function,transport,request,writeable,reader,extends,transport,response,response,function,request,handler,registry,extends,transport,request,request,handler,service,get,request,handler,action,service,register,request,handler,get,proxy,action,action,thread,pool,names,same,true,false,in,new,proxy,request,in,request,handler,new,request,new,proxy,request,handler,service,action,response,function
TransportActionProxy -> public static void registerProxyAction(TransportService service, String action, Supplier<TransportResponse> responseSupplier);1524684173;Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the_response type is always the same (most of the cases).;public static void registerProxyAction(TransportService service, String action, Supplier<TransportResponse> responseSupplier) {_        RequestHandlerRegistry requestHandler = service.getRequestHandler(action)__        service.registerRequestHandler(getProxyAction(action), () -> new ProxyRequest(requestHandler::newRequest), ThreadPool.Names.SAME,_                true, false, new ProxyRequestHandler<>(service, action, request -> responseSupplier))__    };registers,a,proxy,request,handler,that,allows,to,forward,requests,for,the,given,action,to,another,node,to,be,used,when,the,response,type,is,always,the,same,most,of,the,cases;public,static,void,register,proxy,action,transport,service,service,string,action,supplier,transport,response,response,supplier,request,handler,registry,request,handler,service,get,request,handler,action,service,register,request,handler,get,proxy,action,action,new,proxy,request,request,handler,new,request,thread,pool,names,same,true,false,new,proxy,request,handler,service,action,request,response,supplier
TransportActionProxy -> public static void registerProxyAction(TransportService service, String action, Supplier<TransportResponse> responseSupplier);1529687475;Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the_response type is always the same (most of the cases).;public static void registerProxyAction(TransportService service, String action, Supplier<TransportResponse> responseSupplier) {_        RequestHandlerRegistry requestHandler = service.getRequestHandler(action)__        service.registerRequestHandler(getProxyAction(action), () -> new ProxyRequest(requestHandler::newRequest), ThreadPool.Names.SAME,_                true, false, new ProxyRequestHandler<>(service, action, request -> responseSupplier))__    };registers,a,proxy,request,handler,that,allows,to,forward,requests,for,the,given,action,to,another,node,to,be,used,when,the,response,type,is,always,the,same,most,of,the,cases;public,static,void,register,proxy,action,transport,service,service,string,action,supplier,transport,response,response,supplier,request,handler,registry,request,handler,service,get,request,handler,action,service,register,request,handler,get,proxy,action,action,new,proxy,request,request,handler,new,request,thread,pool,names,same,true,false,new,proxy,request,handler,service,action,request,response,supplier
TransportActionProxy -> public static TransportRequest unwrapRequest(TransportRequest request);1524684173;Unwraps a proxy request and returns the original request;public static TransportRequest unwrapRequest(TransportRequest request) {_        if (request instanceof ProxyRequest) {_            return ((ProxyRequest)request).wrapped__        }_        return request__    };unwraps,a,proxy,request,and,returns,the,original,request;public,static,transport,request,unwrap,request,transport,request,request,if,request,instanceof,proxy,request,return,proxy,request,request,wrapped,return,request
TransportActionProxy -> public static TransportRequest unwrapRequest(TransportRequest request);1529687475;Unwraps a proxy request and returns the original request;public static TransportRequest unwrapRequest(TransportRequest request) {_        if (request instanceof ProxyRequest) {_            return ((ProxyRequest)request).wrapped__        }_        return request__    };unwraps,a,proxy,request,and,returns,the,original,request;public,static,transport,request,unwrap,request,transport,request,request,if,request,instanceof,proxy,request,return,proxy,request,request,wrapped,return,request
TransportActionProxy -> public static TransportRequest unwrapRequest(TransportRequest request);1540583181;Unwraps a proxy request and returns the original request;public static TransportRequest unwrapRequest(TransportRequest request) {_        if (request instanceof ProxyRequest) {_            return ((ProxyRequest)request).wrapped__        }_        return request__    };unwraps,a,proxy,request,and,returns,the,original,request;public,static,transport,request,unwrap,request,transport,request,request,if,request,instanceof,proxy,request,return,proxy,request,request,wrapped,return,request
TransportActionProxy -> public static TransportRequest unwrapRequest(TransportRequest request);1547650358;Unwraps a proxy request and returns the original request;public static TransportRequest unwrapRequest(TransportRequest request) {_        if (request instanceof ProxyRequest) {_            return ((ProxyRequest)request).wrapped__        }_        return request__    };unwraps,a,proxy,request,and,returns,the,original,request;public,static,transport,request,unwrap,request,transport,request,request,if,request,instanceof,proxy,request,return,proxy,request,request,wrapped,return,request
TransportActionProxy -> public static String getProxyAction(String action);1524684173;Returns the corresponding proxy action for the given action;public static String getProxyAction(String action) {_        return  PROXY_ACTION_PREFIX + action__    };returns,the,corresponding,proxy,action,for,the,given,action;public,static,string,get,proxy,action,string,action,return,action
TransportActionProxy -> public static String getProxyAction(String action);1529687475;Returns the corresponding proxy action for the given action;public static String getProxyAction(String action) {_        return  PROXY_ACTION_PREFIX + action__    };returns,the,corresponding,proxy,action,for,the,given,action;public,static,string,get,proxy,action,string,action,return,action
TransportActionProxy -> public static String getProxyAction(String action);1540583181;Returns the corresponding proxy action for the given action;public static String getProxyAction(String action) {_        return  PROXY_ACTION_PREFIX + action__    };returns,the,corresponding,proxy,action,for,the,given,action;public,static,string,get,proxy,action,string,action,return,action
TransportActionProxy -> public static String getProxyAction(String action);1547650358;Returns the corresponding proxy action for the given action;public static String getProxyAction(String action) {_        return  PROXY_ACTION_PREFIX + action__    };returns,the,corresponding,proxy,action,for,the,given,action;public,static,string,get,proxy,action,string,action,return,action
TransportActionProxy -> public static void registerProxyAction(TransportService service, String action,                                            Function<TransportRequest, Supplier<TransportResponse>> responseFunction);1524684173;Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the_response type changes based on the upcoming request (quite rare);public static void registerProxyAction(TransportService service, String action,_                                           Function<TransportRequest, Supplier<TransportResponse>> responseFunction) {_        RequestHandlerRegistry requestHandler = service.getRequestHandler(action)__        service.registerRequestHandler(getProxyAction(action), () -> new ProxyRequest(requestHandler::newRequest), ThreadPool.Names.SAME,_            true, false, new ProxyRequestHandler<>(service, action, responseFunction))__    };registers,a,proxy,request,handler,that,allows,to,forward,requests,for,the,given,action,to,another,node,to,be,used,when,the,response,type,changes,based,on,the,upcoming,request,quite,rare;public,static,void,register,proxy,action,transport,service,service,string,action,function,transport,request,supplier,transport,response,response,function,request,handler,registry,request,handler,service,get,request,handler,action,service,register,request,handler,get,proxy,action,action,new,proxy,request,request,handler,new,request,thread,pool,names,same,true,false,new,proxy,request,handler,service,action,response,function
TransportActionProxy -> public static void registerProxyAction(TransportService service, String action,                                            Function<TransportRequest, Supplier<TransportResponse>> responseFunction);1529687475;Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the_response type changes based on the upcoming request (quite rare);public static void registerProxyAction(TransportService service, String action,_                                           Function<TransportRequest, Supplier<TransportResponse>> responseFunction) {_        RequestHandlerRegistry requestHandler = service.getRequestHandler(action)__        service.registerRequestHandler(getProxyAction(action), () -> new ProxyRequest(requestHandler::newRequest), ThreadPool.Names.SAME,_            true, false, new ProxyRequestHandler<>(service, action, responseFunction))__    };registers,a,proxy,request,handler,that,allows,to,forward,requests,for,the,given,action,to,another,node,to,be,used,when,the,response,type,changes,based,on,the,upcoming,request,quite,rare;public,static,void,register,proxy,action,transport,service,service,string,action,function,transport,request,supplier,transport,response,response,function,request,handler,registry,request,handler,service,get,request,handler,action,service,register,request,handler,get,proxy,action,action,new,proxy,request,request,handler,new,request,thread,pool,names,same,true,false,new,proxy,request,handler,service,action,response,function
TransportActionProxy -> public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request);1524684173;Wraps the actual request in a proxy request object that encodes the target node.;public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request) {_        return new ProxyRequest<>(request, node)__    };wraps,the,actual,request,in,a,proxy,request,object,that,encodes,the,target,node;public,static,transport,request,wrap,request,discovery,node,node,transport,request,request,return,new,proxy,request,request,node
TransportActionProxy -> public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request);1529687475;Wraps the actual request in a proxy request object that encodes the target node.;public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request) {_        return new ProxyRequest<>(request, node)__    };wraps,the,actual,request,in,a,proxy,request,object,that,encodes,the,target,node;public,static,transport,request,wrap,request,discovery,node,node,transport,request,request,return,new,proxy,request,request,node
TransportActionProxy -> public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request);1540583181;Wraps the actual request in a proxy request object that encodes the target node.;public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request) {_        return new ProxyRequest<>(request, node)__    };wraps,the,actual,request,in,a,proxy,request,object,that,encodes,the,target,node;public,static,transport,request,wrap,request,discovery,node,node,transport,request,request,return,new,proxy,request,request,node
TransportActionProxy -> public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request);1547650358;Wraps the actual request in a proxy request object that encodes the target node.;public static TransportRequest wrapRequest(DiscoveryNode node, TransportRequest request) {_        return new ProxyRequest<>(request, node)__    };wraps,the,actual,request,in,a,proxy,request,object,that,encodes,the,target,node;public,static,transport,request,wrap,request,discovery,node,node,transport,request,request,return,new,proxy,request,request,node
