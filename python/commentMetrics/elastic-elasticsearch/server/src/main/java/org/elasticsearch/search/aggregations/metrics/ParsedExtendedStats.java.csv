commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getType() {     return ExtendedStatsAggregationBuilder.NAME. }
false;public;0;4;;@Override public double getSumOfSquares() {     return sumOfSquares. }
false;public;0;4;;@Override public double getVariance() {     return variance. }
false;public;0;4;;@Override public double getStdDeviation() {     return stdDeviation. }
false;private;1;4;;private void setStdDeviationBounds(Tuple<Double, Double> bounds) {     this.stdDeviationBoundLower = bounds.v1().     this.stdDeviationBoundUpper = bounds.v2(). }
false;public;1;4;;@Override public double getStdDeviationBound(Bounds bound) {     return (bound.equals(Bounds.LOWER)) ? stdDeviationBoundLower : stdDeviationBoundUpper. }
false;public;0;4;;@Override public String getStdDeviationAsString() {     return valueAsString.getOrDefault(Fields.STD_DEVIATION_AS_STRING, Double.toString(stdDeviation)). }
false;private;1;4;;private void setStdDeviationBoundsAsString(Tuple<String, String> boundsAsString) {     this.valueAsString.put(Fields.STD_DEVIATION_BOUNDS_AS_STRING + "_lower", boundsAsString.v1()).     this.valueAsString.put(Fields.STD_DEVIATION_BOUNDS_AS_STRING + "_upper", boundsAsString.v2()). }
false;public;1;8;;@Override public String getStdDeviationBoundAsString(Bounds bound) {     if (bound.equals(Bounds.LOWER)) {         return valueAsString.getOrDefault(Fields.STD_DEVIATION_BOUNDS_AS_STRING + "_lower", Double.toString(stdDeviationBoundLower)).     } else {         return valueAsString.getOrDefault(Fields.STD_DEVIATION_BOUNDS_AS_STRING + "_upper", Double.toString(stdDeviationBoundUpper)).     } }
false;public;0;4;;@Override public String getSumOfSquaresAsString() {     return valueAsString.getOrDefault(Fields.SUM_OF_SQRS_AS_STRING, Double.toString(sumOfSquares)). }
false;public;0;4;;@Override public String getVarianceAsString() {     return valueAsString.getOrDefault(Fields.VARIANCE_AS_STRING, Double.toString(variance)). }
false;protected;2;36;;@Override protected XContentBuilder otherStatsToXContent(XContentBuilder builder, Params params) throws IOException {     if (count != 0) {         builder.field(Fields.SUM_OF_SQRS, sumOfSquares).         builder.field(Fields.VARIANCE, getVariance()).         builder.field(Fields.STD_DEVIATION, getStdDeviation()).         builder.startObject(Fields.STD_DEVIATION_BOUNDS).         {             builder.field(Fields.UPPER, getStdDeviationBound(Bounds.UPPER)).             builder.field(Fields.LOWER, getStdDeviationBound(Bounds.LOWER)).         }         builder.endObject().         if (valueAsString.containsKey(Fields.SUM_OF_SQRS_AS_STRING)) {             builder.field(Fields.SUM_OF_SQRS_AS_STRING, getSumOfSquaresAsString()).             builder.field(Fields.VARIANCE_AS_STRING, getVarianceAsString()).             builder.field(Fields.STD_DEVIATION_AS_STRING, getStdDeviationAsString()).             builder.startObject(Fields.STD_DEVIATION_BOUNDS_AS_STRING).             {                 builder.field(Fields.UPPER, getStdDeviationBoundAsString(Bounds.UPPER)).                 builder.field(Fields.LOWER, getStdDeviationBoundAsString(Bounds.LOWER)).             }             builder.endObject().         }     } else {         builder.nullField(Fields.SUM_OF_SQRS).         builder.nullField(Fields.VARIANCE).         builder.nullField(Fields.STD_DEVIATION).         builder.startObject(Fields.STD_DEVIATION_BOUNDS).         {             builder.nullField(Fields.UPPER).             builder.nullField(Fields.LOWER).         }         builder.endObject().     }     return builder. }
false;protected,static;1;20;;protected static void declareExtendedStatsFields(ObjectParser<? extends ParsedExtendedStats, Void> objectParser) {     declareAggregationFields(objectParser).     declareStatsFields(objectParser).     objectParser.declareField((agg, value) -> agg.sumOfSquares = value, (parser, context) -> parseDouble(parser, 0), new ParseField(Fields.SUM_OF_SQRS), ValueType.DOUBLE_OR_NULL).     objectParser.declareField((agg, value) -> agg.variance = value, (parser, context) -> parseDouble(parser, 0), new ParseField(Fields.VARIANCE), ValueType.DOUBLE_OR_NULL).     objectParser.declareField((agg, value) -> agg.stdDeviation = value, (parser, context) -> parseDouble(parser, 0), new ParseField(Fields.STD_DEVIATION), ValueType.DOUBLE_OR_NULL).     objectParser.declareObject(ParsedExtendedStats::setStdDeviationBounds, STD_BOUNDS_PARSER, new ParseField(Fields.STD_DEVIATION_BOUNDS)).     objectParser.declareString((agg, value) -> agg.valueAsString.put(Fields.SUM_OF_SQRS_AS_STRING, value), new ParseField(Fields.SUM_OF_SQRS_AS_STRING)).     objectParser.declareString((agg, value) -> agg.valueAsString.put(Fields.VARIANCE_AS_STRING, value), new ParseField(Fields.VARIANCE_AS_STRING)).     objectParser.declareString((agg, value) -> agg.valueAsString.put(Fields.STD_DEVIATION_AS_STRING, value), new ParseField(Fields.STD_DEVIATION_AS_STRING)).     objectParser.declareObject(ParsedExtendedStats::setStdDeviationBoundsAsString, STD_BOUNDS_AS_STRING_PARSER, new ParseField(Fields.STD_DEVIATION_BOUNDS_AS_STRING)). }
false;public,static;2;5;;public static ParsedExtendedStats fromXContent(XContentParser parser, final String name) {     ParsedExtendedStats parsedStats = PARSER.apply(parser, null).     parsedStats.setName(name).     return parsedStats. }
