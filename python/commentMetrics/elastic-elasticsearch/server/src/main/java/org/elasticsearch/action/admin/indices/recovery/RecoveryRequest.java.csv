commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * True if detailed flag is set, false otherwise. This value if false by default.  *  * @return  True if detailed flag is set, false otherwise  */ ;/**  * True if detailed flag is set, false otherwise. This value if false by default.  *  * @return  True if detailed flag is set, false otherwise  */ public boolean detailed() {     return detailed. }
true;public;1;3;/**  * Set value of the detailed flag. Detailed requests will contain extra  * information such as a list of physical files and their recovery progress.  *  * @param detailed  Whether or not to set the detailed flag  */ ;/**  * Set value of the detailed flag. Detailed requests will contain extra  * information such as a list of physical files and their recovery progress.  *  * @param detailed  Whether or not to set the detailed flag  */ public void detailed(boolean detailed) {     this.detailed = detailed. }
true;public;0;3;/**  * True if activeOnly flag is set, false otherwise. This value is false by default.  *  * @return  True if activeOnly flag is set, false otherwise  */ ;/**  * True if activeOnly flag is set, false otherwise. This value is false by default.  *  * @return  True if activeOnly flag is set, false otherwise  */ public boolean activeOnly() {     return activeOnly. }
true;public;1;3;/**  * Set value of the activeOnly flag. If true, this request will only response with  * on-going recovery information.  *  * @param activeOnly    Whether or not to set the activeOnly flag.  */ ;/**  * Set value of the activeOnly flag. If true, this request will only response with  * on-going recovery information.  *  * @param activeOnly    Whether or not to set the activeOnly flag.  */ public void activeOnly(boolean activeOnly) {     this.activeOnly = activeOnly. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(detailed).     out.writeBoolean(activeOnly). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     detailed = in.readBoolean().     activeOnly = in.readBoolean(). }
