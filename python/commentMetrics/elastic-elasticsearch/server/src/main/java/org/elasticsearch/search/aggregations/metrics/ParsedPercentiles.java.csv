commented;modifiers;parameterAmount;loc;comment;code
false;;2;3;;void addPercentile(Double key, Double value) {     percentiles.put(key, value). }
false;;2;3;;void addPercentileAsString(Double key, String valueAsString) {     percentilesAsString.put(key, valueAsString). }
false;protected;1;6;;protected Double getPercentile(double percent) {     if (percentiles.isEmpty()) {         return Double.NaN.     }     return percentiles.get(percent). }
false;protected;1;11;;protected String getPercentileAsString(double percent) {     String valueAsString = percentilesAsString.get(percent).     if (valueAsString != null) {         return valueAsString.     }     Double value = getPercentile(percent).     if (value != null) {         return Double.toString(value).     }     return null. }
false;;1;3;;void setKeyed(boolean keyed) {     this.keyed = keyed. }
false;public;0;4;;@Override public boolean hasNext() {     return iterator.hasNext(). }
false;public;0;5;;@Override public Percentile next() {     Map.Entry<Double, Double> next = iterator.next().     return new Percentile(next.getKey(), next.getValue()). }
false;public;0;16;;@Override public Iterator<Percentile> iterator() {     return new Iterator<Percentile>() {          final Iterator<Map.Entry<Double, Double>> iterator = percentiles.entrySet().iterator().          @Override         public boolean hasNext() {             return iterator.hasNext().         }          @Override         public Percentile next() {             Map.Entry<Double, Double> next = iterator.next().             return new Percentile(next.getKey(), next.getValue()).         }     }. }
false;protected;2;33;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     final boolean valuesAsString = (percentilesAsString.isEmpty() == false).     if (keyed) {         builder.startObject(CommonFields.VALUES.getPreferredName()).         for (Map.Entry<Double, Double> percentile : percentiles.entrySet()) {             Double key = percentile.getKey().             Double value = percentile.getValue().             builder.field(String.valueOf(key), value.isNaN() ? null : value).             if (valuesAsString && value.isNaN() == false) {                 builder.field(key + "_as_string", getPercentileAsString(key)).             }         }         builder.endObject().     } else {         builder.startArray(CommonFields.VALUES.getPreferredName()).         for (Map.Entry<Double, Double> percentile : percentiles.entrySet()) {             Double key = percentile.getKey().             builder.startObject().             {                 builder.field(CommonFields.KEY.getPreferredName(), key).                 Double value = percentile.getValue().                 builder.field(CommonFields.VALUE.getPreferredName(), value.isNaN() ? null : value).                 if (valuesAsString && value.isNaN() == false) {                     builder.field(CommonFields.VALUE_AS_STRING.getPreferredName(), getPercentileAsString(key)).                 }             }             builder.endObject().         }         builder.endArray().     }     return builder. }
false;protected,static;1;62;;protected static void declarePercentilesFields(ObjectParser<? extends ParsedPercentiles, Void> objectParser) {     ParsedAggregation.declareAggregationFields(objectParser).     objectParser.declareField((parser, aggregation, context) -> {         XContentParser.Token token = parser.currentToken().         if (token == XContentParser.Token.START_OBJECT) {             aggregation.setKeyed(true).             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 if (token.isValue()) {                     if (token == XContentParser.Token.VALUE_NUMBER) {                         aggregation.addPercentile(Double.valueOf(parser.currentName()), parser.doubleValue()).                     } else if (token == XContentParser.Token.VALUE_STRING) {                         int i = parser.currentName().indexOf("_as_string").                         if (i > 0) {                             double key = Double.valueOf(parser.currentName().substring(0, i)).                             aggregation.addPercentileAsString(key, parser.text()).                         } else {                             aggregation.addPercentile(Double.valueOf(parser.currentName()), Double.valueOf(parser.text())).                         }                     }                 } else if (token == XContentParser.Token.VALUE_NULL) {                     aggregation.addPercentile(Double.valueOf(parser.currentName()), Double.NaN).                 } else {                     // skip potential inner objects and arrays for forward compatibility                     parser.skipChildren().                 }             }         } else if (token == XContentParser.Token.START_ARRAY) {             aggregation.setKeyed(false).             String currentFieldName = null.             while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                 Double key = null.                 Double value = null.                 String valueAsString = null.                 while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                     if (token == XContentParser.Token.FIELD_NAME) {                         currentFieldName = parser.currentName().                     } else if (token.isValue()) {                         if (CommonFields.KEY.getPreferredName().equals(currentFieldName)) {                             key = parser.doubleValue().                         } else if (CommonFields.VALUE.getPreferredName().equals(currentFieldName)) {                             value = parser.doubleValue().                         } else if (CommonFields.VALUE_AS_STRING.getPreferredName().equals(currentFieldName)) {                             valueAsString = parser.text().                         }                     } else if (token == XContentParser.Token.VALUE_NULL) {                         value = Double.NaN.                     } else {                         // skip potential inner objects and arrays for forward compatibility                         parser.skipChildren().                     }                 }                 if (key != null) {                     aggregation.addPercentile(key, value).                     if (valueAsString != null) {                         aggregation.addPercentileAsString(key, valueAsString).                     }                 }             }         }     }, CommonFields.VALUES, ObjectParser.ValueType.OBJECT_ARRAY). }
