commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;10;;@Override protected ClusterStatsResponse newResponse(ClusterStatsRequest request, List<ClusterStatsNodeResponse> responses, List<FailedNodeException> failures) {     return new ClusterStatsResponse(System.currentTimeMillis(), clusterService.state().metaData().clusterUUID(), clusterService.getClusterName(), responses, failures). }
false;protected;2;4;;@Override protected ClusterStatsNodeRequest newNodeRequest(String nodeId, ClusterStatsRequest request) {     return new ClusterStatsNodeRequest(nodeId, request). }
false;protected;0;4;;@Override protected ClusterStatsNodeResponse newNodeResponse() {     return new ClusterStatsNodeResponse(). }
false;protected;1;44;;@Override protected ClusterStatsNodeResponse nodeOperation(ClusterStatsNodeRequest nodeRequest) {     NodeInfo nodeInfo = nodeService.info(true, true, false, true, false, true, false, true, false, false).     NodeStats nodeStats = nodeService.stats(CommonStatsFlags.NONE, true, true, true, false, true, false, false, false, false, false, false, false).     List<ShardStats> shardsStats = new ArrayList<>().     for (IndexService indexService : indicesService) {         for (IndexShard indexShard : indexService) {             if (indexShard.routingEntry() != null && indexShard.routingEntry().active()) {                 // only report on fully started shards                 CommitStats commitStats.                 SeqNoStats seqNoStats.                 RetentionLeaseStats retentionLeaseStats.                 try {                     commitStats = indexShard.commitStats().                     seqNoStats = indexShard.seqNoStats().                     retentionLeaseStats = indexShard.getRetentionLeaseStats().                 } catch (final AlreadyClosedException e) {                     // shard is closed - no stats is fine                     commitStats = null.                     seqNoStats = null.                     retentionLeaseStats = null.                 }                 shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, SHARD_STATS_FLAGS), commitStats, seqNoStats, retentionLeaseStats)).             }         }     }     ClusterHealthStatus clusterStatus = null.     if (clusterService.state().nodes().isLocalNodeElectedMaster()) {         clusterStatus = new ClusterStateHealth(clusterService.state()).getStatus().     }     return new ClusterStatsNodeResponse(nodeInfo.getNode(), clusterStatus, nodeInfo, nodeStats, shardsStats.toArray(new ShardStats[shardsStats.size()])). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     request = new ClusterStatsRequest().     request.readFrom(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     request.writeTo(out). }
