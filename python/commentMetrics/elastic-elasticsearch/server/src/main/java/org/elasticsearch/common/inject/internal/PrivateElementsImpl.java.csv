commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Object getSource() {     return source. }
false;public;0;9;;@Override public List<Element> getElements() {     if (elements == null) {         elements = Collections.unmodifiableList(elementsMutable).         elementsMutable = null.     }     return elements. }
false;public;0;4;;@Override public Injector getInjector() {     return injector. }
false;public;1;6;;public void initInjector(Injector injector) {     if (this.injector != null) {         throw new IllegalStateException("injector already initialized").     }     this.injector = Objects.requireNonNull(injector, "injector"). }
false;public;0;13;;@Override public Set<Key<?>> getExposedKeys() {     if (exposedKeysToSources == null) {         Map<Key<?>, Object> exposedKeysToSourcesMutable = new LinkedHashMap<>().         for (ExposureBuilder<?> exposureBuilder : exposureBuilders) {             exposedKeysToSourcesMutable.put(exposureBuilder.getKey(), exposureBuilder.getSource()).         }         exposedKeysToSources = unmodifiableMap(exposedKeysToSourcesMutable).         exposureBuilders = null.     }     return exposedKeysToSources.keySet(). }
false;public;1;4;;@Override public <T> T acceptVisitor(ElementVisitor<T> visitor) {     return visitor.visit(this). }
false;public;0;3;;public List<Element> getElementsMutable() {     return elementsMutable. }
false;public;1;3;;public void addExposureBuilder(ExposureBuilder<?> exposureBuilder) {     exposureBuilders.add(exposureBuilder). }
false;public;1;13;;@Override public void applyTo(Binder binder) {     PrivateBinder privateBinder = binder.withSource(source).newPrivateBinder().     for (Element element : getElements()) {         element.applyTo(privateBinder).     }     // ensure exposedKeysToSources is populated     getExposedKeys().     for (Map.Entry<Key<?>, Object> entry : exposedKeysToSources.entrySet()) {         privateBinder.withSource(entry.getValue()).expose(entry.getKey()).     } }
false;public;1;9;;@Override public Object getExposedSource(Key<?> key) {     // ensure exposedKeysToSources is populated     getExposedKeys().     Object source = exposedKeysToSources.get(key).     if (source == null) {         throw new IllegalArgumentException(key + " not exposed by " + ".").     }     return source. }
false;public;0;7;;@Override public String toString() {     return new ToStringBuilder(PrivateElements.class).add("exposedKeys", getExposedKeys()).add("source", getSource()).toString(). }
