commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the type to get a score explanation for.  */ ;/**  * Sets the type to get a score explanation for.  */ public ExplainRequestBuilder setType(String type) {     request().type(type).     return this. }
true;public;1;4;/**  * Sets the id to get a score explanation for.  */ ;/**  * Sets the id to get a score explanation for.  */ public ExplainRequestBuilder setId(String id) {     request().id(id).     return this. }
true;public;1;4;/**  * Sets the routing for sharding.  */ ;/**  * Sets the routing for sharding.  */ public ExplainRequestBuilder setRouting(String routing) {     request().routing(routing).     return this. }
true;public;1;4;/**  * Simple sets the routing. Since the parent is only used to get to the right shard.  */ ;/**  * Simple sets the routing. Since the parent is only used to get to the right shard.  */ public ExplainRequestBuilder setParent(String parent) {     request().parent(parent).     return this. }
true;public;1;4;/**  * Sets the shard preference.  */ ;/**  * Sets the shard preference.  */ public ExplainRequestBuilder setPreference(String preference) {     request().preference(preference).     return this. }
true;public;1;4;/**  * Sets the query to get a score explanation for.  */ ;/**  * Sets the query to get a score explanation for.  */ public ExplainRequestBuilder setQuery(QueryBuilder query) {     request.query(query).     return this. }
true;public;1;4;/**  * Explicitly specify the stored fields that will be returned for the explained document. By default, nothing is returned.  */ ;/**  * Explicitly specify the stored fields that will be returned for the explained document. By default, nothing is returned.  */ public ExplainRequestBuilder setStoredFields(String... fields) {     request.storedFields(fields).     return this. }
true;public;1;6;/**  * Indicates whether the response should contain the stored _source  */ ;/**  * Indicates whether the response should contain the stored _source  */ public ExplainRequestBuilder setFetchSource(boolean fetch) {     FetchSourceContext fetchSourceContext = request.fetchSourceContext() != null ? request.fetchSourceContext() : FetchSourceContext.FETCH_SOURCE.     request.fetchSourceContext(new FetchSourceContext(fetch, fetchSourceContext.includes(), fetchSourceContext.excludes())).     return this. }
true;public;2;5;/**  * Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param include An optional include (optionally wildcarded) pattern to filter the returned _source  * @param exclude An optional exclude (optionally wildcarded) pattern to filter the returned _source  */ ;/**  * Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param include An optional include (optionally wildcarded) pattern to filter the returned _source  * @param exclude An optional exclude (optionally wildcarded) pattern to filter the returned _source  */ public ExplainRequestBuilder setFetchSource(@Nullable String include, @Nullable String exclude) {     return setFetchSource(include == null ? Strings.EMPTY_ARRAY : new String[] { include }, exclude == null ? Strings.EMPTY_ARRAY : new String[] { exclude }). }
true;public;2;6;/**  * Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param includes An optional list of include (optionally wildcarded) pattern to filter the returned _source  * @param excludes An optional list of exclude (optionally wildcarded) pattern to filter the returned _source  */ ;/**  * Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param includes An optional list of include (optionally wildcarded) pattern to filter the returned _source  * @param excludes An optional list of exclude (optionally wildcarded) pattern to filter the returned _source  */ public ExplainRequestBuilder setFetchSource(@Nullable String[] includes, @Nullable String[] excludes) {     FetchSourceContext fetchSourceContext = request.fetchSourceContext() != null ? request.fetchSourceContext() : FetchSourceContext.FETCH_SOURCE.     request.fetchSourceContext(new FetchSourceContext(fetchSourceContext.fetchSource(), includes, excludes)).     return this. }
