commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the {@link ClusterName} associated with all of the nodes.  *  * @return Never {@code null}.  */ ;/**  * Get the {@link ClusterName} associated with all of the nodes.  *  * @return Never {@code null}.  */ public ClusterName getClusterName() {     return clusterName. }
true;public;0;3;/**  * Get the failed node exceptions.  *  * @return Never {@code null}. Can be empty.  */ ;/**  * Get the failed node exceptions.  *  * @return Never {@code null}. Can be empty.  */ public List<FailedNodeException> failures() {     return failures. }
true;public;0;3;/**  * Determine if there are any node failures in {@link #failures}.  *  * @return {@code true} if {@link #failures} contains at least 1 {@link FailedNodeException}.  */ ;/**  * Determine if there are any node failures in {@link #failures}.  *  * @return {@code true} if {@link #failures} contains at least 1 {@link FailedNodeException}.  */ public boolean hasFailures() {     return failures.isEmpty() == false. }
true;public;0;3;/**  * Get the <em>successful</em> node responses.  *  * @return Never {@code null}. Can be empty.  * @see #hasFailures()  */ ;/**  * Get the <em>successful</em> node responses.  *  * @return Never {@code null}. Can be empty.  * @see #hasFailures()  */ public List<TNodeResponse> getNodes() {     return nodes. }
true;public;0;9;/**  * Lazily build and get a map of Node ID to node response.  *  * @return Never {@code null}. Can be empty.  * @see #getNodes()  */ ;/**  * Lazily build and get a map of Node ID to node response.  *  * @return Never {@code null}. Can be empty.  * @see #getNodes()  */ public Map<String, TNodeResponse> getNodesMap() {     if (nodesMap == null) {         nodesMap = new HashMap<>().         for (TNodeResponse nodeResponse : nodes) {             nodesMap.put(nodeResponse.getNode().getId(), nodeResponse).         }     }     return nodesMap. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     clusterName = new ClusterName(in).     nodes = readNodesFrom(in).     failures = in.readList(FailedNodeException::new). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     clusterName.writeTo(out).     writeNodesTo(out, nodes).     out.writeList(failures). }
true;protected,abstract;1;1;/**  * Read the {@link #nodes} from the stream.  *  * @return Never {@code null}.  */ ;/**  * Read the {@link #nodes} from the stream.  *  * @return Never {@code null}.  */ protected abstract List<TNodeResponse> readNodesFrom(StreamInput in) throws IOException.
true;protected,abstract;2;1;/**  * Write the {@link #nodes} to the stream.  */ ;/**  * Write the {@link #nodes} to the stream.  */ protected abstract void writeNodesTo(StreamOutput out, List<TNodeResponse> nodes) throws IOException.
