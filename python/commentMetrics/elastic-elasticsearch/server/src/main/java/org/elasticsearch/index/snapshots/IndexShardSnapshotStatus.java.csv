commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;5;14;;public synchronized Copy moveToStarted(final long startTime, final int incrementalFileCount, final int totalFileCount, final long incrementalSize, final long totalSize) {     if (stage.compareAndSet(Stage.INIT, Stage.STARTED)) {         this.startTime = startTime.         this.incrementalFileCount = incrementalFileCount.         this.totalFileCount = totalFileCount.         this.incrementalSize = incrementalSize.         this.totalSize = totalSize.     } else {         throw new IllegalStateException("Unable to move the shard snapshot status to [STARTED]: " + "expecting [INIT] but got [" + stage.get() + "]").     }     return asCopy(). }
false;public,synchronized;1;9;;public synchronized Copy moveToFinalize(final long indexVersion) {     if (stage.compareAndSet(Stage.STARTED, Stage.FINALIZE)) {         this.indexVersion = indexVersion.     } else {         throw new IllegalStateException("Unable to move the shard snapshot status to [FINALIZE]: " + "expecting [STARTED] but got [" + stage.get() + "]").     }     return asCopy(). }
false;public,synchronized;1;9;;public synchronized Copy moveToDone(final long endTime) {     if (stage.compareAndSet(Stage.FINALIZE, Stage.DONE)) {         this.totalTime = Math.max(0L, endTime - startTime).     } else {         throw new IllegalStateException("Unable to move the shard snapshot status to [DONE]: " + "expecting [FINALIZE] but got [" + stage.get() + "]").     }     return asCopy(). }
false;public,synchronized;1;6;;public synchronized Copy abortIfNotCompleted(final String failure) {     if (stage.compareAndSet(Stage.INIT, Stage.ABORTED) || stage.compareAndSet(Stage.STARTED, Stage.ABORTED)) {         this.failure = failure.     }     return asCopy(). }
false;public,synchronized;2;6;;public synchronized void moveToFailed(final long endTime, final String failure) {     if (stage.getAndSet(Stage.FAILURE) != Stage.FAILURE) {         this.totalTime = Math.max(0L, endTime - startTime).         this.failure = failure.     } }
false;public;0;3;;public boolean isAborted() {     return stage.get() == Stage.ABORTED. }
true;public,synchronized;1;4;/**  * Increments number of processed files  */ ;/**  * Increments number of processed files  */ public synchronized void addProcessedFile(long size) {     processedFileCount++.     processedSize += size. }
true;public,synchronized;0;6;/**  * Returns a copy of the current {@link IndexShardSnapshotStatus}. This method is  * intended to be used when a coherent state of {@link IndexShardSnapshotStatus} is needed.  *  * @return a  {@link IndexShardSnapshotStatus.Copy}  */ ;/**  * Returns a copy of the current {@link IndexShardSnapshotStatus}. This method is  * intended to be used when a coherent state of {@link IndexShardSnapshotStatus} is needed.  *  * @return a  {@link IndexShardSnapshotStatus.Copy}  */ public synchronized IndexShardSnapshotStatus.Copy asCopy() {     return new IndexShardSnapshotStatus.Copy(stage.get(), startTime, totalTime, incrementalFileCount, totalFileCount, processedFileCount, incrementalSize, totalSize, processedSize, indexVersion, failure). }
false;public,static;0;3;;public static IndexShardSnapshotStatus newInitializing() {     return new IndexShardSnapshotStatus(Stage.INIT, 0L, 0L, 0, 0, 0, 0, 0, 0, 0, null). }
false;public,static;1;7;;public static IndexShardSnapshotStatus newFailed(final String failure) {     assert failure != null : "expecting non null failure for a failed IndexShardSnapshotStatus".     if (failure == null) {         throw new IllegalArgumentException("A failure description is required for a failed IndexShardSnapshotStatus").     }     return new IndexShardSnapshotStatus(Stage.FAILURE, 0L, 0L, 0, 0, 0, 0, 0, 0, 0, failure). }
false;public,static;6;7;;public static IndexShardSnapshotStatus newDone(final long startTime, final long totalTime, final int incrementalFileCount, final int fileCount, final long incrementalSize, final long size) {     // The snapshot is done which means the number of processed files is the same as total     return new IndexShardSnapshotStatus(Stage.DONE, startTime, totalTime, incrementalFileCount, fileCount, incrementalFileCount, incrementalSize, size, incrementalSize, 0, null). }
false;public;0;3;;public Stage getStage() {     return stage. }
false;public;0;3;;public long getStartTime() {     return startTime. }
false;public;0;3;;public long getTotalTime() {     return totalTime. }
false;public;0;3;;public int getIncrementalFileCount() {     return incrementalFileCount. }
false;public;0;3;;public int getTotalFileCount() {     return totalFileCount. }
false;public;0;3;;public int getProcessedFileCount() {     return processedFileCount. }
false;public;0;3;;public long getIncrementalSize() {     return incrementalSize. }
false;public;0;3;;public long getTotalSize() {     return totalSize. }
false;public;0;3;;public long getProcessedSize() {     return processedSize. }
false;public;0;3;;public long getIndexVersion() {     return indexVersion. }
false;public;0;3;;public String getFailure() {     return failure. }
false;public;0;16;;@Override public String toString() {     return "index shard snapshot status (" + "stage=" + stage + ", startTime=" + startTime + ", totalTime=" + totalTime + ", incrementalFileCount=" + incrementalFileCount + ", totalFileCount=" + totalFileCount + ", processedFileCount=" + processedFileCount + ", incrementalSize=" + incrementalSize + ", totalSize=" + totalSize + ", processedSize=" + processedSize + ", indexVersion=" + indexVersion + ", failure='" + failure + '\'' + ')'. }
