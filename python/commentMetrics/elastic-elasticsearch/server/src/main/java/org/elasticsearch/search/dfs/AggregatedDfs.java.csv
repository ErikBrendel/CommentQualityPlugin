commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ObjectObjectHashMap<Term, TermStatistics> termStatistics() {     return termStatistics. }
false;public;0;3;;public ObjectObjectHashMap<String, CollectionStatistics> fieldStatistics() {     return fieldStatistics. }
false;public;0;3;;public long maxDoc() {     return maxDoc. }
false;public,static;1;5;;public static AggregatedDfs readAggregatedDfs(StreamInput in) throws IOException {     AggregatedDfs result = new AggregatedDfs().     result.readFrom(in).     return result. }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     int size = in.readVInt().     termStatistics = HppcMaps.newMap(size).     for (int i = 0. i < size. i++) {         Term term = new Term(in.readString(), in.readBytesRef()).         TermStatistics stats = new TermStatistics(in.readBytesRef(), in.readVLong(), DfsSearchResult.subOne(in.readVLong())).         termStatistics.put(term, stats).     }     fieldStatistics = DfsSearchResult.readFieldStats(in).     maxDoc = in.readVLong(). }
false;public;1;17;;@Override public void writeTo(final StreamOutput out) throws IOException {     out.writeVInt(termStatistics.size()).     for (ObjectObjectCursor<Term, TermStatistics> c : termStatistics()) {         Term term = c.key.         out.writeString(term.field()).         out.writeBytesRef(term.bytes()).         TermStatistics stats = c.value.         out.writeBytesRef(stats.term()).         out.writeVLong(stats.docFreq()).         out.writeVLong(DfsSearchResult.addOne(stats.totalTermFreq())).     }     DfsSearchResult.writeFieldStats(out, fieldStatistics).     out.writeVLong(maxDoc). }
