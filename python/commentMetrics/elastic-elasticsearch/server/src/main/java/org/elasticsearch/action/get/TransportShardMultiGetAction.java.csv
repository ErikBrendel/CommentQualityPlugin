commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean isSubAction() {     return true. }
false;protected;0;4;;@Override protected MultiGetShardResponse newResponse() {     return new MultiGetShardResponse(). }
false;protected;1;4;;@Override protected boolean resolveIndex(MultiGetShardRequest request) {     return true. }
false;protected;2;5;;@Override protected ShardIterator shards(ClusterState state, InternalRequest request) {     return clusterService.operationRouting().getShards(state, request.request().index(), request.request().shardId(), request.request().preference()). }
false;protected;2;29;;@Override protected MultiGetShardResponse shardOperation(MultiGetShardRequest request, ShardId shardId) {     IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex()).     IndexShard indexShard = indexService.getShard(shardId.id()).     if (request.refresh() && !request.realtime()) {         indexShard.refresh("refresh_flag_mget").     }     MultiGetShardResponse response = new MultiGetShardResponse().     for (int i = 0. i < request.locations.size(). i++) {         MultiGetRequest.Item item = request.items.get(i).         try {             GetResult getResult = indexShard.getService().get(item.type(), item.id(), item.storedFields(), request.realtime(), item.version(), item.versionType(), item.fetchSourceContext()).             response.add(request.locations.get(i), new GetResponse(getResult)).         } catch (RuntimeException e) {             if (TransportActions.isShardNotAvailableException(e)) {                 throw e.             } else {                 logger.debug(() -> new ParameterizedMessage("{} failed to execute multi_get for [{}]/[{}]", shardId, item.type(), item.id()), e).                 response.add(request.locations.get(i), new MultiGetResponse.Failure(request.index(), item.type(), item.id(), e)).             }         }     }     return response. }
false;protected;2;6;;@Override protected String getExecutor(MultiGetShardRequest request, ShardId shardId) {     IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex()).     return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request, shardId). }
