commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "document_update_action". }
false;public;2;49;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     UpdateRequest updateRequest.     if (request.hasParam("type")) {         deprecationLogger.deprecatedAndMaybeLog("update_with_types", TYPES_DEPRECATION_MESSAGE).         updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id")).     } else {         updateRequest = new UpdateRequest(request.param("index"), request.param("id")).     }     updateRequest.routing(request.param("routing")).     updateRequest.timeout(request.paramAsTime("timeout", updateRequest.timeout())).     updateRequest.setRefreshPolicy(request.param("refresh")).     String waitForActiveShards = request.param("wait_for_active_shards").     if (waitForActiveShards != null) {         updateRequest.waitForActiveShards(ActiveShardCount.parseString(waitForActiveShards)).     }     updateRequest.docAsUpsert(request.paramAsBoolean("doc_as_upsert", updateRequest.docAsUpsert())).     FetchSourceContext fetchSourceContext = FetchSourceContext.parseFromRestRequest(request).     if (fetchSourceContext != null) {         updateRequest.fetchSource(fetchSourceContext).     }     updateRequest.retryOnConflict(request.paramAsInt("retry_on_conflict", updateRequest.retryOnConflict())).     updateRequest.setIfSeqNo(request.paramAsLong("if_seq_no", updateRequest.ifSeqNo())).     updateRequest.setIfPrimaryTerm(request.paramAsLong("if_primary_term", updateRequest.ifPrimaryTerm())).     request.applyContentParser(parser -> {         updateRequest.fromXContent(parser).         IndexRequest upsertRequest = updateRequest.upsertRequest().         if (upsertRequest != null) {             upsertRequest.routing(request.param("routing")).             upsertRequest.version(RestActions.parseVersion(request)).             upsertRequest.versionType(VersionType.fromString(request.param("version_type"), upsertRequest.versionType())).         }         IndexRequest doc = updateRequest.doc().         if (doc != null) {             doc.routing(request.param("routing")).             doc.version(RestActions.parseVersion(request)).             doc.versionType(VersionType.fromString(request.param("version_type"), doc.versionType())).         }     }).     return channel -> client.update(updateRequest, new RestStatusToXContentListener<>(channel, r -> r.getLocation(updateRequest.routing()))). }
