commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Returns a copy of this configuration exception with the specified partial value.  */ ;/**  * Returns a copy of this configuration exception with the specified partial value.  */ public ConfigurationException withPartialValue(Object partialValue) {     if (this.partialValue != null) {         String message = String.format(Locale.ROOT, "Can't clobber existing partial value %s with %s", this.partialValue, partialValue).         throw new IllegalStateException(message).     }     ConfigurationException result = new ConfigurationException(messages).     result.partialValue = partialValue.     return result. }
true;public;0;3;/**  * Returns messages for the errors that caused this exception.  */ ;/**  * Returns messages for the errors that caused this exception.  */ public Collection<Message> getErrorMessages() {     return messages. }
true;public;0;4;/**  * Returns a value that was only partially computed due to this exception. The caller can use  * this while collecting additional configuration problems.  *  * @return the partial value, or {@code null} if none was set. The type of the partial value is  *         specified by the throwing method.  */ ;/**  * Returns a value that was only partially computed due to this exception. The caller can use  * this while collecting additional configuration problems.  *  * @return the partial value, or {@code null} if none was set. The type of the partial value is  *         specified by the throwing method.  */ // this is *extremely* unsafe. We trust the caller here. @SuppressWarnings("unchecked") public <E> E getPartialValue() {     return (E) partialValue. }
false;public;0;4;;@Override public String getMessage() {     return Errors.format("Guice configuration errors", messages). }
