# id;timestamp;commentText;codeText;commentWords;codeWords
SoftDeletesPolicy -> synchronized long getMinRetainedSeqNo();1535723122;Returns the min seqno that is retained in the Lucene index._Operations whose seq# is least this value should exist in the Lucene index.;synchronized long getMinRetainedSeqNo() {_        _        if (retentionLockCount == 0) {_            _            _            _            _            _            final long minSeqNoForQueryingChanges = globalCheckpointSupplier.getAsLong() - retentionOperations__            final long minSeqNoToRetain = Math.min(minSeqNoForQueryingChanges, localCheckpointOfSafeCommit) + 1__            _            minRetainedSeqNo = Math.max(minRetainedSeqNo, minSeqNoToRetain)__        }_        return minRetainedSeqNo__    };returns,the,min,seqno,that,is,retained,in,the,lucene,index,operations,whose,seq,is,least,this,value,should,exist,in,the,lucene,index;synchronized,long,get,min,retained,seq,no,if,retention,lock,count,0,final,long,min,seq,no,for,querying,changes,global,checkpoint,supplier,get,as,long,retention,operations,final,long,min,seq,no,to,retain,math,min,min,seq,no,for,querying,changes,local,checkpoint,of,safe,commit,1,min,retained,seq,no,math,max,min,retained,seq,no,min,seq,no,to,retain,return,min,retained,seq,no
SoftDeletesPolicy -> synchronized long getMinRetainedSeqNo();1546875837;Returns the min seqno that is retained in the Lucene index._Operations whose seq# is least this value should exist in the Lucene index.;synchronized long getMinRetainedSeqNo() {_        _        if (retentionLockCount == 0) {_            __            _            final long minimumRetainingSequenceNumber = retentionLeasesSupplier_                    .get()_                    .stream()_                    .mapToLong(RetentionLease::retainingSequenceNumber)_                    .min()_                    .orElse(Long.MAX_VALUE)__            _            final long minSeqNoForQueryingChanges =_                    Math.min(globalCheckpointSupplier.getAsLong() - retentionOperations, minimumRetainingSequenceNumber)__            final long minSeqNoToRetain = Math.min(minSeqNoForQueryingChanges, localCheckpointOfSafeCommit) + 1___            _            minRetainedSeqNo = Math.max(minRetainedSeqNo, minSeqNoToRetain)__        }_        return minRetainedSeqNo__    };returns,the,min,seqno,that,is,retained,in,the,lucene,index,operations,whose,seq,is,least,this,value,should,exist,in,the,lucene,index;synchronized,long,get,min,retained,seq,no,if,retention,lock,count,0,final,long,minimum,retaining,sequence,number,retention,leases,supplier,get,stream,map,to,long,retention,lease,retaining,sequence,number,min,or,else,long,final,long,min,seq,no,for,querying,changes,math,min,global,checkpoint,supplier,get,as,long,retention,operations,minimum,retaining,sequence,number,final,long,min,seq,no,to,retain,math,min,min,seq,no,for,querying,changes,local,checkpoint,of,safe,commit,1,min,retained,seq,no,math,max,min,retained,seq,no,min,seq,no,to,retain,return,min,retained,seq,no
SoftDeletesPolicy -> synchronized long getMinRetainedSeqNo();1547332999;Returns the min seqno that is retained in the Lucene index._Operations whose seq# is least this value should exist in the Lucene index.;synchronized long getMinRetainedSeqNo() {_        return getRetentionPolicy().v1()__    };returns,the,min,seqno,that,is,retained,in,the,lucene,index,operations,whose,seq,is,least,this,value,should,exist,in,the,lucene,index;synchronized,long,get,min,retained,seq,no,return,get,retention,policy,v1
SoftDeletesPolicy -> synchronized long getMinRetainedSeqNo();1548954177;Returns the min seqno that is retained in the Lucene index._Operations whose seq# is least this value should exist in the Lucene index.;synchronized long getMinRetainedSeqNo() {_        return getRetentionPolicy().v1()__    };returns,the,min,seqno,that,is,retained,in,the,lucene,index,operations,whose,seq,is,least,this,value,should,exist,in,the,lucene,index;synchronized,long,get,min,retained,seq,no,return,get,retention,policy,v1
SoftDeletesPolicy -> synchronized long getMinRetainedSeqNo();1549059559;Returns the min seqno that is retained in the Lucene index._Operations whose seq# is least this value should exist in the Lucene index.;synchronized long getMinRetainedSeqNo() {_        return getRetentionPolicy().v1()__    };returns,the,min,seqno,that,is,retained,in,the,lucene,index,operations,whose,seq,is,least,this,value,should,exist,in,the,lucene,index;synchronized,long,get,min,retained,seq,no,return,get,retention,policy,v1
SoftDeletesPolicy -> synchronized long getMinRetainedSeqNo();1550084651;Returns the min seqno that is retained in the Lucene index._Operations whose seq# is least this value should exist in the Lucene index.;synchronized long getMinRetainedSeqNo() {_        return getRetentionPolicy().v1()__    };returns,the,min,seqno,that,is,retained,in,the,lucene,index,operations,whose,seq,is,least,this,value,should,exist,in,the,lucene,index;synchronized,long,get,min,retained,seq,no,return,get,retention,policy,v1
SoftDeletesPolicy -> synchronized long getMinRetainedSeqNo();1550526771;Returns the min seqno that is retained in the Lucene index._Operations whose seq# is least this value should exist in the Lucene index.;synchronized long getMinRetainedSeqNo() {_        _        final RetentionLeases retentionLeases = retentionLeasesSupplier.get()__        _        if (retentionLockCount == 0) {_            __            _            final long minimumRetainingSequenceNumber = retentionLeases_                    .leases()_                    .stream()_                    .mapToLong(RetentionLease::retainingSequenceNumber)_                    .min()_                    .orElse(Long.MAX_VALUE)__            _            final long minSeqNoForQueryingChanges =_                    Math.min(1 + globalCheckpointSupplier.getAsLong() - retentionOperations, minimumRetainingSequenceNumber)__            final long minSeqNoToRetain = Math.min(minSeqNoForQueryingChanges, 1 + localCheckpointOfSafeCommit)___            _            minRetainedSeqNo = Math.max(minRetainedSeqNo, minSeqNoToRetain)__        }_        return minRetainedSeqNo__    };returns,the,min,seqno,that,is,retained,in,the,lucene,index,operations,whose,seq,is,least,this,value,should,exist,in,the,lucene,index;synchronized,long,get,min,retained,seq,no,final,retention,leases,retention,leases,retention,leases,supplier,get,if,retention,lock,count,0,final,long,minimum,retaining,sequence,number,retention,leases,leases,stream,map,to,long,retention,lease,retaining,sequence,number,min,or,else,long,final,long,min,seq,no,for,querying,changes,math,min,1,global,checkpoint,supplier,get,as,long,retention,operations,minimum,retaining,sequence,number,final,long,min,seq,no,to,retain,math,min,min,seq,no,for,querying,changes,1,local,checkpoint,of,safe,commit,min,retained,seq,no,math,max,min,retained,seq,no,min,seq,no,to,retain,return,min,retained,seq,no
SoftDeletesPolicy -> synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint);1535723122;Sets the local checkpoint of the current safe commit;synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint) {_        if (newCheckpoint < this.localCheckpointOfSafeCommit) {_            throw new IllegalArgumentException("Local checkpoint can't go backwards_ " +_                "new checkpoint [" + newCheckpoint + "]," + "current checkpoint [" + localCheckpointOfSafeCommit + "]")__        }_        this.localCheckpointOfSafeCommit = newCheckpoint__    };sets,the,local,checkpoint,of,the,current,safe,commit;synchronized,void,set,local,checkpoint,of,safe,commit,long,new,checkpoint,if,new,checkpoint,this,local,checkpoint,of,safe,commit,throw,new,illegal,argument,exception,local,checkpoint,can,t,go,backwards,new,checkpoint,new,checkpoint,current,checkpoint,local,checkpoint,of,safe,commit,this,local,checkpoint,of,safe,commit,new,checkpoint
SoftDeletesPolicy -> synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint);1546875837;Sets the local checkpoint of the current safe commit;synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint) {_        if (newCheckpoint < this.localCheckpointOfSafeCommit) {_            throw new IllegalArgumentException("Local checkpoint can't go backwards_ " +_                "new checkpoint [" + newCheckpoint + "]," + "current checkpoint [" + localCheckpointOfSafeCommit + "]")__        }_        this.localCheckpointOfSafeCommit = newCheckpoint__    };sets,the,local,checkpoint,of,the,current,safe,commit;synchronized,void,set,local,checkpoint,of,safe,commit,long,new,checkpoint,if,new,checkpoint,this,local,checkpoint,of,safe,commit,throw,new,illegal,argument,exception,local,checkpoint,can,t,go,backwards,new,checkpoint,new,checkpoint,current,checkpoint,local,checkpoint,of,safe,commit,this,local,checkpoint,of,safe,commit,new,checkpoint
SoftDeletesPolicy -> synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint);1547332999;Sets the local checkpoint of the current safe commit;synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint) {_        if (newCheckpoint < this.localCheckpointOfSafeCommit) {_            throw new IllegalArgumentException("Local checkpoint can't go backwards_ " +_                "new checkpoint [" + newCheckpoint + "]," + "current checkpoint [" + localCheckpointOfSafeCommit + "]")__        }_        this.localCheckpointOfSafeCommit = newCheckpoint__    };sets,the,local,checkpoint,of,the,current,safe,commit;synchronized,void,set,local,checkpoint,of,safe,commit,long,new,checkpoint,if,new,checkpoint,this,local,checkpoint,of,safe,commit,throw,new,illegal,argument,exception,local,checkpoint,can,t,go,backwards,new,checkpoint,new,checkpoint,current,checkpoint,local,checkpoint,of,safe,commit,this,local,checkpoint,of,safe,commit,new,checkpoint
SoftDeletesPolicy -> synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint);1548954177;Sets the local checkpoint of the current safe commit;synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint) {_        if (newCheckpoint < this.localCheckpointOfSafeCommit) {_            throw new IllegalArgumentException("Local checkpoint can't go backwards_ " +_                "new checkpoint [" + newCheckpoint + "]," + "current checkpoint [" + localCheckpointOfSafeCommit + "]")__        }_        this.localCheckpointOfSafeCommit = newCheckpoint__    };sets,the,local,checkpoint,of,the,current,safe,commit;synchronized,void,set,local,checkpoint,of,safe,commit,long,new,checkpoint,if,new,checkpoint,this,local,checkpoint,of,safe,commit,throw,new,illegal,argument,exception,local,checkpoint,can,t,go,backwards,new,checkpoint,new,checkpoint,current,checkpoint,local,checkpoint,of,safe,commit,this,local,checkpoint,of,safe,commit,new,checkpoint
SoftDeletesPolicy -> synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint);1549059559;Sets the local checkpoint of the current safe commit;synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint) {_        if (newCheckpoint < this.localCheckpointOfSafeCommit) {_            throw new IllegalArgumentException("Local checkpoint can't go backwards_ " +_                "new checkpoint [" + newCheckpoint + "]," + "current checkpoint [" + localCheckpointOfSafeCommit + "]")__        }_        this.localCheckpointOfSafeCommit = newCheckpoint__    };sets,the,local,checkpoint,of,the,current,safe,commit;synchronized,void,set,local,checkpoint,of,safe,commit,long,new,checkpoint,if,new,checkpoint,this,local,checkpoint,of,safe,commit,throw,new,illegal,argument,exception,local,checkpoint,can,t,go,backwards,new,checkpoint,new,checkpoint,current,checkpoint,local,checkpoint,of,safe,commit,this,local,checkpoint,of,safe,commit,new,checkpoint
SoftDeletesPolicy -> synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint);1550084651;Sets the local checkpoint of the current safe commit;synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint) {_        if (newCheckpoint < this.localCheckpointOfSafeCommit) {_            throw new IllegalArgumentException("Local checkpoint can't go backwards_ " +_                "new checkpoint [" + newCheckpoint + "]," + "current checkpoint [" + localCheckpointOfSafeCommit + "]")__        }_        this.localCheckpointOfSafeCommit = newCheckpoint__    };sets,the,local,checkpoint,of,the,current,safe,commit;synchronized,void,set,local,checkpoint,of,safe,commit,long,new,checkpoint,if,new,checkpoint,this,local,checkpoint,of,safe,commit,throw,new,illegal,argument,exception,local,checkpoint,can,t,go,backwards,new,checkpoint,new,checkpoint,current,checkpoint,local,checkpoint,of,safe,commit,this,local,checkpoint,of,safe,commit,new,checkpoint
SoftDeletesPolicy -> synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint);1550526771;Sets the local checkpoint of the current safe commit;synchronized void setLocalCheckpointOfSafeCommit(long newCheckpoint) {_        if (newCheckpoint < this.localCheckpointOfSafeCommit) {_            throw new IllegalArgumentException("Local checkpoint can't go backwards_ " +_                "new checkpoint [" + newCheckpoint + "]," + "current checkpoint [" + localCheckpointOfSafeCommit + "]")__        }_        this.localCheckpointOfSafeCommit = newCheckpoint__    };sets,the,local,checkpoint,of,the,current,safe,commit;synchronized,void,set,local,checkpoint,of,safe,commit,long,new,checkpoint,if,new,checkpoint,this,local,checkpoint,of,safe,commit,throw,new,illegal,argument,exception,local,checkpoint,can,t,go,backwards,new,checkpoint,new,checkpoint,current,checkpoint,local,checkpoint,of,safe,commit,this,local,checkpoint,of,safe,commit,new,checkpoint
SoftDeletesPolicy -> synchronized Releasable acquireRetentionLock();1535723122;Acquires a lock on soft-deleted documents to prevent them from cleaning up in merge processes. This is necessary to_make sure that all operations that are being retained will be retained until the lock is released._This is a analogy to the translog's retention lock_ see {@link Translog#acquireRetentionLock()};synchronized Releasable acquireRetentionLock() {_        assert retentionLockCount >= 0 : "Invalid number of retention locks [" + retentionLockCount + "]"__        retentionLockCount++__        final AtomicBoolean released = new AtomicBoolean()__        return () -> {_            if (released.compareAndSet(false, true)) {_                releaseRetentionLock()__            }_        }__    };acquires,a,lock,on,soft,deleted,documents,to,prevent,them,from,cleaning,up,in,merge,processes,this,is,necessary,to,make,sure,that,all,operations,that,are,being,retained,will,be,retained,until,the,lock,is,released,this,is,a,analogy,to,the,translog,s,retention,lock,see,link,translog,acquire,retention,lock;synchronized,releasable,acquire,retention,lock,assert,retention,lock,count,0,invalid,number,of,retention,locks,retention,lock,count,retention,lock,count,final,atomic,boolean,released,new,atomic,boolean,return,if,released,compare,and,set,false,true,release,retention,lock
SoftDeletesPolicy -> synchronized Releasable acquireRetentionLock();1546875837;Acquires a lock on soft-deleted documents to prevent them from cleaning up in merge processes. This is necessary to_make sure that all operations that are being retained will be retained until the lock is released._This is a analogy to the translog's retention lock_ see {@link Translog#acquireRetentionLock()};synchronized Releasable acquireRetentionLock() {_        assert retentionLockCount >= 0 : "Invalid number of retention locks [" + retentionLockCount + "]"__        retentionLockCount++__        final AtomicBoolean released = new AtomicBoolean()__        return () -> {_            if (released.compareAndSet(false, true)) {_                releaseRetentionLock()__            }_        }__    };acquires,a,lock,on,soft,deleted,documents,to,prevent,them,from,cleaning,up,in,merge,processes,this,is,necessary,to,make,sure,that,all,operations,that,are,being,retained,will,be,retained,until,the,lock,is,released,this,is,a,analogy,to,the,translog,s,retention,lock,see,link,translog,acquire,retention,lock;synchronized,releasable,acquire,retention,lock,assert,retention,lock,count,0,invalid,number,of,retention,locks,retention,lock,count,retention,lock,count,final,atomic,boolean,released,new,atomic,boolean,return,if,released,compare,and,set,false,true,release,retention,lock
SoftDeletesPolicy -> synchronized Releasable acquireRetentionLock();1547332999;Acquires a lock on soft-deleted documents to prevent them from cleaning up in merge processes. This is necessary to_make sure that all operations that are being retained will be retained until the lock is released._This is a analogy to the translog's retention lock_ see {@link Translog#acquireRetentionLock()};synchronized Releasable acquireRetentionLock() {_        assert retentionLockCount >= 0 : "Invalid number of retention locks [" + retentionLockCount + "]"__        retentionLockCount++__        final AtomicBoolean released = new AtomicBoolean()__        return () -> {_            if (released.compareAndSet(false, true)) {_                releaseRetentionLock()__            }_        }__    };acquires,a,lock,on,soft,deleted,documents,to,prevent,them,from,cleaning,up,in,merge,processes,this,is,necessary,to,make,sure,that,all,operations,that,are,being,retained,will,be,retained,until,the,lock,is,released,this,is,a,analogy,to,the,translog,s,retention,lock,see,link,translog,acquire,retention,lock;synchronized,releasable,acquire,retention,lock,assert,retention,lock,count,0,invalid,number,of,retention,locks,retention,lock,count,retention,lock,count,final,atomic,boolean,released,new,atomic,boolean,return,if,released,compare,and,set,false,true,release,retention,lock
SoftDeletesPolicy -> synchronized Releasable acquireRetentionLock();1548954177;Acquires a lock on soft-deleted documents to prevent them from cleaning up in merge processes. This is necessary to_make sure that all operations that are being retained will be retained until the lock is released._This is a analogy to the translog's retention lock_ see {@link Translog#acquireRetentionLock()};synchronized Releasable acquireRetentionLock() {_        assert retentionLockCount >= 0 : "Invalid number of retention locks [" + retentionLockCount + "]"__        retentionLockCount++__        final AtomicBoolean released = new AtomicBoolean()__        return () -> {_            if (released.compareAndSet(false, true)) {_                releaseRetentionLock()__            }_        }__    };acquires,a,lock,on,soft,deleted,documents,to,prevent,them,from,cleaning,up,in,merge,processes,this,is,necessary,to,make,sure,that,all,operations,that,are,being,retained,will,be,retained,until,the,lock,is,released,this,is,a,analogy,to,the,translog,s,retention,lock,see,link,translog,acquire,retention,lock;synchronized,releasable,acquire,retention,lock,assert,retention,lock,count,0,invalid,number,of,retention,locks,retention,lock,count,retention,lock,count,final,atomic,boolean,released,new,atomic,boolean,return,if,released,compare,and,set,false,true,release,retention,lock
SoftDeletesPolicy -> synchronized Releasable acquireRetentionLock();1549059559;Acquires a lock on soft-deleted documents to prevent them from cleaning up in merge processes. This is necessary to_make sure that all operations that are being retained will be retained until the lock is released._This is a analogy to the translog's retention lock_ see {@link Translog#acquireRetentionLock()};synchronized Releasable acquireRetentionLock() {_        assert retentionLockCount >= 0 : "Invalid number of retention locks [" + retentionLockCount + "]"__        retentionLockCount++__        final AtomicBoolean released = new AtomicBoolean()__        return () -> {_            if (released.compareAndSet(false, true)) {_                releaseRetentionLock()__            }_        }__    };acquires,a,lock,on,soft,deleted,documents,to,prevent,them,from,cleaning,up,in,merge,processes,this,is,necessary,to,make,sure,that,all,operations,that,are,being,retained,will,be,retained,until,the,lock,is,released,this,is,a,analogy,to,the,translog,s,retention,lock,see,link,translog,acquire,retention,lock;synchronized,releasable,acquire,retention,lock,assert,retention,lock,count,0,invalid,number,of,retention,locks,retention,lock,count,retention,lock,count,final,atomic,boolean,released,new,atomic,boolean,return,if,released,compare,and,set,false,true,release,retention,lock
SoftDeletesPolicy -> synchronized Releasable acquireRetentionLock();1550084651;Acquires a lock on soft-deleted documents to prevent them from cleaning up in merge processes. This is necessary to_make sure that all operations that are being retained will be retained until the lock is released._This is a analogy to the translog's retention lock_ see {@link Translog#acquireRetentionLock()};synchronized Releasable acquireRetentionLock() {_        assert retentionLockCount >= 0 : "Invalid number of retention locks [" + retentionLockCount + "]"__        retentionLockCount++__        final AtomicBoolean released = new AtomicBoolean()__        return () -> {_            if (released.compareAndSet(false, true)) {_                releaseRetentionLock()__            }_        }__    };acquires,a,lock,on,soft,deleted,documents,to,prevent,them,from,cleaning,up,in,merge,processes,this,is,necessary,to,make,sure,that,all,operations,that,are,being,retained,will,be,retained,until,the,lock,is,released,this,is,a,analogy,to,the,translog,s,retention,lock,see,link,translog,acquire,retention,lock;synchronized,releasable,acquire,retention,lock,assert,retention,lock,count,0,invalid,number,of,retention,locks,retention,lock,count,retention,lock,count,final,atomic,boolean,released,new,atomic,boolean,return,if,released,compare,and,set,false,true,release,retention,lock
SoftDeletesPolicy -> synchronized Releasable acquireRetentionLock();1550526771;Acquires a lock on soft-deleted documents to prevent them from cleaning up in merge processes. This is necessary to_make sure that all operations that are being retained will be retained until the lock is released._This is a analogy to the translog's retention lock_ see {@link Translog#acquireRetentionLock()};synchronized Releasable acquireRetentionLock() {_        assert retentionLockCount >= 0 : "Invalid number of retention locks [" + retentionLockCount + "]"__        retentionLockCount++__        final AtomicBoolean released = new AtomicBoolean()__        return () -> {_            if (released.compareAndSet(false, true)) {_                releaseRetentionLock()__            }_        }__    };acquires,a,lock,on,soft,deleted,documents,to,prevent,them,from,cleaning,up,in,merge,processes,this,is,necessary,to,make,sure,that,all,operations,that,are,being,retained,will,be,retained,until,the,lock,is,released,this,is,a,analogy,to,the,translog,s,retention,lock,see,link,translog,acquire,retention,lock;synchronized,releasable,acquire,retention,lock,assert,retention,lock,count,0,invalid,number,of,retention,locks,retention,lock,count,retention,lock,count,final,atomic,boolean,released,new,atomic,boolean,return,if,released,compare,and,set,false,true,release,retention,lock
SoftDeletesPolicy -> synchronized void setRetentionOperations(long retentionOperations);1535723122;Updates the number of soft-deleted documents prior to the global checkpoint to be retained_See {@link org.elasticsearch.index.IndexSettings#INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING};synchronized void setRetentionOperations(long retentionOperations) {_        this.retentionOperations = retentionOperations__    };updates,the,number,of,soft,deleted,documents,prior,to,the,global,checkpoint,to,be,retained,see,link,org,elasticsearch,index,index,settings;synchronized,void,set,retention,operations,long,retention,operations,this,retention,operations,retention,operations
SoftDeletesPolicy -> synchronized void setRetentionOperations(long retentionOperations);1546875837;Updates the number of soft-deleted documents prior to the global checkpoint to be retained_See {@link org.elasticsearch.index.IndexSettings#INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING};synchronized void setRetentionOperations(long retentionOperations) {_        this.retentionOperations = retentionOperations__    };updates,the,number,of,soft,deleted,documents,prior,to,the,global,checkpoint,to,be,retained,see,link,org,elasticsearch,index,index,settings;synchronized,void,set,retention,operations,long,retention,operations,this,retention,operations,retention,operations
SoftDeletesPolicy -> synchronized void setRetentionOperations(long retentionOperations);1547332999;Updates the number of soft-deleted documents prior to the global checkpoint to be retained_See {@link org.elasticsearch.index.IndexSettings#INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING};synchronized void setRetentionOperations(long retentionOperations) {_        this.retentionOperations = retentionOperations__    };updates,the,number,of,soft,deleted,documents,prior,to,the,global,checkpoint,to,be,retained,see,link,org,elasticsearch,index,index,settings;synchronized,void,set,retention,operations,long,retention,operations,this,retention,operations,retention,operations
SoftDeletesPolicy -> synchronized void setRetentionOperations(long retentionOperations);1548954177;Updates the number of soft-deleted documents prior to the global checkpoint to be retained_See {@link org.elasticsearch.index.IndexSettings#INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING};synchronized void setRetentionOperations(long retentionOperations) {_        this.retentionOperations = retentionOperations__    };updates,the,number,of,soft,deleted,documents,prior,to,the,global,checkpoint,to,be,retained,see,link,org,elasticsearch,index,index,settings;synchronized,void,set,retention,operations,long,retention,operations,this,retention,operations,retention,operations
SoftDeletesPolicy -> synchronized void setRetentionOperations(long retentionOperations);1549059559;Updates the number of soft-deleted documents prior to the global checkpoint to be retained_See {@link org.elasticsearch.index.IndexSettings#INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING};synchronized void setRetentionOperations(long retentionOperations) {_        this.retentionOperations = retentionOperations__    };updates,the,number,of,soft,deleted,documents,prior,to,the,global,checkpoint,to,be,retained,see,link,org,elasticsearch,index,index,settings;synchronized,void,set,retention,operations,long,retention,operations,this,retention,operations,retention,operations
SoftDeletesPolicy -> synchronized void setRetentionOperations(long retentionOperations);1550084651;Updates the number of soft-deleted documents prior to the global checkpoint to be retained_See {@link org.elasticsearch.index.IndexSettings#INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING};synchronized void setRetentionOperations(long retentionOperations) {_        this.retentionOperations = retentionOperations__    };updates,the,number,of,soft,deleted,documents,prior,to,the,global,checkpoint,to,be,retained,see,link,org,elasticsearch,index,index,settings;synchronized,void,set,retention,operations,long,retention,operations,this,retention,operations,retention,operations
SoftDeletesPolicy -> synchronized void setRetentionOperations(long retentionOperations);1550526771;Updates the number of soft-deleted documents prior to the global checkpoint to be retained_See {@link org.elasticsearch.index.IndexSettings#INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING};synchronized void setRetentionOperations(long retentionOperations) {_        this.retentionOperations = retentionOperations__    };updates,the,number,of,soft,deleted,documents,prior,to,the,global,checkpoint,to,be,retained,see,link,org,elasticsearch,index,index,settings;synchronized,void,set,retention,operations,long,retention,operations,this,retention,operations,retention,operations
SoftDeletesPolicy -> Query getRetentionQuery();1535723122;Returns a soft-deletes retention query that will be used in {@link org.apache.lucene.index.SoftDeletesRetentionMergePolicy}_Documents including tombstones are soft-deleted and matched this query will be retained and won't cleaned up by merges.;Query getRetentionQuery() {_        return LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getMinRetainedSeqNo(), Long.MAX_VALUE)__    };returns,a,soft,deletes,retention,query,that,will,be,used,in,link,org,apache,lucene,index,soft,deletes,retention,merge,policy,documents,including,tombstones,are,soft,deleted,and,matched,this,query,will,be,retained,and,won,t,cleaned,up,by,merges;query,get,retention,query,return,long,point,new,range,query,seq,no,field,mapper,name,get,min,retained,seq,no,long
SoftDeletesPolicy -> Query getRetentionQuery();1546875837;Returns a soft-deletes retention query that will be used in {@link org.apache.lucene.index.SoftDeletesRetentionMergePolicy}_Documents including tombstones are soft-deleted and matched this query will be retained and won't cleaned up by merges.;Query getRetentionQuery() {_        return LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getMinRetainedSeqNo(), Long.MAX_VALUE)__    };returns,a,soft,deletes,retention,query,that,will,be,used,in,link,org,apache,lucene,index,soft,deletes,retention,merge,policy,documents,including,tombstones,are,soft,deleted,and,matched,this,query,will,be,retained,and,won,t,cleaned,up,by,merges;query,get,retention,query,return,long,point,new,range,query,seq,no,field,mapper,name,get,min,retained,seq,no,long
SoftDeletesPolicy -> Query getRetentionQuery();1547332999;Returns a soft-deletes retention query that will be used in {@link org.apache.lucene.index.SoftDeletesRetentionMergePolicy}_Documents including tombstones are soft-deleted and matched this query will be retained and won't cleaned up by merges.;Query getRetentionQuery() {_        return LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getMinRetainedSeqNo(), Long.MAX_VALUE)__    };returns,a,soft,deletes,retention,query,that,will,be,used,in,link,org,apache,lucene,index,soft,deletes,retention,merge,policy,documents,including,tombstones,are,soft,deleted,and,matched,this,query,will,be,retained,and,won,t,cleaned,up,by,merges;query,get,retention,query,return,long,point,new,range,query,seq,no,field,mapper,name,get,min,retained,seq,no,long
SoftDeletesPolicy -> Query getRetentionQuery();1548954177;Returns a soft-deletes retention query that will be used in {@link org.apache.lucene.index.SoftDeletesRetentionMergePolicy}_Documents including tombstones are soft-deleted and matched this query will be retained and won't cleaned up by merges.;Query getRetentionQuery() {_        return LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getMinRetainedSeqNo(), Long.MAX_VALUE)__    };returns,a,soft,deletes,retention,query,that,will,be,used,in,link,org,apache,lucene,index,soft,deletes,retention,merge,policy,documents,including,tombstones,are,soft,deleted,and,matched,this,query,will,be,retained,and,won,t,cleaned,up,by,merges;query,get,retention,query,return,long,point,new,range,query,seq,no,field,mapper,name,get,min,retained,seq,no,long
SoftDeletesPolicy -> Query getRetentionQuery();1549059559;Returns a soft-deletes retention query that will be used in {@link org.apache.lucene.index.SoftDeletesRetentionMergePolicy}_Documents including tombstones are soft-deleted and matched this query will be retained and won't cleaned up by merges.;Query getRetentionQuery() {_        return LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getMinRetainedSeqNo(), Long.MAX_VALUE)__    };returns,a,soft,deletes,retention,query,that,will,be,used,in,link,org,apache,lucene,index,soft,deletes,retention,merge,policy,documents,including,tombstones,are,soft,deleted,and,matched,this,query,will,be,retained,and,won,t,cleaned,up,by,merges;query,get,retention,query,return,long,point,new,range,query,seq,no,field,mapper,name,get,min,retained,seq,no,long
SoftDeletesPolicy -> Query getRetentionQuery();1550084651;Returns a soft-deletes retention query that will be used in {@link org.apache.lucene.index.SoftDeletesRetentionMergePolicy}_Documents including tombstones are soft-deleted and matched this query will be retained and won't cleaned up by merges.;Query getRetentionQuery() {_        return LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getMinRetainedSeqNo(), Long.MAX_VALUE)__    };returns,a,soft,deletes,retention,query,that,will,be,used,in,link,org,apache,lucene,index,soft,deletes,retention,merge,policy,documents,including,tombstones,are,soft,deleted,and,matched,this,query,will,be,retained,and,won,t,cleaned,up,by,merges;query,get,retention,query,return,long,point,new,range,query,seq,no,field,mapper,name,get,min,retained,seq,no,long
SoftDeletesPolicy -> Query getRetentionQuery();1550526771;Returns a soft-deletes retention query that will be used in {@link org.apache.lucene.index.SoftDeletesRetentionMergePolicy}_Documents including tombstones are soft-deleted and matched this query will be retained and won't cleaned up by merges.;Query getRetentionQuery() {_        return LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getMinRetainedSeqNo(), Long.MAX_VALUE)__    };returns,a,soft,deletes,retention,query,that,will,be,used,in,link,org,apache,lucene,index,soft,deletes,retention,merge,policy,documents,including,tombstones,are,soft,deleted,and,matched,this,query,will,be,retained,and,won,t,cleaned,up,by,merges;query,get,retention,query,return,long,point,new,range,query,seq,no,field,mapper,name,get,min,retained,seq,no,long
