# id;timestamp;commentText;codeText;commentWords;codeWords
ExceptionsHelper -> public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions);1524684173;Throws a runtime exception with all given exceptions added as suppressed._If the given list is empty no exception is thrown;public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions) {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw new ElasticsearchException(main)__        }_    };throws,a,runtime,exception,with,all,given,exceptions,added,as,suppressed,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,maybe,throw,runtime,and,suppress,list,t,exceptions,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,new,elasticsearch,exception,main
ExceptionsHelper -> public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions);1526449283;Throws a runtime exception with all given exceptions added as suppressed._If the given list is empty no exception is thrown;public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions) {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw new ElasticsearchException(main)__        }_    };throws,a,runtime,exception,with,all,given,exceptions,added,as,suppressed,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,maybe,throw,runtime,and,suppress,list,t,exceptions,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,new,elasticsearch,exception,main
ExceptionsHelper -> public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions);1533641732;Throws a runtime exception with all given exceptions added as suppressed._If the given list is empty no exception is thrown;public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions) {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw new ElasticsearchException(main)__        }_    };throws,a,runtime,exception,with,all,given,exceptions,added,as,suppressed,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,maybe,throw,runtime,and,suppress,list,t,exceptions,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,new,elasticsearch,exception,main
ExceptionsHelper -> public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions);1533738061;Throws a runtime exception with all given exceptions added as suppressed._If the given list is empty no exception is thrown;public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions) {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw new ElasticsearchException(main)__        }_    };throws,a,runtime,exception,with,all,given,exceptions,added,as,suppressed,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,maybe,throw,runtime,and,suppress,list,t,exceptions,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,new,elasticsearch,exception,main
ExceptionsHelper -> public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions);1534848846;Throws a runtime exception with all given exceptions added as suppressed._If the given list is empty no exception is thrown;public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions) {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw new ElasticsearchException(main)__        }_    };throws,a,runtime,exception,with,all,given,exceptions,added,as,suppressed,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,maybe,throw,runtime,and,suppress,list,t,exceptions,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,new,elasticsearch,exception,main
ExceptionsHelper -> public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions);1535046779;Throws a runtime exception with all given exceptions added as suppressed._If the given list is empty no exception is thrown;public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions) {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw new ElasticsearchException(main)__        }_    };throws,a,runtime,exception,with,all,given,exceptions,added,as,suppressed,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,maybe,throw,runtime,and,suppress,list,t,exceptions,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,new,elasticsearch,exception,main
ExceptionsHelper -> public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions);1540486836;Throws a runtime exception with all given exceptions added as suppressed._If the given list is empty no exception is thrown;public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions) {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw new ElasticsearchException(main)__        }_    };throws,a,runtime,exception,with,all,given,exceptions,added,as,suppressed,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,maybe,throw,runtime,and,suppress,list,t,exceptions,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,new,elasticsearch,exception,main
ExceptionsHelper -> public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions);1547743595;Throws a runtime exception with all given exceptions added as suppressed._If the given list is empty no exception is thrown;public static <T extends Throwable> void maybeThrowRuntimeAndSuppress(List<T> exceptions) {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw new ElasticsearchException(main)__        }_    };throws,a,runtime,exception,with,all,given,exceptions,added,as,suppressed,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,maybe,throw,runtime,and,suppress,list,t,exceptions,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,new,elasticsearch,exception,main
ExceptionsHelper -> public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T;1524684173;Rethrows the first exception in the list and adds all remaining to the suppressed list._If the given list is empty no exception is thrown;public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw main__        }_    };rethrows,the,first,exception,in,the,list,and,adds,all,remaining,to,the,suppressed,list,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,rethrow,and,suppress,list,t,exceptions,throws,t,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,main
ExceptionsHelper -> public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T;1526449283;Rethrows the first exception in the list and adds all remaining to the suppressed list._If the given list is empty no exception is thrown;public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw main__        }_    };rethrows,the,first,exception,in,the,list,and,adds,all,remaining,to,the,suppressed,list,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,rethrow,and,suppress,list,t,exceptions,throws,t,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,main
ExceptionsHelper -> public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T;1533641732;Rethrows the first exception in the list and adds all remaining to the suppressed list._If the given list is empty no exception is thrown;public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw main__        }_    };rethrows,the,first,exception,in,the,list,and,adds,all,remaining,to,the,suppressed,list,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,rethrow,and,suppress,list,t,exceptions,throws,t,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,main
ExceptionsHelper -> public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T;1533738061;Rethrows the first exception in the list and adds all remaining to the suppressed list._If the given list is empty no exception is thrown;public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw main__        }_    };rethrows,the,first,exception,in,the,list,and,adds,all,remaining,to,the,suppressed,list,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,rethrow,and,suppress,list,t,exceptions,throws,t,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,main
ExceptionsHelper -> public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T;1534848846;Rethrows the first exception in the list and adds all remaining to the suppressed list._If the given list is empty no exception is thrown;public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw main__        }_    };rethrows,the,first,exception,in,the,list,and,adds,all,remaining,to,the,suppressed,list,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,rethrow,and,suppress,list,t,exceptions,throws,t,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,main
ExceptionsHelper -> public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T;1535046779;Rethrows the first exception in the list and adds all remaining to the suppressed list._If the given list is empty no exception is thrown;public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw main__        }_    };rethrows,the,first,exception,in,the,list,and,adds,all,remaining,to,the,suppressed,list,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,rethrow,and,suppress,list,t,exceptions,throws,t,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,main
ExceptionsHelper -> public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T;1540486836;Rethrows the first exception in the list and adds all remaining to the suppressed list._If the given list is empty no exception is thrown;public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw main__        }_    };rethrows,the,first,exception,in,the,list,and,adds,all,remaining,to,the,suppressed,list,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,rethrow,and,suppress,list,t,exceptions,throws,t,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,main
ExceptionsHelper -> public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T;1547743595;Rethrows the first exception in the list and adds all remaining to the suppressed list._If the given list is empty no exception is thrown;public static <T extends Throwable> void rethrowAndSuppress(List<T> exceptions) throws T {_        T main = null__        for (T ex : exceptions) {_            main = useOrSuppress(main, ex)__        }_        if (main != null) {_            throw main__        }_    };rethrows,the,first,exception,in,the,list,and,adds,all,remaining,to,the,suppressed,list,if,the,given,list,is,empty,no,exception,is,thrown;public,static,t,extends,throwable,void,rethrow,and,suppress,list,t,exceptions,throws,t,t,main,null,for,t,ex,exceptions,main,use,or,suppress,main,ex,if,main,null,throw,main
ExceptionsHelper -> public static boolean reThrowIfNotNull(@Nullable Throwable e);1524684173;Throws the specified exception. If null if specified then <code>true</code> is returned.;public static boolean reThrowIfNotNull(@Nullable Throwable e) {_        if (e != null) {_            if (e instanceof RuntimeException) {_                throw (RuntimeException) e__            } else {_                throw new RuntimeException(e)__            }_        }_        return true__    };throws,the,specified,exception,if,null,if,specified,then,code,true,code,is,returned;public,static,boolean,re,throw,if,not,null,nullable,throwable,e,if,e,null,if,e,instanceof,runtime,exception,throw,runtime,exception,e,else,throw,new,runtime,exception,e,return,true
ExceptionsHelper -> public static boolean reThrowIfNotNull(@Nullable Throwable e);1526449283;Throws the specified exception. If null if specified then <code>true</code> is returned.;public static boolean reThrowIfNotNull(@Nullable Throwable e) {_        if (e != null) {_            if (e instanceof RuntimeException) {_                throw (RuntimeException) e__            } else {_                throw new RuntimeException(e)__            }_        }_        return true__    };throws,the,specified,exception,if,null,if,specified,then,code,true,code,is,returned;public,static,boolean,re,throw,if,not,null,nullable,throwable,e,if,e,null,if,e,instanceof,runtime,exception,throw,runtime,exception,e,else,throw,new,runtime,exception,e,return,true
ExceptionsHelper -> public static boolean reThrowIfNotNull(@Nullable Throwable e);1533641732;Throws the specified exception. If null if specified then <code>true</code> is returned.;public static boolean reThrowIfNotNull(@Nullable Throwable e) {_        if (e != null) {_            if (e instanceof RuntimeException) {_                throw (RuntimeException) e__            } else {_                throw new RuntimeException(e)__            }_        }_        return true__    };throws,the,specified,exception,if,null,if,specified,then,code,true,code,is,returned;public,static,boolean,re,throw,if,not,null,nullable,throwable,e,if,e,null,if,e,instanceof,runtime,exception,throw,runtime,exception,e,else,throw,new,runtime,exception,e,return,true
ExceptionsHelper -> public static boolean reThrowIfNotNull(@Nullable Throwable e);1533738061;Throws the specified exception. If null if specified then <code>true</code> is returned.;public static boolean reThrowIfNotNull(@Nullable Throwable e) {_        if (e != null) {_            if (e instanceof RuntimeException) {_                throw (RuntimeException) e__            } else {_                throw new RuntimeException(e)__            }_        }_        return true__    };throws,the,specified,exception,if,null,if,specified,then,code,true,code,is,returned;public,static,boolean,re,throw,if,not,null,nullable,throwable,e,if,e,null,if,e,instanceof,runtime,exception,throw,runtime,exception,e,else,throw,new,runtime,exception,e,return,true
ExceptionsHelper -> public static boolean reThrowIfNotNull(@Nullable Throwable e);1534848846;Throws the specified exception. If null if specified then <code>true</code> is returned.;public static boolean reThrowIfNotNull(@Nullable Throwable e) {_        if (e != null) {_            if (e instanceof RuntimeException) {_                throw (RuntimeException) e__            } else {_                throw new RuntimeException(e)__            }_        }_        return true__    };throws,the,specified,exception,if,null,if,specified,then,code,true,code,is,returned;public,static,boolean,re,throw,if,not,null,nullable,throwable,e,if,e,null,if,e,instanceof,runtime,exception,throw,runtime,exception,e,else,throw,new,runtime,exception,e,return,true
ExceptionsHelper -> public static boolean reThrowIfNotNull(@Nullable Throwable e);1535046779;Throws the specified exception. If null if specified then <code>true</code> is returned.;public static boolean reThrowIfNotNull(@Nullable Throwable e) {_        if (e != null) {_            if (e instanceof RuntimeException) {_                throw (RuntimeException) e__            } else {_                throw new RuntimeException(e)__            }_        }_        return true__    };throws,the,specified,exception,if,null,if,specified,then,code,true,code,is,returned;public,static,boolean,re,throw,if,not,null,nullable,throwable,e,if,e,null,if,e,instanceof,runtime,exception,throw,runtime,exception,e,else,throw,new,runtime,exception,e,return,true
ExceptionsHelper -> public static boolean reThrowIfNotNull(@Nullable Throwable e);1540486836;Throws the specified exception. If null if specified then <code>true</code> is returned.;public static boolean reThrowIfNotNull(@Nullable Throwable e) {_        if (e != null) {_            if (e instanceof RuntimeException) {_                throw (RuntimeException) e__            } else {_                throw new RuntimeException(e)__            }_        }_        return true__    };throws,the,specified,exception,if,null,if,specified,then,code,true,code,is,returned;public,static,boolean,re,throw,if,not,null,nullable,throwable,e,if,e,null,if,e,instanceof,runtime,exception,throw,runtime,exception,e,else,throw,new,runtime,exception,e,return,true
ExceptionsHelper -> public static boolean reThrowIfNotNull(@Nullable Throwable e);1547743595;Throws the specified exception. If null if specified then <code>true</code> is returned.;public static boolean reThrowIfNotNull(@Nullable Throwable e) {_        if (e != null) {_            if (e instanceof RuntimeException) {_                throw (RuntimeException) e__            } else {_                throw new RuntimeException(e)__            }_        }_        return true__    };throws,the,specified,exception,if,null,if,specified,then,code,true,code,is,returned;public,static,boolean,re,throw,if,not,null,nullable,throwable,e,if,e,null,if,e,instanceof,runtime,exception,throw,runtime,exception,e,else,throw,new,runtime,exception,e,return,true
ExceptionsHelper -> public static Optional<Error> maybeError(final Throwable cause, final Logger logger);1524684173;Unwrap the specified throwable looking for any suppressed errors or errors as a root cause of the specified throwable.__@param cause the root throwable__@return an optional error if one is found suppressed or a root cause in the tree rooted at the specified throwable;public static Optional<Error> maybeError(final Throwable cause, final Logger logger) {_        _        if (cause instanceof Error) {_            return Optional.of((Error) cause)__        }__        final Queue<Throwable> queue = new LinkedList<>()__        queue.add(cause)__        int iterations = 0__        while (!queue.isEmpty()) {_            iterations++__            if (iterations > MAX_ITERATIONS) {_                logger.warn("giving up looking for fatal errors", cause)__                break__            }_            final Throwable current = queue.remove()__            if (current instanceof Error) {_                return Optional.of((Error) current)__            }_            Collections.addAll(queue, current.getSuppressed())__            if (current.getCause() != null) {_                queue.add(current.getCause())__            }_        }_        return Optional.empty()__    };unwrap,the,specified,throwable,looking,for,any,suppressed,errors,or,errors,as,a,root,cause,of,the,specified,throwable,param,cause,the,root,throwable,return,an,optional,error,if,one,is,found,suppressed,or,a,root,cause,in,the,tree,rooted,at,the,specified,throwable;public,static,optional,error,maybe,error,final,throwable,cause,final,logger,logger,if,cause,instanceof,error,return,optional,of,error,cause,final,queue,throwable,queue,new,linked,list,queue,add,cause,int,iterations,0,while,queue,is,empty,iterations,if,iterations,logger,warn,giving,up,looking,for,fatal,errors,cause,break,final,throwable,current,queue,remove,if,current,instanceof,error,return,optional,of,error,current,collections,add,all,queue,current,get,suppressed,if,current,get,cause,null,queue,add,current,get,cause,return,optional,empty
ExceptionsHelper -> public static Optional<Error> maybeError(final Throwable cause, final Logger logger);1526449283;Unwrap the specified throwable looking for any suppressed errors or errors as a root cause of the specified throwable.__@param cause the root throwable__@return an optional error if one is found suppressed or a root cause in the tree rooted at the specified throwable;public static Optional<Error> maybeError(final Throwable cause, final Logger logger) {_        _        if (cause instanceof Error) {_            return Optional.of((Error) cause)__        }__        final Queue<Throwable> queue = new LinkedList<>()__        queue.add(cause)__        int iterations = 0__        while (!queue.isEmpty()) {_            iterations++__            if (iterations > MAX_ITERATIONS) {_                logger.warn("giving up looking for fatal errors", cause)__                break__            }_            final Throwable current = queue.remove()__            if (current instanceof Error) {_                return Optional.of((Error) current)__            }_            Collections.addAll(queue, current.getSuppressed())__            if (current.getCause() != null) {_                queue.add(current.getCause())__            }_        }_        return Optional.empty()__    };unwrap,the,specified,throwable,looking,for,any,suppressed,errors,or,errors,as,a,root,cause,of,the,specified,throwable,param,cause,the,root,throwable,return,an,optional,error,if,one,is,found,suppressed,or,a,root,cause,in,the,tree,rooted,at,the,specified,throwable;public,static,optional,error,maybe,error,final,throwable,cause,final,logger,logger,if,cause,instanceof,error,return,optional,of,error,cause,final,queue,throwable,queue,new,linked,list,queue,add,cause,int,iterations,0,while,queue,is,empty,iterations,if,iterations,logger,warn,giving,up,looking,for,fatal,errors,cause,break,final,throwable,current,queue,remove,if,current,instanceof,error,return,optional,of,error,current,collections,add,all,queue,current,get,suppressed,if,current,get,cause,null,queue,add,current,get,cause,return,optional,empty
ExceptionsHelper -> public static Optional<Error> maybeError(final Throwable cause, final Logger logger);1533641732;Unwrap the specified throwable looking for any suppressed errors or errors as a root cause of the specified throwable.__@param cause the root throwable__@return an optional error if one is found suppressed or a root cause in the tree rooted at the specified throwable;public static Optional<Error> maybeError(final Throwable cause, final Logger logger) {_        _        if (cause instanceof Error) {_            return Optional.of((Error) cause)__        }__        final Queue<Throwable> queue = new LinkedList<>()__        queue.add(cause)__        int iterations = 0__        while (!queue.isEmpty()) {_            iterations++__            if (iterations > MAX_ITERATIONS) {_                logger.warn("giving up looking for fatal errors", cause)__                break__            }_            final Throwable current = queue.remove()__            if (current instanceof Error) {_                return Optional.of((Error) current)__            }_            Collections.addAll(queue, current.getSuppressed())__            if (current.getCause() != null) {_                queue.add(current.getCause())__            }_        }_        return Optional.empty()__    };unwrap,the,specified,throwable,looking,for,any,suppressed,errors,or,errors,as,a,root,cause,of,the,specified,throwable,param,cause,the,root,throwable,return,an,optional,error,if,one,is,found,suppressed,or,a,root,cause,in,the,tree,rooted,at,the,specified,throwable;public,static,optional,error,maybe,error,final,throwable,cause,final,logger,logger,if,cause,instanceof,error,return,optional,of,error,cause,final,queue,throwable,queue,new,linked,list,queue,add,cause,int,iterations,0,while,queue,is,empty,iterations,if,iterations,logger,warn,giving,up,looking,for,fatal,errors,cause,break,final,throwable,current,queue,remove,if,current,instanceof,error,return,optional,of,error,current,collections,add,all,queue,current,get,suppressed,if,current,get,cause,null,queue,add,current,get,cause,return,optional,empty
ExceptionsHelper -> public static Optional<Error> maybeError(final Throwable cause, final Logger logger);1533738061;Unwrap the specified throwable looking for any suppressed errors or errors as a root cause of the specified throwable.__@param cause the root throwable__@return an optional error if one is found suppressed or a root cause in the tree rooted at the specified throwable;public static Optional<Error> maybeError(final Throwable cause, final Logger logger) {_        _        if (cause instanceof Error) {_            return Optional.of((Error) cause)__        }__        final Queue<Throwable> queue = new LinkedList<>()__        queue.add(cause)__        int iterations = 0__        while (!queue.isEmpty()) {_            iterations++__            if (iterations > MAX_ITERATIONS) {_                logger.warn("giving up looking for fatal errors", cause)__                break__            }_            final Throwable current = queue.remove()__            if (current instanceof Error) {_                return Optional.of((Error) current)__            }_            Collections.addAll(queue, current.getSuppressed())__            if (current.getCause() != null) {_                queue.add(current.getCause())__            }_        }_        return Optional.empty()__    };unwrap,the,specified,throwable,looking,for,any,suppressed,errors,or,errors,as,a,root,cause,of,the,specified,throwable,param,cause,the,root,throwable,return,an,optional,error,if,one,is,found,suppressed,or,a,root,cause,in,the,tree,rooted,at,the,specified,throwable;public,static,optional,error,maybe,error,final,throwable,cause,final,logger,logger,if,cause,instanceof,error,return,optional,of,error,cause,final,queue,throwable,queue,new,linked,list,queue,add,cause,int,iterations,0,while,queue,is,empty,iterations,if,iterations,logger,warn,giving,up,looking,for,fatal,errors,cause,break,final,throwable,current,queue,remove,if,current,instanceof,error,return,optional,of,error,current,collections,add,all,queue,current,get,suppressed,if,current,get,cause,null,queue,add,current,get,cause,return,optional,empty
ExceptionsHelper -> public static Optional<Error> maybeError(final Throwable cause, final Logger logger);1534848846;Unwrap the specified throwable looking for any suppressed errors or errors as a root cause of the specified throwable.__@param cause the root throwable__@return an optional error if one is found suppressed or a root cause in the tree rooted at the specified throwable;public static Optional<Error> maybeError(final Throwable cause, final Logger logger) {_        _        if (cause instanceof Error) {_            return Optional.of((Error) cause)__        }__        final Queue<Throwable> queue = new LinkedList<>()__        queue.add(cause)__        int iterations = 0__        while (!queue.isEmpty()) {_            iterations++__            if (iterations > MAX_ITERATIONS) {_                logger.warn("giving up looking for fatal errors", cause)__                break__            }_            final Throwable current = queue.remove()__            if (current instanceof Error) {_                return Optional.of((Error) current)__            }_            Collections.addAll(queue, current.getSuppressed())__            if (current.getCause() != null) {_                queue.add(current.getCause())__            }_        }_        return Optional.empty()__    };unwrap,the,specified,throwable,looking,for,any,suppressed,errors,or,errors,as,a,root,cause,of,the,specified,throwable,param,cause,the,root,throwable,return,an,optional,error,if,one,is,found,suppressed,or,a,root,cause,in,the,tree,rooted,at,the,specified,throwable;public,static,optional,error,maybe,error,final,throwable,cause,final,logger,logger,if,cause,instanceof,error,return,optional,of,error,cause,final,queue,throwable,queue,new,linked,list,queue,add,cause,int,iterations,0,while,queue,is,empty,iterations,if,iterations,logger,warn,giving,up,looking,for,fatal,errors,cause,break,final,throwable,current,queue,remove,if,current,instanceof,error,return,optional,of,error,current,collections,add,all,queue,current,get,suppressed,if,current,get,cause,null,queue,add,current,get,cause,return,optional,empty
ExceptionsHelper -> public static Optional<Error> maybeError(final Throwable cause, final Logger logger);1535046779;Unwrap the specified throwable looking for any suppressed errors or errors as a root cause of the specified throwable.__@param cause the root throwable_@return an optional error if one is found suppressed or a root cause in the tree rooted at the specified throwable;public static Optional<Error> maybeError(final Throwable cause, final Logger logger) {_        _        if (cause instanceof Error) {_            return Optional.of((Error) cause)__        }__        final Queue<Throwable> queue = new LinkedList<>()__        queue.add(cause)__        int iterations = 0__        while (queue.isEmpty() == false) {_            iterations++__            _            if (iterations > MAX_ITERATIONS) {_                logger.warn("giving up looking for fatal errors", cause)__                break__            }_            final Throwable current = queue.remove()__            if (current instanceof Error) {_                return Optional.of((Error) current)__            }_            Collections.addAll(queue, current.getSuppressed())__            if (current.getCause() != null) {_                queue.add(current.getCause())__            }_        }_        return Optional.empty()__    };unwrap,the,specified,throwable,looking,for,any,suppressed,errors,or,errors,as,a,root,cause,of,the,specified,throwable,param,cause,the,root,throwable,return,an,optional,error,if,one,is,found,suppressed,or,a,root,cause,in,the,tree,rooted,at,the,specified,throwable;public,static,optional,error,maybe,error,final,throwable,cause,final,logger,logger,if,cause,instanceof,error,return,optional,of,error,cause,final,queue,throwable,queue,new,linked,list,queue,add,cause,int,iterations,0,while,queue,is,empty,false,iterations,if,iterations,logger,warn,giving,up,looking,for,fatal,errors,cause,break,final,throwable,current,queue,remove,if,current,instanceof,error,return,optional,of,error,current,collections,add,all,queue,current,get,suppressed,if,current,get,cause,null,queue,add,current,get,cause,return,optional,empty
ExceptionsHelper -> public static Optional<Error> maybeError(final Throwable cause, final Logger logger);1540486836;Unwrap the specified throwable looking for any suppressed errors or errors as a root cause of the specified throwable.__@param cause the root throwable_@return an optional error if one is found suppressed or a root cause in the tree rooted at the specified throwable;public static Optional<Error> maybeError(final Throwable cause, final Logger logger) {_        _        if (cause instanceof Error) {_            return Optional.of((Error) cause)__        }__        final Queue<Throwable> queue = new LinkedList<>()__        queue.add(cause)__        int iterations = 0__        while (queue.isEmpty() == false) {_            iterations++__            _            if (iterations > MAX_ITERATIONS) {_                logger.warn("giving up looking for fatal errors", cause)__                break__            }_            final Throwable current = queue.remove()__            if (current instanceof Error) {_                return Optional.of((Error) current)__            }_            Collections.addAll(queue, current.getSuppressed())__            if (current.getCause() != null) {_                queue.add(current.getCause())__            }_        }_        return Optional.empty()__    };unwrap,the,specified,throwable,looking,for,any,suppressed,errors,or,errors,as,a,root,cause,of,the,specified,throwable,param,cause,the,root,throwable,return,an,optional,error,if,one,is,found,suppressed,or,a,root,cause,in,the,tree,rooted,at,the,specified,throwable;public,static,optional,error,maybe,error,final,throwable,cause,final,logger,logger,if,cause,instanceof,error,return,optional,of,error,cause,final,queue,throwable,queue,new,linked,list,queue,add,cause,int,iterations,0,while,queue,is,empty,false,iterations,if,iterations,logger,warn,giving,up,looking,for,fatal,errors,cause,break,final,throwable,current,queue,remove,if,current,instanceof,error,return,optional,of,error,current,collections,add,all,queue,current,get,suppressed,if,current,get,cause,null,queue,add,current,get,cause,return,optional,empty
ExceptionsHelper -> public static Optional<Error> maybeError(final Throwable cause, final Logger logger);1547743595;Unwrap the specified throwable looking for any suppressed errors or errors as a root cause of the specified throwable.__@param cause the root throwable_@return an optional error if one is found suppressed or a root cause in the tree rooted at the specified throwable;public static Optional<Error> maybeError(final Throwable cause, final Logger logger) {_        _        if (cause instanceof Error) {_            return Optional.of((Error) cause)__        }__        final Queue<Throwable> queue = new LinkedList<>()__        queue.add(cause)__        int iterations = 0__        while (queue.isEmpty() == false) {_            iterations++__            _            if (iterations > MAX_ITERATIONS) {_                logger.warn("giving up looking for fatal errors", cause)__                break__            }_            final Throwable current = queue.remove()__            if (current instanceof Error) {_                return Optional.of((Error) current)__            }_            Collections.addAll(queue, current.getSuppressed())__            if (current.getCause() != null) {_                queue.add(current.getCause())__            }_        }_        return Optional.empty()__    };unwrap,the,specified,throwable,looking,for,any,suppressed,errors,or,errors,as,a,root,cause,of,the,specified,throwable,param,cause,the,root,throwable,return,an,optional,error,if,one,is,found,suppressed,or,a,root,cause,in,the,tree,rooted,at,the,specified,throwable;public,static,optional,error,maybe,error,final,throwable,cause,final,logger,logger,if,cause,instanceof,error,return,optional,of,error,cause,final,queue,throwable,queue,new,linked,list,queue,add,cause,int,iterations,0,while,queue,is,empty,false,iterations,if,iterations,logger,warn,giving,up,looking,for,fatal,errors,cause,break,final,throwable,current,queue,remove,if,current,instanceof,error,return,optional,of,error,current,collections,add,all,queue,current,get,suppressed,if,current,get,cause,null,queue,add,current,get,cause,return,optional,empty
ExceptionsHelper -> public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures);1524684173;Deduplicate the failures by exception message and index.;public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {_        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>()__        Set<GroupBy> reasons = new HashSet<>()__        for (ShardOperationFailedException failure : failures) {_            GroupBy reason = new GroupBy(failure.getCause())__            if (reasons.contains(reason) == false) {_                reasons.add(reason)__                uniqueFailures.add(failure)__            }_        }_        return uniqueFailures.toArray(new ShardOperationFailedException[0])__    };deduplicate,the,failures,by,exception,message,and,index;public,static,shard,operation,failed,exception,group,by,shard,operation,failed,exception,failures,list,shard,operation,failed,exception,unique,failures,new,array,list,set,group,by,reasons,new,hash,set,for,shard,operation,failed,exception,failure,failures,group,by,reason,new,group,by,failure,get,cause,if,reasons,contains,reason,false,reasons,add,reason,unique,failures,add,failure,return,unique,failures,to,array,new,shard,operation,failed,exception,0
ExceptionsHelper -> public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures);1526449283;Deduplicate the failures by exception message and index.;public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {_        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>()__        Set<GroupBy> reasons = new HashSet<>()__        for (ShardOperationFailedException failure : failures) {_            GroupBy reason = new GroupBy(failure.getCause())__            if (reasons.contains(reason) == false) {_                reasons.add(reason)__                uniqueFailures.add(failure)__            }_        }_        return uniqueFailures.toArray(new ShardOperationFailedException[0])__    };deduplicate,the,failures,by,exception,message,and,index;public,static,shard,operation,failed,exception,group,by,shard,operation,failed,exception,failures,list,shard,operation,failed,exception,unique,failures,new,array,list,set,group,by,reasons,new,hash,set,for,shard,operation,failed,exception,failure,failures,group,by,reason,new,group,by,failure,get,cause,if,reasons,contains,reason,false,reasons,add,reason,unique,failures,add,failure,return,unique,failures,to,array,new,shard,operation,failed,exception,0
ExceptionsHelper -> public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures);1533641732;Deduplicate the failures by exception message and index.;public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {_        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>()__        Set<GroupBy> reasons = new HashSet<>()__        for (ShardOperationFailedException failure : failures) {_            GroupBy reason = new GroupBy(failure)__            if (reasons.contains(reason) == false) {_                reasons.add(reason)__                uniqueFailures.add(failure)__            }_        }_        return uniqueFailures.toArray(new ShardOperationFailedException[0])__    };deduplicate,the,failures,by,exception,message,and,index;public,static,shard,operation,failed,exception,group,by,shard,operation,failed,exception,failures,list,shard,operation,failed,exception,unique,failures,new,array,list,set,group,by,reasons,new,hash,set,for,shard,operation,failed,exception,failure,failures,group,by,reason,new,group,by,failure,if,reasons,contains,reason,false,reasons,add,reason,unique,failures,add,failure,return,unique,failures,to,array,new,shard,operation,failed,exception,0
ExceptionsHelper -> public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures);1533738061;Deduplicate the failures by exception message and index.;public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {_        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>()__        Set<GroupBy> reasons = new HashSet<>()__        for (ShardOperationFailedException failure : failures) {_            GroupBy reason = new GroupBy(failure)__            if (reasons.contains(reason) == false) {_                reasons.add(reason)__                uniqueFailures.add(failure)__            }_        }_        return uniqueFailures.toArray(new ShardOperationFailedException[0])__    };deduplicate,the,failures,by,exception,message,and,index;public,static,shard,operation,failed,exception,group,by,shard,operation,failed,exception,failures,list,shard,operation,failed,exception,unique,failures,new,array,list,set,group,by,reasons,new,hash,set,for,shard,operation,failed,exception,failure,failures,group,by,reason,new,group,by,failure,if,reasons,contains,reason,false,reasons,add,reason,unique,failures,add,failure,return,unique,failures,to,array,new,shard,operation,failed,exception,0
ExceptionsHelper -> public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures);1534848846;Deduplicate the failures by exception message and index.;public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {_        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>()__        Set<GroupBy> reasons = new HashSet<>()__        for (ShardOperationFailedException failure : failures) {_            GroupBy reason = new GroupBy(failure)__            if (reasons.contains(reason) == false) {_                reasons.add(reason)__                uniqueFailures.add(failure)__            }_        }_        return uniqueFailures.toArray(new ShardOperationFailedException[0])__    };deduplicate,the,failures,by,exception,message,and,index;public,static,shard,operation,failed,exception,group,by,shard,operation,failed,exception,failures,list,shard,operation,failed,exception,unique,failures,new,array,list,set,group,by,reasons,new,hash,set,for,shard,operation,failed,exception,failure,failures,group,by,reason,new,group,by,failure,if,reasons,contains,reason,false,reasons,add,reason,unique,failures,add,failure,return,unique,failures,to,array,new,shard,operation,failed,exception,0
ExceptionsHelper -> public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures);1535046779;Deduplicate the failures by exception message and index.;public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {_        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>()__        Set<GroupBy> reasons = new HashSet<>()__        for (ShardOperationFailedException failure : failures) {_            GroupBy reason = new GroupBy(failure)__            if (reasons.contains(reason) == false) {_                reasons.add(reason)__                uniqueFailures.add(failure)__            }_        }_        return uniqueFailures.toArray(new ShardOperationFailedException[0])__    };deduplicate,the,failures,by,exception,message,and,index;public,static,shard,operation,failed,exception,group,by,shard,operation,failed,exception,failures,list,shard,operation,failed,exception,unique,failures,new,array,list,set,group,by,reasons,new,hash,set,for,shard,operation,failed,exception,failure,failures,group,by,reason,new,group,by,failure,if,reasons,contains,reason,false,reasons,add,reason,unique,failures,add,failure,return,unique,failures,to,array,new,shard,operation,failed,exception,0
ExceptionsHelper -> public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures);1540486836;Deduplicate the failures by exception message and index.;public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {_        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>()__        Set<GroupBy> reasons = new HashSet<>()__        for (ShardOperationFailedException failure : failures) {_            GroupBy reason = new GroupBy(failure)__            if (reasons.contains(reason) == false) {_                reasons.add(reason)__                uniqueFailures.add(failure)__            }_        }_        return uniqueFailures.toArray(new ShardOperationFailedException[0])__    };deduplicate,the,failures,by,exception,message,and,index;public,static,shard,operation,failed,exception,group,by,shard,operation,failed,exception,failures,list,shard,operation,failed,exception,unique,failures,new,array,list,set,group,by,reasons,new,hash,set,for,shard,operation,failed,exception,failure,failures,group,by,reason,new,group,by,failure,if,reasons,contains,reason,false,reasons,add,reason,unique,failures,add,failure,return,unique,failures,to,array,new,shard,operation,failed,exception,0
ExceptionsHelper -> public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures);1547743595;Deduplicate the failures by exception message and index.;public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {_        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>()__        Set<GroupBy> reasons = new HashSet<>()__        for (ShardOperationFailedException failure : failures) {_            GroupBy reason = new GroupBy(failure)__            if (reasons.contains(reason) == false) {_                reasons.add(reason)__                uniqueFailures.add(failure)__            }_        }_        return uniqueFailures.toArray(new ShardOperationFailedException[0])__    };deduplicate,the,failures,by,exception,message,and,index;public,static,shard,operation,failed,exception,group,by,shard,operation,failed,exception,failures,list,shard,operation,failed,exception,unique,failures,new,array,list,set,group,by,reasons,new,hash,set,for,shard,operation,failed,exception,failure,failures,group,by,reason,new,group,by,failure,if,reasons,contains,reason,false,reasons,add,reason,unique,failures,add,failure,return,unique,failures,to,array,new,shard,operation,failed,exception,0
ExceptionsHelper -> public static void dieOnError(Throwable throwable);1526449283;If the specified cause is an unrecoverable error, this method will rethrow the cause on a separate thread so that it can not be_caught and bubbles up to the uncaught exception handler.__@param throwable the throwable to test;public static void dieOnError(Throwable throwable) {_        final Optional<Error> maybeError = ExceptionsHelper.maybeError(throwable, logger)__        if (maybeError.isPresent()) {_            _            try {_                _                final String formatted = ExceptionsHelper.formatStackTrace(Thread.currentThread().getStackTrace())__                logger.error("fatal error\n{}", formatted)__            } finally {_                new Thread(_                    () -> {_                        throw maybeError.get()__                    })_                    .start()__            }_        }_    };if,the,specified,cause,is,an,unrecoverable,error,this,method,will,rethrow,the,cause,on,a,separate,thread,so,that,it,can,not,be,caught,and,bubbles,up,to,the,uncaught,exception,handler,param,throwable,the,throwable,to,test;public,static,void,die,on,error,throwable,throwable,final,optional,error,maybe,error,exceptions,helper,maybe,error,throwable,logger,if,maybe,error,is,present,try,final,string,formatted,exceptions,helper,format,stack,trace,thread,current,thread,get,stack,trace,logger,error,fatal,error,n,formatted,finally,new,thread,throw,maybe,error,get,start
ExceptionsHelper -> public static void dieOnError(Throwable throwable);1533641732;If the specified cause is an unrecoverable error, this method will rethrow the cause on a separate thread so that it can not be_caught and bubbles up to the uncaught exception handler.__@param throwable the throwable to test;public static void dieOnError(Throwable throwable) {_        final Optional<Error> maybeError = ExceptionsHelper.maybeError(throwable, logger)__        if (maybeError.isPresent()) {_            _            try {_                _                final String formatted = ExceptionsHelper.formatStackTrace(Thread.currentThread().getStackTrace())__                logger.error("fatal error\n{}", formatted)__            } finally {_                new Thread(_                    () -> {_                        throw maybeError.get()__                    })_                    .start()__            }_        }_    };if,the,specified,cause,is,an,unrecoverable,error,this,method,will,rethrow,the,cause,on,a,separate,thread,so,that,it,can,not,be,caught,and,bubbles,up,to,the,uncaught,exception,handler,param,throwable,the,throwable,to,test;public,static,void,die,on,error,throwable,throwable,final,optional,error,maybe,error,exceptions,helper,maybe,error,throwable,logger,if,maybe,error,is,present,try,final,string,formatted,exceptions,helper,format,stack,trace,thread,current,thread,get,stack,trace,logger,error,fatal,error,n,formatted,finally,new,thread,throw,maybe,error,get,start
ExceptionsHelper -> public static void dieOnError(Throwable throwable);1533738061;If the specified cause is an unrecoverable error, this method will rethrow the cause on a separate thread so that it can not be_caught and bubbles up to the uncaught exception handler.__@param throwable the throwable to test;public static void dieOnError(Throwable throwable) {_        final Optional<Error> maybeError = ExceptionsHelper.maybeError(throwable, logger)__        if (maybeError.isPresent()) {_            _            try {_                _                final String formatted = ExceptionsHelper.formatStackTrace(Thread.currentThread().getStackTrace())__                logger.error("fatal error\n{}", formatted)__            } finally {_                new Thread(_                    () -> {_                        throw maybeError.get()__                    })_                    .start()__            }_        }_    };if,the,specified,cause,is,an,unrecoverable,error,this,method,will,rethrow,the,cause,on,a,separate,thread,so,that,it,can,not,be,caught,and,bubbles,up,to,the,uncaught,exception,handler,param,throwable,the,throwable,to,test;public,static,void,die,on,error,throwable,throwable,final,optional,error,maybe,error,exceptions,helper,maybe,error,throwable,logger,if,maybe,error,is,present,try,final,string,formatted,exceptions,helper,format,stack,trace,thread,current,thread,get,stack,trace,logger,error,fatal,error,n,formatted,finally,new,thread,throw,maybe,error,get,start
ExceptionsHelper -> public static void dieOnError(Throwable throwable);1534848846;If the specified cause is an unrecoverable error, this method will rethrow the cause on a separate thread so that it can not be_caught and bubbles up to the uncaught exception handler.__@param throwable the throwable to test;public static void dieOnError(Throwable throwable) {_        ExceptionsHelper.maybeError(throwable, logger).ifPresent(error -> {_            _            try {_                _                final String formatted = ExceptionsHelper.formatStackTrace(Thread.currentThread().getStackTrace())__                logger.error("fatal error\n{}", formatted)__            } finally {_                new Thread(_                        () -> {_                            throw error__                        })_                        .start()__            }_        })__    };if,the,specified,cause,is,an,unrecoverable,error,this,method,will,rethrow,the,cause,on,a,separate,thread,so,that,it,can,not,be,caught,and,bubbles,up,to,the,uncaught,exception,handler,param,throwable,the,throwable,to,test;public,static,void,die,on,error,throwable,throwable,exceptions,helper,maybe,error,throwable,logger,if,present,error,try,final,string,formatted,exceptions,helper,format,stack,trace,thread,current,thread,get,stack,trace,logger,error,fatal,error,n,formatted,finally,new,thread,throw,error,start
ExceptionsHelper -> @Deprecated     public static String detailedMessage(Throwable t);1524684173;@deprecated Don't swallow exceptions, allow them to propagate.;@Deprecated_    public static String detailedMessage(Throwable t) {_        if (t == null) {_            return "Unknown"__        }_        if (t.getCause() != null) {_            StringBuilder sb = new StringBuilder()__            while (t != null) {_                sb.append(t.getClass().getSimpleName())__                if (t.getMessage() != null) {_                    sb.append("[")__                    sb.append(t.getMessage())__                    sb.append("]")__                }_                sb.append("_ ")__                t = t.getCause()__                if (t != null) {_                    sb.append("nested: ")__                }_            }_            return sb.toString()__        } else {_            return t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__        }_    };deprecated,don,t,swallow,exceptions,allow,them,to,propagate;deprecated,public,static,string,detailed,message,throwable,t,if,t,null,return,unknown,if,t,get,cause,null,string,builder,sb,new,string,builder,while,t,null,sb,append,t,get,class,get,simple,name,if,t,get,message,null,sb,append,sb,append,t,get,message,sb,append,sb,append,t,t,get,cause,if,t,null,sb,append,nested,return,sb,to,string,else,return,t,get,class,get,simple,name,t,get,message
ExceptionsHelper -> @Deprecated     public static String detailedMessage(Throwable t);1526449283;@deprecated Don't swallow exceptions, allow them to propagate.;@Deprecated_    public static String detailedMessage(Throwable t) {_        if (t == null) {_            return "Unknown"__        }_        if (t.getCause() != null) {_            StringBuilder sb = new StringBuilder()__            while (t != null) {_                sb.append(t.getClass().getSimpleName())__                if (t.getMessage() != null) {_                    sb.append("[")__                    sb.append(t.getMessage())__                    sb.append("]")__                }_                sb.append("_ ")__                t = t.getCause()__                if (t != null) {_                    sb.append("nested: ")__                }_            }_            return sb.toString()__        } else {_            return t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__        }_    };deprecated,don,t,swallow,exceptions,allow,them,to,propagate;deprecated,public,static,string,detailed,message,throwable,t,if,t,null,return,unknown,if,t,get,cause,null,string,builder,sb,new,string,builder,while,t,null,sb,append,t,get,class,get,simple,name,if,t,get,message,null,sb,append,sb,append,t,get,message,sb,append,sb,append,t,t,get,cause,if,t,null,sb,append,nested,return,sb,to,string,else,return,t,get,class,get,simple,name,t,get,message
ExceptionsHelper -> @Deprecated     public static String detailedMessage(Throwable t);1533641732;@deprecated Don't swallow exceptions, allow them to propagate.;@Deprecated_    public static String detailedMessage(Throwable t) {_        if (t == null) {_            return "Unknown"__        }_        if (t.getCause() != null) {_            StringBuilder sb = new StringBuilder()__            while (t != null) {_                sb.append(t.getClass().getSimpleName())__                if (t.getMessage() != null) {_                    sb.append("[")__                    sb.append(t.getMessage())__                    sb.append("]")__                }_                sb.append("_ ")__                t = t.getCause()__                if (t != null) {_                    sb.append("nested: ")__                }_            }_            return sb.toString()__        } else {_            return t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__        }_    };deprecated,don,t,swallow,exceptions,allow,them,to,propagate;deprecated,public,static,string,detailed,message,throwable,t,if,t,null,return,unknown,if,t,get,cause,null,string,builder,sb,new,string,builder,while,t,null,sb,append,t,get,class,get,simple,name,if,t,get,message,null,sb,append,sb,append,t,get,message,sb,append,sb,append,t,t,get,cause,if,t,null,sb,append,nested,return,sb,to,string,else,return,t,get,class,get,simple,name,t,get,message
ExceptionsHelper -> @Deprecated     public static String detailedMessage(Throwable t);1533738061;@deprecated Don't swallow exceptions, allow them to propagate.;@Deprecated_    public static String detailedMessage(Throwable t) {_        if (t == null) {_            return "Unknown"__        }_        if (t.getCause() != null) {_            StringBuilder sb = new StringBuilder()__            while (t != null) {_                sb.append(t.getClass().getSimpleName())__                if (t.getMessage() != null) {_                    sb.append("[")__                    sb.append(t.getMessage())__                    sb.append("]")__                }_                sb.append("_ ")__                t = t.getCause()__                if (t != null) {_                    sb.append("nested: ")__                }_            }_            return sb.toString()__        } else {_            return t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__        }_    };deprecated,don,t,swallow,exceptions,allow,them,to,propagate;deprecated,public,static,string,detailed,message,throwable,t,if,t,null,return,unknown,if,t,get,cause,null,string,builder,sb,new,string,builder,while,t,null,sb,append,t,get,class,get,simple,name,if,t,get,message,null,sb,append,sb,append,t,get,message,sb,append,sb,append,t,t,get,cause,if,t,null,sb,append,nested,return,sb,to,string,else,return,t,get,class,get,simple,name,t,get,message
ExceptionsHelper -> @Deprecated     public static String detailedMessage(Throwable t);1534848846;@deprecated Don't swallow exceptions, allow them to propagate.;@Deprecated_    public static String detailedMessage(Throwable t) {_        if (t == null) {_            return "Unknown"__        }_        if (t.getCause() != null) {_            StringBuilder sb = new StringBuilder()__            while (t != null) {_                sb.append(t.getClass().getSimpleName())__                if (t.getMessage() != null) {_                    sb.append("[")__                    sb.append(t.getMessage())__                    sb.append("]")__                }_                sb.append("_ ")__                t = t.getCause()__                if (t != null) {_                    sb.append("nested: ")__                }_            }_            return sb.toString()__        } else {_            return t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__        }_    };deprecated,don,t,swallow,exceptions,allow,them,to,propagate;deprecated,public,static,string,detailed,message,throwable,t,if,t,null,return,unknown,if,t,get,cause,null,string,builder,sb,new,string,builder,while,t,null,sb,append,t,get,class,get,simple,name,if,t,get,message,null,sb,append,sb,append,t,get,message,sb,append,sb,append,t,t,get,cause,if,t,null,sb,append,nested,return,sb,to,string,else,return,t,get,class,get,simple,name,t,get,message
ExceptionsHelper -> @Deprecated     public static String detailedMessage(Throwable t);1535046779;@deprecated Don't swallow exceptions, allow them to propagate.;@Deprecated_    public static String detailedMessage(Throwable t) {_        if (t == null) {_            return "Unknown"__        }_        if (t.getCause() != null) {_            StringBuilder sb = new StringBuilder()__            while (t != null) {_                sb.append(t.getClass().getSimpleName())__                if (t.getMessage() != null) {_                    sb.append("[")__                    sb.append(t.getMessage())__                    sb.append("]")__                }_                sb.append("_ ")__                t = t.getCause()__                if (t != null) {_                    sb.append("nested: ")__                }_            }_            return sb.toString()__        } else {_            return t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__        }_    };deprecated,don,t,swallow,exceptions,allow,them,to,propagate;deprecated,public,static,string,detailed,message,throwable,t,if,t,null,return,unknown,if,t,get,cause,null,string,builder,sb,new,string,builder,while,t,null,sb,append,t,get,class,get,simple,name,if,t,get,message,null,sb,append,sb,append,t,get,message,sb,append,sb,append,t,t,get,cause,if,t,null,sb,append,nested,return,sb,to,string,else,return,t,get,class,get,simple,name,t,get,message
ExceptionsHelper -> @Deprecated     public static String detailedMessage(Throwable t);1540486836;@deprecated Don't swallow exceptions, allow them to propagate.;@Deprecated_    public static String detailedMessage(Throwable t) {_        if (t == null) {_            return "Unknown"__        }_        if (t.getCause() != null) {_            StringBuilder sb = new StringBuilder()__            while (t != null) {_                sb.append(t.getClass().getSimpleName())__                if (t.getMessage() != null) {_                    sb.append("[")__                    sb.append(t.getMessage())__                    sb.append("]")__                }_                sb.append("_ ")__                t = t.getCause()__                if (t != null) {_                    sb.append("nested: ")__                }_            }_            return sb.toString()__        } else {_            return t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__        }_    };deprecated,don,t,swallow,exceptions,allow,them,to,propagate;deprecated,public,static,string,detailed,message,throwable,t,if,t,null,return,unknown,if,t,get,cause,null,string,builder,sb,new,string,builder,while,t,null,sb,append,t,get,class,get,simple,name,if,t,get,message,null,sb,append,sb,append,t,get,message,sb,append,sb,append,t,t,get,cause,if,t,null,sb,append,nested,return,sb,to,string,else,return,t,get,class,get,simple,name,t,get,message
ExceptionsHelper -> @Deprecated     public static String detailedMessage(Throwable t);1547743595;@deprecated Don't swallow exceptions, allow them to propagate.;@Deprecated_    public static String detailedMessage(Throwable t) {_        if (t == null) {_            return "Unknown"__        }_        if (t.getCause() != null) {_            StringBuilder sb = new StringBuilder()__            while (t != null) {_                sb.append(t.getClass().getSimpleName())__                if (t.getMessage() != null) {_                    sb.append("[")__                    sb.append(t.getMessage())__                    sb.append("]")__                }_                sb.append("_ ")__                t = t.getCause()__                if (t != null) {_                    sb.append("nested: ")__                }_            }_            return sb.toString()__        } else {_            return t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__        }_    };deprecated,don,t,swallow,exceptions,allow,them,to,propagate;deprecated,public,static,string,detailed,message,throwable,t,if,t,null,return,unknown,if,t,get,cause,null,string,builder,sb,new,string,builder,while,t,null,sb,append,t,get,class,get,simple,name,if,t,get,message,null,sb,append,sb,append,t,get,message,sb,append,sb,append,t,t,get,cause,if,t,null,sb,append,nested,return,sb,to,string,else,return,t,get,class,get,simple,name,t,get,message
ExceptionsHelper -> public static void maybeDieOnAnotherThread(final Throwable throwable);1535046779;If the specified cause is an unrecoverable error, this method will rethrow the cause on a separate thread so that it can not be_caught and bubbles up to the uncaught exception handler. Note that the cause tree is examined for any {@link Error}. See_{@link #maybeError(Throwable, Logger)} for the semantics.__@param throwable the throwable to possibly throw on another thread;public static void maybeDieOnAnotherThread(final Throwable throwable) {_        ExceptionsHelper.maybeError(throwable, logger).ifPresent(error -> {_            _            try {_                _                final String formatted = ExceptionsHelper.formatStackTrace(Thread.currentThread().getStackTrace())__                logger.error("fatal error\n{}", formatted)__            } finally {_                new Thread(_                        () -> {_                            throw error__                        })_                        .start()__            }_        })__    };if,the,specified,cause,is,an,unrecoverable,error,this,method,will,rethrow,the,cause,on,a,separate,thread,so,that,it,can,not,be,caught,and,bubbles,up,to,the,uncaught,exception,handler,note,that,the,cause,tree,is,examined,for,any,link,error,see,link,maybe,error,throwable,logger,for,the,semantics,param,throwable,the,throwable,to,possibly,throw,on,another,thread;public,static,void,maybe,die,on,another,thread,final,throwable,throwable,exceptions,helper,maybe,error,throwable,logger,if,present,error,try,final,string,formatted,exceptions,helper,format,stack,trace,thread,current,thread,get,stack,trace,logger,error,fatal,error,n,formatted,finally,new,thread,throw,error,start
ExceptionsHelper -> public static void maybeDieOnAnotherThread(final Throwable throwable);1540486836;If the specified cause is an unrecoverable error, this method will rethrow the cause on a separate thread so that it can not be_caught and bubbles up to the uncaught exception handler. Note that the cause tree is examined for any {@link Error}. See_{@link #maybeError(Throwable, Logger)} for the semantics.__@param throwable the throwable to possibly throw on another thread;public static void maybeDieOnAnotherThread(final Throwable throwable) {_        ExceptionsHelper.maybeError(throwable, logger).ifPresent(error -> {_            _            try {_                _                final String formatted = ExceptionsHelper.formatStackTrace(Thread.currentThread().getStackTrace())__                logger.error("fatal error\n{}", formatted)__            } finally {_                new Thread(_                        () -> {_                            throw error__                        })_                        .start()__            }_        })__    };if,the,specified,cause,is,an,unrecoverable,error,this,method,will,rethrow,the,cause,on,a,separate,thread,so,that,it,can,not,be,caught,and,bubbles,up,to,the,uncaught,exception,handler,note,that,the,cause,tree,is,examined,for,any,link,error,see,link,maybe,error,throwable,logger,for,the,semantics,param,throwable,the,throwable,to,possibly,throw,on,another,thread;public,static,void,maybe,die,on,another,thread,final,throwable,throwable,exceptions,helper,maybe,error,throwable,logger,if,present,error,try,final,string,formatted,exceptions,helper,format,stack,trace,thread,current,thread,get,stack,trace,logger,error,fatal,error,n,formatted,finally,new,thread,throw,error,start
ExceptionsHelper -> public static void maybeDieOnAnotherThread(final Throwable throwable);1547743595;If the specified cause is an unrecoverable error, this method will rethrow the cause on a separate thread so that it can not be_caught and bubbles up to the uncaught exception handler. Note that the cause tree is examined for any {@link Error}. See_{@link #maybeError(Throwable, Logger)} for the semantics.__@param throwable the throwable to possibly throw on another thread;public static void maybeDieOnAnotherThread(final Throwable throwable) {_        ExceptionsHelper.maybeError(throwable, logger).ifPresent(error -> {_            _            try {_                _                final String formatted = ExceptionsHelper.formatStackTrace(Thread.currentThread().getStackTrace())__                logger.error("fatal error\n{}", formatted)__            } finally {_                new Thread(_                        () -> {_                            throw error__                        })_                        .start()__            }_        })__    };if,the,specified,cause,is,an,unrecoverable,error,this,method,will,rethrow,the,cause,on,a,separate,thread,so,that,it,can,not,be,caught,and,bubbles,up,to,the,uncaught,exception,handler,note,that,the,cause,tree,is,examined,for,any,link,error,see,link,maybe,error,throwable,logger,for,the,semantics,param,throwable,the,throwable,to,possibly,throw,on,another,thread;public,static,void,maybe,die,on,another,thread,final,throwable,throwable,exceptions,helper,maybe,error,throwable,logger,if,present,error,try,final,string,formatted,exceptions,helper,format,stack,trace,thread,current,thread,get,stack,trace,logger,error,fatal,error,n,formatted,finally,new,thread,throw,error,start
