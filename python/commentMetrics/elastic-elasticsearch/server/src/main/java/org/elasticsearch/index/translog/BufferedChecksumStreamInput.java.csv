commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long getChecksum() {     return this.digest.getValue(). }
false;public;0;6;;@Override public byte readByte() throws IOException {     final byte b = delegate.readByte().     digest.update(b).     return b. }
false;public;3;5;;@Override public void readBytes(byte[] b, int offset, int len) throws IOException {     delegate.readBytes(b, offset, len).     digest.update(b, offset, len). }
false;public;0;5;;@Override public void reset() throws IOException {     delegate.reset().     digest.reset(). }
false;public;0;4;;@Override public int read() throws IOException {     return readByte() & 0xFF. }
false;public;0;4;;@Override public boolean markSupported() {     return delegate.markSupported(). }
false;public;1;17;;@Override public long skip(long numBytes) throws IOException {     if (numBytes < 0) {         throw new IllegalArgumentException("numBytes must be >= 0, got " + numBytes).     }     if (skipBuffer == null) {         skipBuffer = new byte[SKIP_BUFFER_SIZE].     }     assert skipBuffer.length == SKIP_BUFFER_SIZE.     long skipped = 0.     for (. skipped < numBytes. ) {         final int step = (int) Math.min(SKIP_BUFFER_SIZE, numBytes - skipped).         readBytes(skipBuffer, 0, step).         skipped += step.     }     return skipped. }
false;public,synchronized;1;4;;@Override public synchronized void mark(int readlimit) {     delegate.mark(readlimit). }
false;public;0;3;;public void resetDigest() {     digest.reset(). }
false;public;0;3;;public String getSource() {     return source. }
