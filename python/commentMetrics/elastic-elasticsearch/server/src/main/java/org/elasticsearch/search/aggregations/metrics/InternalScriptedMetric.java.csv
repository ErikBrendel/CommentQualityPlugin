commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeOptionalWriteable(reduceScript).     out.writeGenericValue(aggregation()). }
false;public;0;4;;@Override public String getWriteableName() {     return ScriptedMetricAggregationBuilder.NAME. }
false;public;0;7;;@Override public Object aggregation() {     if (aggregation.size() != 1) {         throw new IllegalStateException("aggregation was not reduced").     }     return aggregation.get(0). }
false;;0;3;;List<Object> getAggregation() {     return aggregation. }
false;public;2;33;;@Override public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {     List<Object> aggregationObjects = new ArrayList<>().     for (InternalAggregation aggregation : aggregations) {         InternalScriptedMetric mapReduceAggregation = (InternalScriptedMetric) aggregation.         aggregationObjects.addAll(mapReduceAggregation.aggregation).     }     InternalScriptedMetric firstAggregation = ((InternalScriptedMetric) aggregations.get(0)).     List<Object> aggregation.     if (firstAggregation.reduceScript != null && reduceContext.isFinalReduce()) {         Map<String, Object> params = new HashMap<>().         if (firstAggregation.reduceScript.getParams() != null) {             params.putAll(firstAggregation.reduceScript.getParams()).         }         ScriptedMetricAggContexts.ReduceScript.Factory factory = reduceContext.scriptService().compile(firstAggregation.reduceScript, ScriptedMetricAggContexts.ReduceScript.CONTEXT).         ScriptedMetricAggContexts.ReduceScript script = factory.newInstance(params, aggregationObjects).         Object scriptResult = script.execute().         CollectionUtils.ensureNoSelfReferences(scriptResult, "reduce script").         aggregation = Collections.singletonList(scriptResult).     } else if (reduceContext.isFinalReduce()) {         aggregation = Collections.singletonList(aggregationObjects).     } else {         // if we are not an final reduce we have to maintain all the aggs from all the incoming one         // until we hit the final reduce phase.         aggregation = aggregationObjects.     }     return new InternalScriptedMetric(firstAggregation.getName(), aggregation, firstAggregation.reduceScript, pipelineAggregators(), getMetaData()). }
false;public;1;10;;@Override public Object getProperty(List<String> path) {     if (path.isEmpty()) {         return this.     } else if (path.size() == 1 && "value".equals(path.get(0))) {         return aggregation().     } else {         throw new IllegalArgumentException("path not supported for [" + getName() + "]: " + path).     } }
false;public;2;4;;@Override public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     return builder.field(CommonFields.VALUE.getPreferredName(), aggregation()). }
false;protected;1;6;;@Override protected boolean doEquals(Object obj) {     InternalScriptedMetric other = (InternalScriptedMetric) obj.     return Objects.equals(reduceScript, other.reduceScript) && Objects.equals(aggregation, other.aggregation). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(reduceScript, aggregation). }
