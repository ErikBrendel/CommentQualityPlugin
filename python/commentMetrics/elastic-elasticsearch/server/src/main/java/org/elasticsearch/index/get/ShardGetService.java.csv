# id;timestamp;commentText;codeText;commentWords;codeWords
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1524684173;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1525334055;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1527583663;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1528706846;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1531937412;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1542697754;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1543947737;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1545056533;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1548771485;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields);1549396415;decides what needs to be done based on the request input and always returns a valid non-null FetchSourceContext;private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context, @Nullable String[] gFields) {_        if (context != null) {_            return context__        }_        if (gFields == null) {_            return FetchSourceContext.FETCH_SOURCE__        }_        for (String field : gFields) {_            if (SourceFieldMapper.NAME.equals(field)) {_                return FetchSourceContext.FETCH_SOURCE__            }_        }_        return FetchSourceContext.DO_NOT_FETCH_SOURCE__    };decides,what,needs,to,be,done,based,on,the,request,input,and,always,returns,a,valid,non,null,fetch,source,context;private,fetch,source,context,normalize,fetch,source,content,nullable,fetch,source,context,context,nullable,string,g,fields,if,context,null,return,context,if,g,fields,null,return,fetch,source,context,for,string,field,g,fields,if,source,field,mapper,name,equals,field,return,fetch,source,context,return,fetch,source,context
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type,                             String[] fields, FetchSourceContext fetchSourceContext);1542697754;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type,_                            String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type,                             String[] fields, FetchSourceContext fetchSourceContext);1543947737;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type,_                            String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type,                             String[] fields, FetchSourceContext fetchSourceContext);1545056533;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type,_                            String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, SequenceNumbers.UNASSIGNED_SEQ_NO, 0, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,sequence,numbers,0,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type,                             String[] fields, FetchSourceContext fetchSourceContext);1548771485;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type,_                            String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, UNASSIGNED_SEQ_NO, UNASSIGNED_PRIMARY_TERM, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type,                             String[] fields, FetchSourceContext fetchSourceContext);1549396415;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type,_                            String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, UNASSIGNED_SEQ_NO, UNASSIGNED_PRIMARY_TERM, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext);1524684173;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext);1525334055;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext);1527583663;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext);1528706846;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
ShardGetService -> public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext);1531937412;Returns {@link GetResult} based on the specified {@link org.elasticsearch.index.engine.Engine.GetResult} argument._This method basically loads specified fields for the associated document in the engineGetResult._This method load the fields from the Lucene index and not from transaction log and therefore isn't realtime._<p>_Note: Call <b>must</b> release engine searcher associated with engineGetResult!;public GetResult get(Engine.GetResult engineGetResult, String id, String type, String[] fields, FetchSourceContext fetchSourceContext) {_        if (!engineGetResult.exists()) {_            return new GetResult(shardId.getIndexName(), type, id, -1, false, null, null)__        }__        currentMetric.inc()__        try {_            long now = System.nanoTime()__            fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, fields)__            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService)__            if (getResult.isExists()) {_                existsMetric.inc(System.nanoTime() - now)__            } else {_                missingMetric.inc(System.nanoTime() - now)_ _            }_            return getResult__        } finally {_            currentMetric.dec()__        }_    };returns,link,get,result,based,on,the,specified,link,org,elasticsearch,index,engine,engine,get,result,argument,this,method,basically,loads,specified,fields,for,the,associated,document,in,the,engine,get,result,this,method,load,the,fields,from,the,lucene,index,and,not,from,transaction,log,and,therefore,isn,t,realtime,p,note,call,b,must,b,release,engine,searcher,associated,with,engine,get,result;public,get,result,get,engine,get,result,engine,get,result,string,id,string,type,string,fields,fetch,source,context,fetch,source,context,if,engine,get,result,exists,return,new,get,result,shard,id,get,index,name,type,id,1,false,null,null,current,metric,inc,try,long,now,system,nano,time,fetch,source,context,normalize,fetch,source,content,fetch,source,context,fields,get,result,get,result,inner,get,load,from,stored,fields,type,id,fields,fetch,source,context,engine,get,result,mapper,service,if,get,result,is,exists,exists,metric,inc,system,nano,time,now,else,missing,metric,inc,system,nano,time,now,return,get,result,finally,current,metric,dec
