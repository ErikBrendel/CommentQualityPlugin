# id;timestamp;commentText;codeText;commentWords;codeWords
TermSuggestionBuilder -> public SuggestMode suggestMode();1524684173;Get the suggest mode setting.;public SuggestMode suggestMode() {_        return suggestMode__    };get,the,suggest,mode,setting;public,suggest,mode,suggest,mode,return,suggest,mode
TermSuggestionBuilder -> public SuggestMode suggestMode();1525334055;Get the suggest mode setting.;public SuggestMode suggestMode() {_        return suggestMode__    };get,the,suggest,mode,setting;public,suggest,mode,suggest,mode,return,suggest,mode
TermSuggestionBuilder -> public SuggestMode suggestMode();1533738061;Get the suggest mode setting.;public SuggestMode suggestMode() {_        return suggestMode__    };get,the,suggest,mode,setting;public,suggest,mode,suggest,mode,return,suggest,mode
TermSuggestionBuilder -> public SuggestMode suggestMode();1536314350;Get the suggest mode setting.;public SuggestMode suggestMode() {_        return suggestMode__    };get,the,suggest,mode,setting;public,suggest,mode,suggest,mode,return,suggest,mode
TermSuggestionBuilder -> public TermSuggestionBuilder maxTermFreq(float maxTermFreq);1524684173;Sets a maximum threshold in number of documents a suggest text token can_exist in order to be corrected. Can be a relative percentage number (e.g_0.4) or an absolute number to represent document frequencies. If an value_higher than 1 is specified then fractional can not be specified. Defaults_to <tt>0.01</tt>._<p>_This can be used to exclude high frequency terms from being suggested._High frequency terms are usually spelled correctly on top of this this_also improves the suggest performance.;public TermSuggestionBuilder maxTermFreq(float maxTermFreq) {_        if (maxTermFreq < 0.0f) {_            throw new IllegalArgumentException("maxTermFreq must be positive")__        }_        if (maxTermFreq > 1.0f && maxTermFreq != Math.floor(maxTermFreq)) {_            throw new IllegalArgumentException("if maxTermFreq is greater than 1, it must not be a fraction")__        }_        this.maxTermFreq = maxTermFreq__        return this__    };sets,a,maximum,threshold,in,number,of,documents,a,suggest,text,token,can,exist,in,order,to,be,corrected,can,be,a,relative,percentage,number,e,g,0,4,or,an,absolute,number,to,represent,document,frequencies,if,an,value,higher,than,1,is,specified,then,fractional,can,not,be,specified,defaults,to,tt,0,01,tt,p,this,can,be,used,to,exclude,high,frequency,terms,from,being,suggested,high,frequency,terms,are,usually,spelled,correctly,on,top,of,this,this,also,improves,the,suggest,performance;public,term,suggestion,builder,max,term,freq,float,max,term,freq,if,max,term,freq,0,0f,throw,new,illegal,argument,exception,max,term,freq,must,be,positive,if,max,term,freq,1,0f,max,term,freq,math,floor,max,term,freq,throw,new,illegal,argument,exception,if,max,term,freq,is,greater,than,1,it,must,not,be,a,fraction,this,max,term,freq,max,term,freq,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxTermFreq(float maxTermFreq);1525334055;Sets a maximum threshold in number of documents a suggest text token can_exist in order to be corrected. Can be a relative percentage number (e.g_0.4) or an absolute number to represent document frequencies. If an value_higher than 1 is specified then fractional can not be specified. Defaults_to {@code 0.01}._<p>_This can be used to exclude high frequency terms from being suggested._High frequency terms are usually spelled correctly on top of this this_also improves the suggest performance.;public TermSuggestionBuilder maxTermFreq(float maxTermFreq) {_        if (maxTermFreq < 0.0f) {_            throw new IllegalArgumentException("maxTermFreq must be positive")__        }_        if (maxTermFreq > 1.0f && maxTermFreq != Math.floor(maxTermFreq)) {_            throw new IllegalArgumentException("if maxTermFreq is greater than 1, it must not be a fraction")__        }_        this.maxTermFreq = maxTermFreq__        return this__    };sets,a,maximum,threshold,in,number,of,documents,a,suggest,text,token,can,exist,in,order,to,be,corrected,can,be,a,relative,percentage,number,e,g,0,4,or,an,absolute,number,to,represent,document,frequencies,if,an,value,higher,than,1,is,specified,then,fractional,can,not,be,specified,defaults,to,code,0,01,p,this,can,be,used,to,exclude,high,frequency,terms,from,being,suggested,high,frequency,terms,are,usually,spelled,correctly,on,top,of,this,this,also,improves,the,suggest,performance;public,term,suggestion,builder,max,term,freq,float,max,term,freq,if,max,term,freq,0,0f,throw,new,illegal,argument,exception,max,term,freq,must,be,positive,if,max,term,freq,1,0f,max,term,freq,math,floor,max,term,freq,throw,new,illegal,argument,exception,if,max,term,freq,is,greater,than,1,it,must,not,be,a,fraction,this,max,term,freq,max,term,freq,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxTermFreq(float maxTermFreq);1533738061;Sets a maximum threshold in number of documents a suggest text token can_exist in order to be corrected. Can be a relative percentage number (e.g_0.4) or an absolute number to represent document frequencies. If an value_higher than 1 is specified then fractional can not be specified. Defaults_to {@code 0.01}._<p>_This can be used to exclude high frequency terms from being suggested._High frequency terms are usually spelled correctly on top of this this_also improves the suggest performance.;public TermSuggestionBuilder maxTermFreq(float maxTermFreq) {_        if (maxTermFreq < 0.0f) {_            throw new IllegalArgumentException("maxTermFreq must be positive")__        }_        if (maxTermFreq > 1.0f && maxTermFreq != Math.floor(maxTermFreq)) {_            throw new IllegalArgumentException("if maxTermFreq is greater than 1, it must not be a fraction")__        }_        this.maxTermFreq = maxTermFreq__        return this__    };sets,a,maximum,threshold,in,number,of,documents,a,suggest,text,token,can,exist,in,order,to,be,corrected,can,be,a,relative,percentage,number,e,g,0,4,or,an,absolute,number,to,represent,document,frequencies,if,an,value,higher,than,1,is,specified,then,fractional,can,not,be,specified,defaults,to,code,0,01,p,this,can,be,used,to,exclude,high,frequency,terms,from,being,suggested,high,frequency,terms,are,usually,spelled,correctly,on,top,of,this,this,also,improves,the,suggest,performance;public,term,suggestion,builder,max,term,freq,float,max,term,freq,if,max,term,freq,0,0f,throw,new,illegal,argument,exception,max,term,freq,must,be,positive,if,max,term,freq,1,0f,max,term,freq,math,floor,max,term,freq,throw,new,illegal,argument,exception,if,max,term,freq,is,greater,than,1,it,must,not,be,a,fraction,this,max,term,freq,max,term,freq,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxTermFreq(float maxTermFreq);1536314350;Sets a maximum threshold in number of documents a suggest text token can_exist in order to be corrected. Can be a relative percentage number (e.g_0.4) or an absolute number to represent document frequencies. If an value_higher than 1 is specified then fractional can not be specified. Defaults_to {@code 0.01}._<p>_This can be used to exclude high frequency terms from being suggested._High frequency terms are usually spelled correctly on top of this this_also improves the suggest performance.;public TermSuggestionBuilder maxTermFreq(float maxTermFreq) {_        if (maxTermFreq < 0.0f) {_            throw new IllegalArgumentException("maxTermFreq must be positive")__        }_        if (maxTermFreq > 1.0f && maxTermFreq != Math.floor(maxTermFreq)) {_            throw new IllegalArgumentException("if maxTermFreq is greater than 1, it must not be a fraction")__        }_        this.maxTermFreq = maxTermFreq__        return this__    };sets,a,maximum,threshold,in,number,of,documents,a,suggest,text,token,can,exist,in,order,to,be,corrected,can,be,a,relative,percentage,number,e,g,0,4,or,an,absolute,number,to,represent,document,frequencies,if,an,value,higher,than,1,is,specified,then,fractional,can,not,be,specified,defaults,to,code,0,01,p,this,can,be,used,to,exclude,high,frequency,terms,from,being,suggested,high,frequency,terms,are,usually,spelled,correctly,on,top,of,this,this,also,improves,the,suggest,performance;public,term,suggestion,builder,max,term,freq,float,max,term,freq,if,max,term,freq,0,0f,throw,new,illegal,argument,exception,max,term,freq,must,be,positive,if,max,term,freq,1,0f,max,term,freq,math,floor,max,term,freq,throw,new,illegal,argument,exception,if,max,term,freq,is,greater,than,1,it,must,not,be,a,fraction,this,max,term,freq,max,term,freq,return,this
TermSuggestionBuilder -> public float accuracy();1524684173;Get the accuracy setting.;public float accuracy() {_        return accuracy__    };get,the,accuracy,setting;public,float,accuracy,return,accuracy
TermSuggestionBuilder -> public float accuracy();1525334055;Get the accuracy setting.;public float accuracy() {_        return accuracy__    };get,the,accuracy,setting;public,float,accuracy,return,accuracy
TermSuggestionBuilder -> public float accuracy();1533738061;Get the accuracy setting.;public float accuracy() {_        return accuracy__    };get,the,accuracy,setting;public,float,accuracy,return,accuracy
TermSuggestionBuilder -> public float accuracy();1536314350;Get the accuracy setting.;public float accuracy() {_        return accuracy__    };get,the,accuracy,setting;public,float,accuracy,return,accuracy
TermSuggestionBuilder -> public TermSuggestionBuilder prefixLength(int prefixLength);1524684173;Sets the number of minimal prefix characters that must match in order be_a candidate suggestion. Defaults to 1. Increasing this number improves_suggest performance. Usually misspellings don't occur in the beginning of_terms.;public TermSuggestionBuilder prefixLength(int prefixLength) {_        if (prefixLength < 0) {_            throw new IllegalArgumentException("prefixLength must be positive")__        }_        this.prefixLength = prefixLength__        return this__    };sets,the,number,of,minimal,prefix,characters,that,must,match,in,order,be,a,candidate,suggestion,defaults,to,1,increasing,this,number,improves,suggest,performance,usually,misspellings,don,t,occur,in,the,beginning,of,terms;public,term,suggestion,builder,prefix,length,int,prefix,length,if,prefix,length,0,throw,new,illegal,argument,exception,prefix,length,must,be,positive,this,prefix,length,prefix,length,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder prefixLength(int prefixLength);1525334055;Sets the number of minimal prefix characters that must match in order be_a candidate suggestion. Defaults to 1. Increasing this number improves_suggest performance. Usually misspellings don't occur in the beginning of_terms.;public TermSuggestionBuilder prefixLength(int prefixLength) {_        if (prefixLength < 0) {_            throw new IllegalArgumentException("prefixLength must be positive")__        }_        this.prefixLength = prefixLength__        return this__    };sets,the,number,of,minimal,prefix,characters,that,must,match,in,order,be,a,candidate,suggestion,defaults,to,1,increasing,this,number,improves,suggest,performance,usually,misspellings,don,t,occur,in,the,beginning,of,terms;public,term,suggestion,builder,prefix,length,int,prefix,length,if,prefix,length,0,throw,new,illegal,argument,exception,prefix,length,must,be,positive,this,prefix,length,prefix,length,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder prefixLength(int prefixLength);1533738061;Sets the number of minimal prefix characters that must match in order be_a candidate suggestion. Defaults to 1. Increasing this number improves_suggest performance. Usually misspellings don't occur in the beginning of_terms.;public TermSuggestionBuilder prefixLength(int prefixLength) {_        if (prefixLength < 0) {_            throw new IllegalArgumentException("prefixLength must be positive")__        }_        this.prefixLength = prefixLength__        return this__    };sets,the,number,of,minimal,prefix,characters,that,must,match,in,order,be,a,candidate,suggestion,defaults,to,1,increasing,this,number,improves,suggest,performance,usually,misspellings,don,t,occur,in,the,beginning,of,terms;public,term,suggestion,builder,prefix,length,int,prefix,length,if,prefix,length,0,throw,new,illegal,argument,exception,prefix,length,must,be,positive,this,prefix,length,prefix,length,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder prefixLength(int prefixLength);1536314350;Sets the number of minimal prefix characters that must match in order be_a candidate suggestion. Defaults to 1. Increasing this number improves_suggest performance. Usually misspellings don't occur in the beginning of_terms.;public TermSuggestionBuilder prefixLength(int prefixLength) {_        if (prefixLength < 0) {_            throw new IllegalArgumentException("prefixLength must be positive")__        }_        this.prefixLength = prefixLength__        return this__    };sets,the,number,of,minimal,prefix,characters,that,must,match,in,order,be,a,candidate,suggestion,defaults,to,1,increasing,this,number,improves,suggest,performance,usually,misspellings,don,t,occur,in,the,beginning,of,terms;public,term,suggestion,builder,prefix,length,int,prefix,length,if,prefix,length,0,throw,new,illegal,argument,exception,prefix,length,must,be,positive,this,prefix,length,prefix,length,return,this
TermSuggestionBuilder -> private TermSuggestionBuilder(String field, TermSuggestionBuilder in);1524684173;internal copy constructor that copies over all class field except field.;private TermSuggestionBuilder(String field, TermSuggestionBuilder in) {_        super(field, in)__        suggestMode = in.suggestMode__        accuracy = in.accuracy__        sort = in.sort__        stringDistance = in.stringDistance__        maxEdits = in.maxEdits__        maxInspections = in.maxInspections__        maxTermFreq = in.maxTermFreq__        prefixLength = in.prefixLength__        minWordLength = in.minWordLength__        minDocFreq = in.minDocFreq__    };internal,copy,constructor,that,copies,over,all,class,field,except,field;private,term,suggestion,builder,string,field,term,suggestion,builder,in,super,field,in,suggest,mode,in,suggest,mode,accuracy,in,accuracy,sort,in,sort,string,distance,in,string,distance,max,edits,in,max,edits,max,inspections,in,max,inspections,max,term,freq,in,max,term,freq,prefix,length,in,prefix,length,min,word,length,in,min,word,length,min,doc,freq,in,min,doc,freq
TermSuggestionBuilder -> private TermSuggestionBuilder(String field, TermSuggestionBuilder in);1525334055;internal copy constructor that copies over all class field except field.;private TermSuggestionBuilder(String field, TermSuggestionBuilder in) {_        super(field, in)__        suggestMode = in.suggestMode__        accuracy = in.accuracy__        sort = in.sort__        stringDistance = in.stringDistance__        maxEdits = in.maxEdits__        maxInspections = in.maxInspections__        maxTermFreq = in.maxTermFreq__        prefixLength = in.prefixLength__        minWordLength = in.minWordLength__        minDocFreq = in.minDocFreq__    };internal,copy,constructor,that,copies,over,all,class,field,except,field;private,term,suggestion,builder,string,field,term,suggestion,builder,in,super,field,in,suggest,mode,in,suggest,mode,accuracy,in,accuracy,sort,in,sort,string,distance,in,string,distance,max,edits,in,max,edits,max,inspections,in,max,inspections,max,term,freq,in,max,term,freq,prefix,length,in,prefix,length,min,word,length,in,min,word,length,min,doc,freq,in,min,doc,freq
TermSuggestionBuilder -> private TermSuggestionBuilder(String field, TermSuggestionBuilder in);1533738061;internal copy constructor that copies over all class field except field.;private TermSuggestionBuilder(String field, TermSuggestionBuilder in) {_        super(field, in)__        suggestMode = in.suggestMode__        accuracy = in.accuracy__        sort = in.sort__        stringDistance = in.stringDistance__        maxEdits = in.maxEdits__        maxInspections = in.maxInspections__        maxTermFreq = in.maxTermFreq__        prefixLength = in.prefixLength__        minWordLength = in.minWordLength__        minDocFreq = in.minDocFreq__    };internal,copy,constructor,that,copies,over,all,class,field,except,field;private,term,suggestion,builder,string,field,term,suggestion,builder,in,super,field,in,suggest,mode,in,suggest,mode,accuracy,in,accuracy,sort,in,sort,string,distance,in,string,distance,max,edits,in,max,edits,max,inspections,in,max,inspections,max,term,freq,in,max,term,freq,prefix,length,in,prefix,length,min,word,length,in,min,word,length,min,doc,freq,in,min,doc,freq
TermSuggestionBuilder -> private TermSuggestionBuilder(String field, TermSuggestionBuilder in);1536314350;internal copy constructor that copies over all class field except field.;private TermSuggestionBuilder(String field, TermSuggestionBuilder in) {_        super(field, in)__        suggestMode = in.suggestMode__        accuracy = in.accuracy__        sort = in.sort__        stringDistance = in.stringDistance__        maxEdits = in.maxEdits__        maxInspections = in.maxInspections__        maxTermFreq = in.maxTermFreq__        prefixLength = in.prefixLength__        minWordLength = in.minWordLength__        minDocFreq = in.minDocFreq__    };internal,copy,constructor,that,copies,over,all,class,field,except,field;private,term,suggestion,builder,string,field,term,suggestion,builder,in,super,field,in,suggest,mode,in,suggest,mode,accuracy,in,accuracy,sort,in,sort,string,distance,in,string,distance,max,edits,in,max,edits,max,inspections,in,max,inspections,max,term,freq,in,max,term,freq,prefix,length,in,prefix,length,min,word,length,in,min,word,length,min,doc,freq,in,min,doc,freq
TermSuggestionBuilder -> public float maxTermFreq();1524684173;Get the maximum term frequency threshold setting.;public float maxTermFreq() {_        return maxTermFreq__    };get,the,maximum,term,frequency,threshold,setting;public,float,max,term,freq,return,max,term,freq
TermSuggestionBuilder -> public float maxTermFreq();1525334055;Get the maximum term frequency threshold setting.;public float maxTermFreq() {_        return maxTermFreq__    };get,the,maximum,term,frequency,threshold,setting;public,float,max,term,freq,return,max,term,freq
TermSuggestionBuilder -> public float maxTermFreq();1533738061;Get the maximum term frequency threshold setting.;public float maxTermFreq() {_        return maxTermFreq__    };get,the,maximum,term,frequency,threshold,setting;public,float,max,term,freq,return,max,term,freq
TermSuggestionBuilder -> public float maxTermFreq();1536314350;Get the maximum term frequency threshold setting.;public float maxTermFreq() {_        return maxTermFreq__    };get,the,maximum,term,frequency,threshold,setting;public,float,max,term,freq,return,max,term,freq
TermSuggestionBuilder -> public TermSuggestionBuilder maxInspections(int maxInspections);1524684173;A factor that is used to multiply with the size in order to inspect more_candidate suggestions. Can improve accuracy at the cost of performance._Defaults to <tt>5</tt>.;public TermSuggestionBuilder maxInspections(int maxInspections) {_        if (maxInspections < 0) {_            throw new IllegalArgumentException("maxInspections must be positive")__        }_        this.maxInspections = maxInspections__        return this__    };a,factor,that,is,used,to,multiply,with,the,size,in,order,to,inspect,more,candidate,suggestions,can,improve,accuracy,at,the,cost,of,performance,defaults,to,tt,5,tt;public,term,suggestion,builder,max,inspections,int,max,inspections,if,max,inspections,0,throw,new,illegal,argument,exception,max,inspections,must,be,positive,this,max,inspections,max,inspections,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxInspections(int maxInspections);1525334055;A factor that is used to multiply with the size in order to inspect more_candidate suggestions. Can improve accuracy at the cost of performance._Defaults to {@code 5}.;public TermSuggestionBuilder maxInspections(int maxInspections) {_        if (maxInspections < 0) {_            throw new IllegalArgumentException("maxInspections must be positive")__        }_        this.maxInspections = maxInspections__        return this__    };a,factor,that,is,used,to,multiply,with,the,size,in,order,to,inspect,more,candidate,suggestions,can,improve,accuracy,at,the,cost,of,performance,defaults,to,code,5;public,term,suggestion,builder,max,inspections,int,max,inspections,if,max,inspections,0,throw,new,illegal,argument,exception,max,inspections,must,be,positive,this,max,inspections,max,inspections,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxInspections(int maxInspections);1533738061;A factor that is used to multiply with the size in order to inspect more_candidate suggestions. Can improve accuracy at the cost of performance._Defaults to {@code 5}.;public TermSuggestionBuilder maxInspections(int maxInspections) {_        if (maxInspections < 0) {_            throw new IllegalArgumentException("maxInspections must be positive")__        }_        this.maxInspections = maxInspections__        return this__    };a,factor,that,is,used,to,multiply,with,the,size,in,order,to,inspect,more,candidate,suggestions,can,improve,accuracy,at,the,cost,of,performance,defaults,to,code,5;public,term,suggestion,builder,max,inspections,int,max,inspections,if,max,inspections,0,throw,new,illegal,argument,exception,max,inspections,must,be,positive,this,max,inspections,max,inspections,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxInspections(int maxInspections);1536314350;A factor that is used to multiply with the size in order to inspect more_candidate suggestions. Can improve accuracy at the cost of performance._Defaults to {@code 5}.;public TermSuggestionBuilder maxInspections(int maxInspections) {_        if (maxInspections < 0) {_            throw new IllegalArgumentException("maxInspections must be positive")__        }_        this.maxInspections = maxInspections__        return this__    };a,factor,that,is,used,to,multiply,with,the,size,in,order,to,inspect,more,candidate,suggestions,can,improve,accuracy,at,the,cost,of,performance,defaults,to,code,5;public,term,suggestion,builder,max,inspections,int,max,inspections,if,max,inspections,0,throw,new,illegal,argument,exception,max,inspections,must,be,positive,this,max,inspections,max,inspections,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder suggestMode(SuggestMode suggestMode);1524684173;The global suggest mode controls what suggested terms are included or_controls for what suggest text tokens, terms should be suggested for._Three possible values can be specified:_<ol>_<li><code>missing</code> - Only suggest terms in the suggest text that_aren't in the index. This is the default._<li><code>popular</code> - Only suggest terms that occur in more docs_then the original suggest text term._<li><code>always</code> - Suggest any matching suggest terms based on_tokens in the suggest text._</ol>;public TermSuggestionBuilder suggestMode(SuggestMode suggestMode) {_        Objects.requireNonNull(suggestMode, "suggestMode must not be null")__        this.suggestMode = suggestMode__        return this__    };the,global,suggest,mode,controls,what,suggested,terms,are,included,or,controls,for,what,suggest,text,tokens,terms,should,be,suggested,for,three,possible,values,can,be,specified,ol,li,code,missing,code,only,suggest,terms,in,the,suggest,text,that,aren,t,in,the,index,this,is,the,default,li,code,popular,code,only,suggest,terms,that,occur,in,more,docs,then,the,original,suggest,text,term,li,code,always,code,suggest,any,matching,suggest,terms,based,on,tokens,in,the,suggest,text,ol;public,term,suggestion,builder,suggest,mode,suggest,mode,suggest,mode,objects,require,non,null,suggest,mode,suggest,mode,must,not,be,null,this,suggest,mode,suggest,mode,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder suggestMode(SuggestMode suggestMode);1525334055;The global suggest mode controls what suggested terms are included or_controls for what suggest text tokens, terms should be suggested for._Three possible values can be specified:_<ol>_<li><code>missing</code> - Only suggest terms in the suggest text that_aren't in the index. This is the default._<li><code>popular</code> - Only suggest terms that occur in more docs_then the original suggest text term._<li><code>always</code> - Suggest any matching suggest terms based on_tokens in the suggest text._</ol>;public TermSuggestionBuilder suggestMode(SuggestMode suggestMode) {_        Objects.requireNonNull(suggestMode, "suggestMode must not be null")__        this.suggestMode = suggestMode__        return this__    };the,global,suggest,mode,controls,what,suggested,terms,are,included,or,controls,for,what,suggest,text,tokens,terms,should,be,suggested,for,three,possible,values,can,be,specified,ol,li,code,missing,code,only,suggest,terms,in,the,suggest,text,that,aren,t,in,the,index,this,is,the,default,li,code,popular,code,only,suggest,terms,that,occur,in,more,docs,then,the,original,suggest,text,term,li,code,always,code,suggest,any,matching,suggest,terms,based,on,tokens,in,the,suggest,text,ol;public,term,suggestion,builder,suggest,mode,suggest,mode,suggest,mode,objects,require,non,null,suggest,mode,suggest,mode,must,not,be,null,this,suggest,mode,suggest,mode,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder suggestMode(SuggestMode suggestMode);1533738061;The global suggest mode controls what suggested terms are included or_controls for what suggest text tokens, terms should be suggested for._Three possible values can be specified:_<ol>_<li><code>missing</code> - Only suggest terms in the suggest text that_aren't in the index. This is the default._<li><code>popular</code> - Only suggest terms that occur in more docs_then the original suggest text term._<li><code>always</code> - Suggest any matching suggest terms based on_tokens in the suggest text._</ol>;public TermSuggestionBuilder suggestMode(SuggestMode suggestMode) {_        Objects.requireNonNull(suggestMode, "suggestMode must not be null")__        this.suggestMode = suggestMode__        return this__    };the,global,suggest,mode,controls,what,suggested,terms,are,included,or,controls,for,what,suggest,text,tokens,terms,should,be,suggested,for,three,possible,values,can,be,specified,ol,li,code,missing,code,only,suggest,terms,in,the,suggest,text,that,aren,t,in,the,index,this,is,the,default,li,code,popular,code,only,suggest,terms,that,occur,in,more,docs,then,the,original,suggest,text,term,li,code,always,code,suggest,any,matching,suggest,terms,based,on,tokens,in,the,suggest,text,ol;public,term,suggestion,builder,suggest,mode,suggest,mode,suggest,mode,objects,require,non,null,suggest,mode,suggest,mode,must,not,be,null,this,suggest,mode,suggest,mode,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder suggestMode(SuggestMode suggestMode);1536314350;The global suggest mode controls what suggested terms are included or_controls for what suggest text tokens, terms should be suggested for._Three possible values can be specified:_<ol>_<li><code>missing</code> - Only suggest terms in the suggest text that_aren't in the index. This is the default._<li><code>popular</code> - Only suggest terms that occur in more docs_then the original suggest text term._<li><code>always</code> - Suggest any matching suggest terms based on_tokens in the suggest text._</ol>;public TermSuggestionBuilder suggestMode(SuggestMode suggestMode) {_        Objects.requireNonNull(suggestMode, "suggestMode must not be null")__        this.suggestMode = suggestMode__        return this__    };the,global,suggest,mode,controls,what,suggested,terms,are,included,or,controls,for,what,suggest,text,tokens,terms,should,be,suggested,for,three,possible,values,can,be,specified,ol,li,code,missing,code,only,suggest,terms,in,the,suggest,text,that,aren,t,in,the,index,this,is,the,default,li,code,popular,code,only,suggest,terms,that,occur,in,more,docs,then,the,original,suggest,text,term,li,code,always,code,suggest,any,matching,suggest,terms,based,on,tokens,in,the,suggest,text,ol;public,term,suggestion,builder,suggest,mode,suggest,mode,suggest,mode,objects,require,non,null,suggest,mode,suggest,mode,must,not,be,null,this,suggest,mode,suggest,mode,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder(StreamInput in) throws IOException;1524684173;Read from a stream.;public TermSuggestionBuilder(StreamInput in) throws IOException {_        super(in)__        suggestMode = SuggestMode.readFromStream(in)__        accuracy = in.readFloat()__        sort = SortBy.readFromStream(in)__        stringDistance = StringDistanceImpl.readFromStream(in)__        maxEdits = in.readVInt()__        maxInspections = in.readVInt()__        maxTermFreq = in.readFloat()__        prefixLength = in.readVInt()__        minWordLength = in.readVInt()__        minDocFreq = in.readFloat()__    };read,from,a,stream;public,term,suggestion,builder,stream,input,in,throws,ioexception,super,in,suggest,mode,suggest,mode,read,from,stream,in,accuracy,in,read,float,sort,sort,by,read,from,stream,in,string,distance,string,distance,impl,read,from,stream,in,max,edits,in,read,vint,max,inspections,in,read,vint,max,term,freq,in,read,float,prefix,length,in,read,vint,min,word,length,in,read,vint,min,doc,freq,in,read,float
TermSuggestionBuilder -> public TermSuggestionBuilder(StreamInput in) throws IOException;1525334055;Read from a stream.;public TermSuggestionBuilder(StreamInput in) throws IOException {_        super(in)__        suggestMode = SuggestMode.readFromStream(in)__        accuracy = in.readFloat()__        sort = SortBy.readFromStream(in)__        stringDistance = StringDistanceImpl.readFromStream(in)__        maxEdits = in.readVInt()__        maxInspections = in.readVInt()__        maxTermFreq = in.readFloat()__        prefixLength = in.readVInt()__        minWordLength = in.readVInt()__        minDocFreq = in.readFloat()__    };read,from,a,stream;public,term,suggestion,builder,stream,input,in,throws,ioexception,super,in,suggest,mode,suggest,mode,read,from,stream,in,accuracy,in,read,float,sort,sort,by,read,from,stream,in,string,distance,string,distance,impl,read,from,stream,in,max,edits,in,read,vint,max,inspections,in,read,vint,max,term,freq,in,read,float,prefix,length,in,read,vint,min,word,length,in,read,vint,min,doc,freq,in,read,float
TermSuggestionBuilder -> public TermSuggestionBuilder(StreamInput in) throws IOException;1533738061;Read from a stream.;public TermSuggestionBuilder(StreamInput in) throws IOException {_        super(in)__        suggestMode = SuggestMode.readFromStream(in)__        accuracy = in.readFloat()__        sort = SortBy.readFromStream(in)__        stringDistance = StringDistanceImpl.readFromStream(in)__        maxEdits = in.readVInt()__        maxInspections = in.readVInt()__        maxTermFreq = in.readFloat()__        prefixLength = in.readVInt()__        minWordLength = in.readVInt()__        minDocFreq = in.readFloat()__    };read,from,a,stream;public,term,suggestion,builder,stream,input,in,throws,ioexception,super,in,suggest,mode,suggest,mode,read,from,stream,in,accuracy,in,read,float,sort,sort,by,read,from,stream,in,string,distance,string,distance,impl,read,from,stream,in,max,edits,in,read,vint,max,inspections,in,read,vint,max,term,freq,in,read,float,prefix,length,in,read,vint,min,word,length,in,read,vint,min,doc,freq,in,read,float
TermSuggestionBuilder -> public TermSuggestionBuilder(StreamInput in) throws IOException;1536314350;Read from a stream.;public TermSuggestionBuilder(StreamInput in) throws IOException {_        super(in)__        suggestMode = SuggestMode.readFromStream(in)__        accuracy = in.readFloat()__        sort = SortBy.readFromStream(in)__        stringDistance = StringDistanceImpl.readFromStream(in)__        maxEdits = in.readVInt()__        maxInspections = in.readVInt()__        maxTermFreq = in.readFloat()__        prefixLength = in.readVInt()__        minWordLength = in.readVInt()__        minDocFreq = in.readFloat()__    };read,from,a,stream;public,term,suggestion,builder,stream,input,in,throws,ioexception,super,in,suggest,mode,suggest,mode,read,from,stream,in,accuracy,in,read,float,sort,sort,by,read,from,stream,in,string,distance,string,distance,impl,read,from,stream,in,max,edits,in,read,vint,max,inspections,in,read,vint,max,term,freq,in,read,float,prefix,length,in,read,vint,min,word,length,in,read,vint,min,doc,freq,in,read,float
TermSuggestionBuilder -> public TermSuggestionBuilder stringDistance(StringDistanceImpl stringDistance);1524684173;Sets what string distance implementation to use for comparing how similar_suggested terms are. Five possible values can be specified:_<ol>_<li><code>internal</code> - This is the default and is based on_<code>damerau_levenshtein</code>, but highly optimized for comparing_string distance for terms inside the index._<li><code>damerau_levenshtein</code> - String distance algorithm based on_Damerau-Levenshtein algorithm._<li><code>levenshtein</code> - String distance algorithm based on_Levenshtein edit distance algorithm._<li><code>jaro_winkler</code> - String distance algorithm based on_Jaro-Winkler algorithm._<li><code>ngram</code> - String distance algorithm based on character_n-grams._</ol>;public TermSuggestionBuilder stringDistance(StringDistanceImpl stringDistance) {_        Objects.requireNonNull(stringDistance, "stringDistance must not be null")__        this.stringDistance = stringDistance__        return this__    };sets,what,string,distance,implementation,to,use,for,comparing,how,similar,suggested,terms,are,five,possible,values,can,be,specified,ol,li,code,internal,code,this,is,the,default,and,is,based,on,code,code,but,highly,optimized,for,comparing,string,distance,for,terms,inside,the,index,li,code,code,string,distance,algorithm,based,on,damerau,levenshtein,algorithm,li,code,levenshtein,code,string,distance,algorithm,based,on,levenshtein,edit,distance,algorithm,li,code,code,string,distance,algorithm,based,on,jaro,winkler,algorithm,li,code,ngram,code,string,distance,algorithm,based,on,character,n,grams,ol;public,term,suggestion,builder,string,distance,string,distance,impl,string,distance,objects,require,non,null,string,distance,string,distance,must,not,be,null,this,string,distance,string,distance,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder stringDistance(StringDistanceImpl stringDistance);1525334055;Sets what string distance implementation to use for comparing how similar_suggested terms are. Five possible values can be specified:_<ol>_<li><code>internal</code> - This is the default and is based on_<code>damerau_levenshtein</code>, but highly optimized for comparing_string distance for terms inside the index._<li><code>damerau_levenshtein</code> - String distance algorithm based on_Damerau-Levenshtein algorithm._<li><code>levenshtein</code> - String distance algorithm based on_Levenshtein edit distance algorithm._<li><code>jaro_winkler</code> - String distance algorithm based on_Jaro-Winkler algorithm._<li><code>ngram</code> - String distance algorithm based on character_n-grams._</ol>;public TermSuggestionBuilder stringDistance(StringDistanceImpl stringDistance) {_        Objects.requireNonNull(stringDistance, "stringDistance must not be null")__        this.stringDistance = stringDistance__        return this__    };sets,what,string,distance,implementation,to,use,for,comparing,how,similar,suggested,terms,are,five,possible,values,can,be,specified,ol,li,code,internal,code,this,is,the,default,and,is,based,on,code,code,but,highly,optimized,for,comparing,string,distance,for,terms,inside,the,index,li,code,code,string,distance,algorithm,based,on,damerau,levenshtein,algorithm,li,code,levenshtein,code,string,distance,algorithm,based,on,levenshtein,edit,distance,algorithm,li,code,code,string,distance,algorithm,based,on,jaro,winkler,algorithm,li,code,ngram,code,string,distance,algorithm,based,on,character,n,grams,ol;public,term,suggestion,builder,string,distance,string,distance,impl,string,distance,objects,require,non,null,string,distance,string,distance,must,not,be,null,this,string,distance,string,distance,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder stringDistance(StringDistanceImpl stringDistance);1533738061;Sets what string distance implementation to use for comparing how similar_suggested terms are. Five possible values can be specified:_<ol>_<li><code>internal</code> - This is the default and is based on_<code>damerau_levenshtein</code>, but highly optimized for comparing_string distance for terms inside the index._<li><code>damerau_levenshtein</code> - String distance algorithm based on_Damerau-Levenshtein algorithm._<li><code>levenshtein</code> - String distance algorithm based on_Levenshtein edit distance algorithm._<li><code>jaro_winkler</code> - String distance algorithm based on_Jaro-Winkler algorithm._<li><code>ngram</code> - String distance algorithm based on character_n-grams._</ol>;public TermSuggestionBuilder stringDistance(StringDistanceImpl stringDistance) {_        Objects.requireNonNull(stringDistance, "stringDistance must not be null")__        this.stringDistance = stringDistance__        return this__    };sets,what,string,distance,implementation,to,use,for,comparing,how,similar,suggested,terms,are,five,possible,values,can,be,specified,ol,li,code,internal,code,this,is,the,default,and,is,based,on,code,code,but,highly,optimized,for,comparing,string,distance,for,terms,inside,the,index,li,code,code,string,distance,algorithm,based,on,damerau,levenshtein,algorithm,li,code,levenshtein,code,string,distance,algorithm,based,on,levenshtein,edit,distance,algorithm,li,code,code,string,distance,algorithm,based,on,jaro,winkler,algorithm,li,code,ngram,code,string,distance,algorithm,based,on,character,n,grams,ol;public,term,suggestion,builder,string,distance,string,distance,impl,string,distance,objects,require,non,null,string,distance,string,distance,must,not,be,null,this,string,distance,string,distance,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder stringDistance(StringDistanceImpl stringDistance);1536314350;Sets what string distance implementation to use for comparing how similar_suggested terms are. Five possible values can be specified:_<ol>_<li><code>internal</code> - This is the default and is based on_<code>damerau_levenshtein</code>, but highly optimized for comparing_string distance for terms inside the index._<li><code>damerau_levenshtein</code> - String distance algorithm based on_Damerau-Levenshtein algorithm._<li><code>levenshtein</code> - String distance algorithm based on_Levenshtein edit distance algorithm._<li><code>jaro_winkler</code> - String distance algorithm based on_Jaro-Winkler algorithm._<li><code>ngram</code> - String distance algorithm based on character_n-grams._</ol>;public TermSuggestionBuilder stringDistance(StringDistanceImpl stringDistance) {_        Objects.requireNonNull(stringDistance, "stringDistance must not be null")__        this.stringDistance = stringDistance__        return this__    };sets,what,string,distance,implementation,to,use,for,comparing,how,similar,suggested,terms,are,five,possible,values,can,be,specified,ol,li,code,internal,code,this,is,the,default,and,is,based,on,code,code,but,highly,optimized,for,comparing,string,distance,for,terms,inside,the,index,li,code,code,string,distance,algorithm,based,on,damerau,levenshtein,algorithm,li,code,levenshtein,code,string,distance,algorithm,based,on,levenshtein,edit,distance,algorithm,li,code,code,string,distance,algorithm,based,on,jaro,winkler,algorithm,li,code,ngram,code,string,distance,algorithm,based,on,character,n,grams,ol;public,term,suggestion,builder,string,distance,string,distance,impl,string,distance,objects,require,non,null,string,distance,string,distance,must,not,be,null,this,string,distance,string,distance,return,this
TermSuggestionBuilder -> public int maxInspections();1524684173;Get the factor for inspecting more candidate suggestions setting.;public int maxInspections() {_        return maxInspections__    };get,the,factor,for,inspecting,more,candidate,suggestions,setting;public,int,max,inspections,return,max,inspections
TermSuggestionBuilder -> public int maxInspections();1525334055;Get the factor for inspecting more candidate suggestions setting.;public int maxInspections() {_        return maxInspections__    };get,the,factor,for,inspecting,more,candidate,suggestions,setting;public,int,max,inspections,return,max,inspections
TermSuggestionBuilder -> public int maxInspections();1533738061;Get the factor for inspecting more candidate suggestions setting.;public int maxInspections() {_        return maxInspections__    };get,the,factor,for,inspecting,more,candidate,suggestions,setting;public,int,max,inspections,return,max,inspections
TermSuggestionBuilder -> public int maxInspections();1536314350;Get the factor for inspecting more candidate suggestions setting.;public int maxInspections() {_        return maxInspections__    };get,the,factor,for,inspecting,more,candidate,suggestions,setting;public,int,max,inspections,return,max,inspections
TermSuggestionBuilder -> public TermSuggestionBuilder maxEdits(int maxEdits);1524684173;Sets the maximum edit distance candidate suggestions can have in order to_be considered as a suggestion. Can only be a value between 1 and 2. Any_other value result in an bad request error being thrown. Defaults to_<tt>2</tt>.;public TermSuggestionBuilder maxEdits(int maxEdits) {_        if (maxEdits < 1 || maxEdits > 2) {_            throw new IllegalArgumentException("maxEdits must be between 1 and 2")__        }_        this.maxEdits = maxEdits__        return this__    };sets,the,maximum,edit,distance,candidate,suggestions,can,have,in,order,to,be,considered,as,a,suggestion,can,only,be,a,value,between,1,and,2,any,other,value,result,in,an,bad,request,error,being,thrown,defaults,to,tt,2,tt;public,term,suggestion,builder,max,edits,int,max,edits,if,max,edits,1,max,edits,2,throw,new,illegal,argument,exception,max,edits,must,be,between,1,and,2,this,max,edits,max,edits,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxEdits(int maxEdits);1525334055;Sets the maximum edit distance candidate suggestions can have in order to_be considered as a suggestion. Can only be a value between 1 and 2. Any_other value result in an bad request error being thrown. Defaults to_{@code 2}.;public TermSuggestionBuilder maxEdits(int maxEdits) {_        if (maxEdits < 1 || maxEdits > 2) {_            throw new IllegalArgumentException("maxEdits must be between 1 and 2")__        }_        this.maxEdits = maxEdits__        return this__    };sets,the,maximum,edit,distance,candidate,suggestions,can,have,in,order,to,be,considered,as,a,suggestion,can,only,be,a,value,between,1,and,2,any,other,value,result,in,an,bad,request,error,being,thrown,defaults,to,code,2;public,term,suggestion,builder,max,edits,int,max,edits,if,max,edits,1,max,edits,2,throw,new,illegal,argument,exception,max,edits,must,be,between,1,and,2,this,max,edits,max,edits,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxEdits(int maxEdits);1533738061;Sets the maximum edit distance candidate suggestions can have in order to_be considered as a suggestion. Can only be a value between 1 and 2. Any_other value result in an bad request error being thrown. Defaults to_{@code 2}.;public TermSuggestionBuilder maxEdits(int maxEdits) {_        if (maxEdits < 1 || maxEdits > 2) {_            throw new IllegalArgumentException("maxEdits must be between 1 and 2")__        }_        this.maxEdits = maxEdits__        return this__    };sets,the,maximum,edit,distance,candidate,suggestions,can,have,in,order,to,be,considered,as,a,suggestion,can,only,be,a,value,between,1,and,2,any,other,value,result,in,an,bad,request,error,being,thrown,defaults,to,code,2;public,term,suggestion,builder,max,edits,int,max,edits,if,max,edits,1,max,edits,2,throw,new,illegal,argument,exception,max,edits,must,be,between,1,and,2,this,max,edits,max,edits,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder maxEdits(int maxEdits);1536314350;Sets the maximum edit distance candidate suggestions can have in order to_be considered as a suggestion. Can only be a value between 1 and 2. Any_other value result in an bad request error being thrown. Defaults to_{@code 2}.;public TermSuggestionBuilder maxEdits(int maxEdits) {_        if (maxEdits < 1 || maxEdits > 2) {_            throw new IllegalArgumentException("maxEdits must be between 1 and 2")__        }_        this.maxEdits = maxEdits__        return this__    };sets,the,maximum,edit,distance,candidate,suggestions,can,have,in,order,to,be,considered,as,a,suggestion,can,only,be,a,value,between,1,and,2,any,other,value,result,in,an,bad,request,error,being,thrown,defaults,to,code,2;public,term,suggestion,builder,max,edits,int,max,edits,if,max,edits,1,max,edits,2,throw,new,illegal,argument,exception,max,edits,must,be,between,1,and,2,this,max,edits,max,edits,return,this
TermSuggestionBuilder -> public StringDistanceImpl stringDistance();1524684173;Get the string distance implementation setting.;public StringDistanceImpl stringDistance() {_        return stringDistance__    };get,the,string,distance,implementation,setting;public,string,distance,impl,string,distance,return,string,distance
TermSuggestionBuilder -> public StringDistanceImpl stringDistance();1525334055;Get the string distance implementation setting.;public StringDistanceImpl stringDistance() {_        return stringDistance__    };get,the,string,distance,implementation,setting;public,string,distance,impl,string,distance,return,string,distance
TermSuggestionBuilder -> public StringDistanceImpl stringDistance();1533738061;Get the string distance implementation setting.;public StringDistanceImpl stringDistance() {_        return stringDistance__    };get,the,string,distance,implementation,setting;public,string,distance,impl,string,distance,return,string,distance
TermSuggestionBuilder -> public StringDistanceImpl stringDistance();1536314350;Get the string distance implementation setting.;public StringDistanceImpl stringDistance() {_        return stringDistance__    };get,the,string,distance,implementation,setting;public,string,distance,impl,string,distance,return,string,distance
TermSuggestionBuilder -> public int minWordLength();1524684173;Get the minimum length of a text term to be corrected setting.;public int minWordLength() {_        return minWordLength__    };get,the,minimum,length,of,a,text,term,to,be,corrected,setting;public,int,min,word,length,return,min,word,length
TermSuggestionBuilder -> public int minWordLength();1525334055;Get the minimum length of a text term to be corrected setting.;public int minWordLength() {_        return minWordLength__    };get,the,minimum,length,of,a,text,term,to,be,corrected,setting;public,int,min,word,length,return,min,word,length
TermSuggestionBuilder -> public int minWordLength();1533738061;Get the minimum length of a text term to be corrected setting.;public int minWordLength() {_        return minWordLength__    };get,the,minimum,length,of,a,text,term,to,be,corrected,setting;public,int,min,word,length,return,min,word,length
TermSuggestionBuilder -> public int minWordLength();1536314350;Get the minimum length of a text term to be corrected setting.;public int minWordLength() {_        return minWordLength__    };get,the,minimum,length,of,a,text,term,to,be,corrected,setting;public,int,min,word,length,return,min,word,length
TermSuggestionBuilder -> public int maxEdits();1524684173;Get the maximum edit distance setting.;public int maxEdits() {_        return maxEdits__    };get,the,maximum,edit,distance,setting;public,int,max,edits,return,max,edits
TermSuggestionBuilder -> public int maxEdits();1525334055;Get the maximum edit distance setting.;public int maxEdits() {_        return maxEdits__    };get,the,maximum,edit,distance,setting;public,int,max,edits,return,max,edits
TermSuggestionBuilder -> public int maxEdits();1533738061;Get the maximum edit distance setting.;public int maxEdits() {_        return maxEdits__    };get,the,maximum,edit,distance,setting;public,int,max,edits,return,max,edits
TermSuggestionBuilder -> public int maxEdits();1536314350;Get the maximum edit distance setting.;public int maxEdits() {_        return maxEdits__    };get,the,maximum,edit,distance,setting;public,int,max,edits,return,max,edits
TermSuggestionBuilder -> public TermSuggestionBuilder minWordLength(int minWordLength);1524684173;The minimum length a suggest text term must have in order to be_corrected. Defaults to <tt>4</tt>.;public TermSuggestionBuilder minWordLength(int minWordLength) {_        if (minWordLength < 1) {_            throw new IllegalArgumentException("minWordLength must be greater or equal to 1")__        }_        this.minWordLength = minWordLength__        return this__    };the,minimum,length,a,suggest,text,term,must,have,in,order,to,be,corrected,defaults,to,tt,4,tt;public,term,suggestion,builder,min,word,length,int,min,word,length,if,min,word,length,1,throw,new,illegal,argument,exception,min,word,length,must,be,greater,or,equal,to,1,this,min,word,length,min,word,length,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder minWordLength(int minWordLength);1525334055;The minimum length a suggest text term must have in order to be_corrected. Defaults to {@code 4}.;public TermSuggestionBuilder minWordLength(int minWordLength) {_        if (minWordLength < 1) {_            throw new IllegalArgumentException("minWordLength must be greater or equal to 1")__        }_        this.minWordLength = minWordLength__        return this__    };the,minimum,length,a,suggest,text,term,must,have,in,order,to,be,corrected,defaults,to,code,4;public,term,suggestion,builder,min,word,length,int,min,word,length,if,min,word,length,1,throw,new,illegal,argument,exception,min,word,length,must,be,greater,or,equal,to,1,this,min,word,length,min,word,length,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder minWordLength(int minWordLength);1533738061;The minimum length a suggest text term must have in order to be_corrected. Defaults to {@code 4}.;public TermSuggestionBuilder minWordLength(int minWordLength) {_        if (minWordLength < 1) {_            throw new IllegalArgumentException("minWordLength must be greater or equal to 1")__        }_        this.minWordLength = minWordLength__        return this__    };the,minimum,length,a,suggest,text,term,must,have,in,order,to,be,corrected,defaults,to,code,4;public,term,suggestion,builder,min,word,length,int,min,word,length,if,min,word,length,1,throw,new,illegal,argument,exception,min,word,length,must,be,greater,or,equal,to,1,this,min,word,length,min,word,length,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder minWordLength(int minWordLength);1536314350;The minimum length a suggest text term must have in order to be_corrected. Defaults to {@code 4}.;public TermSuggestionBuilder minWordLength(int minWordLength) {_        if (minWordLength < 1) {_            throw new IllegalArgumentException("minWordLength must be greater or equal to 1")__        }_        this.minWordLength = minWordLength__        return this__    };the,minimum,length,a,suggest,text,term,must,have,in,order,to,be,corrected,defaults,to,code,4;public,term,suggestion,builder,min,word,length,int,min,word,length,if,min,word,length,1,throw,new,illegal,argument,exception,min,word,length,must,be,greater,or,equal,to,1,this,min,word,length,min,word,length,return,this
TermSuggestionBuilder -> public float minDocFreq();1524684173;Get the minimal threshold for the frequency of a term appearing in the_document set setting.;public float minDocFreq() {_        return minDocFreq__    };get,the,minimal,threshold,for,the,frequency,of,a,term,appearing,in,the,document,set,setting;public,float,min,doc,freq,return,min,doc,freq
TermSuggestionBuilder -> public float minDocFreq();1525334055;Get the minimal threshold for the frequency of a term appearing in the_document set setting.;public float minDocFreq() {_        return minDocFreq__    };get,the,minimal,threshold,for,the,frequency,of,a,term,appearing,in,the,document,set,setting;public,float,min,doc,freq,return,min,doc,freq
TermSuggestionBuilder -> public float minDocFreq();1533738061;Get the minimal threshold for the frequency of a term appearing in the_document set setting.;public float minDocFreq() {_        return minDocFreq__    };get,the,minimal,threshold,for,the,frequency,of,a,term,appearing,in,the,document,set,setting;public,float,min,doc,freq,return,min,doc,freq
TermSuggestionBuilder -> public float minDocFreq();1536314350;Get the minimal threshold for the frequency of a term appearing in the_document set setting.;public float minDocFreq() {_        return minDocFreq__    };get,the,minimal,threshold,for,the,frequency,of,a,term,appearing,in,the,document,set,setting;public,float,min,doc,freq,return,min,doc,freq
TermSuggestionBuilder -> public int prefixLength();1524684173;Get the minimum prefix length that must match setting.;public int prefixLength() {_        return prefixLength__    };get,the,minimum,prefix,length,that,must,match,setting;public,int,prefix,length,return,prefix,length
TermSuggestionBuilder -> public int prefixLength();1525334055;Get the minimum prefix length that must match setting.;public int prefixLength() {_        return prefixLength__    };get,the,minimum,prefix,length,that,must,match,setting;public,int,prefix,length,return,prefix,length
TermSuggestionBuilder -> public int prefixLength();1533738061;Get the minimum prefix length that must match setting.;public int prefixLength() {_        return prefixLength__    };get,the,minimum,prefix,length,that,must,match,setting;public,int,prefix,length,return,prefix,length
TermSuggestionBuilder -> public int prefixLength();1536314350;Get the minimum prefix length that must match setting.;public int prefixLength() {_        return prefixLength__    };get,the,minimum,prefix,length,that,must,match,setting;public,int,prefix,length,return,prefix,length
TermSuggestionBuilder -> public TermSuggestionBuilder sort(SortBy sort);1524684173;Sets how to sort the suggest terms per suggest text token. Two possible_values:_<ol>_<li><code>score</code> - Sort should first be based on score, then_document frequency and then the term itself._<li><code>frequency</code> - Sort should first be based on document_frequency, then score and then the term itself._</ol>_<p>_What the score is depends on the suggester being used.;public TermSuggestionBuilder sort(SortBy sort) {_        Objects.requireNonNull(sort, "sort must not be null")__        this.sort = sort__        return this__    };sets,how,to,sort,the,suggest,terms,per,suggest,text,token,two,possible,values,ol,li,code,score,code,sort,should,first,be,based,on,score,then,document,frequency,and,then,the,term,itself,li,code,frequency,code,sort,should,first,be,based,on,document,frequency,then,score,and,then,the,term,itself,ol,p,what,the,score,is,depends,on,the,suggester,being,used;public,term,suggestion,builder,sort,sort,by,sort,objects,require,non,null,sort,sort,must,not,be,null,this,sort,sort,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder sort(SortBy sort);1525334055;Sets how to sort the suggest terms per suggest text token. Two possible_values:_<ol>_<li><code>score</code> - Sort should first be based on score, then_document frequency and then the term itself._<li><code>frequency</code> - Sort should first be based on document_frequency, then score and then the term itself._</ol>_<p>_What the score is depends on the suggester being used.;public TermSuggestionBuilder sort(SortBy sort) {_        Objects.requireNonNull(sort, "sort must not be null")__        this.sort = sort__        return this__    };sets,how,to,sort,the,suggest,terms,per,suggest,text,token,two,possible,values,ol,li,code,score,code,sort,should,first,be,based,on,score,then,document,frequency,and,then,the,term,itself,li,code,frequency,code,sort,should,first,be,based,on,document,frequency,then,score,and,then,the,term,itself,ol,p,what,the,score,is,depends,on,the,suggester,being,used;public,term,suggestion,builder,sort,sort,by,sort,objects,require,non,null,sort,sort,must,not,be,null,this,sort,sort,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder sort(SortBy sort);1533738061;Sets how to sort the suggest terms per suggest text token. Two possible_values:_<ol>_<li><code>score</code> - Sort should first be based on score, then_document frequency and then the term itself._<li><code>frequency</code> - Sort should first be based on document_frequency, then score and then the term itself._</ol>_<p>_What the score is depends on the suggester being used.;public TermSuggestionBuilder sort(SortBy sort) {_        Objects.requireNonNull(sort, "sort must not be null")__        this.sort = sort__        return this__    };sets,how,to,sort,the,suggest,terms,per,suggest,text,token,two,possible,values,ol,li,code,score,code,sort,should,first,be,based,on,score,then,document,frequency,and,then,the,term,itself,li,code,frequency,code,sort,should,first,be,based,on,document,frequency,then,score,and,then,the,term,itself,ol,p,what,the,score,is,depends,on,the,suggester,being,used;public,term,suggestion,builder,sort,sort,by,sort,objects,require,non,null,sort,sort,must,not,be,null,this,sort,sort,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder sort(SortBy sort);1536314350;Sets how to sort the suggest terms per suggest text token. Two possible_values:_<ol>_<li><code>score</code> - Sort should first be based on score, then_document frequency and then the term itself._<li><code>frequency</code> - Sort should first be based on document_frequency, then score and then the term itself._</ol>_<p>_What the score is depends on the suggester being used.;public TermSuggestionBuilder sort(SortBy sort) {_        Objects.requireNonNull(sort, "sort must not be null")__        this.sort = sort__        return this__    };sets,how,to,sort,the,suggest,terms,per,suggest,text,token,two,possible,values,ol,li,code,score,code,sort,should,first,be,based,on,score,then,document,frequency,and,then,the,term,itself,li,code,frequency,code,sort,should,first,be,based,on,document,frequency,then,score,and,then,the,term,itself,ol,p,what,the,score,is,depends,on,the,suggester,being,used;public,term,suggestion,builder,sort,sort,by,sort,objects,require,non,null,sort,sort,must,not,be,null,this,sort,sort,return,this
TermSuggestionBuilder -> public SortBy sort();1524684173;Get the sort setting.;public SortBy sort() {_        return sort__    };get,the,sort,setting;public,sort,by,sort,return,sort
TermSuggestionBuilder -> public SortBy sort();1525334055;Get the sort setting.;public SortBy sort() {_        return sort__    };get,the,sort,setting;public,sort,by,sort,return,sort
TermSuggestionBuilder -> public SortBy sort();1533738061;Get the sort setting.;public SortBy sort() {_        return sort__    };get,the,sort,setting;public,sort,by,sort,return,sort
TermSuggestionBuilder -> public SortBy sort();1536314350;Get the sort setting.;public SortBy sort() {_        return sort__    };get,the,sort,setting;public,sort,by,sort,return,sort
TermSuggestionBuilder -> public TermSuggestionBuilder minDocFreq(float minDocFreq);1524684173;Sets a minimal threshold in number of documents a suggested term should_appear in. This can be specified as an absolute number or as a relative_percentage of number of documents. This can improve quality by only_suggesting high frequency terms. Defaults to 0f and is not enabled. If a_value higher than 1 is specified then the number cannot be fractional.;public TermSuggestionBuilder minDocFreq(float minDocFreq) {_        if (minDocFreq < 0.0f) {_            throw new IllegalArgumentException("minDocFreq must be positive")__        }_        if (minDocFreq > 1.0f && minDocFreq != Math.floor(minDocFreq)) {_            throw new IllegalArgumentException("if minDocFreq is greater than 1, it must not be a fraction")__        }_        this.minDocFreq = minDocFreq__        return this__    };sets,a,minimal,threshold,in,number,of,documents,a,suggested,term,should,appear,in,this,can,be,specified,as,an,absolute,number,or,as,a,relative,percentage,of,number,of,documents,this,can,improve,quality,by,only,suggesting,high,frequency,terms,defaults,to,0f,and,is,not,enabled,if,a,value,higher,than,1,is,specified,then,the,number,cannot,be,fractional;public,term,suggestion,builder,min,doc,freq,float,min,doc,freq,if,min,doc,freq,0,0f,throw,new,illegal,argument,exception,min,doc,freq,must,be,positive,if,min,doc,freq,1,0f,min,doc,freq,math,floor,min,doc,freq,throw,new,illegal,argument,exception,if,min,doc,freq,is,greater,than,1,it,must,not,be,a,fraction,this,min,doc,freq,min,doc,freq,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder minDocFreq(float minDocFreq);1525334055;Sets a minimal threshold in number of documents a suggested term should_appear in. This can be specified as an absolute number or as a relative_percentage of number of documents. This can improve quality by only_suggesting high frequency terms. Defaults to 0f and is not enabled. If a_value higher than 1 is specified then the number cannot be fractional.;public TermSuggestionBuilder minDocFreq(float minDocFreq) {_        if (minDocFreq < 0.0f) {_            throw new IllegalArgumentException("minDocFreq must be positive")__        }_        if (minDocFreq > 1.0f && minDocFreq != Math.floor(minDocFreq)) {_            throw new IllegalArgumentException("if minDocFreq is greater than 1, it must not be a fraction")__        }_        this.minDocFreq = minDocFreq__        return this__    };sets,a,minimal,threshold,in,number,of,documents,a,suggested,term,should,appear,in,this,can,be,specified,as,an,absolute,number,or,as,a,relative,percentage,of,number,of,documents,this,can,improve,quality,by,only,suggesting,high,frequency,terms,defaults,to,0f,and,is,not,enabled,if,a,value,higher,than,1,is,specified,then,the,number,cannot,be,fractional;public,term,suggestion,builder,min,doc,freq,float,min,doc,freq,if,min,doc,freq,0,0f,throw,new,illegal,argument,exception,min,doc,freq,must,be,positive,if,min,doc,freq,1,0f,min,doc,freq,math,floor,min,doc,freq,throw,new,illegal,argument,exception,if,min,doc,freq,is,greater,than,1,it,must,not,be,a,fraction,this,min,doc,freq,min,doc,freq,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder minDocFreq(float minDocFreq);1533738061;Sets a minimal threshold in number of documents a suggested term should_appear in. This can be specified as an absolute number or as a relative_percentage of number of documents. This can improve quality by only_suggesting high frequency terms. Defaults to 0f and is not enabled. If a_value higher than 1 is specified then the number cannot be fractional.;public TermSuggestionBuilder minDocFreq(float minDocFreq) {_        if (minDocFreq < 0.0f) {_            throw new IllegalArgumentException("minDocFreq must be positive")__        }_        if (minDocFreq > 1.0f && minDocFreq != Math.floor(minDocFreq)) {_            throw new IllegalArgumentException("if minDocFreq is greater than 1, it must not be a fraction")__        }_        this.minDocFreq = minDocFreq__        return this__    };sets,a,minimal,threshold,in,number,of,documents,a,suggested,term,should,appear,in,this,can,be,specified,as,an,absolute,number,or,as,a,relative,percentage,of,number,of,documents,this,can,improve,quality,by,only,suggesting,high,frequency,terms,defaults,to,0f,and,is,not,enabled,if,a,value,higher,than,1,is,specified,then,the,number,cannot,be,fractional;public,term,suggestion,builder,min,doc,freq,float,min,doc,freq,if,min,doc,freq,0,0f,throw,new,illegal,argument,exception,min,doc,freq,must,be,positive,if,min,doc,freq,1,0f,min,doc,freq,math,floor,min,doc,freq,throw,new,illegal,argument,exception,if,min,doc,freq,is,greater,than,1,it,must,not,be,a,fraction,this,min,doc,freq,min,doc,freq,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder minDocFreq(float minDocFreq);1536314350;Sets a minimal threshold in number of documents a suggested term should_appear in. This can be specified as an absolute number or as a relative_percentage of number of documents. This can improve quality by only_suggesting high frequency terms. Defaults to 0f and is not enabled. If a_value higher than 1 is specified then the number cannot be fractional.;public TermSuggestionBuilder minDocFreq(float minDocFreq) {_        if (minDocFreq < 0.0f) {_            throw new IllegalArgumentException("minDocFreq must be positive")__        }_        if (minDocFreq > 1.0f && minDocFreq != Math.floor(minDocFreq)) {_            throw new IllegalArgumentException("if minDocFreq is greater than 1, it must not be a fraction")__        }_        this.minDocFreq = minDocFreq__        return this__    };sets,a,minimal,threshold,in,number,of,documents,a,suggested,term,should,appear,in,this,can,be,specified,as,an,absolute,number,or,as,a,relative,percentage,of,number,of,documents,this,can,improve,quality,by,only,suggesting,high,frequency,terms,defaults,to,0f,and,is,not,enabled,if,a,value,higher,than,1,is,specified,then,the,number,cannot,be,fractional;public,term,suggestion,builder,min,doc,freq,float,min,doc,freq,if,min,doc,freq,0,0f,throw,new,illegal,argument,exception,min,doc,freq,must,be,positive,if,min,doc,freq,1,0f,min,doc,freq,math,floor,min,doc,freq,throw,new,illegal,argument,exception,if,min,doc,freq,is,greater,than,1,it,must,not,be,a,fraction,this,min,doc,freq,min,doc,freq,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder accuracy(float accuracy);1524684173;s how similar the suggested terms at least need to be compared to the_original suggest text tokens. A value between 0 and 1 can be specified._This value will be compared to the string distance result of each_candidate spelling correction._<p>_Default is <tt>0.5</tt>;public TermSuggestionBuilder accuracy(float accuracy) {_        if (accuracy < 0.0f || accuracy > 1.0f) {_            throw new IllegalArgumentException("accuracy must be between 0 and 1")__        }_        this.accuracy = accuracy__        return this__    };s,how,similar,the,suggested,terms,at,least,need,to,be,compared,to,the,original,suggest,text,tokens,a,value,between,0,and,1,can,be,specified,this,value,will,be,compared,to,the,string,distance,result,of,each,candidate,spelling,correction,p,default,is,tt,0,5,tt;public,term,suggestion,builder,accuracy,float,accuracy,if,accuracy,0,0f,accuracy,1,0f,throw,new,illegal,argument,exception,accuracy,must,be,between,0,and,1,this,accuracy,accuracy,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder accuracy(float accuracy);1525334055;s how similar the suggested terms at least need to be compared to the_original suggest text tokens. A value between 0 and 1 can be specified._This value will be compared to the string distance result of each_candidate spelling correction._<p>_Default is {@code 0.5};public TermSuggestionBuilder accuracy(float accuracy) {_        if (accuracy < 0.0f || accuracy > 1.0f) {_            throw new IllegalArgumentException("accuracy must be between 0 and 1")__        }_        this.accuracy = accuracy__        return this__    };s,how,similar,the,suggested,terms,at,least,need,to,be,compared,to,the,original,suggest,text,tokens,a,value,between,0,and,1,can,be,specified,this,value,will,be,compared,to,the,string,distance,result,of,each,candidate,spelling,correction,p,default,is,code,0,5;public,term,suggestion,builder,accuracy,float,accuracy,if,accuracy,0,0f,accuracy,1,0f,throw,new,illegal,argument,exception,accuracy,must,be,between,0,and,1,this,accuracy,accuracy,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder accuracy(float accuracy);1533738061;s how similar the suggested terms at least need to be compared to the_original suggest text tokens. A value between 0 and 1 can be specified._This value will be compared to the string distance result of each_candidate spelling correction._<p>_Default is {@code 0.5};public TermSuggestionBuilder accuracy(float accuracy) {_        if (accuracy < 0.0f || accuracy > 1.0f) {_            throw new IllegalArgumentException("accuracy must be between 0 and 1")__        }_        this.accuracy = accuracy__        return this__    };s,how,similar,the,suggested,terms,at,least,need,to,be,compared,to,the,original,suggest,text,tokens,a,value,between,0,and,1,can,be,specified,this,value,will,be,compared,to,the,string,distance,result,of,each,candidate,spelling,correction,p,default,is,code,0,5;public,term,suggestion,builder,accuracy,float,accuracy,if,accuracy,0,0f,accuracy,1,0f,throw,new,illegal,argument,exception,accuracy,must,be,between,0,and,1,this,accuracy,accuracy,return,this
TermSuggestionBuilder -> public TermSuggestionBuilder accuracy(float accuracy);1536314350;s how similar the suggested terms at least need to be compared to the_original suggest text tokens. A value between 0 and 1 can be specified._This value will be compared to the string distance result of each_candidate spelling correction._<p>_Default is {@code 0.5};public TermSuggestionBuilder accuracy(float accuracy) {_        if (accuracy < 0.0f || accuracy > 1.0f) {_            throw new IllegalArgumentException("accuracy must be between 0 and 1")__        }_        this.accuracy = accuracy__        return this__    };s,how,similar,the,suggested,terms,at,least,need,to,be,compared,to,the,original,suggest,text,tokens,a,value,between,0,and,1,can,be,specified,this,value,will,be,compared,to,the,string,distance,result,of,each,candidate,spelling,correction,p,default,is,code,0,5;public,term,suggestion,builder,accuracy,float,accuracy,if,accuracy,0,0f,accuracy,1,0f,throw,new,illegal,argument,exception,accuracy,must,be,between,0,and,1,this,accuracy,accuracy,return,this
