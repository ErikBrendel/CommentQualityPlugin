commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;6;;@Override public final void doWriteTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(format).     gapPolicy.writeTo(out).     innerWriteTo(out). }
false;protected;1;2;;protected void innerWriteTo(StreamOutput out) throws IOException { }
false;public,final;2;19;;@Override public final InternalAggregation doReduce(Aggregations aggregations, ReduceContext context) {     preCollection().     List<String> bucketsPath = AggregationPath.parse(bucketsPaths()[0]).getPathElementsAsStringList().     for (Aggregation aggregation : aggregations) {         if (aggregation.getName().equals(bucketsPath.get(0))) {             List<String> sublistedPath = bucketsPath.subList(1, bucketsPath.size()).             InternalMultiBucketAggregation<?, ?> multiBucketsAgg = (InternalMultiBucketAggregation<?, ?>) aggregation.             List<? extends InternalMultiBucketAggregation.InternalBucket> buckets = multiBucketsAgg.getBuckets().             for (InternalMultiBucketAggregation.InternalBucket bucket : buckets) {                 Double bucketValue = BucketHelpers.resolveBucketValue(multiBucketsAgg, bucket, sublistedPath, gapPolicy).                 if (bucketValue != null && !Double.isNaN(bucketValue)) {                     collectBucketValue(bucket.getKeyAsString(), bucketValue).                 }             }         }     }     return buildAggregation(Collections.emptyList(), metaData()). }
true;protected;0;2;/**  * Called before initial collection and between successive collection runs.  * A chance to initialize or re-initialize state  */ ;/**  * Called before initial collection and between successive collection runs.  * A chance to initialize or re-initialize state  */ protected void preCollection() { }
true;protected,abstract;2;1;/**  * Called after a collection run is finished to build the aggregation for  * the collected state.  *  * @param pipelineAggregators  *            the pipeline aggregators to add to the resulting aggregation  * @param metadata  *            the metadata to add to the resulting aggregation  */ ;/**  * Called after a collection run is finished to build the aggregation for  * the collected state.  *  * @param pipelineAggregators  *            the pipeline aggregators to add to the resulting aggregation  * @param metadata  *            the metadata to add to the resulting aggregation  */ protected abstract InternalAggregation buildAggregation(List<PipelineAggregator> pipelineAggregators, Map<String, Object> metadata).
true;protected,abstract;2;1;/**  * Called for each bucket with a value so the state can be modified based on  * the key and metric value for this bucket  *  * @param bucketKey  *            the key for this bucket as a String  * @param bucketValue  *            the value of the metric specified in <code>bucketsPath</code>  *            for this bucket  */ ;/**  * Called for each bucket with a value so the state can be modified based on  * the key and metric value for this bucket  *  * @param bucketKey  *            the key for this bucket as a String  * @param bucketValue  *            the value of the metric specified in <code>bucketsPath</code>  *            for this bucket  */ protected abstract void collectBucketValue(String bucketKey, Double bucketValue).
