# id;timestamp;commentText;codeText;commentWords;codeWords
MetaDataDeleteIndexService -> public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices);1524684173;Delete some indices from the cluster state.;public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices) {_        final MetaData meta = currentState.metaData()__        final Set<IndexMetaData> metaDatas = indices.stream().map(i -> meta.getIndexSafe(i)).collect(toSet())__        _        SnapshotsService.checkIndexDeletion(currentState, metaDatas)__        RoutingTable.Builder routingTableBuilder = RoutingTable.builder(currentState.routingTable())__        MetaData.Builder metaDataBuilder = MetaData.builder(meta)__        ClusterBlocks.Builder clusterBlocksBuilder = ClusterBlocks.builder().blocks(currentState.blocks())___        final IndexGraveyard.Builder graveyardBuilder = IndexGraveyard.builder(metaDataBuilder.indexGraveyard())__        final int previousGraveyardSize = graveyardBuilder.tombstones().size()__        for (final Index index : indices) {_            String indexName = index.getName()__            logger.info("{} deleting index", index)__            routingTableBuilder.remove(indexName)__            clusterBlocksBuilder.removeIndexBlocks(indexName)__            metaDataBuilder.remove(indexName)__        }_        _        final IndexGraveyard currentGraveyard = graveyardBuilder.addTombstones(indices).build(settings)__        metaDataBuilder.indexGraveyard(currentGraveyard)_ _        logger.trace("{} tombstones purged from the cluster state. Previous tombstone size: {}. Current tombstone size: {}.",_            graveyardBuilder.getNumPurged(), previousGraveyardSize, currentGraveyard.getTombstones().size())___        MetaData newMetaData = metaDataBuilder.build()__        ClusterBlocks blocks = clusterBlocksBuilder.build()___        _        ImmutableOpenMap<String, ClusterState.Custom> customs = currentState.getCustoms()__        final RestoreInProgress restoreInProgress = currentState.custom(RestoreInProgress.TYPE)__        if (restoreInProgress != null) {_            RestoreInProgress updatedRestoreInProgress = RestoreService.updateRestoreStateWithDeletedIndices(restoreInProgress, indices)__            if (updatedRestoreInProgress != restoreInProgress) {_                ImmutableOpenMap.Builder<String, ClusterState.Custom> builder = ImmutableOpenMap.builder(customs)__                builder.put(RestoreInProgress.TYPE, updatedRestoreInProgress)__                customs = builder.build()__            }_        }__        return allocationService.reroute(_                ClusterState.builder(currentState)_                    .routingTable(routingTableBuilder.build())_                    .metaData(newMetaData)_                    .blocks(blocks)_                    .customs(customs)_                    .build(),_                "deleted indices [" + indices + "]")__    };delete,some,indices,from,the,cluster,state;public,cluster,state,delete,indices,cluster,state,current,state,set,index,indices,final,meta,data,meta,current,state,meta,data,final,set,index,meta,data,meta,datas,indices,stream,map,i,meta,get,index,safe,i,collect,to,set,snapshots,service,check,index,deletion,current,state,meta,datas,routing,table,builder,routing,table,builder,routing,table,builder,current,state,routing,table,meta,data,builder,meta,data,builder,meta,data,builder,meta,cluster,blocks,builder,cluster,blocks,builder,cluster,blocks,builder,blocks,current,state,blocks,final,index,graveyard,builder,graveyard,builder,index,graveyard,builder,meta,data,builder,index,graveyard,final,int,previous,graveyard,size,graveyard,builder,tombstones,size,for,final,index,index,indices,string,index,name,index,get,name,logger,info,deleting,index,index,routing,table,builder,remove,index,name,cluster,blocks,builder,remove,index,blocks,index,name,meta,data,builder,remove,index,name,final,index,graveyard,current,graveyard,graveyard,builder,add,tombstones,indices,build,settings,meta,data,builder,index,graveyard,current,graveyard,logger,trace,tombstones,purged,from,the,cluster,state,previous,tombstone,size,current,tombstone,size,graveyard,builder,get,num,purged,previous,graveyard,size,current,graveyard,get,tombstones,size,meta,data,new,meta,data,meta,data,builder,build,cluster,blocks,blocks,cluster,blocks,builder,build,immutable,open,map,string,cluster,state,custom,customs,current,state,get,customs,final,restore,in,progress,restore,in,progress,current,state,custom,restore,in,progress,type,if,restore,in,progress,null,restore,in,progress,updated,restore,in,progress,restore,service,update,restore,state,with,deleted,indices,restore,in,progress,indices,if,updated,restore,in,progress,restore,in,progress,immutable,open,map,builder,string,cluster,state,custom,builder,immutable,open,map,builder,customs,builder,put,restore,in,progress,type,updated,restore,in,progress,customs,builder,build,return,allocation,service,reroute,cluster,state,builder,current,state,routing,table,routing,table,builder,build,meta,data,new,meta,data,blocks,blocks,customs,customs,build,deleted,indices,indices
MetaDataDeleteIndexService -> public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices);1541008027;Delete some indices from the cluster state.;public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices) {_        final MetaData meta = currentState.metaData()__        final Set<IndexMetaData> metaDatas = indices.stream().map(i -> meta.getIndexSafe(i)).collect(toSet())__        _        SnapshotsService.checkIndexDeletion(currentState, metaDatas)__        RoutingTable.Builder routingTableBuilder = RoutingTable.builder(currentState.routingTable())__        MetaData.Builder metaDataBuilder = MetaData.builder(meta)__        ClusterBlocks.Builder clusterBlocksBuilder = ClusterBlocks.builder().blocks(currentState.blocks())___        final IndexGraveyard.Builder graveyardBuilder = IndexGraveyard.builder(metaDataBuilder.indexGraveyard())__        final int previousGraveyardSize = graveyardBuilder.tombstones().size()__        for (final Index index : indices) {_            String indexName = index.getName()__            logger.info("{} deleting index", index)__            routingTableBuilder.remove(indexName)__            clusterBlocksBuilder.removeIndexBlocks(indexName)__            metaDataBuilder.remove(indexName)__        }_        _        final IndexGraveyard currentGraveyard = graveyardBuilder.addTombstones(indices).build(settings)__        metaDataBuilder.indexGraveyard(currentGraveyard)_ _        logger.trace("{} tombstones purged from the cluster state. Previous tombstone size: {}. Current tombstone size: {}.",_            graveyardBuilder.getNumPurged(), previousGraveyardSize, currentGraveyard.getTombstones().size())___        MetaData newMetaData = metaDataBuilder.build()__        ClusterBlocks blocks = clusterBlocksBuilder.build()___        _        ImmutableOpenMap<String, ClusterState.Custom> customs = currentState.getCustoms()__        final RestoreInProgress restoreInProgress = currentState.custom(RestoreInProgress.TYPE)__        if (restoreInProgress != null) {_            RestoreInProgress updatedRestoreInProgress = RestoreService.updateRestoreStateWithDeletedIndices(restoreInProgress, indices)__            if (updatedRestoreInProgress != restoreInProgress) {_                ImmutableOpenMap.Builder<String, ClusterState.Custom> builder = ImmutableOpenMap.builder(customs)__                builder.put(RestoreInProgress.TYPE, updatedRestoreInProgress)__                customs = builder.build()__            }_        }__        return allocationService.reroute(_                ClusterState.builder(currentState)_                    .routingTable(routingTableBuilder.build())_                    .metaData(newMetaData)_                    .blocks(blocks)_                    .customs(customs)_                    .build(),_                "deleted indices [" + indices + "]")__    };delete,some,indices,from,the,cluster,state;public,cluster,state,delete,indices,cluster,state,current,state,set,index,indices,final,meta,data,meta,current,state,meta,data,final,set,index,meta,data,meta,datas,indices,stream,map,i,meta,get,index,safe,i,collect,to,set,snapshots,service,check,index,deletion,current,state,meta,datas,routing,table,builder,routing,table,builder,routing,table,builder,current,state,routing,table,meta,data,builder,meta,data,builder,meta,data,builder,meta,cluster,blocks,builder,cluster,blocks,builder,cluster,blocks,builder,blocks,current,state,blocks,final,index,graveyard,builder,graveyard,builder,index,graveyard,builder,meta,data,builder,index,graveyard,final,int,previous,graveyard,size,graveyard,builder,tombstones,size,for,final,index,index,indices,string,index,name,index,get,name,logger,info,deleting,index,index,routing,table,builder,remove,index,name,cluster,blocks,builder,remove,index,blocks,index,name,meta,data,builder,remove,index,name,final,index,graveyard,current,graveyard,graveyard,builder,add,tombstones,indices,build,settings,meta,data,builder,index,graveyard,current,graveyard,logger,trace,tombstones,purged,from,the,cluster,state,previous,tombstone,size,current,tombstone,size,graveyard,builder,get,num,purged,previous,graveyard,size,current,graveyard,get,tombstones,size,meta,data,new,meta,data,meta,data,builder,build,cluster,blocks,blocks,cluster,blocks,builder,build,immutable,open,map,string,cluster,state,custom,customs,current,state,get,customs,final,restore,in,progress,restore,in,progress,current,state,custom,restore,in,progress,type,if,restore,in,progress,null,restore,in,progress,updated,restore,in,progress,restore,service,update,restore,state,with,deleted,indices,restore,in,progress,indices,if,updated,restore,in,progress,restore,in,progress,immutable,open,map,builder,string,cluster,state,custom,builder,immutable,open,map,builder,customs,builder,put,restore,in,progress,type,updated,restore,in,progress,customs,builder,build,return,allocation,service,reroute,cluster,state,builder,current,state,routing,table,routing,table,builder,build,meta,data,new,meta,data,blocks,blocks,customs,customs,build,deleted,indices,indices
MetaDataDeleteIndexService -> public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices);1541092382;Delete some indices from the cluster state.;public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices) {_        final MetaData meta = currentState.metaData()__        final Set<IndexMetaData> metaDatas = indices.stream().map(i -> meta.getIndexSafe(i)).collect(toSet())__        _        SnapshotsService.checkIndexDeletion(currentState, metaDatas)__        RoutingTable.Builder routingTableBuilder = RoutingTable.builder(currentState.routingTable())__        MetaData.Builder metaDataBuilder = MetaData.builder(meta)__        ClusterBlocks.Builder clusterBlocksBuilder = ClusterBlocks.builder().blocks(currentState.blocks())___        final IndexGraveyard.Builder graveyardBuilder = IndexGraveyard.builder(metaDataBuilder.indexGraveyard())__        final int previousGraveyardSize = graveyardBuilder.tombstones().size()__        for (final Index index : indices) {_            String indexName = index.getName()__            logger.info("{} deleting index", index)__            routingTableBuilder.remove(indexName)__            clusterBlocksBuilder.removeIndexBlocks(indexName)__            metaDataBuilder.remove(indexName)__        }_        _        final IndexGraveyard currentGraveyard = graveyardBuilder.addTombstones(indices).build(settings)__        metaDataBuilder.indexGraveyard(currentGraveyard)_ _        logger.trace("{} tombstones purged from the cluster state. Previous tombstone size: {}. Current tombstone size: {}.",_            graveyardBuilder.getNumPurged(), previousGraveyardSize, currentGraveyard.getTombstones().size())___        MetaData newMetaData = metaDataBuilder.build()__        ClusterBlocks blocks = clusterBlocksBuilder.build()___        _        ImmutableOpenMap<String, ClusterState.Custom> customs = currentState.getCustoms()__        final RestoreInProgress restoreInProgress = currentState.custom(RestoreInProgress.TYPE)__        if (restoreInProgress != null) {_            RestoreInProgress updatedRestoreInProgress = RestoreService.updateRestoreStateWithDeletedIndices(restoreInProgress, indices)__            if (updatedRestoreInProgress != restoreInProgress) {_                ImmutableOpenMap.Builder<String, ClusterState.Custom> builder = ImmutableOpenMap.builder(customs)__                builder.put(RestoreInProgress.TYPE, updatedRestoreInProgress)__                customs = builder.build()__            }_        }__        return allocationService.reroute(_                ClusterState.builder(currentState)_                    .routingTable(routingTableBuilder.build())_                    .metaData(newMetaData)_                    .blocks(blocks)_                    .customs(customs)_                    .build(),_                "deleted indices [" + indices + "]")__    };delete,some,indices,from,the,cluster,state;public,cluster,state,delete,indices,cluster,state,current,state,set,index,indices,final,meta,data,meta,current,state,meta,data,final,set,index,meta,data,meta,datas,indices,stream,map,i,meta,get,index,safe,i,collect,to,set,snapshots,service,check,index,deletion,current,state,meta,datas,routing,table,builder,routing,table,builder,routing,table,builder,current,state,routing,table,meta,data,builder,meta,data,builder,meta,data,builder,meta,cluster,blocks,builder,cluster,blocks,builder,cluster,blocks,builder,blocks,current,state,blocks,final,index,graveyard,builder,graveyard,builder,index,graveyard,builder,meta,data,builder,index,graveyard,final,int,previous,graveyard,size,graveyard,builder,tombstones,size,for,final,index,index,indices,string,index,name,index,get,name,logger,info,deleting,index,index,routing,table,builder,remove,index,name,cluster,blocks,builder,remove,index,blocks,index,name,meta,data,builder,remove,index,name,final,index,graveyard,current,graveyard,graveyard,builder,add,tombstones,indices,build,settings,meta,data,builder,index,graveyard,current,graveyard,logger,trace,tombstones,purged,from,the,cluster,state,previous,tombstone,size,current,tombstone,size,graveyard,builder,get,num,purged,previous,graveyard,size,current,graveyard,get,tombstones,size,meta,data,new,meta,data,meta,data,builder,build,cluster,blocks,blocks,cluster,blocks,builder,build,immutable,open,map,string,cluster,state,custom,customs,current,state,get,customs,final,restore,in,progress,restore,in,progress,current,state,custom,restore,in,progress,type,if,restore,in,progress,null,restore,in,progress,updated,restore,in,progress,restore,service,update,restore,state,with,deleted,indices,restore,in,progress,indices,if,updated,restore,in,progress,restore,in,progress,immutable,open,map,builder,string,cluster,state,custom,builder,immutable,open,map,builder,customs,builder,put,restore,in,progress,type,updated,restore,in,progress,customs,builder,build,return,allocation,service,reroute,cluster,state,builder,current,state,routing,table,routing,table,builder,build,meta,data,new,meta,data,blocks,blocks,customs,customs,build,deleted,indices,indices
MetaDataDeleteIndexService -> public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices);1542402632;Delete some indices from the cluster state.;public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices) {_        final MetaData meta = currentState.metaData()__        final Set<IndexMetaData> metaDatas = indices.stream().map(i -> meta.getIndexSafe(i)).collect(toSet())__        _        SnapshotsService.checkIndexDeletion(currentState, metaDatas)__        RoutingTable.Builder routingTableBuilder = RoutingTable.builder(currentState.routingTable())__        MetaData.Builder metaDataBuilder = MetaData.builder(meta)__        ClusterBlocks.Builder clusterBlocksBuilder = ClusterBlocks.builder().blocks(currentState.blocks())___        final IndexGraveyard.Builder graveyardBuilder = IndexGraveyard.builder(metaDataBuilder.indexGraveyard())__        final int previousGraveyardSize = graveyardBuilder.tombstones().size()__        for (final Index index : indices) {_            String indexName = index.getName()__            logger.info("{} deleting index", index)__            routingTableBuilder.remove(indexName)__            clusterBlocksBuilder.removeIndexBlocks(indexName)__            metaDataBuilder.remove(indexName)__        }_        _        final IndexGraveyard currentGraveyard = graveyardBuilder.addTombstones(indices).build(settings)__        metaDataBuilder.indexGraveyard(currentGraveyard)_ _        logger.trace("{} tombstones purged from the cluster state. Previous tombstone size: {}. Current tombstone size: {}.",_            graveyardBuilder.getNumPurged(), previousGraveyardSize, currentGraveyard.getTombstones().size())___        MetaData newMetaData = metaDataBuilder.build()__        ClusterBlocks blocks = clusterBlocksBuilder.build()___        _        ImmutableOpenMap<String, ClusterState.Custom> customs = currentState.getCustoms()__        final RestoreInProgress restoreInProgress = currentState.custom(RestoreInProgress.TYPE)__        if (restoreInProgress != null) {_            RestoreInProgress updatedRestoreInProgress = RestoreService.updateRestoreStateWithDeletedIndices(restoreInProgress, indices)__            if (updatedRestoreInProgress != restoreInProgress) {_                ImmutableOpenMap.Builder<String, ClusterState.Custom> builder = ImmutableOpenMap.builder(customs)__                builder.put(RestoreInProgress.TYPE, updatedRestoreInProgress)__                customs = builder.build()__            }_        }__        return allocationService.reroute(_                ClusterState.builder(currentState)_                    .routingTable(routingTableBuilder.build())_                    .metaData(newMetaData)_                    .blocks(blocks)_                    .customs(customs)_                    .build(),_                "deleted indices [" + indices + "]")__    };delete,some,indices,from,the,cluster,state;public,cluster,state,delete,indices,cluster,state,current,state,set,index,indices,final,meta,data,meta,current,state,meta,data,final,set,index,meta,data,meta,datas,indices,stream,map,i,meta,get,index,safe,i,collect,to,set,snapshots,service,check,index,deletion,current,state,meta,datas,routing,table,builder,routing,table,builder,routing,table,builder,current,state,routing,table,meta,data,builder,meta,data,builder,meta,data,builder,meta,cluster,blocks,builder,cluster,blocks,builder,cluster,blocks,builder,blocks,current,state,blocks,final,index,graveyard,builder,graveyard,builder,index,graveyard,builder,meta,data,builder,index,graveyard,final,int,previous,graveyard,size,graveyard,builder,tombstones,size,for,final,index,index,indices,string,index,name,index,get,name,logger,info,deleting,index,index,routing,table,builder,remove,index,name,cluster,blocks,builder,remove,index,blocks,index,name,meta,data,builder,remove,index,name,final,index,graveyard,current,graveyard,graveyard,builder,add,tombstones,indices,build,settings,meta,data,builder,index,graveyard,current,graveyard,logger,trace,tombstones,purged,from,the,cluster,state,previous,tombstone,size,current,tombstone,size,graveyard,builder,get,num,purged,previous,graveyard,size,current,graveyard,get,tombstones,size,meta,data,new,meta,data,meta,data,builder,build,cluster,blocks,blocks,cluster,blocks,builder,build,immutable,open,map,string,cluster,state,custom,customs,current,state,get,customs,final,restore,in,progress,restore,in,progress,current,state,custom,restore,in,progress,type,if,restore,in,progress,null,restore,in,progress,updated,restore,in,progress,restore,service,update,restore,state,with,deleted,indices,restore,in,progress,indices,if,updated,restore,in,progress,restore,in,progress,immutable,open,map,builder,string,cluster,state,custom,builder,immutable,open,map,builder,customs,builder,put,restore,in,progress,type,updated,restore,in,progress,customs,builder,build,return,allocation,service,reroute,cluster,state,builder,current,state,routing,table,routing,table,builder,build,meta,data,new,meta,data,blocks,blocks,customs,customs,build,deleted,indices,indices
