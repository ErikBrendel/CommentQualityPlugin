commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;18;/**  * Reads the sequence number stats from the commit data (maximum sequence number and local checkpoint).  *  * @param commitData       the commit data  * @return the sequence number stats  */ ;/**  * Reads the sequence number stats from the commit data (maximum sequence number and local checkpoint).  *  * @param commitData       the commit data  * @return the sequence number stats  */ public static CommitInfo loadSeqNoInfoFromLuceneCommit(final Iterable<Map.Entry<String, String>> commitData) {     long maxSeqNo = NO_OPS_PERFORMED.     long localCheckpoint = NO_OPS_PERFORMED.     for (final Map.Entry<String, String> entry : commitData) {         final String key = entry.getKey().         if (key.equals(SequenceNumbers.LOCAL_CHECKPOINT_KEY)) {             assert localCheckpoint == NO_OPS_PERFORMED : localCheckpoint.             localCheckpoint = Long.parseLong(entry.getValue()).         } else if (key.equals(SequenceNumbers.MAX_SEQ_NO)) {             assert maxSeqNo == NO_OPS_PERFORMED : maxSeqNo.             maxSeqNo = Long.parseLong(entry.getValue()).         }     }     return new CommitInfo(maxSeqNo, localCheckpoint). }
true;public,static;2;12;/**  * Compute the minimum of the given current minimum sequence number and the specified sequence number, accounting for the fact that the  * current minimum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or  * {@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current minimum sequence number is not  * {@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number  * must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.  *  * @param minSeqNo the current minimum sequence number  * @param seqNo the specified sequence number  * @return the new minimum sequence number  */ ;/**  * Compute the minimum of the given current minimum sequence number and the specified sequence number, accounting for the fact that the  * current minimum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or  * {@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current minimum sequence number is not  * {@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number  * must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.  *  * @param minSeqNo the current minimum sequence number  * @param seqNo the specified sequence number  * @return the new minimum sequence number  */ public static long min(final long minSeqNo, final long seqNo) {     if (minSeqNo == NO_OPS_PERFORMED) {         return seqNo.     } else if (minSeqNo == UNASSIGNED_SEQ_NO) {         return seqNo.     } else {         if (seqNo == UNASSIGNED_SEQ_NO) {             throw new IllegalArgumentException("sequence number must be assigned").         }         return Math.min(minSeqNo, seqNo).     } }
true;public,static;2;12;/**  * Compute the maximum of the given current maximum sequence number and the specified sequence number, accounting for the fact that the  * current maximum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or  * {@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current maximum sequence number is not  * {@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number  * must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.  *  * @param maxSeqNo the current maximum sequence number  * @param seqNo the specified sequence number  * @return the new maximum sequence number  */ ;/**  * Compute the maximum of the given current maximum sequence number and the specified sequence number, accounting for the fact that the  * current maximum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or  * {@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current maximum sequence number is not  * {@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number  * must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.  *  * @param maxSeqNo the current maximum sequence number  * @param seqNo the specified sequence number  * @return the new maximum sequence number  */ public static long max(final long maxSeqNo, final long seqNo) {     if (maxSeqNo == NO_OPS_PERFORMED) {         return seqNo.     } else if (maxSeqNo == UNASSIGNED_SEQ_NO) {         return seqNo.     } else {         if (seqNo == UNASSIGNED_SEQ_NO) {             throw new IllegalArgumentException("sequence number must be assigned").         }         return Math.max(maxSeqNo, seqNo).     } }
false;public;0;7;;@Override public String toString() {     return "CommitInfo{" + "maxSeqNo=" + maxSeqNo + ", localCheckpoint=" + localCheckpoint + '}'. }
