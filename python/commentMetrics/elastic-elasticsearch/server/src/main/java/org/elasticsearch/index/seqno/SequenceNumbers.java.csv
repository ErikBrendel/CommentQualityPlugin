# id;timestamp;commentText;codeText;commentWords;codeWords
SequenceNumbers -> public static CommitInfo loadSeqNoInfoFromLuceneCommit(         final Iterable<Map.Entry<String, String>> commitData);1524684173;Reads the sequence number stats from the commit data (maximum sequence number and local checkpoint).__@param commitData       the commit data_@return the sequence number stats;public static CommitInfo loadSeqNoInfoFromLuceneCommit(_        final Iterable<Map.Entry<String, String>> commitData) {_        long maxSeqNo = NO_OPS_PERFORMED__        long localCheckpoint = NO_OPS_PERFORMED___        for (final Map.Entry<String, String> entry : commitData) {_            final String key = entry.getKey()__            if (key.equals(SequenceNumbers.LOCAL_CHECKPOINT_KEY)) {_                assert localCheckpoint == NO_OPS_PERFORMED : localCheckpoint__                localCheckpoint = Long.parseLong(entry.getValue())__            } else if (key.equals(SequenceNumbers.MAX_SEQ_NO)) {_                assert maxSeqNo == NO_OPS_PERFORMED : maxSeqNo__                maxSeqNo = Long.parseLong(entry.getValue())__            }_        }__        return new CommitInfo(maxSeqNo, localCheckpoint)__    };reads,the,sequence,number,stats,from,the,commit,data,maximum,sequence,number,and,local,checkpoint,param,commit,data,the,commit,data,return,the,sequence,number,stats;public,static,commit,info,load,seq,no,info,from,lucene,commit,final,iterable,map,entry,string,string,commit,data,long,max,seq,no,long,local,checkpoint,for,final,map,entry,string,string,entry,commit,data,final,string,key,entry,get,key,if,key,equals,sequence,numbers,assert,local,checkpoint,local,checkpoint,local,checkpoint,long,parse,long,entry,get,value,else,if,key,equals,sequence,numbers,assert,max,seq,no,max,seq,no,max,seq,no,long,parse,long,entry,get,value,return,new,commit,info,max,seq,no,local,checkpoint
SequenceNumbers -> public static CommitInfo loadSeqNoInfoFromLuceneCommit(         final Iterable<Map.Entry<String, String>> commitData);1528706846;Reads the sequence number stats from the commit data (maximum sequence number and local checkpoint).__@param commitData       the commit data_@return the sequence number stats;public static CommitInfo loadSeqNoInfoFromLuceneCommit(_        final Iterable<Map.Entry<String, String>> commitData) {_        long maxSeqNo = NO_OPS_PERFORMED__        long localCheckpoint = NO_OPS_PERFORMED___        for (final Map.Entry<String, String> entry : commitData) {_            final String key = entry.getKey()__            if (key.equals(SequenceNumbers.LOCAL_CHECKPOINT_KEY)) {_                assert localCheckpoint == NO_OPS_PERFORMED : localCheckpoint__                localCheckpoint = Long.parseLong(entry.getValue())__            } else if (key.equals(SequenceNumbers.MAX_SEQ_NO)) {_                assert maxSeqNo == NO_OPS_PERFORMED : maxSeqNo__                maxSeqNo = Long.parseLong(entry.getValue())__            }_        }__        return new CommitInfo(maxSeqNo, localCheckpoint)__    };reads,the,sequence,number,stats,from,the,commit,data,maximum,sequence,number,and,local,checkpoint,param,commit,data,the,commit,data,return,the,sequence,number,stats;public,static,commit,info,load,seq,no,info,from,lucene,commit,final,iterable,map,entry,string,string,commit,data,long,max,seq,no,long,local,checkpoint,for,final,map,entry,string,string,entry,commit,data,final,string,key,entry,get,key,if,key,equals,sequence,numbers,assert,local,checkpoint,local,checkpoint,local,checkpoint,long,parse,long,entry,get,value,else,if,key,equals,sequence,numbers,assert,max,seq,no,max,seq,no,max,seq,no,long,parse,long,entry,get,value,return,new,commit,info,max,seq,no,local,checkpoint
SequenceNumbers -> public static CommitInfo loadSeqNoInfoFromLuceneCommit(         final Iterable<Map.Entry<String, String>> commitData);1545221705;Reads the sequence number stats from the commit data (maximum sequence number and local checkpoint).__@param commitData       the commit data_@return the sequence number stats;public static CommitInfo loadSeqNoInfoFromLuceneCommit(_        final Iterable<Map.Entry<String, String>> commitData) {_        long maxSeqNo = NO_OPS_PERFORMED__        long localCheckpoint = NO_OPS_PERFORMED___        for (final Map.Entry<String, String> entry : commitData) {_            final String key = entry.getKey()__            if (key.equals(SequenceNumbers.LOCAL_CHECKPOINT_KEY)) {_                assert localCheckpoint == NO_OPS_PERFORMED : localCheckpoint__                localCheckpoint = Long.parseLong(entry.getValue())__            } else if (key.equals(SequenceNumbers.MAX_SEQ_NO)) {_                assert maxSeqNo == NO_OPS_PERFORMED : maxSeqNo__                maxSeqNo = Long.parseLong(entry.getValue())__            }_        }__        return new CommitInfo(maxSeqNo, localCheckpoint)__    };reads,the,sequence,number,stats,from,the,commit,data,maximum,sequence,number,and,local,checkpoint,param,commit,data,the,commit,data,return,the,sequence,number,stats;public,static,commit,info,load,seq,no,info,from,lucene,commit,final,iterable,map,entry,string,string,commit,data,long,max,seq,no,long,local,checkpoint,for,final,map,entry,string,string,entry,commit,data,final,string,key,entry,get,key,if,key,equals,sequence,numbers,assert,local,checkpoint,local,checkpoint,local,checkpoint,long,parse,long,entry,get,value,else,if,key,equals,sequence,numbers,assert,max,seq,no,max,seq,no,max,seq,no,long,parse,long,entry,get,value,return,new,commit,info,max,seq,no,local,checkpoint
SequenceNumbers -> public static long max(final long maxSeqNo, final long seqNo);1524684173;Compute the maximum of the given current maximum sequence number and the specified sequence number, accounting for the fact that the_current maximum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or_{@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current maximum sequence number is not_{@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number_must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.__@param maxSeqNo the current maximum sequence number_@param seqNo the specified sequence number_@return the new maximum sequence number;public static long max(final long maxSeqNo, final long seqNo) {_        if (maxSeqNo == NO_OPS_PERFORMED) {_            return seqNo__        } else if (maxSeqNo == UNASSIGNED_SEQ_NO) {_            return seqNo__        } else {_            if (seqNo == UNASSIGNED_SEQ_NO) {_                throw new IllegalArgumentException("sequence number must be assigned")__            }_            return Math.max(maxSeqNo, seqNo)__        }_    };compute,the,maximum,of,the,given,current,maximum,sequence,number,and,the,specified,sequence,number,accounting,for,the,fact,that,the,current,maximum,sequence,number,could,be,link,sequence,numbers,or,link,sequence,numbers,when,the,current,maximum,sequence,number,is,not,link,sequence,numbers,nor,link,sequence,numbers,the,specified,sequence,number,must,not,be,link,sequence,numbers,param,max,seq,no,the,current,maximum,sequence,number,param,seq,no,the,specified,sequence,number,return,the,new,maximum,sequence,number;public,static,long,max,final,long,max,seq,no,final,long,seq,no,if,max,seq,no,return,seq,no,else,if,max,seq,no,return,seq,no,else,if,seq,no,throw,new,illegal,argument,exception,sequence,number,must,be,assigned,return,math,max,max,seq,no,seq,no
SequenceNumbers -> public static long max(final long maxSeqNo, final long seqNo);1528706846;Compute the maximum of the given current maximum sequence number and the specified sequence number, accounting for the fact that the_current maximum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or_{@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current maximum sequence number is not_{@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number_must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.__@param maxSeqNo the current maximum sequence number_@param seqNo the specified sequence number_@return the new maximum sequence number;public static long max(final long maxSeqNo, final long seqNo) {_        if (maxSeqNo == NO_OPS_PERFORMED) {_            return seqNo__        } else if (maxSeqNo == UNASSIGNED_SEQ_NO) {_            return seqNo__        } else {_            if (seqNo == UNASSIGNED_SEQ_NO) {_                throw new IllegalArgumentException("sequence number must be assigned")__            }_            return Math.max(maxSeqNo, seqNo)__        }_    };compute,the,maximum,of,the,given,current,maximum,sequence,number,and,the,specified,sequence,number,accounting,for,the,fact,that,the,current,maximum,sequence,number,could,be,link,sequence,numbers,or,link,sequence,numbers,when,the,current,maximum,sequence,number,is,not,link,sequence,numbers,nor,link,sequence,numbers,the,specified,sequence,number,must,not,be,link,sequence,numbers,param,max,seq,no,the,current,maximum,sequence,number,param,seq,no,the,specified,sequence,number,return,the,new,maximum,sequence,number;public,static,long,max,final,long,max,seq,no,final,long,seq,no,if,max,seq,no,return,seq,no,else,if,max,seq,no,return,seq,no,else,if,seq,no,throw,new,illegal,argument,exception,sequence,number,must,be,assigned,return,math,max,max,seq,no,seq,no
SequenceNumbers -> public static long max(final long maxSeqNo, final long seqNo);1545221705;Compute the maximum of the given current maximum sequence number and the specified sequence number, accounting for the fact that the_current maximum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or_{@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current maximum sequence number is not_{@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number_must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.__@param maxSeqNo the current maximum sequence number_@param seqNo the specified sequence number_@return the new maximum sequence number;public static long max(final long maxSeqNo, final long seqNo) {_        if (maxSeqNo == NO_OPS_PERFORMED) {_            return seqNo__        } else if (maxSeqNo == UNASSIGNED_SEQ_NO) {_            return seqNo__        } else {_            if (seqNo == UNASSIGNED_SEQ_NO) {_                throw new IllegalArgumentException("sequence number must be assigned")__            }_            return Math.max(maxSeqNo, seqNo)__        }_    };compute,the,maximum,of,the,given,current,maximum,sequence,number,and,the,specified,sequence,number,accounting,for,the,fact,that,the,current,maximum,sequence,number,could,be,link,sequence,numbers,or,link,sequence,numbers,when,the,current,maximum,sequence,number,is,not,link,sequence,numbers,nor,link,sequence,numbers,the,specified,sequence,number,must,not,be,link,sequence,numbers,param,max,seq,no,the,current,maximum,sequence,number,param,seq,no,the,specified,sequence,number,return,the,new,maximum,sequence,number;public,static,long,max,final,long,max,seq,no,final,long,seq,no,if,max,seq,no,return,seq,no,else,if,max,seq,no,return,seq,no,else,if,seq,no,throw,new,illegal,argument,exception,sequence,number,must,be,assigned,return,math,max,max,seq,no,seq,no
SequenceNumbers -> public static long min(final long minSeqNo, final long seqNo);1524684173;Compute the minimum of the given current minimum sequence number and the specified sequence number, accounting for the fact that the_current minimum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or_{@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current minimum sequence number is not_{@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number_must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.__@param minSeqNo the current minimum sequence number_@param seqNo the specified sequence number_@return the new minimum sequence number;public static long min(final long minSeqNo, final long seqNo) {_        if (minSeqNo == NO_OPS_PERFORMED) {_            return seqNo__        } else if (minSeqNo == UNASSIGNED_SEQ_NO) {_            return seqNo__        } else {_            if (seqNo == UNASSIGNED_SEQ_NO) {_                throw new IllegalArgumentException("sequence number must be assigned")__            }_            return Math.min(minSeqNo, seqNo)__        }_    };compute,the,minimum,of,the,given,current,minimum,sequence,number,and,the,specified,sequence,number,accounting,for,the,fact,that,the,current,minimum,sequence,number,could,be,link,sequence,numbers,or,link,sequence,numbers,when,the,current,minimum,sequence,number,is,not,link,sequence,numbers,nor,link,sequence,numbers,the,specified,sequence,number,must,not,be,link,sequence,numbers,param,min,seq,no,the,current,minimum,sequence,number,param,seq,no,the,specified,sequence,number,return,the,new,minimum,sequence,number;public,static,long,min,final,long,min,seq,no,final,long,seq,no,if,min,seq,no,return,seq,no,else,if,min,seq,no,return,seq,no,else,if,seq,no,throw,new,illegal,argument,exception,sequence,number,must,be,assigned,return,math,min,min,seq,no,seq,no
SequenceNumbers -> public static long min(final long minSeqNo, final long seqNo);1528706846;Compute the minimum of the given current minimum sequence number and the specified sequence number, accounting for the fact that the_current minimum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or_{@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current minimum sequence number is not_{@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number_must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.__@param minSeqNo the current minimum sequence number_@param seqNo the specified sequence number_@return the new minimum sequence number;public static long min(final long minSeqNo, final long seqNo) {_        if (minSeqNo == NO_OPS_PERFORMED) {_            return seqNo__        } else if (minSeqNo == UNASSIGNED_SEQ_NO) {_            return seqNo__        } else {_            if (seqNo == UNASSIGNED_SEQ_NO) {_                throw new IllegalArgumentException("sequence number must be assigned")__            }_            return Math.min(minSeqNo, seqNo)__        }_    };compute,the,minimum,of,the,given,current,minimum,sequence,number,and,the,specified,sequence,number,accounting,for,the,fact,that,the,current,minimum,sequence,number,could,be,link,sequence,numbers,or,link,sequence,numbers,when,the,current,minimum,sequence,number,is,not,link,sequence,numbers,nor,link,sequence,numbers,the,specified,sequence,number,must,not,be,link,sequence,numbers,param,min,seq,no,the,current,minimum,sequence,number,param,seq,no,the,specified,sequence,number,return,the,new,minimum,sequence,number;public,static,long,min,final,long,min,seq,no,final,long,seq,no,if,min,seq,no,return,seq,no,else,if,min,seq,no,return,seq,no,else,if,seq,no,throw,new,illegal,argument,exception,sequence,number,must,be,assigned,return,math,min,min,seq,no,seq,no
SequenceNumbers -> public static long min(final long minSeqNo, final long seqNo);1545221705;Compute the minimum of the given current minimum sequence number and the specified sequence number, accounting for the fact that the_current minimum sequence number could be {@link SequenceNumbers#NO_OPS_PERFORMED} or_{@link SequenceNumbers#UNASSIGNED_SEQ_NO}. When the current minimum sequence number is not_{@link SequenceNumbers#NO_OPS_PERFORMED} nor {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, the specified sequence number_must not be {@link SequenceNumbers#UNASSIGNED_SEQ_NO}.__@param minSeqNo the current minimum sequence number_@param seqNo the specified sequence number_@return the new minimum sequence number;public static long min(final long minSeqNo, final long seqNo) {_        if (minSeqNo == NO_OPS_PERFORMED) {_            return seqNo__        } else if (minSeqNo == UNASSIGNED_SEQ_NO) {_            return seqNo__        } else {_            if (seqNo == UNASSIGNED_SEQ_NO) {_                throw new IllegalArgumentException("sequence number must be assigned")__            }_            return Math.min(minSeqNo, seqNo)__        }_    };compute,the,minimum,of,the,given,current,minimum,sequence,number,and,the,specified,sequence,number,accounting,for,the,fact,that,the,current,minimum,sequence,number,could,be,link,sequence,numbers,or,link,sequence,numbers,when,the,current,minimum,sequence,number,is,not,link,sequence,numbers,nor,link,sequence,numbers,the,specified,sequence,number,must,not,be,link,sequence,numbers,param,min,seq,no,the,current,minimum,sequence,number,param,seq,no,the,specified,sequence,number,return,the,new,minimum,sequence,number;public,static,long,min,final,long,min,seq,no,final,long,seq,no,if,min,seq,no,return,seq,no,else,if,min,seq,no,return,seq,no,else,if,seq,no,throw,new,illegal,argument,exception,sequence,number,must,be,assigned,return,math,min,min,seq,no,seq,no
