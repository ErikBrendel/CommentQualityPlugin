commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(timestamp).     cpu.writeTo(out).     mem.writeTo(out).     swap.writeTo(out).     out.writeOptionalWriteable(cgroup). }
false;public;0;3;;public long getTimestamp() {     return timestamp. }
false;public;0;1;;public Cpu getCpu() {     return cpu. }
false;public;0;3;;public Mem getMem() {     return mem. }
false;public;0;3;;public Swap getSwap() {     return swap. }
false;public;0;3;;public Cgroup getCgroup() {     return cgroup. }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.OS).     builder.field(Fields.TIMESTAMP, getTimestamp()).     cpu.toXContent(builder, params).     mem.toXContent(builder, params).     swap.toXContent(builder, params).     if (cgroup != null) {         cgroup.toXContent(builder, params).     }     builder.endObject().     return builder. }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeShort(percent).     if (loadAverage == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         out.writeDoubleArray(loadAverage).     } }
false;public;0;3;;public short getPercent() {     return percent. }
false;public;0;3;;public double[] getLoadAverage() {     return loadAverage. }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.CPU).     builder.field(Fields.PERCENT, getPercent()).     if (getLoadAverage() != null && Arrays.stream(getLoadAverage()).anyMatch(load -> load != -1)) {         builder.startObject(Fields.LOAD_AVERAGE).         if (getLoadAverage()[0] != -1) {             builder.field(Fields.LOAD_AVERAGE_1M, getLoadAverage()[0]).         }         if (getLoadAverage()[1] != -1) {             builder.field(Fields.LOAD_AVERAGE_5M, getLoadAverage()[1]).         }         if (getLoadAverage()[2] != -1) {             builder.field(Fields.LOAD_AVERAGE_15M, getLoadAverage()[2]).         }         builder.endObject().     }     builder.endObject().     return builder. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeLong(total).     out.writeLong(free). }
false;public;0;3;;public ByteSizeValue getFree() {     return new ByteSizeValue(free). }
false;public;0;3;;public ByteSizeValue getUsed() {     return new ByteSizeValue(total - free). }
false;public;0;3;;public ByteSizeValue getTotal() {     return new ByteSizeValue(total). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.SWAP).     builder.humanReadableField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, getTotal()).     builder.humanReadableField(Fields.FREE_IN_BYTES, Fields.FREE, getFree()).     builder.humanReadableField(Fields.USED_IN_BYTES, Fields.USED, getUsed()).     builder.endObject().     return builder. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeLong(total).     out.writeLong(free). }
false;public;0;3;;public ByteSizeValue getTotal() {     return new ByteSizeValue(total). }
false;public;0;3;;public ByteSizeValue getUsed() {     return new ByteSizeValue(total - free). }
false;public;0;3;;public short getUsedPercent() {     return calculatePercentage(getUsed().getBytes(), total). }
false;public;0;3;;public ByteSizeValue getFree() {     return new ByteSizeValue(free). }
false;public;0;3;;public short getFreePercent() {     return calculatePercentage(free, total). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.MEM).     builder.humanReadableField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, getTotal()).     builder.humanReadableField(Fields.FREE_IN_BYTES, Fields.FREE, getFree()).     builder.humanReadableField(Fields.USED_IN_BYTES, Fields.USED, getUsed()).     builder.field(Fields.FREE_PERCENT, getFreePercent()).     builder.field(Fields.USED_PERCENT, getUsedPercent()).     builder.endObject().     return builder. }
true;public;0;3;/**  * The control group for the {@code cpuacct} subsystem.  *  * @return the control group  */ ;/**  * The control group for the {@code cpuacct} subsystem.  *  * @return the control group  */ public String getCpuAcctControlGroup() {     return cpuAcctControlGroup. }
true;public;0;3;/**  * The total CPU time consumed by all tasks in the  * {@code cpuacct} control group from  * {@link Cgroup#cpuAcctControlGroup}.  *  * @return the total CPU time in nanoseconds  */ ;/**  * The total CPU time consumed by all tasks in the  * {@code cpuacct} control group from  * {@link Cgroup#cpuAcctControlGroup}.  *  * @return the total CPU time in nanoseconds  */ public long getCpuAcctUsageNanos() {     return cpuAcctUsageNanos. }
true;public;0;3;/**  * The control group for the {@code cpu} subsystem.  *  * @return the control group  */ ;/**  * The control group for the {@code cpu} subsystem.  *  * @return the control group  */ public String getCpuControlGroup() {     return cpuControlGroup. }
true;public;0;3;/**  * The period of time for how frequently the control group from  * {@link Cgroup#cpuControlGroup} has its access to CPU  * resources reallocated.  *  * @return the period of time in microseconds  */ ;/**  * The period of time for how frequently the control group from  * {@link Cgroup#cpuControlGroup} has its access to CPU  * resources reallocated.  *  * @return the period of time in microseconds  */ public long getCpuCfsPeriodMicros() {     return cpuCfsPeriodMicros. }
true;public;0;3;/**  * The total amount of time for which all tasks in the control  * group from {@link Cgroup#cpuControlGroup} can run in one  * period as represented by {@link Cgroup#cpuCfsPeriodMicros}.  *  * @return the total amount of time in microseconds  */ ;/**  * The total amount of time for which all tasks in the control  * group from {@link Cgroup#cpuControlGroup} can run in one  * period as represented by {@link Cgroup#cpuCfsPeriodMicros}.  *  * @return the total amount of time in microseconds  */ public long getCpuCfsQuotaMicros() {     return cpuCfsQuotaMicros. }
true;public;0;3;/**  * The CPU time statistics. See {@link CpuStat}.  *  * @return the CPU time statistics.  */ ;/**  * The CPU time statistics. See {@link CpuStat}.  *  * @return the CPU time statistics.  */ public CpuStat getCpuStat() {     return cpuStat. }
true;public;0;3;/**  * The control group for the {@code memory} subsystem.  *  * @return the control group  */ ;/**  * The control group for the {@code memory} subsystem.  *  * @return the control group  */ public String getMemoryControlGroup() {     return memoryControlGroup. }
true;public;0;3;/**  * The maximum amount of user memory (including file cache).  * This is stored as a <code>String</code> because the value can be too big to fit in a  * <code>long</code>.  (The alternative would have been <code>BigInteger</code> but then  * it would not be possible to index the OS stats document into Elasticsearch without  * losing information, as <code>BigInteger</code> is not a supported Elasticsearch type.)  *  * @return the maximum amount of user memory (including file cache).  */ ;/**  * The maximum amount of user memory (including file cache).  * This is stored as a <code>String</code> because the value can be too big to fit in a  * <code>long</code>.  (The alternative would have been <code>BigInteger</code> but then  * it would not be possible to index the OS stats document into Elasticsearch without  * losing information, as <code>BigInteger</code> is not a supported Elasticsearch type.)  *  * @return the maximum amount of user memory (including file cache).  */ public String getMemoryLimitInBytes() {     return memoryLimitInBytes. }
true;public;0;3;/**  * The total current memory usage by processes in the cgroup (in bytes).  * This is stored as a <code>String</code> for consistency with <code>memoryLimitInBytes</code>.  *  * @return the total current memory usage by processes in the cgroup (in bytes).  */ ;/**  * The total current memory usage by processes in the cgroup (in bytes).  * This is stored as a <code>String</code> for consistency with <code>memoryLimitInBytes</code>.  *  * @return the total current memory usage by processes in the cgroup (in bytes).  */ public String getMemoryUsageInBytes() {     return memoryUsageInBytes. }
false;public;1;14;;@Override public void writeTo(final StreamOutput out) throws IOException {     out.writeString(cpuAcctControlGroup).     out.writeLong(cpuAcctUsageNanos).     out.writeString(cpuControlGroup).     out.writeLong(cpuCfsPeriodMicros).     out.writeLong(cpuCfsQuotaMicros).     cpuStat.writeTo(out).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         out.writeOptionalString(memoryControlGroup).         out.writeOptionalString(memoryLimitInBytes).         out.writeOptionalString(memoryUsageInBytes).     } }
false;public;2;35;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject("cgroup").     {         builder.startObject("cpuacct").         {             builder.field("control_group", cpuAcctControlGroup).             builder.field("usage_nanos", cpuAcctUsageNanos).         }         builder.endObject().         builder.startObject("cpu").         {             builder.field("control_group", cpuControlGroup).             builder.field("cfs_period_micros", cpuCfsPeriodMicros).             builder.field("cfs_quota_micros", cpuCfsQuotaMicros).             cpuStat.toXContent(builder, params).         }         builder.endObject().         if (memoryControlGroup != null) {             builder.startObject("memory").             {                 builder.field("control_group", memoryControlGroup).                 if (memoryLimitInBytes != null) {                     builder.field("limit_in_bytes", memoryLimitInBytes).                 }                 if (memoryUsageInBytes != null) {                     builder.field("usage_in_bytes", memoryUsageInBytes).                 }             }             builder.endObject().         }     }     builder.endObject().     return builder. }
true;public;0;3;/**  * The number of elapsed periods.  *  * @return the number of elapsed periods as measured by  * {@code cpu.cfs_period_us}  */ ;/**  * The number of elapsed periods.  *  * @return the number of elapsed periods as measured by  * {@code cpu.cfs_period_us}  */ public long getNumberOfElapsedPeriods() {     return numberOfElapsedPeriods. }
true;public;0;3;/**  * The number of times tasks in the control group have been  * throttled.  *  * @return the number of times  */ ;/**  * The number of times tasks in the control group have been  * throttled.  *  * @return the number of times  */ public long getNumberOfTimesThrottled() {     return numberOfTimesThrottled. }
true;public;0;3;/**  * The total time duration for which tasks in the control  * group have been throttled.  *  * @return the total time in nanoseconds  */ ;/**  * The total time duration for which tasks in the control  * group have been throttled.  *  * @return the total time in nanoseconds  */ public long getTimeThrottledNanos() {     return timeThrottledNanos. }
false;public;1;6;;@Override public void writeTo(final StreamOutput out) throws IOException {     out.writeLong(numberOfElapsedPeriods).     out.writeLong(numberOfTimesThrottled).     out.writeLong(timeThrottledNanos). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject("stat").     {         builder.field("number_of_elapsed_periods", numberOfElapsedPeriods).         builder.field("number_of_times_throttled", numberOfTimesThrottled).         builder.field("time_throttled_nanos", timeThrottledNanos).     }     builder.endObject().     return builder. }
false;public,static;2;3;;public static short calculatePercentage(long used, long max) {     return max <= 0 ? 0 : (short) (Math.round((100d * used) / max)). }
