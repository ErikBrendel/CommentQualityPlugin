# id;timestamp;commentText;codeText;commentWords;codeWords
GeoDistanceSortBuilder -> public NestedSortBuilder getNestedSort();1524684173;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
GeoDistanceSortBuilder -> public NestedSortBuilder getNestedSort();1528211342;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
GeoDistanceSortBuilder -> public NestedSortBuilder getNestedSort();1528706846;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
GeoDistanceSortBuilder -> public NestedSortBuilder getNestedSort();1532353780;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
GeoDistanceSortBuilder -> public NestedSortBuilder getNestedSort();1539615817;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
GeoDistanceSortBuilder -> public NestedSortBuilder getNestedSort();1540486836;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
GeoDistanceSortBuilder -> public NestedSortBuilder getNestedSort();1540583181;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
GeoDistanceSortBuilder -> public NestedSortBuilder getNestedSort();1545241543;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder validation(GeoValidationMethod method);1524684173;Sets validation method for this sort builder.;public GeoDistanceSortBuilder validation(GeoValidationMethod method) {_        this.validation = method__        return this__    };sets,validation,method,for,this,sort,builder;public,geo,distance,sort,builder,validation,geo,validation,method,method,this,validation,method,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder validation(GeoValidationMethod method);1528211342;Sets validation method for this sort builder.;public GeoDistanceSortBuilder validation(GeoValidationMethod method) {_        this.validation = method__        return this__    };sets,validation,method,for,this,sort,builder;public,geo,distance,sort,builder,validation,geo,validation,method,method,this,validation,method,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder validation(GeoValidationMethod method);1528706846;Sets validation method for this sort builder.;public GeoDistanceSortBuilder validation(GeoValidationMethod method) {_        this.validation = method__        return this__    };sets,validation,method,for,this,sort,builder;public,geo,distance,sort,builder,validation,geo,validation,method,method,this,validation,method,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder validation(GeoValidationMethod method);1532353780;Sets validation method for this sort builder.;public GeoDistanceSortBuilder validation(GeoValidationMethod method) {_        this.validation = method__        return this__    };sets,validation,method,for,this,sort,builder;public,geo,distance,sort,builder,validation,geo,validation,method,method,this,validation,method,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder validation(GeoValidationMethod method);1539615817;Sets validation method for this sort builder.;public GeoDistanceSortBuilder validation(GeoValidationMethod method) {_        this.validation = method__        return this__    };sets,validation,method,for,this,sort,builder;public,geo,distance,sort,builder,validation,geo,validation,method,method,this,validation,method,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder validation(GeoValidationMethod method);1540486836;Sets validation method for this sort builder.;public GeoDistanceSortBuilder validation(GeoValidationMethod method) {_        this.validation = method__        return this__    };sets,validation,method,for,this,sort,builder;public,geo,distance,sort,builder,validation,geo,validation,method,method,this,validation,method,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder validation(GeoValidationMethod method);1540583181;Sets validation method for this sort builder.;public GeoDistanceSortBuilder validation(GeoValidationMethod method) {_        this.validation = method__        return this__    };sets,validation,method,for,this,sort,builder;public,geo,distance,sort,builder,validation,geo,validation,method,method,this,validation,method,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder validation(GeoValidationMethod method);1545241543;Sets validation method for this sort builder.;public GeoDistanceSortBuilder validation(GeoValidationMethod method) {_        this.validation = method__        return this__    };sets,validation,method,for,this,sort,builder;public,geo,distance,sort,builder,validation,geo,validation,method,method,this,validation,method,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder point(double lat, double lon);1524684173;The point to create the range distance facets from.__@param lat latitude._@param lon longitude.;public GeoDistanceSortBuilder point(double lat, double lon) {_        points.add(new GeoPoint(lat, lon))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,lat,latitude,param,lon,longitude;public,geo,distance,sort,builder,point,double,lat,double,lon,points,add,new,geo,point,lat,lon,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder point(double lat, double lon);1528211342;The point to create the range distance facets from.__@param lat latitude._@param lon longitude.;public GeoDistanceSortBuilder point(double lat, double lon) {_        points.add(new GeoPoint(lat, lon))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,lat,latitude,param,lon,longitude;public,geo,distance,sort,builder,point,double,lat,double,lon,points,add,new,geo,point,lat,lon,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder point(double lat, double lon);1528706846;The point to create the range distance facets from.__@param lat latitude._@param lon longitude.;public GeoDistanceSortBuilder point(double lat, double lon) {_        points.add(new GeoPoint(lat, lon))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,lat,latitude,param,lon,longitude;public,geo,distance,sort,builder,point,double,lat,double,lon,points,add,new,geo,point,lat,lon,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder point(double lat, double lon);1532353780;The point to create the range distance facets from.__@param lat latitude._@param lon longitude.;public GeoDistanceSortBuilder point(double lat, double lon) {_        points.add(new GeoPoint(lat, lon))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,lat,latitude,param,lon,longitude;public,geo,distance,sort,builder,point,double,lat,double,lon,points,add,new,geo,point,lat,lon,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder point(double lat, double lon);1539615817;The point to create the range distance facets from.__@param lat latitude._@param lon longitude.;public GeoDistanceSortBuilder point(double lat, double lon) {_        points.add(new GeoPoint(lat, lon))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,lat,latitude,param,lon,longitude;public,geo,distance,sort,builder,point,double,lat,double,lon,points,add,new,geo,point,lat,lon,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder point(double lat, double lon);1540486836;The point to create the range distance facets from.__@param lat latitude._@param lon longitude.;public GeoDistanceSortBuilder point(double lat, double lon) {_        points.add(new GeoPoint(lat, lon))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,lat,latitude,param,lon,longitude;public,geo,distance,sort,builder,point,double,lat,double,lon,points,add,new,geo,point,lat,lon,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder point(double lat, double lon);1540583181;The point to create the range distance facets from.__@param lat latitude._@param lon longitude.;public GeoDistanceSortBuilder point(double lat, double lon) {_        points.add(new GeoPoint(lat, lon))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,lat,latitude,param,lon,longitude;public,geo,distance,sort,builder,point,double,lat,double,lon,points,add,new,geo,point,lat,lon,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder point(double lat, double lon);1545241543;The point to create the range distance facets from.__@param lat latitude._@param lon longitude.;public GeoDistanceSortBuilder point(double lat, double lon) {_        points.add(new GeoPoint(lat, lon))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,lat,latitude,param,lon,longitude;public,geo,distance,sort,builder,point,double,lat,double,lon,points,add,new,geo,point,lat,lon,return,this
GeoDistanceSortBuilder -> public boolean ignoreUnmapped();1528706846;Returns true if unmapped geo fields should be treated as located at an infinite distance;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };returns,true,if,unmapped,geo,fields,should,be,treated,as,located,at,an,infinite,distance;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoDistanceSortBuilder -> public boolean ignoreUnmapped();1532353780;Returns true if unmapped geo fields should be treated as located at an infinite distance;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };returns,true,if,unmapped,geo,fields,should,be,treated,as,located,at,an,infinite,distance;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoDistanceSortBuilder -> public boolean ignoreUnmapped();1539615817;Returns true if unmapped geo fields should be treated as located at an infinite distance;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };returns,true,if,unmapped,geo,fields,should,be,treated,as,located,at,an,infinite,distance;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoDistanceSortBuilder -> public boolean ignoreUnmapped();1540486836;Returns true if unmapped geo fields should be treated as located at an infinite distance;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };returns,true,if,unmapped,geo,fields,should,be,treated,as,located,at,an,infinite,distance;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoDistanceSortBuilder -> public boolean ignoreUnmapped();1540583181;Returns true if unmapped geo fields should be treated as located at an infinite distance;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };returns,true,if,unmapped,geo,fields,should,be,treated,as,located,at,an,infinite,distance;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoDistanceSortBuilder -> public boolean ignoreUnmapped();1545241543;Returns true if unmapped geo fields should be treated as located at an infinite distance;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };returns,true,if,unmapped,geo,fields,should,be,treated,as,located,at,an,infinite,distance;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance);1524684173;The geo distance type used to compute the distance.;public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance) {_        this.geoDistance = geoDistance__        return this__    };the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,sort,builder,geo,distance,geo,distance,geo,distance,this,geo,distance,geo,distance,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance);1528211342;The geo distance type used to compute the distance.;public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance) {_        this.geoDistance = geoDistance__        return this__    };the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,sort,builder,geo,distance,geo,distance,geo,distance,this,geo,distance,geo,distance,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance);1528706846;The geo distance type used to compute the distance.;public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance) {_        this.geoDistance = geoDistance__        return this__    };the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,sort,builder,geo,distance,geo,distance,geo,distance,this,geo,distance,geo,distance,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance);1532353780;The geo distance type used to compute the distance.;public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance) {_        this.geoDistance = geoDistance__        return this__    };the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,sort,builder,geo,distance,geo,distance,geo,distance,this,geo,distance,geo,distance,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance);1539615817;The geo distance type used to compute the distance.;public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance) {_        this.geoDistance = geoDistance__        return this__    };the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,sort,builder,geo,distance,geo,distance,geo,distance,this,geo,distance,geo,distance,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance);1540486836;The geo distance type used to compute the distance.;public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance) {_        this.geoDistance = geoDistance__        return this__    };the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,sort,builder,geo,distance,geo,distance,geo,distance,this,geo,distance,geo,distance,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance);1540583181;The geo distance type used to compute the distance.;public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance) {_        this.geoDistance = geoDistance__        return this__    };the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,sort,builder,geo,distance,geo,distance,geo,distance,this,geo,distance,geo,distance,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance);1545241543;The geo distance type used to compute the distance.;public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance) {_        this.geoDistance = geoDistance__        return this__    };the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,sort,builder,geo,distance,geo,distance,geo,distance,this,geo,distance,geo,distance,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder sortMode(SortMode sortMode);1524684173;Defines which distance to use for sorting in the case a document contains multiple geo points._Possible values: min and max;public GeoDistanceSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        if (sortMode == SortMode.SUM) {_            throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance")__        }_        this.sortMode = sortMode__        return this__    };defines,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points,possible,values,min,and,max;public,geo,distance,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,if,sort,mode,sort,mode,sum,throw,new,illegal,argument,exception,sum,isn,t,supported,for,sorting,by,geo,distance,this,sort,mode,sort,mode,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder sortMode(SortMode sortMode);1528211342;Defines which distance to use for sorting in the case a document contains multiple geo points._Possible values: min and max;public GeoDistanceSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        if (sortMode == SortMode.SUM) {_            throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance")__        }_        this.sortMode = sortMode__        return this__    };defines,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points,possible,values,min,and,max;public,geo,distance,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,if,sort,mode,sort,mode,sum,throw,new,illegal,argument,exception,sum,isn,t,supported,for,sorting,by,geo,distance,this,sort,mode,sort,mode,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder sortMode(SortMode sortMode);1528706846;Defines which distance to use for sorting in the case a document contains multiple geo points._Possible values: min and max;public GeoDistanceSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        if (sortMode == SortMode.SUM) {_            throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance")__        }_        this.sortMode = sortMode__        return this__    };defines,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points,possible,values,min,and,max;public,geo,distance,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,if,sort,mode,sort,mode,sum,throw,new,illegal,argument,exception,sum,isn,t,supported,for,sorting,by,geo,distance,this,sort,mode,sort,mode,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder sortMode(SortMode sortMode);1532353780;Defines which distance to use for sorting in the case a document contains multiple geo points._Possible values: min and max;public GeoDistanceSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        if (sortMode == SortMode.SUM) {_            throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance")__        }_        this.sortMode = sortMode__        return this__    };defines,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points,possible,values,min,and,max;public,geo,distance,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,if,sort,mode,sort,mode,sum,throw,new,illegal,argument,exception,sum,isn,t,supported,for,sorting,by,geo,distance,this,sort,mode,sort,mode,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder sortMode(SortMode sortMode);1539615817;Defines which distance to use for sorting in the case a document contains multiple geo points._Possible values: min and max;public GeoDistanceSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        if (sortMode == SortMode.SUM) {_            throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance")__        }_        this.sortMode = sortMode__        return this__    };defines,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points,possible,values,min,and,max;public,geo,distance,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,if,sort,mode,sort,mode,sum,throw,new,illegal,argument,exception,sum,isn,t,supported,for,sorting,by,geo,distance,this,sort,mode,sort,mode,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder sortMode(SortMode sortMode);1540486836;Defines which distance to use for sorting in the case a document contains multiple geo points._Possible values: min and max;public GeoDistanceSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        if (sortMode == SortMode.SUM) {_            throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance")__        }_        this.sortMode = sortMode__        return this__    };defines,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points,possible,values,min,and,max;public,geo,distance,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,if,sort,mode,sort,mode,sum,throw,new,illegal,argument,exception,sum,isn,t,supported,for,sorting,by,geo,distance,this,sort,mode,sort,mode,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder sortMode(SortMode sortMode);1540583181;Defines which distance to use for sorting in the case a document contains multiple geo points._Possible values: min and max;public GeoDistanceSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        if (sortMode == SortMode.SUM) {_            throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance")__        }_        this.sortMode = sortMode__        return this__    };defines,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points,possible,values,min,and,max;public,geo,distance,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,if,sort,mode,sort,mode,sum,throw,new,illegal,argument,exception,sum,isn,t,supported,for,sorting,by,geo,distance,this,sort,mode,sort,mode,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder sortMode(SortMode sortMode);1545241543;Defines which distance to use for sorting in the case a document contains multiple geo points._Possible values: min and max;public GeoDistanceSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        if (sortMode == SortMode.SUM) {_            throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance")__        }_        this.sortMode = sortMode__        return this__    };defines,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points,possible,values,min,and,max;public,geo,distance,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,if,sort,mode,sort,mode,sum,throw,new,illegal,argument,exception,sum,isn,t,supported,for,sorting,by,geo,distance,this,sort,mode,sort,mode,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, String ... geohashes);1524684173;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param geohashes The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, String ... geohashes) {_        if (geohashes.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        this.fieldName = fieldName__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,geohashes,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,string,geohashes,if,geohashes,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,this,field,name,field,name
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, String ... geohashes);1528211342;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param geohashes The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, String ... geohashes) {_        if (geohashes.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        this.fieldName = fieldName__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,geohashes,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,string,geohashes,if,geohashes,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,this,field,name,field,name
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, String ... geohashes);1528706846;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param geohashes The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, String ... geohashes) {_        if (geohashes.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        this.fieldName = fieldName__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,geohashes,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,string,geohashes,if,geohashes,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,this,field,name,field,name
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, String ... geohashes);1532353780;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param geohashes The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, String ... geohashes) {_        if (geohashes.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        this.fieldName = fieldName__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,geohashes,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,string,geohashes,if,geohashes,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,this,field,name,field,name
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, String ... geohashes);1539615817;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param geohashes The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, String ... geohashes) {_        if (geohashes.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        this.fieldName = fieldName__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,geohashes,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,string,geohashes,if,geohashes,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,this,field,name,field,name
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, String ... geohashes);1540486836;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param geohashes The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, String ... geohashes) {_        if (geohashes.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        this.fieldName = fieldName__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,geohashes,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,string,geohashes,if,geohashes,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,this,field,name,field,name
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, String ... geohashes);1540583181;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param geohashes The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, String ... geohashes) {_        if (geohashes.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        this.fieldName = fieldName__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,geohashes,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,string,geohashes,if,geohashes,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,this,field,name,field,name
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, String ... geohashes);1545241543;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param geohashes The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, String ... geohashes) {_        if (geohashes.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        this.fieldName = fieldName__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,geohashes,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,string,geohashes,if,geohashes,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,this,field,name,field,name
GeoDistanceSortBuilder -> public DistanceUnit unit();1524684173;Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public DistanceUnit unit() {_        return this.unit__    };returns,the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,distance,unit,unit,return,this,unit
GeoDistanceSortBuilder -> public DistanceUnit unit();1528211342;Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public DistanceUnit unit() {_        return this.unit__    };returns,the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,distance,unit,unit,return,this,unit
GeoDistanceSortBuilder -> public DistanceUnit unit();1528706846;Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public DistanceUnit unit() {_        return this.unit__    };returns,the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,distance,unit,unit,return,this,unit
GeoDistanceSortBuilder -> public DistanceUnit unit();1532353780;Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public DistanceUnit unit() {_        return this.unit__    };returns,the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,distance,unit,unit,return,this,unit
GeoDistanceSortBuilder -> public DistanceUnit unit();1539615817;Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public DistanceUnit unit() {_        return this.unit__    };returns,the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,distance,unit,unit,return,this,unit
GeoDistanceSortBuilder -> public DistanceUnit unit();1540486836;Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public DistanceUnit unit() {_        return this.unit__    };returns,the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,distance,unit,unit,return,this,unit
GeoDistanceSortBuilder -> public DistanceUnit unit();1540583181;Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public DistanceUnit unit() {_        return this.unit__    };returns,the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,distance,unit,unit,return,this,unit
GeoDistanceSortBuilder -> public DistanceUnit unit();1545241543;Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public DistanceUnit unit() {_        return this.unit__    };returns,the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,distance,unit,unit,return,this,unit
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder geohashes(String... geohashes);1524684173;The geohash of the geo point to create the range distance facets from.__Deprecated - please use points(GeoPoint... points) instead.;@Deprecated_    public GeoDistanceSortBuilder geohashes(String... geohashes) {_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        return this__    };the,geohash,of,the,geo,point,to,create,the,range,distance,facets,from,deprecated,please,use,points,geo,point,points,instead;deprecated,public,geo,distance,sort,builder,geohashes,string,geohashes,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder geohashes(String... geohashes);1528211342;The geohash of the geo point to create the range distance facets from.__Deprecated - please use points(GeoPoint... points) instead.;@Deprecated_    public GeoDistanceSortBuilder geohashes(String... geohashes) {_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        return this__    };the,geohash,of,the,geo,point,to,create,the,range,distance,facets,from,deprecated,please,use,points,geo,point,points,instead;deprecated,public,geo,distance,sort,builder,geohashes,string,geohashes,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder geohashes(String... geohashes);1528706846;The geohash of the geo point to create the range distance facets from.__Deprecated - please use points(GeoPoint... points) instead.;@Deprecated_    public GeoDistanceSortBuilder geohashes(String... geohashes) {_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        return this__    };the,geohash,of,the,geo,point,to,create,the,range,distance,facets,from,deprecated,please,use,points,geo,point,points,instead;deprecated,public,geo,distance,sort,builder,geohashes,string,geohashes,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder geohashes(String... geohashes);1532353780;The geohash of the geo point to create the range distance facets from.__Deprecated - please use points(GeoPoint... points) instead.;@Deprecated_    public GeoDistanceSortBuilder geohashes(String... geohashes) {_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        return this__    };the,geohash,of,the,geo,point,to,create,the,range,distance,facets,from,deprecated,please,use,points,geo,point,points,instead;deprecated,public,geo,distance,sort,builder,geohashes,string,geohashes,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder geohashes(String... geohashes);1539615817;The geohash of the geo point to create the range distance facets from.__Deprecated - please use points(GeoPoint... points) instead.;@Deprecated_    public GeoDistanceSortBuilder geohashes(String... geohashes) {_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        return this__    };the,geohash,of,the,geo,point,to,create,the,range,distance,facets,from,deprecated,please,use,points,geo,point,points,instead;deprecated,public,geo,distance,sort,builder,geohashes,string,geohashes,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder geohashes(String... geohashes);1540486836;The geohash of the geo point to create the range distance facets from.__Deprecated - please use points(GeoPoint... points) instead.;@Deprecated_    public GeoDistanceSortBuilder geohashes(String... geohashes) {_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        return this__    };the,geohash,of,the,geo,point,to,create,the,range,distance,facets,from,deprecated,please,use,points,geo,point,points,instead;deprecated,public,geo,distance,sort,builder,geohashes,string,geohashes,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder geohashes(String... geohashes);1540583181;The geohash of the geo point to create the range distance facets from.__Deprecated - please use points(GeoPoint... points) instead.;@Deprecated_    public GeoDistanceSortBuilder geohashes(String... geohashes) {_        for (String geohash : geohashes) {_            this.points.add(GeoPoint.fromGeohash(geohash))__        }_        return this__    };the,geohash,of,the,geo,point,to,create,the,range,distance,facets,from,deprecated,please,use,points,geo,point,points,instead;deprecated,public,geo,distance,sort,builder,geohashes,string,geohashes,for,string,geohash,geohashes,this,points,add,geo,point,from,geohash,geohash,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder points(GeoPoint... points);1524684173;The point to create the range distance facets from.__@param points reference points.;public GeoDistanceSortBuilder points(GeoPoint... points) {_        this.points.addAll(Arrays.asList(points))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,points,reference,points;public,geo,distance,sort,builder,points,geo,point,points,this,points,add,all,arrays,as,list,points,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder points(GeoPoint... points);1528211342;The point to create the range distance facets from.__@param points reference points.;public GeoDistanceSortBuilder points(GeoPoint... points) {_        this.points.addAll(Arrays.asList(points))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,points,reference,points;public,geo,distance,sort,builder,points,geo,point,points,this,points,add,all,arrays,as,list,points,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder points(GeoPoint... points);1528706846;The point to create the range distance facets from.__@param points reference points.;public GeoDistanceSortBuilder points(GeoPoint... points) {_        this.points.addAll(Arrays.asList(points))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,points,reference,points;public,geo,distance,sort,builder,points,geo,point,points,this,points,add,all,arrays,as,list,points,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder points(GeoPoint... points);1532353780;The point to create the range distance facets from.__@param points reference points.;public GeoDistanceSortBuilder points(GeoPoint... points) {_        this.points.addAll(Arrays.asList(points))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,points,reference,points;public,geo,distance,sort,builder,points,geo,point,points,this,points,add,all,arrays,as,list,points,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder points(GeoPoint... points);1539615817;The point to create the range distance facets from.__@param points reference points.;public GeoDistanceSortBuilder points(GeoPoint... points) {_        this.points.addAll(Arrays.asList(points))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,points,reference,points;public,geo,distance,sort,builder,points,geo,point,points,this,points,add,all,arrays,as,list,points,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder points(GeoPoint... points);1540486836;The point to create the range distance facets from.__@param points reference points.;public GeoDistanceSortBuilder points(GeoPoint... points) {_        this.points.addAll(Arrays.asList(points))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,points,reference,points;public,geo,distance,sort,builder,points,geo,point,points,this,points,add,all,arrays,as,list,points,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder points(GeoPoint... points);1540583181;The point to create the range distance facets from.__@param points reference points.;public GeoDistanceSortBuilder points(GeoPoint... points) {_        this.points.addAll(Arrays.asList(points))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,points,reference,points;public,geo,distance,sort,builder,points,geo,point,points,this,points,add,all,arrays,as,list,points,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder points(GeoPoint... points);1545241543;The point to create the range distance facets from.__@param points reference points.;public GeoDistanceSortBuilder points(GeoPoint... points) {_        this.points.addAll(Arrays.asList(points))__        return this__    };the,point,to,create,the,range,distance,facets,from,param,points,reference,points;public,geo,distance,sort,builder,points,geo,point,points,this,points,add,all,arrays,as,list,points,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedPath(String nestedPath);1524684173;Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedPath(String nestedPath);1528211342;Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedPath(String nestedPath);1528706846;Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedPath(String nestedPath);1532353780;Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedPath(String nestedPath);1539615817;Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedPath(String nestedPath);1540486836;Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedPath(String nestedPath);1540583181;Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedPath(String nestedPath);1545241543;Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
GeoDistanceSortBuilder -> public GeoDistance geoDistance();1524684173;Returns the geo distance type used to compute the distance.;public GeoDistance geoDistance() {_        return this.geoDistance__    };returns,the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,geo,distance,return,this,geo,distance
GeoDistanceSortBuilder -> public GeoDistance geoDistance();1528211342;Returns the geo distance type used to compute the distance.;public GeoDistance geoDistance() {_        return this.geoDistance__    };returns,the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,geo,distance,return,this,geo,distance
GeoDistanceSortBuilder -> public GeoDistance geoDistance();1528706846;Returns the geo distance type used to compute the distance.;public GeoDistance geoDistance() {_        return this.geoDistance__    };returns,the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,geo,distance,return,this,geo,distance
GeoDistanceSortBuilder -> public GeoDistance geoDistance();1532353780;Returns the geo distance type used to compute the distance.;public GeoDistance geoDistance() {_        return this.geoDistance__    };returns,the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,geo,distance,return,this,geo,distance
GeoDistanceSortBuilder -> public GeoDistance geoDistance();1539615817;Returns the geo distance type used to compute the distance.;public GeoDistance geoDistance() {_        return this.geoDistance__    };returns,the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,geo,distance,return,this,geo,distance
GeoDistanceSortBuilder -> public GeoDistance geoDistance();1540486836;Returns the geo distance type used to compute the distance.;public GeoDistance geoDistance() {_        return this.geoDistance__    };returns,the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,geo,distance,return,this,geo,distance
GeoDistanceSortBuilder -> public GeoDistance geoDistance();1540583181;Returns the geo distance type used to compute the distance.;public GeoDistance geoDistance() {_        return this.geoDistance__    };returns,the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,geo,distance,return,this,geo,distance
GeoDistanceSortBuilder -> public GeoDistance geoDistance();1545241543;Returns the geo distance type used to compute the distance.;public GeoDistance geoDistance() {_        return this.geoDistance__    };returns,the,geo,distance,type,used,to,compute,the,distance;public,geo,distance,geo,distance,return,this,geo,distance
GeoDistanceSortBuilder -> public GeoPoint[] points();1524684173;Returns the points to create the range distance facets from.;public GeoPoint[] points() {_        return this.points.toArray(new GeoPoint[this.points.size()])__    };returns,the,points,to,create,the,range,distance,facets,from;public,geo,point,points,return,this,points,to,array,new,geo,point,this,points,size
GeoDistanceSortBuilder -> public GeoPoint[] points();1528211342;Returns the points to create the range distance facets from.;public GeoPoint[] points() {_        return this.points.toArray(new GeoPoint[this.points.size()])__    };returns,the,points,to,create,the,range,distance,facets,from;public,geo,point,points,return,this,points,to,array,new,geo,point,this,points,size
GeoDistanceSortBuilder -> public GeoPoint[] points();1528706846;Returns the points to create the range distance facets from.;public GeoPoint[] points() {_        return this.points.toArray(new GeoPoint[this.points.size()])__    };returns,the,points,to,create,the,range,distance,facets,from;public,geo,point,points,return,this,points,to,array,new,geo,point,this,points,size
GeoDistanceSortBuilder -> public GeoPoint[] points();1532353780;Returns the points to create the range distance facets from.;public GeoPoint[] points() {_        return this.points.toArray(new GeoPoint[this.points.size()])__    };returns,the,points,to,create,the,range,distance,facets,from;public,geo,point,points,return,this,points,to,array,new,geo,point,this,points,size
GeoDistanceSortBuilder -> public GeoPoint[] points();1539615817;Returns the points to create the range distance facets from.;public GeoPoint[] points() {_        return this.points.toArray(new GeoPoint[this.points.size()])__    };returns,the,points,to,create,the,range,distance,facets,from;public,geo,point,points,return,this,points,to,array,new,geo,point,this,points,size
GeoDistanceSortBuilder -> public GeoPoint[] points();1540486836;Returns the points to create the range distance facets from.;public GeoPoint[] points() {_        return this.points.toArray(new GeoPoint[this.points.size()])__    };returns,the,points,to,create,the,range,distance,facets,from;public,geo,point,points,return,this,points,to,array,new,geo,point,this,points,size
GeoDistanceSortBuilder -> public GeoPoint[] points();1540583181;Returns the points to create the range distance facets from.;public GeoPoint[] points() {_        return this.points.toArray(new GeoPoint[this.points.size()])__    };returns,the,points,to,create,the,range,distance,facets,from;public,geo,point,points,return,this,points,to,array,new,geo,point,this,points,size
GeoDistanceSortBuilder -> public GeoPoint[] points();1545241543;Returns the points to create the range distance facets from.;public GeoPoint[] points() {_        return this.points.toArray(new GeoPoint[this.points.size()])__    };returns,the,points,to,create,the,range,distance,facets,from;public,geo,point,points,return,this,points,to,array,new,geo,point,this,points,size
GeoDistanceSortBuilder -> public GeoValidationMethod validation();1524684173;Returns the validation method to use for this sort builder.;public GeoValidationMethod validation() {_        return validation__    };returns,the,validation,method,to,use,for,this,sort,builder;public,geo,validation,method,validation,return,validation
GeoDistanceSortBuilder -> public GeoValidationMethod validation();1528211342;Returns the validation method to use for this sort builder.;public GeoValidationMethod validation() {_        return validation__    };returns,the,validation,method,to,use,for,this,sort,builder;public,geo,validation,method,validation,return,validation
GeoDistanceSortBuilder -> public GeoValidationMethod validation();1528706846;Returns the validation method to use for this sort builder.;public GeoValidationMethod validation() {_        return validation__    };returns,the,validation,method,to,use,for,this,sort,builder;public,geo,validation,method,validation,return,validation
GeoDistanceSortBuilder -> public GeoValidationMethod validation();1532353780;Returns the validation method to use for this sort builder.;public GeoValidationMethod validation() {_        return validation__    };returns,the,validation,method,to,use,for,this,sort,builder;public,geo,validation,method,validation,return,validation
GeoDistanceSortBuilder -> public GeoValidationMethod validation();1539615817;Returns the validation method to use for this sort builder.;public GeoValidationMethod validation() {_        return validation__    };returns,the,validation,method,to,use,for,this,sort,builder;public,geo,validation,method,validation,return,validation
GeoDistanceSortBuilder -> public GeoValidationMethod validation();1540486836;Returns the validation method to use for this sort builder.;public GeoValidationMethod validation() {_        return validation__    };returns,the,validation,method,to,use,for,this,sort,builder;public,geo,validation,method,validation,return,validation
GeoDistanceSortBuilder -> public GeoValidationMethod validation();1540583181;Returns the validation method to use for this sort builder.;public GeoValidationMethod validation() {_        return validation__    };returns,the,validation,method,to,use,for,this,sort,builder;public,geo,validation,method,validation,return,validation
GeoDistanceSortBuilder -> public GeoValidationMethod validation();1545241543;Returns the validation method to use for this sort builder.;public GeoValidationMethod validation() {_        return validation__    };returns,the,validation,method,to,use,for,this,sort,builder;public,geo,validation,method,validation,return,validation
GeoDistanceSortBuilder -> public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException;1524684173;Creates a new {@link GeoDistanceSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a_side effect of this method call_@param elementName in some sort syntax variations the field name precedes the xContent object that specifies_further parameters, e.g. in '{ "foo": { "order" : "asc"} }'. When parsing the inner object,_the field name can be passed in via this argument;public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException {_        String fieldName = null__        List<GeoPoint> geoPoints = new ArrayList<>()__        DistanceUnit unit = DistanceUnit.DEFAULT__        GeoDistance geoDistance = GeoDistance.ARC__        SortOrder order = SortOrder.ASC__        SortMode sortMode = null__        QueryBuilder nestedFilter = null__        String nestedPath = null__        NestedSortBuilder nestedSort = null__        GeoValidationMethod validation = null___        XContentParser.Token token__        String currentName = parser.currentName()__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                parseGeoPoints(parser, geoPoints)___                fieldName = currentName__            } else if (token == XContentParser.Token.START_OBJECT) {_                if (NESTED_FILTER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_filter] has been deprecated in favour of the [nested] parameter")__                    nestedFilter = parseInnerQueryBuilder(parser)__                } else if (NESTED_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    nestedSort = NestedSortBuilder.fromXContent(parser)__                } else {_                    _                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }_                    fieldName = currentName__                    GeoPoint point = new GeoPoint()__                    GeoUtils.parseGeoPoint(parser, point)__                    geoPoints.add(point)__                }_            } else if (token.isValue()) {_                if (ORDER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    order = SortOrder.fromString(parser.text())__                } else if (UNIT_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    unit = DistanceUnit.fromString(parser.text())__                } else if (DISTANCE_TYPE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    geoDistance = GeoDistance.fromString(parser.text())__                } else if (VALIDATION_METHOD_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    validation = GeoValidationMethod.fromString(parser.text())__                } else if (SORTMODE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    sortMode = SortMode.fromString(parser.text())__                } else if (NESTED_PATH_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_path] has been deprecated in favour of the [nested] parameter")__                    nestedPath = parser.text()__                } else if (token == Token.VALUE_STRING){_                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }__                    GeoPoint point = new GeoPoint()__                    point.resetFromString(parser.text())__                    geoPoints.add(point)__                    fieldName = currentName__                } else if (fieldName.equals(currentName)){_                    throw new ParsingException(_                            parser.getTokenLocation(),_                            "Only geohashes of type string supported for field [{}]",_                            currentName)__                } else {_                    throw new ParsingException(_                        parser.getTokenLocation(),_                        "[{}] does not support [{}]",_                        NAME, currentName_                    )__                }_            }_        }__        GeoDistanceSortBuilder result = new GeoDistanceSortBuilder(fieldName, geoPoints.toArray(new GeoPoint[geoPoints.size()]))__        result.geoDistance(geoDistance)__        result.unit(unit)__        result.order(order)__        if (sortMode != null) {_            result.sortMode(sortMode)__        }_        if (nestedFilter != null) {_            result.setNestedFilter(nestedFilter)__        }_        result.setNestedPath(nestedPath)__        if (nestedSort != null) {_            result.setNestedSort(nestedSort)__        }_        if (validation != null) {_            result.validation(validation)__        }_        return result__    };creates,a,new,link,geo,distance,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,element,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,geo,distance,sort,builder,from,xcontent,xcontent,parser,parser,string,element,name,throws,ioexception,string,field,name,null,list,geo,point,geo,points,new,array,list,distance,unit,unit,distance,unit,default,geo,distance,geo,distance,geo,distance,arc,sort,order,order,sort,order,asc,sort,mode,sort,mode,null,query,builder,nested,filter,null,string,nested,path,null,nested,sort,builder,nested,sort,null,geo,validation,method,validation,null,xcontent,parser,token,token,string,current,name,parser,current,name,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,name,parser,current,name,else,if,token,xcontent,parser,token,parse,geo,points,parser,geo,points,field,name,current,name,else,if,token,xcontent,parser,token,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,filter,parse,inner,query,builder,parser,else,if,match,current,name,parser,get,deprecation,handler,nested,sort,nested,sort,builder,from,xcontent,parser,else,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,field,name,current,name,geo,point,point,new,geo,point,geo,utils,parse,geo,point,parser,point,geo,points,add,point,else,if,token,is,value,if,match,current,name,parser,get,deprecation,handler,order,sort,order,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,unit,distance,unit,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,geo,distance,geo,distance,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,validation,geo,validation,method,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,sort,mode,sort,mode,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,path,parser,text,else,if,token,token,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,geo,point,point,new,geo,point,point,reset,from,string,parser,text,geo,points,add,point,field,name,current,name,else,if,field,name,equals,current,name,throw,new,parsing,exception,parser,get,token,location,only,geohashes,of,type,string,supported,for,field,current,name,else,throw,new,parsing,exception,parser,get,token,location,does,not,support,name,current,name,geo,distance,sort,builder,result,new,geo,distance,sort,builder,field,name,geo,points,to,array,new,geo,point,geo,points,size,result,geo,distance,geo,distance,result,unit,unit,result,order,order,if,sort,mode,null,result,sort,mode,sort,mode,if,nested,filter,null,result,set,nested,filter,nested,filter,result,set,nested,path,nested,path,if,nested,sort,null,result,set,nested,sort,nested,sort,if,validation,null,result,validation,validation,return,result
GeoDistanceSortBuilder -> public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException;1528211342;Creates a new {@link GeoDistanceSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a_side effect of this method call_@param elementName in some sort syntax variations the field name precedes the xContent object that specifies_further parameters, e.g. in '{ "foo": { "order" : "asc"} }'. When parsing the inner object,_the field name can be passed in via this argument;public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException {_        String fieldName = null__        List<GeoPoint> geoPoints = new ArrayList<>()__        DistanceUnit unit = DistanceUnit.DEFAULT__        GeoDistance geoDistance = GeoDistance.ARC__        SortOrder order = SortOrder.ASC__        SortMode sortMode = null__        QueryBuilder nestedFilter = null__        String nestedPath = null__        NestedSortBuilder nestedSort = null__        GeoValidationMethod validation = null___        XContentParser.Token token__        String currentName = parser.currentName()__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                parseGeoPoints(parser, geoPoints)___                fieldName = currentName__            } else if (token == XContentParser.Token.START_OBJECT) {_                if (NESTED_FILTER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_filter] has been deprecated in favour of the [nested] parameter")__                    nestedFilter = parseInnerQueryBuilder(parser)__                } else if (NESTED_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    nestedSort = NestedSortBuilder.fromXContent(parser)__                } else {_                    _                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }_                    fieldName = currentName__                    GeoPoint point = new GeoPoint()__                    GeoUtils.parseGeoPoint(parser, point)__                    geoPoints.add(point)__                }_            } else if (token.isValue()) {_                if (ORDER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    order = SortOrder.fromString(parser.text())__                } else if (UNIT_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    unit = DistanceUnit.fromString(parser.text())__                } else if (DISTANCE_TYPE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    geoDistance = GeoDistance.fromString(parser.text())__                } else if (VALIDATION_METHOD_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    validation = GeoValidationMethod.fromString(parser.text())__                } else if (SORTMODE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    sortMode = SortMode.fromString(parser.text())__                } else if (NESTED_PATH_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_path] has been deprecated in favour of the [nested] parameter")__                    nestedPath = parser.text()__                } else if (token == Token.VALUE_STRING){_                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }__                    GeoPoint point = new GeoPoint()__                    point.resetFromString(parser.text())__                    geoPoints.add(point)__                    fieldName = currentName__                } else if (fieldName.equals(currentName)){_                    throw new ParsingException(_                            parser.getTokenLocation(),_                            "Only geohashes of type string supported for field [{}]",_                            currentName)__                } else {_                    throw new ParsingException(_                        parser.getTokenLocation(),_                        "[{}] does not support [{}]",_                        NAME, currentName_                    )__                }_            }_        }__        GeoDistanceSortBuilder result = new GeoDistanceSortBuilder(fieldName, geoPoints.toArray(new GeoPoint[geoPoints.size()]))__        result.geoDistance(geoDistance)__        result.unit(unit)__        result.order(order)__        if (sortMode != null) {_            result.sortMode(sortMode)__        }_        if (nestedFilter != null) {_            result.setNestedFilter(nestedFilter)__        }_        result.setNestedPath(nestedPath)__        if (nestedSort != null) {_            result.setNestedSort(nestedSort)__        }_        if (validation != null) {_            result.validation(validation)__        }_        return result__    };creates,a,new,link,geo,distance,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,element,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,geo,distance,sort,builder,from,xcontent,xcontent,parser,parser,string,element,name,throws,ioexception,string,field,name,null,list,geo,point,geo,points,new,array,list,distance,unit,unit,distance,unit,default,geo,distance,geo,distance,geo,distance,arc,sort,order,order,sort,order,asc,sort,mode,sort,mode,null,query,builder,nested,filter,null,string,nested,path,null,nested,sort,builder,nested,sort,null,geo,validation,method,validation,null,xcontent,parser,token,token,string,current,name,parser,current,name,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,name,parser,current,name,else,if,token,xcontent,parser,token,parse,geo,points,parser,geo,points,field,name,current,name,else,if,token,xcontent,parser,token,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,filter,parse,inner,query,builder,parser,else,if,match,current,name,parser,get,deprecation,handler,nested,sort,nested,sort,builder,from,xcontent,parser,else,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,field,name,current,name,geo,point,point,new,geo,point,geo,utils,parse,geo,point,parser,point,geo,points,add,point,else,if,token,is,value,if,match,current,name,parser,get,deprecation,handler,order,sort,order,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,unit,distance,unit,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,geo,distance,geo,distance,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,validation,geo,validation,method,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,sort,mode,sort,mode,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,path,parser,text,else,if,token,token,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,geo,point,point,new,geo,point,point,reset,from,string,parser,text,geo,points,add,point,field,name,current,name,else,if,field,name,equals,current,name,throw,new,parsing,exception,parser,get,token,location,only,geohashes,of,type,string,supported,for,field,current,name,else,throw,new,parsing,exception,parser,get,token,location,does,not,support,name,current,name,geo,distance,sort,builder,result,new,geo,distance,sort,builder,field,name,geo,points,to,array,new,geo,point,geo,points,size,result,geo,distance,geo,distance,result,unit,unit,result,order,order,if,sort,mode,null,result,sort,mode,sort,mode,if,nested,filter,null,result,set,nested,filter,nested,filter,result,set,nested,path,nested,path,if,nested,sort,null,result,set,nested,sort,nested,sort,if,validation,null,result,validation,validation,return,result
GeoDistanceSortBuilder -> public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException;1528706846;Creates a new {@link GeoDistanceSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a_side effect of this method call_@param elementName in some sort syntax variations the field name precedes the xContent object that specifies_further parameters, e.g. in '{ "foo": { "order" : "asc"} }'. When parsing the inner object,_the field name can be passed in via this argument;public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException {_        String fieldName = null__        List<GeoPoint> geoPoints = new ArrayList<>()__        DistanceUnit unit = DistanceUnit.DEFAULT__        GeoDistance geoDistance = GeoDistance.ARC__        SortOrder order = SortOrder.ASC__        SortMode sortMode = null__        QueryBuilder nestedFilter = null__        String nestedPath = null__        NestedSortBuilder nestedSort = null__        GeoValidationMethod validation = null__        boolean ignoreUnmapped = false___        XContentParser.Token token__        String currentName = parser.currentName()__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                parseGeoPoints(parser, geoPoints)___                fieldName = currentName__            } else if (token == XContentParser.Token.START_OBJECT) {_                if (NESTED_FILTER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_filter] has been deprecated in favour of the [nested] parameter")__                    nestedFilter = parseInnerQueryBuilder(parser)__                } else if (NESTED_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    nestedSort = NestedSortBuilder.fromXContent(parser)__                } else {_                    _                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }_                    fieldName = currentName__                    GeoPoint point = new GeoPoint()__                    GeoUtils.parseGeoPoint(parser, point)__                    geoPoints.add(point)__                }_            } else if (token.isValue()) {_                if (ORDER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    order = SortOrder.fromString(parser.text())__                } else if (UNIT_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    unit = DistanceUnit.fromString(parser.text())__                } else if (DISTANCE_TYPE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    geoDistance = GeoDistance.fromString(parser.text())__                } else if (VALIDATION_METHOD_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    validation = GeoValidationMethod.fromString(parser.text())__                } else if (SORTMODE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    sortMode = SortMode.fromString(parser.text())__                } else if (NESTED_PATH_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_path] has been deprecated in favour of the [nested] parameter")__                    nestedPath = parser.text()__                } else if (IGNORE_UNMAPPED.match(currentName, parser.getDeprecationHandler())) {_                    ignoreUnmapped = parser.booleanValue()__                } else if (token == Token.VALUE_STRING){_                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }__                    GeoPoint point = new GeoPoint()__                    point.resetFromString(parser.text())__                    geoPoints.add(point)__                    fieldName = currentName__                } else if (fieldName.equals(currentName)){_                    throw new ParsingException(_                            parser.getTokenLocation(),_                            "Only geohashes of type string supported for field [{}]",_                            currentName)__                } else {_                    throw new ParsingException(_                        parser.getTokenLocation(),_                        "[{}] does not support [{}]",_                        NAME, currentName_                    )__                }_            }_        }__        GeoDistanceSortBuilder result = new GeoDistanceSortBuilder(fieldName, geoPoints.toArray(new GeoPoint[geoPoints.size()]))__        result.geoDistance(geoDistance)__        result.unit(unit)__        result.order(order)__        if (sortMode != null) {_            result.sortMode(sortMode)__        }_        if (nestedFilter != null) {_            result.setNestedFilter(nestedFilter)__        }_        result.setNestedPath(nestedPath)__        if (nestedSort != null) {_            result.setNestedSort(nestedSort)__        }_        if (validation != null) {_            result.validation(validation)__        }_        result.ignoreUnmapped(ignoreUnmapped)__        return result__    };creates,a,new,link,geo,distance,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,element,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,geo,distance,sort,builder,from,xcontent,xcontent,parser,parser,string,element,name,throws,ioexception,string,field,name,null,list,geo,point,geo,points,new,array,list,distance,unit,unit,distance,unit,default,geo,distance,geo,distance,geo,distance,arc,sort,order,order,sort,order,asc,sort,mode,sort,mode,null,query,builder,nested,filter,null,string,nested,path,null,nested,sort,builder,nested,sort,null,geo,validation,method,validation,null,boolean,ignore,unmapped,false,xcontent,parser,token,token,string,current,name,parser,current,name,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,name,parser,current,name,else,if,token,xcontent,parser,token,parse,geo,points,parser,geo,points,field,name,current,name,else,if,token,xcontent,parser,token,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,filter,parse,inner,query,builder,parser,else,if,match,current,name,parser,get,deprecation,handler,nested,sort,nested,sort,builder,from,xcontent,parser,else,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,field,name,current,name,geo,point,point,new,geo,point,geo,utils,parse,geo,point,parser,point,geo,points,add,point,else,if,token,is,value,if,match,current,name,parser,get,deprecation,handler,order,sort,order,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,unit,distance,unit,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,geo,distance,geo,distance,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,validation,geo,validation,method,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,sort,mode,sort,mode,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,path,parser,text,else,if,match,current,name,parser,get,deprecation,handler,ignore,unmapped,parser,boolean,value,else,if,token,token,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,geo,point,point,new,geo,point,point,reset,from,string,parser,text,geo,points,add,point,field,name,current,name,else,if,field,name,equals,current,name,throw,new,parsing,exception,parser,get,token,location,only,geohashes,of,type,string,supported,for,field,current,name,else,throw,new,parsing,exception,parser,get,token,location,does,not,support,name,current,name,geo,distance,sort,builder,result,new,geo,distance,sort,builder,field,name,geo,points,to,array,new,geo,point,geo,points,size,result,geo,distance,geo,distance,result,unit,unit,result,order,order,if,sort,mode,null,result,sort,mode,sort,mode,if,nested,filter,null,result,set,nested,filter,nested,filter,result,set,nested,path,nested,path,if,nested,sort,null,result,set,nested,sort,nested,sort,if,validation,null,result,validation,validation,result,ignore,unmapped,ignore,unmapped,return,result
GeoDistanceSortBuilder -> public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException;1532353780;Creates a new {@link GeoDistanceSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a_side effect of this method call_@param elementName in some sort syntax variations the field name precedes the xContent object that specifies_further parameters, e.g. in '{ "foo": { "order" : "asc"} }'. When parsing the inner object,_the field name can be passed in via this argument;public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException {_        String fieldName = null__        List<GeoPoint> geoPoints = new ArrayList<>()__        DistanceUnit unit = DistanceUnit.DEFAULT__        GeoDistance geoDistance = GeoDistance.ARC__        SortOrder order = SortOrder.ASC__        SortMode sortMode = null__        QueryBuilder nestedFilter = null__        String nestedPath = null__        NestedSortBuilder nestedSort = null__        GeoValidationMethod validation = null__        boolean ignoreUnmapped = false___        XContentParser.Token token__        String currentName = parser.currentName()__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                parseGeoPoints(parser, geoPoints)___                fieldName = currentName__            } else if (token == XContentParser.Token.START_OBJECT) {_                if (NESTED_FILTER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_filter] has been deprecated in favour of the [nested] parameter")__                    nestedFilter = parseInnerQueryBuilder(parser)__                } else if (NESTED_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    nestedSort = NestedSortBuilder.fromXContent(parser)__                } else {_                    _                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }_                    fieldName = currentName__                    GeoPoint point = new GeoPoint()__                    GeoUtils.parseGeoPoint(parser, point)__                    geoPoints.add(point)__                }_            } else if (token.isValue()) {_                if (ORDER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    order = SortOrder.fromString(parser.text())__                } else if (UNIT_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    unit = DistanceUnit.fromString(parser.text())__                } else if (DISTANCE_TYPE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    geoDistance = GeoDistance.fromString(parser.text())__                } else if (VALIDATION_METHOD_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    validation = GeoValidationMethod.fromString(parser.text())__                } else if (SORTMODE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    sortMode = SortMode.fromString(parser.text())__                } else if (NESTED_PATH_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_path] has been deprecated in favour of the [nested] parameter")__                    nestedPath = parser.text()__                } else if (IGNORE_UNMAPPED.match(currentName, parser.getDeprecationHandler())) {_                    ignoreUnmapped = parser.booleanValue()__                } else if (token == Token.VALUE_STRING){_                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }__                    GeoPoint point = new GeoPoint()__                    point.resetFromString(parser.text())__                    geoPoints.add(point)__                    fieldName = currentName__                } else if (fieldName.equals(currentName)){_                    throw new ParsingException(_                            parser.getTokenLocation(),_                            "Only geohashes of type string supported for field [{}]",_                            currentName)__                } else {_                    throw new ParsingException(_                        parser.getTokenLocation(),_                        "[{}] does not support [{}]",_                        NAME, currentName_                    )__                }_            }_        }__        GeoDistanceSortBuilder result = new GeoDistanceSortBuilder(fieldName, geoPoints.toArray(new GeoPoint[geoPoints.size()]))__        result.geoDistance(geoDistance)__        result.unit(unit)__        result.order(order)__        if (sortMode != null) {_            result.sortMode(sortMode)__        }_        if (nestedFilter != null) {_            result.setNestedFilter(nestedFilter)__        }_        result.setNestedPath(nestedPath)__        if (nestedSort != null) {_            result.setNestedSort(nestedSort)__        }_        if (validation != null) {_            result.validation(validation)__        }_        result.ignoreUnmapped(ignoreUnmapped)__        return result__    };creates,a,new,link,geo,distance,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,element,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,geo,distance,sort,builder,from,xcontent,xcontent,parser,parser,string,element,name,throws,ioexception,string,field,name,null,list,geo,point,geo,points,new,array,list,distance,unit,unit,distance,unit,default,geo,distance,geo,distance,geo,distance,arc,sort,order,order,sort,order,asc,sort,mode,sort,mode,null,query,builder,nested,filter,null,string,nested,path,null,nested,sort,builder,nested,sort,null,geo,validation,method,validation,null,boolean,ignore,unmapped,false,xcontent,parser,token,token,string,current,name,parser,current,name,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,name,parser,current,name,else,if,token,xcontent,parser,token,parse,geo,points,parser,geo,points,field,name,current,name,else,if,token,xcontent,parser,token,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,filter,parse,inner,query,builder,parser,else,if,match,current,name,parser,get,deprecation,handler,nested,sort,nested,sort,builder,from,xcontent,parser,else,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,field,name,current,name,geo,point,point,new,geo,point,geo,utils,parse,geo,point,parser,point,geo,points,add,point,else,if,token,is,value,if,match,current,name,parser,get,deprecation,handler,order,sort,order,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,unit,distance,unit,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,geo,distance,geo,distance,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,validation,geo,validation,method,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,sort,mode,sort,mode,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,path,parser,text,else,if,match,current,name,parser,get,deprecation,handler,ignore,unmapped,parser,boolean,value,else,if,token,token,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,geo,point,point,new,geo,point,point,reset,from,string,parser,text,geo,points,add,point,field,name,current,name,else,if,field,name,equals,current,name,throw,new,parsing,exception,parser,get,token,location,only,geohashes,of,type,string,supported,for,field,current,name,else,throw,new,parsing,exception,parser,get,token,location,does,not,support,name,current,name,geo,distance,sort,builder,result,new,geo,distance,sort,builder,field,name,geo,points,to,array,new,geo,point,geo,points,size,result,geo,distance,geo,distance,result,unit,unit,result,order,order,if,sort,mode,null,result,sort,mode,sort,mode,if,nested,filter,null,result,set,nested,filter,nested,filter,result,set,nested,path,nested,path,if,nested,sort,null,result,set,nested,sort,nested,sort,if,validation,null,result,validation,validation,result,ignore,unmapped,ignore,unmapped,return,result
GeoDistanceSortBuilder -> public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException;1539615817;Creates a new {@link GeoDistanceSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a_side effect of this method call_@param elementName in some sort syntax variations the field name precedes the xContent object that specifies_further parameters, e.g. in '{ "foo": { "order" : "asc"} }'. When parsing the inner object,_the field name can be passed in via this argument;public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException {_        String fieldName = null__        List<GeoPoint> geoPoints = new ArrayList<>()__        DistanceUnit unit = DistanceUnit.DEFAULT__        GeoDistance geoDistance = GeoDistance.ARC__        SortOrder order = SortOrder.ASC__        SortMode sortMode = null__        QueryBuilder nestedFilter = null__        String nestedPath = null__        NestedSortBuilder nestedSort = null__        GeoValidationMethod validation = null__        boolean ignoreUnmapped = false___        XContentParser.Token token__        String currentName = parser.currentName()__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                parseGeoPoints(parser, geoPoints)___                fieldName = currentName__            } else if (token == XContentParser.Token.START_OBJECT) {_                if (NESTED_FILTER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_filter] has been deprecated in favour of the [nested] parameter")__                    nestedFilter = parseInnerQueryBuilder(parser)__                } else if (NESTED_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    nestedSort = NestedSortBuilder.fromXContent(parser)__                } else {_                    _                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }_                    fieldName = currentName__                    GeoPoint point = new GeoPoint()__                    GeoUtils.parseGeoPoint(parser, point)__                    geoPoints.add(point)__                }_            } else if (token.isValue()) {_                if (ORDER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    order = SortOrder.fromString(parser.text())__                } else if (UNIT_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    unit = DistanceUnit.fromString(parser.text())__                } else if (DISTANCE_TYPE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    geoDistance = GeoDistance.fromString(parser.text())__                } else if (VALIDATION_METHOD_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    validation = GeoValidationMethod.fromString(parser.text())__                } else if (SORTMODE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    sortMode = SortMode.fromString(parser.text())__                } else if (NESTED_PATH_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_path] has been deprecated in favour of the [nested] parameter")__                    nestedPath = parser.text()__                } else if (IGNORE_UNMAPPED.match(currentName, parser.getDeprecationHandler())) {_                    ignoreUnmapped = parser.booleanValue()__                } else if (token == Token.VALUE_STRING){_                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }__                    GeoPoint point = new GeoPoint()__                    point.resetFromString(parser.text())__                    geoPoints.add(point)__                    fieldName = currentName__                } else if (fieldName.equals(currentName)){_                    throw new ParsingException(_                            parser.getTokenLocation(),_                            "Only geohashes of type string supported for field [{}]",_                            currentName)__                } else {_                    throw new ParsingException(_                        parser.getTokenLocation(),_                        "[{}] does not support [{}]",_                        NAME, currentName_                    )__                }_            }_        }__        GeoDistanceSortBuilder result = new GeoDistanceSortBuilder(fieldName, geoPoints.toArray(new GeoPoint[geoPoints.size()]))__        result.geoDistance(geoDistance)__        result.unit(unit)__        result.order(order)__        if (sortMode != null) {_            result.sortMode(sortMode)__        }_        if (nestedFilter != null) {_            result.setNestedFilter(nestedFilter)__        }_        result.setNestedPath(nestedPath)__        if (nestedSort != null) {_            result.setNestedSort(nestedSort)__        }_        if (validation != null) {_            result.validation(validation)__        }_        result.ignoreUnmapped(ignoreUnmapped)__        return result__    };creates,a,new,link,geo,distance,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,element,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,geo,distance,sort,builder,from,xcontent,xcontent,parser,parser,string,element,name,throws,ioexception,string,field,name,null,list,geo,point,geo,points,new,array,list,distance,unit,unit,distance,unit,default,geo,distance,geo,distance,geo,distance,arc,sort,order,order,sort,order,asc,sort,mode,sort,mode,null,query,builder,nested,filter,null,string,nested,path,null,nested,sort,builder,nested,sort,null,geo,validation,method,validation,null,boolean,ignore,unmapped,false,xcontent,parser,token,token,string,current,name,parser,current,name,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,name,parser,current,name,else,if,token,xcontent,parser,token,parse,geo,points,parser,geo,points,field,name,current,name,else,if,token,xcontent,parser,token,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,filter,parse,inner,query,builder,parser,else,if,match,current,name,parser,get,deprecation,handler,nested,sort,nested,sort,builder,from,xcontent,parser,else,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,field,name,current,name,geo,point,point,new,geo,point,geo,utils,parse,geo,point,parser,point,geo,points,add,point,else,if,token,is,value,if,match,current,name,parser,get,deprecation,handler,order,sort,order,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,unit,distance,unit,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,geo,distance,geo,distance,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,validation,geo,validation,method,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,sort,mode,sort,mode,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,path,parser,text,else,if,match,current,name,parser,get,deprecation,handler,ignore,unmapped,parser,boolean,value,else,if,token,token,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,geo,point,point,new,geo,point,point,reset,from,string,parser,text,geo,points,add,point,field,name,current,name,else,if,field,name,equals,current,name,throw,new,parsing,exception,parser,get,token,location,only,geohashes,of,type,string,supported,for,field,current,name,else,throw,new,parsing,exception,parser,get,token,location,does,not,support,name,current,name,geo,distance,sort,builder,result,new,geo,distance,sort,builder,field,name,geo,points,to,array,new,geo,point,geo,points,size,result,geo,distance,geo,distance,result,unit,unit,result,order,order,if,sort,mode,null,result,sort,mode,sort,mode,if,nested,filter,null,result,set,nested,filter,nested,filter,result,set,nested,path,nested,path,if,nested,sort,null,result,set,nested,sort,nested,sort,if,validation,null,result,validation,validation,result,ignore,unmapped,ignore,unmapped,return,result
GeoDistanceSortBuilder -> public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException;1540486836;Creates a new {@link GeoDistanceSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a_side effect of this method call_@param elementName in some sort syntax variations the field name precedes the xContent object that specifies_further parameters, e.g. in '{ "foo": { "order" : "asc"} }'. When parsing the inner object,_the field name can be passed in via this argument;public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException {_        String fieldName = null__        List<GeoPoint> geoPoints = new ArrayList<>()__        DistanceUnit unit = DistanceUnit.DEFAULT__        GeoDistance geoDistance = GeoDistance.ARC__        SortOrder order = SortOrder.ASC__        SortMode sortMode = null__        QueryBuilder nestedFilter = null__        String nestedPath = null__        NestedSortBuilder nestedSort = null__        GeoValidationMethod validation = null__        boolean ignoreUnmapped = false___        XContentParser.Token token__        String currentName = parser.currentName()__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                parseGeoPoints(parser, geoPoints)___                fieldName = currentName__            } else if (token == XContentParser.Token.START_OBJECT) {_                if (NESTED_FILTER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_filter] has been deprecated in favour of the [nested] parameter")__                    nestedFilter = parseInnerQueryBuilder(parser)__                } else if (NESTED_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    nestedSort = NestedSortBuilder.fromXContent(parser)__                } else {_                    _                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }_                    fieldName = currentName__                    GeoPoint point = new GeoPoint()__                    GeoUtils.parseGeoPoint(parser, point)__                    geoPoints.add(point)__                }_            } else if (token.isValue()) {_                if (ORDER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    order = SortOrder.fromString(parser.text())__                } else if (UNIT_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    unit = DistanceUnit.fromString(parser.text())__                } else if (DISTANCE_TYPE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    geoDistance = GeoDistance.fromString(parser.text())__                } else if (VALIDATION_METHOD_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    validation = GeoValidationMethod.fromString(parser.text())__                } else if (SORTMODE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    sortMode = SortMode.fromString(parser.text())__                } else if (NESTED_PATH_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    DEPRECATION_LOGGER.deprecated("[nested_path] has been deprecated in favour of the [nested] parameter")__                    nestedPath = parser.text()__                } else if (IGNORE_UNMAPPED.match(currentName, parser.getDeprecationHandler())) {_                    ignoreUnmapped = parser.booleanValue()__                } else if (token == Token.VALUE_STRING){_                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }__                    GeoPoint point = new GeoPoint()__                    point.resetFromString(parser.text())__                    geoPoints.add(point)__                    fieldName = currentName__                } else if (fieldName.equals(currentName)){_                    throw new ParsingException(_                            parser.getTokenLocation(),_                            "Only geohashes of type string supported for field [{}]",_                            currentName)__                } else {_                    throw new ParsingException(_                        parser.getTokenLocation(),_                        "[{}] does not support [{}]",_                        NAME, currentName_                    )__                }_            }_        }__        GeoDistanceSortBuilder result = new GeoDistanceSortBuilder(fieldName, geoPoints.toArray(new GeoPoint[geoPoints.size()]))__        result.geoDistance(geoDistance)__        result.unit(unit)__        result.order(order)__        if (sortMode != null) {_            result.sortMode(sortMode)__        }_        if (nestedFilter != null) {_            result.setNestedFilter(nestedFilter)__        }_        result.setNestedPath(nestedPath)__        if (nestedSort != null) {_            result.setNestedSort(nestedSort)__        }_        if (validation != null) {_            result.validation(validation)__        }_        result.ignoreUnmapped(ignoreUnmapped)__        return result__    };creates,a,new,link,geo,distance,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,element,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,geo,distance,sort,builder,from,xcontent,xcontent,parser,parser,string,element,name,throws,ioexception,string,field,name,null,list,geo,point,geo,points,new,array,list,distance,unit,unit,distance,unit,default,geo,distance,geo,distance,geo,distance,arc,sort,order,order,sort,order,asc,sort,mode,sort,mode,null,query,builder,nested,filter,null,string,nested,path,null,nested,sort,builder,nested,sort,null,geo,validation,method,validation,null,boolean,ignore,unmapped,false,xcontent,parser,token,token,string,current,name,parser,current,name,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,name,parser,current,name,else,if,token,xcontent,parser,token,parse,geo,points,parser,geo,points,field,name,current,name,else,if,token,xcontent,parser,token,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,filter,parse,inner,query,builder,parser,else,if,match,current,name,parser,get,deprecation,handler,nested,sort,nested,sort,builder,from,xcontent,parser,else,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,field,name,current,name,geo,point,point,new,geo,point,geo,utils,parse,geo,point,parser,point,geo,points,add,point,else,if,token,is,value,if,match,current,name,parser,get,deprecation,handler,order,sort,order,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,unit,distance,unit,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,geo,distance,geo,distance,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,validation,geo,validation,method,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,sort,mode,sort,mode,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,path,parser,text,else,if,match,current,name,parser,get,deprecation,handler,ignore,unmapped,parser,boolean,value,else,if,token,token,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,geo,point,point,new,geo,point,point,reset,from,string,parser,text,geo,points,add,point,field,name,current,name,else,if,field,name,equals,current,name,throw,new,parsing,exception,parser,get,token,location,only,geohashes,of,type,string,supported,for,field,current,name,else,throw,new,parsing,exception,parser,get,token,location,does,not,support,name,current,name,geo,distance,sort,builder,result,new,geo,distance,sort,builder,field,name,geo,points,to,array,new,geo,point,geo,points,size,result,geo,distance,geo,distance,result,unit,unit,result,order,order,if,sort,mode,null,result,sort,mode,sort,mode,if,nested,filter,null,result,set,nested,filter,nested,filter,result,set,nested,path,nested,path,if,nested,sort,null,result,set,nested,sort,nested,sort,if,validation,null,result,validation,validation,result,ignore,unmapped,ignore,unmapped,return,result
GeoDistanceSortBuilder -> public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException;1540583181;Creates a new {@link GeoDistanceSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a_side effect of this method call_@param elementName in some sort syntax variations the field name precedes the xContent object that specifies_further parameters, e.g. in '{ "foo": { "order" : "asc"} }'. When parsing the inner object,_the field name can be passed in via this argument;public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException {_        String fieldName = null__        List<GeoPoint> geoPoints = new ArrayList<>()__        DistanceUnit unit = DistanceUnit.DEFAULT__        GeoDistance geoDistance = GeoDistance.ARC__        SortOrder order = SortOrder.ASC__        SortMode sortMode = null__        QueryBuilder nestedFilter = null__        String nestedPath = null__        NestedSortBuilder nestedSort = null__        GeoValidationMethod validation = null__        boolean ignoreUnmapped = false___        XContentParser.Token token__        String currentName = parser.currentName()__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                parseGeoPoints(parser, geoPoints)___                fieldName = currentName__            } else if (token == XContentParser.Token.START_OBJECT) {_                if (NESTED_FILTER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    deprecationLogger.deprecated("[nested_filter] has been deprecated in favour of the [nested] parameter")__                    nestedFilter = parseInnerQueryBuilder(parser)__                } else if (NESTED_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    nestedSort = NestedSortBuilder.fromXContent(parser)__                } else {_                    _                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }_                    fieldName = currentName__                    GeoPoint point = new GeoPoint()__                    GeoUtils.parseGeoPoint(parser, point)__                    geoPoints.add(point)__                }_            } else if (token.isValue()) {_                if (ORDER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    order = SortOrder.fromString(parser.text())__                } else if (UNIT_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    unit = DistanceUnit.fromString(parser.text())__                } else if (DISTANCE_TYPE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    geoDistance = GeoDistance.fromString(parser.text())__                } else if (VALIDATION_METHOD_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    validation = GeoValidationMethod.fromString(parser.text())__                } else if (SORTMODE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    sortMode = SortMode.fromString(parser.text())__                } else if (NESTED_PATH_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    deprecationLogger.deprecated("[nested_path] has been deprecated in favour of the [nested] parameter")__                    nestedPath = parser.text()__                } else if (IGNORE_UNMAPPED.match(currentName, parser.getDeprecationHandler())) {_                    ignoreUnmapped = parser.booleanValue()__                } else if (token == Token.VALUE_STRING){_                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }__                    GeoPoint point = new GeoPoint()__                    point.resetFromString(parser.text())__                    geoPoints.add(point)__                    fieldName = currentName__                } else if (fieldName.equals(currentName)){_                    throw new ParsingException(_                            parser.getTokenLocation(),_                            "Only geohashes of type string supported for field [{}]",_                            currentName)__                } else {_                    throw new ParsingException(_                        parser.getTokenLocation(),_                        "[{}] does not support [{}]",_                        NAME, currentName_                    )__                }_            }_        }__        GeoDistanceSortBuilder result = new GeoDistanceSortBuilder(fieldName, geoPoints.toArray(new GeoPoint[geoPoints.size()]))__        result.geoDistance(geoDistance)__        result.unit(unit)__        result.order(order)__        if (sortMode != null) {_            result.sortMode(sortMode)__        }_        if (nestedFilter != null) {_            result.setNestedFilter(nestedFilter)__        }_        result.setNestedPath(nestedPath)__        if (nestedSort != null) {_            result.setNestedSort(nestedSort)__        }_        if (validation != null) {_            result.validation(validation)__        }_        result.ignoreUnmapped(ignoreUnmapped)__        return result__    };creates,a,new,link,geo,distance,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,element,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,geo,distance,sort,builder,from,xcontent,xcontent,parser,parser,string,element,name,throws,ioexception,string,field,name,null,list,geo,point,geo,points,new,array,list,distance,unit,unit,distance,unit,default,geo,distance,geo,distance,geo,distance,arc,sort,order,order,sort,order,asc,sort,mode,sort,mode,null,query,builder,nested,filter,null,string,nested,path,null,nested,sort,builder,nested,sort,null,geo,validation,method,validation,null,boolean,ignore,unmapped,false,xcontent,parser,token,token,string,current,name,parser,current,name,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,name,parser,current,name,else,if,token,xcontent,parser,token,parse,geo,points,parser,geo,points,field,name,current,name,else,if,token,xcontent,parser,token,if,match,current,name,parser,get,deprecation,handler,deprecation,logger,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,filter,parse,inner,query,builder,parser,else,if,match,current,name,parser,get,deprecation,handler,nested,sort,nested,sort,builder,from,xcontent,parser,else,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,field,name,current,name,geo,point,point,new,geo,point,geo,utils,parse,geo,point,parser,point,geo,points,add,point,else,if,token,is,value,if,match,current,name,parser,get,deprecation,handler,order,sort,order,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,unit,distance,unit,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,geo,distance,geo,distance,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,validation,geo,validation,method,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,sort,mode,sort,mode,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,deprecation,logger,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,path,parser,text,else,if,match,current,name,parser,get,deprecation,handler,ignore,unmapped,parser,boolean,value,else,if,token,token,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,geo,point,point,new,geo,point,point,reset,from,string,parser,text,geo,points,add,point,field,name,current,name,else,if,field,name,equals,current,name,throw,new,parsing,exception,parser,get,token,location,only,geohashes,of,type,string,supported,for,field,current,name,else,throw,new,parsing,exception,parser,get,token,location,does,not,support,name,current,name,geo,distance,sort,builder,result,new,geo,distance,sort,builder,field,name,geo,points,to,array,new,geo,point,geo,points,size,result,geo,distance,geo,distance,result,unit,unit,result,order,order,if,sort,mode,null,result,sort,mode,sort,mode,if,nested,filter,null,result,set,nested,filter,nested,filter,result,set,nested,path,nested,path,if,nested,sort,null,result,set,nested,sort,nested,sort,if,validation,null,result,validation,validation,result,ignore,unmapped,ignore,unmapped,return,result
GeoDistanceSortBuilder -> public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException;1545241543;Creates a new {@link GeoDistanceSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a_side effect of this method call_@param elementName in some sort syntax variations the field name precedes the xContent object that specifies_further parameters, e.g. in '{ "foo": { "order" : "asc"} }'. When parsing the inner object,_the field name can be passed in via this argument;public static GeoDistanceSortBuilder fromXContent(XContentParser parser, String elementName) throws IOException {_        String fieldName = null__        List<GeoPoint> geoPoints = new ArrayList<>()__        DistanceUnit unit = DistanceUnit.DEFAULT__        GeoDistance geoDistance = GeoDistance.ARC__        SortOrder order = SortOrder.ASC__        SortMode sortMode = null__        QueryBuilder nestedFilter = null__        String nestedPath = null__        NestedSortBuilder nestedSort = null__        GeoValidationMethod validation = null__        boolean ignoreUnmapped = false___        XContentParser.Token token__        String currentName = parser.currentName()__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                parseGeoPoints(parser, geoPoints)___                fieldName = currentName__            } else if (token == XContentParser.Token.START_OBJECT) {_                if (NESTED_FILTER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    deprecationLogger.deprecated("[nested_filter] has been deprecated in favour of the [nested] parameter")__                    nestedFilter = parseInnerQueryBuilder(parser)__                } else if (NESTED_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    nestedSort = NestedSortBuilder.fromXContent(parser)__                } else {_                    _                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }_                    fieldName = currentName__                    GeoPoint point = new GeoPoint()__                    GeoUtils.parseGeoPoint(parser, point)__                    geoPoints.add(point)__                }_            } else if (token.isValue()) {_                if (ORDER_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    order = SortOrder.fromString(parser.text())__                } else if (UNIT_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    unit = DistanceUnit.fromString(parser.text())__                } else if (DISTANCE_TYPE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    geoDistance = GeoDistance.fromString(parser.text())__                } else if (VALIDATION_METHOD_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    validation = GeoValidationMethod.fromString(parser.text())__                } else if (SORTMODE_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    sortMode = SortMode.fromString(parser.text())__                } else if (NESTED_PATH_FIELD.match(currentName, parser.getDeprecationHandler())) {_                    deprecationLogger.deprecated("[nested_path] has been deprecated in favour of the [nested] parameter")__                    nestedPath = parser.text()__                } else if (IGNORE_UNMAPPED.match(currentName, parser.getDeprecationHandler())) {_                    ignoreUnmapped = parser.booleanValue()__                } else if (token == Token.VALUE_STRING){_                    if (fieldName != null && fieldName.equals(currentName) == false) {_                        throw new ParsingException(_                                parser.getTokenLocation(),_                                "Trying to reset fieldName to [{}], already set to [{}].",_                                currentName,_                                fieldName)__                    }__                    GeoPoint point = new GeoPoint()__                    point.resetFromString(parser.text())__                    geoPoints.add(point)__                    fieldName = currentName__                } else if (fieldName.equals(currentName)){_                    throw new ParsingException(_                            parser.getTokenLocation(),_                            "Only geohashes of type string supported for field [{}]",_                            currentName)__                } else {_                    throw new ParsingException(_                        parser.getTokenLocation(),_                        "[{}] does not support [{}]",_                        NAME, currentName_                    )__                }_            }_        }__        GeoDistanceSortBuilder result = new GeoDistanceSortBuilder(fieldName, geoPoints.toArray(new GeoPoint[geoPoints.size()]))__        result.geoDistance(geoDistance)__        result.unit(unit)__        result.order(order)__        if (sortMode != null) {_            result.sortMode(sortMode)__        }_        if (nestedFilter != null) {_            result.setNestedFilter(nestedFilter)__        }_        result.setNestedPath(nestedPath)__        if (nestedSort != null) {_            result.setNestedSort(nestedSort)__        }_        if (validation != null) {_            result.validation(validation)__        }_        result.ignoreUnmapped(ignoreUnmapped)__        return result__    };creates,a,new,link,geo,distance,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,element,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,geo,distance,sort,builder,from,xcontent,xcontent,parser,parser,string,element,name,throws,ioexception,string,field,name,null,list,geo,point,geo,points,new,array,list,distance,unit,unit,distance,unit,default,geo,distance,geo,distance,geo,distance,arc,sort,order,order,sort,order,asc,sort,mode,sort,mode,null,query,builder,nested,filter,null,string,nested,path,null,nested,sort,builder,nested,sort,null,geo,validation,method,validation,null,boolean,ignore,unmapped,false,xcontent,parser,token,token,string,current,name,parser,current,name,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,name,parser,current,name,else,if,token,xcontent,parser,token,parse,geo,points,parser,geo,points,field,name,current,name,else,if,token,xcontent,parser,token,if,match,current,name,parser,get,deprecation,handler,deprecation,logger,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,filter,parse,inner,query,builder,parser,else,if,match,current,name,parser,get,deprecation,handler,nested,sort,nested,sort,builder,from,xcontent,parser,else,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,field,name,current,name,geo,point,point,new,geo,point,geo,utils,parse,geo,point,parser,point,geo,points,add,point,else,if,token,is,value,if,match,current,name,parser,get,deprecation,handler,order,sort,order,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,unit,distance,unit,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,geo,distance,geo,distance,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,validation,geo,validation,method,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,sort,mode,sort,mode,from,string,parser,text,else,if,match,current,name,parser,get,deprecation,handler,deprecation,logger,deprecated,has,been,deprecated,in,favour,of,the,nested,parameter,nested,path,parser,text,else,if,match,current,name,parser,get,deprecation,handler,ignore,unmapped,parser,boolean,value,else,if,token,token,if,field,name,null,field,name,equals,current,name,false,throw,new,parsing,exception,parser,get,token,location,trying,to,reset,field,name,to,already,set,to,current,name,field,name,geo,point,point,new,geo,point,point,reset,from,string,parser,text,geo,points,add,point,field,name,current,name,else,if,field,name,equals,current,name,throw,new,parsing,exception,parser,get,token,location,only,geohashes,of,type,string,supported,for,field,current,name,else,throw,new,parsing,exception,parser,get,token,location,does,not,support,name,current,name,geo,distance,sort,builder,result,new,geo,distance,sort,builder,field,name,geo,points,to,array,new,geo,point,geo,points,size,result,geo,distance,geo,distance,result,unit,unit,result,order,order,if,sort,mode,null,result,sort,mode,sort,mode,if,nested,filter,null,result,set,nested,filter,nested,filter,result,set,nested,path,nested,path,if,nested,sort,null,result,set,nested,sort,nested,sort,if,validation,null,result,validation,validation,result,ignore,unmapped,ignore,unmapped,return,result
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, GeoPoint... points);1524684173;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param points The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, GeoPoint... points) {_        this.fieldName = fieldName__        if (points.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        this.points.addAll(Arrays.asList(points))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,points,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,geo,point,points,this,field,name,field,name,if,points,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,this,points,add,all,arrays,as,list,points
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, GeoPoint... points);1528211342;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param points The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, GeoPoint... points) {_        this.fieldName = fieldName__        if (points.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        this.points.addAll(Arrays.asList(points))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,points,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,geo,point,points,this,field,name,field,name,if,points,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,this,points,add,all,arrays,as,list,points
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, GeoPoint... points);1528706846;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param points The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, GeoPoint... points) {_        this.fieldName = fieldName__        if (points.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        this.points.addAll(Arrays.asList(points))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,points,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,geo,point,points,this,field,name,field,name,if,points,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,this,points,add,all,arrays,as,list,points
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, GeoPoint... points);1532353780;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param points The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, GeoPoint... points) {_        this.fieldName = fieldName__        if (points.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        this.points.addAll(Arrays.asList(points))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,points,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,geo,point,points,this,field,name,field,name,if,points,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,this,points,add,all,arrays,as,list,points
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, GeoPoint... points);1539615817;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param points The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, GeoPoint... points) {_        this.fieldName = fieldName__        if (points.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        this.points.addAll(Arrays.asList(points))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,points,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,geo,point,points,this,field,name,field,name,if,points,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,this,points,add,all,arrays,as,list,points
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, GeoPoint... points);1540486836;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param points The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, GeoPoint... points) {_        this.fieldName = fieldName__        if (points.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        this.points.addAll(Arrays.asList(points))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,points,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,geo,point,points,this,field,name,field,name,if,points,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,this,points,add,all,arrays,as,list,points
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, GeoPoint... points);1540583181;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param points The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, GeoPoint... points) {_        this.fieldName = fieldName__        if (points.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        this.points.addAll(Arrays.asList(points))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,points,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,geo,point,points,this,field,name,field,name,if,points,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,this,points,add,all,arrays,as,list,points
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, GeoPoint... points);1545241543;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param points The points to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, GeoPoint... points) {_        this.fieldName = fieldName__        if (points.length == 0) {_            throw new IllegalArgumentException("Geo distance sorting needs at least one point.")__        }_        this.points.addAll(Arrays.asList(points))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,points,the,points,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,geo,point,points,this,field,name,field,name,if,points,length,0,throw,new,illegal,argument,exception,geo,distance,sorting,needs,at,least,one,point,this,points,add,all,arrays,as,list,points
GeoDistanceSortBuilder -> GeoDistanceSortBuilder(GeoDistanceSortBuilder original);1524684173;Copy constructor.;GeoDistanceSortBuilder(GeoDistanceSortBuilder original) {_        this.fieldName = original.fieldName()__        this.points.addAll(original.points)__        this.geoDistance = original.geoDistance__        this.unit = original.unit__        this.order = original.order__        this.sortMode = original.sortMode__        this.nestedFilter = original.nestedFilter__        this.nestedPath = original.nestedPath__        this.validation = original.validation__        this.nestedSort = original.nestedSort__    };copy,constructor;geo,distance,sort,builder,geo,distance,sort,builder,original,this,field,name,original,field,name,this,points,add,all,original,points,this,geo,distance,original,geo,distance,this,unit,original,unit,this,order,original,order,this,sort,mode,original,sort,mode,this,nested,filter,original,nested,filter,this,nested,path,original,nested,path,this,validation,original,validation,this,nested,sort,original,nested,sort
GeoDistanceSortBuilder -> GeoDistanceSortBuilder(GeoDistanceSortBuilder original);1528211342;Copy constructor.;GeoDistanceSortBuilder(GeoDistanceSortBuilder original) {_        this.fieldName = original.fieldName()__        this.points.addAll(original.points)__        this.geoDistance = original.geoDistance__        this.unit = original.unit__        this.order = original.order__        this.sortMode = original.sortMode__        this.nestedFilter = original.nestedFilter__        this.nestedPath = original.nestedPath__        this.validation = original.validation__        this.nestedSort = original.nestedSort__    };copy,constructor;geo,distance,sort,builder,geo,distance,sort,builder,original,this,field,name,original,field,name,this,points,add,all,original,points,this,geo,distance,original,geo,distance,this,unit,original,unit,this,order,original,order,this,sort,mode,original,sort,mode,this,nested,filter,original,nested,filter,this,nested,path,original,nested,path,this,validation,original,validation,this,nested,sort,original,nested,sort
GeoDistanceSortBuilder -> GeoDistanceSortBuilder(GeoDistanceSortBuilder original);1528706846;Copy constructor.;GeoDistanceSortBuilder(GeoDistanceSortBuilder original) {_        this.fieldName = original.fieldName()__        this.points.addAll(original.points)__        this.geoDistance = original.geoDistance__        this.unit = original.unit__        this.order = original.order__        this.sortMode = original.sortMode__        this.nestedFilter = original.nestedFilter__        this.nestedPath = original.nestedPath__        this.validation = original.validation__        this.nestedSort = original.nestedSort__        this.ignoreUnmapped = original.ignoreUnmapped__    };copy,constructor;geo,distance,sort,builder,geo,distance,sort,builder,original,this,field,name,original,field,name,this,points,add,all,original,points,this,geo,distance,original,geo,distance,this,unit,original,unit,this,order,original,order,this,sort,mode,original,sort,mode,this,nested,filter,original,nested,filter,this,nested,path,original,nested,path,this,validation,original,validation,this,nested,sort,original,nested,sort,this,ignore,unmapped,original,ignore,unmapped
GeoDistanceSortBuilder -> GeoDistanceSortBuilder(GeoDistanceSortBuilder original);1532353780;Copy constructor.;GeoDistanceSortBuilder(GeoDistanceSortBuilder original) {_        this.fieldName = original.fieldName()__        this.points.addAll(original.points)__        this.geoDistance = original.geoDistance__        this.unit = original.unit__        this.order = original.order__        this.sortMode = original.sortMode__        this.nestedFilter = original.nestedFilter__        this.nestedPath = original.nestedPath__        this.validation = original.validation__        this.nestedSort = original.nestedSort__        this.ignoreUnmapped = original.ignoreUnmapped__    };copy,constructor;geo,distance,sort,builder,geo,distance,sort,builder,original,this,field,name,original,field,name,this,points,add,all,original,points,this,geo,distance,original,geo,distance,this,unit,original,unit,this,order,original,order,this,sort,mode,original,sort,mode,this,nested,filter,original,nested,filter,this,nested,path,original,nested,path,this,validation,original,validation,this,nested,sort,original,nested,sort,this,ignore,unmapped,original,ignore,unmapped
GeoDistanceSortBuilder -> GeoDistanceSortBuilder(GeoDistanceSortBuilder original);1539615817;Copy constructor.;GeoDistanceSortBuilder(GeoDistanceSortBuilder original) {_        this.fieldName = original.fieldName()__        this.points.addAll(original.points)__        this.geoDistance = original.geoDistance__        this.unit = original.unit__        this.order = original.order__        this.sortMode = original.sortMode__        this.nestedFilter = original.nestedFilter__        this.nestedPath = original.nestedPath__        this.validation = original.validation__        this.nestedSort = original.nestedSort__        this.ignoreUnmapped = original.ignoreUnmapped__    };copy,constructor;geo,distance,sort,builder,geo,distance,sort,builder,original,this,field,name,original,field,name,this,points,add,all,original,points,this,geo,distance,original,geo,distance,this,unit,original,unit,this,order,original,order,this,sort,mode,original,sort,mode,this,nested,filter,original,nested,filter,this,nested,path,original,nested,path,this,validation,original,validation,this,nested,sort,original,nested,sort,this,ignore,unmapped,original,ignore,unmapped
GeoDistanceSortBuilder -> GeoDistanceSortBuilder(GeoDistanceSortBuilder original);1540486836;Copy constructor.;GeoDistanceSortBuilder(GeoDistanceSortBuilder original) {_        this.fieldName = original.fieldName()__        this.points.addAll(original.points)__        this.geoDistance = original.geoDistance__        this.unit = original.unit__        this.order = original.order__        this.sortMode = original.sortMode__        this.nestedFilter = original.nestedFilter__        this.nestedPath = original.nestedPath__        this.validation = original.validation__        this.nestedSort = original.nestedSort__        this.ignoreUnmapped = original.ignoreUnmapped__    };copy,constructor;geo,distance,sort,builder,geo,distance,sort,builder,original,this,field,name,original,field,name,this,points,add,all,original,points,this,geo,distance,original,geo,distance,this,unit,original,unit,this,order,original,order,this,sort,mode,original,sort,mode,this,nested,filter,original,nested,filter,this,nested,path,original,nested,path,this,validation,original,validation,this,nested,sort,original,nested,sort,this,ignore,unmapped,original,ignore,unmapped
GeoDistanceSortBuilder -> GeoDistanceSortBuilder(GeoDistanceSortBuilder original);1540583181;Copy constructor.;GeoDistanceSortBuilder(GeoDistanceSortBuilder original) {_        this.fieldName = original.fieldName()__        this.points.addAll(original.points)__        this.geoDistance = original.geoDistance__        this.unit = original.unit__        this.order = original.order__        this.sortMode = original.sortMode__        this.nestedFilter = original.nestedFilter__        this.nestedPath = original.nestedPath__        this.validation = original.validation__        this.nestedSort = original.nestedSort__        this.ignoreUnmapped = original.ignoreUnmapped__    };copy,constructor;geo,distance,sort,builder,geo,distance,sort,builder,original,this,field,name,original,field,name,this,points,add,all,original,points,this,geo,distance,original,geo,distance,this,unit,original,unit,this,order,original,order,this,sort,mode,original,sort,mode,this,nested,filter,original,nested,filter,this,nested,path,original,nested,path,this,validation,original,validation,this,nested,sort,original,nested,sort,this,ignore,unmapped,original,ignore,unmapped
GeoDistanceSortBuilder -> GeoDistanceSortBuilder(GeoDistanceSortBuilder original);1545241543;Copy constructor.;GeoDistanceSortBuilder(GeoDistanceSortBuilder original) {_        this.fieldName = original.fieldName()__        this.points.addAll(original.points)__        this.geoDistance = original.geoDistance__        this.unit = original.unit__        this.order = original.order__        this.sortMode = original.sortMode__        this.nestedFilter = original.nestedFilter__        this.nestedPath = original.nestedPath__        this.validation = original.validation__        this.nestedSort = original.nestedSort__        this.ignoreUnmapped = original.ignoreUnmapped__    };copy,constructor;geo,distance,sort,builder,geo,distance,sort,builder,original,this,field,name,original,field,name,this,points,add,all,original,points,this,geo,distance,original,geo,distance,this,unit,original,unit,this,order,original,order,this,sort,mode,original,sort,mode,this,nested,filter,original,nested,filter,this,nested,path,original,nested,path,this,validation,original,validation,this,nested,sort,original,nested,sort,this,ignore,unmapped,original,ignore,unmapped
GeoDistanceSortBuilder -> public String fieldName();1524684173;Returns the geo point like field the distance based sort operates on.;public String fieldName() {_        return this.fieldName__    };returns,the,geo,point,like,field,the,distance,based,sort,operates,on;public,string,field,name,return,this,field,name
GeoDistanceSortBuilder -> public String fieldName();1528211342;Returns the geo point like field the distance based sort operates on.;public String fieldName() {_        return this.fieldName__    };returns,the,geo,point,like,field,the,distance,based,sort,operates,on;public,string,field,name,return,this,field,name
GeoDistanceSortBuilder -> public String fieldName();1528706846;Returns the geo point like field the distance based sort operates on.;public String fieldName() {_        return this.fieldName__    };returns,the,geo,point,like,field,the,distance,based,sort,operates,on;public,string,field,name,return,this,field,name
GeoDistanceSortBuilder -> public String fieldName();1532353780;Returns the geo point like field the distance based sort operates on.;public String fieldName() {_        return this.fieldName__    };returns,the,geo,point,like,field,the,distance,based,sort,operates,on;public,string,field,name,return,this,field,name
GeoDistanceSortBuilder -> public String fieldName();1539615817;Returns the geo point like field the distance based sort operates on.;public String fieldName() {_        return this.fieldName__    };returns,the,geo,point,like,field,the,distance,based,sort,operates,on;public,string,field,name,return,this,field,name
GeoDistanceSortBuilder -> public String fieldName();1540486836;Returns the geo point like field the distance based sort operates on.;public String fieldName() {_        return this.fieldName__    };returns,the,geo,point,like,field,the,distance,based,sort,operates,on;public,string,field,name,return,this,field,name
GeoDistanceSortBuilder -> public String fieldName();1540583181;Returns the geo point like field the distance based sort operates on.;public String fieldName() {_        return this.fieldName__    };returns,the,geo,point,like,field,the,distance,based,sort,operates,on;public,string,field,name,return,this,field,name
GeoDistanceSortBuilder -> public String fieldName();1545241543;Returns the geo point like field the distance based sort operates on.;public String fieldName() {_        return this.fieldName__    };returns,the,geo,point,like,field,the,distance,based,sort,operates,on;public,string,field,name,return,this,field,name
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, double lat, double lon);1524684173;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param lat Latitude of the point to create the range distance facets from._@param lon Longitude of the point to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, double lat, double lon) {_        this(fieldName, new GeoPoint(lat, lon))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,lat,latitude,of,the,point,to,create,the,range,distance,facets,from,param,lon,longitude,of,the,point,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,double,lat,double,lon,this,field,name,new,geo,point,lat,lon
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, double lat, double lon);1528211342;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param lat Latitude of the point to create the range distance facets from._@param lon Longitude of the point to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, double lat, double lon) {_        this(fieldName, new GeoPoint(lat, lon))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,lat,latitude,of,the,point,to,create,the,range,distance,facets,from,param,lon,longitude,of,the,point,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,double,lat,double,lon,this,field,name,new,geo,point,lat,lon
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, double lat, double lon);1528706846;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param lat Latitude of the point to create the range distance facets from._@param lon Longitude of the point to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, double lat, double lon) {_        this(fieldName, new GeoPoint(lat, lon))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,lat,latitude,of,the,point,to,create,the,range,distance,facets,from,param,lon,longitude,of,the,point,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,double,lat,double,lon,this,field,name,new,geo,point,lat,lon
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, double lat, double lon);1532353780;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param lat Latitude of the point to create the range distance facets from._@param lon Longitude of the point to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, double lat, double lon) {_        this(fieldName, new GeoPoint(lat, lon))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,lat,latitude,of,the,point,to,create,the,range,distance,facets,from,param,lon,longitude,of,the,point,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,double,lat,double,lon,this,field,name,new,geo,point,lat,lon
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, double lat, double lon);1539615817;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param lat Latitude of the point to create the range distance facets from._@param lon Longitude of the point to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, double lat, double lon) {_        this(fieldName, new GeoPoint(lat, lon))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,lat,latitude,of,the,point,to,create,the,range,distance,facets,from,param,lon,longitude,of,the,point,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,double,lat,double,lon,this,field,name,new,geo,point,lat,lon
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, double lat, double lon);1540486836;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param lat Latitude of the point to create the range distance facets from._@param lon Longitude of the point to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, double lat, double lon) {_        this(fieldName, new GeoPoint(lat, lon))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,lat,latitude,of,the,point,to,create,the,range,distance,facets,from,param,lon,longitude,of,the,point,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,double,lat,double,lon,this,field,name,new,geo,point,lat,lon
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, double lat, double lon);1540583181;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param lat Latitude of the point to create the range distance facets from._@param lon Longitude of the point to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, double lat, double lon) {_        this(fieldName, new GeoPoint(lat, lon))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,lat,latitude,of,the,point,to,create,the,range,distance,facets,from,param,lon,longitude,of,the,point,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,double,lat,double,lon,this,field,name,new,geo,point,lat,lon
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder(String fieldName, double lat, double lon);1545241543;Constructs a new distance based sort on a geo point like field.__@param fieldName The geo point like field name._@param lat Latitude of the point to create the range distance facets from._@param lon Longitude of the point to create the range distance facets from.;public GeoDistanceSortBuilder(String fieldName, double lat, double lon) {_        this(fieldName, new GeoPoint(lat, lon))__    };constructs,a,new,distance,based,sort,on,a,geo,point,like,field,param,field,name,the,geo,point,like,field,name,param,lat,latitude,of,the,point,to,create,the,range,distance,facets,from,param,lon,longitude,of,the,point,to,create,the,range,distance,facets,from;public,geo,distance,sort,builder,string,field,name,double,lat,double,lon,this,field,name,new,geo,point,lat,lon
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder unit(DistanceUnit unit);1524684173;The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public GeoDistanceSortBuilder unit(DistanceUnit unit) {_        this.unit = unit__        return this__    };the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,geo,distance,sort,builder,unit,distance,unit,unit,this,unit,unit,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder unit(DistanceUnit unit);1528211342;The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public GeoDistanceSortBuilder unit(DistanceUnit unit) {_        this.unit = unit__        return this__    };the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,geo,distance,sort,builder,unit,distance,unit,unit,this,unit,unit,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder unit(DistanceUnit unit);1528706846;The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public GeoDistanceSortBuilder unit(DistanceUnit unit) {_        this.unit = unit__        return this__    };the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,geo,distance,sort,builder,unit,distance,unit,unit,this,unit,unit,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder unit(DistanceUnit unit);1532353780;The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public GeoDistanceSortBuilder unit(DistanceUnit unit) {_        this.unit = unit__        return this__    };the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,geo,distance,sort,builder,unit,distance,unit,unit,this,unit,unit,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder unit(DistanceUnit unit);1539615817;The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public GeoDistanceSortBuilder unit(DistanceUnit unit) {_        this.unit = unit__        return this__    };the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,geo,distance,sort,builder,unit,distance,unit,unit,this,unit,unit,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder unit(DistanceUnit unit);1540486836;The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public GeoDistanceSortBuilder unit(DistanceUnit unit) {_        this.unit = unit__        return this__    };the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,geo,distance,sort,builder,unit,distance,unit,unit,this,unit,unit,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder unit(DistanceUnit unit);1540583181;The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public GeoDistanceSortBuilder unit(DistanceUnit unit) {_        this.unit = unit__        return this__    };the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,geo,distance,sort,builder,unit,distance,unit,unit,this,unit,unit,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder unit(DistanceUnit unit);1545241543;The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#METERS};public GeoDistanceSortBuilder unit(DistanceUnit unit) {_        this.unit = unit__        return this__    };the,distance,unit,to,use,defaults,to,link,org,elasticsearch,common,unit,distance,unit,meters;public,geo,distance,sort,builder,unit,distance,unit,unit,this,unit,unit,return,this
GeoDistanceSortBuilder -> @Deprecated     public String getNestedPath();1524684173;Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
GeoDistanceSortBuilder -> @Deprecated     public String getNestedPath();1528211342;Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
GeoDistanceSortBuilder -> @Deprecated     public String getNestedPath();1528706846;Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
GeoDistanceSortBuilder -> @Deprecated     public String getNestedPath();1532353780;Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
GeoDistanceSortBuilder -> @Deprecated     public String getNestedPath();1539615817;Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
GeoDistanceSortBuilder -> @Deprecated     public String getNestedPath();1540486836;Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
GeoDistanceSortBuilder -> @Deprecated     public String getNestedPath();1540583181;Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
GeoDistanceSortBuilder -> @Deprecated     public String getNestedPath();1545241543;Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a_field inside a nested object, the nearest upper nested object is selected as nested path._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
GeoDistanceSortBuilder -> public SortMode sortMode();1524684173;Returns which distance to use for sorting in the case a document contains multiple geo points.;public SortMode sortMode() {_        return this.sortMode__    };returns,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points;public,sort,mode,sort,mode,return,this,sort,mode
GeoDistanceSortBuilder -> public SortMode sortMode();1528211342;Returns which distance to use for sorting in the case a document contains multiple geo points.;public SortMode sortMode() {_        return this.sortMode__    };returns,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points;public,sort,mode,sort,mode,return,this,sort,mode
GeoDistanceSortBuilder -> public SortMode sortMode();1528706846;Returns which distance to use for sorting in the case a document contains multiple geo points.;public SortMode sortMode() {_        return this.sortMode__    };returns,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points;public,sort,mode,sort,mode,return,this,sort,mode
GeoDistanceSortBuilder -> public SortMode sortMode();1532353780;Returns which distance to use for sorting in the case a document contains multiple geo points.;public SortMode sortMode() {_        return this.sortMode__    };returns,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points;public,sort,mode,sort,mode,return,this,sort,mode
GeoDistanceSortBuilder -> public SortMode sortMode();1539615817;Returns which distance to use for sorting in the case a document contains multiple geo points.;public SortMode sortMode() {_        return this.sortMode__    };returns,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points;public,sort,mode,sort,mode,return,this,sort,mode
GeoDistanceSortBuilder -> public SortMode sortMode();1540486836;Returns which distance to use for sorting in the case a document contains multiple geo points.;public SortMode sortMode() {_        return this.sortMode__    };returns,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points;public,sort,mode,sort,mode,return,this,sort,mode
GeoDistanceSortBuilder -> public SortMode sortMode();1540583181;Returns which distance to use for sorting in the case a document contains multiple geo points.;public SortMode sortMode() {_        return this.sortMode__    };returns,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points;public,sort,mode,sort,mode,return,this,sort,mode
GeoDistanceSortBuilder -> public SortMode sortMode();1545241543;Returns which distance to use for sorting in the case a document contains multiple geo points.;public SortMode sortMode() {_        return this.sortMode__    };returns,which,distance,to,use,for,sorting,in,the,case,a,document,contains,multiple,geo,points;public,sort,mode,sort,mode,return,this,sort,mode
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter);1524684173;Sets the nested filter that the nested objects should match with in order to_be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_       if (this.nestedSort != null) {_           throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__       }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter);1528211342;Sets the nested filter that the nested objects should match with in order to_be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_       if (this.nestedSort != null) {_           throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__       }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter);1528706846;Sets the nested filter that the nested objects should match with in order to_be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_       if (this.nestedSort != null) {_           throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__       }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter);1532353780;Sets the nested filter that the nested objects should match with in order to_be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_       if (this.nestedSort != null) {_           throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__       }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter);1539615817;Sets the nested filter that the nested objects should match with in order to_be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_       if (this.nestedSort != null) {_           throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__       }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter);1540486836;Sets the nested filter that the nested objects should match with in order to_be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_       if (this.nestedSort != null) {_           throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__       }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter);1540583181;Sets the nested filter that the nested objects should match with in order to_be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_       if (this.nestedSort != null) {_           throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__       }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
GeoDistanceSortBuilder -> @Deprecated     public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter);1545241543;Sets the nested filter that the nested objects should match with in order to_be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_       if (this.nestedSort != null) {_           throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__       }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,geo,distance,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1524684173;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,geo,distance,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1528211342;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,geo,distance,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1528706846;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,geo,distance,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1532353780;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,geo,distance,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1539615817;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,geo,distance,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1540486836;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,geo,distance,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1540583181;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,geo,distance,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
GeoDistanceSortBuilder -> public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1545241543;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public GeoDistanceSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,geo,distance,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
GeoDistanceSortBuilder -> @SuppressWarnings("unchecked")     public GeoDistanceSortBuilder(StreamInput in) throws IOException;1524684173;Read from a stream.;@SuppressWarnings("unchecked")_    public GeoDistanceSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        points.addAll((List<GeoPoint>) in.readGenericValue())__        geoDistance = GeoDistance.readFromStream(in)__        unit = DistanceUnit.readFromStream(in)__        order = SortOrder.readFromStream(in)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_        validation = GeoValidationMethod.readFromStream(in)__    };read,from,a,stream;suppress,warnings,unchecked,public,geo,distance,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,points,add,all,list,geo,point,in,read,generic,value,geo,distance,geo,distance,read,from,stream,in,unit,distance,unit,read,from,stream,in,order,sort,order,read,from,stream,in,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new,validation,geo,validation,method,read,from,stream,in
GeoDistanceSortBuilder -> @SuppressWarnings("unchecked")     public GeoDistanceSortBuilder(StreamInput in) throws IOException;1528211342;Read from a stream.;@SuppressWarnings("unchecked")_    public GeoDistanceSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        points.addAll((List<GeoPoint>) in.readGenericValue())__        geoDistance = GeoDistance.readFromStream(in)__        unit = DistanceUnit.readFromStream(in)__        order = SortOrder.readFromStream(in)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_        validation = GeoValidationMethod.readFromStream(in)__    };read,from,a,stream;suppress,warnings,unchecked,public,geo,distance,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,points,add,all,list,geo,point,in,read,generic,value,geo,distance,geo,distance,read,from,stream,in,unit,distance,unit,read,from,stream,in,order,sort,order,read,from,stream,in,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new,validation,geo,validation,method,read,from,stream,in
GeoDistanceSortBuilder -> @SuppressWarnings("unchecked")     public GeoDistanceSortBuilder(StreamInput in) throws IOException;1528706846;Read from a stream.;@SuppressWarnings("unchecked")_    public GeoDistanceSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        points.addAll((List<GeoPoint>) in.readGenericValue())__        geoDistance = GeoDistance.readFromStream(in)__        unit = DistanceUnit.readFromStream(in)__        order = SortOrder.readFromStream(in)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_        validation = GeoValidationMethod.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_            ignoreUnmapped = in.readBoolean()__        }_    };read,from,a,stream;suppress,warnings,unchecked,public,geo,distance,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,points,add,all,list,geo,point,in,read,generic,value,geo,distance,geo,distance,read,from,stream,in,unit,distance,unit,read,from,stream,in,order,sort,order,read,from,stream,in,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new,validation,geo,validation,method,read,from,stream,in,if,in,get,version,on,or,after,version,ignore,unmapped,in,read,boolean
GeoDistanceSortBuilder -> @SuppressWarnings("unchecked")     public GeoDistanceSortBuilder(StreamInput in) throws IOException;1532353780;Read from a stream.;@SuppressWarnings("unchecked")_    public GeoDistanceSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        points.addAll((List<GeoPoint>) in.readGenericValue())__        geoDistance = GeoDistance.readFromStream(in)__        unit = DistanceUnit.readFromStream(in)__        order = SortOrder.readFromStream(in)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_        validation = GeoValidationMethod.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_            ignoreUnmapped = in.readBoolean()__        }_    };read,from,a,stream;suppress,warnings,unchecked,public,geo,distance,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,points,add,all,list,geo,point,in,read,generic,value,geo,distance,geo,distance,read,from,stream,in,unit,distance,unit,read,from,stream,in,order,sort,order,read,from,stream,in,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new,validation,geo,validation,method,read,from,stream,in,if,in,get,version,on,or,after,version,ignore,unmapped,in,read,boolean
GeoDistanceSortBuilder -> @SuppressWarnings("unchecked")     public GeoDistanceSortBuilder(StreamInput in) throws IOException;1539615817;Read from a stream.;@SuppressWarnings("unchecked")_    public GeoDistanceSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        points.addAll((List<GeoPoint>) in.readGenericValue())__        geoDistance = GeoDistance.readFromStream(in)__        unit = DistanceUnit.readFromStream(in)__        order = SortOrder.readFromStream(in)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_        validation = GeoValidationMethod.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_            ignoreUnmapped = in.readBoolean()__        }_    };read,from,a,stream;suppress,warnings,unchecked,public,geo,distance,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,points,add,all,list,geo,point,in,read,generic,value,geo,distance,geo,distance,read,from,stream,in,unit,distance,unit,read,from,stream,in,order,sort,order,read,from,stream,in,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new,validation,geo,validation,method,read,from,stream,in,if,in,get,version,on,or,after,version,ignore,unmapped,in,read,boolean
GeoDistanceSortBuilder -> @SuppressWarnings("unchecked")     public GeoDistanceSortBuilder(StreamInput in) throws IOException;1540486836;Read from a stream.;@SuppressWarnings("unchecked")_    public GeoDistanceSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        points.addAll((List<GeoPoint>) in.readGenericValue())__        geoDistance = GeoDistance.readFromStream(in)__        unit = DistanceUnit.readFromStream(in)__        order = SortOrder.readFromStream(in)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_        validation = GeoValidationMethod.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_            ignoreUnmapped = in.readBoolean()__        }_    };read,from,a,stream;suppress,warnings,unchecked,public,geo,distance,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,points,add,all,list,geo,point,in,read,generic,value,geo,distance,geo,distance,read,from,stream,in,unit,distance,unit,read,from,stream,in,order,sort,order,read,from,stream,in,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new,validation,geo,validation,method,read,from,stream,in,if,in,get,version,on,or,after,version,ignore,unmapped,in,read,boolean
GeoDistanceSortBuilder -> @SuppressWarnings("unchecked")     public GeoDistanceSortBuilder(StreamInput in) throws IOException;1540583181;Read from a stream.;@SuppressWarnings("unchecked")_    public GeoDistanceSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        points.addAll((List<GeoPoint>) in.readGenericValue())__        geoDistance = GeoDistance.readFromStream(in)__        unit = DistanceUnit.readFromStream(in)__        order = SortOrder.readFromStream(in)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_        validation = GeoValidationMethod.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_            ignoreUnmapped = in.readBoolean()__        }_    };read,from,a,stream;suppress,warnings,unchecked,public,geo,distance,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,points,add,all,list,geo,point,in,read,generic,value,geo,distance,geo,distance,read,from,stream,in,unit,distance,unit,read,from,stream,in,order,sort,order,read,from,stream,in,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new,validation,geo,validation,method,read,from,stream,in,if,in,get,version,on,or,after,version,ignore,unmapped,in,read,boolean
GeoDistanceSortBuilder -> @SuppressWarnings("unchecked")     public GeoDistanceSortBuilder(StreamInput in) throws IOException;1545241543;Read from a stream.;@SuppressWarnings("unchecked")_    public GeoDistanceSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        points.addAll((List<GeoPoint>) in.readGenericValue())__        geoDistance = GeoDistance.readFromStream(in)__        unit = DistanceUnit.readFromStream(in)__        order = SortOrder.readFromStream(in)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_        validation = GeoValidationMethod.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_            ignoreUnmapped = in.readBoolean()__        }_    };read,from,a,stream;suppress,warnings,unchecked,public,geo,distance,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,points,add,all,list,geo,point,in,read,generic,value,geo,distance,geo,distance,read,from,stream,in,unit,distance,unit,read,from,stream,in,order,sort,order,read,from,stream,in,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new,validation,geo,validation,method,read,from,stream,in,if,in,get,version,on,or,after,version,ignore,unmapped,in,read,boolean
GeoDistanceSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1524684173;Returns the nested filter that the nested objects should match with in order to be taken into account_for sorting._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
GeoDistanceSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1528211342;Returns the nested filter that the nested objects should match with in order to be taken into account_for sorting._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
GeoDistanceSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1528706846;Returns the nested filter that the nested objects should match with in order to be taken into account_for sorting._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
GeoDistanceSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1532353780;Returns the nested filter that the nested objects should match with in order to be taken into account_for sorting._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
GeoDistanceSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1539615817;Returns the nested filter that the nested objects should match with in order to be taken into account_for sorting._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
GeoDistanceSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1540486836;Returns the nested filter that the nested objects should match with in order to be taken into account_for sorting._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
GeoDistanceSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1540583181;Returns the nested filter that the nested objects should match with in order to be taken into account_for sorting._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
GeoDistanceSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1545241543;Returns the nested filter that the nested objects should match with in order to be taken into account_for sorting._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)}_and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
