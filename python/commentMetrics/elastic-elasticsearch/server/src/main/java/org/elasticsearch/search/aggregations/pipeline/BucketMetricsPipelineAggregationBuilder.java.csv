commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;1;6;;@Override protected final void doWriteTo(StreamOutput out) throws IOException {     out.writeOptionalString(format).     gapPolicy.writeTo(out).     innerWriteTo(out). }
false;protected,abstract;1;1;;protected abstract void innerWriteTo(StreamOutput out) throws IOException.
true;public;1;5;/**  * Sets the format to use on the output of this aggregation.  */ ;/**  * Sets the format to use on the output of this aggregation.  */ @SuppressWarnings("unchecked") public AF format(String format) {     this.format = format.     return (AF) this. }
true;public;0;3;/**  * Gets the format to use on the output of this aggregation.  */ ;/**  * Gets the format to use on the output of this aggregation.  */ public String format() {     return format. }
false;protected;0;7;;protected DocValueFormat formatter() {     if (format != null) {         return new DocValueFormat.Decimal(format).     } else {         return DocValueFormat.RAW.     } }
true;public;1;5;/**  * Sets the gap policy to use for this aggregation.  */ ;/**  * Sets the gap policy to use for this aggregation.  */ @SuppressWarnings("unchecked") public AF gapPolicy(GapPolicy gapPolicy) {     this.gapPolicy = gapPolicy.     return (AF) this. }
true;public;0;3;/**  * Gets the gap policy to use for this aggregation.  */ ;/**  * Gets the gap policy to use for this aggregation.  */ public GapPolicy gapPolicy() {     return gapPolicy. }
false;protected,abstract;1;2;;@Override protected abstract PipelineAggregator createInternal(Map<String, Object> metaData) throws IOException.
false;public;3;25;;@Override public void doValidate(AggregatorFactory<?> parent, Collection<AggregationBuilder> aggBuilders, Collection<PipelineAggregationBuilder> pipelineAggregatorFactories) {     if (bucketsPaths.length != 1) {         throw new IllegalStateException(PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName() + " must contain a single entry for aggregation [" + name + "]").     }     // Need to find the first agg name in the buckets path to check its a     // multi bucket agg: aggs are split with '>' and can optionally have a     // metric name after them by using '.' so need to split on both to get     // just the agg name     final String firstAgg = bucketsPaths[0].split("[>\\.]")[0].     Optional<AggregationBuilder> aggBuilder = aggBuilders.stream().filter((builder) -> builder.getName().equals(firstAgg)).findAny().     if (aggBuilder.isPresent()) {         if ((aggBuilder.get() instanceof MultiBucketAggregationBuilder) == false) {             throw new IllegalArgumentException("The first aggregation in " + PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName() + " must be a multi-bucket aggregation for aggregation [" + name + "] found :" + aggBuilder.get().getClass().getName() + " for buckets path: " + bucketsPaths[0]).         }     } else {         throw new IllegalArgumentException(PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName() + " aggregation does not exist for aggregation [" + name + "]: " + bucketsPaths[0]).     } }
false;protected,final;2;11;;@Override protected final XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {     if (format != null) {         builder.field(BucketMetricsParser.FORMAT.getPreferredName(), format).     }     if (gapPolicy != null) {         builder.field(BucketMetricsParser.GAP_POLICY.getPreferredName(), gapPolicy.getName()).     }     doXContentBody(builder, params).     return builder. }
false;protected,abstract;2;1;;protected abstract XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException.
false;protected,final;0;4;;@Override protected final int doHashCode() {     return Objects.hash(format, gapPolicy, innerHashCode()). }
false;protected,abstract;0;1;;protected abstract int innerHashCode().
false;protected,final;1;8;;@Override protected final boolean doEquals(Object obj) {     @SuppressWarnings("unchecked")     BucketMetricsPipelineAggregationBuilder<AF> other = (BucketMetricsPipelineAggregationBuilder<AF>) obj.     return Objects.equals(format, other.format) && Objects.equals(gapPolicy, other.gapPolicy) && innerEquals(other). }
false;protected,abstract;1;1;;protected abstract boolean innerEquals(BucketMetricsPipelineAggregationBuilder<AF> other).
