commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(singles()). }
false;public;0;3;;public long singles() {     return sizeUnit.toSingles(size). }
false;public;0;3;;public long getSingles() {     return singles(). }
false;public;0;3;;public long kilo() {     return sizeUnit.toKilo(size). }
false;public;0;3;;public long getKilo() {     return kilo(). }
false;public;0;3;;public long mega() {     return sizeUnit.toMega(size). }
false;public;0;3;;public long getMega() {     return mega(). }
false;public;0;3;;public long giga() {     return sizeUnit.toGiga(size). }
false;public;0;3;;public long getGiga() {     return giga(). }
false;public;0;3;;public long tera() {     return sizeUnit.toTera(size). }
false;public;0;3;;public long getTera() {     return tera(). }
false;public;0;3;;public long peta() {     return sizeUnit.toPeta(size). }
false;public;0;3;;public long getPeta() {     return peta(). }
false;public;0;3;;public double kiloFrac() {     return ((double) singles()) / SizeUnit.C1. }
false;public;0;3;;public double getKiloFrac() {     return kiloFrac(). }
false;public;0;3;;public double megaFrac() {     return ((double) singles()) / SizeUnit.C2. }
false;public;0;3;;public double getMegaFrac() {     return megaFrac(). }
false;public;0;3;;public double gigaFrac() {     return ((double) singles()) / SizeUnit.C3. }
false;public;0;3;;public double getGigaFrac() {     return gigaFrac(). }
false;public;0;3;;public double teraFrac() {     return ((double) singles()) / SizeUnit.C4. }
false;public;0;3;;public double getTeraFrac() {     return teraFrac(). }
false;public;0;3;;public double petaFrac() {     return ((double) singles()) / SizeUnit.C5. }
false;public;0;3;;public double getPetaFrac() {     return petaFrac(). }
false;public;0;24;;@Override public String toString() {     long singles = singles().     double value = singles.     String suffix = "".     if (singles >= SizeUnit.C5) {         value = petaFrac().         suffix = "p".     } else if (singles >= SizeUnit.C4) {         value = teraFrac().         suffix = "t".     } else if (singles >= SizeUnit.C3) {         value = gigaFrac().         suffix = "g".     } else if (singles >= SizeUnit.C2) {         value = megaFrac().         suffix = "m".     } else if (singles >= SizeUnit.C1) {         value = kiloFrac().         suffix = "k".     }     return Strings.format1Decimals(value, suffix). }
false;public,static;1;3;;public static SizeValue parseSizeValue(String sValue) throws ElasticsearchParseException {     return parseSizeValue(sValue, null). }
false;public,static;2;24;;public static SizeValue parseSizeValue(String sValue, SizeValue defaultValue) throws ElasticsearchParseException {     if (sValue == null) {         return defaultValue.     }     long singles.     try {         if (sValue.endsWith("k") || sValue.endsWith("K")) {             singles = (long) (Double.parseDouble(sValue.substring(0, sValue.length() - 1)) * SizeUnit.C1).         } else if (sValue.endsWith("m") || sValue.endsWith("M")) {             singles = (long) (Double.parseDouble(sValue.substring(0, sValue.length() - 1)) * SizeUnit.C2).         } else if (sValue.endsWith("g") || sValue.endsWith("G")) {             singles = (long) (Double.parseDouble(sValue.substring(0, sValue.length() - 1)) * SizeUnit.C3).         } else if (sValue.endsWith("t") || sValue.endsWith("T")) {             singles = (long) (Double.parseDouble(sValue.substring(0, sValue.length() - 1)) * SizeUnit.C4).         } else if (sValue.endsWith("p") || sValue.endsWith("P")) {             singles = (long) (Double.parseDouble(sValue.substring(0, sValue.length() - 1)) * SizeUnit.C5).         } else {             singles = Long.parseLong(sValue).         }     } catch (NumberFormatException e) {         throw new ElasticsearchParseException("failed to parse [{}]", e, sValue).     }     return new SizeValue(singles, SizeUnit.SINGLE). }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     return compareTo((SizeValue) o) == 0. }
false;public;0;4;;@Override public int hashCode() {     return Double.hashCode(((double) size) * sizeUnit.toSingles(1)). }
false;public;1;6;;@Override public int compareTo(SizeValue other) {     double thisValue = ((double) size) * sizeUnit.toSingles(1).     double otherValue = ((double) other.size) * other.sizeUnit.toSingles(1).     return Double.compare(thisValue, otherValue). }
