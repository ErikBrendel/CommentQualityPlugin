commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;57;;public static JvmStats jvmStats() {     MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage().     long heapUsed = memUsage.getUsed() < 0 ? 0 : memUsage.getUsed().     long heapCommitted = memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted().     long heapMax = memUsage.getMax() < 0 ? 0 : memUsage.getMax().     memUsage = memoryMXBean.getNonHeapMemoryUsage().     long nonHeapUsed = memUsage.getUsed() < 0 ? 0 : memUsage.getUsed().     long nonHeapCommitted = memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted().     List<MemoryPoolMXBean> memoryPoolMXBeans = ManagementFactory.getMemoryPoolMXBeans().     List<MemoryPool> pools = new ArrayList<>().     for (MemoryPoolMXBean memoryPoolMXBean : memoryPoolMXBeans) {         try {             MemoryUsage usage = memoryPoolMXBean.getUsage().             MemoryUsage peakUsage = memoryPoolMXBean.getPeakUsage().             String name = GcNames.getByMemoryPoolName(memoryPoolMXBean.getName(), null).             if (name == null) {                 // if we can't resolve it, its not interesting.... (Per Gen, Code Cache)                 continue.             }             pools.add(new MemoryPool(name, usage.getUsed() < 0 ? 0 : usage.getUsed(), usage.getMax() < 0 ? 0 : usage.getMax(), peakUsage.getUsed() < 0 ? 0 : peakUsage.getUsed(), peakUsage.getMax() < 0 ? 0 : peakUsage.getMax())).         } catch (final Exception ignored) {         }     }     Mem mem = new Mem(heapCommitted, heapUsed, heapMax, nonHeapCommitted, nonHeapUsed, Collections.unmodifiableList(pools)).     Threads threads = new Threads(threadMXBean.getThreadCount(), threadMXBean.getPeakThreadCount()).     List<GarbageCollectorMXBean> gcMxBeans = ManagementFactory.getGarbageCollectorMXBeans().     GarbageCollector[] collectors = new GarbageCollector[gcMxBeans.size()].     for (int i = 0. i < collectors.length. i++) {         GarbageCollectorMXBean gcMxBean = gcMxBeans.get(i).         collectors[i] = new GarbageCollector(GcNames.getByGcName(gcMxBean.getName(), gcMxBean.getName()), gcMxBean.getCollectionCount(), gcMxBean.getCollectionTime()).     }     GarbageCollectors garbageCollectors = new GarbageCollectors(collectors).     List<BufferPool> bufferPoolsList = Collections.emptyList().     try {         List<BufferPoolMXBean> bufferPools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class).         bufferPoolsList = new ArrayList<>(bufferPools.size()).         for (BufferPoolMXBean bufferPool : bufferPools) {             bufferPoolsList.add(new BufferPool(bufferPool.getName(), bufferPool.getCount(), bufferPool.getTotalCapacity(), bufferPool.getMemoryUsed())).         }     } catch (Exception e) {     // buffer pools are not available     }     Classes classes = new Classes(classLoadingMXBean.getLoadedClassCount(), classLoadingMXBean.getTotalLoadedClassCount(), classLoadingMXBean.getUnloadedClassCount()).     return new JvmStats(System.currentTimeMillis(), runtimeMXBean.getUptime(), mem, threads, garbageCollectors, bufferPoolsList, classes). }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(timestamp).     out.writeVLong(uptime).     mem.writeTo(out).     threads.writeTo(out).     gc.writeTo(out).     out.writeList(bufferPools).     classes.writeTo(out). }
false;public;0;3;;public long getTimestamp() {     return timestamp. }
false;public;0;3;;public TimeValue getUptime() {     return new TimeValue(uptime). }
false;public;0;3;;public Mem getMem() {     return this.mem. }
false;public;0;3;;public Threads getThreads() {     return threads. }
false;public;0;3;;public GarbageCollectors getGc() {     return gc. }
false;public;0;3;;public List<BufferPool> getBufferPools() {     return bufferPools. }
false;public;0;3;;public Classes getClasses() {     return classes. }
false;public;2;72;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.JVM).     builder.field(Fields.TIMESTAMP, timestamp).     builder.humanReadableField(Fields.UPTIME_IN_MILLIS, Fields.UPTIME, new TimeValue(uptime)).     builder.startObject(Fields.MEM).     builder.humanReadableField(Fields.HEAP_USED_IN_BYTES, Fields.HEAP_USED, new ByteSizeValue(mem.heapUsed)).     if (mem.getHeapUsedPercent() >= 0) {         builder.field(Fields.HEAP_USED_PERCENT, mem.getHeapUsedPercent()).     }     builder.humanReadableField(Fields.HEAP_COMMITTED_IN_BYTES, Fields.HEAP_COMMITTED, new ByteSizeValue(mem.heapCommitted)).     builder.humanReadableField(Fields.HEAP_MAX_IN_BYTES, Fields.HEAP_MAX, new ByteSizeValue(mem.heapMax)).     builder.humanReadableField(Fields.NON_HEAP_USED_IN_BYTES, Fields.NON_HEAP_USED, new ByteSizeValue(mem.nonHeapUsed)).     builder.humanReadableField(Fields.NON_HEAP_COMMITTED_IN_BYTES, Fields.NON_HEAP_COMMITTED, new ByteSizeValue(mem.nonHeapCommitted)).     builder.startObject(Fields.POOLS).     for (MemoryPool pool : mem) {         builder.startObject(pool.getName()).         builder.humanReadableField(Fields.USED_IN_BYTES, Fields.USED, new ByteSizeValue(pool.used)).         builder.humanReadableField(Fields.MAX_IN_BYTES, Fields.MAX, new ByteSizeValue(pool.max)).         builder.humanReadableField(Fields.PEAK_USED_IN_BYTES, Fields.PEAK_USED, new ByteSizeValue(pool.peakUsed)).         builder.humanReadableField(Fields.PEAK_MAX_IN_BYTES, Fields.PEAK_MAX, new ByteSizeValue(pool.peakMax)).         builder.endObject().     }     builder.endObject().     builder.endObject().     builder.startObject(Fields.THREADS).     builder.field(Fields.COUNT, threads.getCount()).     builder.field(Fields.PEAK_COUNT, threads.getPeakCount()).     builder.endObject().     builder.startObject(Fields.GC).     builder.startObject(Fields.COLLECTORS).     for (GarbageCollector collector : gc) {         builder.startObject(collector.getName()).         builder.field(Fields.COLLECTION_COUNT, collector.getCollectionCount()).         builder.humanReadableField(Fields.COLLECTION_TIME_IN_MILLIS, Fields.COLLECTION_TIME, new TimeValue(collector.collectionTime)).         builder.endObject().     }     builder.endObject().     builder.endObject().     if (bufferPools != null) {         builder.startObject(Fields.BUFFER_POOLS).         for (BufferPool bufferPool : bufferPools) {             builder.startObject(bufferPool.getName()).             builder.field(Fields.COUNT, bufferPool.getCount()).             builder.humanReadableField(Fields.USED_IN_BYTES, Fields.USED, new ByteSizeValue(bufferPool.used)).             builder.humanReadableField(Fields.TOTAL_CAPACITY_IN_BYTES, Fields.TOTAL_CAPACITY, new ByteSizeValue(bufferPool.totalCapacity)).             builder.endObject().         }         builder.endObject().     }     builder.startObject(Fields.CLASSES).     builder.field(Fields.CURRENT_LOADED_COUNT, classes.getLoadedClassCount()).     builder.field(Fields.TOTAL_LOADED_COUNT, classes.getTotalLoadedClassCount()).     builder.field(Fields.TOTAL_UNLOADED_COUNT, classes.getUnloadedClassCount()).     builder.endObject().     builder.endObject().     return builder. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeArray(collectors). }
false;public;0;3;;public GarbageCollector[] getCollectors() {     return this.collectors. }
false;public;0;4;;@Override public Iterator<GarbageCollector> iterator() {     return Arrays.stream(collectors).iterator(). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeVLong(collectionCount).     out.writeVLong(collectionTime). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public long getCollectionCount() {     return this.collectionCount. }
false;public;0;3;;public TimeValue getCollectionTime() {     return new TimeValue(collectionTime, TimeUnit.MILLISECONDS). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(count).     out.writeVInt(peakCount). }
false;public;0;3;;public int getCount() {     return count. }
false;public;0;3;;public int getPeakCount() {     return peakCount. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeVLong(used).     out.writeVLong(max).     out.writeVLong(peakUsed).     out.writeVLong(peakMax). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public ByteSizeValue getUsed() {     return new ByteSizeValue(used). }
false;public;0;3;;public ByteSizeValue getMax() {     return new ByteSizeValue(max). }
false;public;0;3;;public ByteSizeValue getPeakUsed() {     return new ByteSizeValue(peakUsed). }
false;public;0;3;;public ByteSizeValue getPeakMax() {     return new ByteSizeValue(peakMax). }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(heapCommitted).     out.writeVLong(heapUsed).     out.writeVLong(nonHeapCommitted).     out.writeVLong(nonHeapUsed).     out.writeVLong(heapMax).     out.writeList(pools). }
false;public;0;4;;@Override public Iterator<MemoryPool> iterator() {     return pools.iterator(). }
false;public;0;3;;public ByteSizeValue getHeapCommitted() {     return new ByteSizeValue(heapCommitted). }
false;public;0;3;;public ByteSizeValue getHeapUsed() {     return new ByteSizeValue(heapUsed). }
true;public;0;3;/**  * returns the maximum heap size. 0 bytes signals unknown.  */ ;/**  * returns the maximum heap size. 0 bytes signals unknown.  */ public ByteSizeValue getHeapMax() {     return new ByteSizeValue(heapMax). }
true;public;0;6;/**  * returns the heap usage in percent. -1 signals unknown.  */ ;/**  * returns the heap usage in percent. -1 signals unknown.  */ public short getHeapUsedPercent() {     if (heapMax == 0) {         return -1.     }     return (short) (heapUsed * 100 / heapMax). }
false;public;0;3;;public ByteSizeValue getNonHeapCommitted() {     return new ByteSizeValue(nonHeapCommitted). }
false;public;0;3;;public ByteSizeValue getNonHeapUsed() {     return new ByteSizeValue(nonHeapUsed). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeLong(count).     out.writeLong(totalCapacity).     out.writeLong(used). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public long getCount() {     return this.count. }
false;public;0;3;;public ByteSizeValue getTotalCapacity() {     return new ByteSizeValue(totalCapacity). }
false;public;0;3;;public ByteSizeValue getUsed() {     return new ByteSizeValue(used). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeLong(loadedClassCount).     out.writeLong(totalLoadedClassCount).     out.writeLong(unloadedClassCount). }
false;public;0;3;;public long getLoadedClassCount() {     return loadedClassCount. }
false;public;0;3;;public long getTotalLoadedClassCount() {     return totalLoadedClassCount. }
false;public;0;3;;public long getUnloadedClassCount() {     return unloadedClassCount. }
