commented;modifiers;parameterAmount;loc;comment;code
false;public,final;2;7;;@Override public final XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field("type", getType()).     addAdditionalFields(builder, params).     return builder.endObject(). }
true;public;2;3;/**  * to be overridden by subclasses  */ ;/**  * to be overridden by subclasses  */ public void addAdditionalFields(XContentBuilder builder, ToXContent.Params params) throws IOException { }
false;public,static;1;11;;public static RecoverySource readFrom(StreamInput in) throws IOException {     Type type = Type.values()[in.readByte()].     switch(type) {         case EMPTY_STORE:             return EmptyStoreRecoverySource.INSTANCE.         case EXISTING_STORE:             return new ExistingStoreRecoverySource(in).         case PEER:             return PeerRecoverySource.INSTANCE.         case SNAPSHOT:             return new SnapshotRecoverySource(in).         case LOCAL_SHARDS:             return LocalShardsRecoverySource.INSTANCE.         default:             throw new IllegalArgumentException("unknown recovery type: " + type.name()).     } }
false;public,final;1;5;;@Override public final void writeTo(StreamOutput out) throws IOException {     out.writeByte((byte) getType().ordinal()).     writeAdditionalFields(out). }
true;protected;1;3;/**  * to be overridden by subclasses  */ ;/**  * to be overridden by subclasses  */ protected void writeAdditionalFields(StreamOutput out) throws IOException { }
false;public,abstract;0;1;;public abstract Type getType().
false;public;0;3;;public boolean shouldBootstrapNewHistoryUUID() {     return false. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     RecoverySource that = (RecoverySource) o.     return getType() == that.getType(). }
false;public;0;4;;@Override public int hashCode() {     return getType().hashCode(). }
false;public;0;4;;@Override public Type getType() {     return Type.EMPTY_STORE. }
false;public;0;4;;@Override public String toString() {     return "new shard recovery". }
false;public;2;4;;@Override public void addAdditionalFields(XContentBuilder builder, Params params) throws IOException {     builder.field("bootstrap_new_history_uuid", bootstrapNewHistoryUUID). }
false;protected;1;6;;@Override protected void writeAdditionalFields(StreamOutput out) throws IOException {     if (out.getVersion().onOrAfter(Version.V_6_5_0)) {         out.writeBoolean(bootstrapNewHistoryUUID).     } }
false;public;0;4;;@Override public boolean shouldBootstrapNewHistoryUUID() {     return bootstrapNewHistoryUUID. }
false;public;0;4;;@Override public Type getType() {     return Type.EXISTING_STORE. }
false;public;0;4;;@Override public String toString() {     return "existing store recovery. bootstrap_history_uuid=" + bootstrapNewHistoryUUID. }
false;public;0;4;;@Override public Type getType() {     return Type.LOCAL_SHARDS. }
false;public;0;4;;@Override public String toString() {     return "local shards recovery". }
false;public;0;3;;public String restoreUUID() {     return restoreUUID. }
false;public;0;3;;public Snapshot snapshot() {     return snapshot. }
false;public;0;3;;public String index() {     return index. }
false;public;0;3;;public Version version() {     return version. }
false;protected;1;9;;@Override protected void writeAdditionalFields(StreamOutput out) throws IOException {     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeString(restoreUUID).     }     snapshot.writeTo(out).     Version.writeVersion(version, out).     out.writeString(index). }
false;public;0;4;;@Override public Type getType() {     return Type.SNAPSHOT. }
false;public;2;8;;@Override public void addAdditionalFields(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.field("repository", snapshot.getRepository()).field("snapshot", snapshot.getSnapshotId().getName()).field("version", version.toString()).field("index", index).field("restoreUUID", restoreUUID). }
false;public;0;4;;@Override public String toString() {     return "snapshot recovery [" + restoreUUID + "] from " + snapshot. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     SnapshotRecoverySource that = (SnapshotRecoverySource) o.     return restoreUUID.equals(that.restoreUUID) && snapshot.equals(that.snapshot) && index.equals(that.index) && version.equals(that.version). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(restoreUUID, snapshot, index, version). }
false;public;0;4;;@Override public Type getType() {     return Type.PEER. }
false;public;0;4;;@Override public String toString() {     return "peer recovery". }
