commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public boolean hasChanged(Settings current, Settings previous) {     return current.filter(loggerPredicate).equals(previous.filter(loggerPredicate)) == false. }
false;public;2;15;;@Override public Settings getValue(Settings current, Settings previous) {     Settings.Builder builder = Settings.builder().     builder.put(current.filter(loggerPredicate)).     for (String key : previous.keySet()) {         if (loggerPredicate.test(key) && builder.keys().contains(key) == false) {             if (Loggers.LOG_LEVEL_SETTING.getConcreteSetting(key).exists(settings) == false) {                 builder.putNull(key).             } else {                 builder.put(key, Loggers.LOG_LEVEL_SETTING.getConcreteSetting(key).get(settings).toString()).             }         }     }     return builder.build(). }
false;public;3;20;;@Override public void apply(Settings value, Settings current, Settings previous) {     for (String key : value.keySet()) {         assert loggerPredicate.test(key).         String component = key.substring("logger.".length()).         if ("level".equals(component)) {             continue.         }         if ("_root".equals(component)) {             final String rootLevel = value.get(key).             if (rootLevel == null) {                 Loggers.setLevel(LogManager.getRootLogger(), Loggers.LOG_DEFAULT_LEVEL_SETTING.get(settings)).             } else {                 Loggers.setLevel(LogManager.getRootLogger(), rootLevel).             }         } else {             Loggers.setLevel(LogManager.getLogger(component), value.get(key)).         }     } }
