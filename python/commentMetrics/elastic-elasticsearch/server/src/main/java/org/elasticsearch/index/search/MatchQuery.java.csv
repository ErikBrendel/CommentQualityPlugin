# id;timestamp;commentText;codeText;commentWords;codeWords
MatchQuery -> MatchQueryBuilder -> protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1524684173;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> MatchQueryBuilder -> protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1527840262;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> MatchQueryBuilder -> protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1528103657;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> MatchQueryBuilder -> protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1528167589;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> MatchQueryBuilder -> protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1528977744;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> MatchQueryBuilder -> protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1537806831;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> MatchQueryBuilder -> protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1538067637;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1524684173;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1527840262;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1528103657;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1528167589;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1528977744;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1537806831;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1538067637;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1542768589;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper);1543432527;Creates a new QueryBuilder using the given analyzer.;MatchQueryBuilder(Analyzer analyzer, MappedFieldType mapper) {_            super(analyzer)__            this.mapper = mapper__        };creates,a,new,query,builder,using,the,given,analyzer;match,query,builder,analyzer,analyzer,mapped,field,type,mapper,super,analyzer,this,mapper,mapper
MatchQuery -> MatchQueryBuilder -> @Override         protected SpanQuery analyzeGraphPhrase(TokenStream source, String field, int phraseSlop) throws IOException;1538067637;Overrides {@link QueryBuilder#analyzeGraphPhrase(TokenStream, String, int)} to add_a limit (see {@link BooleanQuery#getMaxClauseCount()}) to the number of {@link SpanQuery}_that this method can create.__TODO Remove when https://issues.apache.org/jira/browse/LUCENE-8479 is fixed.;@Override_        protected SpanQuery analyzeGraphPhrase(TokenStream source, String field, int phraseSlop) throws IOException {_            source.reset()__            GraphTokenStreamFiniteStrings graph = new GraphTokenStreamFiniteStrings(source)__            List<SpanQuery> clauses = new ArrayList<>()__            int[] articulationPoints = graph.articulationPoints()__            int lastState = 0__            int maxBooleanClause = BooleanQuery.getMaxClauseCount()__            for (int i = 0_ i <= articulationPoints.length_ i++) {_                int start = lastState__                int end = -1__                if (i < articulationPoints.length) {_                    end = articulationPoints[i]__                }_                lastState = end__                final SpanQuery queryPos__                if (graph.hasSidePath(start)) {_                    List<SpanQuery> queries = new ArrayList<>()__                    Iterator<TokenStream> it = graph.getFiniteStrings(start, end)__                    while (it.hasNext()) {_                        TokenStream ts = it.next()__                        SpanQuery q = createSpanQuery(ts, field)__                        if (q != null) {_                            if (queries.size() >= maxBooleanClause) {_                                throw new BooleanQuery.TooManyClauses()__                            }_                            queries.add(q)__                        }_                    }_                    if (queries.size() > 0) {_                        queryPos = new SpanOrQuery(queries.toArray(new SpanQuery[0]))__                    } else {_                        queryPos = null__                    }_                } else {_                    Term[] terms = graph.getTerms(field, start)__                    assert terms.length > 0__                    if (terms.length >= maxBooleanClause) {_                        throw new BooleanQuery.TooManyClauses()__                    }_                    if (terms.length == 1) {_                        queryPos = new SpanTermQuery(terms[0])__                    } else {_                        SpanTermQuery[] orClauses = new SpanTermQuery[terms.length]__                        for (int idx = 0_ idx < terms.length_ idx++) {_                            orClauses[idx] = new SpanTermQuery(terms[idx])__                        }__                        queryPos = new SpanOrQuery(orClauses)__                    }_                }__                if (queryPos != null) {_                    if (clauses.size() >= maxBooleanClause) {_                        throw new BooleanQuery.TooManyClauses()__                    }_                    clauses.add(queryPos)__                }_            }__            if (clauses.isEmpty()) {_                return null__            } else if (clauses.size() == 1) {_                return clauses.get(0)__            } else {_                return new SpanNearQuery(clauses.toArray(new SpanQuery[0]), phraseSlop, true)__            }_        };overrides,link,query,builder,analyze,graph,phrase,token,stream,string,int,to,add,a,limit,see,link,boolean,query,get,max,clause,count,to,the,number,of,link,span,query,that,this,method,can,create,todo,remove,when,https,issues,apache,org,jira,browse,lucene,8479,is,fixed;override,protected,span,query,analyze,graph,phrase,token,stream,source,string,field,int,phrase,slop,throws,ioexception,source,reset,graph,token,stream,finite,strings,graph,new,graph,token,stream,finite,strings,source,list,span,query,clauses,new,array,list,int,articulation,points,graph,articulation,points,int,last,state,0,int,max,boolean,clause,boolean,query,get,max,clause,count,for,int,i,0,i,articulation,points,length,i,int,start,last,state,int,end,1,if,i,articulation,points,length,end,articulation,points,i,last,state,end,final,span,query,query,pos,if,graph,has,side,path,start,list,span,query,queries,new,array,list,iterator,token,stream,it,graph,get,finite,strings,start,end,while,it,has,next,token,stream,ts,it,next,span,query,q,create,span,query,ts,field,if,q,null,if,queries,size,max,boolean,clause,throw,new,boolean,query,too,many,clauses,queries,add,q,if,queries,size,0,query,pos,new,span,or,query,queries,to,array,new,span,query,0,else,query,pos,null,else,term,terms,graph,get,terms,field,start,assert,terms,length,0,if,terms,length,max,boolean,clause,throw,new,boolean,query,too,many,clauses,if,terms,length,1,query,pos,new,span,term,query,terms,0,else,span,term,query,or,clauses,new,span,term,query,terms,length,for,int,idx,0,idx,terms,length,idx,or,clauses,idx,new,span,term,query,terms,idx,query,pos,new,span,or,query,or,clauses,if,query,pos,null,if,clauses,size,max,boolean,clause,throw,new,boolean,query,too,many,clauses,clauses,add,query,pos,if,clauses,is,empty,return,null,else,if,clauses,size,1,return,clauses,get,0,else,return,new,span,near,query,clauses,to,array,new,span,query,0,phrase,slop,true
MatchQuery -> MatchQueryBuilder -> @Override         protected SpanQuery analyzeGraphPhrase(TokenStream source, String field, int phraseSlop) throws IOException;1542768589;Overrides {@link QueryBuilder#analyzeGraphPhrase(TokenStream, String, int)} to add_a limit (see {@link BooleanQuery#getMaxClauseCount()}) to the number of {@link SpanQuery}_that this method can create.__TODO Remove when https://issues.apache.org/jira/browse/LUCENE-8479 is fixed.;@Override_        protected SpanQuery analyzeGraphPhrase(TokenStream source, String field, int phraseSlop) throws IOException {_            source.reset()__            GraphTokenStreamFiniteStrings graph = new GraphTokenStreamFiniteStrings(source)__            List<SpanQuery> clauses = new ArrayList<>()__            int[] articulationPoints = graph.articulationPoints()__            int lastState = 0__            int maxBooleanClause = BooleanQuery.getMaxClauseCount()__            for (int i = 0_ i <= articulationPoints.length_ i++) {_                int start = lastState__                int end = -1__                if (i < articulationPoints.length) {_                    end = articulationPoints[i]__                }_                lastState = end__                final SpanQuery queryPos__                if (graph.hasSidePath(start)) {_                    List<SpanQuery> queries = new ArrayList<>()__                    Iterator<TokenStream> it = graph.getFiniteStrings(start, end)__                    while (it.hasNext()) {_                        TokenStream ts = it.next()__                        SpanQuery q = createSpanQuery(ts, field)__                        if (q != null) {_                            if (queries.size() >= maxBooleanClause) {_                                throw new BooleanQuery.TooManyClauses()__                            }_                            queries.add(q)__                        }_                    }_                    if (queries.size() > 0) {_                        queryPos = new SpanOrQuery(queries.toArray(new SpanQuery[0]))__                    } else {_                        queryPos = null__                    }_                } else {_                    Term[] terms = graph.getTerms(field, start)__                    assert terms.length > 0__                    if (terms.length >= maxBooleanClause) {_                        throw new BooleanQuery.TooManyClauses()__                    }_                    if (terms.length == 1) {_                        queryPos = new SpanTermQuery(terms[0])__                    } else {_                        SpanTermQuery[] orClauses = new SpanTermQuery[terms.length]__                        for (int idx = 0_ idx < terms.length_ idx++) {_                            orClauses[idx] = new SpanTermQuery(terms[idx])__                        }__                        queryPos = new SpanOrQuery(orClauses)__                    }_                }__                if (queryPos != null) {_                    if (clauses.size() >= maxBooleanClause) {_                        throw new BooleanQuery.TooManyClauses()__                    }_                    clauses.add(queryPos)__                }_            }__            if (clauses.isEmpty()) {_                return null__            } else if (clauses.size() == 1) {_                return clauses.get(0)__            } else {_                return new SpanNearQuery(clauses.toArray(new SpanQuery[0]), phraseSlop, true)__            }_        };overrides,link,query,builder,analyze,graph,phrase,token,stream,string,int,to,add,a,limit,see,link,boolean,query,get,max,clause,count,to,the,number,of,link,span,query,that,this,method,can,create,todo,remove,when,https,issues,apache,org,jira,browse,lucene,8479,is,fixed;override,protected,span,query,analyze,graph,phrase,token,stream,source,string,field,int,phrase,slop,throws,ioexception,source,reset,graph,token,stream,finite,strings,graph,new,graph,token,stream,finite,strings,source,list,span,query,clauses,new,array,list,int,articulation,points,graph,articulation,points,int,last,state,0,int,max,boolean,clause,boolean,query,get,max,clause,count,for,int,i,0,i,articulation,points,length,i,int,start,last,state,int,end,1,if,i,articulation,points,length,end,articulation,points,i,last,state,end,final,span,query,query,pos,if,graph,has,side,path,start,list,span,query,queries,new,array,list,iterator,token,stream,it,graph,get,finite,strings,start,end,while,it,has,next,token,stream,ts,it,next,span,query,q,create,span,query,ts,field,if,q,null,if,queries,size,max,boolean,clause,throw,new,boolean,query,too,many,clauses,queries,add,q,if,queries,size,0,query,pos,new,span,or,query,queries,to,array,new,span,query,0,else,query,pos,null,else,term,terms,graph,get,terms,field,start,assert,terms,length,0,if,terms,length,max,boolean,clause,throw,new,boolean,query,too,many,clauses,if,terms,length,1,query,pos,new,span,term,query,terms,0,else,span,term,query,or,clauses,new,span,term,query,terms,length,for,int,idx,0,idx,terms,length,idx,or,clauses,idx,new,span,term,query,terms,idx,query,pos,new,span,or,query,or,clauses,if,query,pos,null,if,clauses,size,max,boolean,clause,throw,new,boolean,query,too,many,clauses,clauses,add,query,pos,if,clauses,is,empty,return,null,else,if,clauses,size,1,return,clauses,get,0,else,return,new,span,near,query,clauses,to,array,new,span,query,0,phrase,slop,true
MatchQuery -> MatchQueryBuilder -> @Override         protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1542768589;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};@Override_        protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;override,protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> MatchQueryBuilder -> @Override         protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,                                          String queryText, boolean quoted, int phraseSlop);1543432527;Checks if graph analysis should be enabled for the field depending_on the provided {@link Analyzer};@Override_        protected Query createFieldQuery(Analyzer analyzer, BooleanClause.Occur operator, String field,_                                         String queryText, boolean quoted, int phraseSlop) {_            assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST___            _            _            try (TokenStream source = analyzer.tokenStream(field, queryText)) {_                if (source.hasAttribute(DisableGraphAttribute.class)) {_                    _                    setEnableGraphQueries(false)__                }_                Query query = super.createFieldQuery(source, operator, field, quoted, phraseSlop)__                setEnableGraphQueries(true)__                return query__            } catch (IOException e) {_                throw new RuntimeException("Error analyzing query text", e)__            }_        };checks,if,graph,analysis,should,be,enabled,for,the,field,depending,on,the,provided,link,analyzer;override,protected,query,create,field,query,analyzer,analyzer,boolean,clause,occur,operator,string,field,string,query,text,boolean,quoted,int,phrase,slop,assert,operator,boolean,clause,occur,should,operator,boolean,clause,occur,must,try,token,stream,source,analyzer,token,stream,field,query,text,if,source,has,attribute,disable,graph,attribute,class,set,enable,graph,queries,false,query,query,super,create,field,query,source,operator,field,quoted,phrase,slop,set,enable,graph,queries,true,return,query,catch,ioexception,e,throw,new,runtime,exception,error,analyzing,query,text,e
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1524684173;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1527840262;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1528103657;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1528167589;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1528977744;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1537806831;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1538067637;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1542768589;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
MatchQuery -> protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType);1543432527;Called when a phrase query is built with {@link QueryBuilder#analyzePhrase(String, TokenStream, int)}._Subclass can override this function to blend this query to multiple fields.;protected Query blendPhraseQuery(PhraseQuery query, MappedFieldType fieldType) {_        return query__    };called,when,a,phrase,query,is,built,with,link,query,builder,analyze,phrase,string,token,stream,int,subclass,can,override,this,function,to,blend,this,query,to,multiple,fields;protected,query,blend,phrase,query,phrase,query,query,mapped,field,type,field,type,return,query
