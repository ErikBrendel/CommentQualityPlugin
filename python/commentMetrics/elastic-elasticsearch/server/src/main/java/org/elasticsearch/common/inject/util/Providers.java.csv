commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public T get() {     return instance. }
false;public;0;4;;@Override public String toString() {     return "of(" + instance + ")". }
true;public,static;1;13;/**  * Returns a provider which always provides {@code instance}.  This should not  * be necessary to use in your application, but is helpful for several types  * of unit tests.  *  * @param instance the instance that should always be provided.  This is also  *                 permitted to be null, to enable aggressive testing, although in real  *                 life a Guice-supplied Provider will never return null.  */ ;/**  * Returns a provider which always provides {@code instance}.  This should not  * be necessary to use in your application, but is helpful for several types  * of unit tests.  *  * @param instance the instance that should always be provided.  This is also  *                 permitted to be null, to enable aggressive testing, although in real  *                 life a Guice-supplied Provider will never return null.  */ public static <T> Provider<T> of(final T instance) {     return new Provider<T>() {          @Override         public T get() {             return instance.         }          @Override         public String toString() {             return "of(" + instance + ")".         }     }. }
