# id;timestamp;commentText;codeText;commentWords;codeWords
MultiMatchQuery -> static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields);1524684173;Expand a {@link PhraseQuery} to multiple fields that share the same analyzer._Returns a {@link DisjunctionMaxQuery} with a disjunction for each expanded field.;static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields) {_        List<Query> disjunctions = new ArrayList<>()__        for (FieldAndFieldType field : fields) {_            int[] positions = query.getPositions()__            Term[] terms = query.getTerms()__            PhraseQuery.Builder builder = new PhraseQuery.Builder()__            for (int i = 0_ i < terms.length_ i++) {_                builder.add(new Term(field.fieldType.name(), terms[i].bytes()), positions[i])__            }_            Query q = builder.build()__            if (field.boost != AbstractQueryBuilder.DEFAULT_BOOST) {_                q = new BoostQuery(q, field.boost)__            }_            disjunctions.add(q)__        }_        return new DisjunctionMaxQuery(disjunctions, tiebreaker)__    };expand,a,link,phrase,query,to,multiple,fields,that,share,the,same,analyzer,returns,a,link,disjunction,max,query,with,a,disjunction,for,each,expanded,field;static,query,blend,phrase,phrase,query,query,float,tiebreaker,field,and,field,type,fields,list,query,disjunctions,new,array,list,for,field,and,field,type,field,fields,int,positions,query,get,positions,term,terms,query,get,terms,phrase,query,builder,builder,new,phrase,query,builder,for,int,i,0,i,terms,length,i,builder,add,new,term,field,field,type,name,terms,i,bytes,positions,i,query,q,builder,build,if,field,boost,abstract,query,builder,q,new,boost,query,q,field,boost,disjunctions,add,q,return,new,disjunction,max,query,disjunctions,tiebreaker
MultiMatchQuery -> static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields);1535046779;Expand a {@link PhraseQuery} to multiple fields that share the same analyzer._Returns a {@link DisjunctionMaxQuery} with a disjunction for each expanded field.;static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields) {_        List<Query> disjunctions = new ArrayList<>()__        for (FieldAndFieldType field : fields) {_            int[] positions = query.getPositions()__            Term[] terms = query.getTerms()__            PhraseQuery.Builder builder = new PhraseQuery.Builder()__            for (int i = 0_ i < terms.length_ i++) {_                builder.add(new Term(field.fieldType.name(), terms[i].bytes()), positions[i])__            }_            Query q = builder.build()__            if (field.boost != AbstractQueryBuilder.DEFAULT_BOOST) {_                q = new BoostQuery(q, field.boost)__            }_            disjunctions.add(q)__        }_        return new DisjunctionMaxQuery(disjunctions, tiebreaker)__    };expand,a,link,phrase,query,to,multiple,fields,that,share,the,same,analyzer,returns,a,link,disjunction,max,query,with,a,disjunction,for,each,expanded,field;static,query,blend,phrase,phrase,query,query,float,tiebreaker,field,and,field,type,fields,list,query,disjunctions,new,array,list,for,field,and,field,type,field,fields,int,positions,query,get,positions,term,terms,query,get,terms,phrase,query,builder,builder,new,phrase,query,builder,for,int,i,0,i,terms,length,i,builder,add,new,term,field,field,type,name,terms,i,bytes,positions,i,query,q,builder,build,if,field,boost,abstract,query,builder,q,new,boost,query,q,field,boost,disjunctions,add,q,return,new,disjunction,max,query,disjunctions,tiebreaker
MultiMatchQuery -> static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields);1538509426;Expand a {@link PhraseQuery} to multiple fields that share the same analyzer._Returns a {@link DisjunctionMaxQuery} with a disjunction for each expanded field.;static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields) {_        List<Query> disjunctions = new ArrayList<>()__        for (FieldAndFieldType field : fields) {_            int[] positions = query.getPositions()__            Term[] terms = query.getTerms()__            PhraseQuery.Builder builder = new PhraseQuery.Builder()__            for (int i = 0_ i < terms.length_ i++) {_                builder.add(new Term(field.fieldType.name(), terms[i].bytes()), positions[i])__            }_            Query q = builder.build()__            if (field.boost != AbstractQueryBuilder.DEFAULT_BOOST) {_                q = new BoostQuery(q, field.boost)__            }_            disjunctions.add(q)__        }_        return new DisjunctionMaxQuery(disjunctions, tiebreaker)__    };expand,a,link,phrase,query,to,multiple,fields,that,share,the,same,analyzer,returns,a,link,disjunction,max,query,with,a,disjunction,for,each,expanded,field;static,query,blend,phrase,phrase,query,query,float,tiebreaker,field,and,field,type,fields,list,query,disjunctions,new,array,list,for,field,and,field,type,field,fields,int,positions,query,get,positions,term,terms,query,get,terms,phrase,query,builder,builder,new,phrase,query,builder,for,int,i,0,i,terms,length,i,builder,add,new,term,field,field,type,name,terms,i,bytes,positions,i,query,q,builder,build,if,field,boost,abstract,query,builder,q,new,boost,query,q,field,boost,disjunctions,add,q,return,new,disjunction,max,query,disjunctions,tiebreaker
MultiMatchQuery -> static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields);1542697754;Expand a {@link PhraseQuery} to multiple fields that share the same analyzer._Returns a {@link DisjunctionMaxQuery} with a disjunction for each expanded field.;static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields) {_        List<Query> disjunctions = new ArrayList<>()__        for (FieldAndFieldType field : fields) {_            int[] positions = query.getPositions()__            Term[] terms = query.getTerms()__            PhraseQuery.Builder builder = new PhraseQuery.Builder()__            for (int i = 0_ i < terms.length_ i++) {_                builder.add(new Term(field.fieldType.name(), terms[i].bytes()), positions[i])__            }_            Query q = builder.build()__            if (field.boost != AbstractQueryBuilder.DEFAULT_BOOST) {_                q = new BoostQuery(q, field.boost)__            }_            disjunctions.add(q)__        }_        return new DisjunctionMaxQuery(disjunctions, tiebreaker)__    };expand,a,link,phrase,query,to,multiple,fields,that,share,the,same,analyzer,returns,a,link,disjunction,max,query,with,a,disjunction,for,each,expanded,field;static,query,blend,phrase,phrase,query,query,float,tiebreaker,field,and,field,type,fields,list,query,disjunctions,new,array,list,for,field,and,field,type,field,fields,int,positions,query,get,positions,term,terms,query,get,terms,phrase,query,builder,builder,new,phrase,query,builder,for,int,i,0,i,terms,length,i,builder,add,new,term,field,field,type,name,terms,i,bytes,positions,i,query,q,builder,build,if,field,boost,abstract,query,builder,q,new,boost,query,q,field,boost,disjunctions,add,q,return,new,disjunction,max,query,disjunctions,tiebreaker
MultiMatchQuery -> static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields);1542768589;Expand a {@link PhraseQuery} to multiple fields that share the same analyzer._Returns a {@link DisjunctionMaxQuery} with a disjunction for each expanded field.;static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields) {_        List<Query> disjunctions = new ArrayList<>()__        for (FieldAndFieldType field : fields) {_            int[] positions = query.getPositions()__            Term[] terms = query.getTerms()__            PhraseQuery.Builder builder = new PhraseQuery.Builder()__            for (int i = 0_ i < terms.length_ i++) {_                builder.add(new Term(field.fieldType.name(), terms[i].bytes()), positions[i])__            }_            Query q = builder.build()__            if (field.boost != AbstractQueryBuilder.DEFAULT_BOOST) {_                q = new BoostQuery(q, field.boost)__            }_            disjunctions.add(q)__        }_        return new DisjunctionMaxQuery(disjunctions, tiebreaker)__    };expand,a,link,phrase,query,to,multiple,fields,that,share,the,same,analyzer,returns,a,link,disjunction,max,query,with,a,disjunction,for,each,expanded,field;static,query,blend,phrase,phrase,query,query,float,tiebreaker,field,and,field,type,fields,list,query,disjunctions,new,array,list,for,field,and,field,type,field,fields,int,positions,query,get,positions,term,terms,query,get,terms,phrase,query,builder,builder,new,phrase,query,builder,for,int,i,0,i,terms,length,i,builder,add,new,term,field,field,type,name,terms,i,bytes,positions,i,query,q,builder,build,if,field,boost,abstract,query,builder,q,new,boost,query,q,field,boost,disjunctions,add,q,return,new,disjunction,max,query,disjunctions,tiebreaker
