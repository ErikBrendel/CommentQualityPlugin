# id;timestamp;commentText;codeText;commentWords;codeWords
PersistentTasksService -> void updateStatus(final String taskId,                       final long taskAllocationID,                       final Task.Status status,                       final ActionListener<PersistentTask<?>> listener);1527773340;Notifies the master node that the state of a persistent task has changed._<p>_Persistent task implementers shouldn't call this method directly and use_{@link AllocatedPersistentTask#updatePersistentStatus} instead;void updateStatus(final String taskId,_                      final long taskAllocationID,_                      final Task.Status status,_                      final ActionListener<PersistentTask<?>> listener) {_        UpdatePersistentTaskStatusAction.Request request = new UpdatePersistentTaskStatusAction.Request(taskId, taskAllocationID, status)__        execute(request, UpdatePersistentTaskStatusAction.INSTANCE, listener)__    };notifies,the,master,node,that,the,state,of,a,persistent,task,has,changed,p,persistent,task,implementers,shouldn,t,call,this,method,directly,and,use,link,allocated,persistent,task,update,persistent,status,instead;void,update,status,final,string,task,id,final,long,task,allocation,id,final,task,status,status,final,action,listener,persistent,task,listener,update,persistent,task,status,action,request,request,new,update,persistent,task,status,action,request,task,id,task,allocation,id,status,execute,request,update,persistent,task,status,action,instance,listener
PersistentTasksService -> void updateStatus(final String taskId,                       final long taskAllocationID,                       final Task.Status status,                       final ActionListener<PersistentTask<?>> listener);1527840262;Notifies the master node that the state of a persistent task has changed._<p>_Persistent task implementers shouldn't call this method directly and use_{@link AllocatedPersistentTask#updatePersistentStatus} instead;void updateStatus(final String taskId,_                      final long taskAllocationID,_                      final Task.Status status,_                      final ActionListener<PersistentTask<?>> listener) {_        UpdatePersistentTaskStatusAction.Request request = new UpdatePersistentTaskStatusAction.Request(taskId, taskAllocationID, status)__        execute(request, UpdatePersistentTaskStatusAction.INSTANCE, listener)__    };notifies,the,master,node,that,the,state,of,a,persistent,task,has,changed,p,persistent,task,implementers,shouldn,t,call,this,method,directly,and,use,link,allocated,persistent,task,update,persistent,status,instead;void,update,status,final,string,task,id,final,long,task,allocation,id,final,task,status,status,final,action,listener,persistent,task,listener,update,persistent,task,status,action,request,request,new,update,persistent,task,status,action,request,task,id,task,allocation,id,status,execute,request,update,persistent,task,status,action,instance,listener
PersistentTasksService -> void updateStatus(final String taskId,                       final long taskAllocationID,                       final Task.Status status,                       final ActionListener<PersistentTask<?>> listener);1528103657;Notifies the master node that the state of a persistent task has changed._<p>_Persistent task implementers shouldn't call this method directly and use_{@link AllocatedPersistentTask#updatePersistentStatus} instead;void updateStatus(final String taskId,_                      final long taskAllocationID,_                      final Task.Status status,_                      final ActionListener<PersistentTask<?>> listener) {_        UpdatePersistentTaskStatusAction.Request request = new UpdatePersistentTaskStatusAction.Request(taskId, taskAllocationID, status)__        execute(request, UpdatePersistentTaskStatusAction.INSTANCE, listener)__    };notifies,the,master,node,that,the,state,of,a,persistent,task,has,changed,p,persistent,task,implementers,shouldn,t,call,this,method,directly,and,use,link,allocated,persistent,task,update,persistent,status,instead;void,update,status,final,string,task,id,final,long,task,allocation,id,final,task,status,status,final,action,listener,persistent,task,listener,update,persistent,task,status,action,request,request,new,update,persistent,task,status,action,request,task,id,task,allocation,id,status,execute,request,update,persistent,task,status,action,instance,listener
PersistentTasksService -> public void sendCompletionRequest(final String taskId,                                       final long taskAllocationId,                                       final @Nullable Exception taskFailure,                                       final ActionListener<PersistentTask<?>> listener);1527773340;Notifies the master node about the completion of a persistent task._<p>_When {@code failure} is {@code null}, the persistent task is considered as successfully completed.;public void sendCompletionRequest(final String taskId,_                                      final long taskAllocationId,_                                      final @Nullable Exception taskFailure,_                                      final ActionListener<PersistentTask<?>> listener) {_        CompletionPersistentTaskAction.Request request = new CompletionPersistentTaskAction.Request(taskId, taskAllocationId, taskFailure)__        execute(request, CompletionPersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,about,the,completion,of,a,persistent,task,p,when,code,failure,is,code,null,the,persistent,task,is,considered,as,successfully,completed;public,void,send,completion,request,final,string,task,id,final,long,task,allocation,id,final,nullable,exception,task,failure,final,action,listener,persistent,task,listener,completion,persistent,task,action,request,request,new,completion,persistent,task,action,request,task,id,task,allocation,id,task,failure,execute,request,completion,persistent,task,action,instance,listener
PersistentTasksService -> public void sendCompletionRequest(final String taskId,                                       final long taskAllocationId,                                       final @Nullable Exception taskFailure,                                       final ActionListener<PersistentTask<?>> listener);1527840262;Notifies the master node about the completion of a persistent task._<p>_When {@code failure} is {@code null}, the persistent task is considered as successfully completed.;public void sendCompletionRequest(final String taskId,_                                      final long taskAllocationId,_                                      final @Nullable Exception taskFailure,_                                      final ActionListener<PersistentTask<?>> listener) {_        CompletionPersistentTaskAction.Request request = new CompletionPersistentTaskAction.Request(taskId, taskAllocationId, taskFailure)__        execute(request, CompletionPersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,about,the,completion,of,a,persistent,task,p,when,code,failure,is,code,null,the,persistent,task,is,considered,as,successfully,completed;public,void,send,completion,request,final,string,task,id,final,long,task,allocation,id,final,nullable,exception,task,failure,final,action,listener,persistent,task,listener,completion,persistent,task,action,request,request,new,completion,persistent,task,action,request,task,id,task,allocation,id,task,failure,execute,request,completion,persistent,task,action,instance,listener
PersistentTasksService -> public void sendCompletionRequest(final String taskId,                                       final long taskAllocationId,                                       final @Nullable Exception taskFailure,                                       final ActionListener<PersistentTask<?>> listener);1528103657;Notifies the master node about the completion of a persistent task._<p>_When {@code failure} is {@code null}, the persistent task is considered as successfully completed.;public void sendCompletionRequest(final String taskId,_                                      final long taskAllocationId,_                                      final @Nullable Exception taskFailure,_                                      final ActionListener<PersistentTask<?>> listener) {_        CompletionPersistentTaskAction.Request request = new CompletionPersistentTaskAction.Request(taskId, taskAllocationId, taskFailure)__        execute(request, CompletionPersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,about,the,completion,of,a,persistent,task,p,when,code,failure,is,code,null,the,persistent,task,is,considered,as,successfully,completed;public,void,send,completion,request,final,string,task,id,final,long,task,allocation,id,final,nullable,exception,task,failure,final,action,listener,persistent,task,listener,completion,persistent,task,action,request,request,new,completion,persistent,task,action,request,task,id,task,allocation,id,task,failure,execute,request,completion,persistent,task,action,instance,listener
PersistentTasksService -> public void sendCompletionRequest(final String taskId,                                       final long taskAllocationId,                                       final @Nullable Exception taskFailure,                                       final ActionListener<PersistentTask<?>> listener);1529076503;Notifies the master node about the completion of a persistent task._<p>_When {@code failure} is {@code null}, the persistent task is considered as successfully completed.;public void sendCompletionRequest(final String taskId,_                                      final long taskAllocationId,_                                      final @Nullable Exception taskFailure,_                                      final ActionListener<PersistentTask<?>> listener) {_        CompletionPersistentTaskAction.Request request = new CompletionPersistentTaskAction.Request(taskId, taskAllocationId, taskFailure)__        execute(request, CompletionPersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,about,the,completion,of,a,persistent,task,p,when,code,failure,is,code,null,the,persistent,task,is,considered,as,successfully,completed;public,void,send,completion,request,final,string,task,id,final,long,task,allocation,id,final,nullable,exception,task,failure,final,action,listener,persistent,task,listener,completion,persistent,task,action,request,request,new,completion,persistent,task,action,request,task,id,task,allocation,id,task,failure,execute,request,completion,persistent,task,action,instance,listener
PersistentTasksService -> public void sendCompletionRequest(final String taskId,                                       final long taskAllocationId,                                       final @Nullable Exception taskFailure,                                       final ActionListener<PersistentTask<?>> listener);1529433467;Notifies the master node about the completion of a persistent task._<p>_When {@code failure} is {@code null}, the persistent task is considered as successfully completed.;public void sendCompletionRequest(final String taskId,_                                      final long taskAllocationId,_                                      final @Nullable Exception taskFailure,_                                      final ActionListener<PersistentTask<?>> listener) {_        CompletionPersistentTaskAction.Request request = new CompletionPersistentTaskAction.Request(taskId, taskAllocationId, taskFailure)__        execute(request, CompletionPersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,about,the,completion,of,a,persistent,task,p,when,code,failure,is,code,null,the,persistent,task,is,considered,as,successfully,completed;public,void,send,completion,request,final,string,task,id,final,long,task,allocation,id,final,nullable,exception,task,failure,final,action,listener,persistent,task,listener,completion,persistent,task,action,request,request,new,completion,persistent,task,action,request,task,id,task,allocation,id,task,failure,execute,request,completion,persistent,task,action,instance,listener
PersistentTasksService -> public void sendCompletionRequest(final String taskId,                                       final long taskAllocationId,                                       final @Nullable Exception taskFailure,                                       final ActionListener<PersistentTask<?>> listener);1541092382;Notifies the master node about the completion of a persistent task._<p>_When {@code failure} is {@code null}, the persistent task is considered as successfully completed.;public void sendCompletionRequest(final String taskId,_                                      final long taskAllocationId,_                                      final @Nullable Exception taskFailure,_                                      final ActionListener<PersistentTask<?>> listener) {_        CompletionPersistentTaskAction.Request request = new CompletionPersistentTaskAction.Request(taskId, taskAllocationId, taskFailure)__        execute(request, CompletionPersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,about,the,completion,of,a,persistent,task,p,when,code,failure,is,code,null,the,persistent,task,is,considered,as,successfully,completed;public,void,send,completion,request,final,string,task,id,final,long,task,allocation,id,final,nullable,exception,task,failure,final,action,listener,persistent,task,listener,completion,persistent,task,action,request,request,new,completion,persistent,task,action,request,task,id,task,allocation,id,task,failure,execute,request,completion,persistent,task,action,instance,listener
PersistentTasksService -> public void sendCompletionRequest(final String taskId,                                       final long taskAllocationId,                                       final @Nullable Exception taskFailure,                                       final ActionListener<PersistentTask<?>> listener);1542402632;Notifies the master node about the completion of a persistent task._<p>_When {@code failure} is {@code null}, the persistent task is considered as successfully completed.;public void sendCompletionRequest(final String taskId,_                                      final long taskAllocationId,_                                      final @Nullable Exception taskFailure,_                                      final ActionListener<PersistentTask<?>> listener) {_        CompletionPersistentTaskAction.Request request = new CompletionPersistentTaskAction.Request(taskId, taskAllocationId, taskFailure)__        execute(request, CompletionPersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,about,the,completion,of,a,persistent,task,p,when,code,failure,is,code,null,the,persistent,task,is,considered,as,successfully,completed;public,void,send,completion,request,final,string,task,id,final,long,task,allocation,id,final,nullable,exception,task,failure,final,action,listener,persistent,task,listener,completion,persistent,task,action,request,request,new,completion,persistent,task,action,request,task,id,task,allocation,id,task,failure,execute,request,completion,persistent,task,action,instance,listener
PersistentTasksService -> public void sendCompletionRequest(final String taskId,                                       final long taskAllocationId,                                       final @Nullable Exception taskFailure,                                       final ActionListener<PersistentTask<?>> listener);1543415307;Notifies the master node about the completion of a persistent task._<p>_When {@code failure} is {@code null}, the persistent task is considered as successfully completed.;public void sendCompletionRequest(final String taskId,_                                      final long taskAllocationId,_                                      final @Nullable Exception taskFailure,_                                      final ActionListener<PersistentTask<?>> listener) {_        CompletionPersistentTaskAction.Request request = new CompletionPersistentTaskAction.Request(taskId, taskAllocationId, taskFailure)__        execute(request, CompletionPersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,about,the,completion,of,a,persistent,task,p,when,code,failure,is,code,null,the,persistent,task,is,considered,as,successfully,completed;public,void,send,completion,request,final,string,task,id,final,long,task,allocation,id,final,nullable,exception,task,failure,final,action,listener,persistent,task,listener,completion,persistent,task,action,request,request,new,completion,persistent,task,action,request,task,id,task,allocation,id,task,failure,execute,request,completion,persistent,task,action,instance,listener
PersistentTasksService -> public void waitForPersistentTaskCondition(final String taskId,                                                final Predicate<PersistentTask<?>> predicate,                                                final @Nullable TimeValue timeout,                                                final WaitForPersistentTaskListener<?> listener);1527773340;Waits for a given persistent task to comply with a given predicate, then call back the listener accordingly.__@param taskId the persistent task id_@param predicate the persistent task predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTaskCondition(final String taskId,_                                               final Predicate<PersistentTask<?>> predicate,_                                               final @Nullable TimeValue timeout,_                                               final WaitForPersistentTaskListener<?> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        final ClusterState clusterState = observer.setAndGetObservedState()__        if (clusterStatePredicate.test(clusterState)) {_            listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(state, taskId))__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onTimeout(timeout)__                }_            }, clusterStatePredicate)__        }_    };waits,for,a,given,persistent,task,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,task,id,the,persistent,task,id,param,predicate,the,persistent,task,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,task,condition,final,string,task,id,final,predicate,persistent,task,predicate,final,nullable,time,value,timeout,final,wait,for,persistent,task,listener,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,final,cluster,state,cluster,state,observer,set,and,get,observed,state,if,cluster,state,predicate,test,cluster,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,state,task,id,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,timeout,timeout,cluster,state,predicate
PersistentTasksService -> public void waitForPersistentTaskCondition(final String taskId,                                                final Predicate<PersistentTask<?>> predicate,                                                final @Nullable TimeValue timeout,                                                final WaitForPersistentTaskListener<?> listener);1527840262;Waits for a given persistent task to comply with a given predicate, then call back the listener accordingly.__@param taskId the persistent task id_@param predicate the persistent task predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTaskCondition(final String taskId,_                                               final Predicate<PersistentTask<?>> predicate,_                                               final @Nullable TimeValue timeout,_                                               final WaitForPersistentTaskListener<?> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        final ClusterState clusterState = observer.setAndGetObservedState()__        if (clusterStatePredicate.test(clusterState)) {_            listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(state, taskId))__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onTimeout(timeout)__                }_            }, clusterStatePredicate)__        }_    };waits,for,a,given,persistent,task,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,task,id,the,persistent,task,id,param,predicate,the,persistent,task,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,task,condition,final,string,task,id,final,predicate,persistent,task,predicate,final,nullable,time,value,timeout,final,wait,for,persistent,task,listener,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,final,cluster,state,cluster,state,observer,set,and,get,observed,state,if,cluster,state,predicate,test,cluster,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,state,task,id,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,timeout,timeout,cluster,state,predicate
PersistentTasksService -> public void waitForPersistentTaskCondition(final String taskId,                                                final Predicate<PersistentTask<?>> predicate,                                                final @Nullable TimeValue timeout,                                                final WaitForPersistentTaskListener<?> listener);1528103657;Waits for a given persistent task to comply with a given predicate, then call back the listener accordingly.__@param taskId the persistent task id_@param predicate the persistent task predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTaskCondition(final String taskId,_                                               final Predicate<PersistentTask<?>> predicate,_                                               final @Nullable TimeValue timeout,_                                               final WaitForPersistentTaskListener<?> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        final ClusterState clusterState = observer.setAndGetObservedState()__        if (clusterStatePredicate.test(clusterState)) {_            listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(state, taskId))__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onTimeout(timeout)__                }_            }, clusterStatePredicate)__        }_    };waits,for,a,given,persistent,task,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,task,id,the,persistent,task,id,param,predicate,the,persistent,task,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,task,condition,final,string,task,id,final,predicate,persistent,task,predicate,final,nullable,time,value,timeout,final,wait,for,persistent,task,listener,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,final,cluster,state,cluster,state,observer,set,and,get,observed,state,if,cluster,state,predicate,test,cluster,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,state,task,id,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,timeout,timeout,cluster,state,predicate
PersistentTasksService -> public void waitForPersistentTaskCondition(final String taskId,                                                final Predicate<PersistentTask<?>> predicate,                                                final @Nullable TimeValue timeout,                                                final WaitForPersistentTaskListener<?> listener);1529076503;Waits for a given persistent task to comply with a given predicate, then call back the listener accordingly.__@param taskId the persistent task id_@param predicate the persistent task predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTaskCondition(final String taskId,_                                               final Predicate<PersistentTask<?>> predicate,_                                               final @Nullable TimeValue timeout,_                                               final WaitForPersistentTaskListener<?> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        final ClusterState clusterState = observer.setAndGetObservedState()__        if (clusterStatePredicate.test(clusterState)) {_            listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(state, taskId))__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onTimeout(timeout)__                }_            }, clusterStatePredicate)__        }_    };waits,for,a,given,persistent,task,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,task,id,the,persistent,task,id,param,predicate,the,persistent,task,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,task,condition,final,string,task,id,final,predicate,persistent,task,predicate,final,nullable,time,value,timeout,final,wait,for,persistent,task,listener,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,final,cluster,state,cluster,state,observer,set,and,get,observed,state,if,cluster,state,predicate,test,cluster,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,state,task,id,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,timeout,timeout,cluster,state,predicate
PersistentTasksService -> public void waitForPersistentTaskCondition(final String taskId,                                                final Predicate<PersistentTask<?>> predicate,                                                final @Nullable TimeValue timeout,                                                final WaitForPersistentTaskListener<?> listener);1529433467;Waits for a given persistent task to comply with a given predicate, then call back the listener accordingly.__@param taskId the persistent task id_@param predicate the persistent task predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTaskCondition(final String taskId,_                                               final Predicate<PersistentTask<?>> predicate,_                                               final @Nullable TimeValue timeout,_                                               final WaitForPersistentTaskListener<?> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        final ClusterState clusterState = observer.setAndGetObservedState()__        if (clusterStatePredicate.test(clusterState)) {_            listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(state, taskId))__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onTimeout(timeout)__                }_            }, clusterStatePredicate)__        }_    };waits,for,a,given,persistent,task,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,task,id,the,persistent,task,id,param,predicate,the,persistent,task,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,task,condition,final,string,task,id,final,predicate,persistent,task,predicate,final,nullable,time,value,timeout,final,wait,for,persistent,task,listener,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,final,cluster,state,cluster,state,observer,set,and,get,observed,state,if,cluster,state,predicate,test,cluster,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,state,task,id,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,timeout,timeout,cluster,state,predicate
PersistentTasksService -> public void waitForPersistentTaskCondition(final String taskId,                                                final Predicate<PersistentTask<?>> predicate,                                                final @Nullable TimeValue timeout,                                                final WaitForPersistentTaskListener<?> listener);1541092382;Waits for a given persistent task to comply with a given predicate, then call back the listener accordingly.__@param taskId the persistent task id_@param predicate the persistent task predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTaskCondition(final String taskId,_                                               final Predicate<PersistentTask<?>> predicate,_                                               final @Nullable TimeValue timeout,_                                               final WaitForPersistentTaskListener<?> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        final ClusterState clusterState = observer.setAndGetObservedState()__        if (clusterStatePredicate.test(clusterState)) {_            listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(state, taskId))__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onTimeout(timeout)__                }_            }, clusterStatePredicate)__        }_    };waits,for,a,given,persistent,task,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,task,id,the,persistent,task,id,param,predicate,the,persistent,task,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,task,condition,final,string,task,id,final,predicate,persistent,task,predicate,final,nullable,time,value,timeout,final,wait,for,persistent,task,listener,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,final,cluster,state,cluster,state,observer,set,and,get,observed,state,if,cluster,state,predicate,test,cluster,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,state,task,id,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,timeout,timeout,cluster,state,predicate
PersistentTasksService -> public void waitForPersistentTaskCondition(final String taskId,                                                final Predicate<PersistentTask<?>> predicate,                                                final @Nullable TimeValue timeout,                                                final WaitForPersistentTaskListener<?> listener);1542402632;Waits for a given persistent task to comply with a given predicate, then call back the listener accordingly.__@param taskId the persistent task id_@param predicate the persistent task predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTaskCondition(final String taskId,_                                               final Predicate<PersistentTask<?>> predicate,_                                               final @Nullable TimeValue timeout,_                                               final WaitForPersistentTaskListener<?> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        final ClusterState clusterState = observer.setAndGetObservedState()__        if (clusterStatePredicate.test(clusterState)) {_            listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(state, taskId))__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onTimeout(timeout)__                }_            }, clusterStatePredicate)__        }_    };waits,for,a,given,persistent,task,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,task,id,the,persistent,task,id,param,predicate,the,persistent,task,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,task,condition,final,string,task,id,final,predicate,persistent,task,predicate,final,nullable,time,value,timeout,final,wait,for,persistent,task,listener,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,final,cluster,state,cluster,state,observer,set,and,get,observed,state,if,cluster,state,predicate,test,cluster,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,state,task,id,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,timeout,timeout,cluster,state,predicate
PersistentTasksService -> public void waitForPersistentTaskCondition(final String taskId,                                                final Predicate<PersistentTask<?>> predicate,                                                final @Nullable TimeValue timeout,                                                final WaitForPersistentTaskListener<?> listener);1543415307;Waits for a given persistent task to comply with a given predicate, then call back the listener accordingly.__@param taskId the persistent task id_@param predicate the persistent task predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTaskCondition(final String taskId,_                                               final Predicate<PersistentTask<?>> predicate,_                                               final @Nullable TimeValue timeout,_                                               final WaitForPersistentTaskListener<?> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        final ClusterState clusterState = observer.setAndGetObservedState()__        if (clusterStatePredicate.test(clusterState)) {_            listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(clusterState, taskId))__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(PersistentTasksCustomMetaData.getTaskWithId(state, taskId))__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onTimeout(timeout)__                }_            }, clusterStatePredicate)__        }_    };waits,for,a,given,persistent,task,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,task,id,the,persistent,task,id,param,predicate,the,persistent,task,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,task,condition,final,string,task,id,final,predicate,persistent,task,predicate,final,nullable,time,value,timeout,final,wait,for,persistent,task,listener,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,final,cluster,state,cluster,state,observer,set,and,get,observed,state,if,cluster,state,predicate,test,cluster,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,cluster,state,task,id,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,persistent,tasks,custom,meta,data,get,task,with,id,state,task,id,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,timeout,timeout,cluster,state,predicate
PersistentTasksService -> public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,                                                 final @Nullable TimeValue timeout,                                                 final ActionListener<Boolean> listener);1527773340;Waits for persistent tasks to comply with a given predicate, then call back the listener accordingly.__@param predicate the predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,_                                                final @Nullable TimeValue timeout,_                                                final ActionListener<Boolean> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        if (clusterStatePredicate.test(observer.setAndGetObservedState())) {_            listener.onResponse(true)__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(true)__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onFailure(new IllegalStateException("Timed out when waiting for persistent tasks after " + timeout))__                }_            }, clusterStatePredicate, timeout)__        }_    };waits,for,persistent,tasks,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,predicate,the,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,tasks,condition,final,predicate,persistent,tasks,custom,meta,data,predicate,final,nullable,time,value,timeout,final,action,listener,boolean,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,if,cluster,state,predicate,test,observer,set,and,get,observed,state,listener,on,response,true,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,true,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,failure,new,illegal,state,exception,timed,out,when,waiting,for,persistent,tasks,after,timeout,cluster,state,predicate,timeout
PersistentTasksService -> public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,                                                 final @Nullable TimeValue timeout,                                                 final ActionListener<Boolean> listener);1527840262;Waits for persistent tasks to comply with a given predicate, then call back the listener accordingly.__@param predicate the predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,_                                                final @Nullable TimeValue timeout,_                                                final ActionListener<Boolean> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        if (clusterStatePredicate.test(observer.setAndGetObservedState())) {_            listener.onResponse(true)__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(true)__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onFailure(new IllegalStateException("Timed out when waiting for persistent tasks after " + timeout))__                }_            }, clusterStatePredicate, timeout)__        }_    };waits,for,persistent,tasks,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,predicate,the,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,tasks,condition,final,predicate,persistent,tasks,custom,meta,data,predicate,final,nullable,time,value,timeout,final,action,listener,boolean,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,if,cluster,state,predicate,test,observer,set,and,get,observed,state,listener,on,response,true,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,true,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,failure,new,illegal,state,exception,timed,out,when,waiting,for,persistent,tasks,after,timeout,cluster,state,predicate,timeout
PersistentTasksService -> public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,                                                 final @Nullable TimeValue timeout,                                                 final ActionListener<Boolean> listener);1528103657;Waits for persistent tasks to comply with a given predicate, then call back the listener accordingly.__@param predicate the predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,_                                                final @Nullable TimeValue timeout,_                                                final ActionListener<Boolean> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        if (clusterStatePredicate.test(observer.setAndGetObservedState())) {_            listener.onResponse(true)__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(true)__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onFailure(new IllegalStateException("Timed out when waiting for persistent tasks after " + timeout))__                }_            }, clusterStatePredicate, timeout)__        }_    };waits,for,persistent,tasks,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,predicate,the,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,tasks,condition,final,predicate,persistent,tasks,custom,meta,data,predicate,final,nullable,time,value,timeout,final,action,listener,boolean,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,if,cluster,state,predicate,test,observer,set,and,get,observed,state,listener,on,response,true,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,true,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,failure,new,illegal,state,exception,timed,out,when,waiting,for,persistent,tasks,after,timeout,cluster,state,predicate,timeout
PersistentTasksService -> public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,                                                 final @Nullable TimeValue timeout,                                                 final ActionListener<Boolean> listener);1529076503;Waits for persistent tasks to comply with a given predicate, then call back the listener accordingly.__@param predicate the predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,_                                                final @Nullable TimeValue timeout,_                                                final ActionListener<Boolean> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        if (clusterStatePredicate.test(observer.setAndGetObservedState())) {_            listener.onResponse(true)__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(true)__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onFailure(new IllegalStateException("Timed out when waiting for persistent tasks after " + timeout))__                }_            }, clusterStatePredicate, timeout)__        }_    };waits,for,persistent,tasks,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,predicate,the,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,tasks,condition,final,predicate,persistent,tasks,custom,meta,data,predicate,final,nullable,time,value,timeout,final,action,listener,boolean,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,if,cluster,state,predicate,test,observer,set,and,get,observed,state,listener,on,response,true,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,true,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,failure,new,illegal,state,exception,timed,out,when,waiting,for,persistent,tasks,after,timeout,cluster,state,predicate,timeout
PersistentTasksService -> public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,                                                 final @Nullable TimeValue timeout,                                                 final ActionListener<Boolean> listener);1529433467;Waits for persistent tasks to comply with a given predicate, then call back the listener accordingly.__@param predicate the predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,_                                                final @Nullable TimeValue timeout,_                                                final ActionListener<Boolean> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        if (clusterStatePredicate.test(observer.setAndGetObservedState())) {_            listener.onResponse(true)__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(true)__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onFailure(new IllegalStateException("Timed out when waiting for persistent tasks after " + timeout))__                }_            }, clusterStatePredicate, timeout)__        }_    };waits,for,persistent,tasks,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,predicate,the,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,tasks,condition,final,predicate,persistent,tasks,custom,meta,data,predicate,final,nullable,time,value,timeout,final,action,listener,boolean,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,if,cluster,state,predicate,test,observer,set,and,get,observed,state,listener,on,response,true,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,true,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,failure,new,illegal,state,exception,timed,out,when,waiting,for,persistent,tasks,after,timeout,cluster,state,predicate,timeout
PersistentTasksService -> public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,                                                 final @Nullable TimeValue timeout,                                                 final ActionListener<Boolean> listener);1541092382;Waits for persistent tasks to comply with a given predicate, then call back the listener accordingly.__@param predicate the predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,_                                                final @Nullable TimeValue timeout,_                                                final ActionListener<Boolean> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        if (clusterStatePredicate.test(observer.setAndGetObservedState())) {_            listener.onResponse(true)__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(true)__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onFailure(new IllegalStateException("Timed out when waiting for persistent tasks after " + timeout))__                }_            }, clusterStatePredicate, timeout)__        }_    };waits,for,persistent,tasks,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,predicate,the,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,tasks,condition,final,predicate,persistent,tasks,custom,meta,data,predicate,final,nullable,time,value,timeout,final,action,listener,boolean,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,if,cluster,state,predicate,test,observer,set,and,get,observed,state,listener,on,response,true,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,true,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,failure,new,illegal,state,exception,timed,out,when,waiting,for,persistent,tasks,after,timeout,cluster,state,predicate,timeout
PersistentTasksService -> public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,                                                 final @Nullable TimeValue timeout,                                                 final ActionListener<Boolean> listener);1542402632;Waits for persistent tasks to comply with a given predicate, then call back the listener accordingly.__@param predicate the predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,_                                                final @Nullable TimeValue timeout,_                                                final ActionListener<Boolean> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        if (clusterStatePredicate.test(observer.setAndGetObservedState())) {_            listener.onResponse(true)__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(true)__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onFailure(new IllegalStateException("Timed out when waiting for persistent tasks after " + timeout))__                }_            }, clusterStatePredicate, timeout)__        }_    };waits,for,persistent,tasks,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,predicate,the,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,tasks,condition,final,predicate,persistent,tasks,custom,meta,data,predicate,final,nullable,time,value,timeout,final,action,listener,boolean,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,if,cluster,state,predicate,test,observer,set,and,get,observed,state,listener,on,response,true,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,true,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,failure,new,illegal,state,exception,timed,out,when,waiting,for,persistent,tasks,after,timeout,cluster,state,predicate,timeout
PersistentTasksService -> public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,                                                 final @Nullable TimeValue timeout,                                                 final ActionListener<Boolean> listener);1543415307;Waits for persistent tasks to comply with a given predicate, then call back the listener accordingly.__@param predicate the predicate to evaluate_@param timeout a timeout for waiting_@param listener the callback listener;public void waitForPersistentTasksCondition(final Predicate<PersistentTasksCustomMetaData> predicate,_                                                final @Nullable TimeValue timeout,_                                                final ActionListener<Boolean> listener) {_        final Predicate<ClusterState> clusterStatePredicate = clusterState ->_            predicate.test(clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE))___        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, timeout, logger, threadPool.getThreadContext())__        if (clusterStatePredicate.test(observer.setAndGetObservedState())) {_            listener.onResponse(true)__        } else {_            observer.waitForNextChange(new ClusterStateObserver.Listener() {_                @Override_                public void onNewClusterState(ClusterState state) {_                    listener.onResponse(true)__                }__                @Override_                public void onClusterServiceClose() {_                    listener.onFailure(new NodeClosedException(clusterService.localNode()))__                }__                @Override_                public void onTimeout(TimeValue timeout) {_                    listener.onFailure(new IllegalStateException("Timed out when waiting for persistent tasks after " + timeout))__                }_            }, clusterStatePredicate, timeout)__        }_    };waits,for,persistent,tasks,to,comply,with,a,given,predicate,then,call,back,the,listener,accordingly,param,predicate,the,predicate,to,evaluate,param,timeout,a,timeout,for,waiting,param,listener,the,callback,listener;public,void,wait,for,persistent,tasks,condition,final,predicate,persistent,tasks,custom,meta,data,predicate,final,nullable,time,value,timeout,final,action,listener,boolean,listener,final,predicate,cluster,state,cluster,state,predicate,cluster,state,predicate,test,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,cluster,state,observer,observer,new,cluster,state,observer,cluster,service,timeout,logger,thread,pool,get,thread,context,if,cluster,state,predicate,test,observer,set,and,get,observed,state,listener,on,response,true,else,observer,wait,for,next,change,new,cluster,state,observer,listener,override,public,void,on,new,cluster,state,cluster,state,state,listener,on,response,true,override,public,void,on,cluster,service,close,listener,on,failure,new,node,closed,exception,cluster,service,local,node,override,public,void,on,timeout,time,value,timeout,listener,on,failure,new,illegal,state,exception,timed,out,when,waiting,for,persistent,tasks,after,timeout,cluster,state,predicate,timeout
PersistentTasksService -> void sendUpdateStateRequest(final String taskId,                                 final long taskAllocationID,                                 final PersistentTaskState taskState,                                 final ActionListener<PersistentTask<?>> listener);1529076503;Notifies the master node that the state of a persistent task has changed._<p>_Persistent task implementers shouldn't call this method directly and use_{@link AllocatedPersistentTask#updatePersistentTaskState} instead;void sendUpdateStateRequest(final String taskId,_                                final long taskAllocationID,_                                final PersistentTaskState taskState,_                                final ActionListener<PersistentTask<?>> listener) {_        UpdatePersistentTaskStatusAction.Request request =_            new UpdatePersistentTaskStatusAction.Request(taskId, taskAllocationID, taskState)__        execute(request, UpdatePersistentTaskStatusAction.INSTANCE, listener)__    };notifies,the,master,node,that,the,state,of,a,persistent,task,has,changed,p,persistent,task,implementers,shouldn,t,call,this,method,directly,and,use,link,allocated,persistent,task,update,persistent,task,state,instead;void,send,update,state,request,final,string,task,id,final,long,task,allocation,id,final,persistent,task,state,task,state,final,action,listener,persistent,task,listener,update,persistent,task,status,action,request,request,new,update,persistent,task,status,action,request,task,id,task,allocation,id,task,state,execute,request,update,persistent,task,status,action,instance,listener
PersistentTasksService -> void sendUpdateStateRequest(final String taskId,                                 final long taskAllocationID,                                 final PersistentTaskState taskState,                                 final ActionListener<PersistentTask<?>> listener);1529433467;Notifies the master node that the state of a persistent task has changed._<p>_Persistent task implementers shouldn't call this method directly and use_{@link AllocatedPersistentTask#updatePersistentTaskState} instead;void sendUpdateStateRequest(final String taskId,_                                final long taskAllocationID,_                                final PersistentTaskState taskState,_                                final ActionListener<PersistentTask<?>> listener) {_        UpdatePersistentTaskStatusAction.Request request =_            new UpdatePersistentTaskStatusAction.Request(taskId, taskAllocationID, taskState)__        execute(request, UpdatePersistentTaskStatusAction.INSTANCE, listener)__    };notifies,the,master,node,that,the,state,of,a,persistent,task,has,changed,p,persistent,task,implementers,shouldn,t,call,this,method,directly,and,use,link,allocated,persistent,task,update,persistent,task,state,instead;void,send,update,state,request,final,string,task,id,final,long,task,allocation,id,final,persistent,task,state,task,state,final,action,listener,persistent,task,listener,update,persistent,task,status,action,request,request,new,update,persistent,task,status,action,request,task,id,task,allocation,id,task,state,execute,request,update,persistent,task,status,action,instance,listener
PersistentTasksService -> void sendUpdateStateRequest(final String taskId,                                 final long taskAllocationID,                                 final PersistentTaskState taskState,                                 final ActionListener<PersistentTask<?>> listener);1541092382;Notifies the master node that the state of a persistent task has changed._<p>_Persistent task implementers shouldn't call this method directly and use_{@link AllocatedPersistentTask#updatePersistentTaskState} instead;void sendUpdateStateRequest(final String taskId,_                                final long taskAllocationID,_                                final PersistentTaskState taskState,_                                final ActionListener<PersistentTask<?>> listener) {_        UpdatePersistentTaskStatusAction.Request request =_            new UpdatePersistentTaskStatusAction.Request(taskId, taskAllocationID, taskState)__        execute(request, UpdatePersistentTaskStatusAction.INSTANCE, listener)__    };notifies,the,master,node,that,the,state,of,a,persistent,task,has,changed,p,persistent,task,implementers,shouldn,t,call,this,method,directly,and,use,link,allocated,persistent,task,update,persistent,task,state,instead;void,send,update,state,request,final,string,task,id,final,long,task,allocation,id,final,persistent,task,state,task,state,final,action,listener,persistent,task,listener,update,persistent,task,status,action,request,request,new,update,persistent,task,status,action,request,task,id,task,allocation,id,task,state,execute,request,update,persistent,task,status,action,instance,listener
PersistentTasksService -> void sendUpdateStateRequest(final String taskId,                                 final long taskAllocationID,                                 final PersistentTaskState taskState,                                 final ActionListener<PersistentTask<?>> listener);1542402632;Notifies the master node that the state of a persistent task has changed._<p>_Persistent task implementers shouldn't call this method directly and use_{@link AllocatedPersistentTask#updatePersistentTaskState} instead;void sendUpdateStateRequest(final String taskId,_                                final long taskAllocationID,_                                final PersistentTaskState taskState,_                                final ActionListener<PersistentTask<?>> listener) {_        UpdatePersistentTaskStatusAction.Request request =_            new UpdatePersistentTaskStatusAction.Request(taskId, taskAllocationID, taskState)__        execute(request, UpdatePersistentTaskStatusAction.INSTANCE, listener)__    };notifies,the,master,node,that,the,state,of,a,persistent,task,has,changed,p,persistent,task,implementers,shouldn,t,call,this,method,directly,and,use,link,allocated,persistent,task,update,persistent,task,state,instead;void,send,update,state,request,final,string,task,id,final,long,task,allocation,id,final,persistent,task,state,task,state,final,action,listener,persistent,task,listener,update,persistent,task,status,action,request,request,new,update,persistent,task,status,action,request,task,id,task,allocation,id,task,state,execute,request,update,persistent,task,status,action,instance,listener
PersistentTasksService -> void sendUpdateStateRequest(final String taskId,                                 final long taskAllocationID,                                 final PersistentTaskState taskState,                                 final ActionListener<PersistentTask<?>> listener);1543415307;Notifies the master node that the state of a persistent task has changed._<p>_Persistent task implementers shouldn't call this method directly and use_{@link AllocatedPersistentTask#updatePersistentTaskState} instead;void sendUpdateStateRequest(final String taskId,_                                final long taskAllocationID,_                                final PersistentTaskState taskState,_                                final ActionListener<PersistentTask<?>> listener) {_        UpdatePersistentTaskStatusAction.Request request =_            new UpdatePersistentTaskStatusAction.Request(taskId, taskAllocationID, taskState)__        execute(request, UpdatePersistentTaskStatusAction.INSTANCE, listener)__    };notifies,the,master,node,that,the,state,of,a,persistent,task,has,changed,p,persistent,task,implementers,shouldn,t,call,this,method,directly,and,use,link,allocated,persistent,task,update,persistent,task,state,instead;void,send,update,state,request,final,string,task,id,final,long,task,allocation,id,final,persistent,task,state,task,state,final,action,listener,persistent,task,listener,update,persistent,task,status,action,request,request,new,update,persistent,task,status,action,request,task,id,task,allocation,id,task,state,execute,request,update,persistent,task,status,action,instance,listener
PersistentTasksService -> private <Req extends ActionRequest, Resp extends PersistentTaskResponse>         void execute(final Req request, final Action<Req, Resp> action, final ActionListener<PersistentTask<?>> listener);1527840262;Executes an asynchronous persistent task action using the client._<p>_The origin is set in the context and the listener is wrapped to ensure the proper context is restored;private <Req extends ActionRequest, Resp extends PersistentTaskResponse>_        void execute(final Req request, final Action<Req, Resp> action, final ActionListener<PersistentTask<?>> listener) {_            try {_                final ThreadContext threadContext = client.threadPool().getThreadContext()__                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___                try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                    client.execute(action, request,_                        new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(r -> listener.onResponse(r.getTask()), listener::onFailure)))__                }_            } catch (Exception e) {_                listener.onFailure(e)__            }_    };executes,an,asynchronous,persistent,task,action,using,the,client,p,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;private,req,extends,action,request,resp,extends,persistent,task,response,void,execute,final,req,request,final,action,req,resp,action,final,action,listener,persistent,task,listener,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,execute,action,request,new,context,preserving,action,listener,supplier,action,listener,wrap,r,listener,on,response,r,get,task,listener,on,failure,catch,exception,e,listener,on,failure,e
PersistentTasksService -> private <Req extends ActionRequest, Resp extends PersistentTaskResponse>         void execute(final Req request, final Action<Req, Resp> action, final ActionListener<PersistentTask<?>> listener);1528103657;Executes an asynchronous persistent task action using the client._<p>_The origin is set in the context and the listener is wrapped to ensure the proper context is restored;private <Req extends ActionRequest, Resp extends PersistentTaskResponse>_        void execute(final Req request, final Action<Req, Resp> action, final ActionListener<PersistentTask<?>> listener) {_            try {_                final ThreadContext threadContext = client.threadPool().getThreadContext()__                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___                try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                    client.execute(action, request,_                        new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(r -> listener.onResponse(r.getTask()), listener::onFailure)))__                }_            } catch (Exception e) {_                listener.onFailure(e)__            }_    };executes,an,asynchronous,persistent,task,action,using,the,client,p,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;private,req,extends,action,request,resp,extends,persistent,task,response,void,execute,final,req,request,final,action,req,resp,action,final,action,listener,persistent,task,listener,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,execute,action,request,new,context,preserving,action,listener,supplier,action,listener,wrap,r,listener,on,response,r,get,task,listener,on,failure,catch,exception,e,listener,on,failure,e
PersistentTasksService -> private <Req extends ActionRequest, Resp extends PersistentTaskResponse>         void execute(final Req request, final Action<Req, Resp> action, final ActionListener<PersistentTask<?>> listener);1529076503;Executes an asynchronous persistent task action using the client._<p>_The origin is set in the context and the listener is wrapped to ensure the proper context is restored;private <Req extends ActionRequest, Resp extends PersistentTaskResponse>_        void execute(final Req request, final Action<Req, Resp> action, final ActionListener<PersistentTask<?>> listener) {_            try {_                final ThreadContext threadContext = client.threadPool().getThreadContext()__                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___                try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                    client.execute(action, request,_                        new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(r -> listener.onResponse(r.getTask()), listener::onFailure)))__                }_            } catch (Exception e) {_                listener.onFailure(e)__            }_    };executes,an,asynchronous,persistent,task,action,using,the,client,p,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;private,req,extends,action,request,resp,extends,persistent,task,response,void,execute,final,req,request,final,action,req,resp,action,final,action,listener,persistent,task,listener,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,execute,action,request,new,context,preserving,action,listener,supplier,action,listener,wrap,r,listener,on,response,r,get,task,listener,on,failure,catch,exception,e,listener,on,failure,e
PersistentTasksService -> public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener);1527773340;Notifies the master node to remove a persistent task from the cluster state;public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener) {_        RemovePersistentTaskAction.Request request = new RemovePersistentTaskAction.Request(taskId)__        execute(request, RemovePersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,to,remove,a,persistent,task,from,the,cluster,state;public,void,send,remove,request,final,string,task,id,final,action,listener,persistent,task,listener,remove,persistent,task,action,request,request,new,remove,persistent,task,action,request,task,id,execute,request,remove,persistent,task,action,instance,listener
PersistentTasksService -> public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener);1527840262;Notifies the master node to remove a persistent task from the cluster state;public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener) {_        RemovePersistentTaskAction.Request request = new RemovePersistentTaskAction.Request(taskId)__        execute(request, RemovePersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,to,remove,a,persistent,task,from,the,cluster,state;public,void,send,remove,request,final,string,task,id,final,action,listener,persistent,task,listener,remove,persistent,task,action,request,request,new,remove,persistent,task,action,request,task,id,execute,request,remove,persistent,task,action,instance,listener
PersistentTasksService -> public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener);1528103657;Notifies the master node to remove a persistent task from the cluster state;public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener) {_        RemovePersistentTaskAction.Request request = new RemovePersistentTaskAction.Request(taskId)__        execute(request, RemovePersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,to,remove,a,persistent,task,from,the,cluster,state;public,void,send,remove,request,final,string,task,id,final,action,listener,persistent,task,listener,remove,persistent,task,action,request,request,new,remove,persistent,task,action,request,task,id,execute,request,remove,persistent,task,action,instance,listener
PersistentTasksService -> public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener);1529076503;Notifies the master node to remove a persistent task from the cluster state;public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener) {_        RemovePersistentTaskAction.Request request = new RemovePersistentTaskAction.Request(taskId)__        execute(request, RemovePersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,to,remove,a,persistent,task,from,the,cluster,state;public,void,send,remove,request,final,string,task,id,final,action,listener,persistent,task,listener,remove,persistent,task,action,request,request,new,remove,persistent,task,action,request,task,id,execute,request,remove,persistent,task,action,instance,listener
PersistentTasksService -> public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener);1529433467;Notifies the master node to remove a persistent task from the cluster state;public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener) {_        RemovePersistentTaskAction.Request request = new RemovePersistentTaskAction.Request(taskId)__        execute(request, RemovePersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,to,remove,a,persistent,task,from,the,cluster,state;public,void,send,remove,request,final,string,task,id,final,action,listener,persistent,task,listener,remove,persistent,task,action,request,request,new,remove,persistent,task,action,request,task,id,execute,request,remove,persistent,task,action,instance,listener
PersistentTasksService -> public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener);1541092382;Notifies the master node to remove a persistent task from the cluster state;public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener) {_        RemovePersistentTaskAction.Request request = new RemovePersistentTaskAction.Request(taskId)__        execute(request, RemovePersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,to,remove,a,persistent,task,from,the,cluster,state;public,void,send,remove,request,final,string,task,id,final,action,listener,persistent,task,listener,remove,persistent,task,action,request,request,new,remove,persistent,task,action,request,task,id,execute,request,remove,persistent,task,action,instance,listener
PersistentTasksService -> public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener);1542402632;Notifies the master node to remove a persistent task from the cluster state;public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener) {_        RemovePersistentTaskAction.Request request = new RemovePersistentTaskAction.Request(taskId)__        execute(request, RemovePersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,to,remove,a,persistent,task,from,the,cluster,state;public,void,send,remove,request,final,string,task,id,final,action,listener,persistent,task,listener,remove,persistent,task,action,request,request,new,remove,persistent,task,action,request,task,id,execute,request,remove,persistent,task,action,instance,listener
PersistentTasksService -> public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener);1543415307;Notifies the master node to remove a persistent task from the cluster state;public void sendRemoveRequest(final String taskId, final ActionListener<PersistentTask<?>> listener) {_        RemovePersistentTaskAction.Request request = new RemovePersistentTaskAction.Request(taskId)__        execute(request, RemovePersistentTaskAction.INSTANCE, listener)__    };notifies,the,master,node,to,remove,a,persistent,task,from,the,cluster,state;public,void,send,remove,request,final,string,task,id,final,action,listener,persistent,task,listener,remove,persistent,task,action,request,request,new,remove,persistent,task,action,request,task,id,execute,request,remove,persistent,task,action,instance,listener
PersistentTasksService -> public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,                                                                        final String taskName,                                                                        final @Nullable Params taskParams,                                                                        final ActionListener<PersistentTask<Params>> listener);1527773340;Notifies the master node to create new persistent task and to assign it to a node.;public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,_                                                                       final String taskName,_                                                                       final @Nullable Params taskParams,_                                                                       final ActionListener<PersistentTask<Params>> listener) {_        @SuppressWarnings("unchecked")_        final ActionListener<PersistentTask<?>> wrappedListener =_            ActionListener.wrap(t -> listener.onResponse((PersistentTask<Params>) t), listener::onFailure)__        StartPersistentTaskAction.Request request = new StartPersistentTaskAction.Request(taskId, taskName, taskParams)__        execute(request, StartPersistentTaskAction.INSTANCE, wrappedListener)__    };notifies,the,master,node,to,create,new,persistent,task,and,to,assign,it,to,a,node;public,params,extends,persistent,task,params,void,send,start,request,final,string,task,id,final,string,task,name,final,nullable,params,task,params,final,action,listener,persistent,task,params,listener,suppress,warnings,unchecked,final,action,listener,persistent,task,wrapped,listener,action,listener,wrap,t,listener,on,response,persistent,task,params,t,listener,on,failure,start,persistent,task,action,request,request,new,start,persistent,task,action,request,task,id,task,name,task,params,execute,request,start,persistent,task,action,instance,wrapped,listener
PersistentTasksService -> public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,                                                                        final String taskName,                                                                        final @Nullable Params taskParams,                                                                        final ActionListener<PersistentTask<Params>> listener);1527840262;Notifies the master node to create new persistent task and to assign it to a node.;public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,_                                                                       final String taskName,_                                                                       final @Nullable Params taskParams,_                                                                       final ActionListener<PersistentTask<Params>> listener) {_        @SuppressWarnings("unchecked")_        final ActionListener<PersistentTask<?>> wrappedListener =_            ActionListener.wrap(t -> listener.onResponse((PersistentTask<Params>) t), listener::onFailure)__        StartPersistentTaskAction.Request request = new StartPersistentTaskAction.Request(taskId, taskName, taskParams)__        execute(request, StartPersistentTaskAction.INSTANCE, wrappedListener)__    };notifies,the,master,node,to,create,new,persistent,task,and,to,assign,it,to,a,node;public,params,extends,persistent,task,params,void,send,start,request,final,string,task,id,final,string,task,name,final,nullable,params,task,params,final,action,listener,persistent,task,params,listener,suppress,warnings,unchecked,final,action,listener,persistent,task,wrapped,listener,action,listener,wrap,t,listener,on,response,persistent,task,params,t,listener,on,failure,start,persistent,task,action,request,request,new,start,persistent,task,action,request,task,id,task,name,task,params,execute,request,start,persistent,task,action,instance,wrapped,listener
PersistentTasksService -> private <Req extends ActionRequest, Resp extends PersistentTaskResponse>         void execute(final Req request, final Action<Resp> action, final ActionListener<PersistentTask<?>> listener);1529433467;Executes an asynchronous persistent task action using the client._<p>_The origin is set in the context and the listener is wrapped to ensure the proper context is restored;private <Req extends ActionRequest, Resp extends PersistentTaskResponse>_        void execute(final Req request, final Action<Resp> action, final ActionListener<PersistentTask<?>> listener) {_            try {_                final ThreadContext threadContext = client.threadPool().getThreadContext()__                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___                try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                    client.execute(action, request,_                        new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(r -> listener.onResponse(r.getTask()), listener::onFailure)))__                }_            } catch (Exception e) {_                listener.onFailure(e)__            }_    };executes,an,asynchronous,persistent,task,action,using,the,client,p,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;private,req,extends,action,request,resp,extends,persistent,task,response,void,execute,final,req,request,final,action,resp,action,final,action,listener,persistent,task,listener,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,execute,action,request,new,context,preserving,action,listener,supplier,action,listener,wrap,r,listener,on,response,r,get,task,listener,on,failure,catch,exception,e,listener,on,failure,e
PersistentTasksService -> private <Req extends ActionRequest, Resp extends PersistentTaskResponse>         void execute(final Req request, final Action<Resp> action, final ActionListener<PersistentTask<?>> listener);1541092382;Executes an asynchronous persistent task action using the client._<p>_The origin is set in the context and the listener is wrapped to ensure the proper context is restored;private <Req extends ActionRequest, Resp extends PersistentTaskResponse>_        void execute(final Req request, final Action<Resp> action, final ActionListener<PersistentTask<?>> listener) {_            try {_                final ThreadContext threadContext = client.threadPool().getThreadContext()__                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___                try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                    client.execute(action, request,_                        new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(r -> listener.onResponse(r.getTask()), listener::onFailure)))__                }_            } catch (Exception e) {_                listener.onFailure(e)__            }_    };executes,an,asynchronous,persistent,task,action,using,the,client,p,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;private,req,extends,action,request,resp,extends,persistent,task,response,void,execute,final,req,request,final,action,resp,action,final,action,listener,persistent,task,listener,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,execute,action,request,new,context,preserving,action,listener,supplier,action,listener,wrap,r,listener,on,response,r,get,task,listener,on,failure,catch,exception,e,listener,on,failure,e
PersistentTasksService -> private <Req extends ActionRequest, Resp extends PersistentTaskResponse>         void execute(final Req request, final Action<Resp> action, final ActionListener<PersistentTask<?>> listener);1542402632;Executes an asynchronous persistent task action using the client._<p>_The origin is set in the context and the listener is wrapped to ensure the proper context is restored;private <Req extends ActionRequest, Resp extends PersistentTaskResponse>_        void execute(final Req request, final Action<Resp> action, final ActionListener<PersistentTask<?>> listener) {_            try {_                final ThreadContext threadContext = client.threadPool().getThreadContext()__                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___                try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                    client.execute(action, request,_                        new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(r -> listener.onResponse(r.getTask()), listener::onFailure)))__                }_            } catch (Exception e) {_                listener.onFailure(e)__            }_    };executes,an,asynchronous,persistent,task,action,using,the,client,p,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;private,req,extends,action,request,resp,extends,persistent,task,response,void,execute,final,req,request,final,action,resp,action,final,action,listener,persistent,task,listener,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,execute,action,request,new,context,preserving,action,listener,supplier,action,listener,wrap,r,listener,on,response,r,get,task,listener,on,failure,catch,exception,e,listener,on,failure,e
PersistentTasksService -> private <Req extends ActionRequest, Resp extends PersistentTaskResponse>         void execute(final Req request, final Action<Resp> action, final ActionListener<PersistentTask<?>> listener);1543415307;Executes an asynchronous persistent task action using the client._<p>_The origin is set in the context and the listener is wrapped to ensure the proper context is restored;private <Req extends ActionRequest, Resp extends PersistentTaskResponse>_        void execute(final Req request, final Action<Resp> action, final ActionListener<PersistentTask<?>> listener) {_            try {_                client.execute(action, request,_                        ActionListener.wrap(r -> listener.onResponse(r.getTask()), listener::onFailure))__            } catch (Exception e) {_                listener.onFailure(e)__            }_    };executes,an,asynchronous,persistent,task,action,using,the,client,p,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;private,req,extends,action,request,resp,extends,persistent,task,response,void,execute,final,req,request,final,action,resp,action,final,action,listener,persistent,task,listener,try,client,execute,action,request,action,listener,wrap,r,listener,on,response,r,get,task,listener,on,failure,catch,exception,e,listener,on,failure,e
PersistentTasksService -> void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener);1527773340;Cancels a locally running task using the Task Manager API;void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener) {_        CancelTasksRequest request = new CancelTasksRequest()__        request.setTaskId(new TaskId(clusterService.localNode().getId(), taskId))__        request.setReason(reason)__        try {_            final ThreadContext threadContext = client.threadPool().getThreadContext()__            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___            try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                client.admin().cluster().cancelTasks(request, new ContextPreservingActionListener<>(supplier, listener))__            }_        } catch (Exception e) {_            listener.onFailure(e)__        }_    };cancels,a,locally,running,task,using,the,task,manager,api;void,send,cancel,request,final,long,task,id,final,string,reason,final,action,listener,cancel,tasks,response,listener,cancel,tasks,request,request,new,cancel,tasks,request,request,set,task,id,new,task,id,cluster,service,local,node,get,id,task,id,request,set,reason,reason,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,admin,cluster,cancel,tasks,request,new,context,preserving,action,listener,supplier,listener,catch,exception,e,listener,on,failure,e
PersistentTasksService -> void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener);1527840262;Cancels a locally running task using the Task Manager API;void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener) {_        CancelTasksRequest request = new CancelTasksRequest()__        request.setTaskId(new TaskId(clusterService.localNode().getId(), taskId))__        request.setReason(reason)__        try {_            final ThreadContext threadContext = client.threadPool().getThreadContext()__            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___            try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                client.admin().cluster().cancelTasks(request, new ContextPreservingActionListener<>(supplier, listener))__            }_        } catch (Exception e) {_            listener.onFailure(e)__        }_    };cancels,a,locally,running,task,using,the,task,manager,api;void,send,cancel,request,final,long,task,id,final,string,reason,final,action,listener,cancel,tasks,response,listener,cancel,tasks,request,request,new,cancel,tasks,request,request,set,task,id,new,task,id,cluster,service,local,node,get,id,task,id,request,set,reason,reason,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,admin,cluster,cancel,tasks,request,new,context,preserving,action,listener,supplier,listener,catch,exception,e,listener,on,failure,e
PersistentTasksService -> void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener);1528103657;Cancels a locally running task using the Task Manager API;void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener) {_        CancelTasksRequest request = new CancelTasksRequest()__        request.setTaskId(new TaskId(clusterService.localNode().getId(), taskId))__        request.setReason(reason)__        try {_            final ThreadContext threadContext = client.threadPool().getThreadContext()__            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___            try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                client.admin().cluster().cancelTasks(request, new ContextPreservingActionListener<>(supplier, listener))__            }_        } catch (Exception e) {_            listener.onFailure(e)__        }_    };cancels,a,locally,running,task,using,the,task,manager,api;void,send,cancel,request,final,long,task,id,final,string,reason,final,action,listener,cancel,tasks,response,listener,cancel,tasks,request,request,new,cancel,tasks,request,request,set,task,id,new,task,id,cluster,service,local,node,get,id,task,id,request,set,reason,reason,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,admin,cluster,cancel,tasks,request,new,context,preserving,action,listener,supplier,listener,catch,exception,e,listener,on,failure,e
PersistentTasksService -> void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener);1529076503;Cancels a locally running task using the Task Manager API;void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener) {_        CancelTasksRequest request = new CancelTasksRequest()__        request.setTaskId(new TaskId(clusterService.localNode().getId(), taskId))__        request.setReason(reason)__        try {_            final ThreadContext threadContext = client.threadPool().getThreadContext()__            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___            try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                client.admin().cluster().cancelTasks(request, new ContextPreservingActionListener<>(supplier, listener))__            }_        } catch (Exception e) {_            listener.onFailure(e)__        }_    };cancels,a,locally,running,task,using,the,task,manager,api;void,send,cancel,request,final,long,task,id,final,string,reason,final,action,listener,cancel,tasks,response,listener,cancel,tasks,request,request,new,cancel,tasks,request,request,set,task,id,new,task,id,cluster,service,local,node,get,id,task,id,request,set,reason,reason,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,admin,cluster,cancel,tasks,request,new,context,preserving,action,listener,supplier,listener,catch,exception,e,listener,on,failure,e
PersistentTasksService -> void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener);1529433467;Cancels a locally running task using the Task Manager API;void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener) {_        CancelTasksRequest request = new CancelTasksRequest()__        request.setTaskId(new TaskId(clusterService.localNode().getId(), taskId))__        request.setReason(reason)__        try {_            final ThreadContext threadContext = client.threadPool().getThreadContext()__            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___            try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                client.admin().cluster().cancelTasks(request, new ContextPreservingActionListener<>(supplier, listener))__            }_        } catch (Exception e) {_            listener.onFailure(e)__        }_    };cancels,a,locally,running,task,using,the,task,manager,api;void,send,cancel,request,final,long,task,id,final,string,reason,final,action,listener,cancel,tasks,response,listener,cancel,tasks,request,request,new,cancel,tasks,request,request,set,task,id,new,task,id,cluster,service,local,node,get,id,task,id,request,set,reason,reason,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,admin,cluster,cancel,tasks,request,new,context,preserving,action,listener,supplier,listener,catch,exception,e,listener,on,failure,e
PersistentTasksService -> void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener);1541092382;Cancels a locally running task using the Task Manager API;void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener) {_        CancelTasksRequest request = new CancelTasksRequest()__        request.setTaskId(new TaskId(clusterService.localNode().getId(), taskId))__        request.setReason(reason)__        try {_            final ThreadContext threadContext = client.threadPool().getThreadContext()__            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___            try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                client.admin().cluster().cancelTasks(request, new ContextPreservingActionListener<>(supplier, listener))__            }_        } catch (Exception e) {_            listener.onFailure(e)__        }_    };cancels,a,locally,running,task,using,the,task,manager,api;void,send,cancel,request,final,long,task,id,final,string,reason,final,action,listener,cancel,tasks,response,listener,cancel,tasks,request,request,new,cancel,tasks,request,request,set,task,id,new,task,id,cluster,service,local,node,get,id,task,id,request,set,reason,reason,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,admin,cluster,cancel,tasks,request,new,context,preserving,action,listener,supplier,listener,catch,exception,e,listener,on,failure,e
PersistentTasksService -> void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener);1542402632;Cancels a locally running task using the Task Manager API;void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener) {_        CancelTasksRequest request = new CancelTasksRequest()__        request.setTaskId(new TaskId(clusterService.localNode().getId(), taskId))__        request.setReason(reason)__        try {_            final ThreadContext threadContext = client.threadPool().getThreadContext()__            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)___            try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, PERSISTENT_TASK_ORIGIN)) {_                client.admin().cluster().cancelTasks(request, new ContextPreservingActionListener<>(supplier, listener))__            }_        } catch (Exception e) {_            listener.onFailure(e)__        }_    };cancels,a,locally,running,task,using,the,task,manager,api;void,send,cancel,request,final,long,task,id,final,string,reason,final,action,listener,cancel,tasks,response,listener,cancel,tasks,request,request,new,cancel,tasks,request,request,set,task,id,new,task,id,cluster,service,local,node,get,id,task,id,request,set,reason,reason,try,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,client,admin,cluster,cancel,tasks,request,new,context,preserving,action,listener,supplier,listener,catch,exception,e,listener,on,failure,e
PersistentTasksService -> void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener);1543415307;Cancels a locally running task using the Task Manager API;void sendCancelRequest(final long taskId, final String reason, final ActionListener<CancelTasksResponse> listener) {_        CancelTasksRequest request = new CancelTasksRequest()__        request.setTaskId(new TaskId(clusterService.localNode().getId(), taskId))__        request.setReason(reason)__        try {_            client.admin().cluster().cancelTasks(request, listener)__        } catch (Exception e) {_            listener.onFailure(e)__        }_    };cancels,a,locally,running,task,using,the,task,manager,api;void,send,cancel,request,final,long,task,id,final,string,reason,final,action,listener,cancel,tasks,response,listener,cancel,tasks,request,request,new,cancel,tasks,request,request,set,task,id,new,task,id,cluster,service,local,node,get,id,task,id,request,set,reason,reason,try,client,admin,cluster,cancel,tasks,request,listener,catch,exception,e,listener,on,failure,e
PersistentTasksService -> public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,                                                                        final String taskName,                                                                        final Params taskParams,                                                                        final ActionListener<PersistentTask<Params>> listener);1528103657;Notifies the master node to create new persistent task and to assign it to a node.;public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,_                                                                       final String taskName,_                                                                       final Params taskParams,_                                                                       final ActionListener<PersistentTask<Params>> listener) {_        @SuppressWarnings("unchecked")_        final ActionListener<PersistentTask<?>> wrappedListener =_            ActionListener.wrap(t -> listener.onResponse((PersistentTask<Params>) t), listener::onFailure)__        StartPersistentTaskAction.Request request = new StartPersistentTaskAction.Request(taskId, taskName, taskParams)__        execute(request, StartPersistentTaskAction.INSTANCE, wrappedListener)__    };notifies,the,master,node,to,create,new,persistent,task,and,to,assign,it,to,a,node;public,params,extends,persistent,task,params,void,send,start,request,final,string,task,id,final,string,task,name,final,params,task,params,final,action,listener,persistent,task,params,listener,suppress,warnings,unchecked,final,action,listener,persistent,task,wrapped,listener,action,listener,wrap,t,listener,on,response,persistent,task,params,t,listener,on,failure,start,persistent,task,action,request,request,new,start,persistent,task,action,request,task,id,task,name,task,params,execute,request,start,persistent,task,action,instance,wrapped,listener
PersistentTasksService -> public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,                                                                        final String taskName,                                                                        final Params taskParams,                                                                        final ActionListener<PersistentTask<Params>> listener);1529076503;Notifies the master node to create new persistent task and to assign it to a node.;public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,_                                                                       final String taskName,_                                                                       final Params taskParams,_                                                                       final ActionListener<PersistentTask<Params>> listener) {_        @SuppressWarnings("unchecked")_        final ActionListener<PersistentTask<?>> wrappedListener =_            ActionListener.wrap(t -> listener.onResponse((PersistentTask<Params>) t), listener::onFailure)__        StartPersistentTaskAction.Request request = new StartPersistentTaskAction.Request(taskId, taskName, taskParams)__        execute(request, StartPersistentTaskAction.INSTANCE, wrappedListener)__    };notifies,the,master,node,to,create,new,persistent,task,and,to,assign,it,to,a,node;public,params,extends,persistent,task,params,void,send,start,request,final,string,task,id,final,string,task,name,final,params,task,params,final,action,listener,persistent,task,params,listener,suppress,warnings,unchecked,final,action,listener,persistent,task,wrapped,listener,action,listener,wrap,t,listener,on,response,persistent,task,params,t,listener,on,failure,start,persistent,task,action,request,request,new,start,persistent,task,action,request,task,id,task,name,task,params,execute,request,start,persistent,task,action,instance,wrapped,listener
PersistentTasksService -> public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,                                                                        final String taskName,                                                                        final Params taskParams,                                                                        final ActionListener<PersistentTask<Params>> listener);1529433467;Notifies the master node to create new persistent task and to assign it to a node.;public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,_                                                                       final String taskName,_                                                                       final Params taskParams,_                                                                       final ActionListener<PersistentTask<Params>> listener) {_        @SuppressWarnings("unchecked")_        final ActionListener<PersistentTask<?>> wrappedListener =_            ActionListener.wrap(t -> listener.onResponse((PersistentTask<Params>) t), listener::onFailure)__        StartPersistentTaskAction.Request request = new StartPersistentTaskAction.Request(taskId, taskName, taskParams)__        execute(request, StartPersistentTaskAction.INSTANCE, wrappedListener)__    };notifies,the,master,node,to,create,new,persistent,task,and,to,assign,it,to,a,node;public,params,extends,persistent,task,params,void,send,start,request,final,string,task,id,final,string,task,name,final,params,task,params,final,action,listener,persistent,task,params,listener,suppress,warnings,unchecked,final,action,listener,persistent,task,wrapped,listener,action,listener,wrap,t,listener,on,response,persistent,task,params,t,listener,on,failure,start,persistent,task,action,request,request,new,start,persistent,task,action,request,task,id,task,name,task,params,execute,request,start,persistent,task,action,instance,wrapped,listener
PersistentTasksService -> public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,                                                                        final String taskName,                                                                        final Params taskParams,                                                                        final ActionListener<PersistentTask<Params>> listener);1541092382;Notifies the master node to create new persistent task and to assign it to a node.;public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,_                                                                       final String taskName,_                                                                       final Params taskParams,_                                                                       final ActionListener<PersistentTask<Params>> listener) {_        @SuppressWarnings("unchecked")_        final ActionListener<PersistentTask<?>> wrappedListener =_            ActionListener.wrap(t -> listener.onResponse((PersistentTask<Params>) t), listener::onFailure)__        StartPersistentTaskAction.Request request = new StartPersistentTaskAction.Request(taskId, taskName, taskParams)__        execute(request, StartPersistentTaskAction.INSTANCE, wrappedListener)__    };notifies,the,master,node,to,create,new,persistent,task,and,to,assign,it,to,a,node;public,params,extends,persistent,task,params,void,send,start,request,final,string,task,id,final,string,task,name,final,params,task,params,final,action,listener,persistent,task,params,listener,suppress,warnings,unchecked,final,action,listener,persistent,task,wrapped,listener,action,listener,wrap,t,listener,on,response,persistent,task,params,t,listener,on,failure,start,persistent,task,action,request,request,new,start,persistent,task,action,request,task,id,task,name,task,params,execute,request,start,persistent,task,action,instance,wrapped,listener
PersistentTasksService -> public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,                                                                        final String taskName,                                                                        final Params taskParams,                                                                        final ActionListener<PersistentTask<Params>> listener);1542402632;Notifies the master node to create new persistent task and to assign it to a node.;public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,_                                                                       final String taskName,_                                                                       final Params taskParams,_                                                                       final ActionListener<PersistentTask<Params>> listener) {_        @SuppressWarnings("unchecked")_        final ActionListener<PersistentTask<?>> wrappedListener =_            ActionListener.wrap(t -> listener.onResponse((PersistentTask<Params>) t), listener::onFailure)__        StartPersistentTaskAction.Request request = new StartPersistentTaskAction.Request(taskId, taskName, taskParams)__        execute(request, StartPersistentTaskAction.INSTANCE, wrappedListener)__    };notifies,the,master,node,to,create,new,persistent,task,and,to,assign,it,to,a,node;public,params,extends,persistent,task,params,void,send,start,request,final,string,task,id,final,string,task,name,final,params,task,params,final,action,listener,persistent,task,params,listener,suppress,warnings,unchecked,final,action,listener,persistent,task,wrapped,listener,action,listener,wrap,t,listener,on,response,persistent,task,params,t,listener,on,failure,start,persistent,task,action,request,request,new,start,persistent,task,action,request,task,id,task,name,task,params,execute,request,start,persistent,task,action,instance,wrapped,listener
PersistentTasksService -> public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,                                                                        final String taskName,                                                                        final Params taskParams,                                                                        final ActionListener<PersistentTask<Params>> listener);1543415307;Notifies the master node to create new persistent task and to assign it to a node.;public <Params extends PersistentTaskParams> void sendStartRequest(final String taskId,_                                                                       final String taskName,_                                                                       final Params taskParams,_                                                                       final ActionListener<PersistentTask<Params>> listener) {_        @SuppressWarnings("unchecked")_        final ActionListener<PersistentTask<?>> wrappedListener =_            ActionListener.wrap(t -> listener.onResponse((PersistentTask<Params>) t), listener::onFailure)__        StartPersistentTaskAction.Request request = new StartPersistentTaskAction.Request(taskId, taskName, taskParams)__        execute(request, StartPersistentTaskAction.INSTANCE, wrappedListener)__    };notifies,the,master,node,to,create,new,persistent,task,and,to,assign,it,to,a,node;public,params,extends,persistent,task,params,void,send,start,request,final,string,task,id,final,string,task,name,final,params,task,params,final,action,listener,persistent,task,params,listener,suppress,warnings,unchecked,final,action,listener,persistent,task,wrapped,listener,action,listener,wrap,t,listener,on,response,persistent,task,params,t,listener,on,failure,start,persistent,task,action,request,request,new,start,persistent,task,action,request,task,id,task,name,task,params,execute,request,start,persistent,task,action,instance,wrapped,listener
