commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;public static <T> Iterable<T> concat(Iterable<T>... inputs) {     Objects.requireNonNull(inputs).     return new ConcatenatedIterable<>(inputs). }
false;public;0;8;;@Override public Iterator<T> iterator() {     return Stream.of(inputs).map(it -> StreamSupport.stream(it.spliterator(), false)).reduce(Stream::concat).orElseGet(Stream::empty).iterator(). }
true;public,static;1;4;/**  * Flattens the two level {@code Iterable} into a single {@code Iterable}.  Note that this pre-caches the values from the outer {@code  *  Iterable}, but not the values from the inner one.  */ ;/**  * Flattens the two level {@code Iterable} into a single {@code Iterable}.  Note that this pre-caches the values from the outer {@code  *  Iterable}, but not the values from the inner one.  */ public static <T> Iterable<T> flatten(Iterable<? extends Iterable<T>> inputs) {     Objects.requireNonNull(inputs).     return new FlattenedIterables<>(inputs). }
false;public;0;6;;@Override public Iterator<T> iterator() {     return StreamSupport.stream(inputs.spliterator(), false).flatMap(s -> StreamSupport.stream(s.spliterator(), false)).iterator(). }
false;public,static;2;25;;public static <T> T get(Iterable<T> iterable, int position) {     Objects.requireNonNull(iterable).     if (position < 0) {         throw new IllegalArgumentException("position >= 0").     }     if (iterable instanceof List) {         List<T> list = (List<T>) iterable.         if (position >= list.size()) {             throw new IndexOutOfBoundsException(Integer.toString(position)).         }         return list.get(position).     } else {         Iterator<T> it = iterable.iterator().         for (int index = 0. index < position. index++) {             if (!it.hasNext()) {                 throw new IndexOutOfBoundsException(Integer.toString(position)).             }             it.next().         }         if (!it.hasNext()) {             throw new IndexOutOfBoundsException(Integer.toString(position)).         }         return it.next().     } }
