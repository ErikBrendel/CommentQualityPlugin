# id;timestamp;commentText;codeText;commentWords;codeWords
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime) -> null -> private long buildTookInMillis();1524684173;Builds how long it took to execute the msearch.;private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            };builds,how,long,it,took,to,execute,the,msearch;private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime) -> null -> private long buildTookInMillis();1529487105;Builds how long it took to execute the msearch.;private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            };builds,how,long,it,took,to,execute,the,msearch;private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime) -> null -> private long buildTookInMillis();1529600205;Builds how long it took to execute the msearch.;private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            };builds,how,long,it,took,to,execute,the,msearch;private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime) -> null -> private long buildTookInMillis();1529658035;Builds how long it took to execute the msearch.;private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            };builds,how,long,it,took,to,execute,the,msearch;private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime) -> null -> private long buildTookInMillis();1529916082;Builds how long it took to execute the msearch.;private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            };builds,how,long,it,took,to,execute,the,msearch;private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime) -> null -> private long buildTookInMillis();1541419698;Builds how long it took to execute the msearch.;private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            };builds,how,long,it,took,to,execute,the,msearch;private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime);1524684173;Executes a single request from the queue of requests. When a request finishes, another request is taken from the queue. When a_request is executed, a permit is taken on the specified semaphore, and released as each request completes.__@param requests the queue of multi-search requests to execute_@param responses atomic array to hold the responses corresponding to each search request slot_@param responseCounter incremented on each response_@param listener the listener attached to the multi-search request;void executeSearch(_            final Queue<SearchRequestSlot> requests,_            final AtomicArray<MultiSearchResponse.Item> responses,_            final AtomicInteger responseCounter,_            final ActionListener<MultiSearchResponse> listener,_            final long relativeStartTime) {_        SearchRequestSlot request = requests.poll()__        if (request == null) {_            _            return__        }__        _        final Thread thread = Thread.currentThread()__        searchAction.execute(request.request, new ActionListener<SearchResponse>() {_            @Override_            public void onResponse(final SearchResponse searchResponse) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(searchResponse, null))__            }__            @Override_            public void onFailure(final Exception e) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(null, e))__            }__            private void handleResponse(final int responseSlot, final MultiSearchResponse.Item item) {_                responses.set(responseSlot, item)__                if (responseCounter.decrementAndGet() == 0) {_                    assert requests.isEmpty()__                    finish()__                } else {_                    if (thread == Thread.currentThread()) {_                        _                        threadPool.generic()_                                .execute(() -> executeSearch(requests, responses, responseCounter, listener, relativeStartTime))__                    } else {_                        _                        executeSearch(requests, responses, responseCounter, listener, relativeStartTime)__                    }_                }_            }__            private void finish() {_                listener.onResponse(new MultiSearchResponse(responses.toArray(new MultiSearchResponse.Item[responses.length()]),_                        buildTookInMillis()))__            }__            _            private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            }_        })__    };executes,a,single,request,from,the,queue,of,requests,when,a,request,finishes,another,request,is,taken,from,the,queue,when,a,request,is,executed,a,permit,is,taken,on,the,specified,semaphore,and,released,as,each,request,completes,param,requests,the,queue,of,multi,search,requests,to,execute,param,responses,atomic,array,to,hold,the,responses,corresponding,to,each,search,request,slot,param,response,counter,incremented,on,each,response,param,listener,the,listener,attached,to,the,multi,search,request;void,execute,search,final,queue,search,request,slot,requests,final,atomic,array,multi,search,response,item,responses,final,atomic,integer,response,counter,final,action,listener,multi,search,response,listener,final,long,relative,start,time,search,request,slot,request,requests,poll,if,request,null,return,final,thread,thread,thread,current,thread,search,action,execute,request,request,new,action,listener,search,response,override,public,void,on,response,final,search,response,search,response,handle,response,request,response,slot,new,multi,search,response,item,search,response,null,override,public,void,on,failure,final,exception,e,handle,response,request,response,slot,new,multi,search,response,item,null,e,private,void,handle,response,final,int,response,slot,final,multi,search,response,item,item,responses,set,response,slot,item,if,response,counter,decrement,and,get,0,assert,requests,is,empty,finish,else,if,thread,thread,current,thread,thread,pool,generic,execute,execute,search,requests,responses,response,counter,listener,relative,start,time,else,execute,search,requests,responses,response,counter,listener,relative,start,time,private,void,finish,listener,on,response,new,multi,search,response,responses,to,array,new,multi,search,response,item,responses,length,build,took,in,millis,private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime);1529487105;Executes a single request from the queue of requests. When a request finishes, another request is taken from the queue. When a_request is executed, a permit is taken on the specified semaphore, and released as each request completes.__@param requests the queue of multi-search requests to execute_@param responses atomic array to hold the responses corresponding to each search request slot_@param responseCounter incremented on each response_@param listener the listener attached to the multi-search request;void executeSearch(_            final Queue<SearchRequestSlot> requests,_            final AtomicArray<MultiSearchResponse.Item> responses,_            final AtomicInteger responseCounter,_            final ActionListener<MultiSearchResponse> listener,_            final long relativeStartTime) {_        SearchRequestSlot request = requests.poll()__        if (request == null) {_            _            return__        }__        _        final Thread thread = Thread.currentThread()__        searchAction.execute(request.request, new ActionListener<SearchResponse>() {_            @Override_            public void onResponse(final SearchResponse searchResponse) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(searchResponse, null))__            }__            @Override_            public void onFailure(final Exception e) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(null, e))__            }__            private void handleResponse(final int responseSlot, final MultiSearchResponse.Item item) {_                responses.set(responseSlot, item)__                if (responseCounter.decrementAndGet() == 0) {_                    assert requests.isEmpty()__                    finish()__                } else {_                    if (thread == Thread.currentThread()) {_                        _                        threadPool.generic()_                                .execute(() -> executeSearch(requests, responses, responseCounter, listener, relativeStartTime))__                    } else {_                        _                        executeSearch(requests, responses, responseCounter, listener, relativeStartTime)__                    }_                }_            }__            private void finish() {_                listener.onResponse(new MultiSearchResponse(responses.toArray(new MultiSearchResponse.Item[responses.length()]),_                        buildTookInMillis()))__            }__            _            private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            }_        })__    };executes,a,single,request,from,the,queue,of,requests,when,a,request,finishes,another,request,is,taken,from,the,queue,when,a,request,is,executed,a,permit,is,taken,on,the,specified,semaphore,and,released,as,each,request,completes,param,requests,the,queue,of,multi,search,requests,to,execute,param,responses,atomic,array,to,hold,the,responses,corresponding,to,each,search,request,slot,param,response,counter,incremented,on,each,response,param,listener,the,listener,attached,to,the,multi,search,request;void,execute,search,final,queue,search,request,slot,requests,final,atomic,array,multi,search,response,item,responses,final,atomic,integer,response,counter,final,action,listener,multi,search,response,listener,final,long,relative,start,time,search,request,slot,request,requests,poll,if,request,null,return,final,thread,thread,thread,current,thread,search,action,execute,request,request,new,action,listener,search,response,override,public,void,on,response,final,search,response,search,response,handle,response,request,response,slot,new,multi,search,response,item,search,response,null,override,public,void,on,failure,final,exception,e,handle,response,request,response,slot,new,multi,search,response,item,null,e,private,void,handle,response,final,int,response,slot,final,multi,search,response,item,item,responses,set,response,slot,item,if,response,counter,decrement,and,get,0,assert,requests,is,empty,finish,else,if,thread,thread,current,thread,thread,pool,generic,execute,execute,search,requests,responses,response,counter,listener,relative,start,time,else,execute,search,requests,responses,response,counter,listener,relative,start,time,private,void,finish,listener,on,response,new,multi,search,response,responses,to,array,new,multi,search,response,item,responses,length,build,took,in,millis,private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime);1529600205;Executes a single request from the queue of requests. When a request finishes, another request is taken from the queue. When a_request is executed, a permit is taken on the specified semaphore, and released as each request completes.__@param requests the queue of multi-search requests to execute_@param responses atomic array to hold the responses corresponding to each search request slot_@param responseCounter incremented on each response_@param listener the listener attached to the multi-search request;void executeSearch(_            final Queue<SearchRequestSlot> requests,_            final AtomicArray<MultiSearchResponse.Item> responses,_            final AtomicInteger responseCounter,_            final ActionListener<MultiSearchResponse> listener,_            final long relativeStartTime) {_        SearchRequestSlot request = requests.poll()__        if (request == null) {_            _            return__        }__        _        final Thread thread = Thread.currentThread()__        client.search(request.request, new ActionListener<SearchResponse>() {_            @Override_            public void onResponse(final SearchResponse searchResponse) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(searchResponse, null))__            }__            @Override_            public void onFailure(final Exception e) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(null, e))__            }__            private void handleResponse(final int responseSlot, final MultiSearchResponse.Item item) {_                responses.set(responseSlot, item)__                if (responseCounter.decrementAndGet() == 0) {_                    assert requests.isEmpty()__                    finish()__                } else {_                    if (thread == Thread.currentThread()) {_                        _                        threadPool.generic()_                                .execute(() -> executeSearch(requests, responses, responseCounter, listener, relativeStartTime))__                    } else {_                        _                        executeSearch(requests, responses, responseCounter, listener, relativeStartTime)__                    }_                }_            }__            private void finish() {_                listener.onResponse(new MultiSearchResponse(responses.toArray(new MultiSearchResponse.Item[responses.length()]),_                        buildTookInMillis()))__            }__            _            private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            }_        })__    };executes,a,single,request,from,the,queue,of,requests,when,a,request,finishes,another,request,is,taken,from,the,queue,when,a,request,is,executed,a,permit,is,taken,on,the,specified,semaphore,and,released,as,each,request,completes,param,requests,the,queue,of,multi,search,requests,to,execute,param,responses,atomic,array,to,hold,the,responses,corresponding,to,each,search,request,slot,param,response,counter,incremented,on,each,response,param,listener,the,listener,attached,to,the,multi,search,request;void,execute,search,final,queue,search,request,slot,requests,final,atomic,array,multi,search,response,item,responses,final,atomic,integer,response,counter,final,action,listener,multi,search,response,listener,final,long,relative,start,time,search,request,slot,request,requests,poll,if,request,null,return,final,thread,thread,thread,current,thread,client,search,request,request,new,action,listener,search,response,override,public,void,on,response,final,search,response,search,response,handle,response,request,response,slot,new,multi,search,response,item,search,response,null,override,public,void,on,failure,final,exception,e,handle,response,request,response,slot,new,multi,search,response,item,null,e,private,void,handle,response,final,int,response,slot,final,multi,search,response,item,item,responses,set,response,slot,item,if,response,counter,decrement,and,get,0,assert,requests,is,empty,finish,else,if,thread,thread,current,thread,thread,pool,generic,execute,execute,search,requests,responses,response,counter,listener,relative,start,time,else,execute,search,requests,responses,response,counter,listener,relative,start,time,private,void,finish,listener,on,response,new,multi,search,response,responses,to,array,new,multi,search,response,item,responses,length,build,took,in,millis,private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime);1529658035;Executes a single request from the queue of requests. When a request finishes, another request is taken from the queue. When a_request is executed, a permit is taken on the specified semaphore, and released as each request completes.__@param requests the queue of multi-search requests to execute_@param responses atomic array to hold the responses corresponding to each search request slot_@param responseCounter incremented on each response_@param listener the listener attached to the multi-search request;void executeSearch(_            final Queue<SearchRequestSlot> requests,_            final AtomicArray<MultiSearchResponse.Item> responses,_            final AtomicInteger responseCounter,_            final ActionListener<MultiSearchResponse> listener,_            final long relativeStartTime) {_        SearchRequestSlot request = requests.poll()__        if (request == null) {_            _            return__        }__        _        final Thread thread = Thread.currentThread()__        client.search(request.request, new ActionListener<SearchResponse>() {_            @Override_            public void onResponse(final SearchResponse searchResponse) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(searchResponse, null))__            }__            @Override_            public void onFailure(final Exception e) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(null, e))__            }__            private void handleResponse(final int responseSlot, final MultiSearchResponse.Item item) {_                responses.set(responseSlot, item)__                if (responseCounter.decrementAndGet() == 0) {_                    assert requests.isEmpty()__                    finish()__                } else {_                    if (thread == Thread.currentThread()) {_                        _                        threadPool.generic()_                                .execute(() -> executeSearch(requests, responses, responseCounter, listener, relativeStartTime))__                    } else {_                        _                        executeSearch(requests, responses, responseCounter, listener, relativeStartTime)__                    }_                }_            }__            private void finish() {_                listener.onResponse(new MultiSearchResponse(responses.toArray(new MultiSearchResponse.Item[responses.length()]),_                        buildTookInMillis()))__            }__            _            private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            }_        })__    };executes,a,single,request,from,the,queue,of,requests,when,a,request,finishes,another,request,is,taken,from,the,queue,when,a,request,is,executed,a,permit,is,taken,on,the,specified,semaphore,and,released,as,each,request,completes,param,requests,the,queue,of,multi,search,requests,to,execute,param,responses,atomic,array,to,hold,the,responses,corresponding,to,each,search,request,slot,param,response,counter,incremented,on,each,response,param,listener,the,listener,attached,to,the,multi,search,request;void,execute,search,final,queue,search,request,slot,requests,final,atomic,array,multi,search,response,item,responses,final,atomic,integer,response,counter,final,action,listener,multi,search,response,listener,final,long,relative,start,time,search,request,slot,request,requests,poll,if,request,null,return,final,thread,thread,thread,current,thread,client,search,request,request,new,action,listener,search,response,override,public,void,on,response,final,search,response,search,response,handle,response,request,response,slot,new,multi,search,response,item,search,response,null,override,public,void,on,failure,final,exception,e,handle,response,request,response,slot,new,multi,search,response,item,null,e,private,void,handle,response,final,int,response,slot,final,multi,search,response,item,item,responses,set,response,slot,item,if,response,counter,decrement,and,get,0,assert,requests,is,empty,finish,else,if,thread,thread,current,thread,thread,pool,generic,execute,execute,search,requests,responses,response,counter,listener,relative,start,time,else,execute,search,requests,responses,response,counter,listener,relative,start,time,private,void,finish,listener,on,response,new,multi,search,response,responses,to,array,new,multi,search,response,item,responses,length,build,took,in,millis,private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime);1529916082;Executes a single request from the queue of requests. When a request finishes, another request is taken from the queue. When a_request is executed, a permit is taken on the specified semaphore, and released as each request completes.__@param requests the queue of multi-search requests to execute_@param responses atomic array to hold the responses corresponding to each search request slot_@param responseCounter incremented on each response_@param listener the listener attached to the multi-search request;void executeSearch(_            final Queue<SearchRequestSlot> requests,_            final AtomicArray<MultiSearchResponse.Item> responses,_            final AtomicInteger responseCounter,_            final ActionListener<MultiSearchResponse> listener,_            final long relativeStartTime) {_        SearchRequestSlot request = requests.poll()__        if (request == null) {_            _            return__        }__        _        final Thread thread = Thread.currentThread()__        client.search(request.request, new ActionListener<SearchResponse>() {_            @Override_            public void onResponse(final SearchResponse searchResponse) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(searchResponse, null))__            }__            @Override_            public void onFailure(final Exception e) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(null, e))__            }__            private void handleResponse(final int responseSlot, final MultiSearchResponse.Item item) {_                responses.set(responseSlot, item)__                if (responseCounter.decrementAndGet() == 0) {_                    assert requests.isEmpty()__                    finish()__                } else {_                    if (thread == Thread.currentThread()) {_                        _                        threadPool.generic()_                                .execute(() -> executeSearch(requests, responses, responseCounter, listener, relativeStartTime))__                    } else {_                        _                        executeSearch(requests, responses, responseCounter, listener, relativeStartTime)__                    }_                }_            }__            private void finish() {_                listener.onResponse(new MultiSearchResponse(responses.toArray(new MultiSearchResponse.Item[responses.length()]),_                        buildTookInMillis()))__            }__            _            private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            }_        })__    };executes,a,single,request,from,the,queue,of,requests,when,a,request,finishes,another,request,is,taken,from,the,queue,when,a,request,is,executed,a,permit,is,taken,on,the,specified,semaphore,and,released,as,each,request,completes,param,requests,the,queue,of,multi,search,requests,to,execute,param,responses,atomic,array,to,hold,the,responses,corresponding,to,each,search,request,slot,param,response,counter,incremented,on,each,response,param,listener,the,listener,attached,to,the,multi,search,request;void,execute,search,final,queue,search,request,slot,requests,final,atomic,array,multi,search,response,item,responses,final,atomic,integer,response,counter,final,action,listener,multi,search,response,listener,final,long,relative,start,time,search,request,slot,request,requests,poll,if,request,null,return,final,thread,thread,thread,current,thread,client,search,request,request,new,action,listener,search,response,override,public,void,on,response,final,search,response,search,response,handle,response,request,response,slot,new,multi,search,response,item,search,response,null,override,public,void,on,failure,final,exception,e,handle,response,request,response,slot,new,multi,search,response,item,null,e,private,void,handle,response,final,int,response,slot,final,multi,search,response,item,item,responses,set,response,slot,item,if,response,counter,decrement,and,get,0,assert,requests,is,empty,finish,else,if,thread,thread,current,thread,thread,pool,generic,execute,execute,search,requests,responses,response,counter,listener,relative,start,time,else,execute,search,requests,responses,response,counter,listener,relative,start,time,private,void,finish,listener,on,response,new,multi,search,response,responses,to,array,new,multi,search,response,item,responses,length,build,took,in,millis,private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
TransportMultiSearchAction -> void executeSearch(             final Queue<SearchRequestSlot> requests,             final AtomicArray<MultiSearchResponse.Item> responses,             final AtomicInteger responseCounter,             final ActionListener<MultiSearchResponse> listener,             final long relativeStartTime);1541419698;Executes a single request from the queue of requests. When a request finishes, another request is taken from the queue. When a_request is executed, a permit is taken on the specified semaphore, and released as each request completes.__@param requests the queue of multi-search requests to execute_@param responses atomic array to hold the responses corresponding to each search request slot_@param responseCounter incremented on each response_@param listener the listener attached to the multi-search request;void executeSearch(_            final Queue<SearchRequestSlot> requests,_            final AtomicArray<MultiSearchResponse.Item> responses,_            final AtomicInteger responseCounter,_            final ActionListener<MultiSearchResponse> listener,_            final long relativeStartTime) {_        SearchRequestSlot request = requests.poll()__        if (request == null) {_            _            return__        }__        _        final Thread thread = Thread.currentThread()__        client.search(request.request, new ActionListener<SearchResponse>() {_            @Override_            public void onResponse(final SearchResponse searchResponse) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(searchResponse, null))__            }__            @Override_            public void onFailure(final Exception e) {_                handleResponse(request.responseSlot, new MultiSearchResponse.Item(null, e))__            }__            private void handleResponse(final int responseSlot, final MultiSearchResponse.Item item) {_                responses.set(responseSlot, item)__                if (responseCounter.decrementAndGet() == 0) {_                    assert requests.isEmpty()__                    finish()__                } else {_                    if (thread == Thread.currentThread()) {_                        _                        threadPool.generic()_                                .execute(() -> executeSearch(requests, responses, responseCounter, listener, relativeStartTime))__                    } else {_                        _                        executeSearch(requests, responses, responseCounter, listener, relativeStartTime)__                    }_                }_            }__            private void finish() {_                listener.onResponse(new MultiSearchResponse(responses.toArray(new MultiSearchResponse.Item[responses.length()]),_                        buildTookInMillis()))__            }__            _            private long buildTookInMillis() {_                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime)__            }_        })__    };executes,a,single,request,from,the,queue,of,requests,when,a,request,finishes,another,request,is,taken,from,the,queue,when,a,request,is,executed,a,permit,is,taken,on,the,specified,semaphore,and,released,as,each,request,completes,param,requests,the,queue,of,multi,search,requests,to,execute,param,responses,atomic,array,to,hold,the,responses,corresponding,to,each,search,request,slot,param,response,counter,incremented,on,each,response,param,listener,the,listener,attached,to,the,multi,search,request;void,execute,search,final,queue,search,request,slot,requests,final,atomic,array,multi,search,response,item,responses,final,atomic,integer,response,counter,final,action,listener,multi,search,response,listener,final,long,relative,start,time,search,request,slot,request,requests,poll,if,request,null,return,final,thread,thread,thread,current,thread,client,search,request,request,new,action,listener,search,response,override,public,void,on,response,final,search,response,search,response,handle,response,request,response,slot,new,multi,search,response,item,search,response,null,override,public,void,on,failure,final,exception,e,handle,response,request,response,slot,new,multi,search,response,item,null,e,private,void,handle,response,final,int,response,slot,final,multi,search,response,item,item,responses,set,response,slot,item,if,response,counter,decrement,and,get,0,assert,requests,is,empty,finish,else,if,thread,thread,current,thread,thread,pool,generic,execute,execute,search,requests,responses,response,counter,listener,relative,start,time,else,execute,search,requests,responses,response,counter,listener,relative,start,time,private,void,finish,listener,on,response,new,multi,search,response,responses,to,array,new,multi,search,response,item,responses,length,build,took,in,millis,private,long,build,took,in,millis,return,time,unit,nanoseconds,to,millis,relative,time,provider,get,as,long,relative,start,time
