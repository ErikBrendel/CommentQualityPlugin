commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected BindingImpl<T> getBinding() {     return binding. }
false;protected;1;5;;protected BindingImpl<T> setBinding(BindingImpl<T> binding) {     this.binding = binding.     elements.set(position, binding).     return binding. }
true;protected;1;6;/**  * Sets the binding to a copy with the specified annotation on the bound key  */ ;/**  * Sets the binding to a copy with the specified annotation on the bound key  */ protected BindingImpl<T> annotatedWithInternal(Class<? extends Annotation> annotationType) {     Objects.requireNonNull(annotationType, "annotationType").     checkNotAnnotated().     return setBinding(binding.withKey(Key.get(this.binding.getKey().getTypeLiteral(), annotationType))). }
true;protected;1;6;/**  * Sets the binding to a copy with the specified annotation on the bound key  */ ;/**  * Sets the binding to a copy with the specified annotation on the bound key  */ protected BindingImpl<T> annotatedWithInternal(Annotation annotation) {     Objects.requireNonNull(annotation, "annotation").     checkNotAnnotated().     return setBinding(binding.withKey(Key.get(this.binding.getKey().getTypeLiteral(), annotation))). }
false;public;1;5;;public void in(final Class<? extends Annotation> scopeAnnotation) {     Objects.requireNonNull(scopeAnnotation, "scopeAnnotation").     checkNotScoped().     setBinding(getBinding().withScoping(Scoping.forAnnotation(scopeAnnotation))). }
false;public;1;5;;public void in(final Scope scope) {     Objects.requireNonNull(scope, "scope").     checkNotScoped().     setBinding(getBinding().withScoping(Scoping.forInstance(scope))). }
false;public;0;4;;public void asEagerSingleton() {     checkNotScoped().     setBinding(getBinding().withScoping(Scoping.EAGER_SINGLETON)). }
false;protected;0;3;;protected boolean keyTypeIsSet() {     return !Void.class.equals(binding.getKey().getTypeLiteral().getType()). }
false;protected;0;5;;protected void checkNotTargetted() {     if (!(binding instanceof UntargettedBindingImpl)) {         binder.addError(IMPLEMENTATION_ALREADY_SET).     } }
false;protected;0;5;;protected void checkNotAnnotated() {     if (binding.getKey().getAnnotationType() != null) {         binder.addError(ANNOTATION_ALREADY_SPECIFIED).     } }
false;protected;0;11;;protected void checkNotScoped() {     // Scoping isn't allowed when we have only one instance.     if (binding instanceof InstanceBinding) {         binder.addError(SINGLE_INSTANCE_AND_SCOPE).         return.     }     if (binding.getScoping().isExplicitlyScoped()) {         binder.addError(SCOPE_ALREADY_SET).     } }
