commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "cluster_update_settings_action". }
false;public;2;19;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     final ClusterUpdateSettingsRequest clusterUpdateSettingsRequest = Requests.clusterUpdateSettingsRequest().     clusterUpdateSettingsRequest.timeout(request.paramAsTime("timeout", clusterUpdateSettingsRequest.timeout())).     clusterUpdateSettingsRequest.masterNodeTimeout(request.paramAsTime("master_timeout", clusterUpdateSettingsRequest.masterNodeTimeout())).     Map<String, Object> source.     try (XContentParser parser = request.contentParser()) {         source = parser.map().     }     if (source.containsKey(TRANSIENT)) {         clusterUpdateSettingsRequest.transientSettings((Map) source.get(TRANSIENT)).     }     if (source.containsKey(PERSISTENT)) {         clusterUpdateSettingsRequest.persistentSettings((Map) source.get(PERSISTENT)).     }     return channel -> client.admin().cluster().updateSettings(clusterUpdateSettingsRequest, new RestToXContentListener<>(channel)). }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return Settings.FORMAT_PARAMS. }
false;public;0;4;;@Override public boolean canTripCircuitBreaker() {     return false. }
