commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(snapshot).     out.writeString(repository).     out.writeStringArray(indices).     indicesOptions.writeIndicesOptions(out).     writeSettingsToStream(settings, out).     out.writeBoolean(includeGlobalState).     out.writeBoolean(waitForCompletion).     out.writeBoolean(partial). }
false;public;0;27;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (snapshot == null) {         validationException = addValidationError("snapshot is missing", validationException).     }     if (repository == null) {         validationException = addValidationError("repository is missing", validationException).     }     if (indices == null) {         validationException = addValidationError("indices is null", validationException).     } else {         for (String index : indices) {             if (index == null) {                 validationException = addValidationError("index is null", validationException).                 break.             }         }     }     if (indicesOptions == null) {         validationException = addValidationError("indicesOptions is null", validationException).     }     if (settings == null) {         validationException = addValidationError("settings is null", validationException).     }     return validationException. }
true;public;1;4;/**  * Sets the snapshot name  *  * @param snapshot snapshot name  */ ;/**  * Sets the snapshot name  *  * @param snapshot snapshot name  */ public CreateSnapshotRequest snapshot(String snapshot) {     this.snapshot = snapshot.     return this. }
true;public;0;3;/**  * The snapshot name  *  * @return snapshot name  */ ;/**  * The snapshot name  *  * @return snapshot name  */ public String snapshot() {     return this.snapshot. }
true;public;1;4;/**  * Sets repository name  *  * @param repository name  * @return this request  */ ;/**  * Sets repository name  *  * @param repository name  * @return this request  */ public CreateSnapshotRequest repository(String repository) {     this.repository = repository.     return this. }
true;public;0;3;/**  * Returns repository name  *  * @return repository name  */ ;/**  * Returns repository name  *  * @return repository name  */ public String repository() {     return this.repository. }
true;public;1;5;/**  * Sets a list of indices that should be included into the snapshot  * <p>  * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with  * prefix "test" except index "test42". Aliases are supported. An empty list or {"_all"} will snapshot all open  * indices in the cluster.  *  * @return this request  */ ;/**  * Sets a list of indices that should be included into the snapshot  * <p>  * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with  * prefix "test" except index "test42". Aliases are supported. An empty list or {"_all"} will snapshot all open  * indices in the cluster.  *  * @return this request  */ @Override public CreateSnapshotRequest indices(String... indices) {     this.indices = indices.     return this. }
true;public;1;4;/**  * Sets a list of indices that should be included into the snapshot  * <p>  * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with  * prefix "test" except index "test42". Aliases are supported. An empty list or {"_all"} will snapshot all open  * indices in the cluster.  *  * @return this request  */ ;/**  * Sets a list of indices that should be included into the snapshot  * <p>  * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with  * prefix "test" except index "test42". Aliases are supported. An empty list or {"_all"} will snapshot all open  * indices in the cluster.  *  * @return this request  */ public CreateSnapshotRequest indices(List<String> indices) {     this.indices = indices.toArray(new String[indices.size()]).     return this. }
true;public;0;4;/**  * Returns a list of indices that should be included into the snapshot  *  * @return list of indices  */ ;/**  * Returns a list of indices that should be included into the snapshot  *  * @return list of indices  */ @Override public String[] indices() {     return indices. }
true;public;0;4;/**  * Specifies the indices options. Like what type of requested indices to ignore. For example indices that don't exist.  *  * @return the desired behaviour regarding indices options  */ ;/**  * Specifies the indices options. Like what type of requested indices to ignore. For example indices that don't exist.  *  * @return the desired behaviour regarding indices options  */ @Override public IndicesOptions indicesOptions() {     return indicesOptions. }
true;public;1;4;/**  * Specifies the indices options. Like what type of requested indices to ignore. For example indices that don't exist.  *  * @param indicesOptions the desired behaviour regarding indices options  * @return this request  */ ;/**  * Specifies the indices options. Like what type of requested indices to ignore. For example indices that don't exist.  *  * @param indicesOptions the desired behaviour regarding indices options  * @return this request  */ public CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions) {     this.indicesOptions = indicesOptions.     return this. }
true;public;0;3;/**  * Returns true if indices with unavailable shards should be be partially snapshotted.  *  * @return the desired behaviour regarding indices options  */ ;/**  * Returns true if indices with unavailable shards should be be partially snapshotted.  *  * @return the desired behaviour regarding indices options  */ public boolean partial() {     return partial. }
true;public;1;4;/**  * Set to true to allow indices with unavailable shards to be partially snapshotted.  *  * @param partial true if indices with unavailable shards should be be partially snapshotted.  * @return this request  */ ;/**  * Set to true to allow indices with unavailable shards to be partially snapshotted.  *  * @param partial true if indices with unavailable shards should be be partially snapshotted.  * @return this request  */ public CreateSnapshotRequest partial(boolean partial) {     this.partial = partial.     return this. }
true;public;1;4;/**  * If set to true the operation should wait for the snapshot completion before returning.  *  * By default, the operation will return as soon as snapshot is initialized. It can be changed by setting this  * flag to true.  *  * @param waitForCompletion true if operation should wait for the snapshot completion  * @return this request  */ ;/**  * If set to true the operation should wait for the snapshot completion before returning.  *  * By default, the operation will return as soon as snapshot is initialized. It can be changed by setting this  * flag to true.  *  * @param waitForCompletion true if operation should wait for the snapshot completion  * @return this request  */ public CreateSnapshotRequest waitForCompletion(boolean waitForCompletion) {     this.waitForCompletion = waitForCompletion.     return this. }
true;public;0;3;/**  * Returns true if the request should wait for the snapshot completion before returning  *  * @return true if the request should wait for completion  */ ;/**  * Returns true if the request should wait for the snapshot completion before returning  *  * @return true if the request should wait for completion  */ public boolean waitForCompletion() {     return waitForCompletion. }
true;public;1;4;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this request  */ ;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this request  */ public CreateSnapshotRequest settings(Settings settings) {     this.settings = settings.     return this. }
true;public;1;4;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this request  */ ;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this request  */ public CreateSnapshotRequest settings(Settings.Builder settings) {     this.settings = settings.build().     return this. }
true;public;2;4;/**  * Sets repository-specific snapshot settings in JSON or YAML format  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @param xContentType the content type of the source  * @return this request  */ ;/**  * Sets repository-specific snapshot settings in JSON or YAML format  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @param xContentType the content type of the source  * @return this request  */ public CreateSnapshotRequest settings(String source, XContentType xContentType) {     this.settings = Settings.builder().loadFromSource(source, xContentType).build().     return this. }
true;public;1;10;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @return this request  */ ;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @return this request  */ public CreateSnapshotRequest settings(Map<String, Object> source) {     try {         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).         builder.map(source).         settings(Strings.toString(builder), builder.contentType()).     } catch (IOException e) {         throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e).     }     return this. }
true;public;0;3;/**  * Returns repository-specific snapshot settings  *  * @return repository-specific snapshot settings  */ ;/**  * Returns repository-specific snapshot settings  *  * @return repository-specific snapshot settings  */ public Settings settings() {     return this.settings. }
true;public;1;4;/**  * Set to true if global state should be stored as part of the snapshot  *  * @param includeGlobalState true if global state should be stored  * @return this request  */ ;/**  * Set to true if global state should be stored as part of the snapshot  *  * @param includeGlobalState true if global state should be stored  * @return this request  */ public CreateSnapshotRequest includeGlobalState(boolean includeGlobalState) {     this.includeGlobalState = includeGlobalState.     return this. }
true;public;0;3;/**  * Returns true if global state should be stored as part of the snapshot  *  * @return true if global state should be stored as part of the snapshot  */ ;/**  * Returns true if global state should be stored as part of the snapshot  *  * @return true if global state should be stored as part of the snapshot  */ public boolean includeGlobalState() {     return includeGlobalState. }
true;public;1;26;/**  * Parses snapshot definition.  *  * @param source snapshot definition  * @return this request  */ ;/**  * Parses snapshot definition.  *  * @param source snapshot definition  * @return this request  */ @SuppressWarnings("unchecked") public CreateSnapshotRequest source(Map<String, Object> source) {     for (Map.Entry<String, Object> entry : source.entrySet()) {         String name = entry.getKey().         if (name.equals("indices")) {             if (entry.getValue() instanceof String) {                 indices(Strings.splitStringByCommaToArray((String) entry.getValue())).             } else if (entry.getValue() instanceof ArrayList) {                 indices((ArrayList<String>) entry.getValue()).             } else {                 throw new IllegalArgumentException("malformed indices section, should be an array of strings").             }         } else if (name.equals("partial")) {             partial(nodeBooleanValue(entry.getValue(), "partial")).         } else if (name.equals("settings")) {             if (!(entry.getValue() instanceof Map)) {                 throw new IllegalArgumentException("malformed settings section, should indices an inner object").             }             settings((Map<String, Object>) entry.getValue()).         } else if (name.equals("include_global_state")) {             includeGlobalState = nodeBooleanValue(entry.getValue(), "include_global_state").         }     }     indicesOptions(IndicesOptions.fromMap(source, indicesOptions)).     return this. }
false;public;2;25;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("repository", repository).     builder.field("snapshot", snapshot).     builder.startArray("indices").     for (String index : indices) {         builder.value(index).     }     builder.endArray().     builder.field("partial", partial).     if (settings != null) {         builder.startObject("settings").         if (settings.isEmpty() == false) {             settings.toXContent(builder, params).         }         builder.endObject().     }     builder.field("include_global_state", includeGlobalState).     if (indicesOptions != null) {         indicesOptions.toXContent(builder, params).     }     builder.endObject().     return builder. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public String getDescription() {     return "snapshot [" + repository + ":" + snapshot + "]". }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     CreateSnapshotRequest that = (CreateSnapshotRequest) o.     return partial == that.partial && includeGlobalState == that.includeGlobalState && waitForCompletion == that.waitForCompletion && Objects.equals(snapshot, that.snapshot) && Objects.equals(repository, that.repository) && Arrays.equals(indices, that.indices) && Objects.equals(indicesOptions, that.indicesOptions) && Objects.equals(settings, that.settings) && Objects.equals(masterNodeTimeout, that.masterNodeTimeout). }
false;public;0;6;;@Override public int hashCode() {     int result = Objects.hash(snapshot, repository, indicesOptions, partial, settings, includeGlobalState, waitForCompletion).     result = 31 * result + Arrays.hashCode(indices).     return result. }
false;public;0;14;;@Override public String toString() {     return "CreateSnapshotRequest{" + "snapshot='" + snapshot + '\'' + ", repository='" + repository + '\'' + ", indices=" + (indices == null ? null : Arrays.asList(indices)) + ", indicesOptions=" + indicesOptions + ", partial=" + partial + ", settings=" + settings + ", includeGlobalState=" + includeGlobalState + ", waitForCompletion=" + waitForCompletion + ", masterNodeTimeout=" + masterNodeTimeout + '}'. }
