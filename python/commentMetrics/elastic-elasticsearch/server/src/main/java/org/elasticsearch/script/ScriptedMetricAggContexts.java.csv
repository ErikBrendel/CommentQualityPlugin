commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Map<String, Object> getParams() {     return params. }
false;public;0;3;;public Object getState() {     return state. }
false;public,abstract;0;1;;public abstract void execute().
false;;2;1;;InitScript newInstance(Map<String, Object> params, Map<String, Object> state).
false;public;0;3;;public Map<String, Object> getParams() {     return params. }
false;public;0;3;;public Map<String, Object> getState() {     return state. }
true;public;0;3;// Painless scripts. ;// Return the doc as a map (instead of LeafDocLookup) in order to abide by type whitelisting rules for // Painless scripts. public Map<String, ScriptDocValues<?>> getDoc() {     return leafLookup == null ? null : leafLookup.doc(). }
false;public;1;5;;public void setDocument(int docId) {     if (leafLookup != null) {         leafLookup.setDocument(docId).     } }
false;public;1;3;;public void setScorer(Scorable scorer) {     this.scorer = scorer. }
true;public;0;11;// get_score() is named this way so that it's picked up by Painless as '_score' ;// get_score() is named this way so that it's picked up by Painless as '_score' public double get_score() {     if (scorer == null) {         return 0.0.     }     try {         return scorer.score().     } catch (IOException e) {         throw new ElasticsearchException("Couldn't look up score", e).     } }
false;public,abstract;0;1;;public abstract void execute().
false;;1;1;;MapScript newInstance(LeafReaderContext ctx).
false;;3;1;;LeafFactory newFactory(Map<String, Object> params, Map<String, Object> state, SearchLookup lookup).
false;public;0;3;;public Map<String, Object> getParams() {     return params. }
false;public;0;3;;public Map<String, Object> getState() {     return state. }
false;public,abstract;0;1;;public abstract Object execute().
false;;2;1;;CombineScript newInstance(Map<String, Object> params, Map<String, Object> state).
false;public;0;3;;public Map<String, Object> getParams() {     return params. }
false;public;0;3;;public List<Object> getStates() {     return states. }
false;public,abstract;0;1;;public abstract Object execute().
false;;2;1;;ReduceScript newInstance(Map<String, Object> params, List<Object> states).
