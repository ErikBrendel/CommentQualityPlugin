commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     if (out.getVersion().before(Version.V_6_2_0)) {         out.writeVLong(getBytes()).     } else {         out.writeZLong(size).         unit.writeTo(out).     } }
true;;0;3;// For testing ;// For testing long getSize() {     return size. }
true;;0;3;// For testing ;// For testing ByteSizeUnit getUnit() {     return unit. }
false;public;0;8;;@Deprecated public int bytesAsInt() {     long bytes = getBytes().     if (bytes > Integer.MAX_VALUE) {         throw new IllegalArgumentException("size [" + toString() + "] is bigger than max int").     }     return (int) bytes. }
false;public;0;3;;public long getBytes() {     return unit.toBytes(size). }
false;public;0;3;;public long getKb() {     return unit.toKB(size). }
false;public;0;3;;public long getMb() {     return unit.toMB(size). }
false;public;0;3;;public long getGb() {     return unit.toGB(size). }
false;public;0;3;;public long getTb() {     return unit.toTB(size). }
false;public;0;3;;public long getPb() {     return unit.toPB(size). }
false;public;0;3;;public double getKbFrac() {     return ((double) getBytes()) / ByteSizeUnit.C1. }
false;public;0;3;;public double getMbFrac() {     return ((double) getBytes()) / ByteSizeUnit.C2. }
false;public;0;3;;public double getGbFrac() {     return ((double) getBytes()) / ByteSizeUnit.C3. }
false;public;0;3;;public double getTbFrac() {     return ((double) getBytes()) / ByteSizeUnit.C4. }
false;public;0;3;;public double getPbFrac() {     return ((double) getBytes()) / ByteSizeUnit.C5. }
true;public;0;6;/**  * @return a string representation of this value which is guaranteed to be  *         able to be parsed using  *         {@link #parseBytesSizeValue(String, ByteSizeValue, String)}.  *         Unlike {@link #toString()} this method will not output fractional  *         or rounded values so this method should be preferred when  *         serialising the value to JSON.  */ ;/**  * @return a string representation of this value which is guaranteed to be  *         able to be parsed using  *         {@link #parseBytesSizeValue(String, ByteSizeValue, String)}.  *         Unlike {@link #toString()} this method will not output fractional  *         or rounded values so this method should be preferred when  *         serialising the value to JSON.  */ public String getStringRep() {     if (size <= 0) {         return String.valueOf(size).     }     return size + unit.getSuffix(). }
false;public;0;23;;@Override public String toString() {     long bytes = getBytes().     double value = bytes.     String suffix = ByteSizeUnit.BYTES.getSuffix().     if (bytes >= ByteSizeUnit.C5) {         value = getPbFrac().         suffix = ByteSizeUnit.PB.getSuffix().     } else if (bytes >= ByteSizeUnit.C4) {         value = getTbFrac().         suffix = ByteSizeUnit.TB.getSuffix().     } else if (bytes >= ByteSizeUnit.C3) {         value = getGbFrac().         suffix = ByteSizeUnit.GB.getSuffix().     } else if (bytes >= ByteSizeUnit.C2) {         value = getMbFrac().         suffix = ByteSizeUnit.MB.getSuffix().     } else if (bytes >= ByteSizeUnit.C1) {         value = getKbFrac().         suffix = ByteSizeUnit.KB.getSuffix().     }     return Strings.format1Decimals(value, suffix). }
false;public,static;2;3;;public static ByteSizeValue parseBytesSizeValue(String sValue, String settingName) throws ElasticsearchParseException {     return parseBytesSizeValue(sValue, null, settingName). }
false;public,static;3;42;;public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue defaultValue, String settingName) throws ElasticsearchParseException {     settingName = Objects.requireNonNull(settingName).     if (sValue == null) {         return defaultValue.     }     String lowerSValue = sValue.toLowerCase(Locale.ROOT).trim().     if (lowerSValue.endsWith("k")) {         return parse(sValue, lowerSValue, "k", ByteSizeUnit.KB, settingName).     } else if (lowerSValue.endsWith("kb")) {         return parse(sValue, lowerSValue, "kb", ByteSizeUnit.KB, settingName).     } else if (lowerSValue.endsWith("m")) {         return parse(sValue, lowerSValue, "m", ByteSizeUnit.MB, settingName).     } else if (lowerSValue.endsWith("mb")) {         return parse(sValue, lowerSValue, "mb", ByteSizeUnit.MB, settingName).     } else if (lowerSValue.endsWith("g")) {         return parse(sValue, lowerSValue, "g", ByteSizeUnit.GB, settingName).     } else if (lowerSValue.endsWith("gb")) {         return parse(sValue, lowerSValue, "gb", ByteSizeUnit.GB, settingName).     } else if (lowerSValue.endsWith("t")) {         return parse(sValue, lowerSValue, "t", ByteSizeUnit.TB, settingName).     } else if (lowerSValue.endsWith("tb")) {         return parse(sValue, lowerSValue, "tb", ByteSizeUnit.TB, settingName).     } else if (lowerSValue.endsWith("p")) {         return parse(sValue, lowerSValue, "p", ByteSizeUnit.PB, settingName).     } else if (lowerSValue.endsWith("pb")) {         return parse(sValue, lowerSValue, "pb", ByteSizeUnit.PB, settingName).     } else if (lowerSValue.endsWith("b")) {         return new ByteSizeValue(Long.parseLong(lowerSValue.substring(0, lowerSValue.length() - 1).trim()), ByteSizeUnit.BYTES).     } else if (lowerSValue.equals("-1")) {         // Allow this special value to be unit-less:         return new ByteSizeValue(-1, ByteSizeUnit.BYTES).     } else if (lowerSValue.equals("0")) {         // Allow this special value to be unit-less:         return new ByteSizeValue(0, ByteSizeUnit.BYTES).     } else {         // Missing units:         throw new ElasticsearchParseException("failed to parse setting [{}] with value [{}] as a size in bytes: unit is missing or unrecognized", settingName, sValue).     } }
false;private,static;5;22;;private static ByteSizeValue parse(final String initialInput, final String normalized, final String suffix, ByteSizeUnit unit, final String settingName) {     final String s = normalized.substring(0, normalized.length() - suffix.length()).trim().     try {         try {             return new ByteSizeValue(Long.parseLong(s), unit).         } catch (final NumberFormatException e) {             try {                 final double doubleValue = Double.parseDouble(s).                 deprecationLogger.deprecated("Fractional bytes values are deprecated. Use non-fractional bytes values instead: [{}] found for setting [{}]", initialInput, settingName).                 return new ByteSizeValue((long) (doubleValue * unit.toBytes(1))).             } catch (final NumberFormatException ignored) {                 throw new ElasticsearchParseException("failed to parse [{}]", e, initialInput).             }         }     } catch (IllegalArgumentException e) {         throw new ElasticsearchParseException("failed to parse setting [{}] with value [{}] as a size in bytes", e, settingName, initialInput).     } }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     return compareTo((ByteSizeValue) o) == 0. }
false;public;0;4;;@Override public int hashCode() {     return Long.hashCode(size * unit.toBytes(1)). }
false;public;1;6;;@Override public int compareTo(ByteSizeValue other) {     long thisValue = size * unit.toBytes(1).     long otherValue = other.size * other.unit.toBytes(1).     return Long.compare(thisValue, otherValue). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.value(toString()). }
