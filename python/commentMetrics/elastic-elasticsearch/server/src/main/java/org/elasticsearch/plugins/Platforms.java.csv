commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;7;/**  * The path to the native controller for a plugin with native components.  */ ;/**  * The path to the native controller for a plugin with native components.  */ public static Path nativeControllerPath(Path plugin) {     return plugin.resolve("platform").resolve(PLATFORM_NAME).resolve("bin").resolve(PROGRAM_NAME). }
true;public,static;2;23;/**  * Return the platform name based on the OS name and  * - darwin-x86_64  * - linux-x86-64  * - windows-x86_64  * For *nix platforms this is more-or-less `uname -s`-`uname -m` converted to lower case.  * However, for consistency between different operating systems on the same architecture  * "amd64" is replaced with "x86_64" and "i386" with "x86".  * For Windows it's "windows-" followed by either "x86" or "x86_64".  */ ;/**  * Return the platform name based on the OS name and  * - darwin-x86_64  * - linux-x86-64  * - windows-x86_64  * For *nix platforms this is more-or-less `uname -s`-`uname -m` converted to lower case.  * However, for consistency between different operating systems on the same architecture  * "amd64" is replaced with "x86_64" and "i386" with "x86".  * For Windows it's "windows-" followed by either "x86" or "x86_64".  */ public static String platformName(final String osName, final String osArch) {     final String lowerCaseOs = osName.toLowerCase(Locale.ROOT).     final String normalizedOs.     if (lowerCaseOs.startsWith("windows")) {         normalizedOs = "windows".     } else if (lowerCaseOs.equals("mac os x")) {         normalizedOs = "darwin".     } else {         normalizedOs = lowerCaseOs.     }     final String lowerCaseArch = osArch.toLowerCase(Locale.ROOT).     final String normalizedArch.     if (lowerCaseArch.equals("amd64")) {         normalizedArch = "x86_64".     } else if (lowerCaseArch.equals("i386")) {         normalizedArch = "x86".     } else {         normalizedArch = lowerCaseArch.     }     return normalizedOs + "-" + normalizedArch. }
