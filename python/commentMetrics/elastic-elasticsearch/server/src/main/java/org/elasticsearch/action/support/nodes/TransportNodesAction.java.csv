# id;timestamp;commentText;codeText;commentWords;codeWords
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1524684173;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1529487105;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1529658035;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1529687475;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1529916082;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1532685069;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1540583181;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1541419698;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);1544632755;Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.__@param request The associated request._@param nodesResponses All node-level responses_@return Never {@code null}._@throws NullPointerException if {@code nodesResponses} is {@code null}_@see #newResponse(BaseNodesRequest, List, List);protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {_        final List<NodeResponse> responses = new ArrayList<>()__        final List<FailedNodeException> failures = new ArrayList<>()___        for (int i = 0_ i < nodesResponses.length()_ ++i) {_            Object response = nodesResponses.get(i)___            if (response instanceof FailedNodeException) {_                failures.add((FailedNodeException)response)__            } else {_                responses.add(nodeResponseClass.cast(response))__            }_        }__        return newResponse(request, responses, failures)__    };map,the,responses,into,code,node,response,class,responses,and,link,failed,node,exception,s,param,request,the,associated,request,param,nodes,responses,all,node,level,responses,return,never,code,null,throws,null,pointer,exception,if,code,nodes,responses,is,code,null,see,new,response,base,nodes,request,list,list;protected,nodes,response,new,response,nodes,request,request,atomic,reference,array,nodes,responses,final,list,node,response,responses,new,array,list,final,list,failed,node,exception,failures,new,array,list,for,int,i,0,i,nodes,responses,length,i,object,response,nodes,responses,get,i,if,response,instanceof,failed,node,exception,failures,add,failed,node,exception,response,else,responses,add,node,response,class,cast,response,return,new,response,request,responses,failures
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1524684173;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1529487105;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1529658035;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1529687475;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1529916082;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1532685069;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1540583181;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1541419698;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected void resolveRequest(NodesRequest request, ClusterState clusterState);1544632755;resolve node ids to concrete nodes of the incoming request;protected void resolveRequest(NodesRequest request, ClusterState clusterState) {_        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set"__        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds())__        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new))__    };resolve,node,ids,to,concrete,nodes,of,the,incoming,request;protected,void,resolve,request,nodes,request,request,cluster,state,cluster,state,assert,request,concrete,nodes,null,request,concrete,nodes,shouldn,t,be,set,string,nodes,ids,cluster,state,nodes,resolve,nodes,request,nodes,ids,request,set,concrete,nodes,arrays,stream,nodes,ids,map,cluster,state,nodes,get,to,array,discovery,node,new
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1524684173;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1529487105;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1529658035;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1529687475;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1529916082;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1532685069;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1540583181;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1541419698;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
TransportNodesAction -> protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;1544632755;Create a new {@link NodesResponse} (multi-node response).__@param request The associated request._@param responses All successful node-level responses._@param failures All node-level failures._@return Never {@code null}._@throws NullPointerException if any parameter is {@code null}.;protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures)_;create,a,new,link,nodes,response,multi,node,response,param,request,the,associated,request,param,responses,all,successful,node,level,responses,param,failures,all,node,level,failures,return,never,code,null,throws,null,pointer,exception,if,any,parameter,is,code,null;protected,abstract,nodes,response,new,response,nodes,request,request,list,node,response,responses,list,failed,node,exception,failures
