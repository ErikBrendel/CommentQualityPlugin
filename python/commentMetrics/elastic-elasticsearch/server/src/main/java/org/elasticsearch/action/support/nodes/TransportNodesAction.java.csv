commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;4;;@Override protected void doExecute(Task task, NodesRequest request, ActionListener<NodesResponse> listener) {     new AsyncAction(task, request, listener).start(). }
true;protected;2;16;/**  * Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.  *  * @param request The associated request.  * @param nodesResponses All node-level responses  * @return Never {@code null}.  * @throws NullPointerException if {@code nodesResponses} is {@code null}  * @see #newResponse(BaseNodesRequest, List, List)  */ ;/**  * Map the responses into {@code nodeResponseClass} responses and {@link FailedNodeException}s.  *  * @param request The associated request.  * @param nodesResponses All node-level responses  * @return Never {@code null}.  * @throws NullPointerException if {@code nodesResponses} is {@code null}  * @see #newResponse(BaseNodesRequest, List, List)  */ protected NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses) {     final List<NodeResponse> responses = new ArrayList<>().     final List<FailedNodeException> failures = new ArrayList<>().     for (int i = 0. i < nodesResponses.length(). ++i) {         Object response = nodesResponses.get(i).         if (response instanceof FailedNodeException) {             failures.add((FailedNodeException) response).         } else {             responses.add(nodeResponseClass.cast(response)).         }     }     return newResponse(request, responses, failures). }
true;protected,abstract;3;1;/**  * Create a new {@link NodesResponse} (multi-node response).  *  * @param request The associated request.  * @param responses All successful node-level responses.  * @param failures All node-level failures.  * @return Never {@code null}.  * @throws NullPointerException if any parameter is {@code null}.  */ ;/**  * Create a new {@link NodesResponse} (multi-node response).  *  * @param request The associated request.  * @param responses All successful node-level responses.  * @param failures All node-level failures.  * @return Never {@code null}.  * @throws NullPointerException if any parameter is {@code null}.  */ protected abstract NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures).
false;protected,abstract;2;1;;protected abstract NodeRequest newNodeRequest(String nodeId, NodesRequest request).
false;protected,abstract;0;1;;protected abstract NodeResponse newNodeResponse().
false;protected,abstract;1;1;;protected abstract NodeResponse nodeOperation(NodeRequest request).
false;protected;2;3;;protected NodeResponse nodeOperation(NodeRequest request, Task task) {     return nodeOperation(request). }
true;protected;2;5;/**  * resolve node ids to concrete nodes of the incoming request  */ ;/**  * resolve node ids to concrete nodes of the incoming request  */ protected void resolveRequest(NodesRequest request, ClusterState clusterState) {     assert request.concreteNodes() == null : "request concreteNodes shouldn't be set".     String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds()).     request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new)). }
false;public;1;6;;@Override public NodeResponse read(StreamInput in) throws IOException {     NodeResponse nodeResponse = newNodeResponse().     nodeResponse.readFrom(in).     return nodeResponse. }
false;public;1;4;;@Override public void handleResponse(NodeResponse response) {     onOperation(idx, response). }
false;public;1;4;;@Override public void handleException(TransportException exp) {     onFailure(idx, node.getId(), exp). }
false;public;0;4;;@Override public String executor() {     return ThreadPool.Names.SAME. }
false;;0;50;;void start() {     final DiscoveryNode[] nodes = request.concreteNodes().     if (nodes.length == 0) {         // nothing to notify         threadPool.generic().execute(() -> listener.onResponse(newResponse(request, responses))).         return.     }     TransportRequestOptions.Builder builder = TransportRequestOptions.builder().     if (request.timeout() != null) {         builder.withTimeout(request.timeout()).     }     for (int i = 0. i < nodes.length. i++) {         final int idx = i.         final DiscoveryNode node = nodes[i].         final String nodeId = node.getId().         try {             TransportRequest nodeRequest = newNodeRequest(nodeId, request).             if (task != null) {                 nodeRequest.setParentTask(clusterService.localNode().getId(), task.getId()).             }             transportService.sendRequest(node, transportNodeAction, nodeRequest, builder.build(), new TransportResponseHandler<NodeResponse>() {                  @Override                 public NodeResponse read(StreamInput in) throws IOException {                     NodeResponse nodeResponse = newNodeResponse().                     nodeResponse.readFrom(in).                     return nodeResponse.                 }                  @Override                 public void handleResponse(NodeResponse response) {                     onOperation(idx, response).                 }                  @Override                 public void handleException(TransportException exp) {                     onFailure(idx, node.getId(), exp).                 }                  @Override                 public String executor() {                     return ThreadPool.Names.SAME.                 }             }).         } catch (Exception e) {             onFailure(idx, nodeId, e).         }     } }
false;private;2;6;;private void onOperation(int idx, NodeResponse nodeResponse) {     responses.set(idx, nodeResponse).     if (counter.incrementAndGet() == responses.length()) {         finishHim().     } }
false;private;3;9;;private void onFailure(int idx, String nodeId, Throwable t) {     if (logger.isDebugEnabled() && !(t instanceof NodeShouldNotConnectException)) {         logger.debug(new ParameterizedMessage("failed to execute on node [{}]", nodeId), t).     }     responses.set(idx, new FailedNodeException(nodeId, "Failed node [" + nodeId + "]", t)).     if (counter.incrementAndGet() == responses.length()) {         finishHim().     } }
false;private;0;11;;private void finishHim() {     NodesResponse finalResponse.     try {         finalResponse = newResponse(request, responses).     } catch (Exception e) {         logger.debug("failed to combine responses from nodes", e).         listener.onFailure(e).         return.     }     listener.onResponse(finalResponse). }
false;public;3;4;;@Override public void messageReceived(NodeRequest request, TransportChannel channel, Task task) throws Exception {     channel.sendResponse(nodeOperation(request, task)). }
