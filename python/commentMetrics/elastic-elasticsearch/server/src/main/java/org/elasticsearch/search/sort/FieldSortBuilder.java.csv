# id;timestamp;commentText;codeText;commentWords;codeWords
FieldSortBuilder -> public FieldSortBuilder(StreamInput in) throws IOException;1524684173;Read from a stream.;public FieldSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        missing = in.readGenericValue()__        order = in.readOptionalWriteable(SortOrder::readFromStream)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        unmappedType = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_    };read,from,a,stream;public,field,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,missing,in,read,generic,value,order,in,read,optional,writeable,sort,order,read,from,stream,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,unmapped,type,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new
FieldSortBuilder -> public FieldSortBuilder(StreamInput in) throws IOException;1525334055;Read from a stream.;public FieldSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        missing = in.readGenericValue()__        order = in.readOptionalWriteable(SortOrder::readFromStream)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        unmappedType = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_    };read,from,a,stream;public,field,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,missing,in,read,generic,value,order,in,read,optional,writeable,sort,order,read,from,stream,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,unmapped,type,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new
FieldSortBuilder -> public FieldSortBuilder(StreamInput in) throws IOException;1539615817;Read from a stream.;public FieldSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        missing = in.readGenericValue()__        order = in.readOptionalWriteable(SortOrder::readFromStream)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        unmappedType = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_    };read,from,a,stream;public,field,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,missing,in,read,generic,value,order,in,read,optional,writeable,sort,order,read,from,stream,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,unmapped,type,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new
FieldSortBuilder -> public FieldSortBuilder(StreamInput in) throws IOException;1540486836;Read from a stream.;public FieldSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        missing = in.readGenericValue()__        order = in.readOptionalWriteable(SortOrder::readFromStream)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        unmappedType = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_    };read,from,a,stream;public,field,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,missing,in,read,generic,value,order,in,read,optional,writeable,sort,order,read,from,stream,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,unmapped,type,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new
FieldSortBuilder -> public FieldSortBuilder(StreamInput in) throws IOException;1540583181;Read from a stream.;public FieldSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        missing = in.readGenericValue()__        order = in.readOptionalWriteable(SortOrder::readFromStream)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        unmappedType = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_    };read,from,a,stream;public,field,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,missing,in,read,generic,value,order,in,read,optional,writeable,sort,order,read,from,stream,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,unmapped,type,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new
FieldSortBuilder -> public FieldSortBuilder(StreamInput in) throws IOException;1548422582;Read from a stream.;public FieldSortBuilder(StreamInput in) throws IOException {_        fieldName = in.readString()__        nestedFilter = in.readOptionalNamedWriteable(QueryBuilder.class)__        nestedPath = in.readOptionalString()__        missing = in.readGenericValue()__        order = in.readOptionalWriteable(SortOrder::readFromStream)__        sortMode = in.readOptionalWriteable(SortMode::readFromStream)__        unmappedType = in.readOptionalString()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            nestedSort = in.readOptionalWriteable(NestedSortBuilder::new)__        }_    };read,from,a,stream;public,field,sort,builder,stream,input,in,throws,ioexception,field,name,in,read,string,nested,filter,in,read,optional,named,writeable,query,builder,class,nested,path,in,read,optional,string,missing,in,read,generic,value,order,in,read,optional,writeable,sort,order,read,from,stream,sort,mode,in,read,optional,writeable,sort,mode,read,from,stream,unmapped,type,in,read,optional,string,if,in,get,version,on,or,after,version,nested,sort,in,read,optional,writeable,nested,sort,builder,new
FieldSortBuilder -> public SortMode sortMode();1524684173;Returns what values to pick in the case a document contains multiple_values for the targeted sort field.;public SortMode sortMode() {_        return this.sortMode__    };returns,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field;public,sort,mode,sort,mode,return,this,sort,mode
FieldSortBuilder -> public SortMode sortMode();1525334055;Returns what values to pick in the case a document contains multiple_values for the targeted sort field.;public SortMode sortMode() {_        return this.sortMode__    };returns,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field;public,sort,mode,sort,mode,return,this,sort,mode
FieldSortBuilder -> public SortMode sortMode();1539615817;Returns what values to pick in the case a document contains multiple_values for the targeted sort field.;public SortMode sortMode() {_        return this.sortMode__    };returns,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field;public,sort,mode,sort,mode,return,this,sort,mode
FieldSortBuilder -> public SortMode sortMode();1540486836;Returns what values to pick in the case a document contains multiple_values for the targeted sort field.;public SortMode sortMode() {_        return this.sortMode__    };returns,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field;public,sort,mode,sort,mode,return,this,sort,mode
FieldSortBuilder -> public SortMode sortMode();1540583181;Returns what values to pick in the case a document contains multiple_values for the targeted sort field.;public SortMode sortMode() {_        return this.sortMode__    };returns,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field;public,sort,mode,sort,mode,return,this,sort,mode
FieldSortBuilder -> public SortMode sortMode();1548422582;Returns what values to pick in the case a document contains multiple_values for the targeted sort field.;public SortMode sortMode() {_        return this.sortMode__    };returns,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field;public,sort,mode,sort,mode,return,this,sort,mode
FieldSortBuilder -> public NestedSortBuilder getNestedSort();1524684173;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
FieldSortBuilder -> public NestedSortBuilder getNestedSort();1525334055;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
FieldSortBuilder -> public NestedSortBuilder getNestedSort();1539615817;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
FieldSortBuilder -> public NestedSortBuilder getNestedSort();1540486836;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
FieldSortBuilder -> public NestedSortBuilder getNestedSort();1540583181;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
FieldSortBuilder -> public NestedSortBuilder getNestedSort();1548422582;Returns the {@link NestedSortBuilder};public NestedSortBuilder getNestedSort() {_        return this.nestedSort__    };returns,the,link,nested,sort,builder;public,nested,sort,builder,get,nested,sort,return,this,nested,sort
FieldSortBuilder -> @Deprecated     public String getNestedPath();1524684173;Returns the nested path if sorting occurs in a field that is inside a_nested object._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,in,a,field,that,is,inside,a,nested,object,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
FieldSortBuilder -> @Deprecated     public String getNestedPath();1525334055;Returns the nested path if sorting occurs in a field that is inside a_nested object._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,in,a,field,that,is,inside,a,nested,object,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
FieldSortBuilder -> @Deprecated     public String getNestedPath();1539615817;Returns the nested path if sorting occurs in a field that is inside a_nested object._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,in,a,field,that,is,inside,a,nested,object,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
FieldSortBuilder -> @Deprecated     public String getNestedPath();1540486836;Returns the nested path if sorting occurs in a field that is inside a_nested object._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,in,a,field,that,is,inside,a,nested,object,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
FieldSortBuilder -> @Deprecated     public String getNestedPath();1540583181;Returns the nested path if sorting occurs in a field that is inside a_nested object._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,in,a,field,that,is,inside,a,nested,object,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
FieldSortBuilder -> @Deprecated     public String getNestedPath();1548422582;Returns the nested path if sorting occurs in a field that is inside a_nested object._@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public String getNestedPath() {_        return this.nestedPath__    };returns,the,nested,path,if,sorting,occurs,in,a,field,that,is,inside,a,nested,object,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,string,get,nested,path,return,this,nested,path
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedPath(String nestedPath);1524684173;Sets the nested path if sorting occurs on a field that is inside a nested_object. By default when sorting on a field inside a nested object, the_nearest upper nested object is selected as nested path.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedPath(String nestedPath);1525334055;Sets the nested path if sorting occurs on a field that is inside a nested_object. By default when sorting on a field inside a nested object, the_nearest upper nested object is selected as nested path.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedPath(String nestedPath);1539615817;Sets the nested path if sorting occurs on a field that is inside a nested_object. By default when sorting on a field inside a nested object, the_nearest upper nested object is selected as nested path.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedPath(String nestedPath);1540486836;Sets the nested path if sorting occurs on a field that is inside a nested_object. By default when sorting on a field inside a nested object, the_nearest upper nested object is selected as nested path.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedPath(String nestedPath);1540583181;Sets the nested path if sorting occurs on a field that is inside a nested_object. By default when sorting on a field inside a nested object, the_nearest upper nested object is selected as nested path.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedPath(String nestedPath);1548422582;Sets the nested path if sorting occurs on a field that is inside a nested_object. By default when sorting on a field inside a nested object, the_nearest upper nested object is selected as nested path.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedPath(String nestedPath) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedPath = nestedPath__        return this__    };sets,the,nested,path,if,sorting,occurs,on,a,field,that,is,inside,a,nested,object,by,default,when,sorting,on,a,field,inside,a,nested,object,the,nearest,upper,nested,object,is,selected,as,nested,path,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,path,string,nested,path,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,path,nested,path,return,this
FieldSortBuilder -> public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException;1524684173;Creates a new {@link FieldSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a side effect of this_method call_@param fieldName in some sort syntax variations the field name precedes the xContent object that specifies further parameters, e.g._in '{ "foo": { "order" : "asc"} }'. When parsing the inner object, the field name can be passed in via this argument;public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException {_        return PARSER.parse(parser, new FieldSortBuilder(fieldName), null)__    };creates,a,new,link,field,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,field,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,field,sort,builder,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception,return,parser,parse,parser,new,field,sort,builder,field,name,null
FieldSortBuilder -> public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException;1525334055;Creates a new {@link FieldSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a side effect of this_method call_@param fieldName in some sort syntax variations the field name precedes the xContent object that specifies further parameters, e.g._in '{ "foo": { "order" : "asc"} }'. When parsing the inner object, the field name can be passed in via this argument;public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException {_        return PARSER.parse(parser, new FieldSortBuilder(fieldName), null)__    };creates,a,new,link,field,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,field,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,field,sort,builder,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception,return,parser,parse,parser,new,field,sort,builder,field,name,null
FieldSortBuilder -> public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException;1539615817;Creates a new {@link FieldSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a side effect of this_method call_@param fieldName in some sort syntax variations the field name precedes the xContent object that specifies further parameters, e.g._in '{ "foo": { "order" : "asc"} }'. When parsing the inner object, the field name can be passed in via this argument;public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException {_        return PARSER.parse(parser, new FieldSortBuilder(fieldName), null)__    };creates,a,new,link,field,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,field,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,field,sort,builder,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception,return,parser,parse,parser,new,field,sort,builder,field,name,null
FieldSortBuilder -> public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException;1540486836;Creates a new {@link FieldSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a side effect of this_method call_@param fieldName in some sort syntax variations the field name precedes the xContent object that specifies further parameters, e.g._in '{ "foo": { "order" : "asc"} }'. When parsing the inner object, the field name can be passed in via this argument;public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException {_        return PARSER.parse(parser, new FieldSortBuilder(fieldName), null)__    };creates,a,new,link,field,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,field,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,field,sort,builder,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception,return,parser,parse,parser,new,field,sort,builder,field,name,null
FieldSortBuilder -> public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException;1540583181;Creates a new {@link FieldSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a side effect of this_method call_@param fieldName in some sort syntax variations the field name precedes the xContent object that specifies further parameters, e.g._in '{ "foo": { "order" : "asc"} }'. When parsing the inner object, the field name can be passed in via this argument;public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException {_        return PARSER.parse(parser, new FieldSortBuilder(fieldName), null)__    };creates,a,new,link,field,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,field,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,field,sort,builder,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception,return,parser,parse,parser,new,field,sort,builder,field,name,null
FieldSortBuilder -> public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException;1548422582;Creates a new {@link FieldSortBuilder} from the query held by the {@link XContentParser} in_{@link org.elasticsearch.common.xcontent.XContent} format.__@param parser the input parser. The state on the parser contained in this context will be changed as a side effect of this_method call_@param fieldName in some sort syntax variations the field name precedes the xContent object that specifies further parameters, e.g._in '{ "foo": { "order" : "asc"} }'. When parsing the inner object, the field name can be passed in via this argument;public static FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException {_        return PARSER.parse(parser, new FieldSortBuilder(fieldName), null)__    };creates,a,new,link,field,sort,builder,from,the,query,held,by,the,link,xcontent,parser,in,link,org,elasticsearch,common,xcontent,xcontent,format,param,parser,the,input,parser,the,state,on,the,parser,contained,in,this,context,will,be,changed,as,a,side,effect,of,this,method,call,param,field,name,in,some,sort,syntax,variations,the,field,name,precedes,the,x,content,object,that,specifies,further,parameters,e,g,in,foo,order,asc,when,parsing,the,inner,object,the,field,name,can,be,passed,in,via,this,argument;public,static,field,sort,builder,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception,return,parser,parse,parser,new,field,sort,builder,field,name,null
FieldSortBuilder -> public String getFieldName();1524684173;Returns the document field this sort should be based on.;public String getFieldName() {_        return this.fieldName__    };returns,the,document,field,this,sort,should,be,based,on;public,string,get,field,name,return,this,field,name
FieldSortBuilder -> public String getFieldName();1525334055;Returns the document field this sort should be based on.;public String getFieldName() {_        return this.fieldName__    };returns,the,document,field,this,sort,should,be,based,on;public,string,get,field,name,return,this,field,name
FieldSortBuilder -> public String getFieldName();1539615817;Returns the document field this sort should be based on.;public String getFieldName() {_        return this.fieldName__    };returns,the,document,field,this,sort,should,be,based,on;public,string,get,field,name,return,this,field,name
FieldSortBuilder -> public String getFieldName();1540486836;Returns the document field this sort should be based on.;public String getFieldName() {_        return this.fieldName__    };returns,the,document,field,this,sort,should,be,based,on;public,string,get,field,name,return,this,field,name
FieldSortBuilder -> public String getFieldName();1540583181;Returns the document field this sort should be based on.;public String getFieldName() {_        return this.fieldName__    };returns,the,document,field,this,sort,should,be,based,on;public,string,get,field,name,return,this,field,name
FieldSortBuilder -> public String getFieldName();1548422582;Returns the document field this sort should be based on.;public String getFieldName() {_        return this.fieldName__    };returns,the,document,field,this,sort,should,be,based,on;public,string,get,field,name,return,this,field,name
FieldSortBuilder -> public String unmappedType();1524684173;Returns the type to use in case the current field is not mapped in an_index.;public String unmappedType() {_        return this.unmappedType__    };returns,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index;public,string,unmapped,type,return,this,unmapped,type
FieldSortBuilder -> public String unmappedType();1525334055;Returns the type to use in case the current field is not mapped in an_index.;public String unmappedType() {_        return this.unmappedType__    };returns,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index;public,string,unmapped,type,return,this,unmapped,type
FieldSortBuilder -> public String unmappedType();1539615817;Returns the type to use in case the current field is not mapped in an_index.;public String unmappedType() {_        return this.unmappedType__    };returns,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index;public,string,unmapped,type,return,this,unmapped,type
FieldSortBuilder -> public String unmappedType();1540486836;Returns the type to use in case the current field is not mapped in an_index.;public String unmappedType() {_        return this.unmappedType__    };returns,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index;public,string,unmapped,type,return,this,unmapped,type
FieldSortBuilder -> public String unmappedType();1540583181;Returns the type to use in case the current field is not mapped in an_index.;public String unmappedType() {_        return this.unmappedType__    };returns,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index;public,string,unmapped,type,return,this,unmapped,type
FieldSortBuilder -> public String unmappedType();1548422582;Returns the type to use in case the current field is not mapped in an_index.;public String unmappedType() {_        return this.unmappedType__    };returns,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index;public,string,unmapped,type,return,this,unmapped,type
FieldSortBuilder -> public FieldSortBuilder(FieldSortBuilder template);1524684173;Copy constructor.;public FieldSortBuilder(FieldSortBuilder template) {_        this(template.fieldName)__        this.order(template.order())__        this.missing(template.missing())__        this.unmappedType(template.unmappedType())__        if (template.sortMode != null) {_            this.sortMode(template.sortMode())__        }_        this.setNestedFilter(template.getNestedFilter())__        this.setNestedPath(template.getNestedPath())__        if (template.getNestedSort() != null) {_            this.setNestedSort(template.getNestedSort())__        }__    };copy,constructor;public,field,sort,builder,field,sort,builder,template,this,template,field,name,this,order,template,order,this,missing,template,missing,this,unmapped,type,template,unmapped,type,if,template,sort,mode,null,this,sort,mode,template,sort,mode,this,set,nested,filter,template,get,nested,filter,this,set,nested,path,template,get,nested,path,if,template,get,nested,sort,null,this,set,nested,sort,template,get,nested,sort
FieldSortBuilder -> public FieldSortBuilder(FieldSortBuilder template);1525334055;Copy constructor.;public FieldSortBuilder(FieldSortBuilder template) {_        this(template.fieldName)__        this.order(template.order())__        this.missing(template.missing())__        this.unmappedType(template.unmappedType())__        if (template.sortMode != null) {_            this.sortMode(template.sortMode())__        }_        this.setNestedFilter(template.getNestedFilter())__        this.setNestedPath(template.getNestedPath())__        if (template.getNestedSort() != null) {_            this.setNestedSort(template.getNestedSort())__        }__    };copy,constructor;public,field,sort,builder,field,sort,builder,template,this,template,field,name,this,order,template,order,this,missing,template,missing,this,unmapped,type,template,unmapped,type,if,template,sort,mode,null,this,sort,mode,template,sort,mode,this,set,nested,filter,template,get,nested,filter,this,set,nested,path,template,get,nested,path,if,template,get,nested,sort,null,this,set,nested,sort,template,get,nested,sort
FieldSortBuilder -> public FieldSortBuilder(FieldSortBuilder template);1539615817;Copy constructor.;public FieldSortBuilder(FieldSortBuilder template) {_        this(template.fieldName)__        this.order(template.order())__        this.missing(template.missing())__        this.unmappedType(template.unmappedType())__        if (template.sortMode != null) {_            this.sortMode(template.sortMode())__        }_        this.setNestedFilter(template.getNestedFilter())__        this.setNestedPath(template.getNestedPath())__        if (template.getNestedSort() != null) {_            this.setNestedSort(template.getNestedSort())__        }__    };copy,constructor;public,field,sort,builder,field,sort,builder,template,this,template,field,name,this,order,template,order,this,missing,template,missing,this,unmapped,type,template,unmapped,type,if,template,sort,mode,null,this,sort,mode,template,sort,mode,this,set,nested,filter,template,get,nested,filter,this,set,nested,path,template,get,nested,path,if,template,get,nested,sort,null,this,set,nested,sort,template,get,nested,sort
FieldSortBuilder -> public FieldSortBuilder(FieldSortBuilder template);1540486836;Copy constructor.;public FieldSortBuilder(FieldSortBuilder template) {_        this(template.fieldName)__        this.order(template.order())__        this.missing(template.missing())__        this.unmappedType(template.unmappedType())__        if (template.sortMode != null) {_            this.sortMode(template.sortMode())__        }_        this.setNestedFilter(template.getNestedFilter())__        this.setNestedPath(template.getNestedPath())__        if (template.getNestedSort() != null) {_            this.setNestedSort(template.getNestedSort())__        }__    };copy,constructor;public,field,sort,builder,field,sort,builder,template,this,template,field,name,this,order,template,order,this,missing,template,missing,this,unmapped,type,template,unmapped,type,if,template,sort,mode,null,this,sort,mode,template,sort,mode,this,set,nested,filter,template,get,nested,filter,this,set,nested,path,template,get,nested,path,if,template,get,nested,sort,null,this,set,nested,sort,template,get,nested,sort
FieldSortBuilder -> public FieldSortBuilder(FieldSortBuilder template);1540583181;Copy constructor.;public FieldSortBuilder(FieldSortBuilder template) {_        this(template.fieldName)__        this.order(template.order())__        this.missing(template.missing())__        this.unmappedType(template.unmappedType())__        if (template.sortMode != null) {_            this.sortMode(template.sortMode())__        }_        this.setNestedFilter(template.getNestedFilter())__        this.setNestedPath(template.getNestedPath())__        if (template.getNestedSort() != null) {_            this.setNestedSort(template.getNestedSort())__        }__    };copy,constructor;public,field,sort,builder,field,sort,builder,template,this,template,field,name,this,order,template,order,this,missing,template,missing,this,unmapped,type,template,unmapped,type,if,template,sort,mode,null,this,sort,mode,template,sort,mode,this,set,nested,filter,template,get,nested,filter,this,set,nested,path,template,get,nested,path,if,template,get,nested,sort,null,this,set,nested,sort,template,get,nested,sort
FieldSortBuilder -> public FieldSortBuilder(FieldSortBuilder template);1548422582;Copy constructor.;public FieldSortBuilder(FieldSortBuilder template) {_        this(template.fieldName)__        this.order(template.order())__        this.missing(template.missing())__        this.unmappedType(template.unmappedType())__        if (template.sortMode != null) {_            this.sortMode(template.sortMode())__        }_        this.setNestedFilter(template.getNestedFilter())__        this.setNestedPath(template.getNestedPath())__        if (template.getNestedSort() != null) {_            this.setNestedSort(template.getNestedSort())__        }_    };copy,constructor;public,field,sort,builder,field,sort,builder,template,this,template,field,name,this,order,template,order,this,missing,template,missing,this,unmapped,type,template,unmapped,type,if,template,sort,mode,null,this,sort,mode,template,sort,mode,this,set,nested,filter,template,get,nested,filter,this,set,nested,path,template,get,nested,path,if,template,get,nested,sort,null,this,set,nested,sort,template,get,nested,sort
FieldSortBuilder -> public FieldSortBuilder(String fieldName);1524684173;Constructs a new sort based on a document field.__@param fieldName_The field name.;public FieldSortBuilder(String fieldName) {_        if (fieldName == null) {_            throw new IllegalArgumentException("fieldName must not be null")__        }_        this.fieldName = fieldName__    };constructs,a,new,sort,based,on,a,document,field,param,field,name,the,field,name;public,field,sort,builder,string,field,name,if,field,name,null,throw,new,illegal,argument,exception,field,name,must,not,be,null,this,field,name,field,name
FieldSortBuilder -> public FieldSortBuilder(String fieldName);1525334055;Constructs a new sort based on a document field.__@param fieldName_The field name.;public FieldSortBuilder(String fieldName) {_        if (fieldName == null) {_            throw new IllegalArgumentException("fieldName must not be null")__        }_        this.fieldName = fieldName__    };constructs,a,new,sort,based,on,a,document,field,param,field,name,the,field,name;public,field,sort,builder,string,field,name,if,field,name,null,throw,new,illegal,argument,exception,field,name,must,not,be,null,this,field,name,field,name
FieldSortBuilder -> public FieldSortBuilder(String fieldName);1539615817;Constructs a new sort based on a document field.__@param fieldName_The field name.;public FieldSortBuilder(String fieldName) {_        if (fieldName == null) {_            throw new IllegalArgumentException("fieldName must not be null")__        }_        this.fieldName = fieldName__    };constructs,a,new,sort,based,on,a,document,field,param,field,name,the,field,name;public,field,sort,builder,string,field,name,if,field,name,null,throw,new,illegal,argument,exception,field,name,must,not,be,null,this,field,name,field,name
FieldSortBuilder -> public FieldSortBuilder(String fieldName);1540486836;Constructs a new sort based on a document field.__@param fieldName_The field name.;public FieldSortBuilder(String fieldName) {_        if (fieldName == null) {_            throw new IllegalArgumentException("fieldName must not be null")__        }_        this.fieldName = fieldName__    };constructs,a,new,sort,based,on,a,document,field,param,field,name,the,field,name;public,field,sort,builder,string,field,name,if,field,name,null,throw,new,illegal,argument,exception,field,name,must,not,be,null,this,field,name,field,name
FieldSortBuilder -> public FieldSortBuilder(String fieldName);1540583181;Constructs a new sort based on a document field.__@param fieldName_The field name.;public FieldSortBuilder(String fieldName) {_        if (fieldName == null) {_            throw new IllegalArgumentException("fieldName must not be null")__        }_        this.fieldName = fieldName__    };constructs,a,new,sort,based,on,a,document,field,param,field,name,the,field,name;public,field,sort,builder,string,field,name,if,field,name,null,throw,new,illegal,argument,exception,field,name,must,not,be,null,this,field,name,field,name
FieldSortBuilder -> public FieldSortBuilder(String fieldName);1548422582;Constructs a new sort based on a document field.__@param fieldName_The field name.;public FieldSortBuilder(String fieldName) {_        if (fieldName == null) {_            throw new IllegalArgumentException("fieldName must not be null")__        }_        this.fieldName = fieldName__    };constructs,a,new,sort,based,on,a,document,field,param,field,name,the,field,name;public,field,sort,builder,string,field,name,if,field,name,null,throw,new,illegal,argument,exception,field,name,must,not,be,null,this,field,name,field,name
FieldSortBuilder -> public FieldSortBuilder unmappedType(String type);1524684173;Set the type to use in case the current field is not mapped in an index._Specifying a type tells Elasticsearch what type the sort values should_have, which is important for cross-index search, if there are sort fields_that exist on some indices only. If the unmapped type is <tt>null</tt>_then query execution will fail if one or more indices don't have a_mapping for the current field.;public FieldSortBuilder unmappedType(String type) {_        this.unmappedType = type__        return this__    };set,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index,specifying,a,type,tells,elasticsearch,what,type,the,sort,values,should,have,which,is,important,for,cross,index,search,if,there,are,sort,fields,that,exist,on,some,indices,only,if,the,unmapped,type,is,tt,null,tt,then,query,execution,will,fail,if,one,or,more,indices,don,t,have,a,mapping,for,the,current,field;public,field,sort,builder,unmapped,type,string,type,this,unmapped,type,type,return,this
FieldSortBuilder -> public FieldSortBuilder unmappedType(String type);1525334055;Set the type to use in case the current field is not mapped in an index._Specifying a type tells Elasticsearch what type the sort values should_have, which is important for cross-index search, if there are sort fields_that exist on some indices only. If the unmapped type is {@code null}_then query execution will fail if one or more indices don't have a_mapping for the current field.;public FieldSortBuilder unmappedType(String type) {_        this.unmappedType = type__        return this__    };set,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index,specifying,a,type,tells,elasticsearch,what,type,the,sort,values,should,have,which,is,important,for,cross,index,search,if,there,are,sort,fields,that,exist,on,some,indices,only,if,the,unmapped,type,is,code,null,then,query,execution,will,fail,if,one,or,more,indices,don,t,have,a,mapping,for,the,current,field;public,field,sort,builder,unmapped,type,string,type,this,unmapped,type,type,return,this
FieldSortBuilder -> public FieldSortBuilder unmappedType(String type);1539615817;Set the type to use in case the current field is not mapped in an index._Specifying a type tells Elasticsearch what type the sort values should_have, which is important for cross-index search, if there are sort fields_that exist on some indices only. If the unmapped type is {@code null}_then query execution will fail if one or more indices don't have a_mapping for the current field.;public FieldSortBuilder unmappedType(String type) {_        this.unmappedType = type__        return this__    };set,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index,specifying,a,type,tells,elasticsearch,what,type,the,sort,values,should,have,which,is,important,for,cross,index,search,if,there,are,sort,fields,that,exist,on,some,indices,only,if,the,unmapped,type,is,code,null,then,query,execution,will,fail,if,one,or,more,indices,don,t,have,a,mapping,for,the,current,field;public,field,sort,builder,unmapped,type,string,type,this,unmapped,type,type,return,this
FieldSortBuilder -> public FieldSortBuilder unmappedType(String type);1540486836;Set the type to use in case the current field is not mapped in an index._Specifying a type tells Elasticsearch what type the sort values should_have, which is important for cross-index search, if there are sort fields_that exist on some indices only. If the unmapped type is {@code null}_then query execution will fail if one or more indices don't have a_mapping for the current field.;public FieldSortBuilder unmappedType(String type) {_        this.unmappedType = type__        return this__    };set,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index,specifying,a,type,tells,elasticsearch,what,type,the,sort,values,should,have,which,is,important,for,cross,index,search,if,there,are,sort,fields,that,exist,on,some,indices,only,if,the,unmapped,type,is,code,null,then,query,execution,will,fail,if,one,or,more,indices,don,t,have,a,mapping,for,the,current,field;public,field,sort,builder,unmapped,type,string,type,this,unmapped,type,type,return,this
FieldSortBuilder -> public FieldSortBuilder unmappedType(String type);1540583181;Set the type to use in case the current field is not mapped in an index._Specifying a type tells Elasticsearch what type the sort values should_have, which is important for cross-index search, if there are sort fields_that exist on some indices only. If the unmapped type is {@code null}_then query execution will fail if one or more indices don't have a_mapping for the current field.;public FieldSortBuilder unmappedType(String type) {_        this.unmappedType = type__        return this__    };set,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index,specifying,a,type,tells,elasticsearch,what,type,the,sort,values,should,have,which,is,important,for,cross,index,search,if,there,are,sort,fields,that,exist,on,some,indices,only,if,the,unmapped,type,is,code,null,then,query,execution,will,fail,if,one,or,more,indices,don,t,have,a,mapping,for,the,current,field;public,field,sort,builder,unmapped,type,string,type,this,unmapped,type,type,return,this
FieldSortBuilder -> public FieldSortBuilder unmappedType(String type);1548422582;Set the type to use in case the current field is not mapped in an index._Specifying a type tells Elasticsearch what type the sort values should_have, which is important for cross-index search, if there are sort fields_that exist on some indices only. If the unmapped type is {@code null}_then query execution will fail if one or more indices don't have a_mapping for the current field.;public FieldSortBuilder unmappedType(String type) {_        this.unmappedType = type__        return this__    };set,the,type,to,use,in,case,the,current,field,is,not,mapped,in,an,index,specifying,a,type,tells,elasticsearch,what,type,the,sort,values,should,have,which,is,important,for,cross,index,search,if,there,are,sort,fields,that,exist,on,some,indices,only,if,the,unmapped,type,is,code,null,then,query,execution,will,fail,if,one,or,more,indices,don,t,have,a,mapping,for,the,current,field;public,field,sort,builder,unmapped,type,string,type,this,unmapped,type,type,return,this
FieldSortBuilder -> public FieldSortBuilder missing(Object missing);1524684173;Sets the value when a field is missing in a doc. Can also be set to <tt>_last</tt> or_<tt>_first</tt> to sort missing last or first respectively.;public FieldSortBuilder missing(Object missing) {_        this.missing = missing__        return this__    };sets,the,value,when,a,field,is,missing,in,a,doc,can,also,be,set,to,tt,tt,or,tt,tt,to,sort,missing,last,or,first,respectively;public,field,sort,builder,missing,object,missing,this,missing,missing,return,this
FieldSortBuilder -> public FieldSortBuilder missing(Object missing);1525334055;Sets the value when a field is missing in a doc. Can also be set to {@code _last} or_{@code _first} to sort missing last or first respectively.;public FieldSortBuilder missing(Object missing) {_        this.missing = missing__        return this__    };sets,the,value,when,a,field,is,missing,in,a,doc,can,also,be,set,to,code,or,code,to,sort,missing,last,or,first,respectively;public,field,sort,builder,missing,object,missing,this,missing,missing,return,this
FieldSortBuilder -> public FieldSortBuilder missing(Object missing);1539615817;Sets the value when a field is missing in a doc. Can also be set to {@code _last} or_{@code _first} to sort missing last or first respectively.;public FieldSortBuilder missing(Object missing) {_        this.missing = missing__        return this__    };sets,the,value,when,a,field,is,missing,in,a,doc,can,also,be,set,to,code,or,code,to,sort,missing,last,or,first,respectively;public,field,sort,builder,missing,object,missing,this,missing,missing,return,this
FieldSortBuilder -> public FieldSortBuilder missing(Object missing);1540486836;Sets the value when a field is missing in a doc. Can also be set to {@code _last} or_{@code _first} to sort missing last or first respectively.;public FieldSortBuilder missing(Object missing) {_        this.missing = missing__        return this__    };sets,the,value,when,a,field,is,missing,in,a,doc,can,also,be,set,to,code,or,code,to,sort,missing,last,or,first,respectively;public,field,sort,builder,missing,object,missing,this,missing,missing,return,this
FieldSortBuilder -> public FieldSortBuilder missing(Object missing);1540583181;Sets the value when a field is missing in a doc. Can also be set to {@code _last} or_{@code _first} to sort missing last or first respectively.;public FieldSortBuilder missing(Object missing) {_        this.missing = missing__        return this__    };sets,the,value,when,a,field,is,missing,in,a,doc,can,also,be,set,to,code,or,code,to,sort,missing,last,or,first,respectively;public,field,sort,builder,missing,object,missing,this,missing,missing,return,this
FieldSortBuilder -> public FieldSortBuilder missing(Object missing);1548422582;Sets the value when a field is missing in a doc. Can also be set to {@code _last} or_{@code _first} to sort missing last or first respectively.;public FieldSortBuilder missing(Object missing) {_        this.missing = missing__        return this__    };sets,the,value,when,a,field,is,missing,in,a,doc,can,also,be,set,to,code,or,code,to,sort,missing,last,or,first,respectively;public,field,sort,builder,missing,object,missing,this,missing,missing,return,this
FieldSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1524684173;Returns the nested filter that the nested objects should match with in_order to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
FieldSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1525334055;Returns the nested filter that the nested objects should match with in_order to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
FieldSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1539615817;Returns the nested filter that the nested objects should match with in_order to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
FieldSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1540486836;Returns the nested filter that the nested objects should match with in_order to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
FieldSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1540583181;Returns the nested filter that the nested objects should match with in_order to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
FieldSortBuilder -> @Deprecated     public QueryBuilder getNestedFilter();1548422582;Returns the nested filter that the nested objects should match with in_order to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public QueryBuilder getNestedFilter() {_        return this.nestedFilter__    };returns,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,query,builder,get,nested,filter,return,this,nested,filter
FieldSortBuilder -> public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1524684173;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,field,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
FieldSortBuilder -> public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1525334055;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,field,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
FieldSortBuilder -> public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1539615817;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,field,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
FieldSortBuilder -> public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1540486836;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,field,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
FieldSortBuilder -> public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1540583181;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,field,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
FieldSortBuilder -> public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort);1548422582;Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested_object. The {@link NestedSortBuilder} takes a `path` argument and an optional_nested filter that the nested objects should match with in_order to be taken into account for sorting.;public FieldSortBuilder setNestedSort(final NestedSortBuilder nestedSort) {_        if (this.nestedFilter != null || this.nestedPath != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedSort = nestedSort__        return this__    };sets,the,link,nested,sort,builder,to,be,used,for,fields,that,are,inside,a,nested,object,the,link,nested,sort,builder,takes,a,path,argument,and,an,optional,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting;public,field,sort,builder,set,nested,sort,final,nested,sort,builder,nested,sort,if,this,nested,filter,null,this,nested,path,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,sort,nested,sort,return,this
FieldSortBuilder -> public Object missing();1524684173;Returns the value used when a field is missing in a doc.;public Object missing() {_        return missing__    };returns,the,value,used,when,a,field,is,missing,in,a,doc;public,object,missing,return,missing
FieldSortBuilder -> public Object missing();1525334055;Returns the value used when a field is missing in a doc.;public Object missing() {_        return missing__    };returns,the,value,used,when,a,field,is,missing,in,a,doc;public,object,missing,return,missing
FieldSortBuilder -> public Object missing();1539615817;Returns the value used when a field is missing in a doc.;public Object missing() {_        return missing__    };returns,the,value,used,when,a,field,is,missing,in,a,doc;public,object,missing,return,missing
FieldSortBuilder -> public Object missing();1540486836;Returns the value used when a field is missing in a doc.;public Object missing() {_        return missing__    };returns,the,value,used,when,a,field,is,missing,in,a,doc;public,object,missing,return,missing
FieldSortBuilder -> public Object missing();1540583181;Returns the value used when a field is missing in a doc.;public Object missing() {_        return missing__    };returns,the,value,used,when,a,field,is,missing,in,a,doc;public,object,missing,return,missing
FieldSortBuilder -> public Object missing();1548422582;Returns the value used when a field is missing in a doc.;public Object missing() {_        return missing__    };returns,the,value,used,when,a,field,is,missing,in,a,doc;public,object,missing,return,missing
FieldSortBuilder -> public FieldSortBuilder sortMode(SortMode sortMode);1524684173;Defines what values to pick in the case a document contains multiple_values for the targeted sort field. Possible values: min, max, sum and_avg__<p>_The last two values are only applicable for number based fields.;public FieldSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        this.sortMode = sortMode__        return this__    };defines,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field,possible,values,min,max,sum,and,avg,p,the,last,two,values,are,only,applicable,for,number,based,fields;public,field,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,this,sort,mode,sort,mode,return,this
FieldSortBuilder -> public FieldSortBuilder sortMode(SortMode sortMode);1525334055;Defines what values to pick in the case a document contains multiple_values for the targeted sort field. Possible values: min, max, sum and_avg__<p>_The last two values are only applicable for number based fields.;public FieldSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        this.sortMode = sortMode__        return this__    };defines,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field,possible,values,min,max,sum,and,avg,p,the,last,two,values,are,only,applicable,for,number,based,fields;public,field,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,this,sort,mode,sort,mode,return,this
FieldSortBuilder -> public FieldSortBuilder sortMode(SortMode sortMode);1539615817;Defines what values to pick in the case a document contains multiple_values for the targeted sort field. Possible values: min, max, sum and_avg__<p>_The last two values are only applicable for number based fields.;public FieldSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        this.sortMode = sortMode__        return this__    };defines,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field,possible,values,min,max,sum,and,avg,p,the,last,two,values,are,only,applicable,for,number,based,fields;public,field,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,this,sort,mode,sort,mode,return,this
FieldSortBuilder -> public FieldSortBuilder sortMode(SortMode sortMode);1540486836;Defines what values to pick in the case a document contains multiple_values for the targeted sort field. Possible values: min, max, sum and_avg__<p>_The last two values are only applicable for number based fields.;public FieldSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        this.sortMode = sortMode__        return this__    };defines,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field,possible,values,min,max,sum,and,avg,p,the,last,two,values,are,only,applicable,for,number,based,fields;public,field,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,this,sort,mode,sort,mode,return,this
FieldSortBuilder -> public FieldSortBuilder sortMode(SortMode sortMode);1540583181;Defines what values to pick in the case a document contains multiple_values for the targeted sort field. Possible values: min, max, sum and_avg__<p>_The last two values are only applicable for number based fields.;public FieldSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        this.sortMode = sortMode__        return this__    };defines,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field,possible,values,min,max,sum,and,avg,p,the,last,two,values,are,only,applicable,for,number,based,fields;public,field,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,this,sort,mode,sort,mode,return,this
FieldSortBuilder -> public FieldSortBuilder sortMode(SortMode sortMode);1548422582;Defines what values to pick in the case a document contains multiple_values for the targeted sort field. Possible values: min, max, sum and_avg__<p>_The last two values are only applicable for number based fields.;public FieldSortBuilder sortMode(SortMode sortMode) {_        Objects.requireNonNull(sortMode, "sort mode cannot be null")__        this.sortMode = sortMode__        return this__    };defines,what,values,to,pick,in,the,case,a,document,contains,multiple,values,for,the,targeted,sort,field,possible,values,min,max,sum,and,avg,p,the,last,two,values,are,only,applicable,for,number,based,fields;public,field,sort,builder,sort,mode,sort,mode,sort,mode,objects,require,non,null,sort,mode,sort,mode,cannot,be,null,this,sort,mode,sort,mode,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter);1524684173;Sets the nested filter that the nested objects should match with in order_to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter);1525334055;Sets the nested filter that the nested objects should match with in order_to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter);1539615817;Sets the nested filter that the nested objects should match with in order_to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter);1540486836;Sets the nested filter that the nested objects should match with in order_to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter);1540583181;Sets the nested filter that the nested objects should match with in order_to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
FieldSortBuilder -> @Deprecated     public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter);1548422582;Sets the nested filter that the nested objects should match with in order_to be taken into account for sorting.__@deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()};@Deprecated_    public FieldSortBuilder setNestedFilter(QueryBuilder nestedFilter) {_        if (this.nestedSort != null) {_            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed")__        }_        this.nestedFilter = nestedFilter__        return this__    };sets,the,nested,filter,that,the,nested,objects,should,match,with,in,order,to,be,taken,into,account,for,sorting,deprecated,set,nested,sort,with,link,set,nested,sort,nested,sort,builder,and,retrieve,with,link,get,nested,sort;deprecated,public,field,sort,builder,set,nested,filter,query,builder,nested,filter,if,this,nested,sort,null,throw,new,illegal,argument,exception,setting,both,and,nested,not,allowed,this,nested,filter,nested,filter,return,this
