# id;timestamp;commentText;codeText;commentWords;codeWords
RetentionLease -> public String source();1546875837;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public String source();1546927432;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public String source();1547172785;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public String source();1547332999;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public String source();1547518004;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public String source();1548843917;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public String source();1548872440;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public String source();1549059559;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public String source();1550526771;The source of this retention lease. The source is set during construction by the caller.__@return the source;public String source() {_        return source__    };the,source,of,this,retention,lease,the,source,is,set,during,construction,by,the,caller,return,the,source;public,string,source,return,source
RetentionLease -> public static String encodeRetentionLeases(final Collection<RetentionLease> retentionLeases);1547332999;Encodes a collection of retention leases as a string. This encoding can be decoed by {@link #decodeRetentionLeases(String)}. The_encoding is a comma-separated encoding of each retention lease as encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param retentionLeases the retention leases_@return the encoding of the retention leases;public static String encodeRetentionLeases(final Collection<RetentionLease> retentionLeases) {_        Objects.requireNonNull(retentionLeases)__        return retentionLeases.stream().map(RetentionLease::encodeRetentionLease).collect(Collectors.joining(","))__    };encodes,a,collection,of,retention,leases,as,a,string,this,encoding,can,be,decoed,by,link,decode,retention,leases,string,the,encoding,is,a,comma,separated,encoding,of,each,retention,lease,as,encoded,by,link,encode,retention,lease,retention,lease,param,retention,leases,the,retention,leases,return,the,encoding,of,the,retention,leases;public,static,string,encode,retention,leases,final,collection,retention,lease,retention,leases,objects,require,non,null,retention,leases,return,retention,leases,stream,map,retention,lease,encode,retention,lease,collect,collectors,joining
RetentionLease -> public static String encodeRetentionLeases(final Collection<RetentionLease> retentionLeases);1547518004;Encodes a collection of retention leases as a string. This encoding can be decoed by {@link #decodeRetentionLeases(String)}. The_encoding is a comma-separated encoding of each retention lease as encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param retentionLeases the retention leases_@return the encoding of the retention leases;public static String encodeRetentionLeases(final Collection<RetentionLease> retentionLeases) {_        Objects.requireNonNull(retentionLeases)__        return retentionLeases.stream().map(RetentionLease::encodeRetentionLease).collect(Collectors.joining(","))__    };encodes,a,collection,of,retention,leases,as,a,string,this,encoding,can,be,decoed,by,link,decode,retention,leases,string,the,encoding,is,a,comma,separated,encoding,of,each,retention,lease,as,encoded,by,link,encode,retention,lease,retention,lease,param,retention,leases,the,retention,leases,return,the,encoding,of,the,retention,leases;public,static,string,encode,retention,leases,final,collection,retention,lease,retention,leases,objects,require,non,null,retention,leases,return,retention,leases,stream,map,retention,lease,encode,retention,lease,collect,collectors,joining
RetentionLease -> public static String encodeRetentionLeases(final Collection<RetentionLease> retentionLeases);1548843917;Encodes a collection of retention leases as a string. This encoding can be decoed by {@link #decodeRetentionLeases(String)}. The_encoding is a comma-separated encoding of each retention lease as encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param retentionLeases the retention leases_@return the encoding of the retention leases;public static String encodeRetentionLeases(final Collection<RetentionLease> retentionLeases) {_        Objects.requireNonNull(retentionLeases)__        return retentionLeases.stream().map(RetentionLease::encodeRetentionLease).collect(Collectors.joining(","))__    };encodes,a,collection,of,retention,leases,as,a,string,this,encoding,can,be,decoed,by,link,decode,retention,leases,string,the,encoding,is,a,comma,separated,encoding,of,each,retention,lease,as,encoded,by,link,encode,retention,lease,retention,lease,param,retention,leases,the,retention,leases,return,the,encoding,of,the,retention,leases;public,static,string,encode,retention,leases,final,collection,retention,lease,retention,leases,objects,require,non,null,retention,leases,return,retention,leases,stream,map,retention,lease,encode,retention,lease,collect,collectors,joining
RetentionLease -> public static String encodeRetentionLeases(final Collection<RetentionLease> retentionLeases);1548872440;Encodes a collection of retention leases as a string. This encoding can be decoed by {@link #decodeRetentionLeases(String)}. The_encoding is a comma-separated encoding of each retention lease as encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param retentionLeases the retention leases_@return the encoding of the retention leases;public static String encodeRetentionLeases(final Collection<RetentionLease> retentionLeases) {_        Objects.requireNonNull(retentionLeases)__        return retentionLeases.stream().map(RetentionLease::encodeRetentionLease).collect(Collectors.joining(","))__    };encodes,a,collection,of,retention,leases,as,a,string,this,encoding,can,be,decoed,by,link,decode,retention,leases,string,the,encoding,is,a,comma,separated,encoding,of,each,retention,lease,as,encoded,by,link,encode,retention,lease,retention,lease,param,retention,leases,the,retention,leases,return,the,encoding,of,the,retention,leases;public,static,string,encode,retention,leases,final,collection,retention,lease,retention,leases,objects,require,non,null,retention,leases,return,retention,leases,stream,map,retention,lease,encode,retention,lease,collect,collectors,joining
RetentionLease -> public String id();1546875837;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> public String id();1546927432;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> public String id();1547172785;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> public String id();1547332999;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> public String id();1547518004;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> public String id();1548843917;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> public String id();1548872440;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> public String id();1549059559;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> public String id();1550526771;The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.__@return the identifier;public String id() {_        return id__    };the,identifier,for,this,retention,lease,this,identifier,should,be,unique,per,lease,and,is,set,during,construction,by,the,caller,return,the,identifier;public,string,id,return,id
RetentionLease -> static RetentionLease decodeRetentionLease(final String encodedRetentionLease);1547332999;Decodes a retention lease encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param encodedRetentionLease an encoded retention lease_@return the decoded retention lease;static RetentionLease decodeRetentionLease(final String encodedRetentionLease) {_        Objects.requireNonNull(encodedRetentionLease)__        final String[] fields = encodedRetentionLease.split("_")__        assert fields.length == 4 : Arrays.toString(fields)__        assert fields[0].matches("id:[^:_,]+") : fields[0]__        final String id = fields[0].substring("id:".length())__        assert fields[1].matches("retaining_seq_no:\\d+") : fields[1]__        final long retainingSequenceNumber = Long.parseLong(fields[1].substring("retaining_seq_no:".length()))__        assert fields[2].matches("timestamp:\\d+") : fields[2]__        final long timestamp = Long.parseLong(fields[2].substring("timestamp:".length()))__        assert fields[3].matches("source:[^:_,]+") : fields[3]__        final String source = fields[3].substring("source:".length())__        return new RetentionLease(id, retainingSequenceNumber, timestamp, source)__    };decodes,a,retention,lease,encoded,by,link,encode,retention,lease,retention,lease,param,encoded,retention,lease,an,encoded,retention,lease,return,the,decoded,retention,lease;static,retention,lease,decode,retention,lease,final,string,encoded,retention,lease,objects,require,non,null,encoded,retention,lease,final,string,fields,encoded,retention,lease,split,assert,fields,length,4,arrays,to,string,fields,assert,fields,0,matches,id,fields,0,final,string,id,fields,0,substring,id,length,assert,fields,1,matches,d,fields,1,final,long,retaining,sequence,number,long,parse,long,fields,1,substring,length,assert,fields,2,matches,timestamp,d,fields,2,final,long,timestamp,long,parse,long,fields,2,substring,timestamp,length,assert,fields,3,matches,source,fields,3,final,string,source,fields,3,substring,source,length,return,new,retention,lease,id,retaining,sequence,number,timestamp,source
RetentionLease -> static RetentionLease decodeRetentionLease(final String encodedRetentionLease);1547518004;Decodes a retention lease encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param encodedRetentionLease an encoded retention lease_@return the decoded retention lease;static RetentionLease decodeRetentionLease(final String encodedRetentionLease) {_        Objects.requireNonNull(encodedRetentionLease)__        final String[] fields = encodedRetentionLease.split("_")__        assert fields.length == 4 : Arrays.toString(fields)__        assert fields[0].matches("id:[^:_,]+") : fields[0]__        final String id = fields[0].substring("id:".length())__        assert fields[1].matches("retaining_seq_no:\\d+") : fields[1]__        final long retainingSequenceNumber = Long.parseLong(fields[1].substring("retaining_seq_no:".length()))__        assert fields[2].matches("timestamp:\\d+") : fields[2]__        final long timestamp = Long.parseLong(fields[2].substring("timestamp:".length()))__        assert fields[3].matches("source:[^:_,]+") : fields[3]__        final String source = fields[3].substring("source:".length())__        return new RetentionLease(id, retainingSequenceNumber, timestamp, source)__    };decodes,a,retention,lease,encoded,by,link,encode,retention,lease,retention,lease,param,encoded,retention,lease,an,encoded,retention,lease,return,the,decoded,retention,lease;static,retention,lease,decode,retention,lease,final,string,encoded,retention,lease,objects,require,non,null,encoded,retention,lease,final,string,fields,encoded,retention,lease,split,assert,fields,length,4,arrays,to,string,fields,assert,fields,0,matches,id,fields,0,final,string,id,fields,0,substring,id,length,assert,fields,1,matches,d,fields,1,final,long,retaining,sequence,number,long,parse,long,fields,1,substring,length,assert,fields,2,matches,timestamp,d,fields,2,final,long,timestamp,long,parse,long,fields,2,substring,timestamp,length,assert,fields,3,matches,source,fields,3,final,string,source,fields,3,substring,source,length,return,new,retention,lease,id,retaining,sequence,number,timestamp,source
RetentionLease -> static RetentionLease decodeRetentionLease(final String encodedRetentionLease);1548843917;Decodes a retention lease encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param encodedRetentionLease an encoded retention lease_@return the decoded retention lease;static RetentionLease decodeRetentionLease(final String encodedRetentionLease) {_        Objects.requireNonNull(encodedRetentionLease)__        final String[] fields = encodedRetentionLease.split("_")__        assert fields.length == 4 : Arrays.toString(fields)__        assert fields[0].matches("id:[^:_,]+") : fields[0]__        final String id = fields[0].substring("id:".length())__        assert fields[1].matches("retaining_seq_no:\\d+") : fields[1]__        final long retainingSequenceNumber = Long.parseLong(fields[1].substring("retaining_seq_no:".length()))__        assert fields[2].matches("timestamp:\\d+") : fields[2]__        final long timestamp = Long.parseLong(fields[2].substring("timestamp:".length()))__        assert fields[3].matches("source:[^:_,]+") : fields[3]__        final String source = fields[3].substring("source:".length())__        return new RetentionLease(id, retainingSequenceNumber, timestamp, source)__    };decodes,a,retention,lease,encoded,by,link,encode,retention,lease,retention,lease,param,encoded,retention,lease,an,encoded,retention,lease,return,the,decoded,retention,lease;static,retention,lease,decode,retention,lease,final,string,encoded,retention,lease,objects,require,non,null,encoded,retention,lease,final,string,fields,encoded,retention,lease,split,assert,fields,length,4,arrays,to,string,fields,assert,fields,0,matches,id,fields,0,final,string,id,fields,0,substring,id,length,assert,fields,1,matches,d,fields,1,final,long,retaining,sequence,number,long,parse,long,fields,1,substring,length,assert,fields,2,matches,timestamp,d,fields,2,final,long,timestamp,long,parse,long,fields,2,substring,timestamp,length,assert,fields,3,matches,source,fields,3,final,string,source,fields,3,substring,source,length,return,new,retention,lease,id,retaining,sequence,number,timestamp,source
RetentionLease -> static RetentionLease decodeRetentionLease(final String encodedRetentionLease);1548872440;Decodes a retention lease encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param encodedRetentionLease an encoded retention lease_@return the decoded retention lease;static RetentionLease decodeRetentionLease(final String encodedRetentionLease) {_        Objects.requireNonNull(encodedRetentionLease)__        final String[] fields = encodedRetentionLease.split("_")__        assert fields.length == 4 : Arrays.toString(fields)__        assert fields[0].matches("id:[^:_,]+") : fields[0]__        final String id = fields[0].substring("id:".length())__        assert fields[1].matches("retaining_seq_no:\\d+") : fields[1]__        final long retainingSequenceNumber = Long.parseLong(fields[1].substring("retaining_seq_no:".length()))__        assert fields[2].matches("timestamp:\\d+") : fields[2]__        final long timestamp = Long.parseLong(fields[2].substring("timestamp:".length()))__        assert fields[3].matches("source:[^:_,]+") : fields[3]__        final String source = fields[3].substring("source:".length())__        return new RetentionLease(id, retainingSequenceNumber, timestamp, source)__    };decodes,a,retention,lease,encoded,by,link,encode,retention,lease,retention,lease,param,encoded,retention,lease,an,encoded,retention,lease,return,the,decoded,retention,lease;static,retention,lease,decode,retention,lease,final,string,encoded,retention,lease,objects,require,non,null,encoded,retention,lease,final,string,fields,encoded,retention,lease,split,assert,fields,length,4,arrays,to,string,fields,assert,fields,0,matches,id,fields,0,final,string,id,fields,0,substring,id,length,assert,fields,1,matches,d,fields,1,final,long,retaining,sequence,number,long,parse,long,fields,1,substring,length,assert,fields,2,matches,timestamp,d,fields,2,final,long,timestamp,long,parse,long,fields,2,substring,timestamp,length,assert,fields,3,matches,source,fields,3,final,string,source,fields,3,substring,source,length,return,new,retention,lease,id,retaining,sequence,number,timestamp,source
RetentionLease -> static RetentionLease decodeRetentionLease(final String encodedRetentionLease);1549059559;Decodes a retention lease encoded by {@link #encodeRetentionLease(RetentionLease)}.__@param encodedRetentionLease an encoded retention lease_@return the decoded retention lease;static RetentionLease decodeRetentionLease(final String encodedRetentionLease) {_        Objects.requireNonNull(encodedRetentionLease)__        final String[] fields = encodedRetentionLease.split("_")__        assert fields.length == 4 : Arrays.toString(fields)__        assert fields[0].matches("id:[^:_,]+") : fields[0]__        final String id = fields[0].substring("id:".length())__        assert fields[1].matches("retaining_seq_no:\\d+") : fields[1]__        final long retainingSequenceNumber = Long.parseLong(fields[1].substring("retaining_seq_no:".length()))__        assert fields[2].matches("timestamp:\\d+") : fields[2]__        final long timestamp = Long.parseLong(fields[2].substring("timestamp:".length()))__        assert fields[3].matches("source:[^:_,]+") : fields[3]__        final String source = fields[3].substring("source:".length())__        return new RetentionLease(id, retainingSequenceNumber, timestamp, source)__    };decodes,a,retention,lease,encoded,by,link,encode,retention,lease,retention,lease,param,encoded,retention,lease,an,encoded,retention,lease,return,the,decoded,retention,lease;static,retention,lease,decode,retention,lease,final,string,encoded,retention,lease,objects,require,non,null,encoded,retention,lease,final,string,fields,encoded,retention,lease,split,assert,fields,length,4,arrays,to,string,fields,assert,fields,0,matches,id,fields,0,final,string,id,fields,0,substring,id,length,assert,fields,1,matches,d,fields,1,final,long,retaining,sequence,number,long,parse,long,fields,1,substring,length,assert,fields,2,matches,timestamp,d,fields,2,final,long,timestamp,long,parse,long,fields,2,substring,timestamp,length,assert,fields,3,matches,source,fields,3,final,string,source,fields,3,substring,source,length,return,new,retention,lease,id,retaining,sequence,number,timestamp,source
RetentionLease -> @Override     public void writeTo(final StreamOutput out) throws IOException;1547518004;Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}.__@param out the stream to write the retention lease to_@throws IOException if an I/O exception occurs writing to the stream;@Override_    public void writeTo(final StreamOutput out) throws IOException {_        out.writeString(id)__        out.writeZLong(retainingSequenceNumber)__        out.writeVLong(timestamp)__        out.writeString(source)__    };writes,a,retention,lease,to,a,stream,in,a,manner,suitable,for,later,reconstruction,via,link,retention,lease,stream,input,param,out,the,stream,to,write,the,retention,lease,to,throws,ioexception,if,an,i,o,exception,occurs,writing,to,the,stream;override,public,void,write,to,final,stream,output,out,throws,ioexception,out,write,string,id,out,write,zlong,retaining,sequence,number,out,write,vlong,timestamp,out,write,string,source
RetentionLease -> @Override     public void writeTo(final StreamOutput out) throws IOException;1548843917;Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}.__@param out the stream to write the retention lease to_@throws IOException if an I/O exception occurs writing to the stream;@Override_    public void writeTo(final StreamOutput out) throws IOException {_        out.writeString(id)__        out.writeZLong(retainingSequenceNumber)__        out.writeVLong(timestamp)__        out.writeString(source)__    };writes,a,retention,lease,to,a,stream,in,a,manner,suitable,for,later,reconstruction,via,link,retention,lease,stream,input,param,out,the,stream,to,write,the,retention,lease,to,throws,ioexception,if,an,i,o,exception,occurs,writing,to,the,stream;override,public,void,write,to,final,stream,output,out,throws,ioexception,out,write,string,id,out,write,zlong,retaining,sequence,number,out,write,vlong,timestamp,out,write,string,source
RetentionLease -> @Override     public void writeTo(final StreamOutput out) throws IOException;1548872440;Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}.__@param out the stream to write the retention lease to_@throws IOException if an I/O exception occurs writing to the stream;@Override_    public void writeTo(final StreamOutput out) throws IOException {_        out.writeString(id)__        out.writeZLong(retainingSequenceNumber)__        out.writeVLong(timestamp)__        out.writeString(source)__    };writes,a,retention,lease,to,a,stream,in,a,manner,suitable,for,later,reconstruction,via,link,retention,lease,stream,input,param,out,the,stream,to,write,the,retention,lease,to,throws,ioexception,if,an,i,o,exception,occurs,writing,to,the,stream;override,public,void,write,to,final,stream,output,out,throws,ioexception,out,write,string,id,out,write,zlong,retaining,sequence,number,out,write,vlong,timestamp,out,write,string,source
RetentionLease -> @Override     public void writeTo(final StreamOutput out) throws IOException;1549059559;Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}.__@param out the stream to write the retention lease to_@throws IOException if an I/O exception occurs writing to the stream;@Override_    public void writeTo(final StreamOutput out) throws IOException {_        out.writeString(id)__        out.writeZLong(retainingSequenceNumber)__        out.writeVLong(timestamp)__        out.writeString(source)__    };writes,a,retention,lease,to,a,stream,in,a,manner,suitable,for,later,reconstruction,via,link,retention,lease,stream,input,param,out,the,stream,to,write,the,retention,lease,to,throws,ioexception,if,an,i,o,exception,occurs,writing,to,the,stream;override,public,void,write,to,final,stream,output,out,throws,ioexception,out,write,string,id,out,write,zlong,retaining,sequence,number,out,write,vlong,timestamp,out,write,string,source
RetentionLease -> @Override     public void writeTo(final StreamOutput out) throws IOException;1550526771;Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}.__@param out the stream to write the retention lease to_@throws IOException if an I/O exception occurs writing to the stream;@Override_    public void writeTo(final StreamOutput out) throws IOException {_        out.writeString(id)__        out.writeZLong(retainingSequenceNumber)__        out.writeVLong(timestamp)__        out.writeString(source)__    };writes,a,retention,lease,to,a,stream,in,a,manner,suitable,for,later,reconstruction,via,link,retention,lease,stream,input,param,out,the,stream,to,write,the,retention,lease,to,throws,ioexception,if,an,i,o,exception,occurs,writing,to,the,stream;override,public,void,write,to,final,stream,output,out,throws,ioexception,out,write,string,id,out,write,zlong,retaining,sequence,number,out,write,vlong,timestamp,out,write,string,source
RetentionLease -> static String encodeRetentionLease(final RetentionLease retentionLease);1547332999;Encodes a retention lease as a string. This encoding can be decoded by {@link #decodeRetentionLease(String)}. The retention lease is_encoded in the format <code>id:{id}_retaining_seq_no:{retainingSequenecNumber}_timestamp:{timestamp}_source:{source}</code>.__@param retentionLease the retention lease_@return the encoding of the retention lease;static String encodeRetentionLease(final RetentionLease retentionLease) {_        Objects.requireNonNull(retentionLease)__        return String.format(_                Locale.ROOT,_                "id:%s_retaining_seq_no:%d_timestamp:%d_source:%s",_                retentionLease.id(),_                retentionLease.retainingSequenceNumber(),_                retentionLease.timestamp(),_                retentionLease.source())__    };encodes,a,retention,lease,as,a,string,this,encoding,can,be,decoded,by,link,decode,retention,lease,string,the,retention,lease,is,encoded,in,the,format,code,id,id,retaining,sequenec,number,timestamp,timestamp,source,source,code,param,retention,lease,the,retention,lease,return,the,encoding,of,the,retention,lease;static,string,encode,retention,lease,final,retention,lease,retention,lease,objects,require,non,null,retention,lease,return,string,format,locale,root,id,s,d,timestamp,d,source,s,retention,lease,id,retention,lease,retaining,sequence,number,retention,lease,timestamp,retention,lease,source
RetentionLease -> static String encodeRetentionLease(final RetentionLease retentionLease);1547518004;Encodes a retention lease as a string. This encoding can be decoded by {@link #decodeRetentionLease(String)}. The retention lease is_encoded in the format <code>id:{id}_retaining_seq_no:{retainingSequenecNumber}_timestamp:{timestamp}_source:{source}</code>.__@param retentionLease the retention lease_@return the encoding of the retention lease;static String encodeRetentionLease(final RetentionLease retentionLease) {_        Objects.requireNonNull(retentionLease)__        return String.format(_                Locale.ROOT,_                "id:%s_retaining_seq_no:%d_timestamp:%d_source:%s",_                retentionLease.id(),_                retentionLease.retainingSequenceNumber(),_                retentionLease.timestamp(),_                retentionLease.source())__    };encodes,a,retention,lease,as,a,string,this,encoding,can,be,decoded,by,link,decode,retention,lease,string,the,retention,lease,is,encoded,in,the,format,code,id,id,retaining,sequenec,number,timestamp,timestamp,source,source,code,param,retention,lease,the,retention,lease,return,the,encoding,of,the,retention,lease;static,string,encode,retention,lease,final,retention,lease,retention,lease,objects,require,non,null,retention,lease,return,string,format,locale,root,id,s,d,timestamp,d,source,s,retention,lease,id,retention,lease,retaining,sequence,number,retention,lease,timestamp,retention,lease,source
RetentionLease -> static String encodeRetentionLease(final RetentionLease retentionLease);1548843917;Encodes a retention lease as a string. This encoding can be decoded by {@link #decodeRetentionLease(String)}. The retention lease is_encoded in the format <code>id:{id}_retaining_seq_no:{retainingSequenecNumber}_timestamp:{timestamp}_source:{source}</code>.__@param retentionLease the retention lease_@return the encoding of the retention lease;static String encodeRetentionLease(final RetentionLease retentionLease) {_        Objects.requireNonNull(retentionLease)__        return String.format(_                Locale.ROOT,_                "id:%s_retaining_seq_no:%d_timestamp:%d_source:%s",_                retentionLease.id(),_                retentionLease.retainingSequenceNumber(),_                retentionLease.timestamp(),_                retentionLease.source())__    };encodes,a,retention,lease,as,a,string,this,encoding,can,be,decoded,by,link,decode,retention,lease,string,the,retention,lease,is,encoded,in,the,format,code,id,id,retaining,sequenec,number,timestamp,timestamp,source,source,code,param,retention,lease,the,retention,lease,return,the,encoding,of,the,retention,lease;static,string,encode,retention,lease,final,retention,lease,retention,lease,objects,require,non,null,retention,lease,return,string,format,locale,root,id,s,d,timestamp,d,source,s,retention,lease,id,retention,lease,retaining,sequence,number,retention,lease,timestamp,retention,lease,source
RetentionLease -> static String encodeRetentionLease(final RetentionLease retentionLease);1548872440;Encodes a retention lease as a string. This encoding can be decoded by {@link #decodeRetentionLease(String)}. The retention lease is_encoded in the format <code>id:{id}_retaining_seq_no:{retainingSequenecNumber}_timestamp:{timestamp}_source:{source}</code>.__@param retentionLease the retention lease_@return the encoding of the retention lease;static String encodeRetentionLease(final RetentionLease retentionLease) {_        Objects.requireNonNull(retentionLease)__        return String.format(_                Locale.ROOT,_                "id:%s_retaining_seq_no:%d_timestamp:%d_source:%s",_                retentionLease.id(),_                retentionLease.retainingSequenceNumber(),_                retentionLease.timestamp(),_                retentionLease.source())__    };encodes,a,retention,lease,as,a,string,this,encoding,can,be,decoded,by,link,decode,retention,lease,string,the,retention,lease,is,encoded,in,the,format,code,id,id,retaining,sequenec,number,timestamp,timestamp,source,source,code,param,retention,lease,the,retention,lease,return,the,encoding,of,the,retention,lease;static,string,encode,retention,lease,final,retention,lease,retention,lease,objects,require,non,null,retention,lease,return,string,format,locale,root,id,s,d,timestamp,d,source,s,retention,lease,id,retention,lease,retaining,sequence,number,retention,lease,timestamp,retention,lease,source
RetentionLease -> static String encodeRetentionLease(final RetentionLease retentionLease);1549059559;Encodes a retention lease as a string. This encoding can be decoded by {@link #decodeRetentionLease(String)}. The retention lease is_encoded in the format <code>id:{id}_retaining_seq_no:{retainingSequenecNumber}_timestamp:{timestamp}_source:{source}</code>.__@param retentionLease the retention lease_@return the encoding of the retention lease;static String encodeRetentionLease(final RetentionLease retentionLease) {_        Objects.requireNonNull(retentionLease)__        return String.format(_                Locale.ROOT,_                "id:%s_retaining_seq_no:%d_timestamp:%d_source:%s",_                retentionLease.id,_                retentionLease.retainingSequenceNumber,_                retentionLease.timestamp,_                retentionLease.source)__    };encodes,a,retention,lease,as,a,string,this,encoding,can,be,decoded,by,link,decode,retention,lease,string,the,retention,lease,is,encoded,in,the,format,code,id,id,retaining,sequenec,number,timestamp,timestamp,source,source,code,param,retention,lease,the,retention,lease,return,the,encoding,of,the,retention,lease;static,string,encode,retention,lease,final,retention,lease,retention,lease,objects,require,non,null,retention,lease,return,string,format,locale,root,id,s,d,timestamp,d,source,s,retention,lease,id,retention,lease,retaining,sequence,number,retention,lease,timestamp,retention,lease,source
RetentionLease -> public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source);1546927432;Constructs a new retention lease.__@param id                      the identifier of the retention lease_@param retainingSequenceNumber the retaining sequence number_@param timestamp               the timestamp of when the retention lease was created or renewed_@param source                  the source of the retention lease;public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source) {_        this.id = id__        this.retainingSequenceNumber = retainingSequenceNumber__        this.timestamp = timestamp__        this.source = source__    };constructs,a,new,retention,lease,param,id,the,identifier,of,the,retention,lease,param,retaining,sequence,number,the,retaining,sequence,number,param,timestamp,the,timestamp,of,when,the,retention,lease,was,created,or,renewed,param,source,the,source,of,the,retention,lease;public,retention,lease,final,string,id,final,long,retaining,sequence,number,final,long,timestamp,final,string,source,this,id,id,this,retaining,sequence,number,retaining,sequence,number,this,timestamp,timestamp,this,source,source
RetentionLease -> public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source);1547172785;Constructs a new retention lease.__@param id                      the identifier of the retention lease_@param retainingSequenceNumber the retaining sequence number_@param timestamp               the timestamp of when the retention lease was created or renewed_@param source                  the source of the retention lease;public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source) {_        if (retainingSequenceNumber < SequenceNumbers.UNASSIGNED_SEQ_NO) {_            throw new IllegalArgumentException("retention lease retaining sequence number [" + retainingSequenceNumber + "] out of range")__        }_        if (timestamp < 0) {_            throw new IllegalArgumentException("retention lease timestamp [" + timestamp + "] out of range")__        }_        this.id = id__        this.retainingSequenceNumber = retainingSequenceNumber__        this.timestamp = timestamp__        this.source = source__    };constructs,a,new,retention,lease,param,id,the,identifier,of,the,retention,lease,param,retaining,sequence,number,the,retaining,sequence,number,param,timestamp,the,timestamp,of,when,the,retention,lease,was,created,or,renewed,param,source,the,source,of,the,retention,lease;public,retention,lease,final,string,id,final,long,retaining,sequence,number,final,long,timestamp,final,string,source,if,retaining,sequence,number,sequence,numbers,throw,new,illegal,argument,exception,retention,lease,retaining,sequence,number,retaining,sequence,number,out,of,range,if,timestamp,0,throw,new,illegal,argument,exception,retention,lease,timestamp,timestamp,out,of,range,this,id,id,this,retaining,sequence,number,retaining,sequence,number,this,timestamp,timestamp,this,source,source
RetentionLease -> public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source);1547332999;Constructs a new retention lease.__@param id                      the identifier of the retention lease_@param retainingSequenceNumber the retaining sequence number_@param timestamp               the timestamp of when the retention lease was created or renewed_@param source                  the source of the retention lease;public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source) {_        Objects.requireNonNull(id)__        if (id.isEmpty()) {_            throw new IllegalArgumentException("retention lease ID can not be empty")__        }_        if (id.contains(":") || id.contains("_") || id.contains(",")) {_            _            throw new IllegalArgumentException("retention lease ID can not contain any of [:_,] but was [" + id + "]")__        }_        if (retainingSequenceNumber < SequenceNumbers.UNASSIGNED_SEQ_NO) {_            throw new IllegalArgumentException("retention lease retaining sequence number [" + retainingSequenceNumber + "] out of range")__        }_        if (timestamp < 0) {_            throw new IllegalArgumentException("retention lease timestamp [" + timestamp + "] out of range")__        }_        Objects.requireNonNull(source)__        if (source.isEmpty()) {_            throw new IllegalArgumentException("retention lease source can not be empty")__        }_        if (source.contains(":") || source.contains("_") || source.contains(",")) {_            _            throw new IllegalArgumentException("retention lease source can not contain any of [:_,] but was [" + source + "]")__        }_        this.id = id__        this.retainingSequenceNumber = retainingSequenceNumber__        this.timestamp = timestamp__        this.source = source__    };constructs,a,new,retention,lease,param,id,the,identifier,of,the,retention,lease,param,retaining,sequence,number,the,retaining,sequence,number,param,timestamp,the,timestamp,of,when,the,retention,lease,was,created,or,renewed,param,source,the,source,of,the,retention,lease;public,retention,lease,final,string,id,final,long,retaining,sequence,number,final,long,timestamp,final,string,source,objects,require,non,null,id,if,id,is,empty,throw,new,illegal,argument,exception,retention,lease,id,can,not,be,empty,if,id,contains,id,contains,id,contains,throw,new,illegal,argument,exception,retention,lease,id,can,not,contain,any,of,but,was,id,if,retaining,sequence,number,sequence,numbers,throw,new,illegal,argument,exception,retention,lease,retaining,sequence,number,retaining,sequence,number,out,of,range,if,timestamp,0,throw,new,illegal,argument,exception,retention,lease,timestamp,timestamp,out,of,range,objects,require,non,null,source,if,source,is,empty,throw,new,illegal,argument,exception,retention,lease,source,can,not,be,empty,if,source,contains,source,contains,source,contains,throw,new,illegal,argument,exception,retention,lease,source,can,not,contain,any,of,but,was,source,this,id,id,this,retaining,sequence,number,retaining,sequence,number,this,timestamp,timestamp,this,source,source
RetentionLease -> public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source);1547518004;Constructs a new retention lease.__@param id                      the identifier of the retention lease_@param retainingSequenceNumber the retaining sequence number_@param timestamp               the timestamp of when the retention lease was created or renewed_@param source                  the source of the retention lease;public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source) {_        Objects.requireNonNull(id)__        if (id.isEmpty()) {_            throw new IllegalArgumentException("retention lease ID can not be empty")__        }_        if (id.contains(":") || id.contains("_") || id.contains(",")) {_            _            throw new IllegalArgumentException("retention lease ID can not contain any of [:_,] but was [" + id + "]")__        }_        if (retainingSequenceNumber < SequenceNumbers.UNASSIGNED_SEQ_NO) {_            throw new IllegalArgumentException("retention lease retaining sequence number [" + retainingSequenceNumber + "] out of range")__        }_        if (timestamp < 0) {_            throw new IllegalArgumentException("retention lease timestamp [" + timestamp + "] out of range")__        }_        Objects.requireNonNull(source)__        if (source.isEmpty()) {_            throw new IllegalArgumentException("retention lease source can not be empty")__        }_        if (source.contains(":") || source.contains("_") || source.contains(",")) {_            _            throw new IllegalArgumentException("retention lease source can not contain any of [:_,] but was [" + source + "]")__        }_        this.id = id__        this.retainingSequenceNumber = retainingSequenceNumber__        this.timestamp = timestamp__        this.source = source__    };constructs,a,new,retention,lease,param,id,the,identifier,of,the,retention,lease,param,retaining,sequence,number,the,retaining,sequence,number,param,timestamp,the,timestamp,of,when,the,retention,lease,was,created,or,renewed,param,source,the,source,of,the,retention,lease;public,retention,lease,final,string,id,final,long,retaining,sequence,number,final,long,timestamp,final,string,source,objects,require,non,null,id,if,id,is,empty,throw,new,illegal,argument,exception,retention,lease,id,can,not,be,empty,if,id,contains,id,contains,id,contains,throw,new,illegal,argument,exception,retention,lease,id,can,not,contain,any,of,but,was,id,if,retaining,sequence,number,sequence,numbers,throw,new,illegal,argument,exception,retention,lease,retaining,sequence,number,retaining,sequence,number,out,of,range,if,timestamp,0,throw,new,illegal,argument,exception,retention,lease,timestamp,timestamp,out,of,range,objects,require,non,null,source,if,source,is,empty,throw,new,illegal,argument,exception,retention,lease,source,can,not,be,empty,if,source,contains,source,contains,source,contains,throw,new,illegal,argument,exception,retention,lease,source,can,not,contain,any,of,but,was,source,this,id,id,this,retaining,sequence,number,retaining,sequence,number,this,timestamp,timestamp,this,source,source
RetentionLease -> public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source);1548843917;Constructs a new retention lease.__@param id                      the identifier of the retention lease_@param retainingSequenceNumber the retaining sequence number_@param timestamp               the timestamp of when the retention lease was created or renewed_@param source                  the source of the retention lease;public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source) {_        Objects.requireNonNull(id)__        if (id.isEmpty()) {_            throw new IllegalArgumentException("retention lease ID can not be empty")__        }_        if (id.contains(":") || id.contains("_") || id.contains(",")) {_            _            throw new IllegalArgumentException("retention lease ID can not contain any of [:_,] but was [" + id + "]")__        }_        if (retainingSequenceNumber < 0) {_            throw new IllegalArgumentException("retention lease retaining sequence number [" + retainingSequenceNumber + "] out of range")__        }_        if (timestamp < 0) {_            throw new IllegalArgumentException("retention lease timestamp [" + timestamp + "] out of range")__        }_        Objects.requireNonNull(source)__        if (source.isEmpty()) {_            throw new IllegalArgumentException("retention lease source can not be empty")__        }_        if (source.contains(":") || source.contains("_") || source.contains(",")) {_            _            throw new IllegalArgumentException("retention lease source can not contain any of [:_,] but was [" + source + "]")__        }_        this.id = id__        this.retainingSequenceNumber = retainingSequenceNumber__        this.timestamp = timestamp__        this.source = source__    };constructs,a,new,retention,lease,param,id,the,identifier,of,the,retention,lease,param,retaining,sequence,number,the,retaining,sequence,number,param,timestamp,the,timestamp,of,when,the,retention,lease,was,created,or,renewed,param,source,the,source,of,the,retention,lease;public,retention,lease,final,string,id,final,long,retaining,sequence,number,final,long,timestamp,final,string,source,objects,require,non,null,id,if,id,is,empty,throw,new,illegal,argument,exception,retention,lease,id,can,not,be,empty,if,id,contains,id,contains,id,contains,throw,new,illegal,argument,exception,retention,lease,id,can,not,contain,any,of,but,was,id,if,retaining,sequence,number,0,throw,new,illegal,argument,exception,retention,lease,retaining,sequence,number,retaining,sequence,number,out,of,range,if,timestamp,0,throw,new,illegal,argument,exception,retention,lease,timestamp,timestamp,out,of,range,objects,require,non,null,source,if,source,is,empty,throw,new,illegal,argument,exception,retention,lease,source,can,not,be,empty,if,source,contains,source,contains,source,contains,throw,new,illegal,argument,exception,retention,lease,source,can,not,contain,any,of,but,was,source,this,id,id,this,retaining,sequence,number,retaining,sequence,number,this,timestamp,timestamp,this,source,source
RetentionLease -> public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source);1548872440;Constructs a new retention lease.__@param id                      the identifier of the retention lease_@param retainingSequenceNumber the retaining sequence number_@param timestamp               the timestamp of when the retention lease was created or renewed_@param source                  the source of the retention lease;public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source) {_        Objects.requireNonNull(id)__        if (id.isEmpty()) {_            throw new IllegalArgumentException("retention lease ID can not be empty")__        }_        if (id.contains(":") || id.contains("_") || id.contains(",")) {_            _            throw new IllegalArgumentException("retention lease ID can not contain any of [:_,] but was [" + id + "]")__        }_        if (retainingSequenceNumber < 0) {_            throw new IllegalArgumentException("retention lease retaining sequence number [" + retainingSequenceNumber + "] out of range")__        }_        if (timestamp < 0) {_            throw new IllegalArgumentException("retention lease timestamp [" + timestamp + "] out of range")__        }_        Objects.requireNonNull(source)__        if (source.isEmpty()) {_            throw new IllegalArgumentException("retention lease source can not be empty")__        }_        if (source.contains(":") || source.contains("_") || source.contains(",")) {_            _            throw new IllegalArgumentException("retention lease source can not contain any of [:_,] but was [" + source + "]")__        }_        this.id = id__        this.retainingSequenceNumber = retainingSequenceNumber__        this.timestamp = timestamp__        this.source = source__    };constructs,a,new,retention,lease,param,id,the,identifier,of,the,retention,lease,param,retaining,sequence,number,the,retaining,sequence,number,param,timestamp,the,timestamp,of,when,the,retention,lease,was,created,or,renewed,param,source,the,source,of,the,retention,lease;public,retention,lease,final,string,id,final,long,retaining,sequence,number,final,long,timestamp,final,string,source,objects,require,non,null,id,if,id,is,empty,throw,new,illegal,argument,exception,retention,lease,id,can,not,be,empty,if,id,contains,id,contains,id,contains,throw,new,illegal,argument,exception,retention,lease,id,can,not,contain,any,of,but,was,id,if,retaining,sequence,number,0,throw,new,illegal,argument,exception,retention,lease,retaining,sequence,number,retaining,sequence,number,out,of,range,if,timestamp,0,throw,new,illegal,argument,exception,retention,lease,timestamp,timestamp,out,of,range,objects,require,non,null,source,if,source,is,empty,throw,new,illegal,argument,exception,retention,lease,source,can,not,be,empty,if,source,contains,source,contains,source,contains,throw,new,illegal,argument,exception,retention,lease,source,can,not,contain,any,of,but,was,source,this,id,id,this,retaining,sequence,number,retaining,sequence,number,this,timestamp,timestamp,this,source,source
RetentionLease -> public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source);1549059559;Constructs a new retention lease.__@param id                      the identifier of the retention lease_@param retainingSequenceNumber the retaining sequence number_@param timestamp               the timestamp of when the retention lease was created or renewed_@param source                  the source of the retention lease;public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source) {_        Objects.requireNonNull(id)__        if (id.isEmpty()) {_            throw new IllegalArgumentException("retention lease ID can not be empty")__        }_        if (id.contains(":") || id.contains("_") || id.contains(",")) {_            _            throw new IllegalArgumentException("retention lease ID can not contain any of [:_,] but was [" + id + "]")__        }_        if (retainingSequenceNumber < 0) {_            throw new IllegalArgumentException("retention lease retaining sequence number [" + retainingSequenceNumber + "] out of range")__        }_        if (timestamp < 0) {_            throw new IllegalArgumentException("retention lease timestamp [" + timestamp + "] out of range")__        }_        Objects.requireNonNull(source)__        if (source.isEmpty()) {_            throw new IllegalArgumentException("retention lease source can not be empty")__        }_        if (source.contains(":") || source.contains("_") || source.contains(",")) {_            _            throw new IllegalArgumentException("retention lease source can not contain any of [:_,] but was [" + source + "]")__        }_        this.id = id__        this.retainingSequenceNumber = retainingSequenceNumber__        this.timestamp = timestamp__        this.source = source__    };constructs,a,new,retention,lease,param,id,the,identifier,of,the,retention,lease,param,retaining,sequence,number,the,retaining,sequence,number,param,timestamp,the,timestamp,of,when,the,retention,lease,was,created,or,renewed,param,source,the,source,of,the,retention,lease;public,retention,lease,final,string,id,final,long,retaining,sequence,number,final,long,timestamp,final,string,source,objects,require,non,null,id,if,id,is,empty,throw,new,illegal,argument,exception,retention,lease,id,can,not,be,empty,if,id,contains,id,contains,id,contains,throw,new,illegal,argument,exception,retention,lease,id,can,not,contain,any,of,but,was,id,if,retaining,sequence,number,0,throw,new,illegal,argument,exception,retention,lease,retaining,sequence,number,retaining,sequence,number,out,of,range,if,timestamp,0,throw,new,illegal,argument,exception,retention,lease,timestamp,timestamp,out,of,range,objects,require,non,null,source,if,source,is,empty,throw,new,illegal,argument,exception,retention,lease,source,can,not,be,empty,if,source,contains,source,contains,source,contains,throw,new,illegal,argument,exception,retention,lease,source,can,not,contain,any,of,but,was,source,this,id,id,this,retaining,sequence,number,retaining,sequence,number,this,timestamp,timestamp,this,source,source
RetentionLease -> public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source);1550526771;Constructs a new retention lease.__@param id                      the identifier of the retention lease_@param retainingSequenceNumber the retaining sequence number_@param timestamp               the timestamp of when the retention lease was created or renewed_@param source                  the source of the retention lease;public RetentionLease(final String id, final long retainingSequenceNumber, final long timestamp, final String source) {_        Objects.requireNonNull(id)__        if (id.isEmpty()) {_            throw new IllegalArgumentException("retention lease ID can not be empty")__        }_        if (retainingSequenceNumber < 0) {_            throw new IllegalArgumentException("retention lease retaining sequence number [" + retainingSequenceNumber + "] out of range")__        }_        if (timestamp < 0) {_            throw new IllegalArgumentException("retention lease timestamp [" + timestamp + "] out of range")__        }_        Objects.requireNonNull(source)__        if (source.isEmpty()) {_            throw new IllegalArgumentException("retention lease source can not be empty")__        }_        this.id = id__        this.retainingSequenceNumber = retainingSequenceNumber__        this.timestamp = timestamp__        this.source = source__    };constructs,a,new,retention,lease,param,id,the,identifier,of,the,retention,lease,param,retaining,sequence,number,the,retaining,sequence,number,param,timestamp,the,timestamp,of,when,the,retention,lease,was,created,or,renewed,param,source,the,source,of,the,retention,lease;public,retention,lease,final,string,id,final,long,retaining,sequence,number,final,long,timestamp,final,string,source,objects,require,non,null,id,if,id,is,empty,throw,new,illegal,argument,exception,retention,lease,id,can,not,be,empty,if,retaining,sequence,number,0,throw,new,illegal,argument,exception,retention,lease,retaining,sequence,number,retaining,sequence,number,out,of,range,if,timestamp,0,throw,new,illegal,argument,exception,retention,lease,timestamp,timestamp,out,of,range,objects,require,non,null,source,if,source,is,empty,throw,new,illegal,argument,exception,retention,lease,source,can,not,be,empty,this,id,id,this,retaining,sequence,number,retaining,sequence,number,this,timestamp,timestamp,this,source,source
RetentionLease -> public static Collection<RetentionLease> decodeRetentionLeases(final String encodedRetentionLeases);1547332999;Decodes retention leases encoded by {@link #encodeRetentionLeases(Collection)}.__@param encodedRetentionLeases an encoded collection of retention leases_@return the decoded retention leases;public static Collection<RetentionLease> decodeRetentionLeases(final String encodedRetentionLeases) {_        Objects.requireNonNull(encodedRetentionLeases)__        if (encodedRetentionLeases.isEmpty()) {_            return Collections.emptyList()__        }_        assert Arrays.stream(encodedRetentionLeases.split(","))_                .allMatch(s -> s.matches("id:[^:_,]+_retaining_seq_no:\\d+_timestamp:\\d+_source:[^:_,]+"))_                : encodedRetentionLeases__        return Arrays.stream(encodedRetentionLeases.split(",")).map(RetentionLease::decodeRetentionLease).collect(Collectors.toList())__    };decodes,retention,leases,encoded,by,link,encode,retention,leases,collection,param,encoded,retention,leases,an,encoded,collection,of,retention,leases,return,the,decoded,retention,leases;public,static,collection,retention,lease,decode,retention,leases,final,string,encoded,retention,leases,objects,require,non,null,encoded,retention,leases,if,encoded,retention,leases,is,empty,return,collections,empty,list,assert,arrays,stream,encoded,retention,leases,split,all,match,s,s,matches,id,d,timestamp,d,source,encoded,retention,leases,return,arrays,stream,encoded,retention,leases,split,map,retention,lease,decode,retention,lease,collect,collectors,to,list
RetentionLease -> public static Collection<RetentionLease> decodeRetentionLeases(final String encodedRetentionLeases);1547518004;Decodes retention leases encoded by {@link #encodeRetentionLeases(Collection)}.__@param encodedRetentionLeases an encoded collection of retention leases_@return the decoded retention leases;public static Collection<RetentionLease> decodeRetentionLeases(final String encodedRetentionLeases) {_        Objects.requireNonNull(encodedRetentionLeases)__        if (encodedRetentionLeases.isEmpty()) {_            return Collections.emptyList()__        }_        assert Arrays.stream(encodedRetentionLeases.split(","))_                .allMatch(s -> s.matches("id:[^:_,]+_retaining_seq_no:\\d+_timestamp:\\d+_source:[^:_,]+"))_                : encodedRetentionLeases__        return Arrays.stream(encodedRetentionLeases.split(",")).map(RetentionLease::decodeRetentionLease).collect(Collectors.toList())__    };decodes,retention,leases,encoded,by,link,encode,retention,leases,collection,param,encoded,retention,leases,an,encoded,collection,of,retention,leases,return,the,decoded,retention,leases;public,static,collection,retention,lease,decode,retention,leases,final,string,encoded,retention,leases,objects,require,non,null,encoded,retention,leases,if,encoded,retention,leases,is,empty,return,collections,empty,list,assert,arrays,stream,encoded,retention,leases,split,all,match,s,s,matches,id,d,timestamp,d,source,encoded,retention,leases,return,arrays,stream,encoded,retention,leases,split,map,retention,lease,decode,retention,lease,collect,collectors,to,list
RetentionLease -> public static Collection<RetentionLease> decodeRetentionLeases(final String encodedRetentionLeases);1548843917;Decodes retention leases encoded by {@link #encodeRetentionLeases(Collection)}.__@param encodedRetentionLeases an encoded collection of retention leases_@return the decoded retention leases;public static Collection<RetentionLease> decodeRetentionLeases(final String encodedRetentionLeases) {_        Objects.requireNonNull(encodedRetentionLeases)__        if (encodedRetentionLeases.isEmpty()) {_            return Collections.emptyList()__        }_        assert Arrays.stream(encodedRetentionLeases.split(","))_                .allMatch(s -> s.matches("id:[^:_,]+_retaining_seq_no:\\d+_timestamp:\\d+_source:[^:_,]+"))_                : encodedRetentionLeases__        return Arrays.stream(encodedRetentionLeases.split(",")).map(RetentionLease::decodeRetentionLease).collect(Collectors.toList())__    };decodes,retention,leases,encoded,by,link,encode,retention,leases,collection,param,encoded,retention,leases,an,encoded,collection,of,retention,leases,return,the,decoded,retention,leases;public,static,collection,retention,lease,decode,retention,leases,final,string,encoded,retention,leases,objects,require,non,null,encoded,retention,leases,if,encoded,retention,leases,is,empty,return,collections,empty,list,assert,arrays,stream,encoded,retention,leases,split,all,match,s,s,matches,id,d,timestamp,d,source,encoded,retention,leases,return,arrays,stream,encoded,retention,leases,split,map,retention,lease,decode,retention,lease,collect,collectors,to,list
RetentionLease -> public static Collection<RetentionLease> decodeRetentionLeases(final String encodedRetentionLeases);1548872440;Decodes retention leases encoded by {@link #encodeRetentionLeases(Collection)}.__@param encodedRetentionLeases an encoded collection of retention leases_@return the decoded retention leases;public static Collection<RetentionLease> decodeRetentionLeases(final String encodedRetentionLeases) {_        Objects.requireNonNull(encodedRetentionLeases)__        if (encodedRetentionLeases.isEmpty()) {_            return Collections.emptyList()__        }_        assert Arrays.stream(encodedRetentionLeases.split(","))_                .allMatch(s -> s.matches("id:[^:_,]+_retaining_seq_no:\\d+_timestamp:\\d+_source:[^:_,]+"))_                : encodedRetentionLeases__        return Arrays.stream(encodedRetentionLeases.split(",")).map(RetentionLease::decodeRetentionLease).collect(Collectors.toList())__    };decodes,retention,leases,encoded,by,link,encode,retention,leases,collection,param,encoded,retention,leases,an,encoded,collection,of,retention,leases,return,the,decoded,retention,leases;public,static,collection,retention,lease,decode,retention,leases,final,string,encoded,retention,leases,objects,require,non,null,encoded,retention,leases,if,encoded,retention,leases,is,empty,return,collections,empty,list,assert,arrays,stream,encoded,retention,leases,split,all,match,s,s,matches,id,d,timestamp,d,source,encoded,retention,leases,return,arrays,stream,encoded,retention,leases,split,map,retention,lease,decode,retention,lease,collect,collectors,to,list
RetentionLease -> public long timestamp();1546927432;The timestamp of when this retention lease was created or renewed.__@return the timestamp used as a basis for determining lease expiration;public long timestamp() {_        return timestamp__    };the,timestamp,of,when,this,retention,lease,was,created,or,renewed,return,the,timestamp,used,as,a,basis,for,determining,lease,expiration;public,long,timestamp,return,timestamp
RetentionLease -> public long timestamp();1547172785;The timestamp of when this retention lease was created or renewed.__@return the timestamp used as a basis for determining lease expiration;public long timestamp() {_        return timestamp__    };the,timestamp,of,when,this,retention,lease,was,created,or,renewed,return,the,timestamp,used,as,a,basis,for,determining,lease,expiration;public,long,timestamp,return,timestamp
RetentionLease -> public long timestamp();1547332999;The timestamp of when this retention lease was created or renewed.__@return the timestamp used as a basis for determining lease expiration;public long timestamp() {_        return timestamp__    };the,timestamp,of,when,this,retention,lease,was,created,or,renewed,return,the,timestamp,used,as,a,basis,for,determining,lease,expiration;public,long,timestamp,return,timestamp
RetentionLease -> public long timestamp();1547518004;The timestamp of when this retention lease was created or renewed.__@return the timestamp used as a basis for determining lease expiration;public long timestamp() {_        return timestamp__    };the,timestamp,of,when,this,retention,lease,was,created,or,renewed,return,the,timestamp,used,as,a,basis,for,determining,lease,expiration;public,long,timestamp,return,timestamp
RetentionLease -> public long timestamp();1548843917;The timestamp of when this retention lease was created or renewed.__@return the timestamp used as a basis for determining lease expiration;public long timestamp() {_        return timestamp__    };the,timestamp,of,when,this,retention,lease,was,created,or,renewed,return,the,timestamp,used,as,a,basis,for,determining,lease,expiration;public,long,timestamp,return,timestamp
RetentionLease -> public long timestamp();1548872440;The timestamp of when this retention lease was created or renewed.__@return the timestamp used as a basis for determining lease expiration;public long timestamp() {_        return timestamp__    };the,timestamp,of,when,this,retention,lease,was,created,or,renewed,return,the,timestamp,used,as,a,basis,for,determining,lease,expiration;public,long,timestamp,return,timestamp
RetentionLease -> public long timestamp();1549059559;The timestamp of when this retention lease was created or renewed.__@return the timestamp used as a basis for determining lease expiration;public long timestamp() {_        return timestamp__    };the,timestamp,of,when,this,retention,lease,was,created,or,renewed,return,the,timestamp,used,as,a,basis,for,determining,lease,expiration;public,long,timestamp,return,timestamp
RetentionLease -> public long timestamp();1550526771;The timestamp of when this retention lease was created or renewed.__@return the timestamp used as a basis for determining lease expiration;public long timestamp() {_        return timestamp__    };the,timestamp,of,when,this,retention,lease,was,created,or,renewed,return,the,timestamp,used,as,a,basis,for,determining,lease,expiration;public,long,timestamp,return,timestamp
RetentionLease -> public long retainingSequenceNumber();1546875837;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public long retainingSequenceNumber();1546927432;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public long retainingSequenceNumber();1547172785;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public long retainingSequenceNumber();1547332999;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public long retainingSequenceNumber();1547518004;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public long retainingSequenceNumber();1548843917;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public long retainingSequenceNumber();1548872440;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public long retainingSequenceNumber();1549059559;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public long retainingSequenceNumber();1550526771;The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this_retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.__@return the retaining sequence number;public long retainingSequenceNumber() {_        return retainingSequenceNumber__    };the,retaining,sequence,number,of,this,retention,lease,the,retaining,sequence,number,is,the,minimum,sequence,number,that,this,retention,lease,wants,to,retain,during,merge,operations,the,retaining,sequence,number,is,set,during,construction,by,the,caller,return,the,retaining,sequence,number;public,long,retaining,sequence,number,return,retaining,sequence,number
RetentionLease -> public RetentionLease(final StreamInput in) throws IOException;1547518004;Constructs a new retention lease from a stream. The retention lease should have been written via {@link #writeTo(StreamOutput)}.__@param in the stream to construct the retention lease from_@throws IOException if an I/O exception occurs reading from the stream;public RetentionLease(final StreamInput in) throws IOException {_        id = in.readString()__        retainingSequenceNumber = in.readZLong()__        timestamp = in.readVLong()__        source = in.readString()__    };constructs,a,new,retention,lease,from,a,stream,the,retention,lease,should,have,been,written,via,link,write,to,stream,output,param,in,the,stream,to,construct,the,retention,lease,from,throws,ioexception,if,an,i,o,exception,occurs,reading,from,the,stream;public,retention,lease,final,stream,input,in,throws,ioexception,id,in,read,string,retaining,sequence,number,in,read,zlong,timestamp,in,read,vlong,source,in,read,string
RetentionLease -> public RetentionLease(final StreamInput in) throws IOException;1548843917;Constructs a new retention lease from a stream. The retention lease should have been written via {@link #writeTo(StreamOutput)}.__@param in the stream to construct the retention lease from_@throws IOException if an I/O exception occurs reading from the stream;public RetentionLease(final StreamInput in) throws IOException {_        id = in.readString()__        retainingSequenceNumber = in.readZLong()__        timestamp = in.readVLong()__        source = in.readString()__    };constructs,a,new,retention,lease,from,a,stream,the,retention,lease,should,have,been,written,via,link,write,to,stream,output,param,in,the,stream,to,construct,the,retention,lease,from,throws,ioexception,if,an,i,o,exception,occurs,reading,from,the,stream;public,retention,lease,final,stream,input,in,throws,ioexception,id,in,read,string,retaining,sequence,number,in,read,zlong,timestamp,in,read,vlong,source,in,read,string
RetentionLease -> public RetentionLease(final StreamInput in) throws IOException;1548872440;Constructs a new retention lease from a stream. The retention lease should have been written via {@link #writeTo(StreamOutput)}.__@param in the stream to construct the retention lease from_@throws IOException if an I/O exception occurs reading from the stream;public RetentionLease(final StreamInput in) throws IOException {_        id = in.readString()__        retainingSequenceNumber = in.readZLong()__        timestamp = in.readVLong()__        source = in.readString()__    };constructs,a,new,retention,lease,from,a,stream,the,retention,lease,should,have,been,written,via,link,write,to,stream,output,param,in,the,stream,to,construct,the,retention,lease,from,throws,ioexception,if,an,i,o,exception,occurs,reading,from,the,stream;public,retention,lease,final,stream,input,in,throws,ioexception,id,in,read,string,retaining,sequence,number,in,read,zlong,timestamp,in,read,vlong,source,in,read,string
RetentionLease -> public RetentionLease(final StreamInput in) throws IOException;1549059559;Constructs a new retention lease from a stream. The retention lease should have been written via {@link #writeTo(StreamOutput)}.__@param in the stream to construct the retention lease from_@throws IOException if an I/O exception occurs reading from the stream;public RetentionLease(final StreamInput in) throws IOException {_        id = in.readString()__        retainingSequenceNumber = in.readZLong()__        timestamp = in.readVLong()__        source = in.readString()__    };constructs,a,new,retention,lease,from,a,stream,the,retention,lease,should,have,been,written,via,link,write,to,stream,output,param,in,the,stream,to,construct,the,retention,lease,from,throws,ioexception,if,an,i,o,exception,occurs,reading,from,the,stream;public,retention,lease,final,stream,input,in,throws,ioexception,id,in,read,string,retaining,sequence,number,in,read,zlong,timestamp,in,read,vlong,source,in,read,string
RetentionLease -> public RetentionLease(final StreamInput in) throws IOException;1550526771;Constructs a new retention lease from a stream. The retention lease should have been written via {@link #writeTo(StreamOutput)}.__@param in the stream to construct the retention lease from_@throws IOException if an I/O exception occurs reading from the stream;public RetentionLease(final StreamInput in) throws IOException {_        id = in.readString()__        retainingSequenceNumber = in.readZLong()__        timestamp = in.readVLong()__        source = in.readString()__    };constructs,a,new,retention,lease,from,a,stream,the,retention,lease,should,have,been,written,via,link,write,to,stream,output,param,in,the,stream,to,construct,the,retention,lease,from,throws,ioexception,if,an,i,o,exception,occurs,reading,from,the,stream;public,retention,lease,final,stream,input,in,throws,ioexception,id,in,read,string,retaining,sequence,number,in,read,zlong,timestamp,in,read,vlong,source,in,read,string
