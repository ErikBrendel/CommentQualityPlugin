commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.  *  * @return the identifier  */ ;/**  * The identifier for this retention lease. This identifier should be unique per lease and is set during construction by the caller.  *  * @return the identifier  */ public String id() {     return id. }
true;public;0;3;/**  * The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this  * retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.  *  * @return the retaining sequence number  */ ;/**  * The retaining sequence number of this retention lease. The retaining sequence number is the minimum sequence number that this  * retention lease wants to retain during merge operations. The retaining sequence number is set during construction by the caller.  *  * @return the retaining sequence number  */ public long retainingSequenceNumber() {     return retainingSequenceNumber. }
true;public;0;3;/**  * The timestamp of when this retention lease was created or renewed.  *  * @return the timestamp used as a basis for determining lease expiration  */ ;/**  * The timestamp of when this retention lease was created or renewed.  *  * @return the timestamp used as a basis for determining lease expiration  */ public long timestamp() {     return timestamp. }
true;public;0;3;/**  * The source of this retention lease. The source is set during construction by the caller.  *  * @return the source  */ ;/**  * The source of this retention lease. The source is set during construction by the caller.  *  * @return the source  */ public String source() {     return source. }
true;public;1;7;/**  * Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}.  *  * @param out the stream to write the retention lease to  * @throws IOException if an I/O exception occurs writing to the stream  */ ;/**  * Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}.  *  * @param out the stream to write the retention lease to  * @throws IOException if an I/O exception occurs writing to the stream  */ @Override public void writeTo(final StreamOutput out) throws IOException {     out.writeString(id).     out.writeZLong(retainingSequenceNumber).     out.writeVLong(timestamp).     out.writeString(source). }
false;public;2;12;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     {         builder.field(ID_FIELD.getPreferredName(), id).         builder.field(RETAINING_SEQUENCE_NUMBER_FIELD.getPreferredName(), retainingSequenceNumber).         builder.field(TIMESTAMP_FIELD.getPreferredName(), timestamp).         builder.field(SOURCE_FIELD.getPreferredName(), source).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public boolean isFragment() {     return false. }
true;public,static;1;3;/**  * Parses a retention lease from {@link org.elasticsearch.common.xcontent.XContent}. This method assumes that the retention lease was  * converted to {@link org.elasticsearch.common.xcontent.XContent} via {@link #toXContent(XContentBuilder, Params)}.  *  * @param parser the parser  * @return a retention lease  */ ;/**  * Parses a retention lease from {@link org.elasticsearch.common.xcontent.XContent}. This method assumes that the retention lease was  * converted to {@link org.elasticsearch.common.xcontent.XContent} via {@link #toXContent(XContentBuilder, Params)}.  *  * @param parser the parser  * @return a retention lease  */ public static RetentionLease fromXContent(final XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;1;10;;@Override public boolean equals(final Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     final RetentionLease that = (RetentionLease) o.     return Objects.equals(id, that.id) && retainingSequenceNumber == that.retainingSequenceNumber && timestamp == that.timestamp && Objects.equals(source, that.source). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, retainingSequenceNumber, timestamp, source). }
false;public;0;9;;@Override public String toString() {     return "RetentionLease{" + "id='" + id + '\'' + ", retainingSequenceNumber=" + retainingSequenceNumber + ", timestamp=" + timestamp + ", source='" + source + '\'' + '}'. }
