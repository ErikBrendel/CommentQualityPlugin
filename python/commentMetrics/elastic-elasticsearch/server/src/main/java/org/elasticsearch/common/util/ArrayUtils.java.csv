commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;6;/**  * Return the index of <code>value</code> in <code>array</code>, or {@code -1} if there is no such index.  * If there are several values that are within <code>tolerance</code> or less of <code>value</code>, this method will return the  * index of the closest value. In case of several values being as close ot <code>value</code>, there is no guarantee which index  * will be returned.  * Results are undefined if the array is not sorted.  */ ;/**  * Return the index of <code>value</code> in <code>array</code>, or {@code -1} if there is no such index.  * If there are several values that are within <code>tolerance</code> or less of <code>value</code>, this method will return the  * index of the closest value. In case of several values being as close ot <code>value</code>, there is no guarantee which index  * will be returned.  * Results are undefined if the array is not sorted.  */ public static int binarySearch(double[] array, double value, double tolerance) {     if (array.length == 0) {         return -1.     }     return binarySearch(array, 0, array.length, value, tolerance). }
false;private,static;5;27;;private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) {     int index = Arrays.binarySearch(array, fromIndex, toIndex, value).     if (index < 0) {         // first index of a value that is > value         final int highIndex = -1 - index.         // last index of a value that is < value         final int lowIndex = highIndex - 1.         double lowError = Double.POSITIVE_INFINITY.         double highError = Double.POSITIVE_INFINITY.         if (lowIndex >= 0) {             lowError = value - array[lowIndex].         }         if (highIndex < array.length) {             highError = array[highIndex] - value.         }         if (highError < lowError) {             if (highError < tolerance) {                 index = highIndex.             }         } else if (lowError < tolerance) {             index = lowIndex.         } else {             index = -1.         }     }     return index. }
true;public,static;2;3;/**  * Concatenates 2 arrays  */ ;/**  * Concatenates 2 arrays  */ public static String[] concat(String[] one, String[] other) {     return concat(one, other, String.class). }
true;public,static;3;6;/**  * Concatenates 2 arrays  */ ;/**  * Concatenates 2 arrays  */ public static <T> T[] concat(T[] one, T[] other, Class<T> clazz) {     T[] target = (T[]) Array.newInstance(clazz, one.length + other.length).     System.arraycopy(one, 0, target, 0, one.length).     System.arraycopy(other, 0, target, one.length, other.length).     return target. }
