# id;timestamp;commentText;codeText;commentWords;codeWords
LocalCheckpointTracker -> private int seqNoToBitSetOffset(final long seqNo);1524684173;Obtain the position in the bit set corresponding to the provided sequence number. The bit set corresponding to the sequence number_can be obtained via {@link #getBitSetForSeqNo(long)}.__@param seqNo the sequence number to obtain the position for_@return the position in the bit set corresponding to the provided sequence number;private int seqNoToBitSetOffset(final long seqNo) {_        assert Thread.holdsLock(this)__        return Math.toIntExact(seqNo % BIT_SET_SIZE)__    };obtain,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number,the,bit,set,corresponding,to,the,sequence,number,can,be,obtained,via,link,get,bit,set,for,seq,no,long,param,seq,no,the,sequence,number,to,obtain,the,position,for,return,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number;private,int,seq,no,to,bit,set,offset,final,long,seq,no,assert,thread,holds,lock,this,return,math,to,int,exact,seq,no
LocalCheckpointTracker -> private int seqNoToBitSetOffset(final long seqNo);1536828374;Obtain the position in the bit set corresponding to the provided sequence number. The bit set corresponding to the sequence number_can be obtained via {@link #getBitSetForSeqNo(long)}.__@param seqNo the sequence number to obtain the position for_@return the position in the bit set corresponding to the provided sequence number;private int seqNoToBitSetOffset(final long seqNo) {_        assert Thread.holdsLock(this)__        return Math.toIntExact(seqNo % BIT_SET_SIZE)__    };obtain,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number,the,bit,set,corresponding,to,the,sequence,number,can,be,obtained,via,link,get,bit,set,for,seq,no,long,param,seq,no,the,sequence,number,to,obtain,the,position,for,return,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number;private,int,seq,no,to,bit,set,offset,final,long,seq,no,assert,thread,holds,lock,this,return,math,to,int,exact,seq,no
LocalCheckpointTracker -> private int seqNoToBitSetOffset(final long seqNo);1537806831;Obtain the position in the bit set corresponding to the provided sequence number. The bit set corresponding to the sequence number_can be obtained via {@link #getBitSetForSeqNo(long)}.__@param seqNo the sequence number to obtain the position for_@return the position in the bit set corresponding to the provided sequence number;private int seqNoToBitSetOffset(final long seqNo) {_        return Math.toIntExact(seqNo % BIT_SET_SIZE)__    };obtain,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number,the,bit,set,corresponding,to,the,sequence,number,can,be,obtained,via,link,get,bit,set,for,seq,no,long,param,seq,no,the,sequence,number,to,obtain,the,position,for,return,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number;private,int,seq,no,to,bit,set,offset,final,long,seq,no,return,math,to,int,exact,seq,no
LocalCheckpointTracker -> private int seqNoToBitSetOffset(final long seqNo);1544203340;Obtain the position in the bit set corresponding to the provided sequence number. The bit set corresponding to the sequence number_can be obtained via {@link #getBitSetForSeqNo(long)}.__@param seqNo the sequence number to obtain the position for_@return the position in the bit set corresponding to the provided sequence number;private int seqNoToBitSetOffset(final long seqNo) {_        return Math.toIntExact(seqNo % BIT_SET_SIZE)__    };obtain,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number,the,bit,set,corresponding,to,the,sequence,number,can,be,obtained,via,link,get,bit,set,for,seq,no,long,param,seq,no,the,sequence,number,to,obtain,the,position,for,return,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number;private,int,seq,no,to,bit,set,offset,final,long,seq,no,return,math,to,int,exact,seq,no
LocalCheckpointTracker -> private int seqNoToBitSetOffset(final long seqNo);1549987582;Obtain the position in the bit set corresponding to the provided sequence number. The bit set corresponding to the sequence number_can be obtained via {@link #getBitSetForSeqNo(long)}.__@param seqNo the sequence number to obtain the position for_@return the position in the bit set corresponding to the provided sequence number;private int seqNoToBitSetOffset(final long seqNo) {_        return Math.toIntExact(seqNo % BIT_SET_SIZE)__    };obtain,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number,the,bit,set,corresponding,to,the,sequence,number,can,be,obtained,via,link,get,bit,set,for,seq,no,long,param,seq,no,the,sequence,number,to,obtain,the,position,for,return,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number;private,int,seq,no,to,bit,set,offset,final,long,seq,no,return,math,to,int,exact,seq,no
LocalCheckpointTracker -> private int seqNoToBitSetOffset(final long seqNo);1550256122;Obtain the position in the bit set corresponding to the provided sequence number. The bit set corresponding to the sequence number_can be obtained via {@link #getBitSetForSeqNo(long)}.__@param seqNo the sequence number to obtain the position for_@return the position in the bit set corresponding to the provided sequence number;private int seqNoToBitSetOffset(final long seqNo) {_        return Math.toIntExact(seqNo % BIT_SET_SIZE)__    };obtain,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number,the,bit,set,corresponding,to,the,sequence,number,can,be,obtained,via,link,get,bit,set,for,seq,no,long,param,seq,no,the,sequence,number,to,obtain,the,position,for,return,the,position,in,the,bit,set,corresponding,to,the,provided,sequence,number;private,int,seq,no,to,bit,set,offset,final,long,seq,no,return,math,to,int,exact,seq,no
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#notifyAll")     private void updateCheckpoint();1524684173;Moves the checkpoint to the last consecutively processed sequence number. This method assumes that the sequence number following the_current checkpoint is processed.;@SuppressForbidden(reason = "Object#notifyAll")_    private void updateCheckpoint() {_        assert Thread.holdsLock(this)__        assert getBitSetForSeqNo(checkpoint + 1).get(seqNoToBitSetOffset(checkpoint + 1)) :_            "updateCheckpoint is called but the bit following the checkpoint is not set"__        try {_            _            long bitSetKey = getBitSetKey(checkpoint)__            CountedBitSet current = processedSeqNo.get(bitSetKey)__            if (current == null) {_                _                assert checkpoint % BIT_SET_SIZE == BIT_SET_SIZE - 1__                current = processedSeqNo.get(++bitSetKey)__            }_            do {_                checkpoint++__                _                if (checkpoint == lastSeqNoInBitSet(bitSetKey)) {_                    assert current != null__                    final CountedBitSet removed = processedSeqNo.remove(bitSetKey)__                    assert removed == current__                    current = processedSeqNo.get(++bitSetKey)__                }_            } while (current != null && current.get(seqNoToBitSetOffset(checkpoint + 1)))__        } finally {_            _            this.notifyAll()__        }_    };moves,the,checkpoint,to,the,last,consecutively,processed,sequence,number,this,method,assumes,that,the,sequence,number,following,the,current,checkpoint,is,processed;suppress,forbidden,reason,object,notify,all,private,void,update,checkpoint,assert,thread,holds,lock,this,assert,get,bit,set,for,seq,no,checkpoint,1,get,seq,no,to,bit,set,offset,checkpoint,1,update,checkpoint,is,called,but,the,bit,following,the,checkpoint,is,not,set,try,long,bit,set,key,get,bit,set,key,checkpoint,counted,bit,set,current,processed,seq,no,get,bit,set,key,if,current,null,assert,checkpoint,1,current,processed,seq,no,get,bit,set,key,do,checkpoint,if,checkpoint,last,seq,no,in,bit,set,bit,set,key,assert,current,null,final,counted,bit,set,removed,processed,seq,no,remove,bit,set,key,assert,removed,current,current,processed,seq,no,get,bit,set,key,while,current,null,current,get,seq,no,to,bit,set,offset,checkpoint,1,finally,this,notify,all
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#notifyAll")     private void updateCheckpoint();1536828374;Moves the checkpoint to the last consecutively processed sequence number. This method assumes that the sequence number following the_current checkpoint is processed.;@SuppressForbidden(reason = "Object#notifyAll")_    private void updateCheckpoint() {_        assert Thread.holdsLock(this)__        assert getBitSetForSeqNo(checkpoint + 1).get(seqNoToBitSetOffset(checkpoint + 1)) :_            "updateCheckpoint is called but the bit following the checkpoint is not set"__        try {_            _            long bitSetKey = getBitSetKey(checkpoint)__            CountedBitSet current = processedSeqNo.get(bitSetKey)__            if (current == null) {_                _                assert checkpoint % BIT_SET_SIZE == BIT_SET_SIZE - 1__                current = processedSeqNo.get(++bitSetKey)__            }_            do {_                checkpoint++__                _                if (checkpoint == lastSeqNoInBitSet(bitSetKey)) {_                    assert current != null__                    final CountedBitSet removed = processedSeqNo.remove(bitSetKey)__                    assert removed == current__                    current = processedSeqNo.get(++bitSetKey)__                }_            } while (current != null && current.get(seqNoToBitSetOffset(checkpoint + 1)))__        } finally {_            _            this.notifyAll()__        }_    };moves,the,checkpoint,to,the,last,consecutively,processed,sequence,number,this,method,assumes,that,the,sequence,number,following,the,current,checkpoint,is,processed;suppress,forbidden,reason,object,notify,all,private,void,update,checkpoint,assert,thread,holds,lock,this,assert,get,bit,set,for,seq,no,checkpoint,1,get,seq,no,to,bit,set,offset,checkpoint,1,update,checkpoint,is,called,but,the,bit,following,the,checkpoint,is,not,set,try,long,bit,set,key,get,bit,set,key,checkpoint,counted,bit,set,current,processed,seq,no,get,bit,set,key,if,current,null,assert,checkpoint,1,current,processed,seq,no,get,bit,set,key,do,checkpoint,if,checkpoint,last,seq,no,in,bit,set,bit,set,key,assert,current,null,final,counted,bit,set,removed,processed,seq,no,remove,bit,set,key,assert,removed,current,current,processed,seq,no,get,bit,set,key,while,current,null,current,get,seq,no,to,bit,set,offset,checkpoint,1,finally,this,notify,all
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#notifyAll")     private void updateCheckpoint();1537806831;Moves the checkpoint to the last consecutively processed sequence number. This method assumes that the sequence number following the_current checkpoint is processed.;@SuppressForbidden(reason = "Object#notifyAll")_    private void updateCheckpoint() {_        assert Thread.holdsLock(this)__        assert getBitSetForSeqNo(checkpoint + 1).get(seqNoToBitSetOffset(checkpoint + 1)) :_            "updateCheckpoint is called but the bit following the checkpoint is not set"__        try {_            _            long bitSetKey = getBitSetKey(checkpoint)__            CountedBitSet current = processedSeqNo.get(bitSetKey)__            if (current == null) {_                _                assert checkpoint % BIT_SET_SIZE == BIT_SET_SIZE - 1__                current = processedSeqNo.get(++bitSetKey)__            }_            do {_                checkpoint++__                _                if (checkpoint == lastSeqNoInBitSet(bitSetKey)) {_                    assert current != null__                    final CountedBitSet removed = processedSeqNo.remove(bitSetKey)__                    assert removed == current__                    current = processedSeqNo.get(++bitSetKey)__                }_            } while (current != null && current.get(seqNoToBitSetOffset(checkpoint + 1)))__        } finally {_            _            this.notifyAll()__        }_    };moves,the,checkpoint,to,the,last,consecutively,processed,sequence,number,this,method,assumes,that,the,sequence,number,following,the,current,checkpoint,is,processed;suppress,forbidden,reason,object,notify,all,private,void,update,checkpoint,assert,thread,holds,lock,this,assert,get,bit,set,for,seq,no,checkpoint,1,get,seq,no,to,bit,set,offset,checkpoint,1,update,checkpoint,is,called,but,the,bit,following,the,checkpoint,is,not,set,try,long,bit,set,key,get,bit,set,key,checkpoint,counted,bit,set,current,processed,seq,no,get,bit,set,key,if,current,null,assert,checkpoint,1,current,processed,seq,no,get,bit,set,key,do,checkpoint,if,checkpoint,last,seq,no,in,bit,set,bit,set,key,assert,current,null,final,counted,bit,set,removed,processed,seq,no,remove,bit,set,key,assert,removed,current,current,processed,seq,no,get,bit,set,key,while,current,null,current,get,seq,no,to,bit,set,offset,checkpoint,1,finally,this,notify,all
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#notifyAll")     private void updateCheckpoint();1544203340;Moves the checkpoint to the last consecutively processed sequence number. This method assumes that the sequence number following the_current checkpoint is processed.;@SuppressForbidden(reason = "Object#notifyAll")_    private void updateCheckpoint() {_        assert Thread.holdsLock(this)__        assert getBitSetForSeqNo(checkpoint + 1).get(seqNoToBitSetOffset(checkpoint + 1)) :_            "updateCheckpoint is called but the bit following the checkpoint is not set"__        try {_            _            long bitSetKey = getBitSetKey(checkpoint)__            CountedBitSet current = processedSeqNo.get(bitSetKey)__            if (current == null) {_                _                assert checkpoint % BIT_SET_SIZE == BIT_SET_SIZE - 1__                current = processedSeqNo.get(++bitSetKey)__            }_            do {_                checkpoint++__                _                if (checkpoint == lastSeqNoInBitSet(bitSetKey)) {_                    assert current != null__                    final CountedBitSet removed = processedSeqNo.remove(bitSetKey)__                    assert removed == current__                    current = processedSeqNo.get(++bitSetKey)__                }_            } while (current != null && current.get(seqNoToBitSetOffset(checkpoint + 1)))__        } finally {_            _            this.notifyAll()__        }_    };moves,the,checkpoint,to,the,last,consecutively,processed,sequence,number,this,method,assumes,that,the,sequence,number,following,the,current,checkpoint,is,processed;suppress,forbidden,reason,object,notify,all,private,void,update,checkpoint,assert,thread,holds,lock,this,assert,get,bit,set,for,seq,no,checkpoint,1,get,seq,no,to,bit,set,offset,checkpoint,1,update,checkpoint,is,called,but,the,bit,following,the,checkpoint,is,not,set,try,long,bit,set,key,get,bit,set,key,checkpoint,counted,bit,set,current,processed,seq,no,get,bit,set,key,if,current,null,assert,checkpoint,1,current,processed,seq,no,get,bit,set,key,do,checkpoint,if,checkpoint,last,seq,no,in,bit,set,bit,set,key,assert,current,null,final,counted,bit,set,removed,processed,seq,no,remove,bit,set,key,assert,removed,current,current,processed,seq,no,get,bit,set,key,while,current,null,current,get,seq,no,to,bit,set,offset,checkpoint,1,finally,this,notify,all
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#notifyAll")     private void updateCheckpoint();1549987582;Moves the checkpoint to the last consecutively processed sequence number. This method assumes that the sequence number following the_current checkpoint is processed.;@SuppressForbidden(reason = "Object#notifyAll")_    private void updateCheckpoint() {_        assert Thread.holdsLock(this)__        assert getBitSetForSeqNo(checkpoint + 1).get(seqNoToBitSetOffset(checkpoint + 1)) :_            "updateCheckpoint is called but the bit following the checkpoint is not set"__        try {_            _            long bitSetKey = getBitSetKey(checkpoint)__            CountedBitSet current = processedSeqNo.get(bitSetKey)__            if (current == null) {_                _                assert checkpoint % BIT_SET_SIZE == BIT_SET_SIZE - 1__                current = processedSeqNo.get(++bitSetKey)__            }_            do {_                checkpoint++__                _                if (checkpoint == lastSeqNoInBitSet(bitSetKey)) {_                    assert current != null__                    final CountedBitSet removed = processedSeqNo.remove(bitSetKey)__                    assert removed == current__                    current = processedSeqNo.get(++bitSetKey)__                }_            } while (current != null && current.get(seqNoToBitSetOffset(checkpoint + 1)))__        } finally {_            _            this.notifyAll()__        }_    };moves,the,checkpoint,to,the,last,consecutively,processed,sequence,number,this,method,assumes,that,the,sequence,number,following,the,current,checkpoint,is,processed;suppress,forbidden,reason,object,notify,all,private,void,update,checkpoint,assert,thread,holds,lock,this,assert,get,bit,set,for,seq,no,checkpoint,1,get,seq,no,to,bit,set,offset,checkpoint,1,update,checkpoint,is,called,but,the,bit,following,the,checkpoint,is,not,set,try,long,bit,set,key,get,bit,set,key,checkpoint,counted,bit,set,current,processed,seq,no,get,bit,set,key,if,current,null,assert,checkpoint,1,current,processed,seq,no,get,bit,set,key,do,checkpoint,if,checkpoint,last,seq,no,in,bit,set,bit,set,key,assert,current,null,final,counted,bit,set,removed,processed,seq,no,remove,bit,set,key,assert,removed,current,current,processed,seq,no,get,bit,set,key,while,current,null,current,get,seq,no,to,bit,set,offset,checkpoint,1,finally,this,notify,all
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#notifyAll")     private void updateCheckpoint();1550256122;Moves the checkpoint to the last consecutively processed sequence number. This method assumes that the sequence number following the_current checkpoint is processed.;@SuppressForbidden(reason = "Object#notifyAll")_    private void updateCheckpoint() {_        assert Thread.holdsLock(this)__        assert getBitSetForSeqNo(checkpoint + 1).get(seqNoToBitSetOffset(checkpoint + 1)) :_            "updateCheckpoint is called but the bit following the checkpoint is not set"__        try {_            _            long bitSetKey = getBitSetKey(checkpoint)__            CountedBitSet current = processedSeqNo.get(bitSetKey)__            if (current == null) {_                _                assert checkpoint % BIT_SET_SIZE == BIT_SET_SIZE - 1__                current = processedSeqNo.get(++bitSetKey)__            }_            do {_                checkpoint++__                _                if (checkpoint == lastSeqNoInBitSet(bitSetKey)) {_                    assert current != null__                    final CountedBitSet removed = processedSeqNo.remove(bitSetKey)__                    assert removed == current__                    current = processedSeqNo.get(++bitSetKey)__                }_            } while (current != null && current.get(seqNoToBitSetOffset(checkpoint + 1)))__        } finally {_            _            this.notifyAll()__        }_    };moves,the,checkpoint,to,the,last,consecutively,processed,sequence,number,this,method,assumes,that,the,sequence,number,following,the,current,checkpoint,is,processed;suppress,forbidden,reason,object,notify,all,private,void,update,checkpoint,assert,thread,holds,lock,this,assert,get,bit,set,for,seq,no,checkpoint,1,get,seq,no,to,bit,set,offset,checkpoint,1,update,checkpoint,is,called,but,the,bit,following,the,checkpoint,is,not,set,try,long,bit,set,key,get,bit,set,key,checkpoint,counted,bit,set,current,processed,seq,no,get,bit,set,key,if,current,null,assert,checkpoint,1,current,processed,seq,no,get,bit,set,key,do,checkpoint,if,checkpoint,last,seq,no,in,bit,set,bit,set,key,assert,current,null,final,counted,bit,set,removed,processed,seq,no,remove,bit,set,key,assert,removed,current,current,processed,seq,no,get,bit,set,key,while,current,null,current,get,seq,no,to,bit,set,offset,checkpoint,1,finally,this,notify,all
LocalCheckpointTracker -> public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint);1524684173;Initialize the local checkpoint service. The {@code maxSeqNo} should be set to the last sequence number assigned, or_{@link SequenceNumbers#NO_OPS_PERFORMED} and {@code localCheckpoint} should be set to the last known local checkpoint,_or {@link SequenceNumbers#NO_OPS_PERFORMED}.__@param maxSeqNo        the last sequence number assigned, or {@link SequenceNumbers#NO_OPS_PERFORMED}_@param localCheckpoint the last known local checkpoint, or {@link SequenceNumbers#NO_OPS_PERFORMED};public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint) {_        if (localCheckpoint < 0 && localCheckpoint != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "local checkpoint must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] "_                    + "but was [" + localCheckpoint + "]")__        }_        if (maxSeqNo < 0 && maxSeqNo != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "max seq. no. must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] but was [" + maxSeqNo + "]")__        }_        nextSeqNo = maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED ? 0 : maxSeqNo + 1__        checkpoint = localCheckpoint__    };initialize,the,local,checkpoint,service,the,code,max,seq,no,should,be,set,to,the,last,sequence,number,assigned,or,link,sequence,numbers,and,code,local,checkpoint,should,be,set,to,the,last,known,local,checkpoint,or,link,sequence,numbers,param,max,seq,no,the,last,sequence,number,assigned,or,link,sequence,numbers,param,local,checkpoint,the,last,known,local,checkpoint,or,link,sequence,numbers;public,local,checkpoint,tracker,final,long,max,seq,no,final,long,local,checkpoint,if,local,checkpoint,0,local,checkpoint,sequence,numbers,throw,new,illegal,argument,exception,local,checkpoint,must,be,non,negative,or,sequence,numbers,but,was,local,checkpoint,if,max,seq,no,0,max,seq,no,sequence,numbers,throw,new,illegal,argument,exception,max,seq,no,must,be,non,negative,or,sequence,numbers,but,was,max,seq,no,next,seq,no,max,seq,no,sequence,numbers,0,max,seq,no,1,checkpoint,local,checkpoint
LocalCheckpointTracker -> public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint);1536828374;Initialize the local checkpoint service. The {@code maxSeqNo} should be set to the last sequence number assigned, or_{@link SequenceNumbers#NO_OPS_PERFORMED} and {@code localCheckpoint} should be set to the last known local checkpoint,_or {@link SequenceNumbers#NO_OPS_PERFORMED}.__@param maxSeqNo        the last sequence number assigned, or {@link SequenceNumbers#NO_OPS_PERFORMED}_@param localCheckpoint the last known local checkpoint, or {@link SequenceNumbers#NO_OPS_PERFORMED};public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint) {_        if (localCheckpoint < 0 && localCheckpoint != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "local checkpoint must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] "_                    + "but was [" + localCheckpoint + "]")__        }_        if (maxSeqNo < 0 && maxSeqNo != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "max seq. no. must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] but was [" + maxSeqNo + "]")__        }_        nextSeqNo = maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED ? 0 : maxSeqNo + 1__        checkpoint = localCheckpoint__    };initialize,the,local,checkpoint,service,the,code,max,seq,no,should,be,set,to,the,last,sequence,number,assigned,or,link,sequence,numbers,and,code,local,checkpoint,should,be,set,to,the,last,known,local,checkpoint,or,link,sequence,numbers,param,max,seq,no,the,last,sequence,number,assigned,or,link,sequence,numbers,param,local,checkpoint,the,last,known,local,checkpoint,or,link,sequence,numbers;public,local,checkpoint,tracker,final,long,max,seq,no,final,long,local,checkpoint,if,local,checkpoint,0,local,checkpoint,sequence,numbers,throw,new,illegal,argument,exception,local,checkpoint,must,be,non,negative,or,sequence,numbers,but,was,local,checkpoint,if,max,seq,no,0,max,seq,no,sequence,numbers,throw,new,illegal,argument,exception,max,seq,no,must,be,non,negative,or,sequence,numbers,but,was,max,seq,no,next,seq,no,max,seq,no,sequence,numbers,0,max,seq,no,1,checkpoint,local,checkpoint
LocalCheckpointTracker -> public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint);1537806831;Initialize the local checkpoint service. The {@code maxSeqNo} should be set to the last sequence number assigned, or_{@link SequenceNumbers#NO_OPS_PERFORMED} and {@code localCheckpoint} should be set to the last known local checkpoint,_or {@link SequenceNumbers#NO_OPS_PERFORMED}.__@param maxSeqNo        the last sequence number assigned, or {@link SequenceNumbers#NO_OPS_PERFORMED}_@param localCheckpoint the last known local checkpoint, or {@link SequenceNumbers#NO_OPS_PERFORMED};public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint) {_        if (localCheckpoint < 0 && localCheckpoint != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "local checkpoint must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] "_                    + "but was [" + localCheckpoint + "]")__        }_        if (maxSeqNo < 0 && maxSeqNo != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "max seq. no. must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] but was [" + maxSeqNo + "]")__        }_        nextSeqNo = maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED ? 0 : maxSeqNo + 1__        checkpoint = localCheckpoint__    };initialize,the,local,checkpoint,service,the,code,max,seq,no,should,be,set,to,the,last,sequence,number,assigned,or,link,sequence,numbers,and,code,local,checkpoint,should,be,set,to,the,last,known,local,checkpoint,or,link,sequence,numbers,param,max,seq,no,the,last,sequence,number,assigned,or,link,sequence,numbers,param,local,checkpoint,the,last,known,local,checkpoint,or,link,sequence,numbers;public,local,checkpoint,tracker,final,long,max,seq,no,final,long,local,checkpoint,if,local,checkpoint,0,local,checkpoint,sequence,numbers,throw,new,illegal,argument,exception,local,checkpoint,must,be,non,negative,or,sequence,numbers,but,was,local,checkpoint,if,max,seq,no,0,max,seq,no,sequence,numbers,throw,new,illegal,argument,exception,max,seq,no,must,be,non,negative,or,sequence,numbers,but,was,max,seq,no,next,seq,no,max,seq,no,sequence,numbers,0,max,seq,no,1,checkpoint,local,checkpoint
LocalCheckpointTracker -> public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint);1544203340;Initialize the local checkpoint service. The {@code maxSeqNo} should be set to the last sequence number assigned, or_{@link SequenceNumbers#NO_OPS_PERFORMED} and {@code localCheckpoint} should be set to the last known local checkpoint,_or {@link SequenceNumbers#NO_OPS_PERFORMED}.__@param maxSeqNo        the last sequence number assigned, or {@link SequenceNumbers#NO_OPS_PERFORMED}_@param localCheckpoint the last known local checkpoint, or {@link SequenceNumbers#NO_OPS_PERFORMED};public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint) {_        if (localCheckpoint < 0 && localCheckpoint != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "local checkpoint must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] "_                    + "but was [" + localCheckpoint + "]")__        }_        if (maxSeqNo < 0 && maxSeqNo != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "max seq. no. must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] but was [" + maxSeqNo + "]")__        }_        nextSeqNo = maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED ? 0 : maxSeqNo + 1__        checkpoint = localCheckpoint__    };initialize,the,local,checkpoint,service,the,code,max,seq,no,should,be,set,to,the,last,sequence,number,assigned,or,link,sequence,numbers,and,code,local,checkpoint,should,be,set,to,the,last,known,local,checkpoint,or,link,sequence,numbers,param,max,seq,no,the,last,sequence,number,assigned,or,link,sequence,numbers,param,local,checkpoint,the,last,known,local,checkpoint,or,link,sequence,numbers;public,local,checkpoint,tracker,final,long,max,seq,no,final,long,local,checkpoint,if,local,checkpoint,0,local,checkpoint,sequence,numbers,throw,new,illegal,argument,exception,local,checkpoint,must,be,non,negative,or,sequence,numbers,but,was,local,checkpoint,if,max,seq,no,0,max,seq,no,sequence,numbers,throw,new,illegal,argument,exception,max,seq,no,must,be,non,negative,or,sequence,numbers,but,was,max,seq,no,next,seq,no,max,seq,no,sequence,numbers,0,max,seq,no,1,checkpoint,local,checkpoint
LocalCheckpointTracker -> public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint);1549987582;Initialize the local checkpoint service. The {@code maxSeqNo} should be set to the last sequence number assigned, or_{@link SequenceNumbers#NO_OPS_PERFORMED} and {@code localCheckpoint} should be set to the last known local checkpoint,_or {@link SequenceNumbers#NO_OPS_PERFORMED}.__@param maxSeqNo        the last sequence number assigned, or {@link SequenceNumbers#NO_OPS_PERFORMED}_@param localCheckpoint the last known local checkpoint, or {@link SequenceNumbers#NO_OPS_PERFORMED};public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint) {_        if (localCheckpoint < 0 && localCheckpoint != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "local checkpoint must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] "_                    + "but was [" + localCheckpoint + "]")__        }_        if (maxSeqNo < 0 && maxSeqNo != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "max seq. no. must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] but was [" + maxSeqNo + "]")__        }_        nextSeqNo = maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED ? 0 : maxSeqNo + 1__        checkpoint = localCheckpoint__    };initialize,the,local,checkpoint,service,the,code,max,seq,no,should,be,set,to,the,last,sequence,number,assigned,or,link,sequence,numbers,and,code,local,checkpoint,should,be,set,to,the,last,known,local,checkpoint,or,link,sequence,numbers,param,max,seq,no,the,last,sequence,number,assigned,or,link,sequence,numbers,param,local,checkpoint,the,last,known,local,checkpoint,or,link,sequence,numbers;public,local,checkpoint,tracker,final,long,max,seq,no,final,long,local,checkpoint,if,local,checkpoint,0,local,checkpoint,sequence,numbers,throw,new,illegal,argument,exception,local,checkpoint,must,be,non,negative,or,sequence,numbers,but,was,local,checkpoint,if,max,seq,no,0,max,seq,no,sequence,numbers,throw,new,illegal,argument,exception,max,seq,no,must,be,non,negative,or,sequence,numbers,but,was,max,seq,no,next,seq,no,max,seq,no,sequence,numbers,0,max,seq,no,1,checkpoint,local,checkpoint
LocalCheckpointTracker -> public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint);1550256122;Initialize the local checkpoint service. The {@code maxSeqNo} should be set to the last sequence number assigned, or_{@link SequenceNumbers#NO_OPS_PERFORMED} and {@code localCheckpoint} should be set to the last known local checkpoint,_or {@link SequenceNumbers#NO_OPS_PERFORMED}.__@param maxSeqNo        the last sequence number assigned, or {@link SequenceNumbers#NO_OPS_PERFORMED}_@param localCheckpoint the last known local checkpoint, or {@link SequenceNumbers#NO_OPS_PERFORMED};public LocalCheckpointTracker(final long maxSeqNo, final long localCheckpoint) {_        if (localCheckpoint < 0 && localCheckpoint != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "local checkpoint must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] "_                    + "but was [" + localCheckpoint + "]")__        }_        if (maxSeqNo < 0 && maxSeqNo != SequenceNumbers.NO_OPS_PERFORMED) {_            throw new IllegalArgumentException(_                "max seq. no. must be non-negative or [" + SequenceNumbers.NO_OPS_PERFORMED + "] but was [" + maxSeqNo + "]")__        }_        nextSeqNo = maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED ? 0 : maxSeqNo + 1__        checkpoint = localCheckpoint__    };initialize,the,local,checkpoint,service,the,code,max,seq,no,should,be,set,to,the,last,sequence,number,assigned,or,link,sequence,numbers,and,code,local,checkpoint,should,be,set,to,the,last,known,local,checkpoint,or,link,sequence,numbers,param,max,seq,no,the,last,sequence,number,assigned,or,link,sequence,numbers,param,local,checkpoint,the,last,known,local,checkpoint,or,link,sequence,numbers;public,local,checkpoint,tracker,final,long,max,seq,no,final,long,local,checkpoint,if,local,checkpoint,0,local,checkpoint,sequence,numbers,throw,new,illegal,argument,exception,local,checkpoint,must,be,non,negative,or,sequence,numbers,but,was,local,checkpoint,if,max,seq,no,0,max,seq,no,sequence,numbers,throw,new,illegal,argument,exception,max,seq,no,must,be,non,negative,or,sequence,numbers,but,was,max,seq,no,next,seq,no,max,seq,no,sequence,numbers,0,max,seq,no,1,checkpoint,local,checkpoint
LocalCheckpointTracker -> public long getCheckpoint();1524684173;The current checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}.__@return the current checkpoint;public long getCheckpoint() {_        return checkpoint__    };the,current,checkpoint,which,can,be,advanced,by,link,mark,seq,no,as,completed,long,return,the,current,checkpoint;public,long,get,checkpoint,return,checkpoint
LocalCheckpointTracker -> public long getCheckpoint();1536828374;The current checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}.__@return the current checkpoint;public long getCheckpoint() {_        return checkpoint__    };the,current,checkpoint,which,can,be,advanced,by,link,mark,seq,no,as,completed,long,return,the,current,checkpoint;public,long,get,checkpoint,return,checkpoint
LocalCheckpointTracker -> public long getCheckpoint();1537806831;The current checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}.__@return the current checkpoint;public long getCheckpoint() {_        return checkpoint__    };the,current,checkpoint,which,can,be,advanced,by,link,mark,seq,no,as,completed,long,return,the,current,checkpoint;public,long,get,checkpoint,return,checkpoint
LocalCheckpointTracker -> public long getCheckpoint();1544203340;The current checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}.__@return the current checkpoint;public long getCheckpoint() {_        return checkpoint__    };the,current,checkpoint,which,can,be,advanced,by,link,mark,seq,no,as,completed,long,return,the,current,checkpoint;public,long,get,checkpoint,return,checkpoint
LocalCheckpointTracker -> public long getCheckpoint();1549987582;The current checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}.__@return the current checkpoint;public long getCheckpoint() {_        return checkpoint__    };the,current,checkpoint,which,can,be,advanced,by,link,mark,seq,no,as,completed,long,return,the,current,checkpoint;public,long,get,checkpoint,return,checkpoint
LocalCheckpointTracker -> public long getCheckpoint();1550256122;The current checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}.__@return the current checkpoint;public long getCheckpoint() {_        return checkpoint__    };the,current,checkpoint,which,can,be,advanced,by,link,mark,seq,no,as,completed,long,return,the,current,checkpoint;public,long,get,checkpoint,return,checkpoint
LocalCheckpointTracker -> public long getMaxSeqNo();1524684173;The maximum sequence number issued so far.__@return the maximum sequence number;public long getMaxSeqNo() {_        return nextSeqNo - 1__    };the,maximum,sequence,number,issued,so,far,return,the,maximum,sequence,number;public,long,get,max,seq,no,return,next,seq,no,1
LocalCheckpointTracker -> public long getMaxSeqNo();1536828374;The maximum sequence number issued so far.__@return the maximum sequence number;public long getMaxSeqNo() {_        return nextSeqNo - 1__    };the,maximum,sequence,number,issued,so,far,return,the,maximum,sequence,number;public,long,get,max,seq,no,return,next,seq,no,1
LocalCheckpointTracker -> public long getMaxSeqNo();1537806831;The maximum sequence number issued so far.__@return the maximum sequence number;public long getMaxSeqNo() {_        return nextSeqNo - 1__    };the,maximum,sequence,number,issued,so,far,return,the,maximum,sequence,number;public,long,get,max,seq,no,return,next,seq,no,1
LocalCheckpointTracker -> public long getMaxSeqNo();1544203340;The maximum sequence number issued so far.__@return the maximum sequence number;public long getMaxSeqNo() {_        return nextSeqNo - 1__    };the,maximum,sequence,number,issued,so,far,return,the,maximum,sequence,number;public,long,get,max,seq,no,return,next,seq,no,1
LocalCheckpointTracker -> public long getMaxSeqNo();1549987582;The maximum sequence number issued so far.__@return the maximum sequence number;public long getMaxSeqNo() {_        return nextSeqNo - 1__    };the,maximum,sequence,number,issued,so,far,return,the,maximum,sequence,number;public,long,get,max,seq,no,return,next,seq,no,1
LocalCheckpointTracker -> public long getMaxSeqNo();1550256122;The maximum sequence number issued so far.__@return the maximum sequence number;public long getMaxSeqNo() {_        return nextSeqNo - 1__    };the,maximum,sequence,number,issued,so,far,return,the,maximum,sequence,number;public,long,get,max,seq,no,return,next,seq,no,1
LocalCheckpointTracker -> public synchronized void markSeqNoAsCompleted(final long seqNo);1524684173;Marks the processing of the provided sequence number as completed as updates the checkpoint if possible.__@param seqNo the sequence number to mark as completed;public synchronized void markSeqNoAsCompleted(final long seqNo) {_        _        if (seqNo >= nextSeqNo) {_            nextSeqNo = seqNo + 1__        }_        if (seqNo <= checkpoint) {_            _            return__        }_        final CountedBitSet bitSet = getBitSetForSeqNo(seqNo)__        final int offset = seqNoToBitSetOffset(seqNo)__        bitSet.set(offset)__        if (seqNo == checkpoint + 1) {_            updateCheckpoint()__        }_    };marks,the,processing,of,the,provided,sequence,number,as,completed,as,updates,the,checkpoint,if,possible,param,seq,no,the,sequence,number,to,mark,as,completed;public,synchronized,void,mark,seq,no,as,completed,final,long,seq,no,if,seq,no,next,seq,no,next,seq,no,seq,no,1,if,seq,no,checkpoint,return,final,counted,bit,set,bit,set,get,bit,set,for,seq,no,seq,no,final,int,offset,seq,no,to,bit,set,offset,seq,no,bit,set,set,offset,if,seq,no,checkpoint,1,update,checkpoint
LocalCheckpointTracker -> public synchronized void markSeqNoAsCompleted(final long seqNo);1536828374;Marks the processing of the provided sequence number as completed as updates the checkpoint if possible.__@param seqNo the sequence number to mark as completed;public synchronized void markSeqNoAsCompleted(final long seqNo) {_        _        if (seqNo >= nextSeqNo) {_            nextSeqNo = seqNo + 1__        }_        if (seqNo <= checkpoint) {_            _            return__        }_        final CountedBitSet bitSet = getBitSetForSeqNo(seqNo)__        final int offset = seqNoToBitSetOffset(seqNo)__        bitSet.set(offset)__        if (seqNo == checkpoint + 1) {_            updateCheckpoint()__        }_    };marks,the,processing,of,the,provided,sequence,number,as,completed,as,updates,the,checkpoint,if,possible,param,seq,no,the,sequence,number,to,mark,as,completed;public,synchronized,void,mark,seq,no,as,completed,final,long,seq,no,if,seq,no,next,seq,no,next,seq,no,seq,no,1,if,seq,no,checkpoint,return,final,counted,bit,set,bit,set,get,bit,set,for,seq,no,seq,no,final,int,offset,seq,no,to,bit,set,offset,seq,no,bit,set,set,offset,if,seq,no,checkpoint,1,update,checkpoint
LocalCheckpointTracker -> public synchronized void markSeqNoAsCompleted(final long seqNo);1537806831;Marks the processing of the provided sequence number as completed as updates the checkpoint if possible.__@param seqNo the sequence number to mark as completed;public synchronized void markSeqNoAsCompleted(final long seqNo) {_        _        if (seqNo >= nextSeqNo) {_            nextSeqNo = seqNo + 1__        }_        if (seqNo <= checkpoint) {_            _            return__        }_        final CountedBitSet bitSet = getBitSetForSeqNo(seqNo)__        final int offset = seqNoToBitSetOffset(seqNo)__        bitSet.set(offset)__        if (seqNo == checkpoint + 1) {_            updateCheckpoint()__        }_    };marks,the,processing,of,the,provided,sequence,number,as,completed,as,updates,the,checkpoint,if,possible,param,seq,no,the,sequence,number,to,mark,as,completed;public,synchronized,void,mark,seq,no,as,completed,final,long,seq,no,if,seq,no,next,seq,no,next,seq,no,seq,no,1,if,seq,no,checkpoint,return,final,counted,bit,set,bit,set,get,bit,set,for,seq,no,seq,no,final,int,offset,seq,no,to,bit,set,offset,seq,no,bit,set,set,offset,if,seq,no,checkpoint,1,update,checkpoint
LocalCheckpointTracker -> public synchronized void markSeqNoAsCompleted(final long seqNo);1544203340;Marks the processing of the provided sequence number as completed as updates the checkpoint if possible.__@param seqNo the sequence number to mark as completed;public synchronized void markSeqNoAsCompleted(final long seqNo) {_        _        if (seqNo >= nextSeqNo) {_            nextSeqNo = seqNo + 1__        }_        if (seqNo <= checkpoint) {_            _            return__        }_        final CountedBitSet bitSet = getBitSetForSeqNo(seqNo)__        final int offset = seqNoToBitSetOffset(seqNo)__        bitSet.set(offset)__        if (seqNo == checkpoint + 1) {_            updateCheckpoint()__        }_    };marks,the,processing,of,the,provided,sequence,number,as,completed,as,updates,the,checkpoint,if,possible,param,seq,no,the,sequence,number,to,mark,as,completed;public,synchronized,void,mark,seq,no,as,completed,final,long,seq,no,if,seq,no,next,seq,no,next,seq,no,seq,no,1,if,seq,no,checkpoint,return,final,counted,bit,set,bit,set,get,bit,set,for,seq,no,seq,no,final,int,offset,seq,no,to,bit,set,offset,seq,no,bit,set,set,offset,if,seq,no,checkpoint,1,update,checkpoint
LocalCheckpointTracker -> public synchronized void markSeqNoAsCompleted(final long seqNo);1549987582;Marks the processing of the provided sequence number as completed as updates the checkpoint if possible.__@param seqNo the sequence number to mark as completed;public synchronized void markSeqNoAsCompleted(final long seqNo) {_        _        if (seqNo >= nextSeqNo) {_            nextSeqNo = seqNo + 1__        }_        if (seqNo <= checkpoint) {_            _            return__        }_        final CountedBitSet bitSet = getBitSetForSeqNo(seqNo)__        final int offset = seqNoToBitSetOffset(seqNo)__        bitSet.set(offset)__        if (seqNo == checkpoint + 1) {_            updateCheckpoint()__        }_    };marks,the,processing,of,the,provided,sequence,number,as,completed,as,updates,the,checkpoint,if,possible,param,seq,no,the,sequence,number,to,mark,as,completed;public,synchronized,void,mark,seq,no,as,completed,final,long,seq,no,if,seq,no,next,seq,no,next,seq,no,seq,no,1,if,seq,no,checkpoint,return,final,counted,bit,set,bit,set,get,bit,set,for,seq,no,seq,no,final,int,offset,seq,no,to,bit,set,offset,seq,no,bit,set,set,offset,if,seq,no,checkpoint,1,update,checkpoint
LocalCheckpointTracker -> public synchronized void markSeqNoAsCompleted(final long seqNo);1550256122;Marks the processing of the provided sequence number as completed as updates the checkpoint if possible.__@param seqNo the sequence number to mark as completed;public synchronized void markSeqNoAsCompleted(final long seqNo) {_        _        if (seqNo >= nextSeqNo) {_            nextSeqNo = seqNo + 1__        }_        if (seqNo <= checkpoint) {_            _            return__        }_        final CountedBitSet bitSet = getBitSetForSeqNo(seqNo)__        final int offset = seqNoToBitSetOffset(seqNo)__        bitSet.set(offset)__        if (seqNo == checkpoint + 1) {_            updateCheckpoint()__        }_    };marks,the,processing,of,the,provided,sequence,number,as,completed,as,updates,the,checkpoint,if,possible,param,seq,no,the,sequence,number,to,mark,as,completed;public,synchronized,void,mark,seq,no,as,completed,final,long,seq,no,if,seq,no,next,seq,no,next,seq,no,seq,no,1,if,seq,no,checkpoint,return,final,counted,bit,set,bit,set,get,bit,set,for,seq,no,seq,no,final,int,offset,seq,no,to,bit,set,offset,seq,no,bit,set,set,offset,if,seq,no,checkpoint,1,update,checkpoint
LocalCheckpointTracker -> public boolean contains(final long seqNo);1537806831;Checks if the given sequence number was marked as completed in this tracker.;public boolean contains(final long seqNo) {_        assert seqNo >= 0 : "invalid seq_no=" + seqNo__        if (seqNo >= nextSeqNo) {_            return false__        }_        if (seqNo <= checkpoint) {_            return true__        }_        final long bitSetKey = getBitSetKey(seqNo)__        final CountedBitSet bitSet__        synchronized (this) {_            bitSet = processedSeqNo.get(bitSetKey)__        }_        return bitSet != null && bitSet.get(seqNoToBitSetOffset(seqNo))__    };checks,if,the,given,sequence,number,was,marked,as,completed,in,this,tracker;public,boolean,contains,final,long,seq,no,assert,seq,no,0,invalid,seq,no,if,seq,no,next,seq,no,return,false,if,seq,no,checkpoint,return,true,final,long,bit,set,key,get,bit,set,key,seq,no,final,counted,bit,set,bit,set,synchronized,this,bit,set,processed,seq,no,get,bit,set,key,return,bit,set,null,bit,set,get,seq,no,to,bit,set,offset,seq,no
LocalCheckpointTracker -> public boolean contains(final long seqNo);1544203340;Checks if the given sequence number was marked as completed in this tracker.;public boolean contains(final long seqNo) {_        assert seqNo >= 0 : "invalid seq_no=" + seqNo__        if (seqNo >= nextSeqNo) {_            return false__        }_        if (seqNo <= checkpoint) {_            return true__        }_        final long bitSetKey = getBitSetKey(seqNo)__        final CountedBitSet bitSet__        synchronized (this) {_            bitSet = processedSeqNo.get(bitSetKey)__        }_        return bitSet != null && bitSet.get(seqNoToBitSetOffset(seqNo))__    };checks,if,the,given,sequence,number,was,marked,as,completed,in,this,tracker;public,boolean,contains,final,long,seq,no,assert,seq,no,0,invalid,seq,no,if,seq,no,next,seq,no,return,false,if,seq,no,checkpoint,return,true,final,long,bit,set,key,get,bit,set,key,seq,no,final,counted,bit,set,bit,set,synchronized,this,bit,set,processed,seq,no,get,bit,set,key,return,bit,set,null,bit,set,get,seq,no,to,bit,set,offset,seq,no
LocalCheckpointTracker -> public boolean contains(final long seqNo);1549987582;Checks if the given sequence number was marked as completed in this tracker.;public boolean contains(final long seqNo) {_        assert seqNo >= 0 : "invalid seq_no=" + seqNo__        if (seqNo >= nextSeqNo) {_            return false__        }_        if (seqNo <= checkpoint) {_            return true__        }_        final long bitSetKey = getBitSetKey(seqNo)__        final int bitSetOffset = seqNoToBitSetOffset(seqNo)__        synchronized (this) {_            final CountedBitSet bitSet = processedSeqNo.get(bitSetKey)__            return bitSet != null && bitSet.get(bitSetOffset)__        }_    };checks,if,the,given,sequence,number,was,marked,as,completed,in,this,tracker;public,boolean,contains,final,long,seq,no,assert,seq,no,0,invalid,seq,no,if,seq,no,next,seq,no,return,false,if,seq,no,checkpoint,return,true,final,long,bit,set,key,get,bit,set,key,seq,no,final,int,bit,set,offset,seq,no,to,bit,set,offset,seq,no,synchronized,this,final,counted,bit,set,bit,set,processed,seq,no,get,bit,set,key,return,bit,set,null,bit,set,get,bit,set,offset
LocalCheckpointTracker -> public boolean contains(final long seqNo);1550256122;Checks if the given sequence number was marked as completed in this tracker.;public boolean contains(final long seqNo) {_        assert seqNo >= 0 : "invalid seq_no=" + seqNo__        if (seqNo >= nextSeqNo) {_            return false__        }_        if (seqNo <= checkpoint) {_            return true__        }_        final long bitSetKey = getBitSetKey(seqNo)__        final int bitSetOffset = seqNoToBitSetOffset(seqNo)__        synchronized (this) {_            final CountedBitSet bitSet = processedSeqNo.get(bitSetKey)__            return bitSet != null && bitSet.get(bitSetOffset)__        }_    };checks,if,the,given,sequence,number,was,marked,as,completed,in,this,tracker;public,boolean,contains,final,long,seq,no,assert,seq,no,0,invalid,seq,no,if,seq,no,next,seq,no,return,false,if,seq,no,checkpoint,return,true,final,long,bit,set,key,get,bit,set,key,seq,no,final,int,bit,set,offset,seq,no,to,bit,set,offset,seq,no,synchronized,this,final,counted,bit,set,bit,set,processed,seq,no,get,bit,set,key,return,bit,set,null,bit,set,get,bit,set,offset
LocalCheckpointTracker -> public synchronized long generateSeqNo();1524684173;Issue the next sequence number.__@return the next assigned sequence number;public synchronized long generateSeqNo() {_        return nextSeqNo++__    };issue,the,next,sequence,number,return,the,next,assigned,sequence,number;public,synchronized,long,generate,seq,no,return,next,seq,no
LocalCheckpointTracker -> public synchronized long generateSeqNo();1536828374;Issue the next sequence number.__@return the next assigned sequence number;public synchronized long generateSeqNo() {_        return nextSeqNo++__    };issue,the,next,sequence,number,return,the,next,assigned,sequence,number;public,synchronized,long,generate,seq,no,return,next,seq,no
LocalCheckpointTracker -> public synchronized long generateSeqNo();1537806831;Issue the next sequence number.__@return the next assigned sequence number;public synchronized long generateSeqNo() {_        return nextSeqNo++__    };issue,the,next,sequence,number,return,the,next,assigned,sequence,number;public,synchronized,long,generate,seq,no,return,next,seq,no
LocalCheckpointTracker -> public synchronized long generateSeqNo();1544203340;Issue the next sequence number.__@return the next assigned sequence number;public synchronized long generateSeqNo() {_        return nextSeqNo++__    };issue,the,next,sequence,number,return,the,next,assigned,sequence,number;public,synchronized,long,generate,seq,no,return,next,seq,no
LocalCheckpointTracker -> public synchronized long generateSeqNo();1549987582;Issue the next sequence number.__@return the next assigned sequence number;public synchronized long generateSeqNo() {_        return nextSeqNo++__    };issue,the,next,sequence,number,return,the,next,assigned,sequence,number;public,synchronized,long,generate,seq,no,return,next,seq,no
LocalCheckpointTracker -> public synchronized long generateSeqNo();1550256122;Issue the next sequence number.__@return the next assigned sequence number;public synchronized long generateSeqNo() {_        return nextSeqNo++__    };issue,the,next,sequence,number,return,the,next,assigned,sequence,number;public,synchronized,long,generate,seq,no,return,next,seq,no
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#wait")     public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException;1524684173;Waits for all operations up to the provided sequence number to complete.__@param seqNo the sequence number that the checkpoint must advance to before this method returns_@throws InterruptedException if the thread was interrupted while blocking on the condition;@SuppressForbidden(reason = "Object#wait")_    public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException {_        while (checkpoint < seqNo) {_            _            this.wait()__        }_    };waits,for,all,operations,up,to,the,provided,sequence,number,to,complete,param,seq,no,the,sequence,number,that,the,checkpoint,must,advance,to,before,this,method,returns,throws,interrupted,exception,if,the,thread,was,interrupted,while,blocking,on,the,condition;suppress,forbidden,reason,object,wait,public,synchronized,void,wait,for,ops,to,complete,final,long,seq,no,throws,interrupted,exception,while,checkpoint,seq,no,this,wait
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#wait")     public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException;1536828374;Waits for all operations up to the provided sequence number to complete.__@param seqNo the sequence number that the checkpoint must advance to before this method returns_@throws InterruptedException if the thread was interrupted while blocking on the condition;@SuppressForbidden(reason = "Object#wait")_    public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException {_        while (checkpoint < seqNo) {_            _            this.wait()__        }_    };waits,for,all,operations,up,to,the,provided,sequence,number,to,complete,param,seq,no,the,sequence,number,that,the,checkpoint,must,advance,to,before,this,method,returns,throws,interrupted,exception,if,the,thread,was,interrupted,while,blocking,on,the,condition;suppress,forbidden,reason,object,wait,public,synchronized,void,wait,for,ops,to,complete,final,long,seq,no,throws,interrupted,exception,while,checkpoint,seq,no,this,wait
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#wait")     public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException;1537806831;Waits for all operations up to the provided sequence number to complete.__@param seqNo the sequence number that the checkpoint must advance to before this method returns_@throws InterruptedException if the thread was interrupted while blocking on the condition;@SuppressForbidden(reason = "Object#wait")_    public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException {_        while (checkpoint < seqNo) {_            _            this.wait()__        }_    };waits,for,all,operations,up,to,the,provided,sequence,number,to,complete,param,seq,no,the,sequence,number,that,the,checkpoint,must,advance,to,before,this,method,returns,throws,interrupted,exception,if,the,thread,was,interrupted,while,blocking,on,the,condition;suppress,forbidden,reason,object,wait,public,synchronized,void,wait,for,ops,to,complete,final,long,seq,no,throws,interrupted,exception,while,checkpoint,seq,no,this,wait
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#wait")     public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException;1544203340;Waits for all operations up to the provided sequence number to complete.__@param seqNo the sequence number that the checkpoint must advance to before this method returns_@throws InterruptedException if the thread was interrupted while blocking on the condition;@SuppressForbidden(reason = "Object#wait")_    public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException {_        while (checkpoint < seqNo) {_            _            this.wait()__        }_    };waits,for,all,operations,up,to,the,provided,sequence,number,to,complete,param,seq,no,the,sequence,number,that,the,checkpoint,must,advance,to,before,this,method,returns,throws,interrupted,exception,if,the,thread,was,interrupted,while,blocking,on,the,condition;suppress,forbidden,reason,object,wait,public,synchronized,void,wait,for,ops,to,complete,final,long,seq,no,throws,interrupted,exception,while,checkpoint,seq,no,this,wait
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#wait")     public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException;1549987582;Waits for all operations up to the provided sequence number to complete.__@param seqNo the sequence number that the checkpoint must advance to before this method returns_@throws InterruptedException if the thread was interrupted while blocking on the condition;@SuppressForbidden(reason = "Object#wait")_    public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException {_        while (checkpoint < seqNo) {_            _            this.wait()__        }_    };waits,for,all,operations,up,to,the,provided,sequence,number,to,complete,param,seq,no,the,sequence,number,that,the,checkpoint,must,advance,to,before,this,method,returns,throws,interrupted,exception,if,the,thread,was,interrupted,while,blocking,on,the,condition;suppress,forbidden,reason,object,wait,public,synchronized,void,wait,for,ops,to,complete,final,long,seq,no,throws,interrupted,exception,while,checkpoint,seq,no,this,wait
LocalCheckpointTracker -> @SuppressForbidden(reason = "Object#wait")     public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException;1550256122;Waits for all operations up to the provided sequence number to complete.__@param seqNo the sequence number that the checkpoint must advance to before this method returns_@throws InterruptedException if the thread was interrupted while blocking on the condition;@SuppressForbidden(reason = "Object#wait")_    public synchronized void waitForOpsToComplete(final long seqNo) throws InterruptedException {_        while (checkpoint < seqNo) {_            _            this.wait()__        }_    };waits,for,all,operations,up,to,the,provided,sequence,number,to,complete,param,seq,no,the,sequence,number,that,the,checkpoint,must,advance,to,before,this,method,returns,throws,interrupted,exception,if,the,thread,was,interrupted,while,blocking,on,the,condition;suppress,forbidden,reason,object,wait,public,synchronized,void,wait,for,ops,to,complete,final,long,seq,no,throws,interrupted,exception,while,checkpoint,seq,no,this,wait
LocalCheckpointTracker -> public synchronized void resetCheckpoint(final long checkpoint);1524684173;Resets the checkpoint to the specified value.__@param checkpoint the local checkpoint to reset this tracker to;public synchronized void resetCheckpoint(final long checkpoint) {_        assert checkpoint != SequenceNumbers.UNASSIGNED_SEQ_NO__        assert checkpoint <= this.checkpoint__        processedSeqNo.clear()__        this.checkpoint = checkpoint__    };resets,the,checkpoint,to,the,specified,value,param,checkpoint,the,local,checkpoint,to,reset,this,tracker,to;public,synchronized,void,reset,checkpoint,final,long,checkpoint,assert,checkpoint,sequence,numbers,assert,checkpoint,this,checkpoint,processed,seq,no,clear,this,checkpoint,checkpoint
LocalCheckpointTracker -> public synchronized void resetCheckpoint(final long checkpoint);1536828374;Resets the checkpoint to the specified value.__@param checkpoint the local checkpoint to reset this tracker to;public synchronized void resetCheckpoint(final long checkpoint) {_        _        assert checkpoint != SequenceNumbers.UNASSIGNED_SEQ_NO__        assert checkpoint <= this.checkpoint__        processedSeqNo.clear()__        this.checkpoint = checkpoint__    };resets,the,checkpoint,to,the,specified,value,param,checkpoint,the,local,checkpoint,to,reset,this,tracker,to;public,synchronized,void,reset,checkpoint,final,long,checkpoint,assert,checkpoint,sequence,numbers,assert,checkpoint,this,checkpoint,processed,seq,no,clear,this,checkpoint,checkpoint
LocalCheckpointTracker -> public synchronized void resetCheckpoint(final long checkpoint);1537806831;Resets the checkpoint to the specified value.__@param checkpoint the local checkpoint to reset this tracker to;public synchronized void resetCheckpoint(final long checkpoint) {_        _        assert checkpoint != SequenceNumbers.UNASSIGNED_SEQ_NO__        assert checkpoint <= this.checkpoint__        processedSeqNo.clear()__        this.checkpoint = checkpoint__    };resets,the,checkpoint,to,the,specified,value,param,checkpoint,the,local,checkpoint,to,reset,this,tracker,to;public,synchronized,void,reset,checkpoint,final,long,checkpoint,assert,checkpoint,sequence,numbers,assert,checkpoint,this,checkpoint,processed,seq,no,clear,this,checkpoint,checkpoint
LocalCheckpointTracker -> private long getBitSetKey(final long seqNo);1524684173;Return the bit set for the provided sequence number, possibly allocating a new set if needed.__@param seqNo the sequence number to obtain the bit set for_@return the bit set corresponding to the provided sequence number;private long getBitSetKey(final long seqNo) {_        assert Thread.holdsLock(this)__        return seqNo / BIT_SET_SIZE__    };return,the,bit,set,for,the,provided,sequence,number,possibly,allocating,a,new,set,if,needed,param,seq,no,the,sequence,number,to,obtain,the,bit,set,for,return,the,bit,set,corresponding,to,the,provided,sequence,number;private,long,get,bit,set,key,final,long,seq,no,assert,thread,holds,lock,this,return,seq,no
LocalCheckpointTracker -> private long getBitSetKey(final long seqNo);1536828374;Return the bit set for the provided sequence number, possibly allocating a new set if needed.__@param seqNo the sequence number to obtain the bit set for_@return the bit set corresponding to the provided sequence number;private long getBitSetKey(final long seqNo) {_        assert Thread.holdsLock(this)__        return seqNo / BIT_SET_SIZE__    };return,the,bit,set,for,the,provided,sequence,number,possibly,allocating,a,new,set,if,needed,param,seq,no,the,sequence,number,to,obtain,the,bit,set,for,return,the,bit,set,corresponding,to,the,provided,sequence,number;private,long,get,bit,set,key,final,long,seq,no,assert,thread,holds,lock,this,return,seq,no
LocalCheckpointTracker -> private long getBitSetKey(final long seqNo);1537806831;Return the bit set for the provided sequence number, possibly allocating a new set if needed.__@param seqNo the sequence number to obtain the bit set for_@return the bit set corresponding to the provided sequence number;private long getBitSetKey(final long seqNo) {_        return seqNo / BIT_SET_SIZE__    };return,the,bit,set,for,the,provided,sequence,number,possibly,allocating,a,new,set,if,needed,param,seq,no,the,sequence,number,to,obtain,the,bit,set,for,return,the,bit,set,corresponding,to,the,provided,sequence,number;private,long,get,bit,set,key,final,long,seq,no,return,seq,no
LocalCheckpointTracker -> private long getBitSetKey(final long seqNo);1544203340;Return the bit set for the provided sequence number, possibly allocating a new set if needed.__@param seqNo the sequence number to obtain the bit set for_@return the bit set corresponding to the provided sequence number;private long getBitSetKey(final long seqNo) {_        return seqNo / BIT_SET_SIZE__    };return,the,bit,set,for,the,provided,sequence,number,possibly,allocating,a,new,set,if,needed,param,seq,no,the,sequence,number,to,obtain,the,bit,set,for,return,the,bit,set,corresponding,to,the,provided,sequence,number;private,long,get,bit,set,key,final,long,seq,no,return,seq,no
LocalCheckpointTracker -> private long getBitSetKey(final long seqNo);1549987582;Return the bit set for the provided sequence number, possibly allocating a new set if needed.__@param seqNo the sequence number to obtain the bit set for_@return the bit set corresponding to the provided sequence number;private long getBitSetKey(final long seqNo) {_        return seqNo / BIT_SET_SIZE__    };return,the,bit,set,for,the,provided,sequence,number,possibly,allocating,a,new,set,if,needed,param,seq,no,the,sequence,number,to,obtain,the,bit,set,for,return,the,bit,set,corresponding,to,the,provided,sequence,number;private,long,get,bit,set,key,final,long,seq,no,return,seq,no
LocalCheckpointTracker -> private long getBitSetKey(final long seqNo);1550256122;Return the bit set for the provided sequence number, possibly allocating a new set if needed.__@param seqNo the sequence number to obtain the bit set for_@return the bit set corresponding to the provided sequence number;private long getBitSetKey(final long seqNo) {_        return seqNo / BIT_SET_SIZE__    };return,the,bit,set,for,the,provided,sequence,number,possibly,allocating,a,new,set,if,needed,param,seq,no,the,sequence,number,to,obtain,the,bit,set,for,return,the,bit,set,corresponding,to,the,provided,sequence,number;private,long,get,bit,set,key,final,long,seq,no,return,seq,no
LocalCheckpointTracker -> public synchronized SeqNoStats getStats(final long globalCheckpoint);1524684173;constructs a {@link SeqNoStats} object, using local state and the supplied global checkpoint__This is needed to make sure the local checkpoint and max seq no are consistent;public synchronized SeqNoStats getStats(final long globalCheckpoint) {_        return new SeqNoStats(getMaxSeqNo(), getCheckpoint(), globalCheckpoint)__    };constructs,a,link,seq,no,stats,object,using,local,state,and,the,supplied,global,checkpoint,this,is,needed,to,make,sure,the,local,checkpoint,and,max,seq,no,are,consistent;public,synchronized,seq,no,stats,get,stats,final,long,global,checkpoint,return,new,seq,no,stats,get,max,seq,no,get,checkpoint,global,checkpoint
LocalCheckpointTracker -> public synchronized SeqNoStats getStats(final long globalCheckpoint);1536828374;constructs a {@link SeqNoStats} object, using local state and the supplied global checkpoint__This is needed to make sure the local checkpoint and max seq no are consistent;public synchronized SeqNoStats getStats(final long globalCheckpoint) {_        return new SeqNoStats(getMaxSeqNo(), getCheckpoint(), globalCheckpoint)__    };constructs,a,link,seq,no,stats,object,using,local,state,and,the,supplied,global,checkpoint,this,is,needed,to,make,sure,the,local,checkpoint,and,max,seq,no,are,consistent;public,synchronized,seq,no,stats,get,stats,final,long,global,checkpoint,return,new,seq,no,stats,get,max,seq,no,get,checkpoint,global,checkpoint
LocalCheckpointTracker -> public synchronized SeqNoStats getStats(final long globalCheckpoint);1537806831;constructs a {@link SeqNoStats} object, using local state and the supplied global checkpoint__This is needed to make sure the local checkpoint and max seq no are consistent;public synchronized SeqNoStats getStats(final long globalCheckpoint) {_        return new SeqNoStats(getMaxSeqNo(), getCheckpoint(), globalCheckpoint)__    };constructs,a,link,seq,no,stats,object,using,local,state,and,the,supplied,global,checkpoint,this,is,needed,to,make,sure,the,local,checkpoint,and,max,seq,no,are,consistent;public,synchronized,seq,no,stats,get,stats,final,long,global,checkpoint,return,new,seq,no,stats,get,max,seq,no,get,checkpoint,global,checkpoint
LocalCheckpointTracker -> public synchronized SeqNoStats getStats(final long globalCheckpoint);1544203340;constructs a {@link SeqNoStats} object, using local state and the supplied global checkpoint__This is needed to make sure the local checkpoint and max seq no are consistent;public synchronized SeqNoStats getStats(final long globalCheckpoint) {_        return new SeqNoStats(getMaxSeqNo(), getCheckpoint(), globalCheckpoint)__    };constructs,a,link,seq,no,stats,object,using,local,state,and,the,supplied,global,checkpoint,this,is,needed,to,make,sure,the,local,checkpoint,and,max,seq,no,are,consistent;public,synchronized,seq,no,stats,get,stats,final,long,global,checkpoint,return,new,seq,no,stats,get,max,seq,no,get,checkpoint,global,checkpoint
LocalCheckpointTracker -> public synchronized SeqNoStats getStats(final long globalCheckpoint);1549987582;constructs a {@link SeqNoStats} object, using local state and the supplied global checkpoint__This is needed to make sure the local checkpoint and max seq no are consistent;public synchronized SeqNoStats getStats(final long globalCheckpoint) {_        return new SeqNoStats(getMaxSeqNo(), getCheckpoint(), globalCheckpoint)__    };constructs,a,link,seq,no,stats,object,using,local,state,and,the,supplied,global,checkpoint,this,is,needed,to,make,sure,the,local,checkpoint,and,max,seq,no,are,consistent;public,synchronized,seq,no,stats,get,stats,final,long,global,checkpoint,return,new,seq,no,stats,get,max,seq,no,get,checkpoint,global,checkpoint
LocalCheckpointTracker -> public synchronized SeqNoStats getStats(final long globalCheckpoint);1550256122;constructs a {@link SeqNoStats} object, using local state and the supplied global checkpoint__This is needed to make sure the local checkpoint and max seq no are consistent;public synchronized SeqNoStats getStats(final long globalCheckpoint) {_        return new SeqNoStats(getMaxSeqNo(), getCheckpoint(), globalCheckpoint)__    };constructs,a,link,seq,no,stats,object,using,local,state,and,the,supplied,global,checkpoint,this,is,needed,to,make,sure,the,local,checkpoint,and,max,seq,no,are,consistent;public,synchronized,seq,no,stats,get,stats,final,long,global,checkpoint,return,new,seq,no,stats,get,max,seq,no,get,checkpoint,global,checkpoint
