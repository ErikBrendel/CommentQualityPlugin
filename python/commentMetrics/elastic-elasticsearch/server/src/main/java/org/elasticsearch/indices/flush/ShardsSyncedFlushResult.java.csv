commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ShardId getShardId() {     return shardId. }
true;public;0;3;/**  * @return true if the operation failed before reaching step three of synced flush. {@link #failureReason()} can be used for  * more details  */ ;/**  * @return true if the operation failed before reaching step three of synced flush. {@link #failureReason()} can be used for  * more details  */ public boolean failed() {     return failureReason != null. }
true;public;0;3;/**  * @return the reason for the failure if synced flush failed before step three of synced flush  */ ;/**  * @return the reason for the failure if synced flush failed before step three of synced flush  */ public String failureReason() {     return failureReason. }
false;public;0;3;;public String syncId() {     return syncId. }
true;public;0;3;/**  * @return total number of shards for which a sync attempt was made  */ ;/**  * @return total number of shards for which a sync attempt was made  */ public int totalShards() {     return totalShards. }
true;public;0;9;/**  * @return total number of successful shards  */ ;/**  * @return total number of successful shards  */ public int successfulShards() {     int i = 0.     for (SyncedFlushService.ShardSyncedFlushResponse result : shardResponses.values()) {         if (result.success()) {             i++.         }     }     return i. }
true;public;0;9;/**  * @return an array of shard failures  */ ;/**  * @return an array of shard failures  */ public Map<ShardRouting, SyncedFlushService.ShardSyncedFlushResponse> failedShards() {     Map<ShardRouting, SyncedFlushService.ShardSyncedFlushResponse> failures = new HashMap<>().     for (Map.Entry<ShardRouting, SyncedFlushService.ShardSyncedFlushResponse> result : shardResponses.entrySet()) {         if (result.getValue().success() == false) {             failures.put(result.getKey(), result.getValue()).         }     }     return failures. }
true;public;0;3;/**  * @return Individual responses for each shard copy with a detailed failure message if the copy failed to perform the synced flush.  * Empty if synced flush failed before step three.  */ ;/**  * @return Individual responses for each shard copy with a detailed failure message if the copy failed to perform the synced flush.  * Empty if synced flush failed before step three.  */ public Map<ShardRouting, SyncedFlushService.ShardSyncedFlushResponse> shardResponses() {     return shardResponses. }
false;public;0;3;;public ShardId shardId() {     return shardId. }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     failureReason = in.readOptionalString().     int numResponses = in.readInt().     shardResponses = new HashMap<>().     for (int i = 0. i < numResponses. i++) {         ShardRouting shardRouting = new ShardRouting(in).         SyncedFlushService.ShardSyncedFlushResponse response = SyncedFlushService.ShardSyncedFlushResponse.readSyncedFlushResponse(in).         shardResponses.put(shardRouting, response).     }     syncId = in.readOptionalString().     shardId = ShardId.readShardId(in).     totalShards = in.readInt(). }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(failureReason).     out.writeInt(shardResponses.size()).     for (Map.Entry<ShardRouting, SyncedFlushService.ShardSyncedFlushResponse> entry : shardResponses.entrySet()) {         entry.getKey().writeTo(out).         entry.getValue().writeTo(out).     }     out.writeOptionalString(syncId).     shardId.writeTo(out).     out.writeInt(totalShards). }
false;public,static;1;5;;public static ShardsSyncedFlushResult readShardsSyncedFlushResult(StreamInput in) throws IOException {     ShardsSyncedFlushResult shardsSyncedFlushResult = new ShardsSyncedFlushResult().     shardsSyncedFlushResult.readFrom(in).     return shardsSyncedFlushResult. }
