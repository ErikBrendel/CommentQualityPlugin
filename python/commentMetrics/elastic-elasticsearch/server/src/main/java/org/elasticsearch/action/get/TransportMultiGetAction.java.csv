commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;45;;@Override protected void doExecute(Task task, final MultiGetRequest request, final ActionListener<MultiGetResponse> listener) {     ClusterState clusterState = clusterService.state().     clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ).     final AtomicArray<MultiGetItemResponse> responses = new AtomicArray<>(request.items.size()).     final Map<ShardId, MultiGetShardRequest> shardRequests = new HashMap<>().     for (int i = 0. i < request.items.size(). i++) {         MultiGetRequest.Item item = request.items.get(i).         String concreteSingleIndex.         try {             concreteSingleIndex = indexNameExpressionResolver.concreteSingleIndex(clusterState, item).getName().             item.routing(clusterState.metaData().resolveIndexRouting(item.routing(), item.index())).             if ((item.routing() == null) && (clusterState.getMetaData().routingRequired(concreteSingleIndex))) {                 responses.set(i, newItemFailure(concreteSingleIndex, item.type(), item.id(), new RoutingMissingException(concreteSingleIndex, item.type(), item.id()))).                 continue.             }         } catch (Exception e) {             responses.set(i, newItemFailure(item.index(), item.type(), item.id(), e)).             continue.         }         ShardId shardId = clusterService.operationRouting().getShards(clusterState, concreteSingleIndex, item.id(), item.routing(), null).shardId().         MultiGetShardRequest shardRequest = shardRequests.get(shardId).         if (shardRequest == null) {             shardRequest = new MultiGetShardRequest(request, shardId.getIndexName(), shardId.getId()).             shardRequests.put(shardId, shardRequest).         }         shardRequest.add(i, item).     }     if (shardRequests.isEmpty()) {         // only failures..         listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()]))).     }     executeShardAction(listener, responses, shardRequests). }
false;public;1;10;;@Override public void onResponse(MultiGetShardResponse response) {     for (int i = 0. i < response.locations.size(). i++) {         MultiGetItemResponse itemResponse = new MultiGetItemResponse(response.responses.get(i), response.failures.get(i)).         responses.set(response.locations.get(i), itemResponse).     }     if (counter.decrementAndGet() == 0) {         finishHim().     } }
false;public;1;11;;@Override public void onFailure(Exception e) {     // create failures for all relevant requests     for (int i = 0. i < shardRequest.locations.size(). i++) {         MultiGetRequest.Item item = shardRequest.items.get(i).         responses.set(shardRequest.locations.get(i), newItemFailure(shardRequest.index(), item.type(), item.id(), e)).     }     if (counter.decrementAndGet() == 0) {         finishHim().     } }
false;private;0;3;;private void finishHim() {     listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()]))). }
false;protected;3;36;;protected void executeShardAction(ActionListener<MultiGetResponse> listener, AtomicArray<MultiGetItemResponse> responses, Map<ShardId, MultiGetShardRequest> shardRequests) {     final AtomicInteger counter = new AtomicInteger(shardRequests.size()).     for (final MultiGetShardRequest shardRequest : shardRequests.values()) {         shardAction.execute(shardRequest, new ActionListener<MultiGetShardResponse>() {              @Override             public void onResponse(MultiGetShardResponse response) {                 for (int i = 0. i < response.locations.size(). i++) {                     MultiGetItemResponse itemResponse = new MultiGetItemResponse(response.responses.get(i), response.failures.get(i)).                     responses.set(response.locations.get(i), itemResponse).                 }                 if (counter.decrementAndGet() == 0) {                     finishHim().                 }             }              @Override             public void onFailure(Exception e) {                 // create failures for all relevant requests                 for (int i = 0. i < shardRequest.locations.size(). i++) {                     MultiGetRequest.Item item = shardRequest.items.get(i).                     responses.set(shardRequest.locations.get(i), newItemFailure(shardRequest.index(), item.type(), item.id(), e)).                 }                 if (counter.decrementAndGet() == 0) {                     finishHim().                 }             }              private void finishHim() {                 listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()]))).             }         }).     } }
false;private,static;4;3;;private static MultiGetItemResponse newItemFailure(String index, String type, String id, Exception exception) {     return new MultiGetItemResponse(null, new MultiGetResponse.Failure(index, type, id, exception)). }
