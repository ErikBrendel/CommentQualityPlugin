commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets snapshot name  *  * @param snapshot snapshot name  * @return this builder  */ ;/**  * Sets snapshot name  *  * @param snapshot snapshot name  * @return this builder  */ public RestoreSnapshotRequestBuilder setSnapshot(String snapshot) {     request.snapshot(snapshot).     return this. }
true;public;1;4;/**  * Sets repository name  *  * @param repository repository name  * @return this builder  */ ;/**  * Sets repository name  *  * @param repository repository name  * @return this builder  */ public RestoreSnapshotRequestBuilder setRepository(String repository) {     request.repository(repository).     return this. }
true;public;1;4;/**  * Sets the list of indices that should be restored from snapshot  * <p>  * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with  * prefix "test" except index "test42". Aliases are not supported. An empty list or {"_all"} will restore all open  * indices in the snapshot.  *  * @param indices list of indices  * @return this builder  */ ;/**  * Sets the list of indices that should be restored from snapshot  * <p>  * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with  * prefix "test" except index "test42". Aliases are not supported. An empty list or {"_all"} will restore all open  * indices in the snapshot.  *  * @param indices list of indices  * @return this builder  */ public RestoreSnapshotRequestBuilder setIndices(String... indices) {     request.indices(indices).     return this. }
true;public;1;4;/**  * Specifies what type of requested indices to ignore and how to deal with wildcard expressions.  * For example indices that don't exist.  *  * @param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions  * @return this builder  */ ;/**  * Specifies what type of requested indices to ignore and how to deal with wildcard expressions.  * For example indices that don't exist.  *  * @param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions  * @return this builder  */ public RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions) {     request.indicesOptions(indicesOptions).     return this. }
true;public;1;4;/**  * Sets rename pattern that should be applied to restored indices.  * <p>  * Indices that match the rename pattern will be renamed according to {@link #setRenameReplacement(String)}. The  * rename pattern is applied according to the {@link java.util.regex.Matcher#appendReplacement(StringBuffer, String)}  * The request will fail if two or more indices will be renamed into the same name.  *  * @param renamePattern rename pattern  * @return this builder  */ ;/**  * Sets rename pattern that should be applied to restored indices.  * <p>  * Indices that match the rename pattern will be renamed according to {@link #setRenameReplacement(String)}. The  * rename pattern is applied according to the {@link java.util.regex.Matcher#appendReplacement(StringBuffer, String)}  * The request will fail if two or more indices will be renamed into the same name.  *  * @param renamePattern rename pattern  * @return this builder  */ public RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern) {     request.renamePattern(renamePattern).     return this. }
true;public;1;4;/**  * Sets rename replacement  * <p>  * See {@link #setRenamePattern(String)} for more information.  *  * @param renameReplacement rename replacement  * @return this builder  */ ;/**  * Sets rename replacement  * <p>  * See {@link #setRenamePattern(String)} for more information.  *  * @param renameReplacement rename replacement  * @return this builder  */ public RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement) {     request.renameReplacement(renameReplacement).     return this. }
true;public;1;4;/**  * Sets repository-specific restore settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ ;/**  * Sets repository-specific restore settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ public RestoreSnapshotRequestBuilder setSettings(Settings settings) {     request.settings(settings).     return this. }
true;public;1;4;/**  * Sets repository-specific restore settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ ;/**  * Sets repository-specific restore settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ public RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings) {     request.settings(settings).     return this. }
true;public;2;4;/**  * Sets repository-specific restore settings in JSON or YAML format  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @param xContentType the content type of the source  * @return this builder  */ ;/**  * Sets repository-specific restore settings in JSON or YAML format  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @param xContentType the content type of the source  * @return this builder  */ public RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType) {     request.settings(source, xContentType).     return this. }
true;public;1;4;/**  * Sets repository-specific restore settings  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @return this builder  */ ;/**  * Sets repository-specific restore settings  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @return this builder  */ public RestoreSnapshotRequestBuilder setSettings(Map<String, Object> source) {     request.settings(source).     return this. }
true;public;1;4;/**  * If this parameter is set to true the operation will wait for completion of restore process before returning.  *  * @param waitForCompletion if true the operation will wait for completion  * @return this builder  */ ;/**  * If this parameter is set to true the operation will wait for completion of restore process before returning.  *  * @param waitForCompletion if true the operation will wait for completion  * @return this builder  */ public RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion) {     request.waitForCompletion(waitForCompletion).     return this. }
true;public;1;4;/**  * If set to true the restore procedure will restore global cluster state.  * <p>  * The global cluster state includes persistent settings and index template definitions.  *  * @param restoreGlobalState true if global state should be restored from the snapshot  * @return this builder  */ ;/**  * If set to true the restore procedure will restore global cluster state.  * <p>  * The global cluster state includes persistent settings and index template definitions.  *  * @param restoreGlobalState true if global state should be restored from the snapshot  * @return this builder  */ public RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState) {     request.includeGlobalState(restoreGlobalState).     return this. }
true;public;1;4;/**  * If set to true the restore procedure will restore partially snapshotted indices  *  * @param partial true if partially snapshotted indices should be restored  * @return this builder  */ ;/**  * If set to true the restore procedure will restore partially snapshotted indices  *  * @param partial true if partially snapshotted indices should be restored  * @return this builder  */ public RestoreSnapshotRequestBuilder setPartial(boolean partial) {     request.partial(partial).     return this. }
true;public;1;4;/**  * If set to true the restore procedure will restore aliases  *  * @param restoreAliases true if aliases should be restored from the snapshot  * @return this builder  */ ;/**  * If set to true the restore procedure will restore aliases  *  * @param restoreAliases true if aliases should be restored from the snapshot  * @return this builder  */ public RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases) {     request.includeAliases(restoreAliases).     return this. }
true;public;1;4;/**  * Sets index settings that should be added or replaced during restore  *  * @param settings index settings  * @return this builder  */ ;/**  * Sets index settings that should be added or replaced during restore  *  * @param settings index settings  * @return this builder  */ public RestoreSnapshotRequestBuilder setIndexSettings(Settings settings) {     request.indexSettings(settings).     return this. }
true;public;1;4;/**  * Sets index settings that should be added or replaced during restore  *  * @param settings index settings  * @return this builder  */ ;/**  * Sets index settings that should be added or replaced during restore  *  * @param settings index settings  * @return this builder  */ public RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings) {     request.indexSettings(settings).     return this. }
true;public;2;4;/**  * Sets index settings that should be added or replaced during restore  *  * @param source index settings  * @param xContentType the content type of the source  * @return this builder  */ ;/**  * Sets index settings that should be added or replaced during restore  *  * @param source index settings  * @param xContentType the content type of the source  * @return this builder  */ public RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType) {     request.indexSettings(source, xContentType).     return this. }
true;public;1;4;/**  * Sets index settings that should be added or replaced during restore  *  * @param source index settings  * @return this builder  */ ;/**  * Sets index settings that should be added or replaced during restore  *  * @param source index settings  * @return this builder  */ public RestoreSnapshotRequestBuilder setIndexSettings(Map<String, Object> source) {     request.indexSettings(source).     return this. }
true;public;1;4;/**  * Sets the list of index settings and index settings groups that shouldn't be restored from snapshot  */ ;/**  * Sets the list of index settings and index settings groups that shouldn't be restored from snapshot  */ public RestoreSnapshotRequestBuilder setIgnoreIndexSettings(String... ignoreIndexSettings) {     request.ignoreIndexSettings(ignoreIndexSettings).     return this. }
true;public;1;4;/**  * Sets the list of index settings and index settings groups that shouldn't be restored from snapshot  */ ;/**  * Sets the list of index settings and index settings groups that shouldn't be restored from snapshot  */ public RestoreSnapshotRequestBuilder setIgnoreIndexSettings(List<String> ignoreIndexSettings) {     request.ignoreIndexSettings(ignoreIndexSettings).     return this. }
