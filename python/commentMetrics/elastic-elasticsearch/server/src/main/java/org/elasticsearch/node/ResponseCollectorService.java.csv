# id;timestamp;commentText;codeText;commentWords;codeWords
ResponseCollectorService -> ComputedNodeStats -> private double innerRank(long outstandingRequests);1524684173;Rank this copy of the data, according to the adaptive replica selection formula from the C3 paper_https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-suresh.pdf;private double innerRank(long outstandingRequests) {_            _            _            _            double concurrencyCompensation = outstandingRequests * clientNum___            _            _            int queueAdjustmentFactor = 3___            _            double qBar = queueSize__            double qHatS = 1 + concurrencyCompensation + qBar___            _            double rS = responseTime / FACTOR__            _            double muBarS = serviceTime / FACTOR___            _            double rank = rS - (1.0 / muBarS) + (Math.pow(qHatS, queueAdjustmentFactor) / muBarS)__            return rank__        };rank,this,copy,of,the,data,according,to,the,adaptive,replica,selection,formula,from,the,c3,paper,https,www,usenix,org,system,files,conference,nsdi15,nsdi15,paper,suresh,pdf;private,double,inner,rank,long,outstanding,requests,double,concurrency,compensation,outstanding,requests,client,num,int,queue,adjustment,factor,3,double,q,bar,queue,size,double,q,hat,s,1,concurrency,compensation,q,bar,double,r,s,response,time,factor,double,mu,bar,s,service,time,factor,double,rank,r,s,1,0,mu,bar,s,math,pow,q,hat,s,queue,adjustment,factor,mu,bar,s,return,rank
ResponseCollectorService -> ComputedNodeStats -> private double innerRank(long outstandingRequests);1528762805;Rank this copy of the data, according to the adaptive replica selection formula from the C3 paper_https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-suresh.pdf;private double innerRank(long outstandingRequests) {_            _            _            _            double concurrencyCompensation = outstandingRequests * clientNum___            _            _            int queueAdjustmentFactor = 3___            _            double qBar = queueSize__            double qHatS = 1 + concurrencyCompensation + qBar___            _            double rS = responseTime / FACTOR__            _            double muBarS = serviceTime / FACTOR___            _            double rank = rS - (1.0 / muBarS) + (Math.pow(qHatS, queueAdjustmentFactor) / muBarS)__            return rank__        };rank,this,copy,of,the,data,according,to,the,adaptive,replica,selection,formula,from,the,c3,paper,https,www,usenix,org,system,files,conference,nsdi15,nsdi15,paper,suresh,pdf;private,double,inner,rank,long,outstanding,requests,double,concurrency,compensation,outstanding,requests,client,num,int,queue,adjustment,factor,3,double,q,bar,queue,size,double,q,hat,s,1,concurrency,compensation,q,bar,double,r,s,response,time,factor,double,mu,bar,s,service,time,factor,double,rank,r,s,1,0,mu,bar,s,math,pow,q,hat,s,queue,adjustment,factor,mu,bar,s,return,rank
ResponseCollectorService -> ComputedNodeStats -> private double innerRank(long outstandingRequests);1541092382;Rank this copy of the data, according to the adaptive replica selection formula from the C3 paper_https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-suresh.pdf;private double innerRank(long outstandingRequests) {_            _            _            _            double concurrencyCompensation = outstandingRequests * clientNum___            _            _            int queueAdjustmentFactor = 3___            _            double qBar = queueSize__            double qHatS = 1 + concurrencyCompensation + qBar___            _            double rS = responseTime / FACTOR__            _            double muBarS = serviceTime / FACTOR___            _            double rank = rS - (1.0 / muBarS) + (Math.pow(qHatS, queueAdjustmentFactor) / muBarS)__            return rank__        };rank,this,copy,of,the,data,according,to,the,adaptive,replica,selection,formula,from,the,c3,paper,https,www,usenix,org,system,files,conference,nsdi15,nsdi15,paper,suresh,pdf;private,double,inner,rank,long,outstanding,requests,double,concurrency,compensation,outstanding,requests,client,num,int,queue,adjustment,factor,3,double,q,bar,queue,size,double,q,hat,s,1,concurrency,compensation,q,bar,double,r,s,response,time,factor,double,mu,bar,s,service,time,factor,double,rank,r,s,1,0,mu,bar,s,math,pow,q,hat,s,queue,adjustment,factor,mu,bar,s,return,rank
ResponseCollectorService -> ComputedNodeStats -> private double innerRank(long outstandingRequests);1542402632;Rank this copy of the data, according to the adaptive replica selection formula from the C3 paper_https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-suresh.pdf;private double innerRank(long outstandingRequests) {_            _            _            _            double concurrencyCompensation = outstandingRequests * clientNum___            _            _            int queueAdjustmentFactor = 3___            _            double qBar = queueSize__            double qHatS = 1 + concurrencyCompensation + qBar___            _            double rS = responseTime / FACTOR__            _            double muBarS = serviceTime / FACTOR___            _            double rank = rS - (1.0 / muBarS) + (Math.pow(qHatS, queueAdjustmentFactor) / muBarS)__            return rank__        };rank,this,copy,of,the,data,according,to,the,adaptive,replica,selection,formula,from,the,c3,paper,https,www,usenix,org,system,files,conference,nsdi15,nsdi15,paper,suresh,pdf;private,double,inner,rank,long,outstanding,requests,double,concurrency,compensation,outstanding,requests,client,num,int,queue,adjustment,factor,3,double,q,bar,queue,size,double,q,hat,s,1,concurrency,compensation,q,bar,double,r,s,response,time,factor,double,mu,bar,s,service,time,factor,double,rank,r,s,1,0,mu,bar,s,math,pow,q,hat,s,queue,adjustment,factor,mu,bar,s,return,rank
ResponseCollectorService -> public Optional<ComputedNodeStats> getNodeStatistics(final String nodeId);1524684173;Optionally return a {@code NodeStatistics} for the given nodeid, if_response information exists for the given node. Returns an empty_{@code Optional} if the node was not found.;public Optional<ComputedNodeStats> getNodeStatistics(final String nodeId) {_        final int clientNum = nodeIdToStats.size()__        return Optional.ofNullable(nodeIdToStats.get(nodeId)).map(ns -> new ComputedNodeStats(clientNum, ns))__    };optionally,return,a,code,node,statistics,for,the,given,nodeid,if,response,information,exists,for,the,given,node,returns,an,empty,code,optional,if,the,node,was,not,found;public,optional,computed,node,stats,get,node,statistics,final,string,node,id,final,int,client,num,node,id,to,stats,size,return,optional,of,nullable,node,id,to,stats,get,node,id,map,ns,new,computed,node,stats,client,num,ns
ResponseCollectorService -> public Optional<ComputedNodeStats> getNodeStatistics(final String nodeId);1528762805;Optionally return a {@code NodeStatistics} for the given nodeid, if_response information exists for the given node. Returns an empty_{@code Optional} if the node was not found.;public Optional<ComputedNodeStats> getNodeStatistics(final String nodeId) {_        final int clientNum = nodeIdToStats.size()__        return Optional.ofNullable(nodeIdToStats.get(nodeId)).map(ns -> new ComputedNodeStats(clientNum, ns))__    };optionally,return,a,code,node,statistics,for,the,given,nodeid,if,response,information,exists,for,the,given,node,returns,an,empty,code,optional,if,the,node,was,not,found;public,optional,computed,node,stats,get,node,statistics,final,string,node,id,final,int,client,num,node,id,to,stats,size,return,optional,of,nullable,node,id,to,stats,get,node,id,map,ns,new,computed,node,stats,client,num,ns
ResponseCollectorService -> public Optional<ComputedNodeStats> getNodeStatistics(final String nodeId);1541092382;Optionally return a {@code NodeStatistics} for the given nodeid, if_response information exists for the given node. Returns an empty_{@code Optional} if the node was not found.;public Optional<ComputedNodeStats> getNodeStatistics(final String nodeId) {_        final int clientNum = nodeIdToStats.size()__        return Optional.ofNullable(nodeIdToStats.get(nodeId)).map(ns -> new ComputedNodeStats(clientNum, ns))__    };optionally,return,a,code,node,statistics,for,the,given,nodeid,if,response,information,exists,for,the,given,node,returns,an,empty,code,optional,if,the,node,was,not,found;public,optional,computed,node,stats,get,node,statistics,final,string,node,id,final,int,client,num,node,id,to,stats,size,return,optional,of,nullable,node,id,to,stats,get,node,id,map,ns,new,computed,node,stats,client,num,ns
ResponseCollectorService -> public Optional<ComputedNodeStats> getNodeStatistics(final String nodeId);1542402632;Optionally return a {@code NodeStatistics} for the given nodeid, if_response information exists for the given node. Returns an empty_{@code Optional} if the node was not found.;public Optional<ComputedNodeStats> getNodeStatistics(final String nodeId) {_        final int clientNum = nodeIdToStats.size()__        return Optional.ofNullable(nodeIdToStats.get(nodeId)).map(ns -> new ComputedNodeStats(clientNum, ns))__    };optionally,return,a,code,node,statistics,for,the,given,nodeid,if,response,information,exists,for,the,given,node,returns,an,empty,code,optional,if,the,node,was,not,found;public,optional,computed,node,stats,get,node,statistics,final,string,node,id,final,int,client,num,node,id,to,stats,size,return,optional,of,nullable,node,id,to,stats,get,node,id,map,ns,new,computed,node,stats,client,num,ns
