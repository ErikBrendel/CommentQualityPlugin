commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;7;;@Override protected ShardsIterator shards(final ClusterState state, final InternalRequest request) {     return state.routingTable().shardRoutingTable(request.concreteIndex(), request.request().getShardId().id()).primaryShardIt(). }
false;public;1;6;;@Override public void onResponse(final Releasable releasable) {     try (Releasable ignore = releasable) {         doRetentionLeaseAction(indexShard, request, listener).     } }
false;public;1;4;;@Override public void onFailure(final Exception e) {     listener.onFailure(e). }
false;protected;3;23;;@Override protected void asyncShardOperation(T request, ShardId shardId, final ActionListener<Response> listener) {     final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex()).     final IndexShard indexShard = indexService.getShard(shardId.id()).     indexShard.acquirePrimaryOperationPermit(new ActionListener<Releasable>() {          @Override         public void onResponse(final Releasable releasable) {             try (Releasable ignore = releasable) {                 doRetentionLeaseAction(indexShard, request, listener).             }         }          @Override         public void onFailure(final Exception e) {             listener.onFailure(e).         }     }, ThreadPool.Names.SAME, request). }
false;protected;2;4;;@Override protected Response shardOperation(final T request, final ShardId shardId) {     throw new UnsupportedOperationException(). }
false;abstract;3;1;;abstract void doRetentionLeaseAction(IndexShard indexShard, T request, ActionListener<Response> listener).
false;protected;0;4;;@Override protected Response newResponse() {     return new Response(). }
false;protected;1;4;;@Override protected boolean resolveIndex(final T request) {     return false. }
false;;3;10;;@Override void doRetentionLeaseAction(final IndexShard indexShard, final AddRequest request, final ActionListener<Response> listener) {     indexShard.addRetentionLease(request.getId(), request.getRetainingSequenceNumber(), request.getSource(), ActionListener.wrap(r -> listener.onResponse(new Response()), listener::onFailure)). }
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;;3;5;;@Override void doRetentionLeaseAction(final IndexShard indexShard, final RenewRequest request, final ActionListener<Response> listener) {     indexShard.renewRetentionLease(request.getId(), request.getRetainingSequenceNumber(), request.getSource()).     listener.onResponse(new Response()). }
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;;3;8;;@Override void doRetentionLeaseAction(final IndexShard indexShard, final RemoveRequest request, final ActionListener<Response> listener) {     indexShard.removeRetentionLease(request.getId(), ActionListener.wrap(r -> listener.onResponse(new Response()), listener::onFailure)). }
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public;0;3;;public ShardId getShardId() {     return shardId. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;6;;@Override public void readFrom(final StreamInput in) throws IOException {     super.readFrom(in).     shardId = ShardId.readShardId(in).     id = in.readString(). }
false;public;1;6;;@Override public void writeTo(final StreamOutput out) throws IOException {     super.writeTo(out).     shardId.writeTo(out).     out.writeString(id). }
false;public;0;3;;public long getRetainingSequenceNumber() {     return retainingSequenceNumber. }
false;public;0;3;;public String getSource() {     return source. }
false;public;1;6;;@Override public void readFrom(final StreamInput in) throws IOException {     super.readFrom(in).     retainingSequenceNumber = in.readZLong().     source = in.readString(). }
false;public;1;6;;@Override public void writeTo(final StreamOutput out) throws IOException {     super.writeTo(out).     out.writeZLong(retainingSequenceNumber).     out.writeString(source). }
