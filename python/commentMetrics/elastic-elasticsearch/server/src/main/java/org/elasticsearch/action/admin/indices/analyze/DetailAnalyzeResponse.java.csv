commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public AnalyzeTokenList analyzer() {     return this.analyzer. }
false;public;1;5;;public DetailAnalyzeResponse analyzer(AnalyzeTokenList analyzer) {     this.customAnalyzer = false.     this.analyzer = analyzer.     return this. }
false;public;0;3;;public CharFilteredText[] charfilters() {     return this.charfilters. }
false;public;1;5;;public DetailAnalyzeResponse charfilters(CharFilteredText[] charfilters) {     this.customAnalyzer = true.     this.charfilters = charfilters.     return this. }
false;public;0;3;;public AnalyzeTokenList tokenizer() {     return tokenizer. }
false;public;1;5;;public DetailAnalyzeResponse tokenizer(AnalyzeTokenList tokenizer) {     this.customAnalyzer = true.     this.tokenizer = tokenizer.     return this. }
false;public;0;3;;public AnalyzeTokenList[] tokenfilters() {     return tokenfilters. }
false;public;1;5;;public DetailAnalyzeResponse tokenfilters(AnalyzeTokenList[] tokenfilters) {     this.customAnalyzer = true.     this.tokenfilters = tokenfilters.     return this. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     DetailAnalyzeResponse that = (DetailAnalyzeResponse) o.     return customAnalyzer == that.customAnalyzer && Objects.equals(analyzer, that.analyzer) && Arrays.equals(charfilters, that.charfilters) && Objects.equals(tokenizer, that.tokenizer) && Arrays.equals(tokenfilters, that.tokenfilters). }
false;public;0;7;;@Override public int hashCode() {     int result = Objects.hash(customAnalyzer, analyzer, tokenizer).     result = 31 * result + Arrays.hashCode(charfilters).     result = 31 * result + Arrays.hashCode(tokenfilters).     return result. }
false;public;2;33;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(Fields.CUSTOM_ANALYZER, customAnalyzer).     if (analyzer != null) {         builder.startObject(Fields.ANALYZER).         analyzer.toXContentWithoutObject(builder, params).         builder.endObject().     }     if (charfilters != null) {         builder.startArray(Fields.CHARFILTERS).         for (CharFilteredText charfilter : charfilters) {             charfilter.toXContent(builder, params).         }         builder.endArray().     }     if (tokenizer != null) {         builder.startObject(Fields.TOKENIZER).         tokenizer.toXContentWithoutObject(builder, params).         builder.endObject().     }     if (tokenfilters != null) {         builder.startArray(Fields.TOKENFILTERS).         for (AnalyzeTokenList tokenfilter : tokenfilters) {             tokenfilter.toXContent(builder, params).         }         builder.endArray().     }     return builder. }
false;private,static;2;7;;@SuppressWarnings("unchecked") private static <T> T[] fromList(Class<T> clazz, List<T> list) {     if (list == null) {         return null.     }     return list.toArray((T[]) Array.newInstance(clazz, 0)). }
false;public,static;1;3;;public static DetailAnalyzeResponse fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;1;23;;@Override public void readFrom(StreamInput in) throws IOException {     this.customAnalyzer = in.readBoolean().     if (customAnalyzer) {         tokenizer = AnalyzeTokenList.readAnalyzeTokenList(in).         int size = in.readVInt().         if (size > 0) {             charfilters = new CharFilteredText[size].             for (int i = 0. i < size. i++) {                 charfilters[i] = CharFilteredText.readCharFilteredText(in).             }         }         size = in.readVInt().         if (size > 0) {             tokenfilters = new AnalyzeTokenList[size].             for (int i = 0. i < size. i++) {                 tokenfilters[i] = AnalyzeTokenList.readAnalyzeTokenList(in).             }         }     } else {         analyzer = AnalyzeTokenList.readAnalyzeTokenList(in).     } }
false;public;1;25;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeBoolean(customAnalyzer).     if (customAnalyzer) {         tokenizer.writeTo(out).         if (charfilters != null) {             out.writeVInt(charfilters.length).             for (CharFilteredText charfilter : charfilters) {                 charfilter.writeTo(out).             }         } else {             out.writeVInt(0).         }         if (tokenfilters != null) {             out.writeVInt(tokenfilters.length).             for (AnalyzeTokenList tokenfilter : tokenfilters) {                 tokenfilter.writeTo(out).             }         } else {             out.writeVInt(0).         }     } else {         analyzer.writeTo(out).     } }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     AnalyzeTokenList that = (AnalyzeTokenList) o.     return Objects.equals(name, that.name) && Arrays.equals(tokens, that.tokens). }
false;public;0;6;;@Override public int hashCode() {     int result = Objects.hash(name).     result = 31 * result + Arrays.hashCode(tokens).     return result. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public AnalyzeResponse.AnalyzeToken[] getTokens() {     return tokens. }
false;public,static;1;5;;public static AnalyzeTokenList readAnalyzeTokenList(StreamInput in) throws IOException {     AnalyzeTokenList list = new AnalyzeTokenList().     list.readFrom(in).     return list. }
false;;2;11;;XContentBuilder toXContentWithoutObject(XContentBuilder builder, Params params) throws IOException {     builder.field(Fields.NAME, this.name).     builder.startArray(AnalyzeResponse.Fields.TOKENS).     if (tokens != null) {         for (AnalyzeResponse.AnalyzeToken token : tokens) {             token.toXContent(builder, params).         }     }     builder.endArray().     return builder. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     toXContentWithoutObject(builder, params).     builder.endObject().     return builder. }
false;public,static;1;3;;public static AnalyzeTokenList fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     name = in.readString().     int size = in.readVInt().     if (size > 0) {         tokens = new AnalyzeResponse.AnalyzeToken[size].         for (int i = 0. i < size. i++) {             tokens[i] = AnalyzeResponse.AnalyzeToken.readAnalyzeToken(in).         }     } }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     if (tokens != null) {         out.writeVInt(tokens.length).         for (AnalyzeResponse.AnalyzeToken token : tokens) {             token.writeTo(out).         }     } else {         out.writeVInt(0).     } }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public String[] getTexts() {     return texts. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Fields.NAME, name).     builder.array(Fields.FILTERED_TEXT, texts).     builder.endObject().     return builder. }
false;public,static;1;3;;public static CharFilteredText fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public,static;1;5;;public static CharFilteredText readCharFilteredText(StreamInput in) throws IOException {     CharFilteredText text = new CharFilteredText().     text.readFrom(in).     return text. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     name = in.readString().     texts = in.readStringArray(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeStringArray(texts). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     CharFilteredText that = (CharFilteredText) o.     return Objects.equals(name, that.name) && Arrays.equals(texts, that.texts). }
false;public;0;6;;@Override public int hashCode() {     int result = Objects.hash(name).     result = 31 * result + Arrays.hashCode(texts).     return result. }
