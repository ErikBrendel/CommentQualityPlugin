commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns a set of patterns  */ ;/**  * Returns a set of patterns  */ public Set<String> getPatterns() {     return patterns. }
true;public,static;1;3;/**  * Returns <code>true</code> iff the given string is either a valid settings key pattern or a simple regular expression  * @see Regex  * @see AbstractScopedSettings#isValidKey(String)  */ ;/**  * Returns <code>true</code> iff the given string is either a valid settings key pattern or a simple regular expression  * @see Regex  * @see AbstractScopedSettings#isValidKey(String)  */ public static boolean isValidPattern(String pattern) {     return AbstractScopedSettings.isValidKey(pattern) || Regex.isSimpleMatchPattern(pattern). }
false;public;1;5;;public void addFilterSettingParams(RestRequest request) {     if (patterns.isEmpty() == false) {         request.params().put(SETTINGS_FILTER_PARAM, patternString).     } }
false;public,static;2;10;;public static Settings filterSettings(Params params, Settings settings) {     String patterns = params.param(SETTINGS_FILTER_PARAM).     final Settings filteredSettings.     if (patterns != null && patterns.isEmpty() == false) {         filteredSettings = filterSettings(Strings.commaDelimitedListToSet(patterns), settings).     } else {         filteredSettings = settings.     }     return filteredSettings. }
false;public;1;3;;public Settings filter(Settings settings) {     return filterSettings(patterns, settings). }
false;private,static;2;16;;private static Settings filterSettings(Iterable<String> patterns, Settings settings) {     Settings.Builder builder = Settings.builder().put(settings).     List<String> simpleMatchPatternList = new ArrayList<>().     for (String pattern : patterns) {         if (Regex.isSimpleMatchPattern(pattern)) {             simpleMatchPatternList.add(pattern).         } else {             builder.remove(pattern).         }     }     if (!simpleMatchPatternList.isEmpty()) {         String[] simpleMatchPatterns = simpleMatchPatternList.toArray(new String[simpleMatchPatternList.size()]).         builder.keys().removeIf(key -> Regex.simpleMatch(simpleMatchPatterns, key)).     }     return builder.build(). }
