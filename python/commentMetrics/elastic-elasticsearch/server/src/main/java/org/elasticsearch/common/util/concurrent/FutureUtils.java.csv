# id;timestamp;commentText;codeText;commentWords;codeWords
FutureUtils -> public static <T> T get(Future<T> future);1524684173;Calls {@link Future#get()} without the checked exceptions.__@param future to dereference_@param <T> the type returned_@return the value of the future;public static <T> T get(Future<T> future) {_        try {_            return future.get()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__            throw new IllegalStateException("Future got interrupted", e)__        } catch (ExecutionException e) {_            throw rethrowExecutionException(e)__        }_    };calls,link,future,get,without,the,checked,exceptions,param,future,to,dereference,param,t,the,type,returned,return,the,value,of,the,future;public,static,t,t,get,future,t,future,try,return,future,get,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,future,got,interrupted,e,catch,execution,exception,e,throw,rethrow,execution,exception,e
FutureUtils -> public static <T> T get(Future<T> future);1528762805;Calls {@link Future#get()} without the checked exceptions.__@param future to dereference_@param <T> the type returned_@return the value of the future;public static <T> T get(Future<T> future) {_        try {_            return future.get()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__            throw new IllegalStateException("Future got interrupted", e)__        } catch (ExecutionException e) {_            throw rethrowExecutionException(e)__        }_    };calls,link,future,get,without,the,checked,exceptions,param,future,to,dereference,param,t,the,type,returned,return,the,value,of,the,future;public,static,t,t,get,future,t,future,try,return,future,get,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,future,got,interrupted,e,catch,execution,exception,e,throw,rethrow,execution,exception,e
FutureUtils -> public static <T> T get(Future<T> future);1536828374;Calls {@link Future#get()} without the checked exceptions.__@param future to dereference_@param <T> the type returned_@return the value of the future;public static <T> T get(Future<T> future) {_        try {_            return future.get()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__            throw new IllegalStateException("Future got interrupted", e)__        } catch (ExecutionException e) {_            throw rethrowExecutionException(e)__        }_    };calls,link,future,get,without,the,checked,exceptions,param,future,to,dereference,param,t,the,type,returned,return,the,value,of,the,future;public,static,t,t,get,future,t,future,try,return,future,get,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,future,got,interrupted,e,catch,execution,exception,e,throw,rethrow,execution,exception,e
FutureUtils -> public static  <T> T get(Future<T> future, long timeout, TimeUnit unit);1524684173;Calls {@link Future#get(long, TimeUnit)} without the checked exceptions.__@param future to dereference_@param timeout to wait_@param unit for timeout_@param <T> the type returned_@return the value of the future;public static  <T> T get(Future<T> future, long timeout, TimeUnit unit) {_        try {_            return future.get(timeout, unit)__        } catch (TimeoutException e) {_            throw new ElasticsearchTimeoutException(e)__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__            throw new IllegalStateException("Future got interrupted", e)__        } catch (ExecutionException e) {_            throw FutureUtils.rethrowExecutionException(e)__        }_    };calls,link,future,get,long,time,unit,without,the,checked,exceptions,param,future,to,dereference,param,timeout,to,wait,param,unit,for,timeout,param,t,the,type,returned,return,the,value,of,the,future;public,static,t,t,get,future,t,future,long,timeout,time,unit,unit,try,return,future,get,timeout,unit,catch,timeout,exception,e,throw,new,elasticsearch,timeout,exception,e,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,future,got,interrupted,e,catch,execution,exception,e,throw,future,utils,rethrow,execution,exception,e
FutureUtils -> public static  <T> T get(Future<T> future, long timeout, TimeUnit unit);1528762805;Calls {@link Future#get(long, TimeUnit)} without the checked exceptions.__@param future to dereference_@param timeout to wait_@param unit for timeout_@param <T> the type returned_@return the value of the future;public static  <T> T get(Future<T> future, long timeout, TimeUnit unit) {_        try {_            return future.get(timeout, unit)__        } catch (TimeoutException e) {_            throw new ElasticsearchTimeoutException(e)__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__            throw new IllegalStateException("Future got interrupted", e)__        } catch (ExecutionException e) {_            throw FutureUtils.rethrowExecutionException(e)__        }_    };calls,link,future,get,long,time,unit,without,the,checked,exceptions,param,future,to,dereference,param,timeout,to,wait,param,unit,for,timeout,param,t,the,type,returned,return,the,value,of,the,future;public,static,t,t,get,future,t,future,long,timeout,time,unit,unit,try,return,future,get,timeout,unit,catch,timeout,exception,e,throw,new,elasticsearch,timeout,exception,e,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,future,got,interrupted,e,catch,execution,exception,e,throw,future,utils,rethrow,execution,exception,e
FutureUtils -> public static  <T> T get(Future<T> future, long timeout, TimeUnit unit);1536828374;Calls {@link Future#get(long, TimeUnit)} without the checked exceptions.__@param future to dereference_@param timeout to wait_@param unit for timeout_@param <T> the type returned_@return the value of the future;public static  <T> T get(Future<T> future, long timeout, TimeUnit unit) {_        try {_            return future.get(timeout, unit)__        } catch (TimeoutException e) {_            throw new ElasticsearchTimeoutException(e)__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__            throw new IllegalStateException("Future got interrupted", e)__        } catch (ExecutionException e) {_            throw FutureUtils.rethrowExecutionException(e)__        }_    };calls,link,future,get,long,time,unit,without,the,checked,exceptions,param,future,to,dereference,param,timeout,to,wait,param,unit,for,timeout,param,t,the,type,returned,return,the,value,of,the,future;public,static,t,t,get,future,t,future,long,timeout,time,unit,unit,try,return,future,get,timeout,unit,catch,timeout,exception,e,throw,new,elasticsearch,timeout,exception,e,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,future,got,interrupted,e,catch,execution,exception,e,throw,future,utils,rethrow,execution,exception,e
