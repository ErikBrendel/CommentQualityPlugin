commented;modifiers;parameterAmount;loc;comment;code
false;public;1;47;;@Override public IngestDocument execute(IngestDocument ingestDocument) throws Exception {     Processor processor = actualProcessor.     try {         if (processor instanceof ConditionalProcessor) {             ConditionalProcessor conditionalProcessor = (ConditionalProcessor) processor.             if (conditionalProcessor.evaluate(ingestDocument) == false) {                 return ingestDocument.             }             if (conditionalProcessor.getProcessor() instanceof PipelineProcessor) {                 processor = conditionalProcessor.getProcessor().             }         }         if (processor instanceof PipelineProcessor) {             PipelineProcessor pipelineProcessor = ((PipelineProcessor) processor).             Pipeline pipeline = pipelineProcessor.getPipeline().             // runtime check for cycles against a copy of the document. This is needed to properly handle conditionals around pipelines             try {                 IngestDocument ingestDocumentCopy = new IngestDocument(ingestDocument).                 ingestDocumentCopy.executePipeline(pipelineProcessor.getPipeline()).             } catch (ElasticsearchException elasticsearchException) {                 if (elasticsearchException.getCause().getCause() instanceof IllegalStateException) {                     throw elasticsearchException.                 }             // else do nothing, let the tracking processors throw the exception while recording the path up to the failure             } catch (Exception e) {             // do nothing, let the tracking processors throw the exception while recording the path up to the failure             }             // now that we know that there are no cycles between pipelines, decorate the processors for this pipeline and execute it             CompoundProcessor verbosePipelineProcessor = decorate(pipeline.getCompoundProcessor(), processorResultList).             Pipeline verbosePipeline = new Pipeline(pipeline.getId(), pipeline.getDescription(), pipeline.getVersion(), verbosePipelineProcessor).             ingestDocument.executePipeline(verbosePipeline).         } else {             processor.execute(ingestDocument).             processorResultList.add(new SimulateProcessorResult(processor.getTag(), new IngestDocument(ingestDocument))).         }     } catch (Exception e) {         if (ignoreFailure) {             processorResultList.add(new SimulateProcessorResult(processor.getTag(), new IngestDocument(ingestDocument), e)).         } else {             processorResultList.add(new SimulateProcessorResult(processor.getTag(), e)).         }         throw e.     }     return ingestDocument. }
false;public;0;4;;@Override public String getType() {     return actualProcessor.getType(). }
false;public;0;4;;@Override public String getTag() {     return actualProcessor.getTag(). }
false;public,static;2;19;;public static CompoundProcessor decorate(CompoundProcessor compoundProcessor, List<SimulateProcessorResult> processorResultList) {     List<Processor> processors = new ArrayList<>(compoundProcessor.getProcessors().size()).     for (Processor processor : compoundProcessor.getProcessors()) {         if (processor instanceof CompoundProcessor) {             processors.add(decorate((CompoundProcessor) processor, processorResultList)).         } else {             processors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList)).         }     }     List<Processor> onFailureProcessors = new ArrayList<>(compoundProcessor.getProcessors().size()).     for (Processor processor : compoundProcessor.getOnFailureProcessors()) {         if (processor instanceof CompoundProcessor) {             onFailureProcessors.add(decorate((CompoundProcessor) processor, processorResultList)).         } else {             onFailureProcessors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList)).         }     }     return new CompoundProcessor(compoundProcessor.isIgnoreFailure(), processors, onFailureProcessors). }
