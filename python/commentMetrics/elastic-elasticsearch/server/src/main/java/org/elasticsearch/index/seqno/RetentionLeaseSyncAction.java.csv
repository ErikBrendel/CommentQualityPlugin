# id;timestamp;commentText;codeText;commentWords;codeWords
RetentionLeaseSyncAction -> public void sync(             final ShardId shardId,             final RetentionLeases retentionLeases,             final ActionListener<ReplicationResponse> listener);1549294529;Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.__@param shardId         the shard to sync_@param retentionLeases the retention leases to sync_@param listener        the callback to invoke when the sync completes normally or abnormally;public void sync(_            final ShardId shardId,_            final RetentionLeases retentionLeases,_            final ActionListener<ReplicationResponse> listener) {_        Objects.requireNonNull(shardId)__        Objects.requireNonNull(retentionLeases)__        Objects.requireNonNull(listener)__        final ThreadContext threadContext = threadPool.getThreadContext()__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            _            threadContext.markAsSystemContext()__            execute(_                    new RetentionLeaseSyncAction.Request(shardId, retentionLeases),_                    ActionListener.wrap(_                            listener::onResponse,_                            e -> {_                                if (ExceptionsHelper.unwrap(e, AlreadyClosedException.class, IndexShardClosedException.class) == null) {_                                    getLogger().warn(new ParameterizedMessage("{} retention lease sync failed", shardId), e)__                                }_                                listener.onFailure(e)__                            }))__        }_    };sync,the,specified,retention,leases,for,the,specified,shard,the,callback,is,invoked,when,the,sync,succeeds,or,fails,param,shard,id,the,shard,to,sync,param,retention,leases,the,retention,leases,to,sync,param,listener,the,callback,to,invoke,when,the,sync,completes,normally,or,abnormally;public,void,sync,final,shard,id,shard,id,final,retention,leases,retention,leases,final,action,listener,replication,response,listener,objects,require,non,null,shard,id,objects,require,non,null,retention,leases,objects,require,non,null,listener,final,thread,context,thread,context,thread,pool,get,thread,context,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,execute,new,retention,lease,sync,action,request,shard,id,retention,leases,action,listener,wrap,listener,on,response,e,if,exceptions,helper,unwrap,e,already,closed,exception,class,index,shard,closed,exception,class,null,get,logger,warn,new,parameterized,message,retention,lease,sync,failed,shard,id,e,listener,on,failure,e
RetentionLeaseSyncAction -> public void sync(             final ShardId shardId,             final RetentionLeases retentionLeases,             final ActionListener<ReplicationResponse> listener);1550526771;Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.__@param shardId         the shard to sync_@param retentionLeases the retention leases to sync_@param listener        the callback to invoke when the sync completes normally or abnormally;public void sync(_            final ShardId shardId,_            final RetentionLeases retentionLeases,_            final ActionListener<ReplicationResponse> listener) {_        Objects.requireNonNull(shardId)__        Objects.requireNonNull(retentionLeases)__        Objects.requireNonNull(listener)__        final ThreadContext threadContext = threadPool.getThreadContext()__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            _            threadContext.markAsSystemContext()__            execute(_                    new RetentionLeaseSyncAction.Request(shardId, retentionLeases),_                    ActionListener.wrap(_                            listener::onResponse,_                            e -> {_                                if (ExceptionsHelper.unwrap(e, AlreadyClosedException.class, IndexShardClosedException.class) == null) {_                                    getLogger().warn(new ParameterizedMessage("{} retention lease sync failed", shardId), e)__                                }_                                listener.onFailure(e)__                            }))__        }_    };sync,the,specified,retention,leases,for,the,specified,shard,the,callback,is,invoked,when,the,sync,succeeds,or,fails,param,shard,id,the,shard,to,sync,param,retention,leases,the,retention,leases,to,sync,param,listener,the,callback,to,invoke,when,the,sync,completes,normally,or,abnormally;public,void,sync,final,shard,id,shard,id,final,retention,leases,retention,leases,final,action,listener,replication,response,listener,objects,require,non,null,shard,id,objects,require,non,null,retention,leases,objects,require,non,null,listener,final,thread,context,thread,context,thread,pool,get,thread,context,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,execute,new,retention,lease,sync,action,request,shard,id,retention,leases,action,listener,wrap,listener,on,response,e,if,exceptions,helper,unwrap,e,already,closed,exception,class,index,shard,closed,exception,class,null,get,logger,warn,new,parameterized,message,retention,lease,sync,failed,shard,id,e,listener,on,failure,e
RetentionLeaseSyncAction -> public void sync(             final ShardId shardId,             final RetentionLeases retentionLeases,             final ActionListener<ReplicationResponse> listener);1550588016;Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.__@param shardId         the shard to sync_@param retentionLeases the retention leases to sync_@param listener        the callback to invoke when the sync completes normally or abnormally;public void sync(_            final ShardId shardId,_            final RetentionLeases retentionLeases,_            final ActionListener<ReplicationResponse> listener) {_        Objects.requireNonNull(shardId)__        Objects.requireNonNull(retentionLeases)__        Objects.requireNonNull(listener)__        final ThreadContext threadContext = threadPool.getThreadContext()__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            _            threadContext.markAsSystemContext()__            execute(_                    new RetentionLeaseSyncAction.Request(shardId, retentionLeases),_                    ActionListener.wrap(_                            listener::onResponse,_                            e -> {_                                if (ExceptionsHelper.unwrap(e, AlreadyClosedException.class, IndexShardClosedException.class) == null) {_                                    getLogger().warn(new ParameterizedMessage("{} retention lease sync failed", shardId), e)__                                }_                                listener.onFailure(e)__                            }))__        }_    };sync,the,specified,retention,leases,for,the,specified,shard,the,callback,is,invoked,when,the,sync,succeeds,or,fails,param,shard,id,the,shard,to,sync,param,retention,leases,the,retention,leases,to,sync,param,listener,the,callback,to,invoke,when,the,sync,completes,normally,or,abnormally;public,void,sync,final,shard,id,shard,id,final,retention,leases,retention,leases,final,action,listener,replication,response,listener,objects,require,non,null,shard,id,objects,require,non,null,retention,leases,objects,require,non,null,listener,final,thread,context,thread,context,thread,pool,get,thread,context,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,execute,new,retention,lease,sync,action,request,shard,id,retention,leases,action,listener,wrap,listener,on,response,e,if,exceptions,helper,unwrap,e,already,closed,exception,class,index,shard,closed,exception,class,null,get,logger,warn,new,parameterized,message,retention,lease,sync,failed,shard,id,e,listener,on,failure,e
RetentionLeaseSyncAction -> public void sync(             final ShardId shardId,             final RetentionLeases retentionLeases,             final ActionListener<ReplicationResponse> listener);1551082082;Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.__@param shardId         the shard to sync_@param retentionLeases the retention leases to sync_@param listener        the callback to invoke when the sync completes normally or abnormally;public void sync(_            final ShardId shardId,_            final RetentionLeases retentionLeases,_            final ActionListener<ReplicationResponse> listener) {_        Objects.requireNonNull(shardId)__        Objects.requireNonNull(retentionLeases)__        Objects.requireNonNull(listener)__        final ThreadContext threadContext = threadPool.getThreadContext()__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            _            threadContext.markAsSystemContext()__            execute(_                    new RetentionLeaseSyncAction.Request(shardId, retentionLeases),_                    ActionListener.wrap(_                            listener::onResponse,_                            e -> {_                                if (ExceptionsHelper.unwrap(e, AlreadyClosedException.class, IndexShardClosedException.class) == null) {_                                    getLogger().warn(new ParameterizedMessage("{} retention lease sync failed", shardId), e)__                                }_                                listener.onFailure(e)__                            }))__        }_    };sync,the,specified,retention,leases,for,the,specified,shard,the,callback,is,invoked,when,the,sync,succeeds,or,fails,param,shard,id,the,shard,to,sync,param,retention,leases,the,retention,leases,to,sync,param,listener,the,callback,to,invoke,when,the,sync,completes,normally,or,abnormally;public,void,sync,final,shard,id,shard,id,final,retention,leases,retention,leases,final,action,listener,replication,response,listener,objects,require,non,null,shard,id,objects,require,non,null,retention,leases,objects,require,non,null,listener,final,thread,context,thread,context,thread,pool,get,thread,context,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,execute,new,retention,lease,sync,action,request,shard,id,retention,leases,action,listener,wrap,listener,on,response,e,if,exceptions,helper,unwrap,e,already,closed,exception,class,index,shard,closed,exception,class,null,get,logger,warn,new,parameterized,message,retention,lease,sync,failed,shard,id,e,listener,on,failure,e
