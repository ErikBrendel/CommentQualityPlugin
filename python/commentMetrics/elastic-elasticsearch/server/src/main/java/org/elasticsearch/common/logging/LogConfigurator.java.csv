# id;timestamp;commentText;codeText;commentWords;codeWords
LogConfigurator -> public static void loadLog4jPlugins();1533063033;Load logging plugins so we can have {@code node_name} in the pattern.;public static void loadLog4jPlugins() {_        PluginManager.addPackage(LogConfigurator.class.getPackage().getName())__    };load,logging,plugins,so,we,can,have,code,in,the,pattern;public,static,void,load,log4j,plugins,plugin,manager,add,package,log,configurator,class,get,package,get,name
LogConfigurator -> public static void loadLog4jPlugins();1536611444;Load logging plugins so we can have {@code node_name} in the pattern.;public static void loadLog4jPlugins() {_        PluginManager.addPackage(LogConfigurator.class.getPackage().getName())__    };load,logging,plugins,so,we,can,have,code,in,the,pattern;public,static,void,load,log4j,plugins,plugin,manager,add,package,log,configurator,class,get,package,get,name
LogConfigurator -> public static void loadLog4jPlugins();1537806831;Load logging plugins so we can have {@code node_name} in the pattern.;public static void loadLog4jPlugins() {_        PluginManager.addPackage(LogConfigurator.class.getPackage().getName())__    };load,logging,plugins,so,we,can,have,code,in,the,pattern;public,static,void,load,log4j,plugins,plugin,manager,add,package,log,configurator,class,get,package,get,name
LogConfigurator -> public static void loadLog4jPlugins();1538067637;Load logging plugins so we can have {@code node_name} in the pattern.;public static void loadLog4jPlugins() {_        PluginManager.addPackage(LogConfigurator.class.getPackage().getName())__    };load,logging,plugins,so,we,can,have,code,in,the,pattern;public,static,void,load,log4j,plugins,plugin,manager,add,package,log,configurator,class,get,package,get,name
LogConfigurator -> public static void configure(final Environment environment) throws IOException, UserException;1524684173;Configure logging reading from any log4j2.properties found in the config directory and its_subdirectories from the specified environment. Will also configure logging to point the logs_directory from the specified environment.__@param environment the environment for reading configs and the logs path_@throws IOException   if there is an issue readings any log4j2.properties in the config_directory_@throws UserException if there are no log4j2.properties in the specified configs path;public static void configure(final Environment environment) throws IOException, UserException {_        Objects.requireNonNull(environment)__        try {_            _            checkErrorListener()__        } finally {_            _            StatusLogger.getLogger().removeListener(ERROR_LISTENER)__        }_        configure(environment.settings(), environment.configFile(), environment.logsFile())__    };configure,logging,reading,from,any,log4j2,properties,found,in,the,config,directory,and,its,subdirectories,from,the,specified,environment,will,also,configure,logging,to,point,the,logs,directory,from,the,specified,environment,param,environment,the,environment,for,reading,configs,and,the,logs,path,throws,ioexception,if,there,is,an,issue,readings,any,log4j2,properties,in,the,config,directory,throws,user,exception,if,there,are,no,log4j2,properties,in,the,specified,configs,path;public,static,void,configure,final,environment,environment,throws,ioexception,user,exception,objects,require,non,null,environment,try,check,error,listener,finally,status,logger,get,logger,remove,listener,configure,environment,settings,environment,config,file,environment,logs,file
LogConfigurator -> public static void configure(final Environment environment) throws IOException, UserException;1533063033;Configure logging reading from any log4j2.properties found in the config directory and its_subdirectories from the specified environment. Will also configure logging to point the logs_directory from the specified environment.__@param environment the environment for reading configs and the logs path_@throws IOException   if there is an issue readings any log4j2.properties in the config_directory_@throws UserException if there are no log4j2.properties in the specified configs path;public static void configure(final Environment environment) throws IOException, UserException {_        Objects.requireNonNull(environment)__        try {_            _            checkErrorListener()__        } finally {_            _            StatusLogger.getLogger().removeListener(ERROR_LISTENER)__        }_        configure(environment.settings(), environment.configFile(), environment.logsFile())__    };configure,logging,reading,from,any,log4j2,properties,found,in,the,config,directory,and,its,subdirectories,from,the,specified,environment,will,also,configure,logging,to,point,the,logs,directory,from,the,specified,environment,param,environment,the,environment,for,reading,configs,and,the,logs,path,throws,ioexception,if,there,is,an,issue,readings,any,log4j2,properties,in,the,config,directory,throws,user,exception,if,there,are,no,log4j2,properties,in,the,specified,configs,path;public,static,void,configure,final,environment,environment,throws,ioexception,user,exception,objects,require,non,null,environment,try,check,error,listener,finally,status,logger,get,logger,remove,listener,configure,environment,settings,environment,config,file,environment,logs,file
LogConfigurator -> public static void configure(final Environment environment) throws IOException, UserException;1536611444;Configure logging reading from any log4j2.properties found in the config directory and its_subdirectories from the specified environment. Will also configure logging to point the logs_directory from the specified environment.__@param environment the environment for reading configs and the logs path_@throws IOException   if there is an issue readings any log4j2.properties in the config_directory_@throws UserException if there are no log4j2.properties in the specified configs path;public static void configure(final Environment environment) throws IOException, UserException {_        Objects.requireNonNull(environment)__        try {_            _            checkErrorListener()__        } finally {_            _            StatusLogger.getLogger().removeListener(ERROR_LISTENER)__        }_        configure(environment.settings(), environment.configFile(), environment.logsFile())__    };configure,logging,reading,from,any,log4j2,properties,found,in,the,config,directory,and,its,subdirectories,from,the,specified,environment,will,also,configure,logging,to,point,the,logs,directory,from,the,specified,environment,param,environment,the,environment,for,reading,configs,and,the,logs,path,throws,ioexception,if,there,is,an,issue,readings,any,log4j2,properties,in,the,config,directory,throws,user,exception,if,there,are,no,log4j2,properties,in,the,specified,configs,path;public,static,void,configure,final,environment,environment,throws,ioexception,user,exception,objects,require,non,null,environment,try,check,error,listener,finally,status,logger,get,logger,remove,listener,configure,environment,settings,environment,config,file,environment,logs,file
LogConfigurator -> public static void configure(final Environment environment) throws IOException, UserException;1537806831;Configure logging reading from any log4j2.properties found in the config directory and its_subdirectories from the specified environment. Will also configure logging to point the logs_directory from the specified environment.__@param environment the environment for reading configs and the logs path_@throws IOException   if there is an issue readings any log4j2.properties in the config_directory_@throws UserException if there are no log4j2.properties in the specified configs path;public static void configure(final Environment environment) throws IOException, UserException {_        Objects.requireNonNull(environment)__        try {_            _            checkErrorListener()__        } finally {_            _            StatusLogger.getLogger().removeListener(ERROR_LISTENER)__        }_        configure(environment.settings(), environment.configFile(), environment.logsFile())__    };configure,logging,reading,from,any,log4j2,properties,found,in,the,config,directory,and,its,subdirectories,from,the,specified,environment,will,also,configure,logging,to,point,the,logs,directory,from,the,specified,environment,param,environment,the,environment,for,reading,configs,and,the,logs,path,throws,ioexception,if,there,is,an,issue,readings,any,log4j2,properties,in,the,config,directory,throws,user,exception,if,there,are,no,log4j2,properties,in,the,specified,configs,path;public,static,void,configure,final,environment,environment,throws,ioexception,user,exception,objects,require,non,null,environment,try,check,error,listener,finally,status,logger,get,logger,remove,listener,configure,environment,settings,environment,config,file,environment,logs,file
LogConfigurator -> public static void configure(final Environment environment) throws IOException, UserException;1538067637;Configure logging reading from any log4j2.properties found in the config directory and its_subdirectories from the specified environment. Will also configure logging to point the logs_directory from the specified environment.__@param environment the environment for reading configs and the logs path_@throws IOException   if there is an issue readings any log4j2.properties in the config_directory_@throws UserException if there are no log4j2.properties in the specified configs path;public static void configure(final Environment environment) throws IOException, UserException {_        Objects.requireNonNull(environment)__        try {_            _            checkErrorListener()__        } finally {_            _            StatusLogger.getLogger().removeListener(ERROR_LISTENER)__        }_        configure(environment.settings(), environment.configFile(), environment.logsFile())__    };configure,logging,reading,from,any,log4j2,properties,found,in,the,config,directory,and,its,subdirectories,from,the,specified,environment,will,also,configure,logging,to,point,the,logs,directory,from,the,specified,environment,param,environment,the,environment,for,reading,configs,and,the,logs,path,throws,ioexception,if,there,is,an,issue,readings,any,log4j2,properties,in,the,config,directory,throws,user,exception,if,there,are,no,log4j2,properties,in,the,specified,configs,path;public,static,void,configure,final,environment,environment,throws,ioexception,user,exception,objects,require,non,null,environment,try,check,error,listener,finally,status,logger,get,logger,remove,listener,configure,environment,settings,environment,config,file,environment,logs,file
LogConfigurator -> public static void setNodeName(String nodeName);1536611444;Sets the node name. This is called before logging is configured if the_node name is set in elasticsearch.yml. Otherwise it is called as soon_as the node id is available.;public static void setNodeName(String nodeName) {_        NodeNamePatternConverter.setNodeName(nodeName)__    };sets,the,node,name,this,is,called,before,logging,is,configured,if,the,node,name,is,set,in,elasticsearch,yml,otherwise,it,is,called,as,soon,as,the,node,id,is,available;public,static,void,set,node,name,string,node,name,node,name,pattern,converter,set,node,name,node,name
LogConfigurator -> public static void setNodeName(String nodeName);1537806831;Sets the node name. This is called before logging is configured if the_node name is set in elasticsearch.yml. Otherwise it is called as soon_as the node id is available.;public static void setNodeName(String nodeName) {_        NodeNamePatternConverter.setNodeName(nodeName)__    };sets,the,node,name,this,is,called,before,logging,is,configured,if,the,node,name,is,set,in,elasticsearch,yml,otherwise,it,is,called,as,soon,as,the,node,id,is,available;public,static,void,set,node,name,string,node,name,node,name,pattern,converter,set,node,name,node,name
LogConfigurator -> public static void setNodeName(String nodeName);1538067637;Sets the node name. This is called before logging is configured if the_node name is set in elasticsearch.yml. Otherwise it is called as soon_as the node id is available.;public static void setNodeName(String nodeName) {_        NodeNamePatternConverter.setNodeName(nodeName)__    };sets,the,node,name,this,is,called,before,logging,is,configured,if,the,node,name,is,set,in,elasticsearch,yml,otherwise,it,is,called,as,soon,as,the,node,id,is,available;public,static,void,set,node,name,string,node,name,node,name,pattern,converter,set,node,name,node,name
LogConfigurator -> public static void registerErrorListener();1524684173;Registers a listener for status logger errors. This listener should be registered as early as possible to ensure that no errors are_logged by the status logger before logging is configured.;public static void registerErrorListener() {_        error.set(false)__        StatusLogger.getLogger().registerListener(ERROR_LISTENER)__    };registers,a,listener,for,status,logger,errors,this,listener,should,be,registered,as,early,as,possible,to,ensure,that,no,errors,are,logged,by,the,status,logger,before,logging,is,configured;public,static,void,register,error,listener,error,set,false,status,logger,get,logger,register,listener
LogConfigurator -> public static void registerErrorListener();1533063033;Registers a listener for status logger errors. This listener should be registered as early as possible to ensure that no errors are_logged by the status logger before logging is configured.;public static void registerErrorListener() {_        error.set(false)__        StatusLogger.getLogger().registerListener(ERROR_LISTENER)__    };registers,a,listener,for,status,logger,errors,this,listener,should,be,registered,as,early,as,possible,to,ensure,that,no,errors,are,logged,by,the,status,logger,before,logging,is,configured;public,static,void,register,error,listener,error,set,false,status,logger,get,logger,register,listener
LogConfigurator -> public static void registerErrorListener();1536611444;Registers a listener for status logger errors. This listener should be registered as early as possible to ensure that no errors are_logged by the status logger before logging is configured.;public static void registerErrorListener() {_        error.set(false)__        StatusLogger.getLogger().registerListener(ERROR_LISTENER)__    };registers,a,listener,for,status,logger,errors,this,listener,should,be,registered,as,early,as,possible,to,ensure,that,no,errors,are,logged,by,the,status,logger,before,logging,is,configured;public,static,void,register,error,listener,error,set,false,status,logger,get,logger,register,listener
LogConfigurator -> public static void registerErrorListener();1537806831;Registers a listener for status logger errors. This listener should be registered as early as possible to ensure that no errors are_logged by the status logger before logging is configured.;public static void registerErrorListener() {_        error.set(false)__        StatusLogger.getLogger().registerListener(ERROR_LISTENER)__    };registers,a,listener,for,status,logger,errors,this,listener,should,be,registered,as,early,as,possible,to,ensure,that,no,errors,are,logged,by,the,status,logger,before,logging,is,configured;public,static,void,register,error,listener,error,set,false,status,logger,get,logger,register,listener
LogConfigurator -> public static void registerErrorListener();1538067637;Registers a listener for status logger errors. This listener should be registered as early as possible to ensure that no errors are_logged by the status logger before logging is configured.;public static void registerErrorListener() {_        error.set(false)__        StatusLogger.getLogger().registerListener(ERROR_LISTENER)__    };registers,a,listener,for,status,logger,errors,this,listener,should,be,registered,as,early,as,possible,to,ensure,that,no,errors,are,logged,by,the,status,logger,before,logging,is,configured;public,static,void,register,error,listener,error,set,false,status,logger,get,logger,register,listener
LogConfigurator -> public static void configureWithoutConfig(final Settings settings);1524684173;Configure logging without reading a log4j2.properties file, effectively configuring the_status logger and all loggers to the console.__@param settings for configuring logger.level and individual loggers;public static void configureWithoutConfig(final Settings settings) {_        Objects.requireNonNull(settings)__        _        configureStatusLogger()__        configureLoggerLevels(settings)__    };configure,logging,without,reading,a,log4j2,properties,file,effectively,configuring,the,status,logger,and,all,loggers,to,the,console,param,settings,for,configuring,logger,level,and,individual,loggers;public,static,void,configure,without,config,final,settings,settings,objects,require,non,null,settings,configure,status,logger,configure,logger,levels,settings
LogConfigurator -> public static void configureWithoutConfig(final Settings settings);1533063033;Configure logging without reading a log4j2.properties file, effectively configuring the_status logger and all loggers to the console.__@param settings for configuring logger.level and individual loggers;public static void configureWithoutConfig(final Settings settings) {_        Objects.requireNonNull(settings)__        _        configureStatusLogger()__        configureLoggerLevels(settings)__    };configure,logging,without,reading,a,log4j2,properties,file,effectively,configuring,the,status,logger,and,all,loggers,to,the,console,param,settings,for,configuring,logger,level,and,individual,loggers;public,static,void,configure,without,config,final,settings,settings,objects,require,non,null,settings,configure,status,logger,configure,logger,levels,settings
LogConfigurator -> public static void configureWithoutConfig(final Settings settings);1536611444;Configure logging without reading a log4j2.properties file, effectively configuring the_status logger and all loggers to the console.__@param settings for configuring logger.level and individual loggers;public static void configureWithoutConfig(final Settings settings) {_        Objects.requireNonNull(settings)__        _        configureStatusLogger()__        configureLoggerLevels(settings)__    };configure,logging,without,reading,a,log4j2,properties,file,effectively,configuring,the,status,logger,and,all,loggers,to,the,console,param,settings,for,configuring,logger,level,and,individual,loggers;public,static,void,configure,without,config,final,settings,settings,objects,require,non,null,settings,configure,status,logger,configure,logger,levels,settings
LogConfigurator -> public static void configureWithoutConfig(final Settings settings);1537806831;Configure logging without reading a log4j2.properties file, effectively configuring the_status logger and all loggers to the console.__@param settings for configuring logger.level and individual loggers;public static void configureWithoutConfig(final Settings settings) {_        Objects.requireNonNull(settings)__        _        configureStatusLogger()__        configureLoggerLevels(settings)__    };configure,logging,without,reading,a,log4j2,properties,file,effectively,configuring,the,status,logger,and,all,loggers,to,the,console,param,settings,for,configuring,logger,level,and,individual,loggers;public,static,void,configure,without,config,final,settings,settings,objects,require,non,null,settings,configure,status,logger,configure,logger,levels,settings
LogConfigurator -> public static void configureWithoutConfig(final Settings settings);1538067637;Configure logging without reading a log4j2.properties file, effectively configuring the_status logger and all loggers to the console.__@param settings for configuring logger.level and individual loggers;public static void configureWithoutConfig(final Settings settings) {_        Objects.requireNonNull(settings)__        _        configureStatusLogger()__        configureLoggerLevels(settings)__    };configure,logging,without,reading,a,log4j2,properties,file,effectively,configuring,the,status,logger,and,all,loggers,to,the,console,param,settings,for,configuring,logger,level,and,individual,loggers;public,static,void,configure,without,config,final,settings,settings,objects,require,non,null,settings,configure,status,logger,configure,logger,levels,settings
LogConfigurator -> @SuppressForbidden(reason = "sets system property for logging configuration")     private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings);1524684173;Set system properties that can be used in configuration files to specify paths and file patterns for log files. We expose three_properties here:_<ul>_<li>_{@code es.logs.base_path} the base path containing the log files_</li>_<li>_{@code es.logs.cluster_name} the cluster name, used as the prefix of log filenames in the default configuration_</li>_<li>_{@code es.logs.node_name} the node name, can be used as part of log filenames (only exposed if {@link Node#NODE_NAME_SETTING} is_explicitly set)_</li>_</ul>__@param logsPath the path to the log files_@param settings the settings to extract the cluster and node names;@SuppressForbidden(reason = "sets system property for logging configuration")_    private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings) {_        System.setProperty("es.logs.base_path", logsPath.toString())__        System.setProperty("es.logs.cluster_name", ClusterName.CLUSTER_NAME_SETTING.get(settings).value())__        if (Node.NODE_NAME_SETTING.exists(settings)) {_            System.setProperty("es.logs.node_name", Node.NODE_NAME_SETTING.get(settings))__        }_    };set,system,properties,that,can,be,used,in,configuration,files,to,specify,paths,and,file,patterns,for,log,files,we,expose,three,properties,here,ul,li,code,es,logs,the,base,path,containing,the,log,files,li,li,code,es,logs,the,cluster,name,used,as,the,prefix,of,log,filenames,in,the,default,configuration,li,li,code,es,logs,the,node,name,can,be,used,as,part,of,log,filenames,only,exposed,if,link,node,is,explicitly,set,li,ul,param,logs,path,the,path,to,the,log,files,param,settings,the,settings,to,extract,the,cluster,and,node,names;suppress,forbidden,reason,sets,system,property,for,logging,configuration,private,static,void,set,log,configuration,system,property,final,path,logs,path,final,settings,settings,system,set,property,es,logs,logs,path,to,string,system,set,property,es,logs,cluster,name,get,settings,value,if,node,exists,settings,system,set,property,es,logs,node,get,settings
LogConfigurator -> @SuppressForbidden(reason = "sets system property for logging configuration")     private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings);1533063033;Set system properties that can be used in configuration files to specify paths and file patterns for log files. We expose three_properties here:_<ul>_<li>_{@code es.logs.base_path} the base path containing the log files_</li>_<li>_{@code es.logs.cluster_name} the cluster name, used as the prefix of log filenames in the default configuration_</li>_<li>_{@code es.logs.node_name} the node name, can be used as part of log filenames (only exposed if {@link Node#NODE_NAME_SETTING} is_explicitly set)_</li>_</ul>__@param logsPath the path to the log files_@param settings the settings to extract the cluster and node names;@SuppressForbidden(reason = "sets system property for logging configuration")_    private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings) {_        System.setProperty("es.logs.base_path", logsPath.toString())__        System.setProperty("es.logs.cluster_name", ClusterName.CLUSTER_NAME_SETTING.get(settings).value())__        if (Node.NODE_NAME_SETTING.exists(settings)) {_            System.setProperty("es.logs.node_name", Node.NODE_NAME_SETTING.get(settings))__        }_    };set,system,properties,that,can,be,used,in,configuration,files,to,specify,paths,and,file,patterns,for,log,files,we,expose,three,properties,here,ul,li,code,es,logs,the,base,path,containing,the,log,files,li,li,code,es,logs,the,cluster,name,used,as,the,prefix,of,log,filenames,in,the,default,configuration,li,li,code,es,logs,the,node,name,can,be,used,as,part,of,log,filenames,only,exposed,if,link,node,is,explicitly,set,li,ul,param,logs,path,the,path,to,the,log,files,param,settings,the,settings,to,extract,the,cluster,and,node,names;suppress,forbidden,reason,sets,system,property,for,logging,configuration,private,static,void,set,log,configuration,system,property,final,path,logs,path,final,settings,settings,system,set,property,es,logs,logs,path,to,string,system,set,property,es,logs,cluster,name,get,settings,value,if,node,exists,settings,system,set,property,es,logs,node,get,settings
LogConfigurator -> @SuppressForbidden(reason = "sets system property for logging configuration")     private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings);1536611444;Set system properties that can be used in configuration files to specify paths and file patterns for log files. We expose three_properties here:_<ul>_<li>_{@code es.logs.base_path} the base path containing the log files_</li>_<li>_{@code es.logs.cluster_name} the cluster name, used as the prefix of log filenames in the default configuration_</li>_<li>_{@code es.logs.node_name} the node name, can be used as part of log filenames (only exposed if {@link Node#NODE_NAME_SETTING} is_explicitly set)_</li>_</ul>__@param logsPath the path to the log files_@param settings the settings to extract the cluster and node names;@SuppressForbidden(reason = "sets system property for logging configuration")_    private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings) {_        System.setProperty("es.logs.base_path", logsPath.toString())__        System.setProperty("es.logs.cluster_name", ClusterName.CLUSTER_NAME_SETTING.get(settings).value())__        if (Node.NODE_NAME_SETTING.exists(settings)) {_            System.setProperty("es.logs.node_name", Node.NODE_NAME_SETTING.get(settings))__        }_    };set,system,properties,that,can,be,used,in,configuration,files,to,specify,paths,and,file,patterns,for,log,files,we,expose,three,properties,here,ul,li,code,es,logs,the,base,path,containing,the,log,files,li,li,code,es,logs,the,cluster,name,used,as,the,prefix,of,log,filenames,in,the,default,configuration,li,li,code,es,logs,the,node,name,can,be,used,as,part,of,log,filenames,only,exposed,if,link,node,is,explicitly,set,li,ul,param,logs,path,the,path,to,the,log,files,param,settings,the,settings,to,extract,the,cluster,and,node,names;suppress,forbidden,reason,sets,system,property,for,logging,configuration,private,static,void,set,log,configuration,system,property,final,path,logs,path,final,settings,settings,system,set,property,es,logs,logs,path,to,string,system,set,property,es,logs,cluster,name,get,settings,value,if,node,exists,settings,system,set,property,es,logs,node,get,settings
LogConfigurator -> @SuppressForbidden(reason = "sets system property for logging configuration")     private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings);1537806831;Set system properties that can be used in configuration files to specify paths and file patterns for log files. We expose three_properties here:_<ul>_<li>_{@code es.logs.base_path} the base path containing the log files_</li>_<li>_{@code es.logs.cluster_name} the cluster name, used as the prefix of log filenames in the default configuration_</li>_<li>_{@code es.logs.node_name} the node name, can be used as part of log filenames_</li>_</ul>__@param logsPath the path to the log files_@param settings the settings to extract the cluster and node names;@SuppressForbidden(reason = "sets system property for logging configuration")_    private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings) {_        System.setProperty("es.logs.base_path", logsPath.toString())__        System.setProperty("es.logs.cluster_name", ClusterName.CLUSTER_NAME_SETTING.get(settings).value())__        System.setProperty("es.logs.node_name", Node.NODE_NAME_SETTING.get(settings))__    };set,system,properties,that,can,be,used,in,configuration,files,to,specify,paths,and,file,patterns,for,log,files,we,expose,three,properties,here,ul,li,code,es,logs,the,base,path,containing,the,log,files,li,li,code,es,logs,the,cluster,name,used,as,the,prefix,of,log,filenames,in,the,default,configuration,li,li,code,es,logs,the,node,name,can,be,used,as,part,of,log,filenames,li,ul,param,logs,path,the,path,to,the,log,files,param,settings,the,settings,to,extract,the,cluster,and,node,names;suppress,forbidden,reason,sets,system,property,for,logging,configuration,private,static,void,set,log,configuration,system,property,final,path,logs,path,final,settings,settings,system,set,property,es,logs,logs,path,to,string,system,set,property,es,logs,cluster,name,get,settings,value,system,set,property,es,logs,node,get,settings
LogConfigurator -> @SuppressForbidden(reason = "sets system property for logging configuration")     private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings);1538067637;Set system properties that can be used in configuration files to specify paths and file patterns for log files. We expose three_properties here:_<ul>_<li>_{@code es.logs.base_path} the base path containing the log files_</li>_<li>_{@code es.logs.cluster_name} the cluster name, used as the prefix of log filenames in the default configuration_</li>_<li>_{@code es.logs.node_name} the node name, can be used as part of log filenames_</li>_</ul>__@param logsPath the path to the log files_@param settings the settings to extract the cluster and node names;@SuppressForbidden(reason = "sets system property for logging configuration")_    private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings) {_        System.setProperty("es.logs.base_path", logsPath.toString())__        System.setProperty("es.logs.cluster_name", ClusterName.CLUSTER_NAME_SETTING.get(settings).value())__        System.setProperty("es.logs.node_name", Node.NODE_NAME_SETTING.get(settings))__    };set,system,properties,that,can,be,used,in,configuration,files,to,specify,paths,and,file,patterns,for,log,files,we,expose,three,properties,here,ul,li,code,es,logs,the,base,path,containing,the,log,files,li,li,code,es,logs,the,cluster,name,used,as,the,prefix,of,log,filenames,in,the,default,configuration,li,li,code,es,logs,the,node,name,can,be,used,as,part,of,log,filenames,li,ul,param,logs,path,the,path,to,the,log,files,param,settings,the,settings,to,extract,the,cluster,and,node,names;suppress,forbidden,reason,sets,system,property,for,logging,configuration,private,static,void,set,log,configuration,system,property,final,path,logs,path,final,settings,settings,system,set,property,es,logs,logs,path,to,string,system,set,property,es,logs,cluster,name,get,settings,value,system,set,property,es,logs,node,get,settings
LogConfigurator -> private static void configureLoggerLevels(final Settings settings);1524684173;Configures the logging levels for loggers configured in the specified settings.__@param settings the settings from which logger levels will be extracted;private static void configureLoggerLevels(final Settings settings) {_        if (Loggers.LOG_DEFAULT_LEVEL_SETTING.exists(settings)) {_            final Level level = Loggers.LOG_DEFAULT_LEVEL_SETTING.get(settings)__            Loggers.setLevel(ESLoggerFactory.getRootLogger(), level)__        }_        Loggers.LOG_LEVEL_SETTING.getAllConcreteSettings(settings)_            _            .filter(s -> s.getKey().equals(Loggers.LOG_DEFAULT_LEVEL_SETTING.getKey()) == false).forEach(s -> {_            final Level level = s.get(settings)__            Loggers.setLevel(ESLoggerFactory.getLogger(s.getKey().substring("logger.".length())), level)__        })__    };configures,the,logging,levels,for,loggers,configured,in,the,specified,settings,param,settings,the,settings,from,which,logger,levels,will,be,extracted;private,static,void,configure,logger,levels,final,settings,settings,if,loggers,exists,settings,final,level,level,loggers,get,settings,loggers,set,level,eslogger,factory,get,root,logger,level,loggers,get,all,concrete,settings,settings,filter,s,s,get,key,equals,loggers,get,key,false,for,each,s,final,level,level,s,get,settings,loggers,set,level,eslogger,factory,get,logger,s,get,key,substring,logger,length,level
LogConfigurator -> private static void configureLoggerLevels(final Settings settings);1533063033;Configures the logging levels for loggers configured in the specified settings.__@param settings the settings from which logger levels will be extracted;private static void configureLoggerLevels(final Settings settings) {_        if (Loggers.LOG_DEFAULT_LEVEL_SETTING.exists(settings)) {_            final Level level = Loggers.LOG_DEFAULT_LEVEL_SETTING.get(settings)__            Loggers.setLevel(ESLoggerFactory.getRootLogger(), level)__        }_        Loggers.LOG_LEVEL_SETTING.getAllConcreteSettings(settings)_            _            .filter(s -> s.getKey().equals(Loggers.LOG_DEFAULT_LEVEL_SETTING.getKey()) == false).forEach(s -> {_            final Level level = s.get(settings)__            Loggers.setLevel(ESLoggerFactory.getLogger(s.getKey().substring("logger.".length())), level)__        })__    };configures,the,logging,levels,for,loggers,configured,in,the,specified,settings,param,settings,the,settings,from,which,logger,levels,will,be,extracted;private,static,void,configure,logger,levels,final,settings,settings,if,loggers,exists,settings,final,level,level,loggers,get,settings,loggers,set,level,eslogger,factory,get,root,logger,level,loggers,get,all,concrete,settings,settings,filter,s,s,get,key,equals,loggers,get,key,false,for,each,s,final,level,level,s,get,settings,loggers,set,level,eslogger,factory,get,logger,s,get,key,substring,logger,length,level
LogConfigurator -> private static void configureLoggerLevels(final Settings settings);1536611444;Configures the logging levels for loggers configured in the specified settings.__@param settings the settings from which logger levels will be extracted;private static void configureLoggerLevels(final Settings settings) {_        if (Loggers.LOG_DEFAULT_LEVEL_SETTING.exists(settings)) {_            final Level level = Loggers.LOG_DEFAULT_LEVEL_SETTING.get(settings)__            Loggers.setLevel(ESLoggerFactory.getRootLogger(), level)__        }_        Loggers.LOG_LEVEL_SETTING.getAllConcreteSettings(settings)_            _            .filter(s -> s.getKey().equals(Loggers.LOG_DEFAULT_LEVEL_SETTING.getKey()) == false).forEach(s -> {_            final Level level = s.get(settings)__            Loggers.setLevel(ESLoggerFactory.getLogger(s.getKey().substring("logger.".length())), level)__        })__    };configures,the,logging,levels,for,loggers,configured,in,the,specified,settings,param,settings,the,settings,from,which,logger,levels,will,be,extracted;private,static,void,configure,logger,levels,final,settings,settings,if,loggers,exists,settings,final,level,level,loggers,get,settings,loggers,set,level,eslogger,factory,get,root,logger,level,loggers,get,all,concrete,settings,settings,filter,s,s,get,key,equals,loggers,get,key,false,for,each,s,final,level,level,s,get,settings,loggers,set,level,eslogger,factory,get,logger,s,get,key,substring,logger,length,level
LogConfigurator -> private static void configureLoggerLevels(final Settings settings);1537806831;Configures the logging levels for loggers configured in the specified settings.__@param settings the settings from which logger levels will be extracted;private static void configureLoggerLevels(final Settings settings) {_        if (Loggers.LOG_DEFAULT_LEVEL_SETTING.exists(settings)) {_            final Level level = Loggers.LOG_DEFAULT_LEVEL_SETTING.get(settings)__            Loggers.setLevel(ESLoggerFactory.getRootLogger(), level)__        }_        Loggers.LOG_LEVEL_SETTING.getAllConcreteSettings(settings)_            _            .filter(s -> s.getKey().equals(Loggers.LOG_DEFAULT_LEVEL_SETTING.getKey()) == false).forEach(s -> {_            final Level level = s.get(settings)__            Loggers.setLevel(ESLoggerFactory.getLogger(s.getKey().substring("logger.".length())), level)__        })__    };configures,the,logging,levels,for,loggers,configured,in,the,specified,settings,param,settings,the,settings,from,which,logger,levels,will,be,extracted;private,static,void,configure,logger,levels,final,settings,settings,if,loggers,exists,settings,final,level,level,loggers,get,settings,loggers,set,level,eslogger,factory,get,root,logger,level,loggers,get,all,concrete,settings,settings,filter,s,s,get,key,equals,loggers,get,key,false,for,each,s,final,level,level,s,get,settings,loggers,set,level,eslogger,factory,get,logger,s,get,key,substring,logger,length,level
LogConfigurator -> private static void configureLoggerLevels(final Settings settings);1538067637;Configures the logging levels for loggers configured in the specified settings.__@param settings the settings from which logger levels will be extracted;private static void configureLoggerLevels(final Settings settings) {_        if (Loggers.LOG_DEFAULT_LEVEL_SETTING.exists(settings)) {_            final Level level = Loggers.LOG_DEFAULT_LEVEL_SETTING.get(settings)__            Loggers.setLevel(LogManager.getRootLogger(), level)__        }_        Loggers.LOG_LEVEL_SETTING.getAllConcreteSettings(settings)_            _            .filter(s -> s.getKey().equals(Loggers.LOG_DEFAULT_LEVEL_SETTING.getKey()) == false).forEach(s -> {_            final Level level = s.get(settings)__            Loggers.setLevel(LogManager.getLogger(s.getKey().substring("logger.".length())), level)__        })__    };configures,the,logging,levels,for,loggers,configured,in,the,specified,settings,param,settings,the,settings,from,which,logger,levels,will,be,extracted;private,static,void,configure,logger,levels,final,settings,settings,if,loggers,exists,settings,final,level,level,loggers,get,settings,loggers,set,level,log,manager,get,root,logger,level,loggers,get,all,concrete,settings,settings,filter,s,s,get,key,equals,loggers,get,key,false,for,each,s,final,level,level,s,get,settings,loggers,set,level,log,manager,get,logger,s,get,key,substring,logger,length,level
