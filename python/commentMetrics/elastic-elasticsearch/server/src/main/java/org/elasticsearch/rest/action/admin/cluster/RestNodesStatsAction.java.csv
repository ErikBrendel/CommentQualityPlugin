commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "nodes_stats_action". }
false;public;2;98;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     String[] nodesIds = Strings.splitStringByCommaToArray(request.param("nodeId")).     Set<String> metrics = Strings.tokenizeByCommaToSet(request.param("metric", "_all")).     NodesStatsRequest nodesStatsRequest = new NodesStatsRequest(nodesIds).     nodesStatsRequest.timeout(request.param("timeout")).     if (metrics.size() == 1 && metrics.contains("_all")) {         if (request.hasParam("index_metric")) {             throw new IllegalArgumentException(String.format(Locale.ROOT, "request [%s] contains index metrics [%s] but all stats requested", request.path(), request.param("index_metric"))).         }         nodesStatsRequest.all().         nodesStatsRequest.indices(CommonStatsFlags.ALL).     } else if (metrics.contains("_all")) {         throw new IllegalArgumentException(String.format(Locale.ROOT, "request [%s] contains _all and individual metrics [%s]", request.path(), request.param("metric"))).     } else {         nodesStatsRequest.clear().         // use a sorted set so the unrecognized parameters appear in a reliable sorted order         final Set<String> invalidMetrics = new TreeSet<>().         for (final String metric : metrics) {             final Consumer<NodesStatsRequest> handler = METRICS.get(metric).             if (handler != null) {                 handler.accept(nodesStatsRequest).             } else {                 invalidMetrics.add(metric).             }         }         if (!invalidMetrics.isEmpty()) {             throw new IllegalArgumentException(unrecognized(request, invalidMetrics, METRICS.keySet(), "metric")).         }         // check for index specific metrics         if (metrics.contains("indices")) {             Set<String> indexMetrics = Strings.tokenizeByCommaToSet(request.param("index_metric", "_all")).             if (indexMetrics.size() == 1 && indexMetrics.contains("_all")) {                 nodesStatsRequest.indices(CommonStatsFlags.ALL).             } else {                 CommonStatsFlags flags = new CommonStatsFlags().                 flags.clear().                 // use a sorted set so the unrecognized parameters appear in a reliable sorted order                 final Set<String> invalidIndexMetrics = new TreeSet<>().                 for (final String indexMetric : indexMetrics) {                     final Consumer<CommonStatsFlags> handler = FLAGS.get(indexMetric).                     if (handler != null) {                         handler.accept(flags).                     } else {                         invalidIndexMetrics.add(indexMetric).                     }                 }                 if (!invalidIndexMetrics.isEmpty()) {                     throw new IllegalArgumentException(unrecognized(request, invalidIndexMetrics, FLAGS.keySet(), "index metric")).                 }                 nodesStatsRequest.indices(flags).             }         } else if (request.hasParam("index_metric")) {             throw new IllegalArgumentException(String.format(Locale.ROOT, "request [%s] contains index metrics [%s] but indices stats not requested", request.path(), request.param("index_metric"))).         }     }     if (nodesStatsRequest.indices().isSet(Flag.FieldData) && (request.hasParam("fields") || request.hasParam("fielddata_fields"))) {         nodesStatsRequest.indices().fieldDataFields(request.paramAsStringArray("fielddata_fields", request.paramAsStringArray("fields", null))).     }     if (nodesStatsRequest.indices().isSet(Flag.Completion) && (request.hasParam("fields") || request.hasParam("completion_fields"))) {         nodesStatsRequest.indices().completionDataFields(request.paramAsStringArray("completion_fields", request.paramAsStringArray("fields", null))).     }     if (nodesStatsRequest.indices().isSet(Flag.Search) && (request.hasParam("groups"))) {         nodesStatsRequest.indices().groups(request.paramAsStringArray("groups", null)).     }     if (nodesStatsRequest.indices().isSet(Flag.Indexing) && (request.hasParam("types"))) {         nodesStatsRequest.indices().types(request.paramAsStringArray("types", null)).     }     if (nodesStatsRequest.indices().isSet(Flag.Segments)) {         nodesStatsRequest.indices().includeSegmentFileSizes(request.paramAsBoolean("include_segment_file_sizes", false)).     }     return channel -> client.admin().cluster().nodesStats(nodesStatsRequest, new NodesResponseRestListener<>(channel)). }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return RESPONSE_PARAMS. }
false;public;0;4;;@Override public boolean canTripCircuitBreaker() {     return false. }
