commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns snapshot  */ ;/**  * Returns snapshot  */ public Snapshot getSnapshot() {     return snapshot. }
true;public;0;3;/**  * Returns snapshot state  */ ;/**  * Returns snapshot state  */ public State getState() {     return state. }
true;public;0;3;/**  * Returns true if global state is included in the snapshot, false otherwise.  * Can be null if this information is unknown.  */ ;/**  * Returns true if global state is included in the snapshot, false otherwise.  * Can be null if this information is unknown.  */ public Boolean includeGlobalState() {     return includeGlobalState. }
true;public;0;3;/**  * Returns list of snapshot shards  */ ;/**  * Returns list of snapshot shards  */ public List<SnapshotIndexShardStatus> getShards() {     return shards. }
false;public;0;3;;public SnapshotShardsStats getShardsStats() {     return shardsStats. }
true;public;0;25;/**  * Returns list of snapshot indices  */ ;/**  * Returns list of snapshot indices  */ public Map<String, SnapshotIndexStatus> getIndices() {     if (this.indicesStatus != null) {         return this.indicesStatus.     }     Map<String, SnapshotIndexStatus> indicesStatus = new HashMap<>().     Set<String> indices = new HashSet<>().     for (SnapshotIndexShardStatus shard : shards) {         indices.add(shard.getIndex()).     }     for (String index : indices) {         List<SnapshotIndexShardStatus> shards = new ArrayList<>().         for (SnapshotIndexShardStatus shard : this.shards) {             if (shard.getIndex().equals(index)) {                 shards.add(shard).             }         }         indicesStatus.put(index, new SnapshotIndexStatus(index, shards)).     }     this.indicesStatus = unmodifiableMap(indicesStatus).     return this.indicesStatus. }
false;public;1;15;;@Override public void readFrom(StreamInput in) throws IOException {     snapshot = new Snapshot(in).     state = State.fromValue(in.readByte()).     int size = in.readVInt().     List<SnapshotIndexShardStatus> builder = new ArrayList<>().     for (int i = 0. i < size. i++) {         builder.add(SnapshotIndexShardStatus.readShardSnapshotStatus(in)).     }     shards = Collections.unmodifiableList(builder).     if (in.getVersion().onOrAfter(Version.V_6_2_0)) {         includeGlobalState = in.readOptionalBoolean().     }     updateShardStats(). }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     snapshot.writeTo(out).     out.writeByte(state.value()).     out.writeVInt(shards.size()).     for (SnapshotIndexShardStatus shard : shards) {         shard.writeTo(out).     }     if (out.getVersion().onOrAfter(Version.V_6_2_0)) {         out.writeOptionalBoolean(includeGlobalState).     } }
true;public,static;1;5;/**  * Reads snapshot status from stream input  *  * @param in stream input  * @return deserialized snapshot status  */ ;/**  * Reads snapshot status from stream input  *  * @param in stream input  * @return deserialized snapshot status  */ public static SnapshotStatus readSnapshotStatus(StreamInput in) throws IOException {     SnapshotStatus snapshotInfo = new SnapshotStatus().     snapshotInfo.readFrom(in).     return snapshotInfo. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, false). }
true;public;0;3;/**  * Returns number of files in the snapshot  */ ;/**  * Returns number of files in the snapshot  */ public SnapshotStats getStats() {     return stats. }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(SNAPSHOT, snapshot.getSnapshotId().getName()).     builder.field(REPOSITORY, snapshot.getRepository()).     builder.field(UUID, snapshot.getSnapshotId().getUUID()).     builder.field(STATE, state.name()).     if (includeGlobalState != null) {         builder.field(INCLUDE_GLOBAL_STATE, includeGlobalState).     }     builder.field(SnapshotShardsStats.Fields.SHARDS_STATS, shardsStats, params).     builder.field(SnapshotStats.Fields.STATS, stats, params).     builder.startObject(INDICES).     for (SnapshotIndexStatus indexStatus : getIndices().values()) {         indexStatus.toXContent(builder, params).     }     builder.endObject().     builder.endObject().     return builder. }
false;public,static;1;3;;public static SnapshotStatus fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;private;0;7;;private void updateShardStats() {     stats = new SnapshotStats().     shardsStats = new SnapshotShardsStats(shards).     for (SnapshotIndexShardStatus shard : shards) {         stats.add(shard.getStats()).     } }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     SnapshotStatus that = (SnapshotStatus) o.     if (snapshot != null ? !snapshot.equals(that.snapshot) : that.snapshot != null)         return false.     if (state != that.state)         return false.     if (indicesStatus != null ? !indicesStatus.equals(that.indicesStatus) : that.indicesStatus != null)         return false.     if (shardsStats != null ? !shardsStats.equals(that.shardsStats) : that.shardsStats != null)         return false.     if (stats != null ? !stats.equals(that.stats) : that.stats != null)         return false.     return includeGlobalState != null ? includeGlobalState.equals(that.includeGlobalState) : that.includeGlobalState == null. }
false;public;0;10;;@Override public int hashCode() {     int result = snapshot != null ? snapshot.hashCode() : 0.     result = 31 * result + (state != null ? state.hashCode() : 0).     result = 31 * result + (indicesStatus != null ? indicesStatus.hashCode() : 0).     result = 31 * result + (shardsStats != null ? shardsStats.hashCode() : 0).     result = 31 * result + (stats != null ? stats.hashCode() : 0).     result = 31 * result + (includeGlobalState != null ? includeGlobalState.hashCode() : 0).     return result. }
