commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void setDocument(int docId) {     if (this.docId == docId) {         // if we are called with the same docId, don't invalidate source         return.     }     this.docId = docId.     clearCache(). }
false;public;1;4;;@Override public Object get(Object key) {     return loadFieldData(key.toString()). }
false;public;1;9;;@Override public boolean containsKey(Object key) {     try {         loadFieldData(key.toString()).         return true.     } catch (Exception e) {         return false.     } }
false;public;0;4;;@Override public int size() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public boolean isEmpty() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Set keySet() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Collection values() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Set entrySet() {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public Object put(Object key, Object value) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Object remove(Object key) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public void clear() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void putAll(Map m) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean containsValue(Object value) {     throw new UnsupportedOperationException(). }
false;private;1;31;;private FieldLookup loadFieldData(String name) {     FieldLookup data = cachedFieldData.get(name).     if (data == null) {         MappedFieldType fieldType = mapperService.fullName(name).         if (fieldType == null) {             throw new IllegalArgumentException("No field found for [" + name + "] in mapping with types " + Arrays.toString(types)).         }         data = new FieldLookup(fieldType).         cachedFieldData.put(name, data).     }     if (data.fields() == null) {         List<Object> values.         if (TypeFieldMapper.NAME.equals(data.fieldType().name())) {             values = new ArrayList<>(1).             final DocumentMapper mapper = mapperService.documentMapper().             if (mapper != null) {                 values.add(mapper.type()).             }         } else {             values = new ArrayList<Object>(2).             SingleFieldsVisitor visitor = new SingleFieldsVisitor(data.fieldType(), values).             try {                 reader.document(docId, visitor).             } catch (IOException e) {                 throw new ElasticsearchParseException("failed to load field [{}]", e, name).             }         }         data.fields(singletonMap(data.fieldType().name(), values)).     }     return data. }
false;private;0;5;;private void clearCache() {     for (Entry<String, FieldLookup> entry : cachedFieldData.entrySet()) {         entry.getValue().clear().     } }
