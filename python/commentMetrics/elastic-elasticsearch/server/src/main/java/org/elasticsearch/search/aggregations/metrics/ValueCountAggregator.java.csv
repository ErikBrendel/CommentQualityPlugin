commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public void collect(int doc, long bucket) throws IOException {     counts = bigArrays.grow(counts, bucket + 1).     if (values.advanceExact(doc)) {         counts.increment(bucket, values.docValueCount()).     } }
false;public;2;20;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {     if (valuesSource == null) {         return LeafBucketCollector.NO_OP_COLLECTOR.     }     final BigArrays bigArrays = context.bigArrays().     final SortedBinaryDocValues values = valuesSource.bytesValues(ctx).     return new LeafBucketCollectorBase(sub, values) {          @Override         public void collect(int doc, long bucket) throws IOException {             counts = bigArrays.grow(counts, bucket + 1).             if (values.advanceExact(doc)) {                 counts.increment(bucket, values.docValueCount()).             }         }     }. }
false;public;1;4;;@Override public double metric(long owningBucketOrd) {     return (valuesSource == null || owningBucketOrd >= counts.size()) ? 0 : counts.get(owningBucketOrd). }
false;public;1;7;;@Override public InternalAggregation buildAggregation(long bucket) {     if (valuesSource == null || bucket >= counts.size()) {         return buildEmptyAggregation().     }     return new InternalValueCount(name, counts.get(bucket), pipelineAggregators(), metaData()). }
false;public;0;4;;@Override public InternalAggregation buildEmptyAggregation() {     return new InternalValueCount(name, 0L, pipelineAggregators(), metaData()). }
false;public;0;4;;@Override public void doClose() {     Releasables.close(counts). }
