commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Counts getCounts() {     return this.counts. }
false;public;0;3;;public Set<Version> getVersions() {     return versions. }
false;public;0;3;;public OsStats getOs() {     return os. }
false;public;0;3;;public ProcessStats getProcess() {     return process. }
false;public;0;3;;public JvmStats getJvm() {     return jvm. }
false;public;0;3;;public FsInfo.Path getFs() {     return fs. }
false;public;0;3;;public Set<PluginInfo> getPlugins() {     return plugins. }
false;public;2;40;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.COUNT).     counts.toXContent(builder, params).     builder.endObject().     builder.startArray(Fields.VERSIONS).     for (Version v : versions) {         builder.value(v.toString()).     }     builder.endArray().     builder.startObject(Fields.OS).     os.toXContent(builder, params).     builder.endObject().     builder.startObject(Fields.PROCESS).     process.toXContent(builder, params).     builder.endObject().     builder.startObject(Fields.JVM).     jvm.toXContent(builder, params).     builder.endObject().     builder.field(Fields.FS).     fs.toXContent(builder, params).     builder.startArray(Fields.PLUGINS).     for (PluginInfo pluginInfo : plugins) {         pluginInfo.toXContent(builder, params).     }     builder.endArray().     builder.startObject(Fields.NETWORK_TYPES).     networkTypes.toXContent(builder, params).     builder.endObject().     discoveryTypes.toXContent(builder, params).     return builder. }
false;public;0;3;;public int getTotal() {     return total. }
false;public;0;3;;public Map<String, Integer> getRoles() {     return roles. }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(Fields.TOTAL, total).     for (Map.Entry<String, Integer> entry : roles.entrySet()) {         builder.field(entry.getKey(), entry.getValue()).     }     return builder. }
false;public;0;3;;public int getAvailableProcessors() {     return availableProcessors. }
false;public;0;3;;public int getAllocatedProcessors() {     return allocatedProcessors. }
false;public;0;3;;public org.elasticsearch.monitor.os.OsStats.Mem getMem() {     return mem. }
false;public;2;32;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(Fields.AVAILABLE_PROCESSORS, availableProcessors).     builder.field(Fields.ALLOCATED_PROCESSORS, allocatedProcessors).     builder.startArray(Fields.NAMES).     {         for (ObjectIntCursor<String> name : names) {             builder.startObject().             {                 builder.field(Fields.NAME, name.key).                 builder.field(Fields.COUNT, name.value).             }             builder.endObject().         }     }     builder.endArray().     builder.startArray(Fields.PRETTY_NAMES).     {         for (final ObjectIntCursor<String> prettyName : prettyNames) {             builder.startObject().             {                 builder.field(Fields.PRETTY_NAME, prettyName.key).                 builder.field(Fields.COUNT, prettyName.value).             }             builder.endObject().         }     }     builder.endArray().     mem.toXContent(builder, params).     return builder. }
true;public;0;3;/**  * Cpu usage in percentages - 100 is 1 core.  */ ;/**  * Cpu usage in percentages - 100 is 1 core.  */ public int getCpuPercent() {     return cpuPercent. }
false;public;0;6;;public long getAvgOpenFileDescriptors() {     if (count == 0) {         return -1.     }     return totalOpenFileDescriptors / count. }
false;public;0;6;;public long getMaxOpenFileDescriptors() {     if (count == 0) {         return -1.     }     return maxOpenFileDescriptors. }
false;public;0;6;;public long getMinOpenFileDescriptors() {     if (count == 0) {         return -1.     }     return minOpenFileDescriptors. }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.CPU).field(Fields.PERCENT, cpuPercent).endObject().     if (count > 0) {         builder.startObject(Fields.OPEN_FILE_DESCRIPTORS).         builder.field(Fields.MIN, getMinOpenFileDescriptors()).         builder.field(Fields.MAX, getMaxOpenFileDescriptors()).         builder.field(Fields.AVG, getAvgOpenFileDescriptors()).         builder.endObject().     }     return builder. }
false;public;0;3;;public ObjectIntHashMap<JvmVersion> getVersions() {     return versions. }
true;public;0;3;/**  * The total number of threads in the cluster  */ ;/**  * The total number of threads in the cluster  */ public long getThreads() {     return threads. }
true;public;0;3;/**  * The maximum uptime of a node in the cluster  */ ;/**  * The maximum uptime of a node in the cluster  */ public TimeValue getMaxUpTime() {     return new TimeValue(maxUptime). }
true;public;0;3;/**  * Total heap used in the cluster  */ ;/**  * Total heap used in the cluster  */ public ByteSizeValue getHeapUsed() {     return new ByteSizeValue(heapUsed). }
true;public;0;3;/**  * Maximum total heap available to the cluster  */ ;/**  * Maximum total heap available to the cluster  */ public ByteSizeValue getHeapMax() {     return new ByteSizeValue(heapMax). }
false;public;2;23;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.humanReadableField(Fields.MAX_UPTIME_IN_MILLIS, Fields.MAX_UPTIME, new TimeValue(maxUptime)).     builder.startArray(Fields.VERSIONS).     for (ObjectIntCursor<JvmVersion> v : versions) {         builder.startObject().         builder.field(Fields.VERSION, v.key.version).         builder.field(Fields.VM_NAME, v.key.vmName).         builder.field(Fields.VM_VERSION, v.key.vmVersion).         builder.field(Fields.VM_VENDOR, v.key.vmVendor).         builder.field(Fields.COUNT, v.value).         builder.endObject().     }     builder.endArray().     builder.startObject(Fields.MEM).     builder.humanReadableField(Fields.HEAP_USED_IN_BYTES, Fields.HEAP_USED, getHeapUsed()).     builder.humanReadableField(Fields.HEAP_MAX_IN_BYTES, Fields.HEAP_MAX, getHeapMax()).     builder.endObject().     builder.field(Fields.THREADS, threads).     return builder. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     JvmVersion jvm = (JvmVersion) o.     return vmVersion.equals(jvm.vmVersion) && vmVendor.equals(jvm.vmVendor). }
false;public;0;4;;@Override public int hashCode() {     return vmVersion.hashCode(). }
false;public;2;14;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject("transport_types").     for (final Map.Entry<String, AtomicInteger> entry : transportTypes.entrySet()) {         builder.field(entry.getKey(), entry.getValue().get()).     }     builder.endObject().     builder.startObject("http_types").     for (final Map.Entry<String, AtomicInteger> entry : httpTypes.entrySet()) {         builder.field(entry.getKey(), entry.getValue().get()).     }     builder.endObject().     return builder. }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject("discovery_types").     for (final Map.Entry<String, AtomicInteger> entry : discoveryTypes.entrySet()) {         builder.field(entry.getKey(), entry.getValue().get()).     }     builder.endObject().     return builder. }
