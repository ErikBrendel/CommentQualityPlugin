# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterStatsNodes -> JvmStats -> public long getThreads();1524684173;The total number of threads in the cluster;public long getThreads() {_            return threads__        };the,total,number,of,threads,in,the,cluster;public,long,get,threads,return,threads
ClusterStatsNodes -> JvmStats -> public long getThreads();1541697418;The total number of threads in the cluster;public long getThreads() {_            return threads__        };the,total,number,of,threads,in,the,cluster;public,long,get,threads,return,threads
ClusterStatsNodes -> JvmStats -> public long getThreads();1544520958;The total number of threads in the cluster;public long getThreads() {_            return threads__        };the,total,number,of,threads,in,the,cluster;public,long,get,threads,return,threads
ClusterStatsNodes -> JvmStats -> public TimeValue getMaxUpTime();1524684173;The maximum uptime of a node in the cluster;public TimeValue getMaxUpTime() {_            return new TimeValue(maxUptime)__        };the,maximum,uptime,of,a,node,in,the,cluster;public,time,value,get,max,up,time,return,new,time,value,max,uptime
ClusterStatsNodes -> JvmStats -> public TimeValue getMaxUpTime();1541697418;The maximum uptime of a node in the cluster;public TimeValue getMaxUpTime() {_            return new TimeValue(maxUptime)__        };the,maximum,uptime,of,a,node,in,the,cluster;public,time,value,get,max,up,time,return,new,time,value,max,uptime
ClusterStatsNodes -> JvmStats -> public TimeValue getMaxUpTime();1544520958;The maximum uptime of a node in the cluster;public TimeValue getMaxUpTime() {_            return new TimeValue(maxUptime)__        };the,maximum,uptime,of,a,node,in,the,cluster;public,time,value,get,max,up,time,return,new,time,value,max,uptime
ClusterStatsNodes -> JvmStats -> private JvmStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList);1524684173;Build from lists of information about each node.;private JvmStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList) {_            this.versions = new ObjectIntHashMap<>()__            long threads = 0__            long maxUptime = 0__            long heapMax = 0__            long heapUsed = 0__            for (NodeInfo nodeInfo : nodeInfos) {_                versions.addTo(new JvmVersion(nodeInfo.getJvm()), 1)__            }__            for (NodeStats nodeStats : nodeStatsList) {_                org.elasticsearch.monitor.jvm.JvmStats js = nodeStats.getJvm()__                if (js == null) {_                    continue__                }_                if (js.getThreads() != null) {_                    threads += js.getThreads().getCount()__                }_                maxUptime = Math.max(maxUptime, js.getUptime().millis())__                if (js.getMem() != null) {_                    heapUsed += js.getMem().getHeapUsed().getBytes()__                    heapMax += js.getMem().getHeapMax().getBytes()__                }_            }_            this.threads = threads__            this.maxUptime = maxUptime__            this.heapUsed = heapUsed__            this.heapMax = heapMax__        };build,from,lists,of,information,about,each,node;private,jvm,stats,list,node,info,node,infos,list,node,stats,node,stats,list,this,versions,new,object,int,hash,map,long,threads,0,long,max,uptime,0,long,heap,max,0,long,heap,used,0,for,node,info,node,info,node,infos,versions,add,to,new,jvm,version,node,info,get,jvm,1,for,node,stats,node,stats,node,stats,list,org,elasticsearch,monitor,jvm,jvm,stats,js,node,stats,get,jvm,if,js,null,continue,if,js,get,threads,null,threads,js,get,threads,get,count,max,uptime,math,max,max,uptime,js,get,uptime,millis,if,js,get,mem,null,heap,used,js,get,mem,get,heap,used,get,bytes,heap,max,js,get,mem,get,heap,max,get,bytes,this,threads,threads,this,max,uptime,max,uptime,this,heap,used,heap,used,this,heap,max,heap,max
ClusterStatsNodes -> JvmStats -> private JvmStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList);1541697418;Build from lists of information about each node.;private JvmStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList) {_            this.versions = new ObjectIntHashMap<>()__            long threads = 0__            long maxUptime = 0__            long heapMax = 0__            long heapUsed = 0__            for (NodeInfo nodeInfo : nodeInfos) {_                versions.addTo(new JvmVersion(nodeInfo.getJvm()), 1)__            }__            for (NodeStats nodeStats : nodeStatsList) {_                org.elasticsearch.monitor.jvm.JvmStats js = nodeStats.getJvm()__                if (js == null) {_                    continue__                }_                if (js.getThreads() != null) {_                    threads += js.getThreads().getCount()__                }_                maxUptime = Math.max(maxUptime, js.getUptime().millis())__                if (js.getMem() != null) {_                    heapUsed += js.getMem().getHeapUsed().getBytes()__                    heapMax += js.getMem().getHeapMax().getBytes()__                }_            }_            this.threads = threads__            this.maxUptime = maxUptime__            this.heapUsed = heapUsed__            this.heapMax = heapMax__        };build,from,lists,of,information,about,each,node;private,jvm,stats,list,node,info,node,infos,list,node,stats,node,stats,list,this,versions,new,object,int,hash,map,long,threads,0,long,max,uptime,0,long,heap,max,0,long,heap,used,0,for,node,info,node,info,node,infos,versions,add,to,new,jvm,version,node,info,get,jvm,1,for,node,stats,node,stats,node,stats,list,org,elasticsearch,monitor,jvm,jvm,stats,js,node,stats,get,jvm,if,js,null,continue,if,js,get,threads,null,threads,js,get,threads,get,count,max,uptime,math,max,max,uptime,js,get,uptime,millis,if,js,get,mem,null,heap,used,js,get,mem,get,heap,used,get,bytes,heap,max,js,get,mem,get,heap,max,get,bytes,this,threads,threads,this,max,uptime,max,uptime,this,heap,used,heap,used,this,heap,max,heap,max
ClusterStatsNodes -> JvmStats -> private JvmStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList);1544520958;Build from lists of information about each node.;private JvmStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList) {_            this.versions = new ObjectIntHashMap<>()__            long threads = 0__            long maxUptime = 0__            long heapMax = 0__            long heapUsed = 0__            for (NodeInfo nodeInfo : nodeInfos) {_                versions.addTo(new JvmVersion(nodeInfo.getJvm()), 1)__            }__            for (NodeStats nodeStats : nodeStatsList) {_                org.elasticsearch.monitor.jvm.JvmStats js = nodeStats.getJvm()__                if (js == null) {_                    continue__                }_                if (js.getThreads() != null) {_                    threads += js.getThreads().getCount()__                }_                maxUptime = Math.max(maxUptime, js.getUptime().millis())__                if (js.getMem() != null) {_                    heapUsed += js.getMem().getHeapUsed().getBytes()__                    heapMax += js.getMem().getHeapMax().getBytes()__                }_            }_            this.threads = threads__            this.maxUptime = maxUptime__            this.heapUsed = heapUsed__            this.heapMax = heapMax__        };build,from,lists,of,information,about,each,node;private,jvm,stats,list,node,info,node,infos,list,node,stats,node,stats,list,this,versions,new,object,int,hash,map,long,threads,0,long,max,uptime,0,long,heap,max,0,long,heap,used,0,for,node,info,node,info,node,infos,versions,add,to,new,jvm,version,node,info,get,jvm,1,for,node,stats,node,stats,node,stats,list,org,elasticsearch,monitor,jvm,jvm,stats,js,node,stats,get,jvm,if,js,null,continue,if,js,get,threads,null,threads,js,get,threads,get,count,max,uptime,math,max,max,uptime,js,get,uptime,millis,if,js,get,mem,null,heap,used,js,get,mem,get,heap,used,get,bytes,heap,max,js,get,mem,get,heap,max,get,bytes,this,threads,threads,this,max,uptime,max,uptime,this,heap,used,heap,used,this,heap,max,heap,max
ClusterStatsNodes -> JvmStats -> public ByteSizeValue getHeapUsed();1524684173;Total heap used in the cluster;public ByteSizeValue getHeapUsed() {_            return new ByteSizeValue(heapUsed)__        };total,heap,used,in,the,cluster;public,byte,size,value,get,heap,used,return,new,byte,size,value,heap,used
ClusterStatsNodes -> JvmStats -> public ByteSizeValue getHeapUsed();1541697418;Total heap used in the cluster;public ByteSizeValue getHeapUsed() {_            return new ByteSizeValue(heapUsed)__        };total,heap,used,in,the,cluster;public,byte,size,value,get,heap,used,return,new,byte,size,value,heap,used
ClusterStatsNodes -> JvmStats -> public ByteSizeValue getHeapUsed();1544520958;Total heap used in the cluster;public ByteSizeValue getHeapUsed() {_            return new ByteSizeValue(heapUsed)__        };total,heap,used,in,the,cluster;public,byte,size,value,get,heap,used,return,new,byte,size,value,heap,used
ClusterStatsNodes -> JvmStats -> public ByteSizeValue getHeapMax();1524684173;Maximum total heap available to the cluster;public ByteSizeValue getHeapMax() {_            return new ByteSizeValue(heapMax)__        };maximum,total,heap,available,to,the,cluster;public,byte,size,value,get,heap,max,return,new,byte,size,value,heap,max
ClusterStatsNodes -> JvmStats -> public ByteSizeValue getHeapMax();1541697418;Maximum total heap available to the cluster;public ByteSizeValue getHeapMax() {_            return new ByteSizeValue(heapMax)__        };maximum,total,heap,available,to,the,cluster;public,byte,size,value,get,heap,max,return,new,byte,size,value,heap,max
ClusterStatsNodes -> JvmStats -> public ByteSizeValue getHeapMax();1544520958;Maximum total heap available to the cluster;public ByteSizeValue getHeapMax() {_            return new ByteSizeValue(heapMax)__        };maximum,total,heap,available,to,the,cluster;public,byte,size,value,get,heap,max,return,new,byte,size,value,heap,max
ClusterStatsNodes -> ProcessStats -> public int getCpuPercent();1524684173;Cpu usage in percentages - 100 is 1 core.;public int getCpuPercent() {_            return cpuPercent__        };cpu,usage,in,percentages,100,is,1,core;public,int,get,cpu,percent,return,cpu,percent
ClusterStatsNodes -> ProcessStats -> public int getCpuPercent();1541697418;Cpu usage in percentages - 100 is 1 core.;public int getCpuPercent() {_            return cpuPercent__        };cpu,usage,in,percentages,100,is,1,core;public,int,get,cpu,percent,return,cpu,percent
ClusterStatsNodes -> ProcessStats -> public int getCpuPercent();1544520958;Cpu usage in percentages - 100 is 1 core.;public int getCpuPercent() {_            return cpuPercent__        };cpu,usage,in,percentages,100,is,1,core;public,int,get,cpu,percent,return,cpu,percent
ClusterStatsNodes -> ProcessStats -> private ProcessStats(List<NodeStats> nodeStatsList);1524684173;Build from looking at a list of node statistics.;private ProcessStats(List<NodeStats> nodeStatsList) {_            int count = 0__            int cpuPercent = 0__            long totalOpenFileDescriptors = 0__            long minOpenFileDescriptors = Long.MAX_VALUE__            long maxOpenFileDescriptors = Long.MIN_VALUE__            for (NodeStats nodeStats : nodeStatsList) {_                if (nodeStats.getProcess() == null) {_                    continue__                }_                count++__                if (nodeStats.getProcess().getCpu() != null) {_                    cpuPercent += nodeStats.getProcess().getCpu().getPercent()__                }_                long fd = nodeStats.getProcess().getOpenFileDescriptors()__                if (fd > 0) {_                    _                    totalOpenFileDescriptors += fd__                }_                _                _                minOpenFileDescriptors = Math.min(minOpenFileDescriptors, fd)__                maxOpenFileDescriptors = Math.max(maxOpenFileDescriptors, fd)__            }_            this.count = count__            this.cpuPercent = cpuPercent__            this.totalOpenFileDescriptors = totalOpenFileDescriptors__            this.minOpenFileDescriptors = minOpenFileDescriptors__            this.maxOpenFileDescriptors = maxOpenFileDescriptors__        };build,from,looking,at,a,list,of,node,statistics;private,process,stats,list,node,stats,node,stats,list,int,count,0,int,cpu,percent,0,long,total,open,file,descriptors,0,long,min,open,file,descriptors,long,long,max,open,file,descriptors,long,for,node,stats,node,stats,node,stats,list,if,node,stats,get,process,null,continue,count,if,node,stats,get,process,get,cpu,null,cpu,percent,node,stats,get,process,get,cpu,get,percent,long,fd,node,stats,get,process,get,open,file,descriptors,if,fd,0,total,open,file,descriptors,fd,min,open,file,descriptors,math,min,min,open,file,descriptors,fd,max,open,file,descriptors,math,max,max,open,file,descriptors,fd,this,count,count,this,cpu,percent,cpu,percent,this,total,open,file,descriptors,total,open,file,descriptors,this,min,open,file,descriptors,min,open,file,descriptors,this,max,open,file,descriptors,max,open,file,descriptors
ClusterStatsNodes -> ProcessStats -> private ProcessStats(List<NodeStats> nodeStatsList);1541697418;Build from looking at a list of node statistics.;private ProcessStats(List<NodeStats> nodeStatsList) {_            int count = 0__            int cpuPercent = 0__            long totalOpenFileDescriptors = 0__            long minOpenFileDescriptors = Long.MAX_VALUE__            long maxOpenFileDescriptors = Long.MIN_VALUE__            for (NodeStats nodeStats : nodeStatsList) {_                if (nodeStats.getProcess() == null) {_                    continue__                }_                count++__                if (nodeStats.getProcess().getCpu() != null) {_                    cpuPercent += nodeStats.getProcess().getCpu().getPercent()__                }_                long fd = nodeStats.getProcess().getOpenFileDescriptors()__                if (fd > 0) {_                    _                    totalOpenFileDescriptors += fd__                }_                _                _                minOpenFileDescriptors = Math.min(minOpenFileDescriptors, fd)__                maxOpenFileDescriptors = Math.max(maxOpenFileDescriptors, fd)__            }_            this.count = count__            this.cpuPercent = cpuPercent__            this.totalOpenFileDescriptors = totalOpenFileDescriptors__            this.minOpenFileDescriptors = minOpenFileDescriptors__            this.maxOpenFileDescriptors = maxOpenFileDescriptors__        };build,from,looking,at,a,list,of,node,statistics;private,process,stats,list,node,stats,node,stats,list,int,count,0,int,cpu,percent,0,long,total,open,file,descriptors,0,long,min,open,file,descriptors,long,long,max,open,file,descriptors,long,for,node,stats,node,stats,node,stats,list,if,node,stats,get,process,null,continue,count,if,node,stats,get,process,get,cpu,null,cpu,percent,node,stats,get,process,get,cpu,get,percent,long,fd,node,stats,get,process,get,open,file,descriptors,if,fd,0,total,open,file,descriptors,fd,min,open,file,descriptors,math,min,min,open,file,descriptors,fd,max,open,file,descriptors,math,max,max,open,file,descriptors,fd,this,count,count,this,cpu,percent,cpu,percent,this,total,open,file,descriptors,total,open,file,descriptors,this,min,open,file,descriptors,min,open,file,descriptors,this,max,open,file,descriptors,max,open,file,descriptors
ClusterStatsNodes -> ProcessStats -> private ProcessStats(List<NodeStats> nodeStatsList);1544520958;Build from looking at a list of node statistics.;private ProcessStats(List<NodeStats> nodeStatsList) {_            int count = 0__            int cpuPercent = 0__            long totalOpenFileDescriptors = 0__            long minOpenFileDescriptors = Long.MAX_VALUE__            long maxOpenFileDescriptors = Long.MIN_VALUE__            for (NodeStats nodeStats : nodeStatsList) {_                if (nodeStats.getProcess() == null) {_                    continue__                }_                count++__                if (nodeStats.getProcess().getCpu() != null) {_                    cpuPercent += nodeStats.getProcess().getCpu().getPercent()__                }_                long fd = nodeStats.getProcess().getOpenFileDescriptors()__                if (fd > 0) {_                    _                    totalOpenFileDescriptors += fd__                }_                _                _                minOpenFileDescriptors = Math.min(minOpenFileDescriptors, fd)__                maxOpenFileDescriptors = Math.max(maxOpenFileDescriptors, fd)__            }_            this.count = count__            this.cpuPercent = cpuPercent__            this.totalOpenFileDescriptors = totalOpenFileDescriptors__            this.minOpenFileDescriptors = minOpenFileDescriptors__            this.maxOpenFileDescriptors = maxOpenFileDescriptors__        };build,from,looking,at,a,list,of,node,statistics;private,process,stats,list,node,stats,node,stats,list,int,count,0,int,cpu,percent,0,long,total,open,file,descriptors,0,long,min,open,file,descriptors,long,long,max,open,file,descriptors,long,for,node,stats,node,stats,node,stats,list,if,node,stats,get,process,null,continue,count,if,node,stats,get,process,get,cpu,null,cpu,percent,node,stats,get,process,get,cpu,get,percent,long,fd,node,stats,get,process,get,open,file,descriptors,if,fd,0,total,open,file,descriptors,fd,min,open,file,descriptors,math,min,min,open,file,descriptors,fd,max,open,file,descriptors,math,max,max,open,file,descriptors,fd,this,count,count,this,cpu,percent,cpu,percent,this,total,open,file,descriptors,total,open,file,descriptors,this,min,open,file,descriptors,min,open,file,descriptors,this,max,open,file,descriptors,max,open,file,descriptors
ClusterStatsNodes -> OsStats -> private OsStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList);1524684173;Build the stats from information about each node.;private OsStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList) {_            this.names = new ObjectIntHashMap<>()__            int availableProcessors = 0__            int allocatedProcessors = 0__            for (NodeInfo nodeInfo : nodeInfos) {_                availableProcessors += nodeInfo.getOs().getAvailableProcessors()__                allocatedProcessors += nodeInfo.getOs().getAllocatedProcessors()___                if (nodeInfo.getOs().getName() != null) {_                    names.addTo(nodeInfo.getOs().getName(), 1)__                }_            }_            this.availableProcessors = availableProcessors__            this.allocatedProcessors = allocatedProcessors___            long totalMemory = 0__            long freeMemory = 0__            for (NodeStats nodeStats : nodeStatsList) {_                if (nodeStats.getOs() != null) {_                    long total = nodeStats.getOs().getMem().getTotal().getBytes()__                    if (total > 0) {_                        totalMemory += total__                    }_                    long free = nodeStats.getOs().getMem().getFree().getBytes()__                    if (free > 0) {_                        freeMemory += free__                    }_                }_            }_            this.mem = new org.elasticsearch.monitor.os.OsStats.Mem(totalMemory, freeMemory)__        };build,the,stats,from,information,about,each,node;private,os,stats,list,node,info,node,infos,list,node,stats,node,stats,list,this,names,new,object,int,hash,map,int,available,processors,0,int,allocated,processors,0,for,node,info,node,info,node,infos,available,processors,node,info,get,os,get,available,processors,allocated,processors,node,info,get,os,get,allocated,processors,if,node,info,get,os,get,name,null,names,add,to,node,info,get,os,get,name,1,this,available,processors,available,processors,this,allocated,processors,allocated,processors,long,total,memory,0,long,free,memory,0,for,node,stats,node,stats,node,stats,list,if,node,stats,get,os,null,long,total,node,stats,get,os,get,mem,get,total,get,bytes,if,total,0,total,memory,total,long,free,node,stats,get,os,get,mem,get,free,get,bytes,if,free,0,free,memory,free,this,mem,new,org,elasticsearch,monitor,os,os,stats,mem,total,memory,free,memory
ClusterStatsNodes -> OsStats -> private OsStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList);1541697418;Build the stats from information about each node.;private OsStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList) {_            this.names = new ObjectIntHashMap<>()__            this.prettyNames = new ObjectIntHashMap<>()__            int availableProcessors = 0__            int allocatedProcessors = 0__            for (NodeInfo nodeInfo : nodeInfos) {_                availableProcessors += nodeInfo.getOs().getAvailableProcessors()__                allocatedProcessors += nodeInfo.getOs().getAllocatedProcessors()___                if (nodeInfo.getOs().getName() != null) {_                    names.addTo(nodeInfo.getOs().getName(), 1)__                }_                if (nodeInfo.getOs().getPrettyName() != null) {_                    prettyNames.addTo(nodeInfo.getOs().getPrettyName(), 1)__                }_            }_            this.availableProcessors = availableProcessors__            this.allocatedProcessors = allocatedProcessors___            long totalMemory = 0__            long freeMemory = 0__            for (NodeStats nodeStats : nodeStatsList) {_                if (nodeStats.getOs() != null) {_                    long total = nodeStats.getOs().getMem().getTotal().getBytes()__                    if (total > 0) {_                        totalMemory += total__                    }_                    long free = nodeStats.getOs().getMem().getFree().getBytes()__                    if (free > 0) {_                        freeMemory += free__                    }_                }_            }_            this.mem = new org.elasticsearch.monitor.os.OsStats.Mem(totalMemory, freeMemory)__        };build,the,stats,from,information,about,each,node;private,os,stats,list,node,info,node,infos,list,node,stats,node,stats,list,this,names,new,object,int,hash,map,this,pretty,names,new,object,int,hash,map,int,available,processors,0,int,allocated,processors,0,for,node,info,node,info,node,infos,available,processors,node,info,get,os,get,available,processors,allocated,processors,node,info,get,os,get,allocated,processors,if,node,info,get,os,get,name,null,names,add,to,node,info,get,os,get,name,1,if,node,info,get,os,get,pretty,name,null,pretty,names,add,to,node,info,get,os,get,pretty,name,1,this,available,processors,available,processors,this,allocated,processors,allocated,processors,long,total,memory,0,long,free,memory,0,for,node,stats,node,stats,node,stats,list,if,node,stats,get,os,null,long,total,node,stats,get,os,get,mem,get,total,get,bytes,if,total,0,total,memory,total,long,free,node,stats,get,os,get,mem,get,free,get,bytes,if,free,0,free,memory,free,this,mem,new,org,elasticsearch,monitor,os,os,stats,mem,total,memory,free,memory
ClusterStatsNodes -> OsStats -> private OsStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList);1544520958;Build the stats from information about each node.;private OsStats(List<NodeInfo> nodeInfos, List<NodeStats> nodeStatsList) {_            this.names = new ObjectIntHashMap<>()__            this.prettyNames = new ObjectIntHashMap<>()__            int availableProcessors = 0__            int allocatedProcessors = 0__            for (NodeInfo nodeInfo : nodeInfos) {_                availableProcessors += nodeInfo.getOs().getAvailableProcessors()__                allocatedProcessors += nodeInfo.getOs().getAllocatedProcessors()___                if (nodeInfo.getOs().getName() != null) {_                    names.addTo(nodeInfo.getOs().getName(), 1)__                }_                if (nodeInfo.getOs().getPrettyName() != null) {_                    prettyNames.addTo(nodeInfo.getOs().getPrettyName(), 1)__                }_            }_            this.availableProcessors = availableProcessors__            this.allocatedProcessors = allocatedProcessors___            long totalMemory = 0__            long freeMemory = 0__            for (NodeStats nodeStats : nodeStatsList) {_                if (nodeStats.getOs() != null) {_                    long total = nodeStats.getOs().getMem().getTotal().getBytes()__                    if (total > 0) {_                        totalMemory += total__                    }_                    long free = nodeStats.getOs().getMem().getFree().getBytes()__                    if (free > 0) {_                        freeMemory += free__                    }_                }_            }_            this.mem = new org.elasticsearch.monitor.os.OsStats.Mem(totalMemory, freeMemory)__        };build,the,stats,from,information,about,each,node;private,os,stats,list,node,info,node,infos,list,node,stats,node,stats,list,this,names,new,object,int,hash,map,this,pretty,names,new,object,int,hash,map,int,available,processors,0,int,allocated,processors,0,for,node,info,node,info,node,infos,available,processors,node,info,get,os,get,available,processors,allocated,processors,node,info,get,os,get,allocated,processors,if,node,info,get,os,get,name,null,names,add,to,node,info,get,os,get,name,1,if,node,info,get,os,get,pretty,name,null,pretty,names,add,to,node,info,get,os,get,pretty,name,1,this,available,processors,available,processors,this,allocated,processors,allocated,processors,long,total,memory,0,long,free,memory,0,for,node,stats,node,stats,node,stats,list,if,node,stats,get,os,null,long,total,node,stats,get,os,get,mem,get,total,get,bytes,if,total,0,total,memory,total,long,free,node,stats,get,os,get,mem,get,free,get,bytes,if,free,0,free,memory,free,this,mem,new,org,elasticsearch,monitor,os,os,stats,mem,total,memory,free,memory
