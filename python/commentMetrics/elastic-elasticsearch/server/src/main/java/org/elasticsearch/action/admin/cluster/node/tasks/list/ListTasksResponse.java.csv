commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeList(tasks). }
false;protected,static;2;23;;protected static <T> ConstructingObjectParser<T, Void> setupParser(String name, TriFunction<List<TaskInfo>, List<TaskOperationFailure>, List<ElasticsearchException>, T> ctor) {     ConstructingObjectParser<T, Void> parser = new ConstructingObjectParser<>(name, true, constructingObjects -> {         int i = 0.         @SuppressWarnings("unchecked")         List<TaskInfo> tasks = (List<TaskInfo>) constructingObjects[i++].         @SuppressWarnings("unchecked")         List<TaskOperationFailure> tasksFailures = (List<TaskOperationFailure>) constructingObjects[i++].         @SuppressWarnings("unchecked")         List<ElasticsearchException> nodeFailures = (List<ElasticsearchException>) constructingObjects[i].         return ctor.apply(tasks, tasksFailures, nodeFailures).     }).     parser.declareObjectArray(optionalConstructorArg(), TaskInfo.PARSER, new ParseField(TASKS)).     parser.declareObjectArray(optionalConstructorArg(), (p, c) -> TaskOperationFailure.fromXContent(p), new ParseField(TASK_FAILURES)).     parser.declareObjectArray(optionalConstructorArg(), (p, c) -> ElasticsearchException.fromXContent(p), new ParseField(NODE_FAILURES)).     return parser. }
true;public;0;6;/**  * Returns the list of tasks by node  */ ;/**  * Returns the list of tasks by node  */ public Map<String, List<TaskInfo>> getPerNodeTasks() {     if (perNodeTasks == null) {         perNodeTasks = tasks.stream().collect(Collectors.groupingBy(t -> t.getTaskId().getNodeId())).     }     return perNodeTasks. }
true;public;0;6;/**  * Get the tasks found by this request grouped by parent tasks.  */ ;/**  * Get the tasks found by this request grouped by parent tasks.  */ public List<TaskGroup> getTaskGroups() {     if (groups == null) {         buildTaskGroups().     }     return groups. }
false;private;0;27;;private void buildTaskGroups() {     Map<TaskId, TaskGroup.Builder> taskGroups = new HashMap<>().     List<TaskGroup.Builder> topLevelTasks = new ArrayList<>().     // First populate all tasks     for (TaskInfo taskInfo : this.tasks) {         taskGroups.put(taskInfo.getTaskId(), TaskGroup.builder(taskInfo)).     }     // Now go through all task group builders and add children to their parents     for (TaskGroup.Builder taskGroup : taskGroups.values()) {         TaskId parentTaskId = taskGroup.getTaskInfo().getParentTaskId().         if (parentTaskId.isSet()) {             TaskGroup.Builder parentTask = taskGroups.get(parentTaskId).             if (parentTask != null) {                 // we found parent in the list of tasks - add it to the parent list                 parentTask.addGroup(taskGroup).             } else {                 // we got zombie or the parent was filtered out - add it to the top task list                 topLevelTasks.add(taskGroup).             }         } else {             // top level task - add it to the top task list             topLevelTasks.add(taskGroup).         }     }     this.groups = Collections.unmodifiableList(topLevelTasks.stream().map(TaskGroup.Builder::build).collect(Collectors.toList())). }
true;public;0;3;/**  * Get the tasks found by this request.  */ ;/**  * Get the tasks found by this request.  */ public List<TaskInfo> getTasks() {     return tasks. }
true;public;3;40;/**  * Convert this task response to XContent grouping by executing nodes.  */ ;/**  * Convert this task response to XContent grouping by executing nodes.  */ public XContentBuilder toXContentGroupedByNode(XContentBuilder builder, Params params, DiscoveryNodes discoveryNodes) throws IOException {     toXContentCommon(builder, params).     builder.startObject("nodes").     for (Map.Entry<String, List<TaskInfo>> entry : getPerNodeTasks().entrySet()) {         DiscoveryNode node = discoveryNodes.get(entry.getKey()).         builder.startObject(entry.getKey()).         if (node != null) {             // If the node is no longer part of the cluster, oh well, we'll just skip it's useful information.             builder.field("name", node.getName()).             builder.field("transport_address", node.getAddress().toString()).             builder.field("host", node.getHostName()).             builder.field("ip", node.getAddress()).             builder.startArray("roles").             for (DiscoveryNode.Role role : node.getRoles()) {                 builder.value(role.getRoleName()).             }             builder.endArray().             if (!node.getAttributes().isEmpty()) {                 builder.startObject("attributes").                 for (Map.Entry<String, String> attrEntry : node.getAttributes().entrySet()) {                     builder.field(attrEntry.getKey(), attrEntry.getValue()).                 }                 builder.endObject().             }         }         builder.startObject(TASKS).         for (TaskInfo task : entry.getValue()) {             builder.startObject(task.getTaskId().toString()).             task.toXContent(builder, params).             builder.endObject().         }         builder.endObject().         builder.endObject().     }     builder.endObject().     return builder. }
true;public;2;10;/**  * Convert this response to XContent grouping by parent tasks.  */ ;/**  * Convert this response to XContent grouping by parent tasks.  */ public XContentBuilder toXContentGroupedByParents(XContentBuilder builder, Params params) throws IOException {     toXContentCommon(builder, params).     builder.startObject(TASKS).     for (TaskGroup group : getTaskGroups()) {         builder.field(group.getTaskInfo().getTaskId().toString()).         group.toXContent(builder, params).     }     builder.endObject().     return builder. }
true;public;2;11;/**  * Presents a flat list of tasks  */ ;/**  * Presents a flat list of tasks  */ public XContentBuilder toXContentGroupedByNone(XContentBuilder builder, Params params) throws IOException {     toXContentCommon(builder, params).     builder.startArray(TASKS).     for (TaskInfo taskInfo : getTasks()) {         builder.startObject().         taskInfo.toXContent(builder, params).         builder.endObject().     }     builder.endArray().     return builder. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     toXContentGroupedByNone(builder, params).     builder.endObject().     return builder. }
false;public,static;1;3;;public static ListTasksResponse fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
