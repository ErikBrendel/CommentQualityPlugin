# id;timestamp;commentText;codeText;commentWords;codeWords
TransportGetTaskAction -> void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,             ActionListener<GetTaskResponse> listener);1524684173;Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the_index then returns a snapshot of the task taken shortly after completion.;void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,_            ActionListener<GetTaskResponse> listener) {_        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {_            @Override_            public void onResponse(GetTaskResponse response) {_                _                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                _                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {_                    listener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };called,after,waiting,for,the,task,to,complete,attempts,to,load,the,results,of,the,task,from,the,tasks,index,if,it,isn,t,in,the,index,then,returns,a,snapshot,of,the,task,taken,shortly,after,completion;void,waited,for,completion,task,this,task,get,task,request,request,task,info,snapshot,of,running,task,action,listener,get,task,response,listener,get,finished,task,from,index,this,task,request,new,action,listener,get,task,response,override,public,void,on,response,get,task,response,response,listener,on,response,response,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,resource,not,found,exception,class,null,listener,on,response,new,get,task,response,new,task,result,true,snapshot,of,running,task,else,listener,on,failure,e
TransportGetTaskAction -> void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,             ActionListener<GetTaskResponse> listener);1529487105;Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the_index then returns a snapshot of the task taken shortly after completion.;void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,_            ActionListener<GetTaskResponse> listener) {_        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {_            @Override_            public void onResponse(GetTaskResponse response) {_                _                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                _                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {_                    listener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };called,after,waiting,for,the,task,to,complete,attempts,to,load,the,results,of,the,task,from,the,tasks,index,if,it,isn,t,in,the,index,then,returns,a,snapshot,of,the,task,taken,shortly,after,completion;void,waited,for,completion,task,this,task,get,task,request,request,task,info,snapshot,of,running,task,action,listener,get,task,response,listener,get,finished,task,from,index,this,task,request,new,action,listener,get,task,response,override,public,void,on,response,get,task,response,response,listener,on,response,response,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,resource,not,found,exception,class,null,listener,on,response,new,get,task,response,new,task,result,true,snapshot,of,running,task,else,listener,on,failure,e
TransportGetTaskAction -> void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,             ActionListener<GetTaskResponse> listener);1529658035;Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the_index then returns a snapshot of the task taken shortly after completion.;void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,_            ActionListener<GetTaskResponse> listener) {_        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {_            @Override_            public void onResponse(GetTaskResponse response) {_                _                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                _                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {_                    listener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };called,after,waiting,for,the,task,to,complete,attempts,to,load,the,results,of,the,task,from,the,tasks,index,if,it,isn,t,in,the,index,then,returns,a,snapshot,of,the,task,taken,shortly,after,completion;void,waited,for,completion,task,this,task,get,task,request,request,task,info,snapshot,of,running,task,action,listener,get,task,response,listener,get,finished,task,from,index,this,task,request,new,action,listener,get,task,response,override,public,void,on,response,get,task,response,response,listener,on,response,response,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,resource,not,found,exception,class,null,listener,on,response,new,get,task,response,new,task,result,true,snapshot,of,running,task,else,listener,on,failure,e
TransportGetTaskAction -> void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,             ActionListener<GetTaskResponse> listener);1529916082;Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the_index then returns a snapshot of the task taken shortly after completion.;void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,_            ActionListener<GetTaskResponse> listener) {_        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {_            @Override_            public void onResponse(GetTaskResponse response) {_                _                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                _                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {_                    listener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };called,after,waiting,for,the,task,to,complete,attempts,to,load,the,results,of,the,task,from,the,tasks,index,if,it,isn,t,in,the,index,then,returns,a,snapshot,of,the,task,taken,shortly,after,completion;void,waited,for,completion,task,this,task,get,task,request,request,task,info,snapshot,of,running,task,action,listener,get,task,response,listener,get,finished,task,from,index,this,task,request,new,action,listener,get,task,response,override,public,void,on,response,get,task,response,response,listener,on,response,response,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,resource,not,found,exception,class,null,listener,on,response,new,get,task,response,new,task,result,true,snapshot,of,running,task,else,listener,on,failure,e
TransportGetTaskAction -> void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,             ActionListener<GetTaskResponse> listener);1540583181;Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the_index then returns a snapshot of the task taken shortly after completion.;void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,_            ActionListener<GetTaskResponse> listener) {_        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {_            @Override_            public void onResponse(GetTaskResponse response) {_                _                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                _                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {_                    listener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };called,after,waiting,for,the,task,to,complete,attempts,to,load,the,results,of,the,task,from,the,tasks,index,if,it,isn,t,in,the,index,then,returns,a,snapshot,of,the,task,taken,shortly,after,completion;void,waited,for,completion,task,this,task,get,task,request,request,task,info,snapshot,of,running,task,action,listener,get,task,response,listener,get,finished,task,from,index,this,task,request,new,action,listener,get,task,response,override,public,void,on,response,get,task,response,response,listener,on,response,response,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,resource,not,found,exception,class,null,listener,on,response,new,get,task,response,new,task,result,true,snapshot,of,running,task,else,listener,on,failure,e
TransportGetTaskAction -> void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,             ActionListener<GetTaskResponse> listener);1541419698;Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the_index then returns a snapshot of the task taken shortly after completion.;void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,_            ActionListener<GetTaskResponse> listener) {_        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {_            @Override_            public void onResponse(GetTaskResponse response) {_                _                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                _                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {_                    listener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };called,after,waiting,for,the,task,to,complete,attempts,to,load,the,results,of,the,task,from,the,tasks,index,if,it,isn,t,in,the,index,then,returns,a,snapshot,of,the,task,taken,shortly,after,completion;void,waited,for,completion,task,this,task,get,task,request,request,task,info,snapshot,of,running,task,action,listener,get,task,response,listener,get,finished,task,from,index,this,task,request,new,action,listener,get,task,response,override,public,void,on,response,get,task,response,response,listener,on,response,response,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,resource,not,found,exception,class,null,listener,on,response,new,get,task,response,new,task,result,true,snapshot,of,running,task,else,listener,on,failure,e
TransportGetTaskAction -> void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,             ActionListener<GetTaskResponse> listener);1543415307;Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the_index then returns a snapshot of the task taken shortly after completion.;void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,_            ActionListener<GetTaskResponse> listener) {_        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {_            @Override_            public void onResponse(GetTaskResponse response) {_                _                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                _                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {_                    listener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };called,after,waiting,for,the,task,to,complete,attempts,to,load,the,results,of,the,task,from,the,tasks,index,if,it,isn,t,in,the,index,then,returns,a,snapshot,of,the,task,taken,shortly,after,completion;void,waited,for,completion,task,this,task,get,task,request,request,task,info,snapshot,of,running,task,action,listener,get,task,response,listener,get,finished,task,from,index,this,task,request,new,action,listener,get,task,response,override,public,void,on,response,get,task,response,response,listener,on,response,response,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,resource,not,found,exception,class,null,listener,on,response,new,get,task,response,new,task,result,true,snapshot,of,running,task,else,listener,on,failure,e
TransportGetTaskAction -> void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,             ActionListener<GetTaskResponse> listener);1544632755;Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the_index then returns a snapshot of the task taken shortly after completion.;void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,_            ActionListener<GetTaskResponse> listener) {_        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {_            @Override_            public void onResponse(GetTaskResponse response) {_                _                listener.onResponse(response)__            }__            @Override_            public void onFailure(Exception e) {_                _                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {_                    listener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };called,after,waiting,for,the,task,to,complete,attempts,to,load,the,results,of,the,task,from,the,tasks,index,if,it,isn,t,in,the,index,then,returns,a,snapshot,of,the,task,taken,shortly,after,completion;void,waited,for,completion,task,this,task,get,task,request,request,task,info,snapshot,of,running,task,action,listener,get,task,response,listener,get,finished,task,from,index,this,task,request,new,action,listener,get,task,response,override,public,void,on,response,get,task,response,response,listener,on,response,response,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,resource,not,found,exception,class,null,listener,on,response,new,get,task,response,new,task,result,true,snapshot,of,running,task,else,listener,on,failure,e
TransportGetTaskAction -> private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1524684173;Executed on the coordinating node to forward execution of the remaining work to the node that matches that requested_{@link TaskId#getNodeId()}. If the node isn't in the cluster then this will just proceed to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} on this node.;private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        TransportRequestOptions.Builder builder = TransportRequestOptions.builder()__        if (request.getTimeout() != null) {_            builder.withTimeout(request.getTimeout())__        }_        builder.withCompress(false)__        DiscoveryNode node = clusterService.state().nodes().get(request.getTaskId().getNodeId())__        if (node == null) {_            _            getFinishedTaskFromIndex(thisTask, request, ActionListener.wrap(listener::onResponse, e -> {_                if (e instanceof ResourceNotFoundException) {_                    e = new ResourceNotFoundException(_                            "task [" + request.getTaskId() + "] belongs to the node [" + request.getTaskId().getNodeId()_                                    + "] which isn't part of the cluster and there is no record of the task",_                            e)__                }_                listener.onFailure(e)__            }))__            return__        }_        GetTaskRequest nodeRequest = request.nodeRequest(clusterService.localNode().getId(), thisTask.getId())__        transportService.sendRequest(node, GetTaskAction.NAME, nodeRequest, builder.build(),_                new TransportResponseHandler<GetTaskResponse>() {_                    @Override_                    public GetTaskResponse newInstance() {_                        return new GetTaskResponse()__                    }__                    @Override_                    public void handleResponse(GetTaskResponse response) {_                        listener.onResponse(response)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__    };executed,on,the,coordinating,node,to,forward,execution,of,the,remaining,work,to,the,node,that,matches,that,requested,link,task,id,get,node,id,if,the,node,isn,t,in,the,cluster,then,this,will,just,proceed,to,link,get,finished,task,from,index,task,get,task,request,action,listener,on,this,node;private,void,run,on,node,with,task,if,possible,task,this,task,get,task,request,request,action,listener,get,task,response,listener,transport,request,options,builder,builder,transport,request,options,builder,if,request,get,timeout,null,builder,with,timeout,request,get,timeout,builder,with,compress,false,discovery,node,node,cluster,service,state,nodes,get,request,get,task,id,get,node,id,if,node,null,get,finished,task,from,index,this,task,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,resource,not,found,exception,e,new,resource,not,found,exception,task,request,get,task,id,belongs,to,the,node,request,get,task,id,get,node,id,which,isn,t,part,of,the,cluster,and,there,is,no,record,of,the,task,e,listener,on,failure,e,return,get,task,request,node,request,request,node,request,cluster,service,local,node,get,id,this,task,get,id,transport,service,send,request,node,get,task,action,name,node,request,builder,build,new,transport,response,handler,get,task,response,override,public,get,task,response,new,instance,return,new,get,task,response,override,public,void,handle,response,get,task,response,response,listener,on,response,response,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same
TransportGetTaskAction -> private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529487105;Executed on the coordinating node to forward execution of the remaining work to the node that matches that requested_{@link TaskId#getNodeId()}. If the node isn't in the cluster then this will just proceed to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} on this node.;private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        TransportRequestOptions.Builder builder = TransportRequestOptions.builder()__        if (request.getTimeout() != null) {_            builder.withTimeout(request.getTimeout())__        }_        builder.withCompress(false)__        DiscoveryNode node = clusterService.state().nodes().get(request.getTaskId().getNodeId())__        if (node == null) {_            _            getFinishedTaskFromIndex(thisTask, request, ActionListener.wrap(listener::onResponse, e -> {_                if (e instanceof ResourceNotFoundException) {_                    e = new ResourceNotFoundException(_                            "task [" + request.getTaskId() + "] belongs to the node [" + request.getTaskId().getNodeId()_                                    + "] which isn't part of the cluster and there is no record of the task",_                            e)__                }_                listener.onFailure(e)__            }))__            return__        }_        GetTaskRequest nodeRequest = request.nodeRequest(clusterService.localNode().getId(), thisTask.getId())__        transportService.sendRequest(node, GetTaskAction.NAME, nodeRequest, builder.build(),_                new TransportResponseHandler<GetTaskResponse>() {_                    @Override_                    public GetTaskResponse newInstance() {_                        return new GetTaskResponse()__                    }__                    @Override_                    public void handleResponse(GetTaskResponse response) {_                        listener.onResponse(response)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__    };executed,on,the,coordinating,node,to,forward,execution,of,the,remaining,work,to,the,node,that,matches,that,requested,link,task,id,get,node,id,if,the,node,isn,t,in,the,cluster,then,this,will,just,proceed,to,link,get,finished,task,from,index,task,get,task,request,action,listener,on,this,node;private,void,run,on,node,with,task,if,possible,task,this,task,get,task,request,request,action,listener,get,task,response,listener,transport,request,options,builder,builder,transport,request,options,builder,if,request,get,timeout,null,builder,with,timeout,request,get,timeout,builder,with,compress,false,discovery,node,node,cluster,service,state,nodes,get,request,get,task,id,get,node,id,if,node,null,get,finished,task,from,index,this,task,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,resource,not,found,exception,e,new,resource,not,found,exception,task,request,get,task,id,belongs,to,the,node,request,get,task,id,get,node,id,which,isn,t,part,of,the,cluster,and,there,is,no,record,of,the,task,e,listener,on,failure,e,return,get,task,request,node,request,request,node,request,cluster,service,local,node,get,id,this,task,get,id,transport,service,send,request,node,get,task,action,name,node,request,builder,build,new,transport,response,handler,get,task,response,override,public,get,task,response,new,instance,return,new,get,task,response,override,public,void,handle,response,get,task,response,response,listener,on,response,response,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same
TransportGetTaskAction -> private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529658035;Executed on the coordinating node to forward execution of the remaining work to the node that matches that requested_{@link TaskId#getNodeId()}. If the node isn't in the cluster then this will just proceed to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} on this node.;private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        TransportRequestOptions.Builder builder = TransportRequestOptions.builder()__        if (request.getTimeout() != null) {_            builder.withTimeout(request.getTimeout())__        }_        builder.withCompress(false)__        DiscoveryNode node = clusterService.state().nodes().get(request.getTaskId().getNodeId())__        if (node == null) {_            _            getFinishedTaskFromIndex(thisTask, request, ActionListener.wrap(listener::onResponse, e -> {_                if (e instanceof ResourceNotFoundException) {_                    e = new ResourceNotFoundException(_                            "task [" + request.getTaskId() + "] belongs to the node [" + request.getTaskId().getNodeId()_                                    + "] which isn't part of the cluster and there is no record of the task",_                            e)__                }_                listener.onFailure(e)__            }))__            return__        }_        GetTaskRequest nodeRequest = request.nodeRequest(clusterService.localNode().getId(), thisTask.getId())__        transportService.sendRequest(node, GetTaskAction.NAME, nodeRequest, builder.build(),_                new TransportResponseHandler<GetTaskResponse>() {_                    @Override_                    public GetTaskResponse newInstance() {_                        return new GetTaskResponse()__                    }__                    @Override_                    public void handleResponse(GetTaskResponse response) {_                        listener.onResponse(response)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__    };executed,on,the,coordinating,node,to,forward,execution,of,the,remaining,work,to,the,node,that,matches,that,requested,link,task,id,get,node,id,if,the,node,isn,t,in,the,cluster,then,this,will,just,proceed,to,link,get,finished,task,from,index,task,get,task,request,action,listener,on,this,node;private,void,run,on,node,with,task,if,possible,task,this,task,get,task,request,request,action,listener,get,task,response,listener,transport,request,options,builder,builder,transport,request,options,builder,if,request,get,timeout,null,builder,with,timeout,request,get,timeout,builder,with,compress,false,discovery,node,node,cluster,service,state,nodes,get,request,get,task,id,get,node,id,if,node,null,get,finished,task,from,index,this,task,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,resource,not,found,exception,e,new,resource,not,found,exception,task,request,get,task,id,belongs,to,the,node,request,get,task,id,get,node,id,which,isn,t,part,of,the,cluster,and,there,is,no,record,of,the,task,e,listener,on,failure,e,return,get,task,request,node,request,request,node,request,cluster,service,local,node,get,id,this,task,get,id,transport,service,send,request,node,get,task,action,name,node,request,builder,build,new,transport,response,handler,get,task,response,override,public,get,task,response,new,instance,return,new,get,task,response,override,public,void,handle,response,get,task,response,response,listener,on,response,response,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same
TransportGetTaskAction -> private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529916082;Executed on the coordinating node to forward execution of the remaining work to the node that matches that requested_{@link TaskId#getNodeId()}. If the node isn't in the cluster then this will just proceed to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} on this node.;private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        TransportRequestOptions.Builder builder = TransportRequestOptions.builder()__        if (request.getTimeout() != null) {_            builder.withTimeout(request.getTimeout())__        }_        builder.withCompress(false)__        DiscoveryNode node = clusterService.state().nodes().get(request.getTaskId().getNodeId())__        if (node == null) {_            _            getFinishedTaskFromIndex(thisTask, request, ActionListener.wrap(listener::onResponse, e -> {_                if (e instanceof ResourceNotFoundException) {_                    e = new ResourceNotFoundException(_                            "task [" + request.getTaskId() + "] belongs to the node [" + request.getTaskId().getNodeId()_                                    + "] which isn't part of the cluster and there is no record of the task",_                            e)__                }_                listener.onFailure(e)__            }))__            return__        }_        GetTaskRequest nodeRequest = request.nodeRequest(clusterService.localNode().getId(), thisTask.getId())__        transportService.sendRequest(node, GetTaskAction.NAME, nodeRequest, builder.build(),_                new TransportResponseHandler<GetTaskResponse>() {_                    @Override_                    public GetTaskResponse newInstance() {_                        return new GetTaskResponse()__                    }__                    @Override_                    public void handleResponse(GetTaskResponse response) {_                        listener.onResponse(response)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__    };executed,on,the,coordinating,node,to,forward,execution,of,the,remaining,work,to,the,node,that,matches,that,requested,link,task,id,get,node,id,if,the,node,isn,t,in,the,cluster,then,this,will,just,proceed,to,link,get,finished,task,from,index,task,get,task,request,action,listener,on,this,node;private,void,run,on,node,with,task,if,possible,task,this,task,get,task,request,request,action,listener,get,task,response,listener,transport,request,options,builder,builder,transport,request,options,builder,if,request,get,timeout,null,builder,with,timeout,request,get,timeout,builder,with,compress,false,discovery,node,node,cluster,service,state,nodes,get,request,get,task,id,get,node,id,if,node,null,get,finished,task,from,index,this,task,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,resource,not,found,exception,e,new,resource,not,found,exception,task,request,get,task,id,belongs,to,the,node,request,get,task,id,get,node,id,which,isn,t,part,of,the,cluster,and,there,is,no,record,of,the,task,e,listener,on,failure,e,return,get,task,request,node,request,request,node,request,cluster,service,local,node,get,id,this,task,get,id,transport,service,send,request,node,get,task,action,name,node,request,builder,build,new,transport,response,handler,get,task,response,override,public,get,task,response,new,instance,return,new,get,task,response,override,public,void,handle,response,get,task,response,response,listener,on,response,response,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same
TransportGetTaskAction -> private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1540583181;Executed on the coordinating node to forward execution of the remaining work to the node that matches that requested_{@link TaskId#getNodeId()}. If the node isn't in the cluster then this will just proceed to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} on this node.;private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        TransportRequestOptions.Builder builder = TransportRequestOptions.builder()__        if (request.getTimeout() != null) {_            builder.withTimeout(request.getTimeout())__        }_        builder.withCompress(false)__        DiscoveryNode node = clusterService.state().nodes().get(request.getTaskId().getNodeId())__        if (node == null) {_            _            getFinishedTaskFromIndex(thisTask, request, ActionListener.wrap(listener::onResponse, e -> {_                if (e instanceof ResourceNotFoundException) {_                    e = new ResourceNotFoundException(_                            "task [" + request.getTaskId() + "] belongs to the node [" + request.getTaskId().getNodeId()_                                    + "] which isn't part of the cluster and there is no record of the task",_                            e)__                }_                listener.onFailure(e)__            }))__            return__        }_        GetTaskRequest nodeRequest = request.nodeRequest(clusterService.localNode().getId(), thisTask.getId())__        transportService.sendRequest(node, GetTaskAction.NAME, nodeRequest, builder.build(),_                new TransportResponseHandler<GetTaskResponse>() {_                    @Override_                    public GetTaskResponse read(StreamInput in) throws IOException {_                        GetTaskResponse response = new GetTaskResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(GetTaskResponse response) {_                        listener.onResponse(response)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__    };executed,on,the,coordinating,node,to,forward,execution,of,the,remaining,work,to,the,node,that,matches,that,requested,link,task,id,get,node,id,if,the,node,isn,t,in,the,cluster,then,this,will,just,proceed,to,link,get,finished,task,from,index,task,get,task,request,action,listener,on,this,node;private,void,run,on,node,with,task,if,possible,task,this,task,get,task,request,request,action,listener,get,task,response,listener,transport,request,options,builder,builder,transport,request,options,builder,if,request,get,timeout,null,builder,with,timeout,request,get,timeout,builder,with,compress,false,discovery,node,node,cluster,service,state,nodes,get,request,get,task,id,get,node,id,if,node,null,get,finished,task,from,index,this,task,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,resource,not,found,exception,e,new,resource,not,found,exception,task,request,get,task,id,belongs,to,the,node,request,get,task,id,get,node,id,which,isn,t,part,of,the,cluster,and,there,is,no,record,of,the,task,e,listener,on,failure,e,return,get,task,request,node,request,request,node,request,cluster,service,local,node,get,id,this,task,get,id,transport,service,send,request,node,get,task,action,name,node,request,builder,build,new,transport,response,handler,get,task,response,override,public,get,task,response,read,stream,input,in,throws,ioexception,get,task,response,response,new,get,task,response,response,read,from,in,return,response,override,public,void,handle,response,get,task,response,response,listener,on,response,response,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same
TransportGetTaskAction -> private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1541419698;Executed on the coordinating node to forward execution of the remaining work to the node that matches that requested_{@link TaskId#getNodeId()}. If the node isn't in the cluster then this will just proceed to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} on this node.;private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        TransportRequestOptions.Builder builder = TransportRequestOptions.builder()__        if (request.getTimeout() != null) {_            builder.withTimeout(request.getTimeout())__        }_        builder.withCompress(false)__        DiscoveryNode node = clusterService.state().nodes().get(request.getTaskId().getNodeId())__        if (node == null) {_            _            getFinishedTaskFromIndex(thisTask, request, ActionListener.wrap(listener::onResponse, e -> {_                if (e instanceof ResourceNotFoundException) {_                    e = new ResourceNotFoundException(_                            "task [" + request.getTaskId() + "] belongs to the node [" + request.getTaskId().getNodeId()_                                    + "] which isn't part of the cluster and there is no record of the task",_                            e)__                }_                listener.onFailure(e)__            }))__            return__        }_        GetTaskRequest nodeRequest = request.nodeRequest(clusterService.localNode().getId(), thisTask.getId())__        transportService.sendRequest(node, GetTaskAction.NAME, nodeRequest, builder.build(),_                new TransportResponseHandler<GetTaskResponse>() {_                    @Override_                    public GetTaskResponse read(StreamInput in) throws IOException {_                        GetTaskResponse response = new GetTaskResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(GetTaskResponse response) {_                        listener.onResponse(response)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__    };executed,on,the,coordinating,node,to,forward,execution,of,the,remaining,work,to,the,node,that,matches,that,requested,link,task,id,get,node,id,if,the,node,isn,t,in,the,cluster,then,this,will,just,proceed,to,link,get,finished,task,from,index,task,get,task,request,action,listener,on,this,node;private,void,run,on,node,with,task,if,possible,task,this,task,get,task,request,request,action,listener,get,task,response,listener,transport,request,options,builder,builder,transport,request,options,builder,if,request,get,timeout,null,builder,with,timeout,request,get,timeout,builder,with,compress,false,discovery,node,node,cluster,service,state,nodes,get,request,get,task,id,get,node,id,if,node,null,get,finished,task,from,index,this,task,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,resource,not,found,exception,e,new,resource,not,found,exception,task,request,get,task,id,belongs,to,the,node,request,get,task,id,get,node,id,which,isn,t,part,of,the,cluster,and,there,is,no,record,of,the,task,e,listener,on,failure,e,return,get,task,request,node,request,request,node,request,cluster,service,local,node,get,id,this,task,get,id,transport,service,send,request,node,get,task,action,name,node,request,builder,build,new,transport,response,handler,get,task,response,override,public,get,task,response,read,stream,input,in,throws,ioexception,get,task,response,response,new,get,task,response,response,read,from,in,return,response,override,public,void,handle,response,get,task,response,response,listener,on,response,response,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same
TransportGetTaskAction -> private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1543415307;Executed on the coordinating node to forward execution of the remaining work to the node that matches that requested_{@link TaskId#getNodeId()}. If the node isn't in the cluster then this will just proceed to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} on this node.;private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        TransportRequestOptions.Builder builder = TransportRequestOptions.builder()__        if (request.getTimeout() != null) {_            builder.withTimeout(request.getTimeout())__        }_        builder.withCompress(false)__        DiscoveryNode node = clusterService.state().nodes().get(request.getTaskId().getNodeId())__        if (node == null) {_            _            getFinishedTaskFromIndex(thisTask, request, ActionListener.wrap(listener::onResponse, e -> {_                if (e instanceof ResourceNotFoundException) {_                    e = new ResourceNotFoundException(_                            "task [" + request.getTaskId() + "] belongs to the node [" + request.getTaskId().getNodeId()_                                    + "] which isn't part of the cluster and there is no record of the task",_                            e)__                }_                listener.onFailure(e)__            }))__            return__        }_        GetTaskRequest nodeRequest = request.nodeRequest(clusterService.localNode().getId(), thisTask.getId())__        transportService.sendRequest(node, GetTaskAction.NAME, nodeRequest, builder.build(),_                new TransportResponseHandler<GetTaskResponse>() {_                    @Override_                    public GetTaskResponse read(StreamInput in) throws IOException {_                        GetTaskResponse response = new GetTaskResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(GetTaskResponse response) {_                        listener.onResponse(response)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__    };executed,on,the,coordinating,node,to,forward,execution,of,the,remaining,work,to,the,node,that,matches,that,requested,link,task,id,get,node,id,if,the,node,isn,t,in,the,cluster,then,this,will,just,proceed,to,link,get,finished,task,from,index,task,get,task,request,action,listener,on,this,node;private,void,run,on,node,with,task,if,possible,task,this,task,get,task,request,request,action,listener,get,task,response,listener,transport,request,options,builder,builder,transport,request,options,builder,if,request,get,timeout,null,builder,with,timeout,request,get,timeout,builder,with,compress,false,discovery,node,node,cluster,service,state,nodes,get,request,get,task,id,get,node,id,if,node,null,get,finished,task,from,index,this,task,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,resource,not,found,exception,e,new,resource,not,found,exception,task,request,get,task,id,belongs,to,the,node,request,get,task,id,get,node,id,which,isn,t,part,of,the,cluster,and,there,is,no,record,of,the,task,e,listener,on,failure,e,return,get,task,request,node,request,request,node,request,cluster,service,local,node,get,id,this,task,get,id,transport,service,send,request,node,get,task,action,name,node,request,builder,build,new,transport,response,handler,get,task,response,override,public,get,task,response,read,stream,input,in,throws,ioexception,get,task,response,response,new,get,task,response,response,read,from,in,return,response,override,public,void,handle,response,get,task,response,response,listener,on,response,response,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same
TransportGetTaskAction -> private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1544632755;Executed on the coordinating node to forward execution of the remaining work to the node that matches that requested_{@link TaskId#getNodeId()}. If the node isn't in the cluster then this will just proceed to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} on this node.;private void runOnNodeWithTaskIfPossible(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        TransportRequestOptions.Builder builder = TransportRequestOptions.builder()__        if (request.getTimeout() != null) {_            builder.withTimeout(request.getTimeout())__        }_        DiscoveryNode node = clusterService.state().nodes().get(request.getTaskId().getNodeId())__        if (node == null) {_            _            getFinishedTaskFromIndex(thisTask, request, ActionListener.wrap(listener::onResponse, e -> {_                if (e instanceof ResourceNotFoundException) {_                    e = new ResourceNotFoundException(_                            "task [" + request.getTaskId() + "] belongs to the node [" + request.getTaskId().getNodeId()_                                    + "] which isn't part of the cluster and there is no record of the task",_                            e)__                }_                listener.onFailure(e)__            }))__            return__        }_        GetTaskRequest nodeRequest = request.nodeRequest(clusterService.localNode().getId(), thisTask.getId())__        transportService.sendRequest(node, GetTaskAction.NAME, nodeRequest, builder.build(),_                new TransportResponseHandler<GetTaskResponse>() {_                    @Override_                    public GetTaskResponse read(StreamInput in) throws IOException {_                        GetTaskResponse response = new GetTaskResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(GetTaskResponse response) {_                        listener.onResponse(response)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__    };executed,on,the,coordinating,node,to,forward,execution,of,the,remaining,work,to,the,node,that,matches,that,requested,link,task,id,get,node,id,if,the,node,isn,t,in,the,cluster,then,this,will,just,proceed,to,link,get,finished,task,from,index,task,get,task,request,action,listener,on,this,node;private,void,run,on,node,with,task,if,possible,task,this,task,get,task,request,request,action,listener,get,task,response,listener,transport,request,options,builder,builder,transport,request,options,builder,if,request,get,timeout,null,builder,with,timeout,request,get,timeout,discovery,node,node,cluster,service,state,nodes,get,request,get,task,id,get,node,id,if,node,null,get,finished,task,from,index,this,task,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,resource,not,found,exception,e,new,resource,not,found,exception,task,request,get,task,id,belongs,to,the,node,request,get,task,id,get,node,id,which,isn,t,part,of,the,cluster,and,there,is,no,record,of,the,task,e,listener,on,failure,e,return,get,task,request,node,request,request,node,request,cluster,service,local,node,get,id,this,task,get,id,transport,service,send,request,node,get,task,action,name,node,request,builder,build,new,transport,response,handler,get,task,response,override,public,get,task,response,read,stream,input,in,throws,ioexception,get,task,response,response,new,get,task,response,response,read,from,in,return,response,override,public,void,handle,response,get,task,response,response,listener,on,response,response,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same
TransportGetTaskAction -> void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException;1524684173;Called with the {@linkplain GetResponse} from loading the task from the results index. Called on the node that once had the task if_that node is part of the cluster or on the coordinating node if the node wasn't part of the cluster.;void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException {_        if (false == response.isExists()) {_            listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", response.getId()))__            return__        }_        if (response.isSourceEmpty()) {_            listener.onFailure(new ElasticsearchException("Stored task status for [{}] didn't contain any source!", response.getId()))__            return__        }_        try (XContentParser parser = XContentHelper_                .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_            TaskResult result = TaskResult.PARSER.apply(parser, null)__            listener.onResponse(new GetTaskResponse(result))__        }_    };called,with,the,linkplain,get,response,from,loading,the,task,from,the,results,index,called,on,the,node,that,once,had,the,task,if,that,node,is,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,wasn,t,part,of,the,cluster;void,on,get,finished,task,from,index,get,response,response,action,listener,get,task,response,listener,throws,ioexception,if,false,response,is,exists,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,response,get,id,return,if,response,is,source,empty,listener,on,failure,new,elasticsearch,exception,stored,task,status,for,didn,t,contain,any,source,response,get,id,return,try,xcontent,parser,parser,xcontent,helper,create,parser,x,content,registry,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,task,result,result,task,result,parser,apply,parser,null,listener,on,response,new,get,task,response,result
TransportGetTaskAction -> void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException;1529487105;Called with the {@linkplain GetResponse} from loading the task from the results index. Called on the node that once had the task if_that node is part of the cluster or on the coordinating node if the node wasn't part of the cluster.;void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException {_        if (false == response.isExists()) {_            listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", response.getId()))__            return__        }_        if (response.isSourceEmpty()) {_            listener.onFailure(new ElasticsearchException("Stored task status for [{}] didn't contain any source!", response.getId()))__            return__        }_        try (XContentParser parser = XContentHelper_                .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_            TaskResult result = TaskResult.PARSER.apply(parser, null)__            listener.onResponse(new GetTaskResponse(result))__        }_    };called,with,the,linkplain,get,response,from,loading,the,task,from,the,results,index,called,on,the,node,that,once,had,the,task,if,that,node,is,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,wasn,t,part,of,the,cluster;void,on,get,finished,task,from,index,get,response,response,action,listener,get,task,response,listener,throws,ioexception,if,false,response,is,exists,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,response,get,id,return,if,response,is,source,empty,listener,on,failure,new,elasticsearch,exception,stored,task,status,for,didn,t,contain,any,source,response,get,id,return,try,xcontent,parser,parser,xcontent,helper,create,parser,x,content,registry,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,task,result,result,task,result,parser,apply,parser,null,listener,on,response,new,get,task,response,result
TransportGetTaskAction -> void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException;1529658035;Called with the {@linkplain GetResponse} from loading the task from the results index. Called on the node that once had the task if_that node is part of the cluster or on the coordinating node if the node wasn't part of the cluster.;void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException {_        if (false == response.isExists()) {_            listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", response.getId()))__            return__        }_        if (response.isSourceEmpty()) {_            listener.onFailure(new ElasticsearchException("Stored task status for [{}] didn't contain any source!", response.getId()))__            return__        }_        try (XContentParser parser = XContentHelper_                .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_            TaskResult result = TaskResult.PARSER.apply(parser, null)__            listener.onResponse(new GetTaskResponse(result))__        }_    };called,with,the,linkplain,get,response,from,loading,the,task,from,the,results,index,called,on,the,node,that,once,had,the,task,if,that,node,is,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,wasn,t,part,of,the,cluster;void,on,get,finished,task,from,index,get,response,response,action,listener,get,task,response,listener,throws,ioexception,if,false,response,is,exists,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,response,get,id,return,if,response,is,source,empty,listener,on,failure,new,elasticsearch,exception,stored,task,status,for,didn,t,contain,any,source,response,get,id,return,try,xcontent,parser,parser,xcontent,helper,create,parser,x,content,registry,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,task,result,result,task,result,parser,apply,parser,null,listener,on,response,new,get,task,response,result
TransportGetTaskAction -> void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException;1529916082;Called with the {@linkplain GetResponse} from loading the task from the results index. Called on the node that once had the task if_that node is part of the cluster or on the coordinating node if the node wasn't part of the cluster.;void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException {_        if (false == response.isExists()) {_            listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", response.getId()))__            return__        }_        if (response.isSourceEmpty()) {_            listener.onFailure(new ElasticsearchException("Stored task status for [{}] didn't contain any source!", response.getId()))__            return__        }_        try (XContentParser parser = XContentHelper_                .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_            TaskResult result = TaskResult.PARSER.apply(parser, null)__            listener.onResponse(new GetTaskResponse(result))__        }_    };called,with,the,linkplain,get,response,from,loading,the,task,from,the,results,index,called,on,the,node,that,once,had,the,task,if,that,node,is,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,wasn,t,part,of,the,cluster;void,on,get,finished,task,from,index,get,response,response,action,listener,get,task,response,listener,throws,ioexception,if,false,response,is,exists,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,response,get,id,return,if,response,is,source,empty,listener,on,failure,new,elasticsearch,exception,stored,task,status,for,didn,t,contain,any,source,response,get,id,return,try,xcontent,parser,parser,xcontent,helper,create,parser,x,content,registry,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,task,result,result,task,result,parser,apply,parser,null,listener,on,response,new,get,task,response,result
TransportGetTaskAction -> void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException;1540583181;Called with the {@linkplain GetResponse} from loading the task from the results index. Called on the node that once had the task if_that node is part of the cluster or on the coordinating node if the node wasn't part of the cluster.;void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException {_        if (false == response.isExists()) {_            listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", response.getId()))__            return__        }_        if (response.isSourceEmpty()) {_            listener.onFailure(new ElasticsearchException("Stored task status for [{}] didn't contain any source!", response.getId()))__            return__        }_        try (XContentParser parser = XContentHelper_                .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_            TaskResult result = TaskResult.PARSER.apply(parser, null)__            listener.onResponse(new GetTaskResponse(result))__        }_    };called,with,the,linkplain,get,response,from,loading,the,task,from,the,results,index,called,on,the,node,that,once,had,the,task,if,that,node,is,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,wasn,t,part,of,the,cluster;void,on,get,finished,task,from,index,get,response,response,action,listener,get,task,response,listener,throws,ioexception,if,false,response,is,exists,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,response,get,id,return,if,response,is,source,empty,listener,on,failure,new,elasticsearch,exception,stored,task,status,for,didn,t,contain,any,source,response,get,id,return,try,xcontent,parser,parser,xcontent,helper,create,parser,x,content,registry,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,task,result,result,task,result,parser,apply,parser,null,listener,on,response,new,get,task,response,result
TransportGetTaskAction -> void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException;1541419698;Called with the {@linkplain GetResponse} from loading the task from the results index. Called on the node that once had the task if_that node is part of the cluster or on the coordinating node if the node wasn't part of the cluster.;void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException {_        if (false == response.isExists()) {_            listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", response.getId()))__            return__        }_        if (response.isSourceEmpty()) {_            listener.onFailure(new ElasticsearchException("Stored task status for [{}] didn't contain any source!", response.getId()))__            return__        }_        try (XContentParser parser = XContentHelper_                .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_            TaskResult result = TaskResult.PARSER.apply(parser, null)__            listener.onResponse(new GetTaskResponse(result))__        }_    };called,with,the,linkplain,get,response,from,loading,the,task,from,the,results,index,called,on,the,node,that,once,had,the,task,if,that,node,is,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,wasn,t,part,of,the,cluster;void,on,get,finished,task,from,index,get,response,response,action,listener,get,task,response,listener,throws,ioexception,if,false,response,is,exists,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,response,get,id,return,if,response,is,source,empty,listener,on,failure,new,elasticsearch,exception,stored,task,status,for,didn,t,contain,any,source,response,get,id,return,try,xcontent,parser,parser,xcontent,helper,create,parser,x,content,registry,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,task,result,result,task,result,parser,apply,parser,null,listener,on,response,new,get,task,response,result
TransportGetTaskAction -> void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException;1543415307;Called with the {@linkplain GetResponse} from loading the task from the results index. Called on the node that once had the task if_that node is part of the cluster or on the coordinating node if the node wasn't part of the cluster.;void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException {_        if (false == response.isExists()) {_            listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", response.getId()))__            return__        }_        if (response.isSourceEmpty()) {_            listener.onFailure(new ElasticsearchException("Stored task status for [{}] didn't contain any source!", response.getId()))__            return__        }_        try (XContentParser parser = XContentHelper_                .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_            TaskResult result = TaskResult.PARSER.apply(parser, null)__            listener.onResponse(new GetTaskResponse(result))__        }_    };called,with,the,linkplain,get,response,from,loading,the,task,from,the,results,index,called,on,the,node,that,once,had,the,task,if,that,node,is,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,wasn,t,part,of,the,cluster;void,on,get,finished,task,from,index,get,response,response,action,listener,get,task,response,listener,throws,ioexception,if,false,response,is,exists,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,response,get,id,return,if,response,is,source,empty,listener,on,failure,new,elasticsearch,exception,stored,task,status,for,didn,t,contain,any,source,response,get,id,return,try,xcontent,parser,parser,xcontent,helper,create,parser,x,content,registry,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,task,result,result,task,result,parser,apply,parser,null,listener,on,response,new,get,task,response,result
TransportGetTaskAction -> void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException;1544632755;Called with the {@linkplain GetResponse} from loading the task from the results index. Called on the node that once had the task if_that node is part of the cluster or on the coordinating node if the node wasn't part of the cluster.;void onGetFinishedTaskFromIndex(GetResponse response, ActionListener<GetTaskResponse> listener) throws IOException {_        if (false == response.isExists()) {_            listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", response.getId()))__            return__        }_        if (response.isSourceEmpty()) {_            listener.onFailure(new ElasticsearchException("Stored task status for [{}] didn't contain any source!", response.getId()))__            return__        }_        try (XContentParser parser = XContentHelper_                .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_            TaskResult result = TaskResult.PARSER.apply(parser, null)__            listener.onResponse(new GetTaskResponse(result))__        }_    };called,with,the,linkplain,get,response,from,loading,the,task,from,the,results,index,called,on,the,node,that,once,had,the,task,if,that,node,is,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,wasn,t,part,of,the,cluster;void,on,get,finished,task,from,index,get,response,response,action,listener,get,task,response,listener,throws,ioexception,if,false,response,is,exists,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,response,get,id,return,if,response,is,source,empty,listener,on,failure,new,elasticsearch,exception,stored,task,status,for,didn,t,contain,any,source,response,get,id,return,try,xcontent,parser,parser,xcontent,helper,create,parser,x,content,registry,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,task,result,result,task,result,parser,apply,parser,null,listener,on,response,new,get,task,response,result
TransportGetTaskAction -> void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1524684173;Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the_task's result was stored. Called on the node that once had the task if that node is still part of the cluster or on the_coordinating node if the node is no longer part of the cluster.;void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        GetRequest get = new GetRequest(TaskResultsService.TASK_INDEX, TaskResultsService.TASK_TYPE,_                request.getTaskId().toString())__        get.setParentTask(clusterService.localNode().getId(), thisTask.getId())__        client.get(get, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                try {_                    onGetFinishedTaskFromIndex(getResponse, listener)__                } catch (Exception e) {_                    listener.onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                if (ExceptionsHelper.unwrap(e, IndexNotFoundException.class) != null) {_                    _                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,_                        request.getTaskId()))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };send,a,link,get,request,to,the,tasks,index,looking,for,a,persisted,copy,of,the,task,completed,task,it,ll,only,be,found,only,if,the,task,s,result,was,stored,called,on,the,node,that,once,had,the,task,if,that,node,is,still,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,is,no,longer,part,of,the,cluster;void,get,finished,task,from,index,task,this,task,get,task,request,request,action,listener,get,task,response,listener,get,request,get,new,get,request,task,results,service,task,results,service,request,get,task,id,to,string,get,set,parent,task,cluster,service,local,node,get,id,this,task,get,id,client,get,get,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,try,on,get,finished,task,from,index,get,response,listener,catch,exception,e,listener,on,failure,e,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,index,not,found,exception,class,null,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,e,request,get,task,id,else,listener,on,failure,e
TransportGetTaskAction -> void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529487105;Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the_task's result was stored. Called on the node that once had the task if that node is still part of the cluster or on the_coordinating node if the node is no longer part of the cluster.;void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        GetRequest get = new GetRequest(TaskResultsService.TASK_INDEX, TaskResultsService.TASK_TYPE,_                request.getTaskId().toString())__        get.setParentTask(clusterService.localNode().getId(), thisTask.getId())__        client.get(get, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                try {_                    onGetFinishedTaskFromIndex(getResponse, listener)__                } catch (Exception e) {_                    listener.onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                if (ExceptionsHelper.unwrap(e, IndexNotFoundException.class) != null) {_                    _                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,_                        request.getTaskId()))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };send,a,link,get,request,to,the,tasks,index,looking,for,a,persisted,copy,of,the,task,completed,task,it,ll,only,be,found,only,if,the,task,s,result,was,stored,called,on,the,node,that,once,had,the,task,if,that,node,is,still,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,is,no,longer,part,of,the,cluster;void,get,finished,task,from,index,task,this,task,get,task,request,request,action,listener,get,task,response,listener,get,request,get,new,get,request,task,results,service,task,results,service,request,get,task,id,to,string,get,set,parent,task,cluster,service,local,node,get,id,this,task,get,id,client,get,get,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,try,on,get,finished,task,from,index,get,response,listener,catch,exception,e,listener,on,failure,e,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,index,not,found,exception,class,null,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,e,request,get,task,id,else,listener,on,failure,e
TransportGetTaskAction -> void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529658035;Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the_task's result was stored. Called on the node that once had the task if that node is still part of the cluster or on the_coordinating node if the node is no longer part of the cluster.;void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        GetRequest get = new GetRequest(TaskResultsService.TASK_INDEX, TaskResultsService.TASK_TYPE,_                request.getTaskId().toString())__        get.setParentTask(clusterService.localNode().getId(), thisTask.getId())__        client.get(get, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                try {_                    onGetFinishedTaskFromIndex(getResponse, listener)__                } catch (Exception e) {_                    listener.onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                if (ExceptionsHelper.unwrap(e, IndexNotFoundException.class) != null) {_                    _                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,_                        request.getTaskId()))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };send,a,link,get,request,to,the,tasks,index,looking,for,a,persisted,copy,of,the,task,completed,task,it,ll,only,be,found,only,if,the,task,s,result,was,stored,called,on,the,node,that,once,had,the,task,if,that,node,is,still,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,is,no,longer,part,of,the,cluster;void,get,finished,task,from,index,task,this,task,get,task,request,request,action,listener,get,task,response,listener,get,request,get,new,get,request,task,results,service,task,results,service,request,get,task,id,to,string,get,set,parent,task,cluster,service,local,node,get,id,this,task,get,id,client,get,get,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,try,on,get,finished,task,from,index,get,response,listener,catch,exception,e,listener,on,failure,e,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,index,not,found,exception,class,null,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,e,request,get,task,id,else,listener,on,failure,e
TransportGetTaskAction -> void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529916082;Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the_task's result was stored. Called on the node that once had the task if that node is still part of the cluster or on the_coordinating node if the node is no longer part of the cluster.;void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        GetRequest get = new GetRequest(TaskResultsService.TASK_INDEX, TaskResultsService.TASK_TYPE,_                request.getTaskId().toString())__        get.setParentTask(clusterService.localNode().getId(), thisTask.getId())__        client.get(get, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                try {_                    onGetFinishedTaskFromIndex(getResponse, listener)__                } catch (Exception e) {_                    listener.onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                if (ExceptionsHelper.unwrap(e, IndexNotFoundException.class) != null) {_                    _                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,_                        request.getTaskId()))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };send,a,link,get,request,to,the,tasks,index,looking,for,a,persisted,copy,of,the,task,completed,task,it,ll,only,be,found,only,if,the,task,s,result,was,stored,called,on,the,node,that,once,had,the,task,if,that,node,is,still,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,is,no,longer,part,of,the,cluster;void,get,finished,task,from,index,task,this,task,get,task,request,request,action,listener,get,task,response,listener,get,request,get,new,get,request,task,results,service,task,results,service,request,get,task,id,to,string,get,set,parent,task,cluster,service,local,node,get,id,this,task,get,id,client,get,get,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,try,on,get,finished,task,from,index,get,response,listener,catch,exception,e,listener,on,failure,e,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,index,not,found,exception,class,null,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,e,request,get,task,id,else,listener,on,failure,e
TransportGetTaskAction -> void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1540583181;Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the_task's result was stored. Called on the node that once had the task if that node is still part of the cluster or on the_coordinating node if the node is no longer part of the cluster.;void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        GetRequest get = new GetRequest(TaskResultsService.TASK_INDEX, TaskResultsService.TASK_TYPE,_                request.getTaskId().toString())__        get.setParentTask(clusterService.localNode().getId(), thisTask.getId())__        client.get(get, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                try {_                    onGetFinishedTaskFromIndex(getResponse, listener)__                } catch (Exception e) {_                    listener.onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                if (ExceptionsHelper.unwrap(e, IndexNotFoundException.class) != null) {_                    _                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,_                        request.getTaskId()))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };send,a,link,get,request,to,the,tasks,index,looking,for,a,persisted,copy,of,the,task,completed,task,it,ll,only,be,found,only,if,the,task,s,result,was,stored,called,on,the,node,that,once,had,the,task,if,that,node,is,still,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,is,no,longer,part,of,the,cluster;void,get,finished,task,from,index,task,this,task,get,task,request,request,action,listener,get,task,response,listener,get,request,get,new,get,request,task,results,service,task,results,service,request,get,task,id,to,string,get,set,parent,task,cluster,service,local,node,get,id,this,task,get,id,client,get,get,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,try,on,get,finished,task,from,index,get,response,listener,catch,exception,e,listener,on,failure,e,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,index,not,found,exception,class,null,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,e,request,get,task,id,else,listener,on,failure,e
TransportGetTaskAction -> void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1541419698;Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the_task's result was stored. Called on the node that once had the task if that node is still part of the cluster or on the_coordinating node if the node is no longer part of the cluster.;void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        GetRequest get = new GetRequest(TaskResultsService.TASK_INDEX, TaskResultsService.TASK_TYPE,_                request.getTaskId().toString())__        get.setParentTask(clusterService.localNode().getId(), thisTask.getId())__        client.get(get, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                try {_                    onGetFinishedTaskFromIndex(getResponse, listener)__                } catch (Exception e) {_                    listener.onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                if (ExceptionsHelper.unwrap(e, IndexNotFoundException.class) != null) {_                    _                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,_                        request.getTaskId()))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };send,a,link,get,request,to,the,tasks,index,looking,for,a,persisted,copy,of,the,task,completed,task,it,ll,only,be,found,only,if,the,task,s,result,was,stored,called,on,the,node,that,once,had,the,task,if,that,node,is,still,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,is,no,longer,part,of,the,cluster;void,get,finished,task,from,index,task,this,task,get,task,request,request,action,listener,get,task,response,listener,get,request,get,new,get,request,task,results,service,task,results,service,request,get,task,id,to,string,get,set,parent,task,cluster,service,local,node,get,id,this,task,get,id,client,get,get,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,try,on,get,finished,task,from,index,get,response,listener,catch,exception,e,listener,on,failure,e,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,index,not,found,exception,class,null,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,e,request,get,task,id,else,listener,on,failure,e
TransportGetTaskAction -> void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1543415307;Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the_task's result was stored. Called on the node that once had the task if that node is still part of the cluster or on the_coordinating node if the node is no longer part of the cluster.;void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        GetRequest get = new GetRequest(TaskResultsService.TASK_INDEX, TaskResultsService.TASK_TYPE,_                request.getTaskId().toString())__        get.setParentTask(clusterService.localNode().getId(), thisTask.getId())___        client.get(get, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                try {_                    onGetFinishedTaskFromIndex(getResponse, listener)__                } catch (Exception e) {_                    listener.onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                if (ExceptionsHelper.unwrap(e, IndexNotFoundException.class) != null) {_                    _                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,_                        request.getTaskId()))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };send,a,link,get,request,to,the,tasks,index,looking,for,a,persisted,copy,of,the,task,completed,task,it,ll,only,be,found,only,if,the,task,s,result,was,stored,called,on,the,node,that,once,had,the,task,if,that,node,is,still,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,is,no,longer,part,of,the,cluster;void,get,finished,task,from,index,task,this,task,get,task,request,request,action,listener,get,task,response,listener,get,request,get,new,get,request,task,results,service,task,results,service,request,get,task,id,to,string,get,set,parent,task,cluster,service,local,node,get,id,this,task,get,id,client,get,get,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,try,on,get,finished,task,from,index,get,response,listener,catch,exception,e,listener,on,failure,e,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,index,not,found,exception,class,null,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,e,request,get,task,id,else,listener,on,failure,e
TransportGetTaskAction -> void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1544632755;Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the_task's result was stored. Called on the node that once had the task if that node is still part of the cluster or on the_coordinating node if the node is no longer part of the cluster.;void getFinishedTaskFromIndex(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        GetRequest get = new GetRequest(TaskResultsService.TASK_INDEX, TaskResultsService.TASK_TYPE,_                request.getTaskId().toString())__        get.setParentTask(clusterService.localNode().getId(), thisTask.getId())___        client.get(get, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                try {_                    onGetFinishedTaskFromIndex(getResponse, listener)__                } catch (Exception e) {_                    listener.onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                if (ExceptionsHelper.unwrap(e, IndexNotFoundException.class) != null) {_                    _                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,_                        request.getTaskId()))__                } else {_                    listener.onFailure(e)__                }_            }_        })__    };send,a,link,get,request,to,the,tasks,index,looking,for,a,persisted,copy,of,the,task,completed,task,it,ll,only,be,found,only,if,the,task,s,result,was,stored,called,on,the,node,that,once,had,the,task,if,that,node,is,still,part,of,the,cluster,or,on,the,coordinating,node,if,the,node,is,no,longer,part,of,the,cluster;void,get,finished,task,from,index,task,this,task,get,task,request,request,action,listener,get,task,response,listener,get,request,get,new,get,request,task,results,service,task,results,service,request,get,task,id,to,string,get,set,parent,task,cluster,service,local,node,get,id,this,task,get,id,client,get,get,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,try,on,get,finished,task,from,index,get,response,listener,catch,exception,e,listener,on,failure,e,override,public,void,on,failure,exception,e,if,exceptions,helper,unwrap,e,index,not,found,exception,class,null,listener,on,failure,new,resource,not,found,exception,task,isn,t,running,and,hasn,t,stored,its,results,e,request,get,task,id,else,listener,on,failure,e
TransportGetTaskAction -> void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1524684173;Executed on the node that should be running the task to find and return the running task. Falls back to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} if the task isn't still running.;void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        Task runningTask = taskManager.getTask(request.getTaskId().getId())__        if (runningTask == null) {_            _            getFinishedTaskFromIndex(thisTask, request, listener)__        } else {_            if (request.getWaitForCompletion()) {_                _                threadPool.generic().execute(new AbstractRunnable() {_                    @Override_                    protected void doRun() throws Exception {_                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()))__                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener)__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } else {_                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true)__                listener.onResponse(new GetTaskResponse(new TaskResult(false, info)))__            }_        }_    };executed,on,the,node,that,should,be,running,the,task,to,find,and,return,the,running,task,falls,back,to,link,get,finished,task,from,index,task,get,task,request,action,listener,if,the,task,isn,t,still,running;void,get,running,task,from,node,task,this,task,get,task,request,request,action,listener,get,task,response,listener,task,running,task,task,manager,get,task,request,get,task,id,get,id,if,running,task,null,get,finished,task,from,index,this,task,request,listener,else,if,request,get,wait,for,completion,thread,pool,generic,execute,new,abstract,runnable,override,protected,void,do,run,throws,exception,task,manager,wait,for,task,completion,running,task,wait,for,completion,timeout,request,get,timeout,waited,for,completion,this,task,request,running,task,task,info,cluster,service,local,node,get,id,true,listener,override,public,void,on,failure,exception,e,listener,on,failure,e,else,task,info,info,running,task,task,info,cluster,service,local,node,get,id,true,listener,on,response,new,get,task,response,new,task,result,false,info
TransportGetTaskAction -> void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529487105;Executed on the node that should be running the task to find and return the running task. Falls back to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} if the task isn't still running.;void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        Task runningTask = taskManager.getTask(request.getTaskId().getId())__        if (runningTask == null) {_            _            getFinishedTaskFromIndex(thisTask, request, listener)__        } else {_            if (request.getWaitForCompletion()) {_                _                threadPool.generic().execute(new AbstractRunnable() {_                    @Override_                    protected void doRun() throws Exception {_                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()))__                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener)__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } else {_                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true)__                listener.onResponse(new GetTaskResponse(new TaskResult(false, info)))__            }_        }_    };executed,on,the,node,that,should,be,running,the,task,to,find,and,return,the,running,task,falls,back,to,link,get,finished,task,from,index,task,get,task,request,action,listener,if,the,task,isn,t,still,running;void,get,running,task,from,node,task,this,task,get,task,request,request,action,listener,get,task,response,listener,task,running,task,task,manager,get,task,request,get,task,id,get,id,if,running,task,null,get,finished,task,from,index,this,task,request,listener,else,if,request,get,wait,for,completion,thread,pool,generic,execute,new,abstract,runnable,override,protected,void,do,run,throws,exception,task,manager,wait,for,task,completion,running,task,wait,for,completion,timeout,request,get,timeout,waited,for,completion,this,task,request,running,task,task,info,cluster,service,local,node,get,id,true,listener,override,public,void,on,failure,exception,e,listener,on,failure,e,else,task,info,info,running,task,task,info,cluster,service,local,node,get,id,true,listener,on,response,new,get,task,response,new,task,result,false,info
TransportGetTaskAction -> void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529658035;Executed on the node that should be running the task to find and return the running task. Falls back to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} if the task isn't still running.;void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        Task runningTask = taskManager.getTask(request.getTaskId().getId())__        if (runningTask == null) {_            _            getFinishedTaskFromIndex(thisTask, request, listener)__        } else {_            if (request.getWaitForCompletion()) {_                _                threadPool.generic().execute(new AbstractRunnable() {_                    @Override_                    protected void doRun() throws Exception {_                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()))__                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener)__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } else {_                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true)__                listener.onResponse(new GetTaskResponse(new TaskResult(false, info)))__            }_        }_    };executed,on,the,node,that,should,be,running,the,task,to,find,and,return,the,running,task,falls,back,to,link,get,finished,task,from,index,task,get,task,request,action,listener,if,the,task,isn,t,still,running;void,get,running,task,from,node,task,this,task,get,task,request,request,action,listener,get,task,response,listener,task,running,task,task,manager,get,task,request,get,task,id,get,id,if,running,task,null,get,finished,task,from,index,this,task,request,listener,else,if,request,get,wait,for,completion,thread,pool,generic,execute,new,abstract,runnable,override,protected,void,do,run,throws,exception,task,manager,wait,for,task,completion,running,task,wait,for,completion,timeout,request,get,timeout,waited,for,completion,this,task,request,running,task,task,info,cluster,service,local,node,get,id,true,listener,override,public,void,on,failure,exception,e,listener,on,failure,e,else,task,info,info,running,task,task,info,cluster,service,local,node,get,id,true,listener,on,response,new,get,task,response,new,task,result,false,info
TransportGetTaskAction -> void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1529916082;Executed on the node that should be running the task to find and return the running task. Falls back to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} if the task isn't still running.;void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        Task runningTask = taskManager.getTask(request.getTaskId().getId())__        if (runningTask == null) {_            _            getFinishedTaskFromIndex(thisTask, request, listener)__        } else {_            if (request.getWaitForCompletion()) {_                _                threadPool.generic().execute(new AbstractRunnable() {_                    @Override_                    protected void doRun() throws Exception {_                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()))__                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener)__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } else {_                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true)__                listener.onResponse(new GetTaskResponse(new TaskResult(false, info)))__            }_        }_    };executed,on,the,node,that,should,be,running,the,task,to,find,and,return,the,running,task,falls,back,to,link,get,finished,task,from,index,task,get,task,request,action,listener,if,the,task,isn,t,still,running;void,get,running,task,from,node,task,this,task,get,task,request,request,action,listener,get,task,response,listener,task,running,task,task,manager,get,task,request,get,task,id,get,id,if,running,task,null,get,finished,task,from,index,this,task,request,listener,else,if,request,get,wait,for,completion,thread,pool,generic,execute,new,abstract,runnable,override,protected,void,do,run,throws,exception,task,manager,wait,for,task,completion,running,task,wait,for,completion,timeout,request,get,timeout,waited,for,completion,this,task,request,running,task,task,info,cluster,service,local,node,get,id,true,listener,override,public,void,on,failure,exception,e,listener,on,failure,e,else,task,info,info,running,task,task,info,cluster,service,local,node,get,id,true,listener,on,response,new,get,task,response,new,task,result,false,info
TransportGetTaskAction -> void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1540583181;Executed on the node that should be running the task to find and return the running task. Falls back to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} if the task isn't still running.;void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        Task runningTask = taskManager.getTask(request.getTaskId().getId())__        if (runningTask == null) {_            _            getFinishedTaskFromIndex(thisTask, request, listener)__        } else {_            if (request.getWaitForCompletion()) {_                _                threadPool.generic().execute(new AbstractRunnable() {_                    @Override_                    protected void doRun() throws Exception {_                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()))__                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener)__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } else {_                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true)__                listener.onResponse(new GetTaskResponse(new TaskResult(false, info)))__            }_        }_    };executed,on,the,node,that,should,be,running,the,task,to,find,and,return,the,running,task,falls,back,to,link,get,finished,task,from,index,task,get,task,request,action,listener,if,the,task,isn,t,still,running;void,get,running,task,from,node,task,this,task,get,task,request,request,action,listener,get,task,response,listener,task,running,task,task,manager,get,task,request,get,task,id,get,id,if,running,task,null,get,finished,task,from,index,this,task,request,listener,else,if,request,get,wait,for,completion,thread,pool,generic,execute,new,abstract,runnable,override,protected,void,do,run,throws,exception,task,manager,wait,for,task,completion,running,task,wait,for,completion,timeout,request,get,timeout,waited,for,completion,this,task,request,running,task,task,info,cluster,service,local,node,get,id,true,listener,override,public,void,on,failure,exception,e,listener,on,failure,e,else,task,info,info,running,task,task,info,cluster,service,local,node,get,id,true,listener,on,response,new,get,task,response,new,task,result,false,info
TransportGetTaskAction -> void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1541419698;Executed on the node that should be running the task to find and return the running task. Falls back to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} if the task isn't still running.;void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        Task runningTask = taskManager.getTask(request.getTaskId().getId())__        if (runningTask == null) {_            _            getFinishedTaskFromIndex(thisTask, request, listener)__        } else {_            if (request.getWaitForCompletion()) {_                _                threadPool.generic().execute(new AbstractRunnable() {_                    @Override_                    protected void doRun() throws Exception {_                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()))__                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener)__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } else {_                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true)__                listener.onResponse(new GetTaskResponse(new TaskResult(false, info)))__            }_        }_    };executed,on,the,node,that,should,be,running,the,task,to,find,and,return,the,running,task,falls,back,to,link,get,finished,task,from,index,task,get,task,request,action,listener,if,the,task,isn,t,still,running;void,get,running,task,from,node,task,this,task,get,task,request,request,action,listener,get,task,response,listener,task,running,task,task,manager,get,task,request,get,task,id,get,id,if,running,task,null,get,finished,task,from,index,this,task,request,listener,else,if,request,get,wait,for,completion,thread,pool,generic,execute,new,abstract,runnable,override,protected,void,do,run,throws,exception,task,manager,wait,for,task,completion,running,task,wait,for,completion,timeout,request,get,timeout,waited,for,completion,this,task,request,running,task,task,info,cluster,service,local,node,get,id,true,listener,override,public,void,on,failure,exception,e,listener,on,failure,e,else,task,info,info,running,task,task,info,cluster,service,local,node,get,id,true,listener,on,response,new,get,task,response,new,task,result,false,info
TransportGetTaskAction -> void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1543415307;Executed on the node that should be running the task to find and return the running task. Falls back to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} if the task isn't still running.;void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        Task runningTask = taskManager.getTask(request.getTaskId().getId())__        if (runningTask == null) {_            _            getFinishedTaskFromIndex(thisTask, request, listener)__        } else {_            if (request.getWaitForCompletion()) {_                _                threadPool.generic().execute(new AbstractRunnable() {_                    @Override_                    protected void doRun() throws Exception {_                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()))__                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener)__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } else {_                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true)__                listener.onResponse(new GetTaskResponse(new TaskResult(false, info)))__            }_        }_    };executed,on,the,node,that,should,be,running,the,task,to,find,and,return,the,running,task,falls,back,to,link,get,finished,task,from,index,task,get,task,request,action,listener,if,the,task,isn,t,still,running;void,get,running,task,from,node,task,this,task,get,task,request,request,action,listener,get,task,response,listener,task,running,task,task,manager,get,task,request,get,task,id,get,id,if,running,task,null,get,finished,task,from,index,this,task,request,listener,else,if,request,get,wait,for,completion,thread,pool,generic,execute,new,abstract,runnable,override,protected,void,do,run,throws,exception,task,manager,wait,for,task,completion,running,task,wait,for,completion,timeout,request,get,timeout,waited,for,completion,this,task,request,running,task,task,info,cluster,service,local,node,get,id,true,listener,override,public,void,on,failure,exception,e,listener,on,failure,e,else,task,info,info,running,task,task,info,cluster,service,local,node,get,id,true,listener,on,response,new,get,task,response,new,task,result,false,info
TransportGetTaskAction -> void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener);1544632755;Executed on the node that should be running the task to find and return the running task. Falls back to_{@link #getFinishedTaskFromIndex(Task, GetTaskRequest, ActionListener)} if the task isn't still running.;void getRunningTaskFromNode(Task thisTask, GetTaskRequest request, ActionListener<GetTaskResponse> listener) {_        Task runningTask = taskManager.getTask(request.getTaskId().getId())__        if (runningTask == null) {_            _            getFinishedTaskFromIndex(thisTask, request, listener)__        } else {_            if (request.getWaitForCompletion()) {_                _                threadPool.generic().execute(new AbstractRunnable() {_                    @Override_                    protected void doRun() throws Exception {_                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()))__                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener)__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } else {_                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true)__                listener.onResponse(new GetTaskResponse(new TaskResult(false, info)))__            }_        }_    };executed,on,the,node,that,should,be,running,the,task,to,find,and,return,the,running,task,falls,back,to,link,get,finished,task,from,index,task,get,task,request,action,listener,if,the,task,isn,t,still,running;void,get,running,task,from,node,task,this,task,get,task,request,request,action,listener,get,task,response,listener,task,running,task,task,manager,get,task,request,get,task,id,get,id,if,running,task,null,get,finished,task,from,index,this,task,request,listener,else,if,request,get,wait,for,completion,thread,pool,generic,execute,new,abstract,runnable,override,protected,void,do,run,throws,exception,task,manager,wait,for,task,completion,running,task,wait,for,completion,timeout,request,get,timeout,waited,for,completion,this,task,request,running,task,task,info,cluster,service,local,node,get,id,true,listener,override,public,void,on,failure,exception,e,listener,on,failure,e,else,task,info,info,running,task,task,info,cluster,service,local,node,get,id,true,listener,on,response,new,get,task,response,new,task,result,false,info
