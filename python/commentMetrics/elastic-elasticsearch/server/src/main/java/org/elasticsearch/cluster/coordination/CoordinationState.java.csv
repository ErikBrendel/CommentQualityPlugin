commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long getCurrentTerm() {     return persistedState.getCurrentTerm(). }
false;public;0;3;;public ClusterState getLastAcceptedState() {     return persistedState.getLastAcceptedState(). }
false;public;0;3;;public long getLastAcceptedTerm() {     return getLastAcceptedState().term(). }
false;public;0;3;;public long getLastAcceptedVersion() {     return getLastAcceptedState().version(). }
false;private;0;3;;private long getLastAcceptedVersionOrMetaDataVersion() {     return getLastAcceptedState().getVersionOrMetaDataVersion(). }
false;public;0;3;;public VotingConfiguration getLastCommittedConfiguration() {     return getLastAcceptedState().getLastCommittedConfiguration(). }
false;public;0;3;;public VotingConfiguration getLastAcceptedConfiguration() {     return getLastAcceptedState().getLastAcceptedConfiguration(). }
false;public;0;3;;public long getLastPublishedVersion() {     return lastPublishedVersion. }
false;public;0;3;;public boolean electionWon() {     return electionWon. }
false;public;1;3;;public boolean isElectionQuorum(VoteCollection votes) {     return isElectionQuorum(votes, getLastAcceptedState()). }
false;static;2;4;;static boolean isElectionQuorum(VoteCollection votes, ClusterState lastAcceptedState) {     return votes.isQuorum(lastAcceptedState.getLastCommittedConfiguration()) && votes.isQuorum(lastAcceptedState.getLastAcceptedConfiguration()). }
false;public;1;3;;public boolean isPublishQuorum(VoteCollection votes) {     return votes.isQuorum(getLastCommittedConfiguration()) && votes.isQuorum(lastPublishedConfiguration). }
false;public;1;3;;public boolean containsJoinVoteFor(DiscoveryNode node) {     return joinVotes.containsVoteFor(node). }
false;public;1;3;;public boolean joinVotesHaveQuorumFor(VotingConfiguration votingConfiguration) {     return joinVotes.isQuorum(votingConfiguration). }
true;public;1;24;/**  * Used to bootstrap a cluster by injecting the initial state and configuration.  *  * @param initialState The initial state to use. Must have term 0, version equal to the last-accepted version, and non-empty  *                     configurations.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ ;/**  * Used to bootstrap a cluster by injecting the initial state and configuration.  *  * @param initialState The initial state to use. Must have term 0, version equal to the last-accepted version, and non-empty  *                     configurations.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ public void setInitialState(ClusterState initialState) {     final VotingConfiguration lastAcceptedConfiguration = getLastAcceptedConfiguration().     if (lastAcceptedConfiguration.isEmpty() == false) {         logger.debug("setInitialState: rejecting since last-accepted configuration is nonempty: {}", lastAcceptedConfiguration).         throw new CoordinationStateRejectedException("initial state already set: last-accepted configuration now " + lastAcceptedConfiguration).     }     assert getLastAcceptedTerm() == 0 : getLastAcceptedTerm().     assert getLastCommittedConfiguration().isEmpty() : getLastCommittedConfiguration().     assert lastPublishedVersion == 0 : lastPublishedVersion.     assert lastPublishedConfiguration.isEmpty() : lastPublishedConfiguration.     assert electionWon == false.     assert joinVotes.isEmpty() : joinVotes.     assert publishVotes.isEmpty() : publishVotes.     assert initialState.term() == 0 : initialState + " should have term 0".     assert initialState.version() == getLastAcceptedVersion() : initialState + " should have version " + getLastAcceptedVersion().     assert initialState.getLastAcceptedConfiguration().isEmpty() == false.     assert initialState.getLastCommittedConfiguration().isEmpty() == false.     persistedState.setLastAcceptedState(initialState). }
true;public;1;34;/**  * May be safely called at any time to move this instance to a new term.  *  * @param startJoinRequest The startJoinRequest, specifying the node requesting the join.  * @return A Join that should be sent to the target node of the join.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ ;/**  * May be safely called at any time to move this instance to a new term.  *  * @param startJoinRequest The startJoinRequest, specifying the node requesting the join.  * @return A Join that should be sent to the target node of the join.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ public Join handleStartJoin(StartJoinRequest startJoinRequest) {     if (startJoinRequest.getTerm() <= getCurrentTerm()) {         logger.debug("handleStartJoin: ignoring [{}] as term provided is not greater than current term [{}]", startJoinRequest, getCurrentTerm()).         throw new CoordinationStateRejectedException("incoming term " + startJoinRequest.getTerm() + " not greater than current term " + getCurrentTerm()).     }     logger.debug("handleStartJoin: leaving term [{}] due to {}", getCurrentTerm(), startJoinRequest).     if (joinVotes.isEmpty() == false) {         final String reason.         if (electionWon == false) {             reason = "failed election".         } else if (startJoinRequest.getSourceNode().equals(localNode)) {             reason = "bumping term".         } else {             reason = "standing down as leader".         }         logger.debug("handleStartJoin: discarding {}: {}", joinVotes, reason).     }     persistedState.setCurrentTerm(startJoinRequest.getTerm()).     assert getCurrentTerm() == startJoinRequest.getTerm().     lastPublishedVersion = 0.     lastPublishedConfiguration = getLastAcceptedConfiguration().     startedJoinSinceLastReboot = true.     electionWon = false.     joinVotes = new VoteCollection().     publishVotes = new VoteCollection().     return new Join(localNode, startJoinRequest.getSourceNode(), getCurrentTerm(), getLastAcceptedTerm(), getLastAcceptedVersionOrMetaDataVersion()). }
true;public;1;54;/**  * May be called on receipt of a Join.  *  * @param join The Join received.  * @return true iff this instance does not already have a join vote from the given source node for this term  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ ;/**  * May be called on receipt of a Join.  *  * @param join The Join received.  * @return true iff this instance does not already have a join vote from the given source node for this term  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ public boolean handleJoin(Join join) {     assert join.targetMatches(localNode) : "handling join " + join + " for the wrong node " + localNode.     if (join.getTerm() != getCurrentTerm()) {         logger.debug("handleJoin: ignored join due to term mismatch (expected: [{}], actual: [{}])", getCurrentTerm(), join.getTerm()).         throw new CoordinationStateRejectedException("incoming term " + join.getTerm() + " does not match current term " + getCurrentTerm()).     }     if (startedJoinSinceLastReboot == false) {         logger.debug("handleJoin: ignored join as term was not incremented yet after reboot").         throw new CoordinationStateRejectedException("ignored join as term has not been incremented yet after reboot").     }     final long lastAcceptedTerm = getLastAcceptedTerm().     if (join.getLastAcceptedTerm() > lastAcceptedTerm) {         logger.debug("handleJoin: ignored join as joiner has a better last accepted term (expected: <=[{}], actual: [{}])", lastAcceptedTerm, join.getLastAcceptedTerm()).         throw new CoordinationStateRejectedException("incoming last accepted term " + join.getLastAcceptedTerm() + " of join higher than current last accepted term " + lastAcceptedTerm).     }     if (join.getLastAcceptedTerm() == lastAcceptedTerm && join.getLastAcceptedVersion() > getLastAcceptedVersionOrMetaDataVersion()) {         logger.debug("handleJoin: ignored join as joiner has a better last accepted version (expected: <=[{}], actual: [{}]) in term {}", getLastAcceptedVersionOrMetaDataVersion(), join.getLastAcceptedVersion(), lastAcceptedTerm).         throw new CoordinationStateRejectedException("incoming last accepted version " + join.getLastAcceptedVersion() + " of join higher than current last accepted version " + getLastAcceptedVersionOrMetaDataVersion() + " in term " + lastAcceptedTerm).     }     if (getLastAcceptedConfiguration().isEmpty()) {         // We do not check for an election won on setting the initial configuration, so it would be possible to end up in a state where         // we have enough join votes to have won the election immediately on setting the initial configuration. It'd be quite         // complicated to restore all the appropriate invariants when setting the initial configuration (it's not just electionWon)         // so instead we just reject join votes received prior to receiving the initial configuration.         logger.debug("handleJoin: rejecting join since this node has not received its initial configuration yet").         throw new CoordinationStateRejectedException("rejecting join since this node has not received its initial configuration yet").     }     boolean added = joinVotes.addVote(join.getSourceNode()).     boolean prevElectionWon = electionWon.     electionWon = isElectionQuorum(joinVotes).     // we cannot go from won to not won     assert !prevElectionWon || electionWon.     logger.debug("handleJoin: added join {} from [{}] for election, electionWon={} lastAcceptedTerm={} lastAcceptedVersion={}", join, join.getSourceNode(), electionWon, lastAcceptedTerm, getLastAcceptedVersion()).     if (electionWon && prevElectionWon == false) {         logger.debug("handleJoin: election won in term [{}] with {}", getCurrentTerm(), joinVotes).         lastPublishedVersion = getLastAcceptedVersion().     }     return added. }
true;public;1;45;/**  * May be called in order to prepare publication of the given cluster state  *  * @param clusterState The cluster state to publish.  * @return A PublishRequest to publish the given cluster state  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ ;/**  * May be called in order to prepare publication of the given cluster state  *  * @param clusterState The cluster state to publish.  * @return A PublishRequest to publish the given cluster state  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ public PublishRequest handleClientValue(ClusterState clusterState) {     if (electionWon == false) {         logger.debug("handleClientValue: ignored request as election not won").         throw new CoordinationStateRejectedException("election not won").     }     if (lastPublishedVersion != getLastAcceptedVersion()) {         logger.debug("handleClientValue: cannot start publishing next value before accepting previous one").         throw new CoordinationStateRejectedException("cannot start publishing next value before accepting previous one").     }     if (clusterState.term() != getCurrentTerm()) {         logger.debug("handleClientValue: ignored request due to term mismatch " + "(expected: [term {} version >{}], actual: [term {} version {}])", getCurrentTerm(), lastPublishedVersion, clusterState.term(), clusterState.version()).         throw new CoordinationStateRejectedException("incoming term " + clusterState.term() + " does not match current term " + getCurrentTerm()).     }     if (clusterState.version() <= lastPublishedVersion) {         logger.debug("handleClientValue: ignored request due to version mismatch " + "(expected: [term {} version >{}], actual: [term {} version {}])", getCurrentTerm(), lastPublishedVersion, clusterState.term(), clusterState.version()).         throw new CoordinationStateRejectedException("incoming cluster state version " + clusterState.version() + " lower or equal to last published version " + lastPublishedVersion).     }     if (clusterState.getLastAcceptedConfiguration().equals(getLastAcceptedConfiguration()) == false && getLastCommittedConfiguration().equals(getLastAcceptedConfiguration()) == false) {         logger.debug("handleClientValue: only allow reconfiguration while not already reconfiguring").         throw new CoordinationStateRejectedException("only allow reconfiguration while not already reconfiguring").     }     if (joinVotesHaveQuorumFor(clusterState.getLastAcceptedConfiguration()) == false) {         logger.debug("handleClientValue: only allow reconfiguration if joinVotes have quorum for new config").         throw new CoordinationStateRejectedException("only allow reconfiguration if joinVotes have quorum for new config").     }     assert clusterState.getLastCommittedConfiguration().equals(getLastCommittedConfiguration()) : "last committed configuration should not change".     lastPublishedVersion = clusterState.version().     lastPublishedConfiguration = clusterState.getLastAcceptedConfiguration().     publishVotes = new VoteCollection().     logger.trace("handleClientValue: processing request for version [{}] and term [{}]", lastPublishedVersion, getCurrentTerm()).     return new PublishRequest(clusterState). }
true;public;1;28;/**  * May be called on receipt of a PublishRequest.  *  * @param publishRequest The publish request received.  * @return A PublishResponse which can be sent back to the sender of the PublishRequest.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ ;/**  * May be called on receipt of a PublishRequest.  *  * @param publishRequest The publish request received.  * @return A PublishResponse which can be sent back to the sender of the PublishRequest.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ public PublishResponse handlePublishRequest(PublishRequest publishRequest) {     final ClusterState clusterState = publishRequest.getAcceptedState().     if (clusterState.term() != getCurrentTerm()) {         logger.debug("handlePublishRequest: ignored publish request due to term mismatch (expected: [{}], actual: [{}])", getCurrentTerm(), clusterState.term()).         throw new CoordinationStateRejectedException("incoming term " + clusterState.term() + " does not match current term " + getCurrentTerm()).     }     if (clusterState.term() == getLastAcceptedTerm() && clusterState.version() <= getLastAcceptedVersion()) {         if (clusterState.term() == ZEN1_BWC_TERM && clusterState.nodes().getMasterNode().equals(getLastAcceptedState().nodes().getMasterNode()) == false) {             logger.debug("handling publish request in compatibility mode despite version mismatch (expected: >[{}], actual: [{}])", getLastAcceptedVersion(), clusterState.version()).         } else {             logger.debug("handlePublishRequest: ignored publish request due to version mismatch (expected: >[{}], actual: [{}])", getLastAcceptedVersion(), clusterState.version()).             throw new CoordinationStateRejectedException("incoming version " + clusterState.version() + " lower or equal to current version " + getLastAcceptedVersion()).         }     }     logger.trace("handlePublishRequest: accepting publish request for version [{}] and term [{}]", clusterState.version(), clusterState.term()).     persistedState.setLastAcceptedState(clusterState).     assert getLastAcceptedState() == clusterState.     return new PublishResponse(clusterState.term(), clusterState.version()). }
true;public;2;29;/**  * May be called on receipt of a PublishResponse from the given sourceNode.  *  * @param sourceNode      The sender of the PublishResponse received.  * @param publishResponse The PublishResponse received.  * @return An optional ApplyCommitRequest which, if present, may be broadcast to all peers, indicating that this publication  * has been accepted at a quorum of peers and is therefore committed.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ ;/**  * May be called on receipt of a PublishResponse from the given sourceNode.  *  * @param sourceNode      The sender of the PublishResponse received.  * @param publishResponse The PublishResponse received.  * @return An optional ApplyCommitRequest which, if present, may be broadcast to all peers, indicating that this publication  * has been accepted at a quorum of peers and is therefore committed.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ public Optional<ApplyCommitRequest> handlePublishResponse(DiscoveryNode sourceNode, PublishResponse publishResponse) {     if (electionWon == false) {         logger.debug("handlePublishResponse: ignored response as election not won").         throw new CoordinationStateRejectedException("election not won").     }     if (publishResponse.getTerm() != getCurrentTerm()) {         logger.debug("handlePublishResponse: ignored publish response due to term mismatch (expected: [{}], actual: [{}])", getCurrentTerm(), publishResponse.getTerm()).         throw new CoordinationStateRejectedException("incoming term " + publishResponse.getTerm() + " does not match current term " + getCurrentTerm()).     }     if (publishResponse.getVersion() != lastPublishedVersion) {         logger.debug("handlePublishResponse: ignored publish response due to version mismatch (expected: [{}], actual: [{}])", lastPublishedVersion, publishResponse.getVersion()).         throw new CoordinationStateRejectedException("incoming version " + publishResponse.getVersion() + " does not match current version " + lastPublishedVersion).     }     logger.trace("handlePublishResponse: accepted publish response for version [{}] and term [{}] from [{}]", publishResponse.getVersion(), publishResponse.getTerm(), sourceNode).     publishVotes.addVote(sourceNode).     if (isPublishQuorum(publishVotes)) {         logger.trace("handlePublishResponse: value committed for version [{}] and term [{}]", publishResponse.getVersion(), publishResponse.getTerm()).         return Optional.of(new ApplyCommitRequest(localNode, publishResponse.getTerm(), publishResponse.getVersion())).     }     return Optional.empty(). }
true;public;1;28;/**  * May be called on receipt of an ApplyCommitRequest. Updates the committed configuration accordingly.  *  * @param applyCommit The ApplyCommitRequest received.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ ;/**  * May be called on receipt of an ApplyCommitRequest. Updates the committed configuration accordingly.  *  * @param applyCommit The ApplyCommitRequest received.  * @throws CoordinationStateRejectedException if the arguments were incompatible with the current state of this object.  */ public void handleCommit(ApplyCommitRequest applyCommit) {     if (applyCommit.getTerm() != getCurrentTerm()) {         logger.debug("handleCommit: ignored commit request due to term mismatch " + "(expected: [term {} version {}], actual: [term {} version {}])", getLastAcceptedTerm(), getLastAcceptedVersion(), applyCommit.getTerm(), applyCommit.getVersion()).         throw new CoordinationStateRejectedException("incoming term " + applyCommit.getTerm() + " does not match current term " + getCurrentTerm()).     }     if (applyCommit.getTerm() != getLastAcceptedTerm()) {         logger.debug("handleCommit: ignored commit request due to term mismatch " + "(expected: [term {} version {}], actual: [term {} version {}])", getLastAcceptedTerm(), getLastAcceptedVersion(), applyCommit.getTerm(), applyCommit.getVersion()).         throw new CoordinationStateRejectedException("incoming term " + applyCommit.getTerm() + " does not match last accepted term " + getLastAcceptedTerm()).     }     if (applyCommit.getVersion() != getLastAcceptedVersion()) {         logger.debug("handleCommit: ignored commit request due to version mismatch (term {}, expected: [{}], actual: [{}])", getLastAcceptedTerm(), getLastAcceptedVersion(), applyCommit.getVersion()).         throw new CoordinationStateRejectedException("incoming version " + applyCommit.getVersion() + " does not match current version " + getLastAcceptedVersion()).     }     logger.trace("handleCommit: applying commit request for term [{}] and version [{}]", applyCommit.getTerm(), applyCommit.getVersion()).     persistedState.markLastAcceptedStateAsCommitted().     assert getLastCommittedConfiguration().equals(getLastAcceptedConfiguration()). }
false;public;0;11;;public void invariant() {     assert getLastAcceptedTerm() <= getCurrentTerm().     assert electionWon() == isElectionQuorum(joinVotes).     if (electionWon()) {         assert getLastPublishedVersion() >= getLastAcceptedVersion().     } else {         assert getLastPublishedVersion() == 0L.     }     assert electionWon() == false || startedJoinSinceLastReboot.     assert publishVotes.isEmpty() || electionWon(). }
true;;0;1;/**  * Returns the current term  */ ;/**  * Returns the current term  */ long getCurrentTerm().
true;;0;1;/**  * Returns the last accepted cluster state  */ ;/**  * Returns the last accepted cluster state  */ ClusterState getLastAcceptedState().
true;;1;1;/**  * Sets a new current term.  * After a successful call to this method, {@link #getCurrentTerm()} should return the last term that was set.  * The value returned by {@link #getLastAcceptedState()} should not be influenced by calls to this method.  */ ;/**  * Sets a new current term.  * After a successful call to this method, {@link #getCurrentTerm()} should return the last term that was set.  * The value returned by {@link #getLastAcceptedState()} should not be influenced by calls to this method.  */ void setCurrentTerm(long currentTerm).
true;;1;1;/**  * Sets a new last accepted cluster state.  * After a successful call to this method, {@link #getLastAcceptedState()} should return the last cluster state that was set.  * The value returned by {@link #getCurrentTerm()} should not be influenced by calls to this method.  */ ;/**  * Sets a new last accepted cluster state.  * After a successful call to this method, {@link #getLastAcceptedState()} should return the last cluster state that was set.  * The value returned by {@link #getCurrentTerm()} should not be influenced by calls to this method.  */ void setLastAcceptedState(ClusterState clusterState).
true;default;0;25;/**  * Marks the last accepted cluster state as committed.  * After a successful call to this method, {@link #getLastAcceptedState()} should return the last cluster state that was set,  * with the last committed configuration now corresponding to the last accepted configuration, and the cluster uuid, if set,  * marked as committed.  */ ;/**  * Marks the last accepted cluster state as committed.  * After a successful call to this method, {@link #getLastAcceptedState()} should return the last cluster state that was set,  * with the last committed configuration now corresponding to the last accepted configuration, and the cluster uuid, if set,  * marked as committed.  */ default void markLastAcceptedStateAsCommitted() {     final ClusterState lastAcceptedState = getLastAcceptedState().     MetaData.Builder metaDataBuilder = null.     if (lastAcceptedState.getLastAcceptedConfiguration().equals(lastAcceptedState.getLastCommittedConfiguration()) == false) {         final CoordinationMetaData coordinationMetaData = CoordinationMetaData.builder(lastAcceptedState.coordinationMetaData()).lastCommittedConfiguration(lastAcceptedState.getLastAcceptedConfiguration()).build().         metaDataBuilder = MetaData.builder(lastAcceptedState.metaData()).         metaDataBuilder.coordinationMetaData(coordinationMetaData).     }     // if we receive a commit from a Zen1 master that has not recovered its state yet, the cluster uuid might not been known yet.     assert lastAcceptedState.metaData().clusterUUID().equals(MetaData.UNKNOWN_CLUSTER_UUID) == false || lastAcceptedState.term() == ZEN1_BWC_TERM : "received cluster state with empty cluster uuid but not Zen1 BWC term: " + lastAcceptedState.     if (lastAcceptedState.metaData().clusterUUID().equals(MetaData.UNKNOWN_CLUSTER_UUID) == false && lastAcceptedState.metaData().clusterUUIDCommitted() == false) {         if (metaDataBuilder == null) {             metaDataBuilder = MetaData.builder(lastAcceptedState.metaData()).         }         metaDataBuilder.clusterUUIDCommitted(true).     }     if (metaDataBuilder != null) {         setLastAcceptedState(ClusterState.builder(lastAcceptedState).metaData(metaDataBuilder).build()).     } }
false;public;1;3;;public boolean addVote(DiscoveryNode sourceNode) {     return nodes.put(sourceNode.getId(), sourceNode) == null. }
false;public;1;3;;public boolean isQuorum(VotingConfiguration configuration) {     return configuration.hasQuorum(nodes.keySet()). }
false;public;1;3;;public boolean containsVoteFor(DiscoveryNode node) {     return nodes.containsKey(node.getId()). }
false;public;0;3;;public boolean isEmpty() {     return nodes.isEmpty(). }
false;public;0;3;;public Collection<DiscoveryNode> nodes() {     return Collections.unmodifiableCollection(nodes.values()). }
false;public;0;4;;@Override public String toString() {     return "VoteCollection{" + String.join(",", nodes.keySet()) + "}". }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     VoteCollection that = (VoteCollection) o.     return nodes.equals(that.nodes). }
false;public;0;4;;@Override public int hashCode() {     return nodes.hashCode(). }
