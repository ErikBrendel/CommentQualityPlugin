commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;16;;@Override protected <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {     remoteClusterService.ensureConnected(clusterAlias, ActionListener.wrap(res -> {         Transport.Connection connection.         if (request instanceof RemoteClusterAwareRequest) {             DiscoveryNode preferredTargetNode = ((RemoteClusterAwareRequest) request).getPreferredTargetNode().             connection = remoteClusterService.getConnection(preferredTargetNode, clusterAlias).         } else {             connection = remoteClusterService.getConnection(clusterAlias).         }         service.sendRequest(connection, action.name(), request, TransportRequestOptions.EMPTY, new ActionListenerResponseHandler<>(listener, action.getResponseReader())).     }, listener::onFailure)). }
false;public;0;4;;@Override public void close() { // do nothing }
false;public;1;4;;@Override public Client getRemoteClusterClient(String clusterAlias) {     return remoteClusterService.getRemoteClusterClient(threadPool(), clusterAlias). }
