commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "document_get_action". }
false;protected;1;4;;@Override protected RestStatus getStatus(final GetResponse response) {     return response.isExists() ? OK : NOT_FOUND. }
false;public;2;38;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     GetRequest getRequest.     if (request.hasParam("type")) {         deprecationLogger.deprecatedAndMaybeLog("get_with_types", TYPES_DEPRECATION_MESSAGE).         getRequest = new GetRequest(request.param("index"), request.param("type"), request.param("id")).     } else {         getRequest = new GetRequest(request.param("index"), request.param("id")).     }     getRequest.refresh(request.paramAsBoolean("refresh", getRequest.refresh())).     getRequest.routing(request.param("routing")).     getRequest.preference(request.param("preference")).     getRequest.realtime(request.paramAsBoolean("realtime", getRequest.realtime())).     if (request.param("fields") != null) {         throw new IllegalArgumentException("the parameter [fields] is no longer supported, " + "please use [stored_fields] to retrieve stored fields or [_source] to load the field from _source").     }     final String fieldsParam = request.param("stored_fields").     if (fieldsParam != null) {         final String[] fields = Strings.splitStringByCommaToArray(fieldsParam).         if (fields != null) {             getRequest.storedFields(fields).         }     }     getRequest.version(RestActions.parseVersion(request)).     getRequest.versionType(VersionType.fromString(request.param("version_type"), getRequest.versionType())).     getRequest.fetchSourceContext(FetchSourceContext.parseFromRestRequest(request)).     return channel -> client.get(getRequest, new RestToXContentListener<GetResponse>(channel) {          @Override         protected RestStatus getStatus(final GetResponse response) {             return response.isExists() ? OK : NOT_FOUND.         }     }). }
