commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "put_mapping_action". }
false;public;2;27;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     final boolean includeTypeName = request.paramAsBoolean(INCLUDE_TYPE_NAME_PARAMETER, DEFAULT_INCLUDE_TYPE_NAME_POLICY).     if (request.hasParam(INCLUDE_TYPE_NAME_PARAMETER)) {         deprecationLogger.deprecatedAndMaybeLog("put_mapping_with_types", TYPES_DEPRECATION_MESSAGE).     }     PutMappingRequest putMappingRequest = putMappingRequest(Strings.splitStringByCommaToArray(request.param("index"))).     final String type = request.param("type").     putMappingRequest.type(includeTypeName ? type : MapperService.SINGLE_MAPPING_NAME).     Map<String, Object> sourceAsMap = XContentHelper.convertToMap(request.requiredContent(), false, request.getXContentType()).v2().     if (includeTypeName == false && (type != null || isMappingSourceTyped(MapperService.SINGLE_MAPPING_NAME, sourceAsMap))) {         throw new IllegalArgumentException("Types cannot be provided in put mapping requests, unless " + "the include_type_name parameter is set to true.").     }     putMappingRequest.source(sourceAsMap).     putMappingRequest.timeout(request.paramAsTime("timeout", putMappingRequest.timeout())).     putMappingRequest.masterNodeTimeout(request.paramAsTime("master_timeout", putMappingRequest.masterNodeTimeout())).     putMappingRequest.indicesOptions(IndicesOptions.fromRequest(request, putMappingRequest.indicesOptions())).     return channel -> client.admin().indices().putMapping(putMappingRequest, new RestToXContentListener<>(channel)). }
