commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static SearchHits empty() {     return empty(true). }
false;public,static;1;4;;public static SearchHits empty(boolean withTotalHits) {     // We shouldn't use static final instance, since that could directly be returned by native transport clients     return new SearchHits(EMPTY, withTotalHits ? new TotalHits(0, Relation.EQUAL_TO) : null, 0). }
false;public;1;20;;@Override public void writeTo(StreamOutput out) throws IOException {     final boolean hasTotalHits = totalHits != null.     out.writeBoolean(hasTotalHits).     if (hasTotalHits) {         totalHits.writeTo(out).     }     out.writeFloat(maxScore).     out.writeVInt(hits.length).     if (hits.length > 0) {         for (SearchHit hit : hits) {             hit.writeTo(out).         }     }     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeOptionalArray(Lucene::writeSortField, sortFields).         out.writeOptionalString(collapseField).         out.writeOptionalArray(Lucene::writeSortValue, collapseValues).     } }
true;public;0;3;/**  * The total number of hits for the query or null if the tracking of total hits  * is disabled in the request.  */ ;/**  * The total number of hits for the query or null if the tracking of total hits  * is disabled in the request.  */ public TotalHits getTotalHits() {     return totalHits == null ? null : totalHits.in. }
true;public;0;3;/**  * The maximum score of this query.  */ ;/**  * The maximum score of this query.  */ public float getMaxScore() {     return maxScore. }
true;public;0;3;/**  * The hits of the search request (based on the search type, and from / size provided).  */ ;/**  * The hits of the search request (based on the search type, and from / size provided).  */ public SearchHit[] getHits() {     return this.hits. }
true;public;1;3;/**  * Return the hit as the provided position.  */ ;/**  * Return the hit as the provided position.  */ public SearchHit getAt(int position) {     return hits[position]. }
true;public;0;4;/**  * In case documents were sorted by field(s), returns information about such field(s), null otherwise  * @see SortField  */ ;/**  * In case documents were sorted by field(s), returns information about such field(s), null otherwise  * @see SortField  */ @Nullable public SortField[] getSortFields() {     return sortFields. }
true;public;0;4;/**  * In case field collapsing was performed, returns the field used for field collapsing, null otherwise  */ ;/**  * In case field collapsing was performed, returns the field used for field collapsing, null otherwise  */ @Nullable public String getCollapseField() {     return collapseField. }
true;public;0;4;/**  * In case field collapsing was performed, returns the values of the field that field collapsing was performed on, null otherwise  */ ;/**  * In case field collapsing was performed, returns the values of the field that field collapsing was performed on, null otherwise  */ @Nullable public Object[] getCollapseValues() {     return collapseValues. }
false;public;0;4;;@Override public Iterator<SearchHit> iterator() {     return Arrays.stream(getHits()).iterator(). }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.HITS).     boolean totalHitAsInt = params.paramAsBoolean(RestSearchAction.TOTAL_HITS_AS_INT_PARAM, false).     if (totalHitAsInt) {         long total = totalHits == null ? -1 : totalHits.in.value.         builder.field(Fields.TOTAL, total).     } else if (totalHits != null) {         builder.startObject(Fields.TOTAL).         totalHits.toXContent(builder, params).         builder.endObject().     }     if (Float.isNaN(maxScore)) {         builder.nullField(Fields.MAX_SCORE).     } else {         builder.field(Fields.MAX_SCORE, maxScore).     }     builder.field(Fields.HITS).     builder.startArray().     for (SearchHit hit : hits) {         hit.toXContent(builder, params).     }     builder.endArray().     builder.endObject().     return builder. }
false;public,static;1;43;;public static SearchHits fromXContent(XContentParser parser) throws IOException {     if (parser.currentToken() != XContentParser.Token.START_OBJECT) {         parser.nextToken().         ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation).     }     XContentParser.Token token = parser.currentToken().     String currentFieldName = null.     List<SearchHit> hits = new ArrayList<>().     TotalHits totalHits = null.     float maxScore = 0f.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (Fields.TOTAL.equals(currentFieldName)) {                 // For BWC with nodes pre 7.0                 long value = parser.longValue().                 totalHits = value == -1 ? null : new TotalHits(value, Relation.EQUAL_TO).             } else if (Fields.MAX_SCORE.equals(currentFieldName)) {                 maxScore = parser.floatValue().             }         } else if (token == XContentParser.Token.VALUE_NULL) {             if (Fields.MAX_SCORE.equals(currentFieldName)) {                 // NaN gets rendered as null-field                 maxScore = Float.NaN.             }         } else if (token == XContentParser.Token.START_ARRAY) {             if (Fields.HITS.equals(currentFieldName)) {                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     hits.add(SearchHit.fromXContent(parser)).                 }             } else {                 parser.skipChildren().             }         } else if (token == XContentParser.Token.START_OBJECT) {             if (Fields.TOTAL.equals(currentFieldName)) {                 totalHits = parseTotalHitsFragment(parser).             } else {                 parser.skipChildren().             }         }     }     return new SearchHits(hits.toArray(new SearchHit[0]), totalHits, maxScore). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null || getClass() != obj.getClass()) {         return false.     }     SearchHits other = (SearchHits) obj.     return Objects.equals(totalHits, other.totalHits) && Objects.equals(maxScore, other.maxScore) && Arrays.equals(hits, other.hits) && Arrays.equals(sortFields, other.sortFields) && Objects.equals(collapseField, other.collapseField) && Arrays.equals(collapseValues, other.collapseValues). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(totalHits, maxScore, Arrays.hashCode(hits), Arrays.hashCode(sortFields), collapseField, Arrays.hashCode(collapseValues)). }
false;public,static;1;20;;public static TotalHits parseTotalHitsFragment(XContentParser parser) throws IOException {     long value = -1.     Relation relation = null.     XContentParser.Token token.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if ("value".equals(currentFieldName)) {                 value = parser.longValue().             } else if ("relation".equals(currentFieldName)) {                 relation = parseRelation(parser.text()).             }         } else {             parser.skipChildren().         }     }     return new TotalHits(value, relation). }
false;private,static;1;9;;private static Relation parseRelation(String relation) {     if ("gte".equals(relation)) {         return Relation.GREATER_THAN_OR_EQUAL_TO.     } else if ("eq".equals(relation)) {         return Relation.EQUAL_TO.     } else {         throw new IllegalArgumentException("invalid total hits relation: " + relation).     } }
false;private,static;1;3;;private static String printRelation(Relation relation) {     return relation == Relation.EQUAL_TO ? "eq" : "gte". }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     Lucene.writeTotalHits(out, in). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Total total = (Total) o.     return in.value == total.in.value && in.relation == total.in.relation. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(in.value, in.relation). }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("value", in.value).     builder.field("relation", printRelation(in.relation)).     return builder. }
