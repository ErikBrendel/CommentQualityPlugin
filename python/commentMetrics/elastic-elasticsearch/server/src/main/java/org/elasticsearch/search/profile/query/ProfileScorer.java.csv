commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int docID() {     return scorer.docID(). }
false;public;0;9;;@Override public float score() throws IOException {     scoreTimer.start().     try {         return scorer.score().     } finally {         scoreTimer.stop().     } }
false;public;0;4;;@Override public Weight getWeight() {     return profileWeight. }
false;public;0;4;;@Override public Collection<ChildScorable> getChildren() throws IOException {     return scorer.getChildren(). }
false;public;1;9;;@Override public int advance(int target) throws IOException {     advanceTimer.start().     try {         return in.advance(target).     } finally {         advanceTimer.stop().     } }
false;public;0;9;;@Override public int nextDoc() throws IOException {     nextDocTimer.start().     try {         return in.nextDoc().     } finally {         nextDocTimer.stop().     } }
false;public;0;4;;@Override public int docID() {     return in.docID(). }
false;public;0;4;;@Override public long cost() {     return in.cost(). }
false;public;0;39;;@Override public DocIdSetIterator iterator() {     if (isConstantScoreQuery) {         return scorer.iterator().     }     final DocIdSetIterator in = scorer.iterator().     return new DocIdSetIterator() {          @Override         public int advance(int target) throws IOException {             advanceTimer.start().             try {                 return in.advance(target).             } finally {                 advanceTimer.stop().             }         }          @Override         public int nextDoc() throws IOException {             nextDocTimer.start().             try {                 return in.nextDoc().             } finally {                 nextDocTimer.stop().             }         }          @Override         public int docID() {             return in.docID().         }          @Override         public long cost() {             return in.cost().         }     }. }
false;public;1;9;;@Override public int advance(int target) throws IOException {     advanceTimer.start().     try {         return inApproximation.advance(target).     } finally {         advanceTimer.stop().     } }
false;public;0;9;;@Override public int nextDoc() throws IOException {     nextDocTimer.start().     try {         return inApproximation.nextDoc().     } finally {         nextDocTimer.stop().     } }
false;public;0;4;;@Override public int docID() {     return inApproximation.docID(). }
false;public;0;4;;@Override public long cost() {     return inApproximation.cost(). }
false;public;0;9;;@Override public boolean matches() throws IOException {     matchTimer.start().     try {         return in.matches().     } finally {         matchTimer.stop().     } }
false;public;0;4;;@Override public float matchCost() {     return in.matchCost(). }
false;public;0;59;;@Override public TwoPhaseIterator twoPhaseIterator() {     if (isConstantScoreQuery) {         return scorer.twoPhaseIterator().     }     final TwoPhaseIterator in = scorer.twoPhaseIterator().     if (in == null) {         return null.     }     final DocIdSetIterator inApproximation = in.approximation().     final DocIdSetIterator approximation = new DocIdSetIterator() {          @Override         public int advance(int target) throws IOException {             advanceTimer.start().             try {                 return inApproximation.advance(target).             } finally {                 advanceTimer.stop().             }         }          @Override         public int nextDoc() throws IOException {             nextDocTimer.start().             try {                 return inApproximation.nextDoc().             } finally {                 nextDocTimer.stop().             }         }          @Override         public int docID() {             return inApproximation.docID().         }          @Override         public long cost() {             return inApproximation.cost().         }     }.     return new TwoPhaseIterator(approximation) {          @Override         public boolean matches() throws IOException {             matchTimer.start().             try {                 return in.matches().             } finally {                 matchTimer.stop().             }         }          @Override         public float matchCost() {             return in.matchCost().         }     }. }
false;public;1;9;;@Override public int advanceShallow(int target) throws IOException {     shallowAdvanceTimer.start().     try {         return scorer.advanceShallow(target).     } finally {         shallowAdvanceTimer.stop().     } }
false;public;1;9;;@Override public float getMaxScore(int upTo) throws IOException {     computeMaxScoreTimer.start().     try {         return scorer.getMaxScore(upTo).     } finally {         computeMaxScoreTimer.stop().     } }
