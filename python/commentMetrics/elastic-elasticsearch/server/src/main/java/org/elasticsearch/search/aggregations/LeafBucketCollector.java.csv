commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setScorer(Scorable arg0) throws IOException { // no-op }
false;public;2;4;;@Override public void collect(int doc, long bucket) { // no-op }
false;public;1;6;;@Override public void setScorer(Scorable s) throws IOException {     for (LeafBucketCollector c : colls) {         c.setScorer(s).     } }
false;public;2;6;;@Override public void collect(int doc, long bucket) throws IOException {     for (LeafBucketCollector c : colls) {         c.collect(doc, bucket).     } }
false;public,static;1;29;;public static LeafBucketCollector wrap(Iterable<LeafBucketCollector> collectors) {     final Stream<LeafBucketCollector> actualCollectors = StreamSupport.stream(collectors.spliterator(), false).filter(c -> c != NO_OP_COLLECTOR).     final LeafBucketCollector[] colls = actualCollectors.toArray(size -> new LeafBucketCollector[size]).     switch(colls.length) {         case 0:             return NO_OP_COLLECTOR.         case 1:             return colls[0].         default:             return new LeafBucketCollector() {                  @Override                 public void setScorer(Scorable s) throws IOException {                     for (LeafBucketCollector c : colls) {                         c.setScorer(s).                     }                 }                  @Override                 public void collect(int doc, long bucket) throws IOException {                     for (LeafBucketCollector c : colls) {                         c.collect(doc, bucket).                     }                 }             }.     } }
true;public,abstract;2;1;/**  * Collect the given doc in the given bucket.  */ ;/**  * Collect the given doc in the given bucket.  */ public abstract void collect(int doc, long bucket) throws IOException.
false;public,final;1;4;;@Override public final void collect(int doc) throws IOException {     collect(doc, 0). }
false;public;1;4;;@Override public void setScorer(Scorable scorer) throws IOException { // no-op by default }
