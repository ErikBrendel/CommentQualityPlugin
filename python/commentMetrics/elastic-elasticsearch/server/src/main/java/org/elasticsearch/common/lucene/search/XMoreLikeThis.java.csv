# id;timestamp;commentText;codeText;commentWords;codeWords
XMoreLikeThis -> public void setMinWordLen(int minWordLen);1524684173;Sets the minimum word length below which words will be ignored.__@param minWordLen the minimum word length below which words will be ignored.;public void setMinWordLen(int minWordLen) {_        this.minWordLen = minWordLen__    };sets,the,minimum,word,length,below,which,words,will,be,ignored,param,min,word,len,the,minimum,word,length,below,which,words,will,be,ignored;public,void,set,min,word,len,int,min,word,len,this,min,word,len,min,word,len
XMoreLikeThis -> public void setMinWordLen(int minWordLen);1538067637;Sets the minimum word length below which words will be ignored.__@param minWordLen the minimum word length below which words will be ignored.;public void setMinWordLen(int minWordLen) {_        this.minWordLen = minWordLen__    };sets,the,minimum,word,length,below,which,words,will,be,ignored,param,min,word,len,the,minimum,word,length,below,which,words,will,be,ignored;public,void,set,min,word,len,int,min,word,len,this,min,word,len,min,word,len
XMoreLikeThis -> public void setMinWordLen(int minWordLen);1540583181;Sets the minimum word length below which words will be ignored.__@param minWordLen the minimum word length below which words will be ignored.;public void setMinWordLen(int minWordLen) {_        this.minWordLen = minWordLen__    };sets,the,minimum,word,length,below,which,words,will,be,ignored,param,min,word,len,the,minimum,word,length,below,which,words,will,be,ignored;public,void,set,min,word,len,int,min,word,len,this,min,word,len,min,word,len
XMoreLikeThis -> public void setMinWordLen(int minWordLen);1541501723;Sets the minimum word length below which words will be ignored.__@param minWordLen the minimum word length below which words will be ignored.;public void setMinWordLen(int minWordLen) {_        this.minWordLen = minWordLen__    };sets,the,minimum,word,length,below,which,words,will,be,ignored,param,min,word,len,the,minimum,word,length,below,which,words,will,be,ignored;public,void,set,min,word,len,int,min,word,len,this,min,word,len,min,word,len
XMoreLikeThis -> public void setMaxQueryTerms(int maxQueryTerms);1524684173;Sets the maximum number of query terms that will be included in any generated query.__@param maxQueryTerms the maximum number of query terms that will be included in any_generated query.;public void setMaxQueryTerms(int maxQueryTerms) {_        this.maxQueryTerms = maxQueryTerms__    };sets,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query,param,max,query,terms,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query;public,void,set,max,query,terms,int,max,query,terms,this,max,query,terms,max,query,terms
XMoreLikeThis -> public void setMaxQueryTerms(int maxQueryTerms);1538067637;Sets the maximum number of query terms that will be included in any generated query.__@param maxQueryTerms the maximum number of query terms that will be included in any_generated query.;public void setMaxQueryTerms(int maxQueryTerms) {_        this.maxQueryTerms = maxQueryTerms__    };sets,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query,param,max,query,terms,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query;public,void,set,max,query,terms,int,max,query,terms,this,max,query,terms,max,query,terms
XMoreLikeThis -> public void setMaxQueryTerms(int maxQueryTerms);1540583181;Sets the maximum number of query terms that will be included in any generated query.__@param maxQueryTerms the maximum number of query terms that will be included in any_generated query.;public void setMaxQueryTerms(int maxQueryTerms) {_        this.maxQueryTerms = maxQueryTerms__    };sets,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query,param,max,query,terms,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query;public,void,set,max,query,terms,int,max,query,terms,this,max,query,terms,max,query,terms
XMoreLikeThis -> public void setMaxQueryTerms(int maxQueryTerms);1541501723;Sets the maximum number of query terms that will be included in any generated query.__@param maxQueryTerms the maximum number of query terms that will be included in any_generated query.;public void setMaxQueryTerms(int maxQueryTerms) {_        this.maxQueryTerms = maxQueryTerms__    };sets,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query,param,max,query,terms,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query;public,void,set,max,query,terms,int,max,query,terms,this,max,query,terms,max,query,terms
XMoreLikeThis -> public int getMaxDocFreq();1524684173;Returns the maximum frequency in which words may still appear._Words that appear in more than this many docs will be ignored. The default frequency is_{@link #DEFAULT_MAX_DOC_FREQ}.__@return get the maximum frequency at which words are still allowed,_words which occur in more docs than this are ignored.;public int getMaxDocFreq() {_        return maxDocFreq__    };returns,the,maximum,frequency,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,docs,will,be,ignored,the,default,frequency,is,link,return,get,the,maximum,frequency,at,which,words,are,still,allowed,words,which,occur,in,more,docs,than,this,are,ignored;public,int,get,max,doc,freq,return,max,doc,freq
XMoreLikeThis -> public int getMaxDocFreq();1538067637;Returns the maximum frequency in which words may still appear._Words that appear in more than this many docs will be ignored. The default frequency is_{@link #DEFAULT_MAX_DOC_FREQ}.__@return get the maximum frequency at which words are still allowed,_words which occur in more docs than this are ignored.;public int getMaxDocFreq() {_        return maxDocFreq__    };returns,the,maximum,frequency,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,docs,will,be,ignored,the,default,frequency,is,link,return,get,the,maximum,frequency,at,which,words,are,still,allowed,words,which,occur,in,more,docs,than,this,are,ignored;public,int,get,max,doc,freq,return,max,doc,freq
XMoreLikeThis -> public int getMaxDocFreq();1540583181;Returns the maximum frequency in which words may still appear._Words that appear in more than this many docs will be ignored. The default frequency is_{@link #DEFAULT_MAX_DOC_FREQ}.__@return get the maximum frequency at which words are still allowed,_words which occur in more docs than this are ignored.;public int getMaxDocFreq() {_        return maxDocFreq__    };returns,the,maximum,frequency,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,docs,will,be,ignored,the,default,frequency,is,link,return,get,the,maximum,frequency,at,which,words,are,still,allowed,words,which,occur,in,more,docs,than,this,are,ignored;public,int,get,max,doc,freq,return,max,doc,freq
XMoreLikeThis -> public int getMaxDocFreq();1541501723;Returns the maximum frequency in which words may still appear._Words that appear in more than this many docs will be ignored. The default frequency is_{@link #DEFAULT_MAX_DOC_FREQ}.__@return get the maximum frequency at which words are still allowed,_words which occur in more docs than this are ignored.;public int getMaxDocFreq() {_        return maxDocFreq__    };returns,the,maximum,frequency,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,docs,will,be,ignored,the,default,frequency,is,link,return,get,the,maximum,frequency,at,which,words,are,still,allowed,words,which,occur,in,more,docs,than,this,are,ignored;public,int,get,max,doc,freq,return,max,doc,freq
XMoreLikeThis -> public Query like(int docNum) throws IOException;1524684173;Return a query that will return docs like the passed lucene document ID.__@param docNum the documentID of the lucene doc to generate the 'More Like This" query for._@return a query that will return docs like the passed lucene document ID.;public Query like(int docNum) throws IOException {_        if (fieldNames == null) {_            _            Collection<String> fields = MultiFields.getIndexedFields(ir)__            fieldNames = fields.toArray(new String[fields.size()])__        }__        return createQuery(retrieveTerms(docNum))__    };return,a,query,that,will,return,docs,like,the,passed,lucene,document,id,param,doc,num,the,document,id,of,the,lucene,doc,to,generate,the,more,like,this,query,for,return,a,query,that,will,return,docs,like,the,passed,lucene,document,id;public,query,like,int,doc,num,throws,ioexception,if,field,names,null,collection,string,fields,multi,fields,get,indexed,fields,ir,field,names,fields,to,array,new,string,fields,size,return,create,query,retrieve,terms,doc,num
XMoreLikeThis -> public Query like(int docNum) throws IOException;1538067637;Return a query that will return docs like the passed lucene document ID.__@param docNum the documentID of the lucene doc to generate the 'More Like This" query for._@return a query that will return docs like the passed lucene document ID.;public Query like(int docNum) throws IOException {_        if (fieldNames == null) {_            _            Collection<String> fields = MultiFields.getIndexedFields(ir)__            fieldNames = fields.toArray(new String[fields.size()])__        }__        return createQuery(retrieveTerms(docNum))__    };return,a,query,that,will,return,docs,like,the,passed,lucene,document,id,param,doc,num,the,document,id,of,the,lucene,doc,to,generate,the,more,like,this,query,for,return,a,query,that,will,return,docs,like,the,passed,lucene,document,id;public,query,like,int,doc,num,throws,ioexception,if,field,names,null,collection,string,fields,multi,fields,get,indexed,fields,ir,field,names,fields,to,array,new,string,fields,size,return,create,query,retrieve,terms,doc,num
XMoreLikeThis -> public Query like(int docNum) throws IOException;1540583181;Return a query that will return docs like the passed lucene document ID.__@param docNum the documentID of the lucene doc to generate the 'More Like This" query for._@return a query that will return docs like the passed lucene document ID.;public Query like(int docNum) throws IOException {_        if (fieldNames == null) {_            _            Collection<String> fields = MultiFields.getIndexedFields(ir)__            fieldNames = fields.toArray(new String[fields.size()])__        }__        return createQuery(retrieveTerms(docNum))__    };return,a,query,that,will,return,docs,like,the,passed,lucene,document,id,param,doc,num,the,document,id,of,the,lucene,doc,to,generate,the,more,like,this,query,for,return,a,query,that,will,return,docs,like,the,passed,lucene,document,id;public,query,like,int,doc,num,throws,ioexception,if,field,names,null,collection,string,fields,multi,fields,get,indexed,fields,ir,field,names,fields,to,array,new,string,fields,size,return,create,query,retrieve,terms,doc,num
XMoreLikeThis -> public Query like(int docNum) throws IOException;1541501723;Return a query that will return docs like the passed lucene document ID.__@param docNum the documentID of the lucene doc to generate the 'More Like This" query for._@return a query that will return docs like the passed lucene document ID.;public Query like(int docNum) throws IOException {_        if (fieldNames == null) {_            _            Collection<String> fields = FieldInfos.getIndexedFields(ir)__            fieldNames = fields.toArray(new String[fields.size()])__        }__        return createQuery(retrieveTerms(docNum))__    };return,a,query,that,will,return,docs,like,the,passed,lucene,document,id,param,doc,num,the,document,id,of,the,lucene,doc,to,generate,the,more,like,this,query,for,return,a,query,that,will,return,docs,like,the,passed,lucene,document,id;public,query,like,int,doc,num,throws,ioexception,if,field,names,null,collection,string,fields,field,infos,get,indexed,fields,ir,field,names,fields,to,array,new,string,fields,size,return,create,query,retrieve,terms,doc,num
XMoreLikeThis -> public Query like(Fields... likeFields) throws IOException;1524684173;Return a query that will return docs like the passed Fields.__@return a query that will return docs like the passed Fields.;public Query like(Fields... likeFields) throws IOException {_        _        Set<String> fieldNames = new HashSet<>()__        for (Fields fields : likeFields) {_            for (String fieldName : fields) {_                fieldNames.add(fieldName)__            }_        }_        _        BooleanQuery.Builder bq = new BooleanQuery.Builder()__        for (String fieldName : fieldNames) {_            Map<String, Int> termFreqMap = new HashMap<>()__            for (Fields fields : likeFields) {_                Terms vector = fields.terms(fieldName)__                if (vector != null) {_                    addTermFrequencies(termFreqMap, vector, fieldName)__                }_            }_            addToQuery(createQueue(termFreqMap, fieldName), bq)__        }_        return bq.build()__    };return,a,query,that,will,return,docs,like,the,passed,fields,return,a,query,that,will,return,docs,like,the,passed,fields;public,query,like,fields,like,fields,throws,ioexception,set,string,field,names,new,hash,set,for,fields,fields,like,fields,for,string,field,name,fields,field,names,add,field,name,boolean,query,builder,bq,new,boolean,query,builder,for,string,field,name,field,names,map,string,int,term,freq,map,new,hash,map,for,fields,fields,like,fields,terms,vector,fields,terms,field,name,if,vector,null,add,term,frequencies,term,freq,map,vector,field,name,add,to,query,create,queue,term,freq,map,field,name,bq,return,bq,build
XMoreLikeThis -> public Query like(Fields... likeFields) throws IOException;1538067637;Return a query that will return docs like the passed Fields.__@return a query that will return docs like the passed Fields.;public Query like(Fields... likeFields) throws IOException {_        _        Set<String> fieldNames = new HashSet<>()__        for (Fields fields : likeFields) {_            for (String fieldName : fields) {_                fieldNames.add(fieldName)__            }_        }_        _        BooleanQuery.Builder bq = new BooleanQuery.Builder()__        for (String fieldName : fieldNames) {_            Map<String, Int> termFreqMap = new HashMap<>()__            for (Fields fields : likeFields) {_                Terms vector = fields.terms(fieldName)__                if (vector != null) {_                    addTermFrequencies(termFreqMap, vector, fieldName)__                }_            }_            addToQuery(createQueue(termFreqMap, fieldName), bq)__        }_        return bq.build()__    };return,a,query,that,will,return,docs,like,the,passed,fields,return,a,query,that,will,return,docs,like,the,passed,fields;public,query,like,fields,like,fields,throws,ioexception,set,string,field,names,new,hash,set,for,fields,fields,like,fields,for,string,field,name,fields,field,names,add,field,name,boolean,query,builder,bq,new,boolean,query,builder,for,string,field,name,field,names,map,string,int,term,freq,map,new,hash,map,for,fields,fields,like,fields,terms,vector,fields,terms,field,name,if,vector,null,add,term,frequencies,term,freq,map,vector,field,name,add,to,query,create,queue,term,freq,map,field,name,bq,return,bq,build
XMoreLikeThis -> public Query like(Fields... likeFields) throws IOException;1540583181;Return a query that will return docs like the passed Fields.__@return a query that will return docs like the passed Fields.;public Query like(Fields... likeFields) throws IOException {_        _        Set<String> fieldNames = new HashSet<>()__        for (Fields fields : likeFields) {_            for (String fieldName : fields) {_                fieldNames.add(fieldName)__            }_        }_        _        BooleanQuery.Builder bq = new BooleanQuery.Builder()__        for (String fieldName : fieldNames) {_            Map<String, Int> termFreqMap = new HashMap<>()__            for (Fields fields : likeFields) {_                Terms vector = fields.terms(fieldName)__                if (vector != null) {_                    addTermFrequencies(termFreqMap, vector, fieldName)__                }_            }_            addToQuery(createQueue(termFreqMap, fieldName), bq)__        }_        return bq.build()__    };return,a,query,that,will,return,docs,like,the,passed,fields,return,a,query,that,will,return,docs,like,the,passed,fields;public,query,like,fields,like,fields,throws,ioexception,set,string,field,names,new,hash,set,for,fields,fields,like,fields,for,string,field,name,fields,field,names,add,field,name,boolean,query,builder,bq,new,boolean,query,builder,for,string,field,name,field,names,map,string,int,term,freq,map,new,hash,map,for,fields,fields,like,fields,terms,vector,fields,terms,field,name,if,vector,null,add,term,frequencies,term,freq,map,vector,field,name,add,to,query,create,queue,term,freq,map,field,name,bq,return,bq,build
XMoreLikeThis -> public Query like(Fields... likeFields) throws IOException;1541501723;Return a query that will return docs like the passed Fields.__@return a query that will return docs like the passed Fields.;public Query like(Fields... likeFields) throws IOException {_        _        Set<String> fieldNames = new HashSet<>()__        for (Fields fields : likeFields) {_            for (String fieldName : fields) {_                fieldNames.add(fieldName)__            }_        }_        _        BooleanQuery.Builder bq = new BooleanQuery.Builder()__        for (String fieldName : fieldNames) {_            Map<String, Int> termFreqMap = new HashMap<>()__            for (Fields fields : likeFields) {_                Terms vector = fields.terms(fieldName)__                if (vector != null) {_                    addTermFrequencies(termFreqMap, vector, fieldName)__                }_            }_            addToQuery(createQueue(termFreqMap, fieldName), bq)__        }_        return bq.build()__    };return,a,query,that,will,return,docs,like,the,passed,fields,return,a,query,that,will,return,docs,like,the,passed,fields;public,query,like,fields,like,fields,throws,ioexception,set,string,field,names,new,hash,set,for,fields,fields,like,fields,for,string,field,name,fields,field,names,add,field,name,boolean,query,builder,bq,new,boolean,query,builder,for,string,field,name,field,names,map,string,int,term,freq,map,new,hash,map,for,fields,fields,like,fields,terms,vector,fields,terms,field,name,if,vector,null,add,term,frequencies,term,freq,map,vector,field,name,add,to,query,create,queue,term,freq,map,field,name,bq,return,bq,build
XMoreLikeThis -> public int getMinDocFreq();1524684173;Returns the frequency at which words will be ignored which do not occur in at least this_many docs. The default frequency is {@link #DEFAULT_MIN_DOC_FREQ}.__@return the frequency at which words will be ignored which do not occur in at least this_many docs.;public int getMinDocFreq() {_        return minDocFreq__    };returns,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs,the,default,frequency,is,link,return,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs;public,int,get,min,doc,freq,return,min,doc,freq
XMoreLikeThis -> public int getMinDocFreq();1538067637;Returns the frequency at which words will be ignored which do not occur in at least this_many docs. The default frequency is {@link #DEFAULT_MIN_DOC_FREQ}.__@return the frequency at which words will be ignored which do not occur in at least this_many docs.;public int getMinDocFreq() {_        return minDocFreq__    };returns,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs,the,default,frequency,is,link,return,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs;public,int,get,min,doc,freq,return,min,doc,freq
XMoreLikeThis -> public int getMinDocFreq();1540583181;Returns the frequency at which words will be ignored which do not occur in at least this_many docs. The default frequency is {@link #DEFAULT_MIN_DOC_FREQ}.__@return the frequency at which words will be ignored which do not occur in at least this_many docs.;public int getMinDocFreq() {_        return minDocFreq__    };returns,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs,the,default,frequency,is,link,return,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs;public,int,get,min,doc,freq,return,min,doc,freq
XMoreLikeThis -> public int getMinDocFreq();1541501723;Returns the frequency at which words will be ignored which do not occur in at least this_many docs. The default frequency is {@link #DEFAULT_MIN_DOC_FREQ}.__@return the frequency at which words will be ignored which do not occur in at least this_many docs.;public int getMinDocFreq() {_        return minDocFreq__    };returns,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs,the,default,frequency,is,link,return,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs;public,int,get,min,doc,freq,return,min,doc,freq
XMoreLikeThis -> public void setMaxDocFreqPct(int maxPercentage);1524684173;Set the maximum percentage in which words may still appear. Words that appear_in more than this many percent of all docs will be ignored.__@param maxPercentage the maximum percentage of documents (0-100) that a term may appear_in to be still considered relevant;public void setMaxDocFreqPct(int maxPercentage) {_        this.maxDocFreq = maxPercentage * ir.numDocs() / 100__    };set,the,maximum,percentage,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,percent,of,all,docs,will,be,ignored,param,max,percentage,the,maximum,percentage,of,documents,0,100,that,a,term,may,appear,in,to,be,still,considered,relevant;public,void,set,max,doc,freq,pct,int,max,percentage,this,max,doc,freq,max,percentage,ir,num,docs,100
XMoreLikeThis -> public void setMaxDocFreqPct(int maxPercentage);1538067637;Set the maximum percentage in which words may still appear. Words that appear_in more than this many percent of all docs will be ignored.__@param maxPercentage the maximum percentage of documents (0-100) that a term may appear_in to be still considered relevant;public void setMaxDocFreqPct(int maxPercentage) {_        this.maxDocFreq = maxPercentage * ir.numDocs() / 100__    };set,the,maximum,percentage,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,percent,of,all,docs,will,be,ignored,param,max,percentage,the,maximum,percentage,of,documents,0,100,that,a,term,may,appear,in,to,be,still,considered,relevant;public,void,set,max,doc,freq,pct,int,max,percentage,this,max,doc,freq,max,percentage,ir,num,docs,100
XMoreLikeThis -> public void setMaxDocFreqPct(int maxPercentage);1540583181;Set the maximum percentage in which words may still appear. Words that appear_in more than this many percent of all docs will be ignored.__@param maxPercentage the maximum percentage of documents (0-100) that a term may appear_in to be still considered relevant;public void setMaxDocFreqPct(int maxPercentage) {_        this.maxDocFreq = maxPercentage * ir.numDocs() / 100__    };set,the,maximum,percentage,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,percent,of,all,docs,will,be,ignored,param,max,percentage,the,maximum,percentage,of,documents,0,100,that,a,term,may,appear,in,to,be,still,considered,relevant;public,void,set,max,doc,freq,pct,int,max,percentage,this,max,doc,freq,max,percentage,ir,num,docs,100
XMoreLikeThis -> public void setMaxDocFreqPct(int maxPercentage);1541501723;Set the maximum percentage in which words may still appear. Words that appear_in more than this many percent of all docs will be ignored.__@param maxPercentage the maximum percentage of documents (0-100) that a term may appear_in to be still considered relevant;public void setMaxDocFreqPct(int maxPercentage) {_        this.maxDocFreq = maxPercentage * ir.numDocs() / 100__    };set,the,maximum,percentage,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,percent,of,all,docs,will,be,ignored,param,max,percentage,the,maximum,percentage,of,documents,0,100,that,a,term,may,appear,in,to,be,still,considered,relevant;public,void,set,max,doc,freq,pct,int,max,percentage,this,max,doc,freq,max,percentage,ir,num,docs,100
XMoreLikeThis -> private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query);1524684173;Add to an existing boolean query the More Like This query from this PriorityQueue;private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query) {_        ScoreTerm scoreTerm__        float bestScore = -1___        while ((scoreTerm = q.pop()) != null) {_            Query tq = new TermQuery(new Term(scoreTerm.topField, scoreTerm.word))___            if (boost) {_                if (bestScore == -1) {_                    bestScore = (scoreTerm.score)__                }_                float myScore = (scoreTerm.score)__                tq = new BoostQuery(tq, boostFactor * myScore / bestScore)__            }__            try {_                query.add(tq, BooleanClause.Occur.SHOULD)__            }_            catch (BooleanQuery.TooManyClauses ignore) {_                break__            }_        }_    };add,to,an,existing,boolean,query,the,more,like,this,query,from,this,priority,queue;private,void,add,to,query,priority,queue,score,term,q,boolean,query,builder,query,score,term,score,term,float,best,score,1,while,score,term,q,pop,null,query,tq,new,term,query,new,term,score,term,top,field,score,term,word,if,boost,if,best,score,1,best,score,score,term,score,float,my,score,score,term,score,tq,new,boost,query,tq,boost,factor,my,score,best,score,try,query,add,tq,boolean,clause,occur,should,catch,boolean,query,too,many,clauses,ignore,break
XMoreLikeThis -> private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query);1538067637;Add to an existing boolean query the More Like This query from this PriorityQueue;private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query) {_        ScoreTerm scoreTerm__        float bestScore = -1___        while ((scoreTerm = q.pop()) != null) {_            Query tq = new TermQuery(new Term(scoreTerm.topField, scoreTerm.word))___            if (boost) {_                if (bestScore == -1) {_                    bestScore = (scoreTerm.score)__                }_                float myScore = (scoreTerm.score)__                tq = new BoostQuery(tq, boostFactor * myScore / bestScore)__            }__            try {_                query.add(tq, BooleanClause.Occur.SHOULD)__            }_            catch (BooleanQuery.TooManyClauses ignore) {_                break__            }_        }_    };add,to,an,existing,boolean,query,the,more,like,this,query,from,this,priority,queue;private,void,add,to,query,priority,queue,score,term,q,boolean,query,builder,query,score,term,score,term,float,best,score,1,while,score,term,q,pop,null,query,tq,new,term,query,new,term,score,term,top,field,score,term,word,if,boost,if,best,score,1,best,score,score,term,score,float,my,score,score,term,score,tq,new,boost,query,tq,boost,factor,my,score,best,score,try,query,add,tq,boolean,clause,occur,should,catch,boolean,query,too,many,clauses,ignore,break
XMoreLikeThis -> private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query);1540583181;Add to an existing boolean query the More Like This query from this PriorityQueue;private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query) {_        ScoreTerm scoreTerm__        float bestScore = -1___        while ((scoreTerm = q.pop()) != null) {_            Query tq = new TermQuery(new Term(scoreTerm.topField, scoreTerm.word))___            if (boost) {_                if (bestScore == -1) {_                    bestScore = (scoreTerm.score)__                }_                float myScore = (scoreTerm.score)__                tq = new BoostQuery(tq, boostFactor * myScore / bestScore)__            }__            try {_                query.add(tq, BooleanClause.Occur.SHOULD)__            }_            catch (BooleanQuery.TooManyClauses ignore) {_                break__            }_        }_    };add,to,an,existing,boolean,query,the,more,like,this,query,from,this,priority,queue;private,void,add,to,query,priority,queue,score,term,q,boolean,query,builder,query,score,term,score,term,float,best,score,1,while,score,term,q,pop,null,query,tq,new,term,query,new,term,score,term,top,field,score,term,word,if,boost,if,best,score,1,best,score,score,term,score,float,my,score,score,term,score,tq,new,boost,query,tq,boost,factor,my,score,best,score,try,query,add,tq,boolean,clause,occur,should,catch,boolean,query,too,many,clauses,ignore,break
XMoreLikeThis -> private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query);1541501723;Add to an existing boolean query the More Like This query from this PriorityQueue;private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query) {_        ScoreTerm scoreTerm__        float bestScore = -1___        while ((scoreTerm = q.pop()) != null) {_            Query tq = new TermQuery(new Term(scoreTerm.topField, scoreTerm.word))___            if (boost) {_                if (bestScore == -1) {_                    bestScore = (scoreTerm.score)__                }_                float myScore = (scoreTerm.score)__                tq = new BoostQuery(tq, boostFactor * myScore / bestScore)__            }__            try {_                query.add(tq, BooleanClause.Occur.SHOULD)__            }_            catch (BooleanQuery.TooManyClauses ignore) {_                break__            }_        }_    };add,to,an,existing,boolean,query,the,more,like,this,query,from,this,priority,queue;private,void,add,to,query,priority,queue,score,term,q,boolean,query,builder,query,score,term,score,term,float,best,score,1,while,score,term,q,pop,null,query,tq,new,term,query,new,term,score,term,top,field,score,term,word,if,boost,if,best,score,1,best,score,score,term,score,float,my,score,score,term,score,tq,new,boost,query,tq,boost,factor,my,score,best,score,try,query,add,tq,boolean,clause,occur,should,catch,boolean,query,too,many,clauses,ignore,break
XMoreLikeThis -> public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException;1524684173;Convenience routine to make it easy to return the most interesting words in a document._More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.__@param r the source document_@param fieldName field passed to analyzer to use when analyzing the content_@return the most interesting words in the document_@see #retrieveTerms(java.io.Reader, String)_@see #setMaxQueryTerms;public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {_        ArrayList<Object> al = new ArrayList<>(maxQueryTerms)__        PriorityQueue<ScoreTerm> pq = retrieveTerms(r, fieldName)__        ScoreTerm scoreTerm__        int lim = maxQueryTerms_ _        _        while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {_            al.add(scoreTerm.word)_ _        }_        String[] res = new String[al.size()]__        return al.toArray(res)__    };convenience,routine,to,make,it,easy,to,return,the,most,interesting,words,in,a,document,more,advanced,users,will,call,link,retrieve,terms,reader,string,retrieve,terms,directly,param,r,the,source,document,param,field,name,field,passed,to,analyzer,to,use,when,analyzing,the,content,return,the,most,interesting,words,in,the,document,see,retrieve,terms,java,io,reader,string,see,set,max,query,terms;public,string,retrieve,interesting,terms,reader,r,string,field,name,throws,ioexception,array,list,object,al,new,array,list,max,query,terms,priority,queue,score,term,pq,retrieve,terms,r,field,name,score,term,score,term,int,lim,max,query,terms,while,score,term,pq,pop,null,lim,0,al,add,score,term,word,string,res,new,string,al,size,return,al,to,array,res
XMoreLikeThis -> public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException;1538067637;Convenience routine to make it easy to return the most interesting words in a document._More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.__@param r the source document_@param fieldName field passed to analyzer to use when analyzing the content_@return the most interesting words in the document_@see #retrieveTerms(java.io.Reader, String)_@see #setMaxQueryTerms;public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {_        ArrayList<Object> al = new ArrayList<>(maxQueryTerms)__        PriorityQueue<ScoreTerm> pq = retrieveTerms(r, fieldName)__        ScoreTerm scoreTerm__        int lim = maxQueryTerms_ _        _        while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {_            al.add(scoreTerm.word)_ _        }_        String[] res = new String[al.size()]__        return al.toArray(res)__    };convenience,routine,to,make,it,easy,to,return,the,most,interesting,words,in,a,document,more,advanced,users,will,call,link,retrieve,terms,reader,string,retrieve,terms,directly,param,r,the,source,document,param,field,name,field,passed,to,analyzer,to,use,when,analyzing,the,content,return,the,most,interesting,words,in,the,document,see,retrieve,terms,java,io,reader,string,see,set,max,query,terms;public,string,retrieve,interesting,terms,reader,r,string,field,name,throws,ioexception,array,list,object,al,new,array,list,max,query,terms,priority,queue,score,term,pq,retrieve,terms,r,field,name,score,term,score,term,int,lim,max,query,terms,while,score,term,pq,pop,null,lim,0,al,add,score,term,word,string,res,new,string,al,size,return,al,to,array,res
XMoreLikeThis -> public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException;1540583181;Convenience routine to make it easy to return the most interesting words in a document._More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.__@param r the source document_@param fieldName field passed to analyzer to use when analyzing the content_@return the most interesting words in the document_@see #retrieveTerms(java.io.Reader, String)_@see #setMaxQueryTerms;public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {_        ArrayList<Object> al = new ArrayList<>(maxQueryTerms)__        PriorityQueue<ScoreTerm> pq = retrieveTerms(r, fieldName)__        ScoreTerm scoreTerm__        int lim = maxQueryTerms_ _        _        while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {_            al.add(scoreTerm.word)_ _        }_        String[] res = new String[al.size()]__        return al.toArray(res)__    };convenience,routine,to,make,it,easy,to,return,the,most,interesting,words,in,a,document,more,advanced,users,will,call,link,retrieve,terms,reader,string,retrieve,terms,directly,param,r,the,source,document,param,field,name,field,passed,to,analyzer,to,use,when,analyzing,the,content,return,the,most,interesting,words,in,the,document,see,retrieve,terms,java,io,reader,string,see,set,max,query,terms;public,string,retrieve,interesting,terms,reader,r,string,field,name,throws,ioexception,array,list,object,al,new,array,list,max,query,terms,priority,queue,score,term,pq,retrieve,terms,r,field,name,score,term,score,term,int,lim,max,query,terms,while,score,term,pq,pop,null,lim,0,al,add,score,term,word,string,res,new,string,al,size,return,al,to,array,res
XMoreLikeThis -> public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException;1541501723;Convenience routine to make it easy to return the most interesting words in a document._More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.__@param r the source document_@param fieldName field passed to analyzer to use when analyzing the content_@return the most interesting words in the document_@see #retrieveTerms(java.io.Reader, String)_@see #setMaxQueryTerms;public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {_        ArrayList<Object> al = new ArrayList<>(maxQueryTerms)__        PriorityQueue<ScoreTerm> pq = retrieveTerms(r, fieldName)__        ScoreTerm scoreTerm__        int lim = maxQueryTerms_ _        _        while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {_            al.add(scoreTerm.word)_ _        }_        String[] res = new String[al.size()]__        return al.toArray(res)__    };convenience,routine,to,make,it,easy,to,return,the,most,interesting,words,in,a,document,more,advanced,users,will,call,link,retrieve,terms,reader,string,retrieve,terms,directly,param,r,the,source,document,param,field,name,field,passed,to,analyzer,to,use,when,analyzing,the,content,return,the,most,interesting,words,in,the,document,see,retrieve,terms,java,io,reader,string,see,set,max,query,terms;public,string,retrieve,interesting,terms,reader,r,string,field,name,throws,ioexception,array,list,object,al,new,array,list,max,query,terms,priority,queue,score,term,pq,retrieve,terms,r,field,name,score,term,score,term,int,lim,max,query,terms,while,score,term,pq,pop,null,lim,0,al,add,score,term,word,string,res,new,string,al,size,return,al,to,array,res
XMoreLikeThis -> public float getBoostFactor();1524684173;Returns the boost factor used when boosting terms__@return the boost factor used when boosting terms_@see #setBoostFactor(float);public float getBoostFactor() {_        return boostFactor__    };returns,the,boost,factor,used,when,boosting,terms,return,the,boost,factor,used,when,boosting,terms,see,set,boost,factor,float;public,float,get,boost,factor,return,boost,factor
XMoreLikeThis -> public float getBoostFactor();1538067637;Returns the boost factor used when boosting terms__@return the boost factor used when boosting terms_@see #setBoostFactor(float);public float getBoostFactor() {_        return boostFactor__    };returns,the,boost,factor,used,when,boosting,terms,return,the,boost,factor,used,when,boosting,terms,see,set,boost,factor,float;public,float,get,boost,factor,return,boost,factor
XMoreLikeThis -> public float getBoostFactor();1540583181;Returns the boost factor used when boosting terms__@return the boost factor used when boosting terms_@see #setBoostFactor(float);public float getBoostFactor() {_        return boostFactor__    };returns,the,boost,factor,used,when,boosting,terms,return,the,boost,factor,used,when,boosting,terms,see,set,boost,factor,float;public,float,get,boost,factor,return,boost,factor
XMoreLikeThis -> public float getBoostFactor();1541501723;Returns the boost factor used when boosting terms__@return the boost factor used when boosting terms_@see #setBoostFactor(float);public float getBoostFactor() {_        return boostFactor__    };returns,the,boost,factor,used,when,boosting,terms,return,the,boost,factor,used,when,boosting,terms,see,set,boost,factor,float;public,float,get,boost,factor,return,boost,factor
XMoreLikeThis -> public String[] getFieldNames();1524684173;Returns the field names that will be used when generating the 'More Like This' query._The default field names that will be used is {@link #DEFAULT_FIELD_NAMES}.__@return the field names that will be used when generating the 'More Like This' query.;public String[] getFieldNames() {_        return fieldNames__    };returns,the,field,names,that,will,be,used,when,generating,the,more,like,this,query,the,default,field,names,that,will,be,used,is,link,return,the,field,names,that,will,be,used,when,generating,the,more,like,this,query;public,string,get,field,names,return,field,names
XMoreLikeThis -> public String[] getFieldNames();1538067637;Returns the field names that will be used when generating the 'More Like This' query._The default field names that will be used is {@link #DEFAULT_FIELD_NAMES}.__@return the field names that will be used when generating the 'More Like This' query.;public String[] getFieldNames() {_        return fieldNames__    };returns,the,field,names,that,will,be,used,when,generating,the,more,like,this,query,the,default,field,names,that,will,be,used,is,link,return,the,field,names,that,will,be,used,when,generating,the,more,like,this,query;public,string,get,field,names,return,field,names
XMoreLikeThis -> public String[] getFieldNames();1540583181;Returns the field names that will be used when generating the 'More Like This' query._The default field names that will be used is {@link #DEFAULT_FIELD_NAMES}.__@return the field names that will be used when generating the 'More Like This' query.;public String[] getFieldNames() {_        return fieldNames__    };returns,the,field,names,that,will,be,used,when,generating,the,more,like,this,query,the,default,field,names,that,will,be,used,is,link,return,the,field,names,that,will,be,used,when,generating,the,more,like,this,query;public,string,get,field,names,return,field,names
XMoreLikeThis -> public String[] getFieldNames();1541501723;Returns the field names that will be used when generating the 'More Like This' query._The default field names that will be used is {@link #DEFAULT_FIELD_NAMES}.__@return the field names that will be used when generating the 'More Like This' query.;public String[] getFieldNames() {_        return fieldNames__    };returns,the,field,names,that,will,be,used,when,generating,the,more,like,this,query,the,default,field,names,that,will,be,used,is,link,return,the,field,names,that,will,be,used,when,generating,the,more,like,this,query;public,string,get,field,names,return,field,names
XMoreLikeThis -> public Query like(Terms... likeTerms) throws IOException;1524684173;Return a query that will return docs like the passed Terms.__@return a query that will return docs like the passed Terms.;public Query like(Terms... likeTerms) throws IOException {_        Map<String, Int> termFreqMap = new HashMap<>()__        for (Terms vector : likeTerms) {_            addTermFrequencies(termFreqMap, vector)__        }_        return createQuery(createQueue(termFreqMap))__    };return,a,query,that,will,return,docs,like,the,passed,terms,return,a,query,that,will,return,docs,like,the,passed,terms;public,query,like,terms,like,terms,throws,ioexception,map,string,int,term,freq,map,new,hash,map,for,terms,vector,like,terms,add,term,frequencies,term,freq,map,vector,return,create,query,create,queue,term,freq,map
XMoreLikeThis -> public Query like(Terms... likeTerms) throws IOException;1538067637;Return a query that will return docs like the passed Terms.__@return a query that will return docs like the passed Terms.;public Query like(Terms... likeTerms) throws IOException {_        Map<String, Int> termFreqMap = new HashMap<>()__        for (Terms vector : likeTerms) {_            addTermFrequencies(termFreqMap, vector)__        }_        return createQuery(createQueue(termFreqMap))__    };return,a,query,that,will,return,docs,like,the,passed,terms,return,a,query,that,will,return,docs,like,the,passed,terms;public,query,like,terms,like,terms,throws,ioexception,map,string,int,term,freq,map,new,hash,map,for,terms,vector,like,terms,add,term,frequencies,term,freq,map,vector,return,create,query,create,queue,term,freq,map
XMoreLikeThis -> public Query like(Terms... likeTerms) throws IOException;1540583181;Return a query that will return docs like the passed Terms.__@return a query that will return docs like the passed Terms.;public Query like(Terms... likeTerms) throws IOException {_        Map<String, Int> termFreqMap = new HashMap<>()__        for (Terms vector : likeTerms) {_            addTermFrequencies(termFreqMap, vector)__        }_        return createQuery(createQueue(termFreqMap))__    };return,a,query,that,will,return,docs,like,the,passed,terms,return,a,query,that,will,return,docs,like,the,passed,terms;public,query,like,terms,like,terms,throws,ioexception,map,string,int,term,freq,map,new,hash,map,for,terms,vector,like,terms,add,term,frequencies,term,freq,map,vector,return,create,query,create,queue,term,freq,map
XMoreLikeThis -> public Query like(Terms... likeTerms) throws IOException;1541501723;Return a query that will return docs like the passed Terms.__@return a query that will return docs like the passed Terms.;public Query like(Terms... likeTerms) throws IOException {_        Map<String, Int> termFreqMap = new HashMap<>()__        for (Terms vector : likeTerms) {_            addTermFrequencies(termFreqMap, vector)__        }_        return createQuery(createQueue(termFreqMap))__    };return,a,query,that,will,return,docs,like,the,passed,terms,return,a,query,that,will,return,docs,like,the,passed,terms;public,query,like,terms,like,terms,throws,ioexception,map,string,int,term,freq,map,new,hash,map,for,terms,vector,like,terms,add,term,frequencies,term,freq,map,vector,return,create,query,create,queue,term,freq,map
XMoreLikeThis -> private void addTermFrequencies(Reader r, Map<String, Int> termFreqMap, String fieldName)             throws IOException;1524684173;Adds term frequencies found by tokenizing text from reader into the Map words__@param r a source of text to be tokenized_@param termFreqMap a Map of terms and their frequencies_@param fieldName Used by analyzer for any special per-field analysis;private void addTermFrequencies(Reader r, Map<String, Int> termFreqMap, String fieldName)_            throws IOException {_        if (analyzer == null) {_            throw new UnsupportedOperationException("To use MoreLikeThis without " +_                    "term vectors, you must provide an Analyzer")__        }_        try (TokenStream ts = analyzer.tokenStream(fieldName, r)) {_            int tokenCount = 0__            _            CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class)__            ts.reset()__            while (ts.incrementToken()) {_                String word = termAtt.toString()__                tokenCount++__                if (tokenCount > maxNumTokensParsed) {_                    break__                }_                if (isNoiseWord(word)) {_                    continue__                }_                if (isSkipTerm(fieldName, word)) {_                    continue__                }__                _                Int cnt = termFreqMap.get(word)__                if (cnt == null) {_                    termFreqMap.put(word, new Int())__                } else {_                    cnt.x++__                }_            }_            ts.end()__        }_    };adds,term,frequencies,found,by,tokenizing,text,from,reader,into,the,map,words,param,r,a,source,of,text,to,be,tokenized,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,field,name,used,by,analyzer,for,any,special,per,field,analysis;private,void,add,term,frequencies,reader,r,map,string,int,term,freq,map,string,field,name,throws,ioexception,if,analyzer,null,throw,new,unsupported,operation,exception,to,use,more,like,this,without,term,vectors,you,must,provide,an,analyzer,try,token,stream,ts,analyzer,token,stream,field,name,r,int,token,count,0,char,term,attribute,term,att,ts,add,attribute,char,term,attribute,class,ts,reset,while,ts,increment,token,string,word,term,att,to,string,token,count,if,token,count,max,num,tokens,parsed,break,if,is,noise,word,word,continue,if,is,skip,term,field,name,word,continue,int,cnt,term,freq,map,get,word,if,cnt,null,term,freq,map,put,word,new,int,else,cnt,x,ts,end
XMoreLikeThis -> private void addTermFrequencies(Reader r, Map<String, Int> termFreqMap, String fieldName)             throws IOException;1538067637;Adds term frequencies found by tokenizing text from reader into the Map words__@param r a source of text to be tokenized_@param termFreqMap a Map of terms and their frequencies_@param fieldName Used by analyzer for any special per-field analysis;private void addTermFrequencies(Reader r, Map<String, Int> termFreqMap, String fieldName)_            throws IOException {_        if (analyzer == null) {_            throw new UnsupportedOperationException("To use MoreLikeThis without " +_                    "term vectors, you must provide an Analyzer")__        }_        try (TokenStream ts = analyzer.tokenStream(fieldName, r)) {_            int tokenCount = 0__            _            CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class)__            ts.reset()__            while (ts.incrementToken()) {_                String word = termAtt.toString()__                tokenCount++__                if (tokenCount > maxNumTokensParsed) {_                    break__                }_                if (isNoiseWord(word)) {_                    continue__                }_                if (isSkipTerm(fieldName, word)) {_                    continue__                }__                _                Int cnt = termFreqMap.get(word)__                if (cnt == null) {_                    termFreqMap.put(word, new Int())__                } else {_                    cnt.x++__                }_            }_            ts.end()__        }_    };adds,term,frequencies,found,by,tokenizing,text,from,reader,into,the,map,words,param,r,a,source,of,text,to,be,tokenized,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,field,name,used,by,analyzer,for,any,special,per,field,analysis;private,void,add,term,frequencies,reader,r,map,string,int,term,freq,map,string,field,name,throws,ioexception,if,analyzer,null,throw,new,unsupported,operation,exception,to,use,more,like,this,without,term,vectors,you,must,provide,an,analyzer,try,token,stream,ts,analyzer,token,stream,field,name,r,int,token,count,0,char,term,attribute,term,att,ts,add,attribute,char,term,attribute,class,ts,reset,while,ts,increment,token,string,word,term,att,to,string,token,count,if,token,count,max,num,tokens,parsed,break,if,is,noise,word,word,continue,if,is,skip,term,field,name,word,continue,int,cnt,term,freq,map,get,word,if,cnt,null,term,freq,map,put,word,new,int,else,cnt,x,ts,end
XMoreLikeThis -> private void addTermFrequencies(Reader r, Map<String, Int> termFreqMap, String fieldName)             throws IOException;1540583181;Adds term frequencies found by tokenizing text from reader into the Map words__@param r a source of text to be tokenized_@param termFreqMap a Map of terms and their frequencies_@param fieldName Used by analyzer for any special per-field analysis;private void addTermFrequencies(Reader r, Map<String, Int> termFreqMap, String fieldName)_            throws IOException {_        if (analyzer == null) {_            throw new UnsupportedOperationException("To use MoreLikeThis without " +_                    "term vectors, you must provide an Analyzer")__        }_        try (TokenStream ts = analyzer.tokenStream(fieldName, r)) {_            int tokenCount = 0__            _            CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class)__            ts.reset()__            while (ts.incrementToken()) {_                String word = termAtt.toString()__                tokenCount++__                if (tokenCount > maxNumTokensParsed) {_                    break__                }_                if (isNoiseWord(word)) {_                    continue__                }_                if (isSkipTerm(fieldName, word)) {_                    continue__                }__                _                Int cnt = termFreqMap.get(word)__                if (cnt == null) {_                    termFreqMap.put(word, new Int())__                } else {_                    cnt.x++__                }_            }_            ts.end()__        }_    };adds,term,frequencies,found,by,tokenizing,text,from,reader,into,the,map,words,param,r,a,source,of,text,to,be,tokenized,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,field,name,used,by,analyzer,for,any,special,per,field,analysis;private,void,add,term,frequencies,reader,r,map,string,int,term,freq,map,string,field,name,throws,ioexception,if,analyzer,null,throw,new,unsupported,operation,exception,to,use,more,like,this,without,term,vectors,you,must,provide,an,analyzer,try,token,stream,ts,analyzer,token,stream,field,name,r,int,token,count,0,char,term,attribute,term,att,ts,add,attribute,char,term,attribute,class,ts,reset,while,ts,increment,token,string,word,term,att,to,string,token,count,if,token,count,max,num,tokens,parsed,break,if,is,noise,word,word,continue,if,is,skip,term,field,name,word,continue,int,cnt,term,freq,map,get,word,if,cnt,null,term,freq,map,put,word,new,int,else,cnt,x,ts,end
XMoreLikeThis -> private void addTermFrequencies(Reader r, Map<String, Int> termFreqMap, String fieldName)             throws IOException;1541501723;Adds term frequencies found by tokenizing text from reader into the Map words__@param r a source of text to be tokenized_@param termFreqMap a Map of terms and their frequencies_@param fieldName Used by analyzer for any special per-field analysis;private void addTermFrequencies(Reader r, Map<String, Int> termFreqMap, String fieldName)_            throws IOException {_        if (analyzer == null) {_            throw new UnsupportedOperationException("To use MoreLikeThis without " +_                    "term vectors, you must provide an Analyzer")__        }_        try (TokenStream ts = analyzer.tokenStream(fieldName, r)) {_            int tokenCount = 0__            _            CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class)__            ts.reset()__            while (ts.incrementToken()) {_                String word = termAtt.toString()__                tokenCount++__                if (tokenCount > maxNumTokensParsed) {_                    break__                }_                if (isNoiseWord(word)) {_                    continue__                }_                if (isSkipTerm(fieldName, word)) {_                    continue__                }__                _                Int cnt = termFreqMap.get(word)__                if (cnt == null) {_                    termFreqMap.put(word, new Int())__                } else {_                    cnt.x++__                }_            }_            ts.end()__        }_    };adds,term,frequencies,found,by,tokenizing,text,from,reader,into,the,map,words,param,r,a,source,of,text,to,be,tokenized,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,field,name,used,by,analyzer,for,any,special,per,field,analysis;private,void,add,term,frequencies,reader,r,map,string,int,term,freq,map,string,field,name,throws,ioexception,if,analyzer,null,throw,new,unsupported,operation,exception,to,use,more,like,this,without,term,vectors,you,must,provide,an,analyzer,try,token,stream,ts,analyzer,token,stream,field,name,r,int,token,count,0,char,term,attribute,term,att,ts,add,attribute,char,term,attribute,class,ts,reset,while,ts,increment,token,string,word,term,att,to,string,token,count,if,token,count,max,num,tokens,parsed,break,if,is,noise,word,word,continue,if,is,skip,term,field,name,word,continue,int,cnt,term,freq,map,get,word,if,cnt,null,term,freq,map,put,word,new,int,else,cnt,x,ts,end
XMoreLikeThis -> private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector, @Nullable String fieldName) throws IOException;1524684173;Adds terms and frequencies found in vector into the Map termFreqMap__@param termFreqMap a Map of terms and their frequencies_@param vector List of terms and their frequencies for a doc/field_@param fieldName Optional field name of the terms for skip terms;private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector, @Nullable String fieldName) throws IOException {_        final TermsEnum termsEnum = vector.iterator()__        final CharsRefBuilder spare = new CharsRefBuilder()__        BytesRef text__        while((text = termsEnum.next()) != null) {_            spare.copyUTF8Bytes(text)__            final String term = spare.toString()__            if (isNoiseWord(term)) {_                continue__            }_            if (isSkipTerm(fieldName, term)) {_                continue__            }__            final PostingsEnum docs = termsEnum.postings(null)__            int freq = 0__            while(docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {_                freq += docs.freq()__            }__            _            Int cnt = termFreqMap.get(term)__            if (cnt == null) {_                cnt = new Int()__                termFreqMap.put(term, cnt)__                cnt.x = freq__            } else {_                cnt.x += freq__            }_        }_    };adds,terms,and,frequencies,found,in,vector,into,the,map,term,freq,map,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,vector,list,of,terms,and,their,frequencies,for,a,doc,field,param,field,name,optional,field,name,of,the,terms,for,skip,terms;private,void,add,term,frequencies,map,string,int,term,freq,map,terms,vector,nullable,string,field,name,throws,ioexception,final,terms,enum,terms,enum,vector,iterator,final,chars,ref,builder,spare,new,chars,ref,builder,bytes,ref,text,while,text,terms,enum,next,null,spare,copy,utf8bytes,text,final,string,term,spare,to,string,if,is,noise,word,term,continue,if,is,skip,term,field,name,term,continue,final,postings,enum,docs,terms,enum,postings,null,int,freq,0,while,docs,null,docs,next,doc,doc,id,set,iterator,freq,docs,freq,int,cnt,term,freq,map,get,term,if,cnt,null,cnt,new,int,term,freq,map,put,term,cnt,cnt,x,freq,else,cnt,x,freq
XMoreLikeThis -> private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector, @Nullable String fieldName) throws IOException;1538067637;Adds terms and frequencies found in vector into the Map termFreqMap__@param termFreqMap a Map of terms and their frequencies_@param vector List of terms and their frequencies for a doc/field_@param fieldName Optional field name of the terms for skip terms;private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector, @Nullable String fieldName) throws IOException {_        final TermsEnum termsEnum = vector.iterator()__        final CharsRefBuilder spare = new CharsRefBuilder()__        BytesRef text__        while((text = termsEnum.next()) != null) {_            spare.copyUTF8Bytes(text)__            final String term = spare.toString()__            if (isNoiseWord(term)) {_                continue__            }_            if (isSkipTerm(fieldName, term)) {_                continue__            }__            final PostingsEnum docs = termsEnum.postings(null)__            int freq = 0__            while(docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {_                freq += docs.freq()__            }__            _            Int cnt = termFreqMap.get(term)__            if (cnt == null) {_                cnt = new Int()__                termFreqMap.put(term, cnt)__                cnt.x = freq__            } else {_                cnt.x += freq__            }_        }_    };adds,terms,and,frequencies,found,in,vector,into,the,map,term,freq,map,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,vector,list,of,terms,and,their,frequencies,for,a,doc,field,param,field,name,optional,field,name,of,the,terms,for,skip,terms;private,void,add,term,frequencies,map,string,int,term,freq,map,terms,vector,nullable,string,field,name,throws,ioexception,final,terms,enum,terms,enum,vector,iterator,final,chars,ref,builder,spare,new,chars,ref,builder,bytes,ref,text,while,text,terms,enum,next,null,spare,copy,utf8bytes,text,final,string,term,spare,to,string,if,is,noise,word,term,continue,if,is,skip,term,field,name,term,continue,final,postings,enum,docs,terms,enum,postings,null,int,freq,0,while,docs,null,docs,next,doc,doc,id,set,iterator,freq,docs,freq,int,cnt,term,freq,map,get,term,if,cnt,null,cnt,new,int,term,freq,map,put,term,cnt,cnt,x,freq,else,cnt,x,freq
XMoreLikeThis -> private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector, @Nullable String fieldName) throws IOException;1540583181;Adds terms and frequencies found in vector into the Map termFreqMap__@param termFreqMap a Map of terms and their frequencies_@param vector List of terms and their frequencies for a doc/field_@param fieldName Optional field name of the terms for skip terms;private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector, @Nullable String fieldName) throws IOException {_        final TermsEnum termsEnum = vector.iterator()__        final CharsRefBuilder spare = new CharsRefBuilder()__        BytesRef text__        while((text = termsEnum.next()) != null) {_            spare.copyUTF8Bytes(text)__            final String term = spare.toString()__            if (isNoiseWord(term)) {_                continue__            }_            if (isSkipTerm(fieldName, term)) {_                continue__            }__            final PostingsEnum docs = termsEnum.postings(null)__            int freq = 0__            while(docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {_                freq += docs.freq()__            }__            _            Int cnt = termFreqMap.get(term)__            if (cnt == null) {_                cnt = new Int()__                termFreqMap.put(term, cnt)__                cnt.x = freq__            } else {_                cnt.x += freq__            }_        }_    };adds,terms,and,frequencies,found,in,vector,into,the,map,term,freq,map,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,vector,list,of,terms,and,their,frequencies,for,a,doc,field,param,field,name,optional,field,name,of,the,terms,for,skip,terms;private,void,add,term,frequencies,map,string,int,term,freq,map,terms,vector,nullable,string,field,name,throws,ioexception,final,terms,enum,terms,enum,vector,iterator,final,chars,ref,builder,spare,new,chars,ref,builder,bytes,ref,text,while,text,terms,enum,next,null,spare,copy,utf8bytes,text,final,string,term,spare,to,string,if,is,noise,word,term,continue,if,is,skip,term,field,name,term,continue,final,postings,enum,docs,terms,enum,postings,null,int,freq,0,while,docs,null,docs,next,doc,doc,id,set,iterator,freq,docs,freq,int,cnt,term,freq,map,get,term,if,cnt,null,cnt,new,int,term,freq,map,put,term,cnt,cnt,x,freq,else,cnt,x,freq
XMoreLikeThis -> private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector, @Nullable String fieldName) throws IOException;1541501723;Adds terms and frequencies found in vector into the Map termFreqMap__@param termFreqMap a Map of terms and their frequencies_@param vector List of terms and their frequencies for a doc/field_@param fieldName Optional field name of the terms for skip terms;private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector, @Nullable String fieldName) throws IOException {_        final TermsEnum termsEnum = vector.iterator()__        final CharsRefBuilder spare = new CharsRefBuilder()__        BytesRef text__        while((text = termsEnum.next()) != null) {_            spare.copyUTF8Bytes(text)__            final String term = spare.toString()__            if (isNoiseWord(term)) {_                continue__            }_            if (isSkipTerm(fieldName, term)) {_                continue__            }__            final PostingsEnum docs = termsEnum.postings(null)__            int freq = 0__            while(docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {_                freq += docs.freq()__            }__            _            Int cnt = termFreqMap.get(term)__            if (cnt == null) {_                cnt = new Int()__                termFreqMap.put(term, cnt)__                cnt.x = freq__            } else {_                cnt.x += freq__            }_        }_    };adds,terms,and,frequencies,found,in,vector,into,the,map,term,freq,map,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,vector,list,of,terms,and,their,frequencies,for,a,doc,field,param,field,name,optional,field,name,of,the,terms,for,skip,terms;private,void,add,term,frequencies,map,string,int,term,freq,map,terms,vector,nullable,string,field,name,throws,ioexception,final,terms,enum,terms,enum,vector,iterator,final,chars,ref,builder,spare,new,chars,ref,builder,bytes,ref,text,while,text,terms,enum,next,null,spare,copy,utf8bytes,text,final,string,term,spare,to,string,if,is,noise,word,term,continue,if,is,skip,term,field,name,term,continue,final,postings,enum,docs,terms,enum,postings,null,int,freq,0,while,docs,null,docs,next,doc,doc,id,set,iterator,freq,docs,freq,int,cnt,term,freq,map,get,term,if,cnt,null,cnt,new,int,term,freq,map,put,term,cnt,cnt,x,freq,else,cnt,x,freq
XMoreLikeThis -> public void setAnalyzer(Analyzer analyzer);1524684173;Sets the analyzer to use. An analyzer is not required for generating a query with the_{@link #like(int)} method, all other 'like' methods require an analyzer.__@param analyzer the analyzer to use to tokenize text.;public void setAnalyzer(Analyzer analyzer) {_        this.analyzer = analyzer__    };sets,the,analyzer,to,use,an,analyzer,is,not,required,for,generating,a,query,with,the,link,like,int,method,all,other,like,methods,require,an,analyzer,param,analyzer,the,analyzer,to,use,to,tokenize,text;public,void,set,analyzer,analyzer,analyzer,this,analyzer,analyzer
XMoreLikeThis -> public void setAnalyzer(Analyzer analyzer);1538067637;Sets the analyzer to use. An analyzer is not required for generating a query with the_{@link #like(int)} method, all other 'like' methods require an analyzer.__@param analyzer the analyzer to use to tokenize text.;public void setAnalyzer(Analyzer analyzer) {_        this.analyzer = analyzer__    };sets,the,analyzer,to,use,an,analyzer,is,not,required,for,generating,a,query,with,the,link,like,int,method,all,other,like,methods,require,an,analyzer,param,analyzer,the,analyzer,to,use,to,tokenize,text;public,void,set,analyzer,analyzer,analyzer,this,analyzer,analyzer
XMoreLikeThis -> public void setAnalyzer(Analyzer analyzer);1540583181;Sets the analyzer to use. An analyzer is not required for generating a query with the_{@link #like(int)} method, all other 'like' methods require an analyzer.__@param analyzer the analyzer to use to tokenize text.;public void setAnalyzer(Analyzer analyzer) {_        this.analyzer = analyzer__    };sets,the,analyzer,to,use,an,analyzer,is,not,required,for,generating,a,query,with,the,link,like,int,method,all,other,like,methods,require,an,analyzer,param,analyzer,the,analyzer,to,use,to,tokenize,text;public,void,set,analyzer,analyzer,analyzer,this,analyzer,analyzer
XMoreLikeThis -> public void setAnalyzer(Analyzer analyzer);1541501723;Sets the analyzer to use. An analyzer is not required for generating a query with the_{@link #like(int)} method, all other 'like' methods require an analyzer.__@param analyzer the analyzer to use to tokenize text.;public void setAnalyzer(Analyzer analyzer) {_        this.analyzer = analyzer__    };sets,the,analyzer,to,use,an,analyzer,is,not,required,for,generating,a,query,with,the,link,like,int,method,all,other,like,methods,require,an,analyzer,param,analyzer,the,analyzer,to,use,to,tokenize,text;public,void,set,analyzer,analyzer,analyzer,this,analyzer,analyzer
XMoreLikeThis -> public void setMinTermFreq(int minTermFreq);1524684173;Sets the frequency below which terms will be ignored in the source doc.__@param minTermFreq the frequency below which terms will be ignored in the source doc.;public void setMinTermFreq(int minTermFreq) {_        this.minTermFreq = minTermFreq__    };sets,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc,param,min,term,freq,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc;public,void,set,min,term,freq,int,min,term,freq,this,min,term,freq,min,term,freq
XMoreLikeThis -> public void setMinTermFreq(int minTermFreq);1538067637;Sets the frequency below which terms will be ignored in the source doc.__@param minTermFreq the frequency below which terms will be ignored in the source doc.;public void setMinTermFreq(int minTermFreq) {_        this.minTermFreq = minTermFreq__    };sets,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc,param,min,term,freq,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc;public,void,set,min,term,freq,int,min,term,freq,this,min,term,freq,min,term,freq
XMoreLikeThis -> public void setMinTermFreq(int minTermFreq);1540583181;Sets the frequency below which terms will be ignored in the source doc.__@param minTermFreq the frequency below which terms will be ignored in the source doc.;public void setMinTermFreq(int minTermFreq) {_        this.minTermFreq = minTermFreq__    };sets,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc,param,min,term,freq,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc;public,void,set,min,term,freq,int,min,term,freq,this,min,term,freq,min,term,freq
XMoreLikeThis -> public void setMinTermFreq(int minTermFreq);1541501723;Sets the frequency below which terms will be ignored in the source doc.__@param minTermFreq the frequency below which terms will be ignored in the source doc.;public void setMinTermFreq(int minTermFreq) {_        this.minTermFreq = minTermFreq__    };sets,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc,param,min,term,freq,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc;public,void,set,min,term,freq,int,min,term,freq,this,min,term,freq,min,term,freq
XMoreLikeThis -> public void setMaxNumTokensParsed(int i);1524684173;@param i The maximum number of tokens to parse in each example doc field that is not stored with TermVector support;public void setMaxNumTokensParsed(int i) {_        maxNumTokensParsed = i__    };param,i,the,maximum,number,of,tokens,to,parse,in,each,example,doc,field,that,is,not,stored,with,term,vector,support;public,void,set,max,num,tokens,parsed,int,i,max,num,tokens,parsed,i
XMoreLikeThis -> public void setMaxNumTokensParsed(int i);1538067637;@param i The maximum number of tokens to parse in each example doc field that is not stored with TermVector support;public void setMaxNumTokensParsed(int i) {_        maxNumTokensParsed = i__    };param,i,the,maximum,number,of,tokens,to,parse,in,each,example,doc,field,that,is,not,stored,with,term,vector,support;public,void,set,max,num,tokens,parsed,int,i,max,num,tokens,parsed,i
XMoreLikeThis -> public void setMaxNumTokensParsed(int i);1540583181;@param i The maximum number of tokens to parse in each example doc field that is not stored with TermVector support;public void setMaxNumTokensParsed(int i) {_        maxNumTokensParsed = i__    };param,i,the,maximum,number,of,tokens,to,parse,in,each,example,doc,field,that,is,not,stored,with,term,vector,support;public,void,set,max,num,tokens,parsed,int,i,max,num,tokens,parsed,i
XMoreLikeThis -> public void setMaxNumTokensParsed(int i);1541501723;@param i The maximum number of tokens to parse in each example doc field that is not stored with TermVector support;public void setMaxNumTokensParsed(int i) {_        maxNumTokensParsed = i__    };param,i,the,maximum,number,of,tokens,to,parse,in,each,example,doc,field,that,is,not,stored,with,term,vector,support;public,void,set,max,num,tokens,parsed,int,i,max,num,tokens,parsed,i
XMoreLikeThis -> public Analyzer getAnalyzer();1524684173;Returns an analyzer that will be used to parse source doc with. The default analyzer_is not set.__@return the analyzer that will be used to parse source doc with.;public Analyzer getAnalyzer() {_        return analyzer__    };returns,an,analyzer,that,will,be,used,to,parse,source,doc,with,the,default,analyzer,is,not,set,return,the,analyzer,that,will,be,used,to,parse,source,doc,with;public,analyzer,get,analyzer,return,analyzer
XMoreLikeThis -> public Analyzer getAnalyzer();1538067637;Returns an analyzer that will be used to parse source doc with. The default analyzer_is not set.__@return the analyzer that will be used to parse source doc with.;public Analyzer getAnalyzer() {_        return analyzer__    };returns,an,analyzer,that,will,be,used,to,parse,source,doc,with,the,default,analyzer,is,not,set,return,the,analyzer,that,will,be,used,to,parse,source,doc,with;public,analyzer,get,analyzer,return,analyzer
XMoreLikeThis -> public Analyzer getAnalyzer();1540583181;Returns an analyzer that will be used to parse source doc with. The default analyzer_is not set.__@return the analyzer that will be used to parse source doc with.;public Analyzer getAnalyzer() {_        return analyzer__    };returns,an,analyzer,that,will,be,used,to,parse,source,doc,with,the,default,analyzer,is,not,set,return,the,analyzer,that,will,be,used,to,parse,source,doc,with;public,analyzer,get,analyzer,return,analyzer
XMoreLikeThis -> public Analyzer getAnalyzer();1541501723;Returns an analyzer that will be used to parse source doc with. The default analyzer_is not set.__@return the analyzer that will be used to parse source doc with.;public Analyzer getAnalyzer() {_        return analyzer__    };returns,an,analyzer,that,will,be,used,to,parse,source,doc,with,the,default,analyzer,is,not,set,return,the,analyzer,that,will,be,used,to,parse,source,doc,with;public,analyzer,get,analyzer,return,analyzer
XMoreLikeThis -> public boolean isBoost();1524684173;Returns whether to boost terms in query based on "score" or not. The default is_{@link #DEFAULT_BOOST}.__@return whether to boost terms in query based on "score" or not._@see #setBoost;public boolean isBoost() {_        return boost__    };returns,whether,to,boost,terms,in,query,based,on,score,or,not,the,default,is,link,return,whether,to,boost,terms,in,query,based,on,score,or,not,see,set,boost;public,boolean,is,boost,return,boost
XMoreLikeThis -> public boolean isBoost();1538067637;Returns whether to boost terms in query based on "score" or not. The default is_{@link #DEFAULT_BOOST}.__@return whether to boost terms in query based on "score" or not._@see #setBoost;public boolean isBoost() {_        return boost__    };returns,whether,to,boost,terms,in,query,based,on,score,or,not,the,default,is,link,return,whether,to,boost,terms,in,query,based,on,score,or,not,see,set,boost;public,boolean,is,boost,return,boost
XMoreLikeThis -> public boolean isBoost();1540583181;Returns whether to boost terms in query based on "score" or not. The default is_{@link #DEFAULT_BOOST}.__@return whether to boost terms in query based on "score" or not._@see #setBoost;public boolean isBoost() {_        return boost__    };returns,whether,to,boost,terms,in,query,based,on,score,or,not,the,default,is,link,return,whether,to,boost,terms,in,query,based,on,score,or,not,see,set,boost;public,boolean,is,boost,return,boost
XMoreLikeThis -> public boolean isBoost();1541501723;Returns whether to boost terms in query based on "score" or not. The default is_{@link #DEFAULT_BOOST}.__@return whether to boost terms in query based on "score" or not._@see #setBoost;public boolean isBoost() {_        return boost__    };returns,whether,to,boost,terms,in,query,based,on,score,or,not,the,default,is,link,return,whether,to,boost,terms,in,query,based,on,score,or,not,see,set,boost;public,boolean,is,boost,return,boost
XMoreLikeThis -> public int getMaxWordLen();1524684173;Returns the maximum word length above which words will be ignored. Set this to 0 for no_maximum word length. The default is {@link #DEFAULT_MAX_WORD_LENGTH}.__@return the maximum word length above which words will be ignored.;public int getMaxWordLen() {_        return maxWordLen__    };returns,the,maximum,word,length,above,which,words,will,be,ignored,set,this,to,0,for,no,maximum,word,length,the,default,is,link,return,the,maximum,word,length,above,which,words,will,be,ignored;public,int,get,max,word,len,return,max,word,len
XMoreLikeThis -> public int getMaxWordLen();1538067637;Returns the maximum word length above which words will be ignored. Set this to 0 for no_maximum word length. The default is {@link #DEFAULT_MAX_WORD_LENGTH}.__@return the maximum word length above which words will be ignored.;public int getMaxWordLen() {_        return maxWordLen__    };returns,the,maximum,word,length,above,which,words,will,be,ignored,set,this,to,0,for,no,maximum,word,length,the,default,is,link,return,the,maximum,word,length,above,which,words,will,be,ignored;public,int,get,max,word,len,return,max,word,len
XMoreLikeThis -> public int getMaxWordLen();1540583181;Returns the maximum word length above which words will be ignored. Set this to 0 for no_maximum word length. The default is {@link #DEFAULT_MAX_WORD_LENGTH}.__@return the maximum word length above which words will be ignored.;public int getMaxWordLen() {_        return maxWordLen__    };returns,the,maximum,word,length,above,which,words,will,be,ignored,set,this,to,0,for,no,maximum,word,length,the,default,is,link,return,the,maximum,word,length,above,which,words,will,be,ignored;public,int,get,max,word,len,return,max,word,len
XMoreLikeThis -> public int getMaxWordLen();1541501723;Returns the maximum word length above which words will be ignored. Set this to 0 for no_maximum word length. The default is {@link #DEFAULT_MAX_WORD_LENGTH}.__@return the maximum word length above which words will be ignored.;public int getMaxWordLen() {_        return maxWordLen__    };returns,the,maximum,word,length,above,which,words,will,be,ignored,set,this,to,0,for,no,maximum,word,length,the,default,is,link,return,the,maximum,word,length,above,which,words,will,be,ignored;public,int,get,max,word,len,return,max,word,len
XMoreLikeThis -> public Set<?> getStopWords();1524684173;Get the current stop words being used.__@see #setStopWords;public Set<?> getStopWords() {_        return stopWords__    };get,the,current,stop,words,being,used,see,set,stop,words;public,set,get,stop,words,return,stop,words
XMoreLikeThis -> public Set<?> getStopWords();1538067637;Get the current stop words being used.__@see #setStopWords;public Set<?> getStopWords() {_        return stopWords__    };get,the,current,stop,words,being,used,see,set,stop,words;public,set,get,stop,words,return,stop,words
XMoreLikeThis -> public Set<?> getStopWords();1540583181;Get the current stop words being used.__@see #setStopWords;public Set<?> getStopWords() {_        return stopWords__    };get,the,current,stop,words,being,used,see,set,stop,words;public,set,get,stop,words,return,stop,words
XMoreLikeThis -> public Set<?> getStopWords();1541501723;Get the current stop words being used.__@see #setStopWords;public Set<?> getStopWords() {_        return stopWords__    };get,the,current,stop,words,being,used,see,set,stop,words;public,set,get,stop,words,return,stop,words
XMoreLikeThis -> public int getMaxNumTokensParsed();1524684173;@return The maximum number of tokens to parse in each example doc field that is not stored with TermVector support_@see #DEFAULT_MAX_NUM_TOKENS_PARSED;public int getMaxNumTokensParsed() {_        return maxNumTokensParsed__    };return,the,maximum,number,of,tokens,to,parse,in,each,example,doc,field,that,is,not,stored,with,term,vector,support,see;public,int,get,max,num,tokens,parsed,return,max,num,tokens,parsed
XMoreLikeThis -> public int getMaxNumTokensParsed();1538067637;@return The maximum number of tokens to parse in each example doc field that is not stored with TermVector support_@see #DEFAULT_MAX_NUM_TOKENS_PARSED;public int getMaxNumTokensParsed() {_        return maxNumTokensParsed__    };return,the,maximum,number,of,tokens,to,parse,in,each,example,doc,field,that,is,not,stored,with,term,vector,support,see;public,int,get,max,num,tokens,parsed,return,max,num,tokens,parsed
XMoreLikeThis -> public int getMaxNumTokensParsed();1540583181;@return The maximum number of tokens to parse in each example doc field that is not stored with TermVector support_@see #DEFAULT_MAX_NUM_TOKENS_PARSED;public int getMaxNumTokensParsed() {_        return maxNumTokensParsed__    };return,the,maximum,number,of,tokens,to,parse,in,each,example,doc,field,that,is,not,stored,with,term,vector,support,see;public,int,get,max,num,tokens,parsed,return,max,num,tokens,parsed
XMoreLikeThis -> public int getMaxNumTokensParsed();1541501723;@return The maximum number of tokens to parse in each example doc field that is not stored with TermVector support_@see #DEFAULT_MAX_NUM_TOKENS_PARSED;public int getMaxNumTokensParsed() {_        return maxNumTokensParsed__    };return,the,maximum,number,of,tokens,to,parse,in,each,example,doc,field,that,is,not,stored,with,term,vector,support,see;public,int,get,max,num,tokens,parsed,return,max,num,tokens,parsed
XMoreLikeThis -> public Query like(String fieldName, Reader... readers) throws IOException;1524684173;Return a query that will return docs like the passed Readers._This was added in order to treat multi-value fields.__@return a query that will return docs like the passed Readers.;public Query like(String fieldName, Reader... readers) throws IOException {_        Map<String, Int> words = new HashMap<>()__        for (Reader r : readers) {_            addTermFrequencies(r, words, fieldName)__        }_        return createQuery(createQueue(words))__    };return,a,query,that,will,return,docs,like,the,passed,readers,this,was,added,in,order,to,treat,multi,value,fields,return,a,query,that,will,return,docs,like,the,passed,readers;public,query,like,string,field,name,reader,readers,throws,ioexception,map,string,int,words,new,hash,map,for,reader,r,readers,add,term,frequencies,r,words,field,name,return,create,query,create,queue,words
XMoreLikeThis -> public Query like(String fieldName, Reader... readers) throws IOException;1538067637;Return a query that will return docs like the passed Readers._This was added in order to treat multi-value fields.__@return a query that will return docs like the passed Readers.;public Query like(String fieldName, Reader... readers) throws IOException {_        Map<String, Int> words = new HashMap<>()__        for (Reader r : readers) {_            addTermFrequencies(r, words, fieldName)__        }_        return createQuery(createQueue(words))__    };return,a,query,that,will,return,docs,like,the,passed,readers,this,was,added,in,order,to,treat,multi,value,fields,return,a,query,that,will,return,docs,like,the,passed,readers;public,query,like,string,field,name,reader,readers,throws,ioexception,map,string,int,words,new,hash,map,for,reader,r,readers,add,term,frequencies,r,words,field,name,return,create,query,create,queue,words
XMoreLikeThis -> public Query like(String fieldName, Reader... readers) throws IOException;1540583181;Return a query that will return docs like the passed Readers._This was added in order to treat multi-value fields.__@return a query that will return docs like the passed Readers.;public Query like(String fieldName, Reader... readers) throws IOException {_        Map<String, Int> words = new HashMap<>()__        for (Reader r : readers) {_            addTermFrequencies(r, words, fieldName)__        }_        return createQuery(createQueue(words))__    };return,a,query,that,will,return,docs,like,the,passed,readers,this,was,added,in,order,to,treat,multi,value,fields,return,a,query,that,will,return,docs,like,the,passed,readers;public,query,like,string,field,name,reader,readers,throws,ioexception,map,string,int,words,new,hash,map,for,reader,r,readers,add,term,frequencies,r,words,field,name,return,create,query,create,queue,words
XMoreLikeThis -> public Query like(String fieldName, Reader... readers) throws IOException;1541501723;Return a query that will return docs like the passed Readers._This was added in order to treat multi-value fields.__@return a query that will return docs like the passed Readers.;public Query like(String fieldName, Reader... readers) throws IOException {_        Map<String, Int> words = new HashMap<>()__        for (Reader r : readers) {_            addTermFrequencies(r, words, fieldName)__        }_        return createQuery(createQueue(words))__    };return,a,query,that,will,return,docs,like,the,passed,readers,this,was,added,in,order,to,treat,multi,value,fields,return,a,query,that,will,return,docs,like,the,passed,readers;public,query,like,string,field,name,reader,readers,throws,ioexception,map,string,int,words,new,hash,map,for,reader,r,readers,add,term,frequencies,r,words,field,name,return,create,query,create,queue,words
XMoreLikeThis -> public void setFieldNames(String[] fieldNames);1524684173;Sets the field names that will be used when generating the 'More Like This' query._Set this to null for the field names to be determined at runtime from the IndexReader_provided in the constructor.__@param fieldNames the field names that will be used when generating the 'More Like This'_query.;public void setFieldNames(String[] fieldNames) {_        this.fieldNames = fieldNames__    };sets,the,field,names,that,will,be,used,when,generating,the,more,like,this,query,set,this,to,null,for,the,field,names,to,be,determined,at,runtime,from,the,index,reader,provided,in,the,constructor,param,field,names,the,field,names,that,will,be,used,when,generating,the,more,like,this,query;public,void,set,field,names,string,field,names,this,field,names,field,names
XMoreLikeThis -> public void setFieldNames(String[] fieldNames);1538067637;Sets the field names that will be used when generating the 'More Like This' query._Set this to null for the field names to be determined at runtime from the IndexReader_provided in the constructor.__@param fieldNames the field names that will be used when generating the 'More Like This'_query.;public void setFieldNames(String[] fieldNames) {_        this.fieldNames = fieldNames__    };sets,the,field,names,that,will,be,used,when,generating,the,more,like,this,query,set,this,to,null,for,the,field,names,to,be,determined,at,runtime,from,the,index,reader,provided,in,the,constructor,param,field,names,the,field,names,that,will,be,used,when,generating,the,more,like,this,query;public,void,set,field,names,string,field,names,this,field,names,field,names
XMoreLikeThis -> public void setFieldNames(String[] fieldNames);1540583181;Sets the field names that will be used when generating the 'More Like This' query._Set this to null for the field names to be determined at runtime from the IndexReader_provided in the constructor.__@param fieldNames the field names that will be used when generating the 'More Like This'_query.;public void setFieldNames(String[] fieldNames) {_        this.fieldNames = fieldNames__    };sets,the,field,names,that,will,be,used,when,generating,the,more,like,this,query,set,this,to,null,for,the,field,names,to,be,determined,at,runtime,from,the,index,reader,provided,in,the,constructor,param,field,names,the,field,names,that,will,be,used,when,generating,the,more,like,this,query;public,void,set,field,names,string,field,names,this,field,names,field,names
XMoreLikeThis -> public void setFieldNames(String[] fieldNames);1541501723;Sets the field names that will be used when generating the 'More Like This' query._Set this to null for the field names to be determined at runtime from the IndexReader_provided in the constructor.__@param fieldNames the field names that will be used when generating the 'More Like This'_query.;public void setFieldNames(String[] fieldNames) {_        this.fieldNames = fieldNames__    };sets,the,field,names,that,will,be,used,when,generating,the,more,like,this,query,set,this,to,null,for,the,field,names,to,be,determined,at,runtime,from,the,index,reader,provided,in,the,constructor,param,field,names,the,field,names,that,will,be,used,when,generating,the,more,like,this,query;public,void,set,field,names,string,field,names,this,field,names,field,names
XMoreLikeThis -> public void setSkipTerms(Set<Term> skipTerms);1524684173;Sets a list of terms to never select from;public void setSkipTerms(Set<Term> skipTerms) {_        this.skipTerms = skipTerms__    };sets,a,list,of,terms,to,never,select,from;public,void,set,skip,terms,set,term,skip,terms,this,skip,terms,skip,terms
XMoreLikeThis -> public void setSkipTerms(Set<Term> skipTerms);1538067637;Sets a list of terms to never select from;public void setSkipTerms(Set<Term> skipTerms) {_        this.skipTerms = skipTerms__    };sets,a,list,of,terms,to,never,select,from;public,void,set,skip,terms,set,term,skip,terms,this,skip,terms,skip,terms
XMoreLikeThis -> public void setSkipTerms(Set<Term> skipTerms);1540583181;Sets a list of terms to never select from;public void setSkipTerms(Set<Term> skipTerms) {_        this.skipTerms = skipTerms__    };sets,a,list,of,terms,to,never,select,from;public,void,set,skip,terms,set,term,skip,terms,this,skip,terms,skip,terms
XMoreLikeThis -> public void setSkipTerms(Set<Term> skipTerms);1541501723;Sets a list of terms to never select from;public void setSkipTerms(Set<Term> skipTerms) {_        this.skipTerms = skipTerms__    };sets,a,list,of,terms,to,never,select,from;public,void,set,skip,terms,set,term,skip,terms,this,skip,terms,skip,terms
XMoreLikeThis -> public int getMinTermFreq();1524684173;Returns the frequency below which terms will be ignored in the source doc. The default_frequency is the {@link #DEFAULT_MIN_TERM_FREQ}.__@return the frequency below which terms will be ignored in the source doc.;public int getMinTermFreq() {_        return minTermFreq__    };returns,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc,the,default,frequency,is,the,link,return,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc;public,int,get,min,term,freq,return,min,term,freq
XMoreLikeThis -> public int getMinTermFreq();1538067637;Returns the frequency below which terms will be ignored in the source doc. The default_frequency is the {@link #DEFAULT_MIN_TERM_FREQ}.__@return the frequency below which terms will be ignored in the source doc.;public int getMinTermFreq() {_        return minTermFreq__    };returns,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc,the,default,frequency,is,the,link,return,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc;public,int,get,min,term,freq,return,min,term,freq
XMoreLikeThis -> public int getMinTermFreq();1540583181;Returns the frequency below which terms will be ignored in the source doc. The default_frequency is the {@link #DEFAULT_MIN_TERM_FREQ}.__@return the frequency below which terms will be ignored in the source doc.;public int getMinTermFreq() {_        return minTermFreq__    };returns,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc,the,default,frequency,is,the,link,return,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc;public,int,get,min,term,freq,return,min,term,freq
XMoreLikeThis -> public int getMinTermFreq();1541501723;Returns the frequency below which terms will be ignored in the source doc. The default_frequency is the {@link #DEFAULT_MIN_TERM_FREQ}.__@return the frequency below which terms will be ignored in the source doc.;public int getMinTermFreq() {_        return minTermFreq__    };returns,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc,the,default,frequency,is,the,link,return,the,frequency,below,which,terms,will,be,ignored,in,the,source,doc;public,int,get,min,term,freq,return,min,term,freq
XMoreLikeThis -> public void setStopWords(Set<?> stopWords);1524684173;Set the set of stopwords._Any word in this set is considered "uninteresting" and ignored._Even if your Analyzer allows stopwords, you might want to tell the MoreLikeThis code to ignore them, as_for the purposes of document similarity it seems reasonable to assume that "a stop word is never interesting".__@param stopWords set of stopwords, if null it means to allow stop words_@see #getStopWords;public void setStopWords(Set<?> stopWords) {_        this.stopWords = stopWords__    };set,the,set,of,stopwords,any,word,in,this,set,is,considered,uninteresting,and,ignored,even,if,your,analyzer,allows,stopwords,you,might,want,to,tell,the,more,like,this,code,to,ignore,them,as,for,the,purposes,of,document,similarity,it,seems,reasonable,to,assume,that,a,stop,word,is,never,interesting,param,stop,words,set,of,stopwords,if,null,it,means,to,allow,stop,words,see,get,stop,words;public,void,set,stop,words,set,stop,words,this,stop,words,stop,words
XMoreLikeThis -> public void setStopWords(Set<?> stopWords);1538067637;Set the set of stopwords._Any word in this set is considered "uninteresting" and ignored._Even if your Analyzer allows stopwords, you might want to tell the MoreLikeThis code to ignore them, as_for the purposes of document similarity it seems reasonable to assume that "a stop word is never interesting".__@param stopWords set of stopwords, if null it means to allow stop words_@see #getStopWords;public void setStopWords(Set<?> stopWords) {_        this.stopWords = stopWords__    };set,the,set,of,stopwords,any,word,in,this,set,is,considered,uninteresting,and,ignored,even,if,your,analyzer,allows,stopwords,you,might,want,to,tell,the,more,like,this,code,to,ignore,them,as,for,the,purposes,of,document,similarity,it,seems,reasonable,to,assume,that,a,stop,word,is,never,interesting,param,stop,words,set,of,stopwords,if,null,it,means,to,allow,stop,words,see,get,stop,words;public,void,set,stop,words,set,stop,words,this,stop,words,stop,words
XMoreLikeThis -> public void setStopWords(Set<?> stopWords);1540583181;Set the set of stopwords._Any word in this set is considered "uninteresting" and ignored._Even if your Analyzer allows stopwords, you might want to tell the MoreLikeThis code to ignore them, as_for the purposes of document similarity it seems reasonable to assume that "a stop word is never interesting".__@param stopWords set of stopwords, if null it means to allow stop words_@see #getStopWords;public void setStopWords(Set<?> stopWords) {_        this.stopWords = stopWords__    };set,the,set,of,stopwords,any,word,in,this,set,is,considered,uninteresting,and,ignored,even,if,your,analyzer,allows,stopwords,you,might,want,to,tell,the,more,like,this,code,to,ignore,them,as,for,the,purposes,of,document,similarity,it,seems,reasonable,to,assume,that,a,stop,word,is,never,interesting,param,stop,words,set,of,stopwords,if,null,it,means,to,allow,stop,words,see,get,stop,words;public,void,set,stop,words,set,stop,words,this,stop,words,stop,words
XMoreLikeThis -> public void setStopWords(Set<?> stopWords);1541501723;Set the set of stopwords._Any word in this set is considered "uninteresting" and ignored._Even if your Analyzer allows stopwords, you might want to tell the MoreLikeThis code to ignore them, as_for the purposes of document similarity it seems reasonable to assume that "a stop word is never interesting".__@param stopWords set of stopwords, if null it means to allow stop words_@see #getStopWords;public void setStopWords(Set<?> stopWords) {_        this.stopWords = stopWords__    };set,the,set,of,stopwords,any,word,in,this,set,is,considered,uninteresting,and,ignored,even,if,your,analyzer,allows,stopwords,you,might,want,to,tell,the,more,like,this,code,to,ignore,them,as,for,the,purposes,of,document,similarity,it,seems,reasonable,to,assume,that,a,stop,word,is,never,interesting,param,stop,words,set,of,stopwords,if,null,it,means,to,allow,stop,words,see,get,stop,words;public,void,set,stop,words,set,stop,words,this,stop,words,stop,words
XMoreLikeThis -> private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException;1524684173;Adds terms and frequencies found in vector into the Map termFreqMap__@param termFreqMap a Map of terms and their frequencies_@param vector List of terms and their frequencies for a doc/field;private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {_        addTermFrequencies(termFreqMap, vector, null)__    };adds,terms,and,frequencies,found,in,vector,into,the,map,term,freq,map,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,vector,list,of,terms,and,their,frequencies,for,a,doc,field;private,void,add,term,frequencies,map,string,int,term,freq,map,terms,vector,throws,ioexception,add,term,frequencies,term,freq,map,vector,null
XMoreLikeThis -> private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException;1538067637;Adds terms and frequencies found in vector into the Map termFreqMap__@param termFreqMap a Map of terms and their frequencies_@param vector List of terms and their frequencies for a doc/field;private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {_        addTermFrequencies(termFreqMap, vector, null)__    };adds,terms,and,frequencies,found,in,vector,into,the,map,term,freq,map,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,vector,list,of,terms,and,their,frequencies,for,a,doc,field;private,void,add,term,frequencies,map,string,int,term,freq,map,terms,vector,throws,ioexception,add,term,frequencies,term,freq,map,vector,null
XMoreLikeThis -> private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException;1540583181;Adds terms and frequencies found in vector into the Map termFreqMap__@param termFreqMap a Map of terms and their frequencies_@param vector List of terms and their frequencies for a doc/field;private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {_        addTermFrequencies(termFreqMap, vector, null)__    };adds,terms,and,frequencies,found,in,vector,into,the,map,term,freq,map,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,vector,list,of,terms,and,their,frequencies,for,a,doc,field;private,void,add,term,frequencies,map,string,int,term,freq,map,terms,vector,throws,ioexception,add,term,frequencies,term,freq,map,vector,null
XMoreLikeThis -> private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException;1541501723;Adds terms and frequencies found in vector into the Map termFreqMap__@param termFreqMap a Map of terms and their frequencies_@param vector List of terms and their frequencies for a doc/field;private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {_        addTermFrequencies(termFreqMap, vector, null)__    };adds,terms,and,frequencies,found,in,vector,into,the,map,term,freq,map,param,term,freq,map,a,map,of,terms,and,their,frequencies,param,vector,list,of,terms,and,their,frequencies,for,a,doc,field;private,void,add,term,frequencies,map,string,int,term,freq,map,terms,vector,throws,ioexception,add,term,frequencies,term,freq,map,vector,null
XMoreLikeThis -> private boolean isSkipTerm(@Nullable String field, String value);1524684173;determines if the passed term is to be skipped all together;private boolean isSkipTerm(@Nullable String field, String value) {_        return field != null && skipTerms != null && skipTerms.contains(new Term(field, value))__    };determines,if,the,passed,term,is,to,be,skipped,all,together;private,boolean,is,skip,term,nullable,string,field,string,value,return,field,null,skip,terms,null,skip,terms,contains,new,term,field,value
XMoreLikeThis -> private boolean isSkipTerm(@Nullable String field, String value);1538067637;determines if the passed term is to be skipped all together;private boolean isSkipTerm(@Nullable String field, String value) {_        return field != null && skipTerms != null && skipTerms.contains(new Term(field, value))__    };determines,if,the,passed,term,is,to,be,skipped,all,together;private,boolean,is,skip,term,nullable,string,field,string,value,return,field,null,skip,terms,null,skip,terms,contains,new,term,field,value
XMoreLikeThis -> private boolean isSkipTerm(@Nullable String field, String value);1540583181;determines if the passed term is to be skipped all together;private boolean isSkipTerm(@Nullable String field, String value) {_        return field != null && skipTerms != null && skipTerms.contains(new Term(field, value))__    };determines,if,the,passed,term,is,to,be,skipped,all,together;private,boolean,is,skip,term,nullable,string,field,string,value,return,field,null,skip,terms,null,skip,terms,contains,new,term,field,value
XMoreLikeThis -> private boolean isSkipTerm(@Nullable String field, String value);1541501723;determines if the passed term is to be skipped all together;private boolean isSkipTerm(@Nullable String field, String value) {_        return field != null && skipTerms != null && skipTerms.contains(new Term(field, value))__    };determines,if,the,passed,term,is,to,be,skipped,all,together;private,boolean,is,skip,term,nullable,string,field,string,value,return,field,null,skip,terms,null,skip,terms,contains,new,term,field,value
XMoreLikeThis -> public void setBoostFactor(float boostFactor);1524684173;Sets the boost factor to use when boosting terms__@see #getBoostFactor();public void setBoostFactor(float boostFactor) {_        this.boostFactor = boostFactor__    };sets,the,boost,factor,to,use,when,boosting,terms,see,get,boost,factor;public,void,set,boost,factor,float,boost,factor,this,boost,factor,boost,factor
XMoreLikeThis -> public void setBoostFactor(float boostFactor);1538067637;Sets the boost factor to use when boosting terms__@see #getBoostFactor();public void setBoostFactor(float boostFactor) {_        this.boostFactor = boostFactor__    };sets,the,boost,factor,to,use,when,boosting,terms,see,get,boost,factor;public,void,set,boost,factor,float,boost,factor,this,boost,factor,boost,factor
XMoreLikeThis -> public void setBoostFactor(float boostFactor);1540583181;Sets the boost factor to use when boosting terms__@see #getBoostFactor();public void setBoostFactor(float boostFactor) {_        this.boostFactor = boostFactor__    };sets,the,boost,factor,to,use,when,boosting,terms,see,get,boost,factor;public,void,set,boost,factor,float,boost,factor,this,boost,factor,boost,factor
XMoreLikeThis -> public void setBoostFactor(float boostFactor);1541501723;Sets the boost factor to use when boosting terms__@see #getBoostFactor();public void setBoostFactor(float boostFactor) {_        this.boostFactor = boostFactor__    };sets,the,boost,factor,to,use,when,boosting,terms,see,get,boost,factor;public,void,set,boost,factor,float,boost,factor,this,boost,factor,boost,factor
XMoreLikeThis -> public void setMaxDocFreq(int maxFreq);1524684173;Set the maximum frequency in which words may still appear. Words that appear_in more than this many docs will be ignored.__@param maxFreq the maximum count of documents that a term may appear_in to be still considered relevant;public void setMaxDocFreq(int maxFreq) {_        this.maxDocFreq = maxFreq__    };set,the,maximum,frequency,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,docs,will,be,ignored,param,max,freq,the,maximum,count,of,documents,that,a,term,may,appear,in,to,be,still,considered,relevant;public,void,set,max,doc,freq,int,max,freq,this,max,doc,freq,max,freq
XMoreLikeThis -> public void setMaxDocFreq(int maxFreq);1538067637;Set the maximum frequency in which words may still appear. Words that appear_in more than this many docs will be ignored.__@param maxFreq the maximum count of documents that a term may appear_in to be still considered relevant;public void setMaxDocFreq(int maxFreq) {_        this.maxDocFreq = maxFreq__    };set,the,maximum,frequency,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,docs,will,be,ignored,param,max,freq,the,maximum,count,of,documents,that,a,term,may,appear,in,to,be,still,considered,relevant;public,void,set,max,doc,freq,int,max,freq,this,max,doc,freq,max,freq
XMoreLikeThis -> public void setMaxDocFreq(int maxFreq);1540583181;Set the maximum frequency in which words may still appear. Words that appear_in more than this many docs will be ignored.__@param maxFreq the maximum count of documents that a term may appear_in to be still considered relevant;public void setMaxDocFreq(int maxFreq) {_        this.maxDocFreq = maxFreq__    };set,the,maximum,frequency,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,docs,will,be,ignored,param,max,freq,the,maximum,count,of,documents,that,a,term,may,appear,in,to,be,still,considered,relevant;public,void,set,max,doc,freq,int,max,freq,this,max,doc,freq,max,freq
XMoreLikeThis -> public void setMaxDocFreq(int maxFreq);1541501723;Set the maximum frequency in which words may still appear. Words that appear_in more than this many docs will be ignored.__@param maxFreq the maximum count of documents that a term may appear_in to be still considered relevant;public void setMaxDocFreq(int maxFreq) {_        this.maxDocFreq = maxFreq__    };set,the,maximum,frequency,in,which,words,may,still,appear,words,that,appear,in,more,than,this,many,docs,will,be,ignored,param,max,freq,the,maximum,count,of,documents,that,a,term,may,appear,in,to,be,still,considered,relevant;public,void,set,max,doc,freq,int,max,freq,this,max,doc,freq,max,freq
XMoreLikeThis -> public void setBoost(boolean boost);1524684173;Sets whether to boost terms in query based on "score" or not.__@param boost true to boost terms in query based on "score", false otherwise._@see #isBoost;public void setBoost(boolean boost) {_        this.boost = boost__    };sets,whether,to,boost,terms,in,query,based,on,score,or,not,param,boost,true,to,boost,terms,in,query,based,on,score,false,otherwise,see,is,boost;public,void,set,boost,boolean,boost,this,boost,boost
XMoreLikeThis -> public void setBoost(boolean boost);1538067637;Sets whether to boost terms in query based on "score" or not.__@param boost true to boost terms in query based on "score", false otherwise._@see #isBoost;public void setBoost(boolean boost) {_        this.boost = boost__    };sets,whether,to,boost,terms,in,query,based,on,score,or,not,param,boost,true,to,boost,terms,in,query,based,on,score,false,otherwise,see,is,boost;public,void,set,boost,boolean,boost,this,boost,boost
XMoreLikeThis -> public void setBoost(boolean boost);1540583181;Sets whether to boost terms in query based on "score" or not.__@param boost true to boost terms in query based on "score", false otherwise._@see #isBoost;public void setBoost(boolean boost) {_        this.boost = boost__    };sets,whether,to,boost,terms,in,query,based,on,score,or,not,param,boost,true,to,boost,terms,in,query,based,on,score,false,otherwise,see,is,boost;public,void,set,boost,boolean,boost,this,boost,boost
XMoreLikeThis -> public void setBoost(boolean boost);1541501723;Sets whether to boost terms in query based on "score" or not.__@param boost true to boost terms in query based on "score", false otherwise._@see #isBoost;public void setBoost(boolean boost) {_        this.boost = boost__    };sets,whether,to,boost,terms,in,query,based,on,score,or,not,param,boost,true,to,boost,terms,in,query,based,on,score,false,otherwise,see,is,boost;public,void,set,boost,boolean,boost,this,boost,boost
XMoreLikeThis -> public String[] retrieveInterestingTerms(int docNum) throws IOException;1524684173;@see #retrieveInterestingTerms(java.io.Reader, String);public String[] retrieveInterestingTerms(int docNum) throws IOException {_        ArrayList<Object> al = new ArrayList<>(maxQueryTerms)__        PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum)__        ScoreTerm scoreTerm__        int lim = maxQueryTerms_ _        _        while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {_            al.add(scoreTerm.word)_ _        }_        String[] res = new String[al.size()]__        return al.toArray(res)__    };see,retrieve,interesting,terms,java,io,reader,string;public,string,retrieve,interesting,terms,int,doc,num,throws,ioexception,array,list,object,al,new,array,list,max,query,terms,priority,queue,score,term,pq,retrieve,terms,doc,num,score,term,score,term,int,lim,max,query,terms,while,score,term,pq,pop,null,lim,0,al,add,score,term,word,string,res,new,string,al,size,return,al,to,array,res
XMoreLikeThis -> public String[] retrieveInterestingTerms(int docNum) throws IOException;1538067637;@see #retrieveInterestingTerms(java.io.Reader, String);public String[] retrieveInterestingTerms(int docNum) throws IOException {_        ArrayList<Object> al = new ArrayList<>(maxQueryTerms)__        PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum)__        ScoreTerm scoreTerm__        int lim = maxQueryTerms_ _        _        while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {_            al.add(scoreTerm.word)_ _        }_        String[] res = new String[al.size()]__        return al.toArray(res)__    };see,retrieve,interesting,terms,java,io,reader,string;public,string,retrieve,interesting,terms,int,doc,num,throws,ioexception,array,list,object,al,new,array,list,max,query,terms,priority,queue,score,term,pq,retrieve,terms,doc,num,score,term,score,term,int,lim,max,query,terms,while,score,term,pq,pop,null,lim,0,al,add,score,term,word,string,res,new,string,al,size,return,al,to,array,res
XMoreLikeThis -> public String[] retrieveInterestingTerms(int docNum) throws IOException;1540583181;@see #retrieveInterestingTerms(java.io.Reader, String);public String[] retrieveInterestingTerms(int docNum) throws IOException {_        ArrayList<Object> al = new ArrayList<>(maxQueryTerms)__        PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum)__        ScoreTerm scoreTerm__        int lim = maxQueryTerms_ _        _        while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {_            al.add(scoreTerm.word)_ _        }_        String[] res = new String[al.size()]__        return al.toArray(res)__    };see,retrieve,interesting,terms,java,io,reader,string;public,string,retrieve,interesting,terms,int,doc,num,throws,ioexception,array,list,object,al,new,array,list,max,query,terms,priority,queue,score,term,pq,retrieve,terms,doc,num,score,term,score,term,int,lim,max,query,terms,while,score,term,pq,pop,null,lim,0,al,add,score,term,word,string,res,new,string,al,size,return,al,to,array,res
XMoreLikeThis -> public String[] retrieveInterestingTerms(int docNum) throws IOException;1541501723;@see #retrieveInterestingTerms(java.io.Reader, String);public String[] retrieveInterestingTerms(int docNum) throws IOException {_        ArrayList<Object> al = new ArrayList<>(maxQueryTerms)__        PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum)__        ScoreTerm scoreTerm__        int lim = maxQueryTerms_ _        _        while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {_            al.add(scoreTerm.word)_ _        }_        String[] res = new String[al.size()]__        return al.toArray(res)__    };see,retrieve,interesting,terms,java,io,reader,string;public,string,retrieve,interesting,terms,int,doc,num,throws,ioexception,array,list,object,al,new,array,list,max,query,terms,priority,queue,score,term,pq,retrieve,terms,doc,num,score,term,score,term,int,lim,max,query,terms,while,score,term,pq,pop,null,lim,0,al,add,score,term,word,string,res,new,string,al,size,return,al,to,array,res
XMoreLikeThis -> private boolean isNoiseWord(String term);1524684173;determines if the passed term is likely to be of interest in "more like" comparisons__@param term The word being considered_@return true if should be ignored, false if should be used in further analysis;private boolean isNoiseWord(String term) {_        int len = term.length()__        if (minWordLen > 0 && len < minWordLen) {_            return true__        }_        if (maxWordLen > 0 && len > maxWordLen) {_            return true__        }_        return stopWords != null && stopWords.contains(term)__    };determines,if,the,passed,term,is,likely,to,be,of,interest,in,more,like,comparisons,param,term,the,word,being,considered,return,true,if,should,be,ignored,false,if,should,be,used,in,further,analysis;private,boolean,is,noise,word,string,term,int,len,term,length,if,min,word,len,0,len,min,word,len,return,true,if,max,word,len,0,len,max,word,len,return,true,return,stop,words,null,stop,words,contains,term
XMoreLikeThis -> private boolean isNoiseWord(String term);1538067637;determines if the passed term is likely to be of interest in "more like" comparisons__@param term The word being considered_@return true if should be ignored, false if should be used in further analysis;private boolean isNoiseWord(String term) {_        int len = term.length()__        if (minWordLen > 0 && len < minWordLen) {_            return true__        }_        if (maxWordLen > 0 && len > maxWordLen) {_            return true__        }_        return stopWords != null && stopWords.contains(term)__    };determines,if,the,passed,term,is,likely,to,be,of,interest,in,more,like,comparisons,param,term,the,word,being,considered,return,true,if,should,be,ignored,false,if,should,be,used,in,further,analysis;private,boolean,is,noise,word,string,term,int,len,term,length,if,min,word,len,0,len,min,word,len,return,true,if,max,word,len,0,len,max,word,len,return,true,return,stop,words,null,stop,words,contains,term
XMoreLikeThis -> private boolean isNoiseWord(String term);1540583181;determines if the passed term is likely to be of interest in "more like" comparisons__@param term The word being considered_@return true if should be ignored, false if should be used in further analysis;private boolean isNoiseWord(String term) {_        int len = term.length()__        if (minWordLen > 0 && len < minWordLen) {_            return true__        }_        if (maxWordLen > 0 && len > maxWordLen) {_            return true__        }_        return stopWords != null && stopWords.contains(term)__    };determines,if,the,passed,term,is,likely,to,be,of,interest,in,more,like,comparisons,param,term,the,word,being,considered,return,true,if,should,be,ignored,false,if,should,be,used,in,further,analysis;private,boolean,is,noise,word,string,term,int,len,term,length,if,min,word,len,0,len,min,word,len,return,true,if,max,word,len,0,len,max,word,len,return,true,return,stop,words,null,stop,words,contains,term
XMoreLikeThis -> private boolean isNoiseWord(String term);1541501723;determines if the passed term is likely to be of interest in "more like" comparisons__@param term The word being considered_@return true if should be ignored, false if should be used in further analysis;private boolean isNoiseWord(String term) {_        int len = term.length()__        if (minWordLen > 0 && len < minWordLen) {_            return true__        }_        if (maxWordLen > 0 && len > maxWordLen) {_            return true__        }_        return stopWords != null && stopWords.contains(term)__    };determines,if,the,passed,term,is,likely,to,be,of,interest,in,more,like,comparisons,param,term,the,word,being,considered,return,true,if,should,be,ignored,false,if,should,be,used,in,further,analysis;private,boolean,is,noise,word,string,term,int,len,term,length,if,min,word,len,0,len,min,word,len,return,true,if,max,word,len,0,len,max,word,len,return,true,return,stop,words,null,stop,words,contains,term
XMoreLikeThis -> public XMoreLikeThis(IndexReader ir);1524684173;Constructor requiring an IndexReader.;public XMoreLikeThis(IndexReader ir) {_        this(ir, new ClassicSimilarity())__    };constructor,requiring,an,index,reader;public,xmore,like,this,index,reader,ir,this,ir,new,classic,similarity
XMoreLikeThis -> public XMoreLikeThis(IndexReader ir);1538067637;Constructor requiring an IndexReader.;public XMoreLikeThis(IndexReader ir) {_        this(ir, new ClassicSimilarity())__    };constructor,requiring,an,index,reader;public,xmore,like,this,index,reader,ir,this,ir,new,classic,similarity
XMoreLikeThis -> public XMoreLikeThis(IndexReader ir);1540583181;Constructor requiring an IndexReader.;public XMoreLikeThis(IndexReader ir) {_        this(ir, new ClassicSimilarity())__    };constructor,requiring,an,index,reader;public,xmore,like,this,index,reader,ir,this,ir,new,classic,similarity
XMoreLikeThis -> public XMoreLikeThis(IndexReader ir);1541501723;Constructor requiring an IndexReader.;public XMoreLikeThis(IndexReader ir) {_        this(ir, new ClassicSimilarity())__    };constructor,requiring,an,index,reader;public,xmore,like,this,index,reader,ir,this,ir,new,classic,similarity
XMoreLikeThis -> public String describeParams();1524684173;Describe the parameters that control how the "more like this" query is formed.;public String describeParams() {_        StringBuilder sb = new StringBuilder()__        sb.append("\t").append("maxQueryTerms  : ").append(maxQueryTerms).append("\n")__        sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n")__        sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n")__        sb.append("\t").append("fieldNames     : ")__        String delim = ""__        for (String fieldName : fieldNames) {_            sb.append(delim).append(fieldName)__            delim = ", "__        }_        sb.append("\n")__        sb.append("\t").append("boost          : ").append(boost).append("\n")__        sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n")__        sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n")__        return sb.toString()__    };describe,the,parameters,that,control,how,the,more,like,this,query,is,formed;public,string,describe,params,string,builder,sb,new,string,builder,sb,append,t,append,max,query,terms,append,max,query,terms,append,n,sb,append,t,append,min,word,len,append,min,word,len,append,n,sb,append,t,append,max,word,len,append,max,word,len,append,n,sb,append,t,append,field,names,string,delim,for,string,field,name,field,names,sb,append,delim,append,field,name,delim,sb,append,n,sb,append,t,append,boost,append,boost,append,n,sb,append,t,append,min,term,freq,append,min,term,freq,append,n,sb,append,t,append,min,doc,freq,append,min,doc,freq,append,n,return,sb,to,string
XMoreLikeThis -> public String describeParams();1538067637;Describe the parameters that control how the "more like this" query is formed.;public String describeParams() {_        StringBuilder sb = new StringBuilder()__        sb.append("\t").append("maxQueryTerms  : ").append(maxQueryTerms).append("\n")__        sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n")__        sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n")__        sb.append("\t").append("fieldNames     : ")__        String delim = ""__        for (String fieldName : fieldNames) {_            sb.append(delim).append(fieldName)__            delim = ", "__        }_        sb.append("\n")__        sb.append("\t").append("boost          : ").append(boost).append("\n")__        sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n")__        sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n")__        return sb.toString()__    };describe,the,parameters,that,control,how,the,more,like,this,query,is,formed;public,string,describe,params,string,builder,sb,new,string,builder,sb,append,t,append,max,query,terms,append,max,query,terms,append,n,sb,append,t,append,min,word,len,append,min,word,len,append,n,sb,append,t,append,max,word,len,append,max,word,len,append,n,sb,append,t,append,field,names,string,delim,for,string,field,name,field,names,sb,append,delim,append,field,name,delim,sb,append,n,sb,append,t,append,boost,append,boost,append,n,sb,append,t,append,min,term,freq,append,min,term,freq,append,n,sb,append,t,append,min,doc,freq,append,min,doc,freq,append,n,return,sb,to,string
XMoreLikeThis -> public String describeParams();1540583181;Describe the parameters that control how the "more like this" query is formed.;public String describeParams() {_        StringBuilder sb = new StringBuilder()__        sb.append("\t").append("maxQueryTerms  : ").append(maxQueryTerms).append("\n")__        sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n")__        sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n")__        sb.append("\t").append("fieldNames     : ")__        String delim = ""__        for (String fieldName : fieldNames) {_            sb.append(delim).append(fieldName)__            delim = ", "__        }_        sb.append("\n")__        sb.append("\t").append("boost          : ").append(boost).append("\n")__        sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n")__        sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n")__        return sb.toString()__    };describe,the,parameters,that,control,how,the,more,like,this,query,is,formed;public,string,describe,params,string,builder,sb,new,string,builder,sb,append,t,append,max,query,terms,append,max,query,terms,append,n,sb,append,t,append,min,word,len,append,min,word,len,append,n,sb,append,t,append,max,word,len,append,max,word,len,append,n,sb,append,t,append,field,names,string,delim,for,string,field,name,field,names,sb,append,delim,append,field,name,delim,sb,append,n,sb,append,t,append,boost,append,boost,append,n,sb,append,t,append,min,term,freq,append,min,term,freq,append,n,sb,append,t,append,min,doc,freq,append,min,doc,freq,append,n,return,sb,to,string
XMoreLikeThis -> public String describeParams();1541501723;Describe the parameters that control how the "more like this" query is formed.;public String describeParams() {_        StringBuilder sb = new StringBuilder()__        sb.append("\t").append("maxQueryTerms  : ").append(maxQueryTerms).append("\n")__        sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n")__        sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n")__        sb.append("\t").append("fieldNames     : ")__        String delim = ""__        for (String fieldName : fieldNames) {_            sb.append(delim).append(fieldName)__            delim = ", "__        }_        sb.append("\n")__        sb.append("\t").append("boost          : ").append(boost).append("\n")__        sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n")__        sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n")__        return sb.toString()__    };describe,the,parameters,that,control,how,the,more,like,this,query,is,formed;public,string,describe,params,string,builder,sb,new,string,builder,sb,append,t,append,max,query,terms,append,max,query,terms,append,n,sb,append,t,append,min,word,len,append,min,word,len,append,n,sb,append,t,append,max,word,len,append,max,word,len,append,n,sb,append,t,append,field,names,string,delim,for,string,field,name,field,names,sb,append,delim,append,field,name,delim,sb,append,n,sb,append,t,append,boost,append,boost,append,n,sb,append,t,append,min,term,freq,append,min,term,freq,append,n,sb,append,t,append,min,doc,freq,append,min,doc,freq,append,n,return,sb,to,string
XMoreLikeThis -> public int getMaxQueryTerms();1524684173;Returns the maximum number of query terms that will be included in any generated query._The default is {@link #DEFAULT_MAX_QUERY_TERMS}.__@return the maximum number of query terms that will be included in any generated query.;public int getMaxQueryTerms() {_        return maxQueryTerms__    };returns,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query,the,default,is,link,return,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query;public,int,get,max,query,terms,return,max,query,terms
XMoreLikeThis -> public int getMaxQueryTerms();1538067637;Returns the maximum number of query terms that will be included in any generated query._The default is {@link #DEFAULT_MAX_QUERY_TERMS}.__@return the maximum number of query terms that will be included in any generated query.;public int getMaxQueryTerms() {_        return maxQueryTerms__    };returns,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query,the,default,is,link,return,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query;public,int,get,max,query,terms,return,max,query,terms
XMoreLikeThis -> public int getMaxQueryTerms();1540583181;Returns the maximum number of query terms that will be included in any generated query._The default is {@link #DEFAULT_MAX_QUERY_TERMS}.__@return the maximum number of query terms that will be included in any generated query.;public int getMaxQueryTerms() {_        return maxQueryTerms__    };returns,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query,the,default,is,link,return,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query;public,int,get,max,query,terms,return,max,query,terms
XMoreLikeThis -> public int getMaxQueryTerms();1541501723;Returns the maximum number of query terms that will be included in any generated query._The default is {@link #DEFAULT_MAX_QUERY_TERMS}.__@return the maximum number of query terms that will be included in any generated query.;public int getMaxQueryTerms() {_        return maxQueryTerms__    };returns,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query,the,default,is,link,return,the,maximum,number,of,query,terms,that,will,be,included,in,any,generated,query;public,int,get,max,query,terms,return,max,query,terms
XMoreLikeThis -> private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException;1524684173;Create a PriorityQueue from a word-&gt_tf map.__@param words a map of words keyed on the word(String) with Int objects as the values._@param fieldNames an array of field names to override defaults.;private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException {_        _        int numDocs = ir.numDocs()__        final int limit = Math.min(maxQueryTerms, words.size())__        FreqQ queue = new FreqQ(limit)_ __        for (String word : words.keySet()) { _            int tf = words.get(word).x_ _            if (minTermFreq > 0 && tf < minTermFreq) {_                continue_ _            }__            _            String topField = fieldNames[0]__            int docFreq = 0__            for (String fieldName : fieldNames) {_                int freq = ir.docFreq(new Term(fieldName, word))__                topField = (freq > docFreq) ? fieldName : topField__                docFreq = (freq > docFreq) ? freq : docFreq__            }__            if (minDocFreq > 0 && docFreq < minDocFreq) {_                continue_ _            }__            if (docFreq > maxDocFreq) {_                continue_ _            }__            if (docFreq == 0) {_                continue_ _            }__            float idf = similarity.idf(docFreq, numDocs)__            float score = tf * idf___            if (queue.size() < limit) {_                _                queue.add(new ScoreTerm(word, topField, score, idf, docFreq, tf))__            } else {_                ScoreTerm term = queue.top()__                if (term.score < score) { _                    term.update(word, topField, score, idf, docFreq, tf)__                    queue.updateTop()__                }_            }_        }_        return queue__    };create,a,priority,queue,from,a,word,gt,tf,map,param,words,a,map,of,words,keyed,on,the,word,string,with,int,objects,as,the,values,param,field,names,an,array,of,field,names,to,override,defaults;private,priority,queue,score,term,create,queue,map,string,int,words,string,field,names,throws,ioexception,int,num,docs,ir,num,docs,final,int,limit,math,min,max,query,terms,words,size,freq,q,queue,new,freq,q,limit,for,string,word,words,key,set,int,tf,words,get,word,x,if,min,term,freq,0,tf,min,term,freq,continue,string,top,field,field,names,0,int,doc,freq,0,for,string,field,name,field,names,int,freq,ir,doc,freq,new,term,field,name,word,top,field,freq,doc,freq,field,name,top,field,doc,freq,freq,doc,freq,freq,doc,freq,if,min,doc,freq,0,doc,freq,min,doc,freq,continue,if,doc,freq,max,doc,freq,continue,if,doc,freq,0,continue,float,idf,similarity,idf,doc,freq,num,docs,float,score,tf,idf,if,queue,size,limit,queue,add,new,score,term,word,top,field,score,idf,doc,freq,tf,else,score,term,term,queue,top,if,term,score,score,term,update,word,top,field,score,idf,doc,freq,tf,queue,update,top,return,queue
XMoreLikeThis -> private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException;1538067637;Create a PriorityQueue from a word-&gt_tf map.__@param words a map of words keyed on the word(String) with Int objects as the values._@param fieldNames an array of field names to override defaults.;private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException {_        _        int numDocs = ir.numDocs()__        final int limit = Math.min(maxQueryTerms, words.size())__        FreqQ queue = new FreqQ(limit)_ __        for (String word : words.keySet()) { _            int tf = words.get(word).x_ _            if (minTermFreq > 0 && tf < minTermFreq) {_                continue_ _            }__            _            String topField = fieldNames[0]__            int docFreq = 0__            for (String fieldName : fieldNames) {_                int freq = ir.docFreq(new Term(fieldName, word))__                topField = (freq > docFreq) ? fieldName : topField__                docFreq = (freq > docFreq) ? freq : docFreq__            }__            if (minDocFreq > 0 && docFreq < minDocFreq) {_                continue_ _            }__            if (docFreq > maxDocFreq) {_                continue_ _            }__            if (docFreq == 0) {_                continue_ _            }__            float idf = similarity.idf(docFreq, numDocs)__            float score = tf * idf___            if (queue.size() < limit) {_                _                queue.add(new ScoreTerm(word, topField, score))__            } else {_                ScoreTerm term = queue.top()__                if (term.score < score) { _                    term.update(word, topField, score)__                    queue.updateTop()__                }_            }_        }_        return queue__    };create,a,priority,queue,from,a,word,gt,tf,map,param,words,a,map,of,words,keyed,on,the,word,string,with,int,objects,as,the,values,param,field,names,an,array,of,field,names,to,override,defaults;private,priority,queue,score,term,create,queue,map,string,int,words,string,field,names,throws,ioexception,int,num,docs,ir,num,docs,final,int,limit,math,min,max,query,terms,words,size,freq,q,queue,new,freq,q,limit,for,string,word,words,key,set,int,tf,words,get,word,x,if,min,term,freq,0,tf,min,term,freq,continue,string,top,field,field,names,0,int,doc,freq,0,for,string,field,name,field,names,int,freq,ir,doc,freq,new,term,field,name,word,top,field,freq,doc,freq,field,name,top,field,doc,freq,freq,doc,freq,freq,doc,freq,if,min,doc,freq,0,doc,freq,min,doc,freq,continue,if,doc,freq,max,doc,freq,continue,if,doc,freq,0,continue,float,idf,similarity,idf,doc,freq,num,docs,float,score,tf,idf,if,queue,size,limit,queue,add,new,score,term,word,top,field,score,else,score,term,term,queue,top,if,term,score,score,term,update,word,top,field,score,queue,update,top,return,queue
XMoreLikeThis -> private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException;1540583181;Create a PriorityQueue from a word-&gt_tf map.__@param words a map of words keyed on the word(String) with Int objects as the values._@param fieldNames an array of field names to override defaults.;private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException {_        _        int numDocs = ir.numDocs()__        final int limit = Math.min(maxQueryTerms, words.size())__        FreqQ queue = new FreqQ(limit)_ __        for (String word : words.keySet()) { _            int tf = words.get(word).x_ _            if (minTermFreq > 0 && tf < minTermFreq) {_                continue_ _            }__            _            String topField = fieldNames[0]__            int docFreq = 0__            for (String fieldName : fieldNames) {_                int freq = ir.docFreq(new Term(fieldName, word))__                topField = (freq > docFreq) ? fieldName : topField__                docFreq = (freq > docFreq) ? freq : docFreq__            }__            if (minDocFreq > 0 && docFreq < minDocFreq) {_                continue_ _            }__            if (docFreq > maxDocFreq) {_                continue_ _            }__            if (docFreq == 0) {_                continue_ _            }__            float idf = similarity.idf(docFreq, numDocs)__            float score = tf * idf___            if (queue.size() < limit) {_                _                queue.add(new ScoreTerm(word, topField, score))__            } else {_                ScoreTerm term = queue.top()__                if (term.score < score) { _                    term.update(word, topField, score)__                    queue.updateTop()__                }_            }_        }_        return queue__    };create,a,priority,queue,from,a,word,gt,tf,map,param,words,a,map,of,words,keyed,on,the,word,string,with,int,objects,as,the,values,param,field,names,an,array,of,field,names,to,override,defaults;private,priority,queue,score,term,create,queue,map,string,int,words,string,field,names,throws,ioexception,int,num,docs,ir,num,docs,final,int,limit,math,min,max,query,terms,words,size,freq,q,queue,new,freq,q,limit,for,string,word,words,key,set,int,tf,words,get,word,x,if,min,term,freq,0,tf,min,term,freq,continue,string,top,field,field,names,0,int,doc,freq,0,for,string,field,name,field,names,int,freq,ir,doc,freq,new,term,field,name,word,top,field,freq,doc,freq,field,name,top,field,doc,freq,freq,doc,freq,freq,doc,freq,if,min,doc,freq,0,doc,freq,min,doc,freq,continue,if,doc,freq,max,doc,freq,continue,if,doc,freq,0,continue,float,idf,similarity,idf,doc,freq,num,docs,float,score,tf,idf,if,queue,size,limit,queue,add,new,score,term,word,top,field,score,else,score,term,term,queue,top,if,term,score,score,term,update,word,top,field,score,queue,update,top,return,queue
XMoreLikeThis -> private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException;1541501723;Create a PriorityQueue from a word-&gt_tf map.__@param words a map of words keyed on the word(String) with Int objects as the values._@param fieldNames an array of field names to override defaults.;private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException {_        _        int numDocs = ir.numDocs()__        final int limit = Math.min(maxQueryTerms, words.size())__        FreqQ queue = new FreqQ(limit)_ __        for (String word : words.keySet()) { _            int tf = words.get(word).x_ _            if (minTermFreq > 0 && tf < minTermFreq) {_                continue_ _            }__            _            String topField = fieldNames[0]__            int docFreq = 0__            for (String fieldName : fieldNames) {_                int freq = ir.docFreq(new Term(fieldName, word))__                topField = (freq > docFreq) ? fieldName : topField__                docFreq = (freq > docFreq) ? freq : docFreq__            }__            if (minDocFreq > 0 && docFreq < minDocFreq) {_                continue_ _            }__            if (docFreq > maxDocFreq) {_                continue_ _            }__            if (docFreq == 0) {_                continue_ _            }__            float idf = similarity.idf(docFreq, numDocs)__            float score = tf * idf___            if (queue.size() < limit) {_                _                queue.add(new ScoreTerm(word, topField, score))__            } else {_                ScoreTerm term = queue.top()__                if (term.score < score) { _                    term.update(word, topField, score)__                    queue.updateTop()__                }_            }_        }_        return queue__    };create,a,priority,queue,from,a,word,gt,tf,map,param,words,a,map,of,words,keyed,on,the,word,string,with,int,objects,as,the,values,param,field,names,an,array,of,field,names,to,override,defaults;private,priority,queue,score,term,create,queue,map,string,int,words,string,field,names,throws,ioexception,int,num,docs,ir,num,docs,final,int,limit,math,min,max,query,terms,words,size,freq,q,queue,new,freq,q,limit,for,string,word,words,key,set,int,tf,words,get,word,x,if,min,term,freq,0,tf,min,term,freq,continue,string,top,field,field,names,0,int,doc,freq,0,for,string,field,name,field,names,int,freq,ir,doc,freq,new,term,field,name,word,top,field,freq,doc,freq,field,name,top,field,doc,freq,freq,doc,freq,freq,doc,freq,if,min,doc,freq,0,doc,freq,min,doc,freq,continue,if,doc,freq,max,doc,freq,continue,if,doc,freq,0,continue,float,idf,similarity,idf,doc,freq,num,docs,float,score,tf,idf,if,queue,size,limit,queue,add,new,score,term,word,top,field,score,else,score,term,term,queue,top,if,term,score,score,term,update,word,top,field,score,queue,update,top,return,queue
XMoreLikeThis -> private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words) throws IOException;1524684173;Create a PriorityQueue from a word-&gt_tf map.__@param words a map of words keyed on the word(String) with Int objects as the values.;private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words) throws IOException {_        return createQueue(words, this.fieldNames)__    };create,a,priority,queue,from,a,word,gt,tf,map,param,words,a,map,of,words,keyed,on,the,word,string,with,int,objects,as,the,values;private,priority,queue,score,term,create,queue,map,string,int,words,throws,ioexception,return,create,queue,words,this,field,names
XMoreLikeThis -> private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words) throws IOException;1538067637;Create a PriorityQueue from a word-&gt_tf map.__@param words a map of words keyed on the word(String) with Int objects as the values.;private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words) throws IOException {_        return createQueue(words, this.fieldNames)__    };create,a,priority,queue,from,a,word,gt,tf,map,param,words,a,map,of,words,keyed,on,the,word,string,with,int,objects,as,the,values;private,priority,queue,score,term,create,queue,map,string,int,words,throws,ioexception,return,create,queue,words,this,field,names
XMoreLikeThis -> private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words) throws IOException;1540583181;Create a PriorityQueue from a word-&gt_tf map.__@param words a map of words keyed on the word(String) with Int objects as the values.;private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words) throws IOException {_        return createQueue(words, this.fieldNames)__    };create,a,priority,queue,from,a,word,gt,tf,map,param,words,a,map,of,words,keyed,on,the,word,string,with,int,objects,as,the,values;private,priority,queue,score,term,create,queue,map,string,int,words,throws,ioexception,return,create,queue,words,this,field,names
XMoreLikeThis -> private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words) throws IOException;1541501723;Create a PriorityQueue from a word-&gt_tf map.__@param words a map of words keyed on the word(String) with Int objects as the values.;private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words) throws IOException {_        return createQueue(words, this.fieldNames)__    };create,a,priority,queue,from,a,word,gt,tf,map,param,words,a,map,of,words,keyed,on,the,word,string,with,int,objects,as,the,values;private,priority,queue,score,term,create,queue,map,string,int,words,throws,ioexception,return,create,queue,words,this,field,names
XMoreLikeThis -> public void setMaxWordLen(int maxWordLen);1524684173;Sets the maximum word length above which words will be ignored.__@param maxWordLen the maximum word length above which words will be ignored.;public void setMaxWordLen(int maxWordLen) {_        this.maxWordLen = maxWordLen__    };sets,the,maximum,word,length,above,which,words,will,be,ignored,param,max,word,len,the,maximum,word,length,above,which,words,will,be,ignored;public,void,set,max,word,len,int,max,word,len,this,max,word,len,max,word,len
XMoreLikeThis -> public void setMaxWordLen(int maxWordLen);1538067637;Sets the maximum word length above which words will be ignored.__@param maxWordLen the maximum word length above which words will be ignored.;public void setMaxWordLen(int maxWordLen) {_        this.maxWordLen = maxWordLen__    };sets,the,maximum,word,length,above,which,words,will,be,ignored,param,max,word,len,the,maximum,word,length,above,which,words,will,be,ignored;public,void,set,max,word,len,int,max,word,len,this,max,word,len,max,word,len
XMoreLikeThis -> public void setMaxWordLen(int maxWordLen);1540583181;Sets the maximum word length above which words will be ignored.__@param maxWordLen the maximum word length above which words will be ignored.;public void setMaxWordLen(int maxWordLen) {_        this.maxWordLen = maxWordLen__    };sets,the,maximum,word,length,above,which,words,will,be,ignored,param,max,word,len,the,maximum,word,length,above,which,words,will,be,ignored;public,void,set,max,word,len,int,max,word,len,this,max,word,len,max,word,len
XMoreLikeThis -> public void setMaxWordLen(int maxWordLen);1541501723;Sets the maximum word length above which words will be ignored.__@param maxWordLen the maximum word length above which words will be ignored.;public void setMaxWordLen(int maxWordLen) {_        this.maxWordLen = maxWordLen__    };sets,the,maximum,word,length,above,which,words,will,be,ignored,param,max,word,len,the,maximum,word,length,above,which,words,will,be,ignored;public,void,set,max,word,len,int,max,word,len,this,max,word,len,max,word,len
XMoreLikeThis -> public int getMinWordLen();1524684173;Returns the minimum word length below which words will be ignored. Set this to 0 for no_minimum word length. The default is {@link #DEFAULT_MIN_WORD_LENGTH}.__@return the minimum word length below which words will be ignored.;public int getMinWordLen() {_        return minWordLen__    };returns,the,minimum,word,length,below,which,words,will,be,ignored,set,this,to,0,for,no,minimum,word,length,the,default,is,link,return,the,minimum,word,length,below,which,words,will,be,ignored;public,int,get,min,word,len,return,min,word,len
XMoreLikeThis -> public int getMinWordLen();1538067637;Returns the minimum word length below which words will be ignored. Set this to 0 for no_minimum word length. The default is {@link #DEFAULT_MIN_WORD_LENGTH}.__@return the minimum word length below which words will be ignored.;public int getMinWordLen() {_        return minWordLen__    };returns,the,minimum,word,length,below,which,words,will,be,ignored,set,this,to,0,for,no,minimum,word,length,the,default,is,link,return,the,minimum,word,length,below,which,words,will,be,ignored;public,int,get,min,word,len,return,min,word,len
XMoreLikeThis -> public int getMinWordLen();1540583181;Returns the minimum word length below which words will be ignored. Set this to 0 for no_minimum word length. The default is {@link #DEFAULT_MIN_WORD_LENGTH}.__@return the minimum word length below which words will be ignored.;public int getMinWordLen() {_        return minWordLen__    };returns,the,minimum,word,length,below,which,words,will,be,ignored,set,this,to,0,for,no,minimum,word,length,the,default,is,link,return,the,minimum,word,length,below,which,words,will,be,ignored;public,int,get,min,word,len,return,min,word,len
XMoreLikeThis -> public int getMinWordLen();1541501723;Returns the minimum word length below which words will be ignored. Set this to 0 for no_minimum word length. The default is {@link #DEFAULT_MIN_WORD_LENGTH}.__@return the minimum word length below which words will be ignored.;public int getMinWordLen() {_        return minWordLen__    };returns,the,minimum,word,length,below,which,words,will,be,ignored,set,this,to,0,for,no,minimum,word,length,the,default,is,link,return,the,minimum,word,length,below,which,words,will,be,ignored;public,int,get,min,word,len,return,min,word,len
XMoreLikeThis -> public void setMinDocFreq(int minDocFreq);1524684173;Sets the frequency at which words will be ignored which do not occur in at least this_many docs.__@param minDocFreq the frequency at which words will be ignored which do not occur in at_least this many docs.;public void setMinDocFreq(int minDocFreq) {_        this.minDocFreq = minDocFreq__    };sets,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs,param,min,doc,freq,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs;public,void,set,min,doc,freq,int,min,doc,freq,this,min,doc,freq,min,doc,freq
XMoreLikeThis -> public void setMinDocFreq(int minDocFreq);1538067637;Sets the frequency at which words will be ignored which do not occur in at least this_many docs.__@param minDocFreq the frequency at which words will be ignored which do not occur in at_least this many docs.;public void setMinDocFreq(int minDocFreq) {_        this.minDocFreq = minDocFreq__    };sets,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs,param,min,doc,freq,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs;public,void,set,min,doc,freq,int,min,doc,freq,this,min,doc,freq,min,doc,freq
XMoreLikeThis -> public void setMinDocFreq(int minDocFreq);1540583181;Sets the frequency at which words will be ignored which do not occur in at least this_many docs.__@param minDocFreq the frequency at which words will be ignored which do not occur in at_least this many docs.;public void setMinDocFreq(int minDocFreq) {_        this.minDocFreq = minDocFreq__    };sets,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs,param,min,doc,freq,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs;public,void,set,min,doc,freq,int,min,doc,freq,this,min,doc,freq,min,doc,freq
XMoreLikeThis -> public void setMinDocFreq(int minDocFreq);1541501723;Sets the frequency at which words will be ignored which do not occur in at least this_many docs.__@param minDocFreq the frequency at which words will be ignored which do not occur in at_least this many docs.;public void setMinDocFreq(int minDocFreq) {_        this.minDocFreq = minDocFreq__    };sets,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs,param,min,doc,freq,the,frequency,at,which,words,will,be,ignored,which,do,not,occur,in,at,least,this,many,docs;public,void,set,min,doc,freq,int,min,doc,freq,this,min,doc,freq,min,doc,freq
XMoreLikeThis -> private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException;1524684173;Find words for a more-like-this query former.__@param docNum the id of the lucene document from which to find terms;private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {_        Map<String, Int> termFreqMap = new HashMap<>()__        for (String fieldName : fieldNames) {_            final Fields vectors = ir.getTermVectors(docNum)__            final Terms vector__            if (vectors != null) {_                vector = vectors.terms(fieldName)__            } else {_                vector = null__            }__            _            if (vector == null) {_                Document d = ir.document(docNum)__                IndexableField fields[] = d.getFields(fieldName)__                for (IndexableField field : fields) {_                    final String stringValue = field.stringValue()__                    if (stringValue != null) {_                        addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName)__                    }_                }_            } else {_                addTermFrequencies(termFreqMap, vector, fieldName)__            }_        }__        return createQueue(termFreqMap)__    };find,words,for,a,more,like,this,query,former,param,doc,num,the,id,of,the,lucene,document,from,which,to,find,terms;private,priority,queue,score,term,retrieve,terms,int,doc,num,throws,ioexception,map,string,int,term,freq,map,new,hash,map,for,string,field,name,field,names,final,fields,vectors,ir,get,term,vectors,doc,num,final,terms,vector,if,vectors,null,vector,vectors,terms,field,name,else,vector,null,if,vector,null,document,d,ir,document,doc,num,indexable,field,fields,d,get,fields,field,name,for,indexable,field,field,fields,final,string,string,value,field,string,value,if,string,value,null,add,term,frequencies,new,string,reader,string,value,term,freq,map,field,name,else,add,term,frequencies,term,freq,map,vector,field,name,return,create,queue,term,freq,map
XMoreLikeThis -> private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException;1538067637;Find words for a more-like-this query former.__@param docNum the id of the lucene document from which to find terms;private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {_        Map<String, Int> termFreqMap = new HashMap<>()__        for (String fieldName : fieldNames) {_            final Fields vectors = ir.getTermVectors(docNum)__            final Terms vector__            if (vectors != null) {_                vector = vectors.terms(fieldName)__            } else {_                vector = null__            }__            _            if (vector == null) {_                Document d = ir.document(docNum)__                IndexableField fields[] = d.getFields(fieldName)__                for (IndexableField field : fields) {_                    final String stringValue = field.stringValue()__                    if (stringValue != null) {_                        addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName)__                    }_                }_            } else {_                addTermFrequencies(termFreqMap, vector, fieldName)__            }_        }__        return createQueue(termFreqMap)__    };find,words,for,a,more,like,this,query,former,param,doc,num,the,id,of,the,lucene,document,from,which,to,find,terms;private,priority,queue,score,term,retrieve,terms,int,doc,num,throws,ioexception,map,string,int,term,freq,map,new,hash,map,for,string,field,name,field,names,final,fields,vectors,ir,get,term,vectors,doc,num,final,terms,vector,if,vectors,null,vector,vectors,terms,field,name,else,vector,null,if,vector,null,document,d,ir,document,doc,num,indexable,field,fields,d,get,fields,field,name,for,indexable,field,field,fields,final,string,string,value,field,string,value,if,string,value,null,add,term,frequencies,new,string,reader,string,value,term,freq,map,field,name,else,add,term,frequencies,term,freq,map,vector,field,name,return,create,queue,term,freq,map
XMoreLikeThis -> private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException;1540583181;Find words for a more-like-this query former.__@param docNum the id of the lucene document from which to find terms;private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {_        Map<String, Int> termFreqMap = new HashMap<>()__        for (String fieldName : fieldNames) {_            final Fields vectors = ir.getTermVectors(docNum)__            final Terms vector__            if (vectors != null) {_                vector = vectors.terms(fieldName)__            } else {_                vector = null__            }__            _            if (vector == null) {_                Document d = ir.document(docNum)__                IndexableField fields[] = d.getFields(fieldName)__                for (IndexableField field : fields) {_                    final String stringValue = field.stringValue()__                    if (stringValue != null) {_                        addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName)__                    }_                }_            } else {_                addTermFrequencies(termFreqMap, vector, fieldName)__            }_        }__        return createQueue(termFreqMap)__    };find,words,for,a,more,like,this,query,former,param,doc,num,the,id,of,the,lucene,document,from,which,to,find,terms;private,priority,queue,score,term,retrieve,terms,int,doc,num,throws,ioexception,map,string,int,term,freq,map,new,hash,map,for,string,field,name,field,names,final,fields,vectors,ir,get,term,vectors,doc,num,final,terms,vector,if,vectors,null,vector,vectors,terms,field,name,else,vector,null,if,vector,null,document,d,ir,document,doc,num,indexable,field,fields,d,get,fields,field,name,for,indexable,field,field,fields,final,string,string,value,field,string,value,if,string,value,null,add,term,frequencies,new,string,reader,string,value,term,freq,map,field,name,else,add,term,frequencies,term,freq,map,vector,field,name,return,create,queue,term,freq,map
XMoreLikeThis -> private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException;1541501723;Find words for a more-like-this query former.__@param docNum the id of the lucene document from which to find terms;private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {_        Map<String, Int> termFreqMap = new HashMap<>()__        for (String fieldName : fieldNames) {_            final Fields vectors = ir.getTermVectors(docNum)__            final Terms vector__            if (vectors != null) {_                vector = vectors.terms(fieldName)__            } else {_                vector = null__            }__            _            if (vector == null) {_                Document d = ir.document(docNum)__                IndexableField fields[] = d.getFields(fieldName)__                for (IndexableField field : fields) {_                    final String stringValue = field.stringValue()__                    if (stringValue != null) {_                        addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName)__                    }_                }_            } else {_                addTermFrequencies(termFreqMap, vector, fieldName)__            }_        }__        return createQueue(termFreqMap)__    };find,words,for,a,more,like,this,query,former,param,doc,num,the,id,of,the,lucene,document,from,which,to,find,terms;private,priority,queue,score,term,retrieve,terms,int,doc,num,throws,ioexception,map,string,int,term,freq,map,new,hash,map,for,string,field,name,field,names,final,fields,vectors,ir,get,term,vectors,doc,num,final,terms,vector,if,vectors,null,vector,vectors,terms,field,name,else,vector,null,if,vector,null,document,d,ir,document,doc,num,indexable,field,fields,d,get,fields,field,name,for,indexable,field,field,fields,final,string,string,value,field,string,value,if,string,value,null,add,term,frequencies,new,string,reader,string,value,term,freq,map,field,name,else,add,term,frequencies,term,freq,map,vector,field,name,return,create,queue,term,freq,map
XMoreLikeThis -> private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException;1524684173;Find words for a more-like-this query former._The result is a priority queue of arrays with one entry for <b>every word</b> in the document._Each array has 6 elements._The elements are:_<ol>_<li> The word (String)_<li> The top field that this word comes from (String)_<li> The score for this word (Float)_<li> The IDF value (Float)_<li> The frequency of this word in the index (Integer)_<li> The frequency of this word in the source document (Integer)_</ol>_This is a somewhat "advanced" routine, and in general only the 1st entry in the array is of interest._This method is exposed so that you can identify the "interesting words" in a document._For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.__@param r the reader that has the content of the document_@param fieldName field passed to the analyzer to use when analyzing the content_@return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first_@see #retrieveInterestingTerms;private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException {_        Map<String, Int> words = new HashMap<>()__        addTermFrequencies(r, words, fieldName)__        return createQueue(words)__    };find,words,for,a,more,like,this,query,former,the,result,is,a,priority,queue,of,arrays,with,one,entry,for,b,every,word,b,in,the,document,each,array,has,6,elements,the,elements,are,ol,li,the,word,string,li,the,top,field,that,this,word,comes,from,string,li,the,score,for,this,word,float,li,the,idf,value,float,li,the,frequency,of,this,word,in,the,index,integer,li,the,frequency,of,this,word,in,the,source,document,integer,ol,this,is,a,somewhat,advanced,routine,and,in,general,only,the,1st,entry,in,the,array,is,of,interest,this,method,is,exposed,so,that,you,can,identify,the,interesting,words,in,a,document,for,an,easier,method,to,call,see,link,retrieve,interesting,terms,retrieve,interesting,terms,param,r,the,reader,that,has,the,content,of,the,document,param,field,name,field,passed,to,the,analyzer,to,use,when,analyzing,the,content,return,the,most,interesting,words,in,the,document,ordered,by,score,with,the,highest,scoring,or,best,entry,first,see,retrieve,interesting,terms;private,priority,queue,score,term,retrieve,terms,reader,r,string,field,name,throws,ioexception,map,string,int,words,new,hash,map,add,term,frequencies,r,words,field,name,return,create,queue,words
XMoreLikeThis -> private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException;1538067637;Find words for a more-like-this query former._The result is a priority queue of arrays with one entry for <b>every word</b> in the document._Each array has 6 elements._The elements are:_<ol>_<li> The word (String)_<li> The top field that this word comes from (String)_<li> The score for this word (Float)_<li> The IDF value (Float)_<li> The frequency of this word in the index (Integer)_<li> The frequency of this word in the source document (Integer)_</ol>_This is a somewhat "advanced" routine, and in general only the 1st entry in the array is of interest._This method is exposed so that you can identify the "interesting words" in a document._For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.__@param r the reader that has the content of the document_@param fieldName field passed to the analyzer to use when analyzing the content_@return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first_@see #retrieveInterestingTerms;private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException {_        Map<String, Int> words = new HashMap<>()__        addTermFrequencies(r, words, fieldName)__        return createQueue(words)__    };find,words,for,a,more,like,this,query,former,the,result,is,a,priority,queue,of,arrays,with,one,entry,for,b,every,word,b,in,the,document,each,array,has,6,elements,the,elements,are,ol,li,the,word,string,li,the,top,field,that,this,word,comes,from,string,li,the,score,for,this,word,float,li,the,idf,value,float,li,the,frequency,of,this,word,in,the,index,integer,li,the,frequency,of,this,word,in,the,source,document,integer,ol,this,is,a,somewhat,advanced,routine,and,in,general,only,the,1st,entry,in,the,array,is,of,interest,this,method,is,exposed,so,that,you,can,identify,the,interesting,words,in,a,document,for,an,easier,method,to,call,see,link,retrieve,interesting,terms,retrieve,interesting,terms,param,r,the,reader,that,has,the,content,of,the,document,param,field,name,field,passed,to,the,analyzer,to,use,when,analyzing,the,content,return,the,most,interesting,words,in,the,document,ordered,by,score,with,the,highest,scoring,or,best,entry,first,see,retrieve,interesting,terms;private,priority,queue,score,term,retrieve,terms,reader,r,string,field,name,throws,ioexception,map,string,int,words,new,hash,map,add,term,frequencies,r,words,field,name,return,create,queue,words
XMoreLikeThis -> private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException;1540583181;Find words for a more-like-this query former._The result is a priority queue of arrays with one entry for <b>every word</b> in the document._Each array has 6 elements._The elements are:_<ol>_<li> The word (String)_<li> The top field that this word comes from (String)_<li> The score for this word (Float)_<li> The IDF value (Float)_<li> The frequency of this word in the index (Integer)_<li> The frequency of this word in the source document (Integer)_</ol>_This is a somewhat "advanced" routine, and in general only the 1st entry in the array is of interest._This method is exposed so that you can identify the "interesting words" in a document._For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.__@param r the reader that has the content of the document_@param fieldName field passed to the analyzer to use when analyzing the content_@return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first_@see #retrieveInterestingTerms;private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException {_        Map<String, Int> words = new HashMap<>()__        addTermFrequencies(r, words, fieldName)__        return createQueue(words)__    };find,words,for,a,more,like,this,query,former,the,result,is,a,priority,queue,of,arrays,with,one,entry,for,b,every,word,b,in,the,document,each,array,has,6,elements,the,elements,are,ol,li,the,word,string,li,the,top,field,that,this,word,comes,from,string,li,the,score,for,this,word,float,li,the,idf,value,float,li,the,frequency,of,this,word,in,the,index,integer,li,the,frequency,of,this,word,in,the,source,document,integer,ol,this,is,a,somewhat,advanced,routine,and,in,general,only,the,1st,entry,in,the,array,is,of,interest,this,method,is,exposed,so,that,you,can,identify,the,interesting,words,in,a,document,for,an,easier,method,to,call,see,link,retrieve,interesting,terms,retrieve,interesting,terms,param,r,the,reader,that,has,the,content,of,the,document,param,field,name,field,passed,to,the,analyzer,to,use,when,analyzing,the,content,return,the,most,interesting,words,in,the,document,ordered,by,score,with,the,highest,scoring,or,best,entry,first,see,retrieve,interesting,terms;private,priority,queue,score,term,retrieve,terms,reader,r,string,field,name,throws,ioexception,map,string,int,words,new,hash,map,add,term,frequencies,r,words,field,name,return,create,queue,words
XMoreLikeThis -> private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException;1541501723;Find words for a more-like-this query former._The result is a priority queue of arrays with one entry for <b>every word</b> in the document._Each array has 6 elements._The elements are:_<ol>_<li> The word (String)_<li> The top field that this word comes from (String)_<li> The score for this word (Float)_<li> The IDF value (Float)_<li> The frequency of this word in the index (Integer)_<li> The frequency of this word in the source document (Integer)_</ol>_This is a somewhat "advanced" routine, and in general only the 1st entry in the array is of interest._This method is exposed so that you can identify the "interesting words" in a document._For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.__@param r the reader that has the content of the document_@param fieldName field passed to the analyzer to use when analyzing the content_@return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first_@see #retrieveInterestingTerms;private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException {_        Map<String, Int> words = new HashMap<>()__        addTermFrequencies(r, words, fieldName)__        return createQueue(words)__    };find,words,for,a,more,like,this,query,former,the,result,is,a,priority,queue,of,arrays,with,one,entry,for,b,every,word,b,in,the,document,each,array,has,6,elements,the,elements,are,ol,li,the,word,string,li,the,top,field,that,this,word,comes,from,string,li,the,score,for,this,word,float,li,the,idf,value,float,li,the,frequency,of,this,word,in,the,index,integer,li,the,frequency,of,this,word,in,the,source,document,integer,ol,this,is,a,somewhat,advanced,routine,and,in,general,only,the,1st,entry,in,the,array,is,of,interest,this,method,is,exposed,so,that,you,can,identify,the,interesting,words,in,a,document,for,an,easier,method,to,call,see,link,retrieve,interesting,terms,retrieve,interesting,terms,param,r,the,reader,that,has,the,content,of,the,document,param,field,name,field,passed,to,the,analyzer,to,use,when,analyzing,the,content,return,the,most,interesting,words,in,the,document,ordered,by,score,with,the,highest,scoring,or,best,entry,first,see,retrieve,interesting,terms;private,priority,queue,score,term,retrieve,terms,reader,r,string,field,name,throws,ioexception,map,string,int,words,new,hash,map,add,term,frequencies,r,words,field,name,return,create,queue,words
XMoreLikeThis -> private Query createQuery(PriorityQueue<ScoreTerm> q);1524684173;Create the More like query from a PriorityQueue;private Query createQuery(PriorityQueue<ScoreTerm> q) {_        BooleanQuery.Builder query = new BooleanQuery.Builder()__        addToQuery(q, query)__        return query.build()__    };create,the,more,like,query,from,a,priority,queue;private,query,create,query,priority,queue,score,term,q,boolean,query,builder,query,new,boolean,query,builder,add,to,query,q,query,return,query,build
XMoreLikeThis -> private Query createQuery(PriorityQueue<ScoreTerm> q);1538067637;Create the More like query from a PriorityQueue;private Query createQuery(PriorityQueue<ScoreTerm> q) {_        BooleanQuery.Builder query = new BooleanQuery.Builder()__        addToQuery(q, query)__        return query.build()__    };create,the,more,like,query,from,a,priority,queue;private,query,create,query,priority,queue,score,term,q,boolean,query,builder,query,new,boolean,query,builder,add,to,query,q,query,return,query,build
XMoreLikeThis -> private Query createQuery(PriorityQueue<ScoreTerm> q);1540583181;Create the More like query from a PriorityQueue;private Query createQuery(PriorityQueue<ScoreTerm> q) {_        BooleanQuery.Builder query = new BooleanQuery.Builder()__        addToQuery(q, query)__        return query.build()__    };create,the,more,like,query,from,a,priority,queue;private,query,create,query,priority,queue,score,term,q,boolean,query,builder,query,new,boolean,query,builder,add,to,query,q,query,return,query,build
XMoreLikeThis -> private Query createQuery(PriorityQueue<ScoreTerm> q);1541501723;Create the More like query from a PriorityQueue;private Query createQuery(PriorityQueue<ScoreTerm> q) {_        BooleanQuery.Builder query = new BooleanQuery.Builder()__        addToQuery(q, query)__        return query.build()__    };create,the,more,like,query,from,a,priority,queue;private,query,create,query,priority,queue,score,term,q,boolean,query,builder,query,new,boolean,query,builder,add,to,query,q,query,return,query,build
