commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "indices_stats_action". }
false;public;2;59;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest().     indicesStatsRequest.indicesOptions(IndicesOptions.fromRequest(request, indicesStatsRequest.indicesOptions())).     indicesStatsRequest.indices(Strings.splitStringByCommaToArray(request.param("index"))).     indicesStatsRequest.types(Strings.splitStringByCommaToArray(request.param("types"))).     Set<String> metrics = Strings.tokenizeByCommaToSet(request.param("metric", "_all")).     // short cut, if no metrics have been specified in URI     if (metrics.size() == 1 && metrics.contains("_all")) {         indicesStatsRequest.all().     } else if (metrics.contains("_all")) {         throw new IllegalArgumentException(String.format(Locale.ROOT, "request [%s] contains _all and individual metrics [%s]", request.path(), request.param("metric"))).     } else {         indicesStatsRequest.clear().         // use a sorted set so the unrecognized parameters appear in a reliable sorted order         final Set<String> invalidMetrics = new TreeSet<>().         for (final String metric : metrics) {             final Consumer<IndicesStatsRequest> consumer = METRICS.get(metric).             if (consumer != null) {                 consumer.accept(indicesStatsRequest).             } else {                 invalidMetrics.add(metric).             }         }         if (!invalidMetrics.isEmpty()) {             throw new IllegalArgumentException(unrecognized(request, invalidMetrics, METRICS.keySet(), "metric")).         }     }     if (request.hasParam("groups")) {         indicesStatsRequest.groups(Strings.splitStringByCommaToArray(request.param("groups"))).     }     if (request.hasParam("types")) {         indicesStatsRequest.types(Strings.splitStringByCommaToArray(request.param("types"))).     }     if (indicesStatsRequest.completion() && (request.hasParam("fields") || request.hasParam("completion_fields"))) {         indicesStatsRequest.completionFields(request.paramAsStringArray("completion_fields", request.paramAsStringArray("fields", Strings.EMPTY_ARRAY))).     }     if (indicesStatsRequest.fieldData() && (request.hasParam("fields") || request.hasParam("fielddata_fields"))) {         indicesStatsRequest.fieldDataFields(request.paramAsStringArray("fielddata_fields", request.paramAsStringArray("fields", Strings.EMPTY_ARRAY))).     }     if (indicesStatsRequest.segments()) {         indicesStatsRequest.includeSegmentFileSizes(request.paramAsBoolean("include_segment_file_sizes", false)).     }     return channel -> client.admin().indices().stats(indicesStatsRequest, new RestToXContentListener<>(channel)). }
false;public;0;4;;@Override public boolean canTripCircuitBreaker() {     return false. }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return RESPONSE_PARAMS. }
