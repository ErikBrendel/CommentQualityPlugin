commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Indices Exists.  *  * @param request The indices exists request  * @return The result future  * @see Requests#indicesExistsRequest(String...)  */ ;/**  * Indices Exists.  *  * @param request The indices exists request  * @return The result future  * @see Requests#indicesExistsRequest(String...)  */ ActionFuture<IndicesExistsResponse> exists(IndicesExistsRequest request).
true;;2;1;/**  * The status of one or more indices.  *  * @param request  The indices status request  * @param listener A listener to be notified with a result  * @see Requests#indicesExistsRequest(String...)  */ ;/**  * The status of one or more indices.  *  * @param request  The indices status request  * @param listener A listener to be notified with a result  * @see Requests#indicesExistsRequest(String...)  */ void exists(IndicesExistsRequest request, ActionListener<IndicesExistsResponse> listener).
true;;1;1;/**  * Indices exists.  */ ;/**  * Indices exists.  */ IndicesExistsRequestBuilder prepareExists(String... indices).
true;;1;2;/**  * Types exists.  *  * @deprecated Types are deprecated and are in the process of being removed.  * @param request The types exists request  * @return The result future  */ ;/**  * Types exists.  *  * @deprecated Types are deprecated and are in the process of being removed.  * @param request The types exists request  * @return The result future  */ @Deprecated ActionFuture<TypesExistsResponse> typesExists(TypesExistsRequest request).
true;;2;2;/**  * Types exists.  *  * @deprecated Types are deprecated and are in the process of being removed.  * @param request  The types exists  * @param listener A listener to be notified with a result  */ ;/**  * Types exists.  *  * @deprecated Types are deprecated and are in the process of being removed.  * @param request  The types exists  * @param listener A listener to be notified with a result  */ @Deprecated void typesExists(TypesExistsRequest request, ActionListener<TypesExistsResponse> listener).
true;;1;2;/**  * Types exists.  *  * @deprecated Types are deprecated and are in the process of being removed.  */ ;/**  * Types exists.  *  * @deprecated Types are deprecated and are in the process of being removed.  */ @Deprecated TypesExistsRequestBuilder prepareTypesExists(String... index).
true;;1;1;/**  * Indices stats.  */ ;/**  * Indices stats.  */ ActionFuture<IndicesStatsResponse> stats(IndicesStatsRequest request).
true;;2;1;/**  * Indices stats.  */ ;/**  * Indices stats.  */ void stats(IndicesStatsRequest request, ActionListener<IndicesStatsResponse> listener).
true;;1;1;/**  * Indices stats.  */ ;/**  * Indices stats.  */ IndicesStatsRequestBuilder prepareStats(String... indices).
true;;1;1;/**  * Indices recoveries  */ ;/**  * Indices recoveries  */ ActionFuture<RecoveryResponse> recoveries(RecoveryRequest request).
true;;2;1;/**  * Indices recoveries  */ ;/**  * Indices recoveries  */ void recoveries(RecoveryRequest request, ActionListener<RecoveryResponse> listener).
true;;1;1;/**  * Indices recoveries  */ ;/**  * Indices recoveries  */ RecoveryRequestBuilder prepareRecoveries(String... indices).
true;;1;1;/**  * The segments of one or more indices.  *  * @param request The indices segments request  * @return The result future  * @see Requests#indicesSegmentsRequest(String...)  */ ;/**  * The segments of one or more indices.  *  * @param request The indices segments request  * @return The result future  * @see Requests#indicesSegmentsRequest(String...)  */ ActionFuture<IndicesSegmentResponse> segments(IndicesSegmentsRequest request).
true;;2;1;/**  * The segments of one or more indices.  *  * @param request  The indices segments request  * @param listener A listener to be notified with a result  * @see Requests#indicesSegmentsRequest(String...)  */ ;/**  * The segments of one or more indices.  *  * @param request  The indices segments request  * @param listener A listener to be notified with a result  * @see Requests#indicesSegmentsRequest(String...)  */ void segments(IndicesSegmentsRequest request, ActionListener<IndicesSegmentResponse> listener).
true;;1;1;/**  * The segments of one or more indices.  */ ;/**  * The segments of one or more indices.  */ IndicesSegmentsRequestBuilder prepareSegments(String... indices).
true;;1;1;/**  * The shard stores info of one or more indices.  *  * @param request The indices shard stores request  * @return The result future  * @see Requests#indicesShardStoresRequest(String...)  */ ;/**  * The shard stores info of one or more indices.  *  * @param request The indices shard stores request  * @return The result future  * @see Requests#indicesShardStoresRequest(String...)  */ ActionFuture<IndicesShardStoresResponse> shardStores(IndicesShardStoresRequest request).
true;;2;1;/**  * The shard stores info of one or more indices.  *  * @param request The indices shard stores request  * @param listener A listener to be notified with a result  * @see Requests#indicesShardStoresRequest(String...)  */ ;/**  * The shard stores info of one or more indices.  *  * @param request The indices shard stores request  * @param listener A listener to be notified with a result  * @see Requests#indicesShardStoresRequest(String...)  */ void shardStores(IndicesShardStoresRequest request, ActionListener<IndicesShardStoresResponse> listener).
true;;1;1;/**  * The shard stores info of one or more indices.  */ ;/**  * The shard stores info of one or more indices.  */ IndicesShardStoreRequestBuilder prepareShardStores(String... indices).
true;;1;1;/**  * Creates an index using an explicit request allowing to specify the settings of the index.  *  * @param request The create index request  * @return The result future  * @see org.elasticsearch.client.Requests#createIndexRequest(String)  */ ;/**  * Creates an index using an explicit request allowing to specify the settings of the index.  *  * @param request The create index request  * @return The result future  * @see org.elasticsearch.client.Requests#createIndexRequest(String)  */ ActionFuture<CreateIndexResponse> create(CreateIndexRequest request).
true;;2;1;/**  * Creates an index using an explicit request allowing to specify the settings of the index.  *  * @param request  The create index request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#createIndexRequest(String)  */ ;/**  * Creates an index using an explicit request allowing to specify the settings of the index.  *  * @param request  The create index request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#createIndexRequest(String)  */ void create(CreateIndexRequest request, ActionListener<CreateIndexResponse> listener).
true;;1;1;/**  * Creates an index using an explicit request allowing to specify the settings of the index.  *  * @param index The index name to create  */ ;/**  * Creates an index using an explicit request allowing to specify the settings of the index.  *  * @param index The index name to create  */ CreateIndexRequestBuilder prepareCreate(String index).
true;;1;1;/**  * Deletes an index based on the index name.  *  * @param request The delete index request  * @return The result future  * @see org.elasticsearch.client.Requests#deleteIndexRequest(String)  */ ;/**  * Deletes an index based on the index name.  *  * @param request The delete index request  * @return The result future  * @see org.elasticsearch.client.Requests#deleteIndexRequest(String)  */ ActionFuture<AcknowledgedResponse> delete(DeleteIndexRequest request).
true;;2;1;/**  * Deletes an index based on the index name.  *  * @param request  The delete index request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#deleteIndexRequest(String)  */ ;/**  * Deletes an index based on the index name.  *  * @param request  The delete index request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#deleteIndexRequest(String)  */ void delete(DeleteIndexRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Deletes an index based on the index name.  *  * @param indices The indices to delete. Use "_all" to delete all indices.  */ ;/**  * Deletes an index based on the index name.  *  * @param indices The indices to delete. Use "_all" to delete all indices.  */ DeleteIndexRequestBuilder prepareDelete(String... indices).
true;;1;1;/**  * Closes an index based on the index name.  *  * @param request The close index request  * @return The result future  * @see org.elasticsearch.client.Requests#closeIndexRequest(String)  */ ;/**  * Closes an index based on the index name.  *  * @param request The close index request  * @return The result future  * @see org.elasticsearch.client.Requests#closeIndexRequest(String)  */ ActionFuture<CloseIndexResponse> close(CloseIndexRequest request).
true;;2;1;/**  * Closes an index based on the index name.  *  * @param request  The close index request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#closeIndexRequest(String)  */ ;/**  * Closes an index based on the index name.  *  * @param request  The close index request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#closeIndexRequest(String)  */ void close(CloseIndexRequest request, ActionListener<CloseIndexResponse> listener).
true;;1;1;/**  * Closes one or more indices based on their index name.  *  * @param indices The name of the indices to close  */ ;/**  * Closes one or more indices based on their index name.  *  * @param indices The name of the indices to close  */ CloseIndexRequestBuilder prepareClose(String... indices).
true;;1;1;/**  * Open an index based on the index name.  *  * @param request The close index request  * @return The result future  * @see org.elasticsearch.client.Requests#openIndexRequest(String)  */ ;/**  * Open an index based on the index name.  *  * @param request The close index request  * @return The result future  * @see org.elasticsearch.client.Requests#openIndexRequest(String)  */ ActionFuture<OpenIndexResponse> open(OpenIndexRequest request).
true;;2;1;/**  * Open an index based on the index name.  *  * @param request  The close index request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#openIndexRequest(String)  */ ;/**  * Open an index based on the index name.  *  * @param request  The close index request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#openIndexRequest(String)  */ void open(OpenIndexRequest request, ActionListener<OpenIndexResponse> listener).
true;;1;1;/**  * Opens one or more indices based on their index name.  *  * @param indices The name of the indices to close  */ ;/**  * Opens one or more indices based on their index name.  *  * @param indices The name of the indices to close  */ OpenIndexRequestBuilder prepareOpen(String... indices).
true;;1;1;/**  * Explicitly refresh one or more indices (making the content indexed since the last refresh searchable).  *  * @param request The refresh request  * @return The result future  * @see org.elasticsearch.client.Requests#refreshRequest(String...)  */ ;/**  * Explicitly refresh one or more indices (making the content indexed since the last refresh searchable).  *  * @param request The refresh request  * @return The result future  * @see org.elasticsearch.client.Requests#refreshRequest(String...)  */ ActionFuture<RefreshResponse> refresh(RefreshRequest request).
true;;2;1;/**  * Explicitly refresh one or more indices (making the content indexed since the last refresh searchable).  *  * @param request  The refresh request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#refreshRequest(String...)  */ ;/**  * Explicitly refresh one or more indices (making the content indexed since the last refresh searchable).  *  * @param request  The refresh request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#refreshRequest(String...)  */ void refresh(RefreshRequest request, ActionListener<RefreshResponse> listener).
true;;1;1;/**  * Explicitly refresh one or more indices (making the content indexed since the last refresh searchable).  */ ;/**  * Explicitly refresh one or more indices (making the content indexed since the last refresh searchable).  */ RefreshRequestBuilder prepareRefresh(String... indices).
true;;1;1;/**  * Explicitly flush one or more indices (releasing memory from the node).  *  * @param request The flush request  * @return A result future  * @see org.elasticsearch.client.Requests#flushRequest(String...)  */ ;/**  * Explicitly flush one or more indices (releasing memory from the node).  *  * @param request The flush request  * @return A result future  * @see org.elasticsearch.client.Requests#flushRequest(String...)  */ ActionFuture<FlushResponse> flush(FlushRequest request).
true;;2;1;/**  * Explicitly flush one or more indices (releasing memory from the node).  *  * @param request  The flush request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#flushRequest(String...)  */ ;/**  * Explicitly flush one or more indices (releasing memory from the node).  *  * @param request  The flush request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#flushRequest(String...)  */ void flush(FlushRequest request, ActionListener<FlushResponse> listener).
true;;1;1;/**  * Explicitly flush one or more indices (releasing memory from the node).  */ ;/**  * Explicitly flush one or more indices (releasing memory from the node).  */ FlushRequestBuilder prepareFlush(String... indices).
true;;1;1;/**  * Explicitly sync flush one or more indices (write sync id to shards for faster recovery).  *  * @param request The sync flush request  * @return A result future  * @see org.elasticsearch.client.Requests#syncedFlushRequest(String...)  */ ;/**  * Explicitly sync flush one or more indices (write sync id to shards for faster recovery).  *  * @param request The sync flush request  * @return A result future  * @see org.elasticsearch.client.Requests#syncedFlushRequest(String...)  */ ActionFuture<SyncedFlushResponse> syncedFlush(SyncedFlushRequest request).
true;;2;1;/**  * Explicitly sync flush one or more indices (write sync id to shards for faster recovery).  *  * @param request  The sync flush request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#syncedFlushRequest(String...)  */ ;/**  * Explicitly sync flush one or more indices (write sync id to shards for faster recovery).  *  * @param request  The sync flush request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#syncedFlushRequest(String...)  */ void syncedFlush(SyncedFlushRequest request, ActionListener<SyncedFlushResponse> listener).
true;;1;1;/**  * Explicitly sync flush one or more indices (write sync id to shards for faster recovery).  */ ;/**  * Explicitly sync flush one or more indices (write sync id to shards for faster recovery).  */ SyncedFlushRequestBuilder prepareSyncedFlush(String... indices).
true;;1;1;/**  * Explicitly force merge one or more indices into a the number of segments.  *  * @param request The optimize request  * @return A result future  * @see org.elasticsearch.client.Requests#forceMergeRequest(String...)  */ ;/**  * Explicitly force merge one or more indices into a the number of segments.  *  * @param request The optimize request  * @return A result future  * @see org.elasticsearch.client.Requests#forceMergeRequest(String...)  */ ActionFuture<ForceMergeResponse> forceMerge(ForceMergeRequest request).
true;;2;1;/**  * Explicitly force merge one or more indices into a the number of segments.  *  * @param request  The force merge request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#forceMergeRequest(String...)  */ ;/**  * Explicitly force merge one or more indices into a the number of segments.  *  * @param request  The force merge request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#forceMergeRequest(String...)  */ void forceMerge(ForceMergeRequest request, ActionListener<ForceMergeResponse> listener).
true;;1;1;/**  * Explicitly force merge one or more indices into a the number of segments.  */ ;/**  * Explicitly force merge one or more indices into a the number of segments.  */ ForceMergeRequestBuilder prepareForceMerge(String... indices).
true;;1;1;/**  * Explicitly upgrade one or more indices  *  * @param request The upgrade request  * @return A result future  * @see org.elasticsearch.client.Requests#upgradeRequest(String...)  */ ;/**  * Explicitly upgrade one or more indices  *  * @param request The upgrade request  * @return A result future  * @see org.elasticsearch.client.Requests#upgradeRequest(String...)  */ ActionFuture<UpgradeResponse> upgrade(UpgradeRequest request).
true;;2;1;/**  * Explicitly upgrade one or more indices  *  * @param request  The upgrade request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#upgradeRequest(String...)  */ ;/**  * Explicitly upgrade one or more indices  *  * @param request  The upgrade request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#upgradeRequest(String...)  */ void upgrade(UpgradeRequest request, ActionListener<UpgradeResponse> listener).
true;;1;1;/**  *  Explicitly upgrade one or more indices  */ ;/**  *  Explicitly upgrade one or more indices  */ UpgradeStatusRequestBuilder prepareUpgradeStatus(String... indices).
true;;1;1;/**  * Check upgrade status of one or more indices  *  * @param request The upgrade request  * @return A result future  * @see org.elasticsearch.client.Requests#upgradeRequest(String...)  */ ;/**  * Check upgrade status of one or more indices  *  * @param request The upgrade request  * @return A result future  * @see org.elasticsearch.client.Requests#upgradeRequest(String...)  */ ActionFuture<UpgradeStatusResponse> upgradeStatus(UpgradeStatusRequest request).
true;;2;1;/**  * Check upgrade status of one or more indices  *  * @param request  The upgrade request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#upgradeRequest(String...)  */ ;/**  * Check upgrade status of one or more indices  *  * @param request  The upgrade request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#upgradeRequest(String...)  */ void upgradeStatus(UpgradeStatusRequest request, ActionListener<UpgradeStatusResponse> listener).
true;;1;1;/**  * Check upgrade status of one or more indices  */ ;/**  * Check upgrade status of one or more indices  */ UpgradeRequestBuilder prepareUpgrade(String... indices).
true;;2;1;/**  * Get the complete mappings of one or more types  */ ;/**  * Get the complete mappings of one or more types  */ void getMappings(GetMappingsRequest request, ActionListener<GetMappingsResponse> listener).
true;;1;1;/**  * Get the complete mappings of one or more types  */ ;/**  * Get the complete mappings of one or more types  */ ActionFuture<GetMappingsResponse> getMappings(GetMappingsRequest request).
true;;1;1;/**  * Get the complete mappings of one or more types  */ ;/**  * Get the complete mappings of one or more types  */ GetMappingsRequestBuilder prepareGetMappings(String... indices).
true;;2;1;/**  * Get the mappings of specific fields  */ ;/**  * Get the mappings of specific fields  */ void getFieldMappings(GetFieldMappingsRequest request, ActionListener<GetFieldMappingsResponse> listener).
true;;1;1;/**  * Get the mappings of specific fields  */ ;/**  * Get the mappings of specific fields  */ GetFieldMappingsRequestBuilder prepareGetFieldMappings(String... indices).
true;;1;1;/**  * Get the mappings of specific fields  */ ;/**  * Get the mappings of specific fields  */ ActionFuture<GetFieldMappingsResponse> getFieldMappings(GetFieldMappingsRequest request).
true;;1;1;/**  * Add mapping definition for a type into one or more indices.  *  * @param request The create mapping request  * @return A result future  * @see org.elasticsearch.client.Requests#putMappingRequest(String...)  */ ;/**  * Add mapping definition for a type into one or more indices.  *  * @param request The create mapping request  * @return A result future  * @see org.elasticsearch.client.Requests#putMappingRequest(String...)  */ ActionFuture<AcknowledgedResponse> putMapping(PutMappingRequest request).
true;;2;1;/**  * Add mapping definition for a type into one or more indices.  *  * @param request  The create mapping request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#putMappingRequest(String...)  */ ;/**  * Add mapping definition for a type into one or more indices.  *  * @param request  The create mapping request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#putMappingRequest(String...)  */ void putMapping(PutMappingRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Add mapping definition for a type into one or more indices.  */ ;/**  * Add mapping definition for a type into one or more indices.  */ PutMappingRequestBuilder preparePutMapping(String... indices).
true;;1;1;/**  * Allows to add/remove aliases from indices.  *  * @param request The index aliases request  * @return The result future  * @see Requests#indexAliasesRequest()  */ ;/**  * Allows to add/remove aliases from indices.  *  * @param request The index aliases request  * @return The result future  * @see Requests#indexAliasesRequest()  */ ActionFuture<AcknowledgedResponse> aliases(IndicesAliasesRequest request).
true;;2;1;/**  * Allows to add/remove aliases from indices.  *  * @param request  The index aliases request  * @param listener A listener to be notified with a result  * @see Requests#indexAliasesRequest()  */ ;/**  * Allows to add/remove aliases from indices.  *  * @param request  The index aliases request  * @param listener A listener to be notified with a result  * @see Requests#indexAliasesRequest()  */ void aliases(IndicesAliasesRequest request, ActionListener<AcknowledgedResponse> listener).
true;;0;1;/**  * Allows to add/remove aliases from indices.  */ ;/**  * Allows to add/remove aliases from indices.  */ IndicesAliasesRequestBuilder prepareAliases().
true;;1;1;/**  * Get specific index aliases that exists in particular indices and / or by name.  *  * @param request The result future  */ ;/**  * Get specific index aliases that exists in particular indices and / or by name.  *  * @param request The result future  */ ActionFuture<GetAliasesResponse> getAliases(GetAliasesRequest request).
true;;2;1;/**  * Get specific index aliases that exists in particular indices and / or by name.  *  * @param request  The index aliases request  * @param listener A listener to be notified with a result  */ ;/**  * Get specific index aliases that exists in particular indices and / or by name.  *  * @param request  The index aliases request  * @param listener A listener to be notified with a result  */ void getAliases(GetAliasesRequest request, ActionListener<GetAliasesResponse> listener).
true;;1;1;/**  * Get specific index aliases that exists in particular indices and / or by name.  */ ;/**  * Get specific index aliases that exists in particular indices and / or by name.  */ GetAliasesRequestBuilder prepareGetAliases(String... aliases).
true;;1;1;/**  * Allows to check to existence of aliases from indices.  */ ;/**  * Allows to check to existence of aliases from indices.  */ AliasesExistRequestBuilder prepareAliasesExist(String... aliases).
true;;1;1;/**  * Check to existence of index aliases.  *  * @param request The result future  */ ;/**  * Check to existence of index aliases.  *  * @param request The result future  */ ActionFuture<AliasesExistResponse> aliasesExist(GetAliasesRequest request).
true;;2;1;/**  * Check the existence of specified index aliases.  *  * @param request  The index aliases request  * @param listener A listener to be notified with a result  */ ;/**  * Check the existence of specified index aliases.  *  * @param request  The index aliases request  * @param listener A listener to be notified with a result  */ void aliasesExist(GetAliasesRequest request, ActionListener<AliasesExistResponse> listener).
true;;1;1;/**  * Get index metadata for particular indices.  *  * @param request The result future  */ ;/**  * Get index metadata for particular indices.  *  * @param request The result future  */ ActionFuture<GetIndexResponse> getIndex(GetIndexRequest request).
true;;2;1;/**  * Get index metadata for particular indices.  *  * @param request  The index aliases request  * @param listener A listener to be notified with a result  */ ;/**  * Get index metadata for particular indices.  *  * @param request  The index aliases request  * @param listener A listener to be notified with a result  */ void getIndex(GetIndexRequest request, ActionListener<GetIndexResponse> listener).
true;;0;1;/**  * Get index metadata for particular indices.  */ ;/**  * Get index metadata for particular indices.  */ GetIndexRequestBuilder prepareGetIndex().
true;;1;1;/**  * Clear indices cache.  *  * @param request The clear indices cache request  * @return The result future  * @see Requests#clearIndicesCacheRequest(String...)  */ ;/**  * Clear indices cache.  *  * @param request The clear indices cache request  * @return The result future  * @see Requests#clearIndicesCacheRequest(String...)  */ ActionFuture<ClearIndicesCacheResponse> clearCache(ClearIndicesCacheRequest request).
true;;2;1;/**  * Clear indices cache.  *  * @param request  The clear indices cache request  * @param listener A listener to be notified with a result  * @see Requests#clearIndicesCacheRequest(String...)  */ ;/**  * Clear indices cache.  *  * @param request  The clear indices cache request  * @param listener A listener to be notified with a result  * @see Requests#clearIndicesCacheRequest(String...)  */ void clearCache(ClearIndicesCacheRequest request, ActionListener<ClearIndicesCacheResponse> listener).
true;;1;1;/**  * Clear indices cache.  */ ;/**  * Clear indices cache.  */ ClearIndicesCacheRequestBuilder prepareClearCache(String... indices).
true;;1;1;/**  * Updates settings of one or more indices.  *  * @param request the update settings request  * @return The result future  */ ;/**  * Updates settings of one or more indices.  *  * @param request the update settings request  * @return The result future  */ ActionFuture<AcknowledgedResponse> updateSettings(UpdateSettingsRequest request).
true;;2;1;/**  * Updates settings of one or more indices.  *  * @param request  the update settings request  * @param listener A listener to be notified with the response  */ ;/**  * Updates settings of one or more indices.  *  * @param request  the update settings request  * @param listener A listener to be notified with the response  */ void updateSettings(UpdateSettingsRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Update indices settings.  */ ;/**  * Update indices settings.  */ UpdateSettingsRequestBuilder prepareUpdateSettings(String... indices).
true;;1;1;/**  * Analyze text under the provided index.  */ ;/**  * Analyze text under the provided index.  */ ActionFuture<AnalyzeResponse> analyze(AnalyzeRequest request).
true;;2;1;/**  * Analyze text under the provided index.  */ ;/**  * Analyze text under the provided index.  */ void analyze(AnalyzeRequest request, ActionListener<AnalyzeResponse> listener).
true;;2;1;/**  * Analyze text under the provided index.  *  * @param index The index name  * @param text  The text to analyze  */ ;/**  * Analyze text under the provided index.  *  * @param index The index name  * @param text  The text to analyze  */ AnalyzeRequestBuilder prepareAnalyze(@Nullable String index, String text).
true;;1;1;/**  * Analyze text.  *  * @param text The text to analyze  */ ;/**  * Analyze text.  *  * @param text The text to analyze  */ AnalyzeRequestBuilder prepareAnalyze(String text).
true;;0;1;/**  * Analyze text/texts.  */ ;/**  * Analyze text/texts.  */ AnalyzeRequestBuilder prepareAnalyze().
true;;1;1;/**  * Puts an index template.  */ ;/**  * Puts an index template.  */ ActionFuture<AcknowledgedResponse> putTemplate(PutIndexTemplateRequest request).
true;;2;1;/**  * Puts an index template.  */ ;/**  * Puts an index template.  */ void putTemplate(PutIndexTemplateRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Puts an index template.  *  * @param name The name of the template.  */ ;/**  * Puts an index template.  *  * @param name The name of the template.  */ PutIndexTemplateRequestBuilder preparePutTemplate(String name).
true;;1;1;/**  * Deletes index template.  */ ;/**  * Deletes index template.  */ ActionFuture<AcknowledgedResponse> deleteTemplate(DeleteIndexTemplateRequest request).
true;;2;1;/**  * Deletes an index template.  */ ;/**  * Deletes an index template.  */ void deleteTemplate(DeleteIndexTemplateRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Deletes an index template.  *  * @param name The name of the template.  */ ;/**  * Deletes an index template.  *  * @param name The name of the template.  */ DeleteIndexTemplateRequestBuilder prepareDeleteTemplate(String name).
true;;1;1;/**  * Gets index template.  */ ;/**  * Gets index template.  */ ActionFuture<GetIndexTemplatesResponse> getTemplates(GetIndexTemplatesRequest request).
true;;2;1;/**  * Gets an index template.  */ ;/**  * Gets an index template.  */ void getTemplates(GetIndexTemplatesRequest request, ActionListener<GetIndexTemplatesResponse> listener).
true;;1;1;/**  * Gets an index template (optional).  */ ;/**  * Gets an index template (optional).  */ GetIndexTemplatesRequestBuilder prepareGetTemplates(String... name).
true;;1;1;/**  * Validate a query for correctness.  *  * @param request The count request  * @return The result future  */ ;/**  * Validate a query for correctness.  *  * @param request The count request  * @return The result future  */ ActionFuture<ValidateQueryResponse> validateQuery(ValidateQueryRequest request).
true;;2;1;/**  * Validate a query for correctness.  *  * @param request  The count request  * @param listener A listener to be notified of the result  */ ;/**  * Validate a query for correctness.  *  * @param request  The count request  * @param listener A listener to be notified of the result  */ void validateQuery(ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener).
true;;1;1;/**  * Validate a query for correctness.  */ ;/**  * Validate a query for correctness.  */ ValidateQueryRequestBuilder prepareValidateQuery(String... indices).
true;;2;1;/**  * Executed a per index settings get request and returns the settings for the indices specified.  * Note: this is a per index request and will not include settings that are set on the cluster  * level. This request is not exhaustive, it will not return default values for setting.  */ ;/**  * Executed a per index settings get request and returns the settings for the indices specified.  * Note: this is a per index request and will not include settings that are set on the cluster  * level. This request is not exhaustive, it will not return default values for setting.  */ void getSettings(GetSettingsRequest request, ActionListener<GetSettingsResponse> listener).
true;;1;1;/**  * Executed a per index settings get request.  * @see #getSettings(org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest)  */ ;/**  * Executed a per index settings get request.  * @see #getSettings(org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest)  */ ActionFuture<GetSettingsResponse> getSettings(GetSettingsRequest request).
true;;1;1;/**  * Returns a builder for a per index settings get request.  * @param indices the indices to fetch the setting for.  * @see #getSettings(org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest)  */ ;/**  * Returns a builder for a per index settings get request.  * @param indices the indices to fetch the setting for.  * @see #getSettings(org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest)  */ GetSettingsRequestBuilder prepareGetSettings(String... indices).
true;;2;1;/**  * Resize an index using an explicit request allowing to specify the settings, mappings and aliases of the target index of the index.  */ ;/**  * Resize an index using an explicit request allowing to specify the settings, mappings and aliases of the target index of the index.  */ ResizeRequestBuilder prepareResizeIndex(String sourceIndex, String targetIndex).
true;;1;1;/**  * Resize an index using an explicit request allowing to specify the settings, mappings and aliases of the target index of the index.  */ ;/**  * Resize an index using an explicit request allowing to specify the settings, mappings and aliases of the target index of the index.  */ ActionFuture<ResizeResponse> resizeIndex(ResizeRequest request).
true;;2;1;/**  * Shrinks an index using an explicit request allowing to specify the settings, mappings and aliases of the target index of the index.  */ ;/**  * Shrinks an index using an explicit request allowing to specify the settings, mappings and aliases of the target index of the index.  */ void resizeIndex(ResizeRequest request, ActionListener<ResizeResponse> listener).
true;;1;1;/**  * Swaps the index pointed to by an alias given all provided conditions are satisfied  */ ;/**  * Swaps the index pointed to by an alias given all provided conditions are satisfied  */ RolloverRequestBuilder prepareRolloverIndex(String sourceAlias).
true;;1;1;/**  * Swaps the index pointed to by an alias given all provided conditions are satisfied  */ ;/**  * Swaps the index pointed to by an alias given all provided conditions are satisfied  */ ActionFuture<RolloverResponse> rolloversIndex(RolloverRequest request).
true;;2;1;/**  * Swaps the index pointed to by an alias given all provided conditions are satisfied  */ ;/**  * Swaps the index pointed to by an alias given all provided conditions are satisfied  */ void rolloverIndex(RolloverRequest request, ActionListener<RolloverResponse> listener).
