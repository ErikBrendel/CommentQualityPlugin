# id;timestamp;commentText;codeText;commentWords;codeWords
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1524684173;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)____        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1528762805;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)____        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1535046779;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1542402283;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            if (searchRequest.types().length > 0) {_                deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE)__            }_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,if,search,request,types,length,0,deprecation,logger,deprecated,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1543238799;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            if (searchRequest.types().length > 0) {_                deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE)__            }_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,if,search,request,types,length,0,deprecation,logger,deprecated,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1543342759;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            if (searchRequest.types().length > 0) {_                deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE)__            }_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,if,search,request,types,length,0,deprecation,logger,deprecated,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1543512976;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            if (searchRequest.types().length > 0) {_                deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE)__            }_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,if,search,request,types,length,0,deprecation,logger,deprecated,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1544210484;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            if (searchRequest.types().length > 0) {_                deprecationLogger.deprecatedAndMaybeLog("msearch_with_types", TYPES_DEPRECATION_MESSAGE)__            }_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,if,search,request,types,length,0,deprecation,logger,deprecated,and,maybe,log,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1544223047;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            if (searchRequest.types().length > 0) {_                deprecationLogger.deprecatedAndMaybeLog("msearch_with_types", TYPES_DEPRECATION_MESSAGE)__            }_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,if,search,request,types,length,0,deprecation,logger,deprecated,and,maybe,log,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1545358001;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            if (searchRequest.types().length > 0) {_                deprecationLogger.deprecatedAndMaybeLog("msearch_with_types", TYPES_DEPRECATION_MESSAGE)__            }_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,if,search,request,types,length,0,deprecation,logger,deprecated,and,maybe,log,search,request,source,search,source,builder,from,xcontent,parser,false,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1546630609;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            if (searchRequest.types().length > 0) {_                deprecationLogger.deprecatedAndMaybeLog("msearch_with_types", TYPES_DEPRECATION_MESSAGE)__            }_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            RestSearchAction.checkRestTotalHits(restRequest, searchRequest)__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,if,search,request,types,length,0,deprecation,logger,deprecated,and,maybe,log,search,request,source,search,source,builder,from,xcontent,parser,false,rest,search,action,check,rest,total,hits,rest,request,search,request,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1547584712;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            RestSearchAction.checkRestTotalHits(restRequest, searchRequest)__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,search,request,source,search,source,builder,from,xcontent,parser,false,rest,search,action,check,rest,total,hits,rest,request,search,request,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException;1548943934;Parses a {@link RestRequest} body and returns a {@link MultiSearchRequest};public static MultiSearchRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {_        MultiSearchRequest multiRequest = new MultiSearchRequest()__        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions())__        multiRequest.indicesOptions(indicesOptions)__        if (restRequest.hasParam("max_concurrent_searches")) {_            multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0))__        }__        int preFilterShardSize = restRequest.paramAsInt("pre_filter_shard_size", SearchRequest.DEFAULT_PRE_FILTER_SHARD_SIZE)___        final Integer maxConcurrentShardRequests__        if (restRequest.hasParam("max_concurrent_shard_requests")) {_            _            _            maxConcurrentShardRequests = restRequest.paramAsInt("max_concurrent_shard_requests", Integer.MIN_VALUE)__        } else {_            maxConcurrentShardRequests = null__        }__        parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, parser) -> {_            searchRequest.source(SearchSourceBuilder.fromXContent(parser, false))__            RestSearchAction.checkRestTotalHits(restRequest, searchRequest)__            multiRequest.add(searchRequest)__        })__        List<SearchRequest> requests = multiRequest.requests()__        preFilterShardSize = Math.max(1, preFilterShardSize / (requests.size()+1))__        for (SearchRequest request : requests) {_            _            request.setPreFilterShardSize(Math.min(preFilterShardSize, request.getPreFilterShardSize()))__            if (maxConcurrentShardRequests != null) {_                request.setMaxConcurrentShardRequests(maxConcurrentShardRequests)__            }_        }_        return multiRequest__    };parses,a,link,rest,request,body,and,returns,a,link,multi,search,request;public,static,multi,search,request,parse,request,rest,request,rest,request,boolean,allow,explicit,index,throws,ioexception,multi,search,request,multi,request,new,multi,search,request,indices,options,indices,options,indices,options,from,request,rest,request,multi,request,indices,options,multi,request,indices,options,indices,options,if,rest,request,has,param,multi,request,max,concurrent,search,requests,rest,request,param,as,int,0,int,pre,filter,shard,size,rest,request,param,as,int,search,request,final,integer,max,concurrent,shard,requests,if,rest,request,has,param,max,concurrent,shard,requests,rest,request,param,as,int,integer,else,max,concurrent,shard,requests,null,parse,multi,line,request,rest,request,multi,request,indices,options,allow,explicit,index,search,request,parser,search,request,source,search,source,builder,from,xcontent,parser,false,rest,search,action,check,rest,total,hits,rest,request,search,request,multi,request,add,search,request,list,search,request,requests,multi,request,requests,pre,filter,shard,size,math,max,1,pre,filter,shard,size,requests,size,1,for,search,request,request,requests,request,set,pre,filter,shard,size,math,min,pre,filter,shard,size,request,get,pre,filter,shard,size,if,max,concurrent,shard,requests,null,request,set,max,concurrent,shard,requests,max,concurrent,shard,requests,return,multi,request
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1524684173;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1528762805;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1535046779;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1542402283;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1543238799;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1543342759;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1543512976;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1544210484;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1544223047;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1545358001;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1546630609;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1547584712;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,request,get,xcontent,registry,allow,explicit,index
RestMultiSearchAction -> public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,             CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException;1548943934;Parses a multi-line {@link RestRequest} body, instantiating a {@link SearchRequest} for each line and applying the given consumer.;public static void parseMultiLineRequest(RestRequest request, IndicesOptions indicesOptions, boolean allowExplicitIndex,_            CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer) throws IOException {__        String[] indices = Strings.splitStringByCommaToArray(request.param("index"))__        String[] types = Strings.splitStringByCommaToArray(request.param("type"))__        String searchType = request.param("search_type")__        boolean ccsMinimizeRoundtrips = request.paramAsBoolean("ccs_minimize_roundtrips", true)__        String routing = request.param("routing")___        final Tuple<XContentType, BytesReference> sourceTuple = request.contentOrSourceParam()__        final XContent xContent = sourceTuple.v1().xContent()__        final BytesReference data = sourceTuple.v2()__        MultiSearchRequest.readMultiLineFormat(data, xContent, consumer, indices, indicesOptions, types, routing,_                searchType, ccsMinimizeRoundtrips, request.getXContentRegistry(), allowExplicitIndex)__    };parses,a,multi,line,link,rest,request,body,instantiating,a,link,search,request,for,each,line,and,applying,the,given,consumer;public,static,void,parse,multi,line,request,rest,request,request,indices,options,indices,options,boolean,allow,explicit,index,checked,bi,consumer,search,request,xcontent,parser,ioexception,consumer,throws,ioexception,string,indices,strings,split,string,by,comma,to,array,request,param,index,string,types,strings,split,string,by,comma,to,array,request,param,type,string,search,type,request,param,boolean,ccs,minimize,roundtrips,request,param,as,boolean,true,string,routing,request,param,routing,final,tuple,xcontent,type,bytes,reference,source,tuple,request,content,or,source,param,final,xcontent,x,content,source,tuple,v1,x,content,final,bytes,reference,data,source,tuple,v2,multi,search,request,read,multi,line,format,data,x,content,consumer,indices,indices,options,types,routing,search,type,ccs,minimize,roundtrips,request,get,xcontent,registry,allow,explicit,index
