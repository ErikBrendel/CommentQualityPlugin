commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;ShardId shardId().
false;;0;1;;String[] types().
false;;0;1;;SearchSourceBuilder source().
false;;0;1;;AliasFilter getAliasFilter().
false;;1;1;;void setAliasFilter(AliasFilter filter).
false;;1;1;;void source(SearchSourceBuilder source).
false;;0;1;;int numberOfShards().
false;;0;1;;SearchType searchType().
false;;0;1;;float indexBoost().
false;;0;1;;long nowInMillis().
false;;0;1;;Boolean requestCache().
false;;0;1;;boolean allowPartialSearchResults().
false;;0;1;;Scroll scroll().
true;;0;1;/**  * Returns the routing values resolved by the coordinating node for the index pointed by {@link #shardId()}.  */ ;/**  * Returns the routing values resolved by the coordinating node for the index pointed by {@link #shardId()}.  */ String[] indexRoutings().
true;;0;1;/**  * Returns the preference of the original {@link SearchRequest#preference()}.  */ ;/**  * Returns the preference of the original {@link SearchRequest#preference()}.  */ String preference().
true;;0;1;/**  * Returns the cache key for this shard search request, based on its content  */ ;/**  * Returns the cache key for this shard search request, based on its content  */ BytesReference cacheKey() throws IOException.
true;static;3;45;/**  * Returns the filter associated with listed filtering aliases.  * <p>  * The list of filtering aliases should be obtained by calling MetaData.filteringAliases.  * Returns {@code null} if no filtering is required.</p>  */ ;/**  * Returns the filter associated with listed filtering aliases.  * <p>  * The list of filtering aliases should be obtained by calling MetaData.filteringAliases.  * Returns {@code null} if no filtering is required.</p>  */ static QueryBuilder parseAliasFilter(CheckedFunction<byte[], QueryBuilder, IOException> filterParser, IndexMetaData metaData, String... aliasNames) {     if (aliasNames == null || aliasNames.length == 0) {         return null.     }     Index index = metaData.getIndex().     ImmutableOpenMap<String, AliasMetaData> aliases = metaData.getAliases().     Function<AliasMetaData, QueryBuilder> parserFunction = (alias) -> {         if (alias.filter() == null) {             return null.         }         try {             return filterParser.apply(alias.filter().uncompressed()).         } catch (IOException ex) {             throw new AliasFilterParsingException(index, alias.getAlias(), "Invalid alias filter", ex).         }     }.     if (aliasNames.length == 1) {         AliasMetaData alias = aliases.get(aliasNames[0]).         if (alias == null) {             // This shouldn't happen unless alias disappeared after filteringAliases was called.             throw new InvalidAliasNameException(index, aliasNames[0], "Unknown alias name was passed to alias Filter").         }         return parserFunction.apply(alias).     } else {         // we need to bench here a bit, to see maybe it makes sense to use OrFilter         BoolQueryBuilder combined = new BoolQueryBuilder().         for (String aliasName : aliasNames) {             AliasMetaData alias = aliases.get(aliasName).             if (alias == null) {                 // This shouldn't happen unless alias disappeared after filteringAliases was called.                 throw new InvalidAliasNameException(index, aliasNames[0], "Unknown alias name was passed to alias Filter").             }             QueryBuilder parsedFilter = parserFunction.apply(alias).             if (parsedFilter != null) {                 combined.should(parsedFilter).             } else {                 // The filter might be null only if filter was removed after filteringAliases was called                 return null.             }         }         return combined.     } }
true;;0;2;/**  * Returns the cluster alias in case the request is part of a cross-cluster search request, <code>null</code> otherwise.  */ ;/**  * Returns the cluster alias in case the request is part of a cross-cluster search request, <code>null</code> otherwise.  */ @Nullable String getClusterAlias().
false;;0;1;;Rewriteable<Rewriteable> getRewriteable().
