# id;timestamp;commentText;codeText;commentWords;codeWords
FilterAggregatorFactory -> public Weight getWeight();1524684173;Returns the {@link Weight} for this filter aggregation, creating it if_necessary. This is done lazily so that the {@link Weight} is only created_if the aggregation collects documents reducing the overhead of the_aggregation in teh case where no documents are collected.__Note that as aggregations are initialsed and executed in a serial manner,_no concurrency considerations are necessary here.;public Weight getWeight() {_        if (weight == null) {_            IndexSearcher contextSearcher = context.searcher()__            try {_                weight = contextSearcher.createNormalizedWeight(filter, false)__            } catch (IOException e) {_                throw new AggregationInitializationException("Failed to initialse filter", e)__            }_        }_        return weight__    };returns,the,link,weight,for,this,filter,aggregation,creating,it,if,necessary,this,is,done,lazily,so,that,the,link,weight,is,only,created,if,the,aggregation,collects,documents,reducing,the,overhead,of,the,aggregation,in,teh,case,where,no,documents,are,collected,note,that,as,aggregations,are,initialsed,and,executed,in,a,serial,manner,no,concurrency,considerations,are,necessary,here;public,weight,get,weight,if,weight,null,index,searcher,context,searcher,context,searcher,try,weight,context,searcher,create,normalized,weight,filter,false,catch,ioexception,e,throw,new,aggregation,initialization,exception,failed,to,initialse,filter,e,return,weight
FilterAggregatorFactory -> public Weight getWeight();1536314350;Returns the {@link Weight} for this filter aggregation, creating it if_necessary. This is done lazily so that the {@link Weight} is only created_if the aggregation collects documents reducing the overhead of the_aggregation in teh case where no documents are collected.__Note that as aggregations are initialsed and executed in a serial manner,_no concurrency considerations are necessary here.;public Weight getWeight() {_        if (weight == null) {_            IndexSearcher contextSearcher = context.searcher()__            try {_                weight = contextSearcher.createWeight(contextSearcher.rewrite(filter), ScoreMode.COMPLETE_NO_SCORES, 1f)__            } catch (IOException e) {_                throw new AggregationInitializationException("Failed to initialse filter", e)__            }_        }_        return weight__    };returns,the,link,weight,for,this,filter,aggregation,creating,it,if,necessary,this,is,done,lazily,so,that,the,link,weight,is,only,created,if,the,aggregation,collects,documents,reducing,the,overhead,of,the,aggregation,in,teh,case,where,no,documents,are,collected,note,that,as,aggregations,are,initialsed,and,executed,in,a,serial,manner,no,concurrency,considerations,are,necessary,here;public,weight,get,weight,if,weight,null,index,searcher,context,searcher,context,searcher,try,weight,context,searcher,create,weight,context,searcher,rewrite,filter,score,mode,1f,catch,ioexception,e,throw,new,aggregation,initialization,exception,failed,to,initialse,filter,e,return,weight
FilterAggregatorFactory -> public Weight getWeight();1539615817;Returns the {@link Weight} for this filter aggregation, creating it if_necessary. This is done lazily so that the {@link Weight} is only created_if the aggregation collects documents reducing the overhead of the_aggregation in the case where no documents are collected.__Note that as aggregations are initialsed and executed in a serial manner,_no concurrency considerations are necessary here.;public Weight getWeight() {_        if (weight == null) {_            IndexSearcher contextSearcher = context.searcher()__            try {_                weight = contextSearcher.createWeight(contextSearcher.rewrite(filter), ScoreMode.COMPLETE_NO_SCORES, 1f)__            } catch (IOException e) {_                throw new AggregationInitializationException("Failed to initialse filter", e)__            }_        }_        return weight__    };returns,the,link,weight,for,this,filter,aggregation,creating,it,if,necessary,this,is,done,lazily,so,that,the,link,weight,is,only,created,if,the,aggregation,collects,documents,reducing,the,overhead,of,the,aggregation,in,the,case,where,no,documents,are,collected,note,that,as,aggregations,are,initialsed,and,executed,in,a,serial,manner,no,concurrency,considerations,are,necessary,here;public,weight,get,weight,if,weight,null,index,searcher,context,searcher,context,searcher,try,weight,context,searcher,create,weight,context,searcher,rewrite,filter,score,mode,1f,catch,ioexception,e,throw,new,aggregation,initialization,exception,failed,to,initialse,filter,e,return,weight
FilterAggregatorFactory -> public Weight getWeight();1543834151;Returns the {@link Weight} for this filter aggregation, creating it if_necessary. This is done lazily so that the {@link Weight} is only created_if the aggregation collects documents reducing the overhead of the_aggregation in the case where no documents are collected.__Note that as aggregations are initialsed and executed in a serial manner,_no concurrency considerations are necessary here.;public Weight getWeight() {_        if (weight == null) {_            IndexSearcher contextSearcher = context.searcher()__            try {_                weight = contextSearcher.createWeight(contextSearcher.rewrite(filter), ScoreMode.COMPLETE_NO_SCORES, 1f)__            } catch (IOException e) {_                throw new AggregationInitializationException("Failed to initialse filter", e)__            }_        }_        return weight__    };returns,the,link,weight,for,this,filter,aggregation,creating,it,if,necessary,this,is,done,lazily,so,that,the,link,weight,is,only,created,if,the,aggregation,collects,documents,reducing,the,overhead,of,the,aggregation,in,the,case,where,no,documents,are,collected,note,that,as,aggregations,are,initialsed,and,executed,in,a,serial,manner,no,concurrency,considerations,are,necessary,here;public,weight,get,weight,if,weight,null,index,searcher,context,searcher,context,searcher,try,weight,context,searcher,create,weight,context,searcher,rewrite,filter,score,mode,1f,catch,ioexception,e,throw,new,aggregation,initialization,exception,failed,to,initialse,filter,e,return,weight
