commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static RolloverInfo parse(XContentParser parser, String alias) {     return PARSER.apply(parser, alias). }
false;public;0;3;;public String getAlias() {     return alias. }
false;public;0;3;;public List<Condition<?>> getMetConditions() {     return metConditions. }
false;public;0;3;;public long getTime() {     return time. }
false;public,static;1;3;;public static Diff<RolloverInfo> readDiffFrom(StreamInput in) throws IOException {     return readDiffFrom(RolloverInfo::new, in). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(alias).     out.writeVLong(time).     out.writeNamedWriteableList(metConditions). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(alias).     builder.startObject(CONDITION_FIELD.getPreferredName()).     for (Condition<?> condition : metConditions) {         condition.toXContent(builder, params).     }     builder.endObject().     builder.field(TIME_FIELD.getPreferredName(), time).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(alias, metConditions, time). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     RolloverInfo other = (RolloverInfo) obj.     return Objects.equals(alias, other.alias) && Objects.equals(metConditions, other.metConditions) && Objects.equals(time, other.time). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
