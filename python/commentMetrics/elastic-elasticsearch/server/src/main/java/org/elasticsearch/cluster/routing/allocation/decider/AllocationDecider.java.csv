# id;timestamp;commentText;codeText;commentWords;codeWords
AllocationDecider -> public Decision canRebalance(RoutingAllocation allocation);1524684173;Returns a {@link Decision} whether the cluster can execute_re-balanced operations at all._{@link Decision#ALWAYS}.;public Decision canRebalance(RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,cluster,can,execute,re,balanced,operations,at,all,link,decision,always;public,decision,can,rebalance,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canRebalance(RoutingAllocation allocation);1541092382;Returns a {@link Decision} whether the cluster can execute_re-balanced operations at all._{@link Decision#ALWAYS}.;public Decision canRebalance(RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,cluster,can,execute,re,balanced,operations,at,all,link,decision,always;public,decision,can,rebalance,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canRebalance(RoutingAllocation allocation);1542402632;Returns a {@link Decision} whether the cluster can execute_re-balanced operations at all._{@link Decision#ALWAYS}.;public Decision canRebalance(RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,cluster,can,execute,re,balanced,operations,at,all,link,decision,always;public,decision,can,rebalance,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1524684173;Returns a {@link Decision} whether the given shard routing can be remain_on the given node. The default is {@link Decision#ALWAYS}.;public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,remain,on,the,given,node,the,default,is,link,decision,always;public,decision,can,remain,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1541092382;Returns a {@link Decision} whether the given shard routing can be remain_on the given node. The default is {@link Decision#ALWAYS}.;public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,remain,on,the,given,node,the,default,is,link,decision,always;public,decision,can,remain,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1542402632;Returns a {@link Decision} whether the given shard routing can be remain_on the given node. The default is {@link Decision#ALWAYS}.;public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,remain,on,the,given,node,the,default,is,link,decision,always;public,decision,can,remain,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation);1524684173;Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,shard,routing,shard,routing,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation);1541092382;Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,shard,routing,shard,routing,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation);1542402632;Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,shard,routing,shard,routing,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1524684173;Returns a {@link Decision} whether the given shard routing can be_allocated on the given node. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,on,the,given,node,the,default,is,link,decision,always;public,decision,can,allocate,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1541092382;Returns a {@link Decision} whether the given shard routing can be_allocated on the given node. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,on,the,given,node,the,default,is,link,decision,always;public,decision,can,allocate,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1542402632;Returns a {@link Decision} whether the given shard routing can be_allocated on the given node. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,on,the,given,node,the,default,is,link,decision,always;public,decision,can,allocate,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(RoutingNode node, RoutingAllocation allocation);1524684173;Returns a {@link Decision} whether the given node can allow any allocation at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,node,can,allow,any,allocation,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(RoutingNode node, RoutingAllocation allocation);1541092382;Returns a {@link Decision} whether the given node can allow any allocation at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,node,can,allow,any,allocation,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(RoutingNode node, RoutingAllocation allocation);1542402632;Returns a {@link Decision} whether the given node can allow any allocation at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,node,can,allow,any,allocation,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation allocation);1524684173;Returns a {@link Decision} whether the given shard routing can be_re-balanced to the given allocation. The default is_{@link Decision#ALWAYS}.;public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,re,balanced,to,the,given,allocation,the,default,is,link,decision,always;public,decision,can,rebalance,shard,routing,shard,routing,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation allocation);1541092382;Returns a {@link Decision} whether the given shard routing can be_re-balanced to the given allocation. The default is_{@link Decision#ALWAYS}.;public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,re,balanced,to,the,given,allocation,the,default,is,link,decision,always;public,decision,can,rebalance,shard,routing,shard,routing,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation allocation);1542402632;Returns a {@link Decision} whether the given shard routing can be_re-balanced to the given allocation. The default is_{@link Decision#ALWAYS}.;public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,re,balanced,to,the,given,allocation,the,default,is,link,decision,always;public,decision,can,rebalance,shard,routing,shard,routing,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1524684173;Returns a {@link Decision} whether the given primary shard can be_forcibly allocated on the given node. This method should only be called_for unassigned primary shards where the node has a shard copy on disk.__Note: all implementations that override this behavior should take into account_the results of {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)}_before making a decision on force allocation, because force allocation should only_be considered if all deciders return {@link Decision#NO}.;public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        assert shardRouting.primary() : "must not call canForceAllocatePrimary on a non-primary shard " + shardRouting__        assert shardRouting.unassigned() : "must not call canForceAllocatePrimary on an assigned shard " + shardRouting__        Decision decision = canAllocate(shardRouting, node, allocation)__        if (decision.type() == Type.NO) {_            _            return allocation.decision(Decision.YES,_                                       decision.label(),_                                       "primary shard [%s] allowed to force allocate on node [%s]",_                                       shardRouting.shardId(), node.nodeId())__        } else {_            _            return decision__        }_    };returns,a,link,decision,whether,the,given,primary,shard,can,be,forcibly,allocated,on,the,given,node,this,method,should,only,be,called,for,unassigned,primary,shards,where,the,node,has,a,shard,copy,on,disk,note,all,implementations,that,override,this,behavior,should,take,into,account,the,results,of,link,can,allocate,shard,routing,routing,node,routing,allocation,before,making,a,decision,on,force,allocation,because,force,allocation,should,only,be,considered,if,all,deciders,return,link,decision,no;public,decision,can,force,allocate,primary,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,assert,shard,routing,primary,must,not,call,can,force,allocate,primary,on,a,non,primary,shard,shard,routing,assert,shard,routing,unassigned,must,not,call,can,force,allocate,primary,on,an,assigned,shard,shard,routing,decision,decision,can,allocate,shard,routing,node,allocation,if,decision,type,type,no,return,allocation,decision,decision,yes,decision,label,primary,shard,s,allowed,to,force,allocate,on,node,s,shard,routing,shard,id,node,node,id,else,return,decision
AllocationDecider -> public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1541092382;Returns a {@link Decision} whether the given primary shard can be_forcibly allocated on the given node. This method should only be called_for unassigned primary shards where the node has a shard copy on disk.__Note: all implementations that override this behavior should take into account_the results of {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)}_before making a decision on force allocation, because force allocation should only_be considered if all deciders return {@link Decision#NO}.;public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        assert shardRouting.primary() : "must not call canForceAllocatePrimary on a non-primary shard " + shardRouting__        assert shardRouting.unassigned() : "must not call canForceAllocatePrimary on an assigned shard " + shardRouting__        Decision decision = canAllocate(shardRouting, node, allocation)__        if (decision.type() == Type.NO) {_            _            return allocation.decision(Decision.YES,_                                       decision.label(),_                                       "primary shard [%s] allowed to force allocate on node [%s]",_                                       shardRouting.shardId(), node.nodeId())__        } else {_            _            return decision__        }_    };returns,a,link,decision,whether,the,given,primary,shard,can,be,forcibly,allocated,on,the,given,node,this,method,should,only,be,called,for,unassigned,primary,shards,where,the,node,has,a,shard,copy,on,disk,note,all,implementations,that,override,this,behavior,should,take,into,account,the,results,of,link,can,allocate,shard,routing,routing,node,routing,allocation,before,making,a,decision,on,force,allocation,because,force,allocation,should,only,be,considered,if,all,deciders,return,link,decision,no;public,decision,can,force,allocate,primary,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,assert,shard,routing,primary,must,not,call,can,force,allocate,primary,on,a,non,primary,shard,shard,routing,assert,shard,routing,unassigned,must,not,call,can,force,allocate,primary,on,an,assigned,shard,shard,routing,decision,decision,can,allocate,shard,routing,node,allocation,if,decision,type,type,no,return,allocation,decision,decision,yes,decision,label,primary,shard,s,allowed,to,force,allocate,on,node,s,shard,routing,shard,id,node,node,id,else,return,decision
AllocationDecider -> public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation);1542402632;Returns a {@link Decision} whether the given primary shard can be_forcibly allocated on the given node. This method should only be called_for unassigned primary shards where the node has a shard copy on disk.__Note: all implementations that override this behavior should take into account_the results of {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)}_before making a decision on force allocation, because force allocation should only_be considered if all deciders return {@link Decision#NO}.;public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {_        assert shardRouting.primary() : "must not call canForceAllocatePrimary on a non-primary shard " + shardRouting__        assert shardRouting.unassigned() : "must not call canForceAllocatePrimary on an assigned shard " + shardRouting__        Decision decision = canAllocate(shardRouting, node, allocation)__        if (decision.type() == Type.NO) {_            _            return allocation.decision(Decision.YES,_                                       decision.label(),_                                       "primary shard [%s] allowed to force allocate on node [%s]",_                                       shardRouting.shardId(), node.nodeId())__        } else {_            _            return decision__        }_    };returns,a,link,decision,whether,the,given,primary,shard,can,be,forcibly,allocated,on,the,given,node,this,method,should,only,be,called,for,unassigned,primary,shards,where,the,node,has,a,shard,copy,on,disk,note,all,implementations,that,override,this,behavior,should,take,into,account,the,results,of,link,can,allocate,shard,routing,routing,node,routing,allocation,before,making,a,decision,on,force,allocation,because,force,allocation,should,only,be,considered,if,all,deciders,return,link,decision,no;public,decision,can,force,allocate,primary,shard,routing,shard,routing,routing,node,node,routing,allocation,allocation,assert,shard,routing,primary,must,not,call,can,force,allocate,primary,on,a,non,primary,shard,shard,routing,assert,shard,routing,unassigned,must,not,call,can,force,allocate,primary,on,an,assigned,shard,shard,routing,decision,decision,can,allocate,shard,routing,node,allocation,if,decision,type,type,no,return,allocation,decision,decision,yes,decision,label,primary,shard,s,allowed,to,force,allocate,on,node,s,shard,routing,shard,id,node,node,id,else,return,decision
AllocationDecider -> public Decision canAllocate(IndexMetaData indexMetaData, RoutingNode node, RoutingAllocation allocation);1524684173;Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(IndexMetaData indexMetaData, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,index,meta,data,index,meta,data,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(IndexMetaData indexMetaData, RoutingNode node, RoutingAllocation allocation);1541092382;Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(IndexMetaData indexMetaData, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,index,meta,data,index,meta,data,routing,node,node,routing,allocation,allocation,return,decision,always
AllocationDecider -> public Decision canAllocate(IndexMetaData indexMetaData, RoutingNode node, RoutingAllocation allocation);1542402632;Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the_{@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.;public Decision canAllocate(IndexMetaData indexMetaData, RoutingNode node, RoutingAllocation allocation) {_        return Decision.ALWAYS__    };returns,a,link,decision,whether,the,given,shard,routing,can,be,allocated,at,all,at,this,state,of,the,link,routing,allocation,the,default,is,link,decision,always;public,decision,can,allocate,index,meta,data,index,meta,data,routing,node,node,routing,allocation,allocation,return,decision,always
