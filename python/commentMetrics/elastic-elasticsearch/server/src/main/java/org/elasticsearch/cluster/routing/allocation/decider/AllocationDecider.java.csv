commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Returns a {@link Decision} whether the given shard routing can be  * re-balanced to the given allocation. The default is  * {@link Decision#ALWAYS}.  */ ;/**  * Returns a {@link Decision} whether the given shard routing can be  * re-balanced to the given allocation. The default is  * {@link Decision#ALWAYS}.  */ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation allocation) {     return Decision.ALWAYS. }
true;public;3;3;/**  * Returns a {@link Decision} whether the given shard routing can be  * allocated on the given node. The default is {@link Decision#ALWAYS}.  */ ;/**  * Returns a {@link Decision} whether the given shard routing can be  * allocated on the given node. The default is {@link Decision#ALWAYS}.  */ public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {     return Decision.ALWAYS. }
true;public;3;3;/**  * Returns a {@link Decision} whether the given shard routing can be remain  * on the given node. The default is {@link Decision#ALWAYS}.  */ ;/**  * Returns a {@link Decision} whether the given shard routing can be remain  * on the given node. The default is {@link Decision#ALWAYS}.  */ public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {     return Decision.ALWAYS. }
true;public;2;3;/**  * Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the  * {@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.  */ ;/**  * Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the  * {@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.  */ public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {     return Decision.ALWAYS. }
true;public;3;3;/**  * Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the  * {@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.  */ ;/**  * Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the  * {@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.  */ public Decision canAllocate(IndexMetaData indexMetaData, RoutingNode node, RoutingAllocation allocation) {     return Decision.ALWAYS. }
true;public;2;3;/**  * Returns a {@link Decision} whether the given node can allow any allocation at all at this state of the  * {@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.  */ ;/**  * Returns a {@link Decision} whether the given node can allow any allocation at all at this state of the  * {@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.  */ public Decision canAllocate(RoutingNode node, RoutingAllocation allocation) {     return Decision.ALWAYS. }
true;public;1;3;/**  * Returns a {@link Decision} whether the cluster can execute  * re-balanced operations at all.  * {@link Decision#ALWAYS}.  */ ;/**  * Returns a {@link Decision} whether the cluster can execute  * re-balanced operations at all.  * {@link Decision#ALWAYS}.  */ public Decision canRebalance(RoutingAllocation allocation) {     return Decision.ALWAYS. }
true;public;3;15;/**  * Returns a {@link Decision} whether the given primary shard can be  * forcibly allocated on the given node. This method should only be called  * for unassigned primary shards where the node has a shard copy on disk.  *  * Note: all implementations that override this behavior should take into account  * the results of {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)}  * before making a decision on force allocation, because force allocation should only  * be considered if all deciders return {@link Decision#NO}.  */ ;/**  * Returns a {@link Decision} whether the given primary shard can be  * forcibly allocated on the given node. This method should only be called  * for unassigned primary shards where the node has a shard copy on disk.  *  * Note: all implementations that override this behavior should take into account  * the results of {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)}  * before making a decision on force allocation, because force allocation should only  * be considered if all deciders return {@link Decision#NO}.  */ public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {     assert shardRouting.primary() : "must not call canForceAllocatePrimary on a non-primary shard " + shardRouting.     assert shardRouting.unassigned() : "must not call canForceAllocatePrimary on an assigned shard " + shardRouting.     Decision decision = canAllocate(shardRouting, node, allocation).     if (decision.type() == Type.NO) {         // On a NO decision, by default, we allow force allocating the primary.         return allocation.decision(Decision.YES, decision.label(), "primary shard [%s] allowed to force allocate on node [%s]", shardRouting.shardId(), node.nodeId()).     } else {         // On a THROTTLE/YES decision, we use the same decision instead of forcing allocation         return decision.     } }
