commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "document_term_vectors_action". }
false;public;2;23;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     TermVectorsRequest termVectorsRequest.     if (request.hasParam("type")) {         deprecationLogger.deprecatedAndMaybeLog("termvectors_with_types", TYPES_DEPRECATION_MESSAGE).         termVectorsRequest = new TermVectorsRequest(request.param("index"), request.param("type"), request.param("id")).     } else {         termVectorsRequest = new TermVectorsRequest(request.param("index"), MapperService.SINGLE_MAPPING_NAME, request.param("id")).     }     if (request.hasContentOrSourceParam()) {         try (XContentParser parser = request.contentOrSourceParamParser()) {             TermVectorsRequest.parseRequest(termVectorsRequest, parser).         }     }     readURIParameters(termVectorsRequest, request).     return channel -> client.termVectors(termVectorsRequest, new RestToXContentListener<>(channel)). }
false;public,static;2;16;;public static void readURIParameters(TermVectorsRequest termVectorsRequest, RestRequest request) {     String fields = request.param("fields").     addFieldStringsFromParameter(termVectorsRequest, fields).     termVectorsRequest.offsets(request.paramAsBoolean("offsets", termVectorsRequest.offsets())).     termVectorsRequest.positions(request.paramAsBoolean("positions", termVectorsRequest.positions())).     termVectorsRequest.payloads(request.paramAsBoolean("payloads", termVectorsRequest.payloads())).     termVectorsRequest.routing(request.param("routing")).     termVectorsRequest.realtime(request.paramAsBoolean("realtime", termVectorsRequest.realtime())).     termVectorsRequest.version(RestActions.parseVersion(request, termVectorsRequest.version())).     termVectorsRequest.versionType(VersionType.fromString(request.param("version_type"), termVectorsRequest.versionType())).     termVectorsRequest.preference(request.param("preference")).     termVectorsRequest.termStatistics(request.paramAsBoolean("termStatistics", termVectorsRequest.termStatistics())).     termVectorsRequest.termStatistics(request.paramAsBoolean("term_statistics", termVectorsRequest.termStatistics())).     termVectorsRequest.fieldStatistics(request.paramAsBoolean("fieldStatistics", termVectorsRequest.fieldStatistics())).     termVectorsRequest.fieldStatistics(request.paramAsBoolean("field_statistics", termVectorsRequest.fieldStatistics())). }
false;public,static;2;18;;public static void addFieldStringsFromParameter(TermVectorsRequest termVectorsRequest, String fields) {     Set<String> selectedFields = termVectorsRequest.selectedFields().     if (fields != null) {         String[] paramFieldStrings = Strings.commaDelimitedListToStringArray(fields).         for (String field : paramFieldStrings) {             if (selectedFields == null) {                 selectedFields = new HashSet<>().             }             if (!selectedFields.contains(field)) {                 field = field.replaceAll("\\s", "").                 selectedFields.add(field).             }         }     }     if (selectedFields != null) {         termVectorsRequest.selectedFields(selectedFields.toArray(new String[selectedFields.size()])).     } }
