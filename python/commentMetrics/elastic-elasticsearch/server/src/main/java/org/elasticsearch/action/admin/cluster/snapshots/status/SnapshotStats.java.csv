commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns time when snapshot started  */ ;/**  * Returns time when snapshot started  */ public long getStartTime() {     return startTime. }
true;public;0;3;/**  * Returns snapshot running time  */ ;/**  * Returns snapshot running time  */ public long getTime() {     return time. }
true;public;0;3;/**  * Returns incremental file count of the snapshot  */ ;/**  * Returns incremental file count of the snapshot  */ public int getIncrementalFileCount() {     return incrementalFileCount. }
true;public;0;3;/**  * Returns total number of files in the snapshot  */ ;/**  * Returns total number of files in the snapshot  */ public int getTotalFileCount() {     return totalFileCount. }
true;public;0;3;/**  * Returns number of files in the snapshot that were processed so far  */ ;/**  * Returns number of files in the snapshot that were processed so far  */ public int getProcessedFileCount() {     return processedFileCount. }
true;public;0;3;/**  * Return incremental files size of the snapshot  */ ;/**  * Return incremental files size of the snapshot  */ public long getIncrementalSize() {     return incrementalSize. }
true;public;0;3;/**  * Returns total size of files in the snapshot  */ ;/**  * Returns total size of files in the snapshot  */ public long getTotalSize() {     return totalSize. }
true;public;0;3;/**  * Returns total size of files in the snapshot that were processed so far  */ ;/**  * Returns total size of files in the snapshot that were processed so far  */ public long getProcessedSize() {     return processedSize. }
false;public,static;1;5;;public static SnapshotStats readSnapshotStats(StreamInput in) throws IOException {     SnapshotStats stats = new SnapshotStats().     stats.readFrom(in).     return stats. }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(startTime).     out.writeVLong(time).     out.writeVInt(incrementalFileCount).     out.writeVInt(processedFileCount).     out.writeVLong(incrementalSize).     out.writeVLong(processedSize).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeVInt(totalFileCount).         out.writeVLong(totalSize).     } }
false;public;1;19;;@Override public void readFrom(StreamInput in) throws IOException {     startTime = in.readVLong().     time = in.readVLong().     incrementalFileCount = in.readVInt().     processedFileCount = in.readVInt().     incrementalSize = in.readVLong().     processedSize = in.readVLong().     if (in.getVersion().onOrAfter(Version.V_6_4_0)) {         totalFileCount = in.readVInt().         totalSize = in.readVLong().     } else {         totalFileCount = incrementalFileCount.         totalSize = incrementalSize.     } }
false;public;2;33;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     {         builder.startObject(Fields.INCREMENTAL).         {             builder.field(Fields.FILE_COUNT, getIncrementalFileCount()).             builder.humanReadableField(Fields.SIZE_IN_BYTES, Fields.SIZE, new ByteSizeValue(getIncrementalSize())).         }         builder.endObject().         if (getProcessedFileCount() != getIncrementalFileCount()) {             builder.startObject(Fields.PROCESSED).             {                 builder.field(Fields.FILE_COUNT, getProcessedFileCount()).                 builder.humanReadableField(Fields.SIZE_IN_BYTES, Fields.SIZE, new ByteSizeValue(getProcessedSize())).             }             builder.endObject().         }         builder.startObject(Fields.TOTAL).         {             builder.field(Fields.FILE_COUNT, getTotalFileCount()).             builder.humanReadableField(Fields.SIZE_IN_BYTES, Fields.SIZE, new ByteSizeValue(getTotalSize())).         }         builder.endObject().         // timings stats         builder.field(Fields.START_TIME_IN_MILLIS, getStartTime()).         builder.humanReadableField(Fields.TIME_IN_MILLIS, Fields.TIME, new TimeValue(getTime())).     }     return builder.endObject(). }
false;public,static;1;93;;public static SnapshotStats fromXContent(XContentParser parser) throws IOException {     // Parse this old school style instead of using the ObjectParser since there's an impedance mismatch between how the     // object has historically been written as JSON versus how it is structured in Java.     XContentParser.Token token = parser.currentToken().     if (token == null) {         token = parser.nextToken().     }     XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation).     long startTime = 0.     long time = 0.     int incrementalFileCount = 0.     int totalFileCount = 0.     int processedFileCount = 0.     long incrementalSize = 0.     long totalSize = 0.     long processedSize = 0.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation).         String currentName = parser.currentName().         token = parser.nextToken().         if (currentName.equals(Fields.INCREMENTAL)) {             XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation).             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation).                 String innerName = parser.currentName().                 token = parser.nextToken().                 if (innerName.equals(Fields.FILE_COUNT)) {                     XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation).                     incrementalFileCount = parser.intValue().                 } else if (innerName.equals(Fields.SIZE_IN_BYTES)) {                     XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation).                     incrementalSize = parser.longValue().                 } else {                     // Unknown sub field, skip                     if (token == XContentParser.Token.START_OBJECT || token == XContentParser.Token.START_ARRAY) {                         parser.skipChildren().                     }                 }             }         } else if (currentName.equals(Fields.PROCESSED)) {             XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation).             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation).                 String innerName = parser.currentName().                 token = parser.nextToken().                 if (innerName.equals(Fields.FILE_COUNT)) {                     XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation).                     processedFileCount = parser.intValue().                 } else if (innerName.equals(Fields.SIZE_IN_BYTES)) {                     XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation).                     processedSize = parser.longValue().                 } else {                     // Unknown sub field, skip                     if (token == XContentParser.Token.START_OBJECT || token == XContentParser.Token.START_ARRAY) {                         parser.skipChildren().                     }                 }             }         } else if (currentName.equals(Fields.TOTAL)) {             XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation).             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation).                 String innerName = parser.currentName().                 token = parser.nextToken().                 if (innerName.equals(Fields.FILE_COUNT)) {                     XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation).                     totalFileCount = parser.intValue().                 } else if (innerName.equals(Fields.SIZE_IN_BYTES)) {                     XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation).                     totalSize = parser.longValue().                 } else {                     // Unknown sub field, skip                     if (token == XContentParser.Token.START_OBJECT || token == XContentParser.Token.START_ARRAY) {                         parser.skipChildren().                     }                 }             }         } else if (currentName.equals(Fields.START_TIME_IN_MILLIS)) {             XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation).             startTime = parser.longValue().         } else if (currentName.equals(Fields.TIME_IN_MILLIS)) {             XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation).             time = parser.longValue().         } else {             // Unknown field, skip             if (token == XContentParser.Token.START_OBJECT || token == XContentParser.Token.START_ARRAY) {                 parser.skipChildren().             }         }     }     return new SnapshotStats(startTime, time, incrementalFileCount, totalFileCount, processedFileCount, incrementalSize, totalSize, processedSize). }
false;;1;24;;void add(SnapshotStats stats) {     incrementalFileCount += stats.incrementalFileCount.     totalFileCount += stats.totalFileCount.     processedFileCount += stats.processedFileCount.     incrementalSize += stats.incrementalSize.     totalSize += stats.totalSize.     processedSize += stats.processedSize.     if (startTime == 0) {         // First time here         startTime = stats.startTime.         time = stats.time.     } else {         // The time the last snapshot ends         long endTime = Math.max(startTime + time, stats.startTime + stats.time).         // The time the first snapshot starts         startTime = Math.min(startTime, stats.startTime).         // Update duration         time = endTime - startTime.     } }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     SnapshotStats that = (SnapshotStats) o.     if (startTime != that.startTime)         return false.     if (time != that.time)         return false.     if (incrementalFileCount != that.incrementalFileCount)         return false.     if (totalFileCount != that.totalFileCount)         return false.     if (processedFileCount != that.processedFileCount)         return false.     if (incrementalSize != that.incrementalSize)         return false.     if (totalSize != that.totalSize)         return false.     return processedSize == that.processedSize. }
false;public;0;12;;@Override public int hashCode() {     int result = (int) (startTime ^ (startTime >>> 32)).     result = 31 * result + (int) (time ^ (time >>> 32)).     result = 31 * result + incrementalFileCount.     result = 31 * result + totalFileCount.     result = 31 * result + processedFileCount.     result = 31 * result + (int) (incrementalSize ^ (incrementalSize >>> 32)).     result = 31 * result + (int) (totalSize ^ (totalSize >>> 32)).     result = 31 * result + (int) (processedSize ^ (processedSize >>> 32)).     return result. }
