# id;timestamp;commentText;codeText;commentWords;codeWords
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String reason);1524684173;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,reason,if,committed,or,failed,return,committed,false,logger,trace,failed,to,commit,version,cluster,state,version,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String reason);1528893677;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,reason,if,committed,or,failed,return,committed,false,logger,trace,failed,to,commit,version,cluster,state,version,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String reason);1529015561;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,reason,if,committed,or,failed,return,committed,false,logger,trace,failed,to,commit,version,cluster,state,version,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String reason);1529687475;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,reason,if,committed,or,failed,return,committed,false,logger,trace,failed,to,commit,version,cluster,state,version,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String reason);1541092382;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,reason,if,committed,or,failed,return,committed,false,logger,trace,failed,to,commit,version,cluster,state,version,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String reason);1542402632;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,reason,if,committed,or,failed,return,committed,false,logger,trace,failed,to,commit,version,cluster,state,version,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String reason);1544081506;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,reason,if,committed,or,failed,return,committed,false,logger,trace,failed,to,commit,version,cluster,state,version,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String reason);1544632755;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,reason,if,committed,or,failed,return,committed,false,logger,trace,failed,to,commit,version,cluster,state,version,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode);1524684173;check if enough master node responded to commit the change. fails the commit_if there are no more pending master nodes but not enough acks to commit.;private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {_            logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])",_                    masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit)__            neededMastersToCommit--__            if (neededMastersToCommit == 0) {_                if (markAsCommitted()) {_                    for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {_                        sendCommitToNode(nodeToCommit, clusterState, this)__                    }_                    sendAckedBeforeCommit.clear()__                }_            }_            decrementPendingMasterAcksAndChangeForFailure()__        };check,if,enough,master,node,responded,to,commit,the,change,fails,the,commit,if,there,are,no,more,pending,master,nodes,but,not,enough,acks,to,commit;private,synchronized,void,check,for,commit,or,fail,if,no,pending,discovery,node,master,node,logger,trace,master,node,acked,cluster,state,version,processing,current,pending,needed,master,node,cluster,state,version,pending,master,nodes,needed,masters,to,commit,needed,masters,to,commit,if,needed,masters,to,commit,0,if,mark,as,committed,for,discovery,node,node,to,commit,send,acked,before,commit,send,commit,to,node,node,to,commit,cluster,state,this,send,acked,before,commit,clear,decrement,pending,master,acks,and,change,for,failure
PublishClusterStateAction -> SendingController -> private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode);1528893677;check if enough master node responded to commit the change. fails the commit_if there are no more pending master nodes but not enough acks to commit.;private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {_            logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])",_                    masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit)__            neededMastersToCommit--__            if (neededMastersToCommit == 0) {_                if (markAsCommitted()) {_                    for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {_                        sendCommitToNode(nodeToCommit, clusterState, this)__                    }_                    sendAckedBeforeCommit.clear()__                }_            }_            decrementPendingMasterAcksAndChangeForFailure()__        };check,if,enough,master,node,responded,to,commit,the,change,fails,the,commit,if,there,are,no,more,pending,master,nodes,but,not,enough,acks,to,commit;private,synchronized,void,check,for,commit,or,fail,if,no,pending,discovery,node,master,node,logger,trace,master,node,acked,cluster,state,version,processing,current,pending,needed,master,node,cluster,state,version,pending,master,nodes,needed,masters,to,commit,needed,masters,to,commit,if,needed,masters,to,commit,0,if,mark,as,committed,for,discovery,node,node,to,commit,send,acked,before,commit,send,commit,to,node,node,to,commit,cluster,state,this,send,acked,before,commit,clear,decrement,pending,master,acks,and,change,for,failure
PublishClusterStateAction -> SendingController -> private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode);1529015561;check if enough master node responded to commit the change. fails the commit_if there are no more pending master nodes but not enough acks to commit.;private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {_            logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])",_                    masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit)__            neededMastersToCommit--__            if (neededMastersToCommit == 0) {_                if (markAsCommitted()) {_                    for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {_                        sendCommitToNode(nodeToCommit, clusterState, this)__                    }_                    sendAckedBeforeCommit.clear()__                }_            }_            decrementPendingMasterAcksAndChangeForFailure()__        };check,if,enough,master,node,responded,to,commit,the,change,fails,the,commit,if,there,are,no,more,pending,master,nodes,but,not,enough,acks,to,commit;private,synchronized,void,check,for,commit,or,fail,if,no,pending,discovery,node,master,node,logger,trace,master,node,acked,cluster,state,version,processing,current,pending,needed,master,node,cluster,state,version,pending,master,nodes,needed,masters,to,commit,needed,masters,to,commit,if,needed,masters,to,commit,0,if,mark,as,committed,for,discovery,node,node,to,commit,send,acked,before,commit,send,commit,to,node,node,to,commit,cluster,state,this,send,acked,before,commit,clear,decrement,pending,master,acks,and,change,for,failure
PublishClusterStateAction -> SendingController -> private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode);1529687475;check if enough master node responded to commit the change. fails the commit_if there are no more pending master nodes but not enough acks to commit.;private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {_            logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])",_                    masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit)__            neededMastersToCommit--__            if (neededMastersToCommit == 0) {_                if (markAsCommitted()) {_                    for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {_                        sendCommitToNode(nodeToCommit, clusterState, this)__                    }_                    sendAckedBeforeCommit.clear()__                }_            }_            decrementPendingMasterAcksAndChangeForFailure()__        };check,if,enough,master,node,responded,to,commit,the,change,fails,the,commit,if,there,are,no,more,pending,master,nodes,but,not,enough,acks,to,commit;private,synchronized,void,check,for,commit,or,fail,if,no,pending,discovery,node,master,node,logger,trace,master,node,acked,cluster,state,version,processing,current,pending,needed,master,node,cluster,state,version,pending,master,nodes,needed,masters,to,commit,needed,masters,to,commit,if,needed,masters,to,commit,0,if,mark,as,committed,for,discovery,node,node,to,commit,send,acked,before,commit,send,commit,to,node,node,to,commit,cluster,state,this,send,acked,before,commit,clear,decrement,pending,master,acks,and,change,for,failure
PublishClusterStateAction -> SendingController -> private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode);1541092382;check if enough master node responded to commit the change. fails the commit_if there are no more pending master nodes but not enough acks to commit.;private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {_            logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])",_                    masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit)__            neededMastersToCommit--__            if (neededMastersToCommit == 0) {_                if (markAsCommitted()) {_                    for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {_                        sendCommitToNode(nodeToCommit, clusterState, this)__                    }_                    sendAckedBeforeCommit.clear()__                }_            }_            decrementPendingMasterAcksAndChangeForFailure()__        };check,if,enough,master,node,responded,to,commit,the,change,fails,the,commit,if,there,are,no,more,pending,master,nodes,but,not,enough,acks,to,commit;private,synchronized,void,check,for,commit,or,fail,if,no,pending,discovery,node,master,node,logger,trace,master,node,acked,cluster,state,version,processing,current,pending,needed,master,node,cluster,state,version,pending,master,nodes,needed,masters,to,commit,needed,masters,to,commit,if,needed,masters,to,commit,0,if,mark,as,committed,for,discovery,node,node,to,commit,send,acked,before,commit,send,commit,to,node,node,to,commit,cluster,state,this,send,acked,before,commit,clear,decrement,pending,master,acks,and,change,for,failure
PublishClusterStateAction -> SendingController -> private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode);1542402632;check if enough master node responded to commit the change. fails the commit_if there are no more pending master nodes but not enough acks to commit.;private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {_            logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])",_                    masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit)__            neededMastersToCommit--__            if (neededMastersToCommit == 0) {_                if (markAsCommitted()) {_                    for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {_                        sendCommitToNode(nodeToCommit, clusterState, this)__                    }_                    sendAckedBeforeCommit.clear()__                }_            }_            decrementPendingMasterAcksAndChangeForFailure()__        };check,if,enough,master,node,responded,to,commit,the,change,fails,the,commit,if,there,are,no,more,pending,master,nodes,but,not,enough,acks,to,commit;private,synchronized,void,check,for,commit,or,fail,if,no,pending,discovery,node,master,node,logger,trace,master,node,acked,cluster,state,version,processing,current,pending,needed,master,node,cluster,state,version,pending,master,nodes,needed,masters,to,commit,needed,masters,to,commit,if,needed,masters,to,commit,0,if,mark,as,committed,for,discovery,node,node,to,commit,send,acked,before,commit,send,commit,to,node,node,to,commit,cluster,state,this,send,acked,before,commit,clear,decrement,pending,master,acks,and,change,for,failure
PublishClusterStateAction -> SendingController -> private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode);1544081506;check if enough master node responded to commit the change. fails the commit_if there are no more pending master nodes but not enough acks to commit.;private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {_            logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])",_                    masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit)__            neededMastersToCommit--__            if (neededMastersToCommit == 0) {_                if (markAsCommitted()) {_                    for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {_                        sendCommitToNode(nodeToCommit, clusterState, this)__                    }_                    sendAckedBeforeCommit.clear()__                }_            }_            decrementPendingMasterAcksAndChangeForFailure()__        };check,if,enough,master,node,responded,to,commit,the,change,fails,the,commit,if,there,are,no,more,pending,master,nodes,but,not,enough,acks,to,commit;private,synchronized,void,check,for,commit,or,fail,if,no,pending,discovery,node,master,node,logger,trace,master,node,acked,cluster,state,version,processing,current,pending,needed,master,node,cluster,state,version,pending,master,nodes,needed,masters,to,commit,needed,masters,to,commit,if,needed,masters,to,commit,0,if,mark,as,committed,for,discovery,node,node,to,commit,send,acked,before,commit,send,commit,to,node,node,to,commit,cluster,state,this,send,acked,before,commit,clear,decrement,pending,master,acks,and,change,for,failure
PublishClusterStateAction -> SendingController -> private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode);1544632755;check if enough master node responded to commit the change. fails the commit_if there are no more pending master nodes but not enough acks to commit.;private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {_            logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])",_                    masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit)__            neededMastersToCommit--__            if (neededMastersToCommit == 0) {_                if (markAsCommitted()) {_                    for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {_                        sendCommitToNode(nodeToCommit, clusterState, this)__                    }_                    sendAckedBeforeCommit.clear()__                }_            }_            decrementPendingMasterAcksAndChangeForFailure()__        };check,if,enough,master,node,responded,to,commit,the,change,fails,the,commit,if,there,are,no,more,pending,master,nodes,but,not,enough,acks,to,commit;private,synchronized,void,check,for,commit,or,fail,if,no,pending,discovery,node,master,node,logger,trace,master,node,acked,cluster,state,version,processing,current,pending,needed,master,node,cluster,state,version,pending,master,nodes,needed,masters,to,commit,needed,masters,to,commit,if,needed,masters,to,commit,0,if,mark,as,committed,for,discovery,node,node,to,commit,send,acked,before,commit,send,commit,to,node,node,to,commit,cluster,state,this,send,acked,before,commit,clear,decrement,pending,master,acks,and,change,for,failure
PublishClusterStateAction -> public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,                         final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException;1524684173;publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will_be processed by the master and the other nodes._<p>_The method is guaranteed to throw a {@link org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException}_if the change is not committed and should be rejected._Any other exception signals the something wrong happened but the change is committed.;public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,_                        final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException {_        final DiscoveryNodes nodes__        final SendingController sendingController__        final Set<DiscoveryNode> nodesToPublishTo__        final Map<Version, BytesReference> serializedStates__        final Map<Version, BytesReference> serializedDiffs__        final boolean sendFullVersion__        try {_            nodes = clusterChangedEvent.state().nodes()__            nodesToPublishTo = new HashSet<>(nodes.getSize())__            DiscoveryNode localNode = nodes.getLocalNode()__            final int totalMasterNodes = nodes.getMasterNodes().size()__            for (final DiscoveryNode node : nodes) {_                if (node.equals(localNode) == false) {_                    nodesToPublishTo.add(node)__                }_            }_            sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null__            serializedStates = new HashMap<>()__            serializedDiffs = new HashMap<>()___            _            _            _            _            buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(),_                    nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs)___            final BlockingClusterStatePublishResponseHandler publishResponseHandler =_                new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener)__            sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes,_                totalMasterNodes, publishResponseHandler)__        } catch (Exception e) {_            throw new Discovery.FailedToCommitClusterStateException("unexpected error while preparing to publish", e)__        }__        try {_            innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, sendFullVersion, serializedStates, serializedDiffs)__        } catch (Discovery.FailedToCommitClusterStateException t) {_            throw t__        } catch (Exception e) {_            _            if (sendingController.markAsFailed("unexpected error", e)) {_                _                throw new Discovery.FailedToCommitClusterStateException("unexpected error", e)__            } else {_                throw e__            }_        }_    };publishes,a,cluster,change,event,to,other,nodes,if,at,least,min,master,nodes,acknowledge,the,change,it,is,committed,and,will,be,processed,by,the,master,and,the,other,nodes,p,the,method,is,guaranteed,to,throw,a,link,org,elasticsearch,discovery,discovery,failed,to,commit,cluster,state,exception,if,the,change,is,not,committed,and,should,be,rejected,any,other,exception,signals,the,something,wrong,happened,but,the,change,is,committed;public,void,publish,final,cluster,changed,event,cluster,changed,event,final,int,min,master,nodes,final,discovery,ack,listener,ack,listener,throws,discovery,failed,to,commit,cluster,state,exception,final,discovery,nodes,nodes,final,sending,controller,sending,controller,final,set,discovery,node,nodes,to,publish,to,final,map,version,bytes,reference,serialized,states,final,map,version,bytes,reference,serialized,diffs,final,boolean,send,full,version,try,nodes,cluster,changed,event,state,nodes,nodes,to,publish,to,new,hash,set,nodes,get,size,discovery,node,local,node,nodes,get,local,node,final,int,total,master,nodes,nodes,get,master,nodes,size,for,final,discovery,node,node,nodes,if,node,equals,local,node,false,nodes,to,publish,to,add,node,send,full,version,discovery,settings,get,publish,diff,cluster,changed,event,previous,state,null,serialized,states,new,hash,map,serialized,diffs,new,hash,map,build,diff,and,serialize,states,cluster,changed,event,state,cluster,changed,event,previous,state,nodes,to,publish,to,send,full,version,serialized,states,serialized,diffs,final,blocking,cluster,state,publish,response,handler,publish,response,handler,new,ack,cluster,state,publish,response,handler,nodes,to,publish,to,ack,listener,sending,controller,new,sending,controller,cluster,changed,event,state,min,master,nodes,total,master,nodes,publish,response,handler,catch,exception,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,while,preparing,to,publish,e,try,inner,publish,cluster,changed,event,nodes,to,publish,to,sending,controller,send,full,version,serialized,states,serialized,diffs,catch,discovery,failed,to,commit,cluster,state,exception,t,throw,t,catch,exception,e,if,sending,controller,mark,as,failed,unexpected,error,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,e,else,throw,e
PublishClusterStateAction -> public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,                         final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException;1528893677;publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will_be processed by the master and the other nodes._<p>_The method is guaranteed to throw a {@link org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException}_if the change is not committed and should be rejected._Any other exception signals the something wrong happened but the change is committed.;public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,_                        final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException {_        final DiscoveryNodes nodes__        final SendingController sendingController__        final Set<DiscoveryNode> nodesToPublishTo__        final Map<Version, BytesReference> serializedStates__        final Map<Version, BytesReference> serializedDiffs__        final boolean sendFullVersion__        try {_            nodes = clusterChangedEvent.state().nodes()__            nodesToPublishTo = new HashSet<>(nodes.getSize())__            DiscoveryNode localNode = nodes.getLocalNode()__            final int totalMasterNodes = nodes.getMasterNodes().size()__            for (final DiscoveryNode node : nodes) {_                if (node.equals(localNode) == false) {_                    nodesToPublishTo.add(node)__                }_            }_            sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null__            serializedStates = new HashMap<>()__            serializedDiffs = new HashMap<>()___            _            _            _            _            buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(),_                    nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs)___            final BlockingClusterStatePublishResponseHandler publishResponseHandler =_                new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener)__            sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes,_                totalMasterNodes, publishResponseHandler)__        } catch (Exception e) {_            throw new Discovery.FailedToCommitClusterStateException("unexpected error while preparing to publish", e)__        }__        try {_            innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, sendFullVersion, serializedStates, serializedDiffs)__        } catch (Discovery.FailedToCommitClusterStateException t) {_            throw t__        } catch (Exception e) {_            _            if (sendingController.markAsFailed("unexpected error", e)) {_                _                throw new Discovery.FailedToCommitClusterStateException("unexpected error", e)__            } else {_                throw e__            }_        }_    };publishes,a,cluster,change,event,to,other,nodes,if,at,least,min,master,nodes,acknowledge,the,change,it,is,committed,and,will,be,processed,by,the,master,and,the,other,nodes,p,the,method,is,guaranteed,to,throw,a,link,org,elasticsearch,discovery,discovery,failed,to,commit,cluster,state,exception,if,the,change,is,not,committed,and,should,be,rejected,any,other,exception,signals,the,something,wrong,happened,but,the,change,is,committed;public,void,publish,final,cluster,changed,event,cluster,changed,event,final,int,min,master,nodes,final,discovery,ack,listener,ack,listener,throws,discovery,failed,to,commit,cluster,state,exception,final,discovery,nodes,nodes,final,sending,controller,sending,controller,final,set,discovery,node,nodes,to,publish,to,final,map,version,bytes,reference,serialized,states,final,map,version,bytes,reference,serialized,diffs,final,boolean,send,full,version,try,nodes,cluster,changed,event,state,nodes,nodes,to,publish,to,new,hash,set,nodes,get,size,discovery,node,local,node,nodes,get,local,node,final,int,total,master,nodes,nodes,get,master,nodes,size,for,final,discovery,node,node,nodes,if,node,equals,local,node,false,nodes,to,publish,to,add,node,send,full,version,discovery,settings,get,publish,diff,cluster,changed,event,previous,state,null,serialized,states,new,hash,map,serialized,diffs,new,hash,map,build,diff,and,serialize,states,cluster,changed,event,state,cluster,changed,event,previous,state,nodes,to,publish,to,send,full,version,serialized,states,serialized,diffs,final,blocking,cluster,state,publish,response,handler,publish,response,handler,new,ack,cluster,state,publish,response,handler,nodes,to,publish,to,ack,listener,sending,controller,new,sending,controller,cluster,changed,event,state,min,master,nodes,total,master,nodes,publish,response,handler,catch,exception,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,while,preparing,to,publish,e,try,inner,publish,cluster,changed,event,nodes,to,publish,to,sending,controller,send,full,version,serialized,states,serialized,diffs,catch,discovery,failed,to,commit,cluster,state,exception,t,throw,t,catch,exception,e,if,sending,controller,mark,as,failed,unexpected,error,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,e,else,throw,e
PublishClusterStateAction -> public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,                         final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException;1529015561;publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will_be processed by the master and the other nodes._<p>_The method is guaranteed to throw a {@link org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException}_if the change is not committed and should be rejected._Any other exception signals the something wrong happened but the change is committed.;public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,_                        final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException {_        final DiscoveryNodes nodes__        final SendingController sendingController__        final Set<DiscoveryNode> nodesToPublishTo__        final Map<Version, BytesReference> serializedStates__        final Map<Version, BytesReference> serializedDiffs__        final boolean sendFullVersion__        try {_            nodes = clusterChangedEvent.state().nodes()__            nodesToPublishTo = new HashSet<>(nodes.getSize())__            DiscoveryNode localNode = nodes.getLocalNode()__            final int totalMasterNodes = nodes.getMasterNodes().size()__            for (final DiscoveryNode node : nodes) {_                if (node.equals(localNode) == false) {_                    nodesToPublishTo.add(node)__                }_            }_            sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null__            serializedStates = new HashMap<>()__            serializedDiffs = new HashMap<>()___            _            _            _            _            buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(),_                    nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs)___            final BlockingClusterStatePublishResponseHandler publishResponseHandler =_                new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener)__            sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes,_                totalMasterNodes, publishResponseHandler)__        } catch (Exception e) {_            throw new Discovery.FailedToCommitClusterStateException("unexpected error while preparing to publish", e)__        }__        try {_            innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, ackListener, sendFullVersion, serializedStates,_                serializedDiffs)__        } catch (Discovery.FailedToCommitClusterStateException t) {_            throw t__        } catch (Exception e) {_            _            if (sendingController.markAsFailed("unexpected error", e)) {_                _                throw new Discovery.FailedToCommitClusterStateException("unexpected error", e)__            } else {_                throw e__            }_        }_    };publishes,a,cluster,change,event,to,other,nodes,if,at,least,min,master,nodes,acknowledge,the,change,it,is,committed,and,will,be,processed,by,the,master,and,the,other,nodes,p,the,method,is,guaranteed,to,throw,a,link,org,elasticsearch,discovery,discovery,failed,to,commit,cluster,state,exception,if,the,change,is,not,committed,and,should,be,rejected,any,other,exception,signals,the,something,wrong,happened,but,the,change,is,committed;public,void,publish,final,cluster,changed,event,cluster,changed,event,final,int,min,master,nodes,final,discovery,ack,listener,ack,listener,throws,discovery,failed,to,commit,cluster,state,exception,final,discovery,nodes,nodes,final,sending,controller,sending,controller,final,set,discovery,node,nodes,to,publish,to,final,map,version,bytes,reference,serialized,states,final,map,version,bytes,reference,serialized,diffs,final,boolean,send,full,version,try,nodes,cluster,changed,event,state,nodes,nodes,to,publish,to,new,hash,set,nodes,get,size,discovery,node,local,node,nodes,get,local,node,final,int,total,master,nodes,nodes,get,master,nodes,size,for,final,discovery,node,node,nodes,if,node,equals,local,node,false,nodes,to,publish,to,add,node,send,full,version,discovery,settings,get,publish,diff,cluster,changed,event,previous,state,null,serialized,states,new,hash,map,serialized,diffs,new,hash,map,build,diff,and,serialize,states,cluster,changed,event,state,cluster,changed,event,previous,state,nodes,to,publish,to,send,full,version,serialized,states,serialized,diffs,final,blocking,cluster,state,publish,response,handler,publish,response,handler,new,ack,cluster,state,publish,response,handler,nodes,to,publish,to,ack,listener,sending,controller,new,sending,controller,cluster,changed,event,state,min,master,nodes,total,master,nodes,publish,response,handler,catch,exception,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,while,preparing,to,publish,e,try,inner,publish,cluster,changed,event,nodes,to,publish,to,sending,controller,ack,listener,send,full,version,serialized,states,serialized,diffs,catch,discovery,failed,to,commit,cluster,state,exception,t,throw,t,catch,exception,e,if,sending,controller,mark,as,failed,unexpected,error,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,e,else,throw,e
PublishClusterStateAction -> public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,                         final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException;1529687475;publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will_be processed by the master and the other nodes._<p>_The method is guaranteed to throw a {@link org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException}_if the change is not committed and should be rejected._Any other exception signals the something wrong happened but the change is committed.;public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,_                        final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException {_        final DiscoveryNodes nodes__        final SendingController sendingController__        final Set<DiscoveryNode> nodesToPublishTo__        final Map<Version, BytesReference> serializedStates__        final Map<Version, BytesReference> serializedDiffs__        final boolean sendFullVersion__        try {_            nodes = clusterChangedEvent.state().nodes()__            nodesToPublishTo = new HashSet<>(nodes.getSize())__            DiscoveryNode localNode = nodes.getLocalNode()__            final int totalMasterNodes = nodes.getMasterNodes().size()__            for (final DiscoveryNode node : nodes) {_                if (node.equals(localNode) == false) {_                    nodesToPublishTo.add(node)__                }_            }_            sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null__            serializedStates = new HashMap<>()__            serializedDiffs = new HashMap<>()___            _            _            _            _            buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(),_                    nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs)___            final BlockingClusterStatePublishResponseHandler publishResponseHandler =_                new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener)__            sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes,_                totalMasterNodes, publishResponseHandler)__        } catch (Exception e) {_            throw new Discovery.FailedToCommitClusterStateException("unexpected error while preparing to publish", e)__        }__        try {_            innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, ackListener, sendFullVersion, serializedStates,_                serializedDiffs)__        } catch (Discovery.FailedToCommitClusterStateException t) {_            throw t__        } catch (Exception e) {_            _            if (sendingController.markAsFailed("unexpected error", e)) {_                _                throw new Discovery.FailedToCommitClusterStateException("unexpected error", e)__            } else {_                throw e__            }_        }_    };publishes,a,cluster,change,event,to,other,nodes,if,at,least,min,master,nodes,acknowledge,the,change,it,is,committed,and,will,be,processed,by,the,master,and,the,other,nodes,p,the,method,is,guaranteed,to,throw,a,link,org,elasticsearch,discovery,discovery,failed,to,commit,cluster,state,exception,if,the,change,is,not,committed,and,should,be,rejected,any,other,exception,signals,the,something,wrong,happened,but,the,change,is,committed;public,void,publish,final,cluster,changed,event,cluster,changed,event,final,int,min,master,nodes,final,discovery,ack,listener,ack,listener,throws,discovery,failed,to,commit,cluster,state,exception,final,discovery,nodes,nodes,final,sending,controller,sending,controller,final,set,discovery,node,nodes,to,publish,to,final,map,version,bytes,reference,serialized,states,final,map,version,bytes,reference,serialized,diffs,final,boolean,send,full,version,try,nodes,cluster,changed,event,state,nodes,nodes,to,publish,to,new,hash,set,nodes,get,size,discovery,node,local,node,nodes,get,local,node,final,int,total,master,nodes,nodes,get,master,nodes,size,for,final,discovery,node,node,nodes,if,node,equals,local,node,false,nodes,to,publish,to,add,node,send,full,version,discovery,settings,get,publish,diff,cluster,changed,event,previous,state,null,serialized,states,new,hash,map,serialized,diffs,new,hash,map,build,diff,and,serialize,states,cluster,changed,event,state,cluster,changed,event,previous,state,nodes,to,publish,to,send,full,version,serialized,states,serialized,diffs,final,blocking,cluster,state,publish,response,handler,publish,response,handler,new,ack,cluster,state,publish,response,handler,nodes,to,publish,to,ack,listener,sending,controller,new,sending,controller,cluster,changed,event,state,min,master,nodes,total,master,nodes,publish,response,handler,catch,exception,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,while,preparing,to,publish,e,try,inner,publish,cluster,changed,event,nodes,to,publish,to,sending,controller,ack,listener,send,full,version,serialized,states,serialized,diffs,catch,discovery,failed,to,commit,cluster,state,exception,t,throw,t,catch,exception,e,if,sending,controller,mark,as,failed,unexpected,error,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,e,else,throw,e
PublishClusterStateAction -> public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,                         final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException;1541092382;publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will_be processed by the master and the other nodes._<p>_The method is guaranteed to throw a {@link org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException}_if the change is not committed and should be rejected._Any other exception signals the something wrong happened but the change is committed.;public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,_                        final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException {_        final DiscoveryNodes nodes__        final SendingController sendingController__        final Set<DiscoveryNode> nodesToPublishTo__        final Map<Version, BytesReference> serializedStates__        final Map<Version, BytesReference> serializedDiffs__        final boolean sendFullVersion__        try {_            nodes = clusterChangedEvent.state().nodes()__            nodesToPublishTo = new HashSet<>(nodes.getSize())__            DiscoveryNode localNode = nodes.getLocalNode()__            final int totalMasterNodes = nodes.getMasterNodes().size()__            for (final DiscoveryNode node : nodes) {_                if (node.equals(localNode) == false) {_                    nodesToPublishTo.add(node)__                }_            }_            sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null__            serializedStates = new HashMap<>()__            serializedDiffs = new HashMap<>()___            _            _            _            _            buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(),_                    nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs)___            final BlockingClusterStatePublishResponseHandler publishResponseHandler =_                new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener)__            sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes,_                totalMasterNodes, publishResponseHandler)__        } catch (Exception e) {_            throw new Discovery.FailedToCommitClusterStateException("unexpected error while preparing to publish", e)__        }__        try {_            innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, ackListener, sendFullVersion, serializedStates,_                serializedDiffs)__        } catch (Discovery.FailedToCommitClusterStateException t) {_            throw t__        } catch (Exception e) {_            _            if (sendingController.markAsFailed("unexpected error", e)) {_                _                throw new Discovery.FailedToCommitClusterStateException("unexpected error", e)__            } else {_                throw e__            }_        }_    };publishes,a,cluster,change,event,to,other,nodes,if,at,least,min,master,nodes,acknowledge,the,change,it,is,committed,and,will,be,processed,by,the,master,and,the,other,nodes,p,the,method,is,guaranteed,to,throw,a,link,org,elasticsearch,discovery,discovery,failed,to,commit,cluster,state,exception,if,the,change,is,not,committed,and,should,be,rejected,any,other,exception,signals,the,something,wrong,happened,but,the,change,is,committed;public,void,publish,final,cluster,changed,event,cluster,changed,event,final,int,min,master,nodes,final,discovery,ack,listener,ack,listener,throws,discovery,failed,to,commit,cluster,state,exception,final,discovery,nodes,nodes,final,sending,controller,sending,controller,final,set,discovery,node,nodes,to,publish,to,final,map,version,bytes,reference,serialized,states,final,map,version,bytes,reference,serialized,diffs,final,boolean,send,full,version,try,nodes,cluster,changed,event,state,nodes,nodes,to,publish,to,new,hash,set,nodes,get,size,discovery,node,local,node,nodes,get,local,node,final,int,total,master,nodes,nodes,get,master,nodes,size,for,final,discovery,node,node,nodes,if,node,equals,local,node,false,nodes,to,publish,to,add,node,send,full,version,discovery,settings,get,publish,diff,cluster,changed,event,previous,state,null,serialized,states,new,hash,map,serialized,diffs,new,hash,map,build,diff,and,serialize,states,cluster,changed,event,state,cluster,changed,event,previous,state,nodes,to,publish,to,send,full,version,serialized,states,serialized,diffs,final,blocking,cluster,state,publish,response,handler,publish,response,handler,new,ack,cluster,state,publish,response,handler,nodes,to,publish,to,ack,listener,sending,controller,new,sending,controller,cluster,changed,event,state,min,master,nodes,total,master,nodes,publish,response,handler,catch,exception,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,while,preparing,to,publish,e,try,inner,publish,cluster,changed,event,nodes,to,publish,to,sending,controller,ack,listener,send,full,version,serialized,states,serialized,diffs,catch,discovery,failed,to,commit,cluster,state,exception,t,throw,t,catch,exception,e,if,sending,controller,mark,as,failed,unexpected,error,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,e,else,throw,e
PublishClusterStateAction -> public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,                         final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException;1542402632;publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will_be processed by the master and the other nodes._<p>_The method is guaranteed to throw a {@link org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException}_if the change is not committed and should be rejected._Any other exception signals the something wrong happened but the change is committed.;public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,_                        final Discovery.AckListener ackListener) throws Discovery.FailedToCommitClusterStateException {_        final DiscoveryNodes nodes__        final SendingController sendingController__        final Set<DiscoveryNode> nodesToPublishTo__        final Map<Version, BytesReference> serializedStates__        final Map<Version, BytesReference> serializedDiffs__        final boolean sendFullVersion__        try {_            nodes = clusterChangedEvent.state().nodes()__            nodesToPublishTo = new HashSet<>(nodes.getSize())__            DiscoveryNode localNode = nodes.getLocalNode()__            final int totalMasterNodes = nodes.getMasterNodes().size()__            for (final DiscoveryNode node : nodes) {_                if (node.equals(localNode) == false) {_                    nodesToPublishTo.add(node)__                }_            }_            sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null__            serializedStates = new HashMap<>()__            serializedDiffs = new HashMap<>()___            _            _            _            _            buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(),_                    nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs)___            final BlockingClusterStatePublishResponseHandler publishResponseHandler =_                new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener)__            sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes,_                totalMasterNodes, publishResponseHandler)__        } catch (Exception e) {_            throw new Discovery.FailedToCommitClusterStateException("unexpected error while preparing to publish", e)__        }__        try {_            innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, ackListener, sendFullVersion, serializedStates,_                serializedDiffs)__        } catch (Discovery.FailedToCommitClusterStateException t) {_            throw t__        } catch (Exception e) {_            _            if (sendingController.markAsFailed("unexpected error", e)) {_                _                throw new Discovery.FailedToCommitClusterStateException("unexpected error", e)__            } else {_                throw e__            }_        }_    };publishes,a,cluster,change,event,to,other,nodes,if,at,least,min,master,nodes,acknowledge,the,change,it,is,committed,and,will,be,processed,by,the,master,and,the,other,nodes,p,the,method,is,guaranteed,to,throw,a,link,org,elasticsearch,discovery,discovery,failed,to,commit,cluster,state,exception,if,the,change,is,not,committed,and,should,be,rejected,any,other,exception,signals,the,something,wrong,happened,but,the,change,is,committed;public,void,publish,final,cluster,changed,event,cluster,changed,event,final,int,min,master,nodes,final,discovery,ack,listener,ack,listener,throws,discovery,failed,to,commit,cluster,state,exception,final,discovery,nodes,nodes,final,sending,controller,sending,controller,final,set,discovery,node,nodes,to,publish,to,final,map,version,bytes,reference,serialized,states,final,map,version,bytes,reference,serialized,diffs,final,boolean,send,full,version,try,nodes,cluster,changed,event,state,nodes,nodes,to,publish,to,new,hash,set,nodes,get,size,discovery,node,local,node,nodes,get,local,node,final,int,total,master,nodes,nodes,get,master,nodes,size,for,final,discovery,node,node,nodes,if,node,equals,local,node,false,nodes,to,publish,to,add,node,send,full,version,discovery,settings,get,publish,diff,cluster,changed,event,previous,state,null,serialized,states,new,hash,map,serialized,diffs,new,hash,map,build,diff,and,serialize,states,cluster,changed,event,state,cluster,changed,event,previous,state,nodes,to,publish,to,send,full,version,serialized,states,serialized,diffs,final,blocking,cluster,state,publish,response,handler,publish,response,handler,new,ack,cluster,state,publish,response,handler,nodes,to,publish,to,ack,listener,sending,controller,new,sending,controller,cluster,changed,event,state,min,master,nodes,total,master,nodes,publish,response,handler,catch,exception,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,while,preparing,to,publish,e,try,inner,publish,cluster,changed,event,nodes,to,publish,to,sending,controller,ack,listener,send,full,version,serialized,states,serialized,diffs,catch,discovery,failed,to,commit,cluster,state,exception,t,throw,t,catch,exception,e,if,sending,controller,mark,as,failed,unexpected,error,e,throw,new,discovery,failed,to,commit,cluster,state,exception,unexpected,error,e,else,throw,e
PublishClusterStateAction -> IncomingClusterStateListener -> void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;1524684173;called when a cluster state has been committed and is ready to be processed;void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;called,when,a,cluster,state,has,been,committed,and,is,ready,to,be,processed;void,on,cluster,state,committed,string,state,uuid,action,listener,void,processed,listener
PublishClusterStateAction -> IncomingClusterStateListener -> void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;1528893677;called when a cluster state has been committed and is ready to be processed;void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;called,when,a,cluster,state,has,been,committed,and,is,ready,to,be,processed;void,on,cluster,state,committed,string,state,uuid,action,listener,void,processed,listener
PublishClusterStateAction -> IncomingClusterStateListener -> void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;1529015561;called when a cluster state has been committed and is ready to be processed;void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;called,when,a,cluster,state,has,been,committed,and,is,ready,to,be,processed;void,on,cluster,state,committed,string,state,uuid,action,listener,void,processed,listener
PublishClusterStateAction -> IncomingClusterStateListener -> void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;1529687475;called when a cluster state has been committed and is ready to be processed;void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;called,when,a,cluster,state,has,been,committed,and,is,ready,to,be,processed;void,on,cluster,state,committed,string,state,uuid,action,listener,void,processed,listener
PublishClusterStateAction -> IncomingClusterStateListener -> void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;1541092382;called when a cluster state has been committed and is ready to be processed;void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;called,when,a,cluster,state,has,been,committed,and,is,ready,to,be,processed;void,on,cluster,state,committed,string,state,uuid,action,listener,void,processed,listener
PublishClusterStateAction -> IncomingClusterStateListener -> void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;1542402632;called when a cluster state has been committed and is ready to be processed;void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;called,when,a,cluster,state,has,been,committed,and,is,ready,to,be,processed;void,on,cluster,state,committed,string,state,uuid,action,listener,void,processed,listener
PublishClusterStateAction -> IncomingClusterStateListener -> void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;1544081506;called when a cluster state has been committed and is ready to be processed;void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;called,when,a,cluster,state,has,been,committed,and,is,ready,to,be,processed;void,on,cluster,state,committed,string,state,uuid,action,listener,void,processed,listener
PublishClusterStateAction -> IncomingClusterStateListener -> void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;1544632755;called when a cluster state has been committed and is ready to be processed;void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener)_;called,when,a,cluster,state,has,been,committed,and,is,ready,to,be,processed;void,on,cluster,state,committed,string,state,uuid,action,listener,void,processed,listener
PublishClusterStateAction -> IncomingClusterStateListener -> void onIncomingClusterState(ClusterState incomingState)_;1524684173;called when a new incoming cluster state has been received._Should validate the incoming state and throw an exception if it's not a valid successor state.;void onIncomingClusterState(ClusterState incomingState)_;called,when,a,new,incoming,cluster,state,has,been,received,should,validate,the,incoming,state,and,throw,an,exception,if,it,s,not,a,valid,successor,state;void,on,incoming,cluster,state,cluster,state,incoming,state
PublishClusterStateAction -> IncomingClusterStateListener -> void onIncomingClusterState(ClusterState incomingState)_;1528893677;called when a new incoming cluster state has been received._Should validate the incoming state and throw an exception if it's not a valid successor state.;void onIncomingClusterState(ClusterState incomingState)_;called,when,a,new,incoming,cluster,state,has,been,received,should,validate,the,incoming,state,and,throw,an,exception,if,it,s,not,a,valid,successor,state;void,on,incoming,cluster,state,cluster,state,incoming,state
PublishClusterStateAction -> IncomingClusterStateListener -> void onIncomingClusterState(ClusterState incomingState)_;1529015561;called when a new incoming cluster state has been received._Should validate the incoming state and throw an exception if it's not a valid successor state.;void onIncomingClusterState(ClusterState incomingState)_;called,when,a,new,incoming,cluster,state,has,been,received,should,validate,the,incoming,state,and,throw,an,exception,if,it,s,not,a,valid,successor,state;void,on,incoming,cluster,state,cluster,state,incoming,state
PublishClusterStateAction -> IncomingClusterStateListener -> void onIncomingClusterState(ClusterState incomingState)_;1529687475;called when a new incoming cluster state has been received._Should validate the incoming state and throw an exception if it's not a valid successor state.;void onIncomingClusterState(ClusterState incomingState)_;called,when,a,new,incoming,cluster,state,has,been,received,should,validate,the,incoming,state,and,throw,an,exception,if,it,s,not,a,valid,successor,state;void,on,incoming,cluster,state,cluster,state,incoming,state
PublishClusterStateAction -> IncomingClusterStateListener -> void onIncomingClusterState(ClusterState incomingState)_;1541092382;called when a new incoming cluster state has been received._Should validate the incoming state and throw an exception if it's not a valid successor state.;void onIncomingClusterState(ClusterState incomingState)_;called,when,a,new,incoming,cluster,state,has,been,received,should,validate,the,incoming,state,and,throw,an,exception,if,it,s,not,a,valid,successor,state;void,on,incoming,cluster,state,cluster,state,incoming,state
PublishClusterStateAction -> IncomingClusterStateListener -> void onIncomingClusterState(ClusterState incomingState)_;1542402632;called when a new incoming cluster state has been received._Should validate the incoming state and throw an exception if it's not a valid successor state.;void onIncomingClusterState(ClusterState incomingState)_;called,when,a,new,incoming,cluster,state,has,been,received,should,validate,the,incoming,state,and,throw,an,exception,if,it,s,not,a,valid,successor,state;void,on,incoming,cluster,state,cluster,state,incoming,state
PublishClusterStateAction -> IncomingClusterStateListener -> void onIncomingClusterState(ClusterState incomingState)_;1544081506;called when a new incoming cluster state has been received._Should validate the incoming state and throw an exception if it's not a valid successor state.;void onIncomingClusterState(ClusterState incomingState)_;called,when,a,new,incoming,cluster,state,has,been,received,should,validate,the,incoming,state,and,throw,an,exception,if,it,s,not,a,valid,successor,state;void,on,incoming,cluster,state,cluster,state,incoming,state
PublishClusterStateAction -> IncomingClusterStateListener -> void onIncomingClusterState(ClusterState incomingState)_;1544632755;called when a new incoming cluster state has been received._Should validate the incoming state and throw an exception if it's not a valid successor state.;void onIncomingClusterState(ClusterState incomingState)_;called,when,a,new,incoming,cluster,state,has,been,received,should,validate,the,incoming,state,and,throw,an,exception,if,it,s,not,a,valid,successor,state;void,on,incoming,cluster,state,cluster,state,incoming,state
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsCommitted();1524684173;tries and commit the current state, if a decision wasn't made yet__@return true if successful;private synchronized boolean markAsCommitted() {_            if (committedOrFailed()) {_                return committed__            }_            logger.trace("committing version [{}]", clusterState.version())__            committed = true__            committedOrFailedLatch.countDown()__            return true__        };tries,and,commit,the,current,state,if,a,decision,wasn,t,made,yet,return,true,if,successful;private,synchronized,boolean,mark,as,committed,if,committed,or,failed,return,committed,logger,trace,committing,version,cluster,state,version,committed,true,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsCommitted();1528893677;tries and commit the current state, if a decision wasn't made yet__@return true if successful;private synchronized boolean markAsCommitted() {_            if (committedOrFailed()) {_                return committed__            }_            logger.trace("committing version [{}]", clusterState.version())__            committed = true__            committedOrFailedLatch.countDown()__            return true__        };tries,and,commit,the,current,state,if,a,decision,wasn,t,made,yet,return,true,if,successful;private,synchronized,boolean,mark,as,committed,if,committed,or,failed,return,committed,logger,trace,committing,version,cluster,state,version,committed,true,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsCommitted();1529015561;tries and commit the current state, if a decision wasn't made yet__@return true if successful;private synchronized boolean markAsCommitted() {_            if (committedOrFailed()) {_                return committed__            }_            logger.trace("committing version [{}]", clusterState.version())__            committed = true__            committedOrFailedLatch.countDown()__            return true__        };tries,and,commit,the,current,state,if,a,decision,wasn,t,made,yet,return,true,if,successful;private,synchronized,boolean,mark,as,committed,if,committed,or,failed,return,committed,logger,trace,committing,version,cluster,state,version,committed,true,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsCommitted();1529687475;tries and commit the current state, if a decision wasn't made yet__@return true if successful;private synchronized boolean markAsCommitted() {_            if (committedOrFailed()) {_                return committed__            }_            logger.trace("committing version [{}]", clusterState.version())__            committed = true__            committedOrFailedLatch.countDown()__            return true__        };tries,and,commit,the,current,state,if,a,decision,wasn,t,made,yet,return,true,if,successful;private,synchronized,boolean,mark,as,committed,if,committed,or,failed,return,committed,logger,trace,committing,version,cluster,state,version,committed,true,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsCommitted();1541092382;tries and commit the current state, if a decision wasn't made yet__@return true if successful;private synchronized boolean markAsCommitted() {_            if (committedOrFailed()) {_                return committed__            }_            logger.trace("committing version [{}]", clusterState.version())__            committed = true__            committedOrFailedLatch.countDown()__            return true__        };tries,and,commit,the,current,state,if,a,decision,wasn,t,made,yet,return,true,if,successful;private,synchronized,boolean,mark,as,committed,if,committed,or,failed,return,committed,logger,trace,committing,version,cluster,state,version,committed,true,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsCommitted();1542402632;tries and commit the current state, if a decision wasn't made yet__@return true if successful;private synchronized boolean markAsCommitted() {_            if (committedOrFailed()) {_                return committed__            }_            logger.trace("committing version [{}]", clusterState.version())__            committed = true__            committedOrFailedLatch.countDown()__            return true__        };tries,and,commit,the,current,state,if,a,decision,wasn,t,made,yet,return,true,if,successful;private,synchronized,boolean,mark,as,committed,if,committed,or,failed,return,committed,logger,trace,committing,version,cluster,state,version,committed,true,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsCommitted();1544081506;tries and commit the current state, if a decision wasn't made yet__@return true if successful;private synchronized boolean markAsCommitted() {_            if (committedOrFailed()) {_                return committed__            }_            logger.trace("committing version [{}]", clusterState.version())__            committed = true__            committedOrFailedLatch.countDown()__            return true__        };tries,and,commit,the,current,state,if,a,decision,wasn,t,made,yet,return,true,if,successful;private,synchronized,boolean,mark,as,committed,if,committed,or,failed,return,committed,logger,trace,committing,version,cluster,state,version,committed,true,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsCommitted();1544632755;tries and commit the current state, if a decision wasn't made yet__@return true if successful;private synchronized boolean markAsCommitted() {_            if (committedOrFailed()) {_                return committed__            }_            logger.trace("committing version [{}]", clusterState.version())__            committed = true__            committedOrFailedLatch.countDown()__            return true__        };tries,and,commit,the,current,state,if,a,decision,wasn,t,made,yet,return,true,if,successful;private,synchronized,boolean,mark,as,committed,if,committed,or,failed,return,committed,logger,trace,committing,version,cluster,state,version,committed,true,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,                         final Discovery.AckListener ackListener) throws FailedToCommitClusterStateException;1544081506;publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will_be processed by the master and the other nodes._<p>_The method is guaranteed to throw a {@link FailedToCommitClusterStateException}_if the change is not committed and should be rejected._Any other exception signals the something wrong happened but the change is committed.;public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,_                        final Discovery.AckListener ackListener) throws FailedToCommitClusterStateException {_        final DiscoveryNodes nodes__        final SendingController sendingController__        final Set<DiscoveryNode> nodesToPublishTo__        final Map<Version, BytesReference> serializedStates__        final Map<Version, BytesReference> serializedDiffs__        final boolean sendFullVersion__        try {_            nodes = clusterChangedEvent.state().nodes()__            nodesToPublishTo = new HashSet<>(nodes.getSize())__            DiscoveryNode localNode = nodes.getLocalNode()__            final int totalMasterNodes = nodes.getMasterNodes().size()__            for (final DiscoveryNode node : nodes) {_                if (node.equals(localNode) == false) {_                    nodesToPublishTo.add(node)__                }_            }_            sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null__            serializedStates = new HashMap<>()__            serializedDiffs = new HashMap<>()___            _            _            _            _            buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(),_                    nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs)___            final BlockingClusterStatePublishResponseHandler publishResponseHandler =_                new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener)__            sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes,_                totalMasterNodes, publishResponseHandler)__        } catch (Exception e) {_            throw new FailedToCommitClusterStateException("unexpected error while preparing to publish", e)__        }__        try {_            innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, ackListener, sendFullVersion, serializedStates,_                serializedDiffs)__        } catch (FailedToCommitClusterStateException t) {_            throw t__        } catch (Exception e) {_            _            if (sendingController.markAsFailed("unexpected error", e)) {_                _                throw new FailedToCommitClusterStateException("unexpected error", e)__            } else {_                throw e__            }_        }_    };publishes,a,cluster,change,event,to,other,nodes,if,at,least,min,master,nodes,acknowledge,the,change,it,is,committed,and,will,be,processed,by,the,master,and,the,other,nodes,p,the,method,is,guaranteed,to,throw,a,link,failed,to,commit,cluster,state,exception,if,the,change,is,not,committed,and,should,be,rejected,any,other,exception,signals,the,something,wrong,happened,but,the,change,is,committed;public,void,publish,final,cluster,changed,event,cluster,changed,event,final,int,min,master,nodes,final,discovery,ack,listener,ack,listener,throws,failed,to,commit,cluster,state,exception,final,discovery,nodes,nodes,final,sending,controller,sending,controller,final,set,discovery,node,nodes,to,publish,to,final,map,version,bytes,reference,serialized,states,final,map,version,bytes,reference,serialized,diffs,final,boolean,send,full,version,try,nodes,cluster,changed,event,state,nodes,nodes,to,publish,to,new,hash,set,nodes,get,size,discovery,node,local,node,nodes,get,local,node,final,int,total,master,nodes,nodes,get,master,nodes,size,for,final,discovery,node,node,nodes,if,node,equals,local,node,false,nodes,to,publish,to,add,node,send,full,version,discovery,settings,get,publish,diff,cluster,changed,event,previous,state,null,serialized,states,new,hash,map,serialized,diffs,new,hash,map,build,diff,and,serialize,states,cluster,changed,event,state,cluster,changed,event,previous,state,nodes,to,publish,to,send,full,version,serialized,states,serialized,diffs,final,blocking,cluster,state,publish,response,handler,publish,response,handler,new,ack,cluster,state,publish,response,handler,nodes,to,publish,to,ack,listener,sending,controller,new,sending,controller,cluster,changed,event,state,min,master,nodes,total,master,nodes,publish,response,handler,catch,exception,e,throw,new,failed,to,commit,cluster,state,exception,unexpected,error,while,preparing,to,publish,e,try,inner,publish,cluster,changed,event,nodes,to,publish,to,sending,controller,ack,listener,send,full,version,serialized,states,serialized,diffs,catch,failed,to,commit,cluster,state,exception,t,throw,t,catch,exception,e,if,sending,controller,mark,as,failed,unexpected,error,e,throw,new,failed,to,commit,cluster,state,exception,unexpected,error,e,else,throw,e
PublishClusterStateAction -> public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,                         final Discovery.AckListener ackListener) throws FailedToCommitClusterStateException;1544632755;publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will_be processed by the master and the other nodes._<p>_The method is guaranteed to throw a {@link FailedToCommitClusterStateException}_if the change is not committed and should be rejected._Any other exception signals the something wrong happened but the change is committed.;public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes,_                        final Discovery.AckListener ackListener) throws FailedToCommitClusterStateException {_        final DiscoveryNodes nodes__        final SendingController sendingController__        final Set<DiscoveryNode> nodesToPublishTo__        final Map<Version, BytesReference> serializedStates__        final Map<Version, BytesReference> serializedDiffs__        final boolean sendFullVersion__        try {_            nodes = clusterChangedEvent.state().nodes()__            nodesToPublishTo = new HashSet<>(nodes.getSize())__            DiscoveryNode localNode = nodes.getLocalNode()__            final int totalMasterNodes = nodes.getMasterNodes().size()__            for (final DiscoveryNode node : nodes) {_                if (node.equals(localNode) == false) {_                    nodesToPublishTo.add(node)__                }_            }_            sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null__            serializedStates = new HashMap<>()__            serializedDiffs = new HashMap<>()___            _            _            _            _            buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(),_                    nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs)___            final BlockingClusterStatePublishResponseHandler publishResponseHandler =_                new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener)__            sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes,_                totalMasterNodes, publishResponseHandler)__        } catch (Exception e) {_            throw new FailedToCommitClusterStateException("unexpected error while preparing to publish", e)__        }__        try {_            innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, ackListener, sendFullVersion, serializedStates,_                serializedDiffs)__        } catch (FailedToCommitClusterStateException t) {_            throw t__        } catch (Exception e) {_            _            if (sendingController.markAsFailed("unexpected error", e)) {_                _                throw new FailedToCommitClusterStateException("unexpected error", e)__            } else {_                throw e__            }_        }_    };publishes,a,cluster,change,event,to,other,nodes,if,at,least,min,master,nodes,acknowledge,the,change,it,is,committed,and,will,be,processed,by,the,master,and,the,other,nodes,p,the,method,is,guaranteed,to,throw,a,link,failed,to,commit,cluster,state,exception,if,the,change,is,not,committed,and,should,be,rejected,any,other,exception,signals,the,something,wrong,happened,but,the,change,is,committed;public,void,publish,final,cluster,changed,event,cluster,changed,event,final,int,min,master,nodes,final,discovery,ack,listener,ack,listener,throws,failed,to,commit,cluster,state,exception,final,discovery,nodes,nodes,final,sending,controller,sending,controller,final,set,discovery,node,nodes,to,publish,to,final,map,version,bytes,reference,serialized,states,final,map,version,bytes,reference,serialized,diffs,final,boolean,send,full,version,try,nodes,cluster,changed,event,state,nodes,nodes,to,publish,to,new,hash,set,nodes,get,size,discovery,node,local,node,nodes,get,local,node,final,int,total,master,nodes,nodes,get,master,nodes,size,for,final,discovery,node,node,nodes,if,node,equals,local,node,false,nodes,to,publish,to,add,node,send,full,version,discovery,settings,get,publish,diff,cluster,changed,event,previous,state,null,serialized,states,new,hash,map,serialized,diffs,new,hash,map,build,diff,and,serialize,states,cluster,changed,event,state,cluster,changed,event,previous,state,nodes,to,publish,to,send,full,version,serialized,states,serialized,diffs,final,blocking,cluster,state,publish,response,handler,publish,response,handler,new,ack,cluster,state,publish,response,handler,nodes,to,publish,to,ack,listener,sending,controller,new,sending,controller,cluster,changed,event,state,min,master,nodes,total,master,nodes,publish,response,handler,catch,exception,e,throw,new,failed,to,commit,cluster,state,exception,unexpected,error,while,preparing,to,publish,e,try,inner,publish,cluster,changed,event,nodes,to,publish,to,sending,controller,ack,listener,send,full,version,serialized,states,serialized,diffs,catch,failed,to,commit,cluster,state,exception,t,throw,t,catch,exception,e,if,sending,controller,mark,as,failed,unexpected,error,e,throw,new,failed,to,commit,cluster,state,exception,unexpected,error,e,else,throw,e
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String details, Exception reason);1524684173;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String details, Exception reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}",_                clusterState.version(), details), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,details,exception,reason,if,committed,or,failed,return,committed,false,logger,trace,new,parameterized,message,failed,to,commit,version,cluster,state,version,details,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String details, Exception reason);1528893677;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String details, Exception reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}",_                clusterState.version(), details), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,details,exception,reason,if,committed,or,failed,return,committed,false,logger,trace,new,parameterized,message,failed,to,commit,version,cluster,state,version,details,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String details, Exception reason);1529015561;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String details, Exception reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}",_                clusterState.version(), details), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,details,exception,reason,if,committed,or,failed,return,committed,false,logger,trace,new,parameterized,message,failed,to,commit,version,cluster,state,version,details,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String details, Exception reason);1529687475;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String details, Exception reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}",_                clusterState.version(), details), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,details,exception,reason,if,committed,or,failed,return,committed,false,logger,trace,new,parameterized,message,failed,to,commit,version,cluster,state,version,details,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String details, Exception reason);1541092382;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String details, Exception reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}",_                clusterState.version(), details), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,details,exception,reason,if,committed,or,failed,return,committed,false,logger,trace,new,parameterized,message,failed,to,commit,version,cluster,state,version,details,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String details, Exception reason);1542402632;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String details, Exception reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}",_                clusterState.version(), details), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,details,exception,reason,if,committed,or,failed,return,committed,false,logger,trace,new,parameterized,message,failed,to,commit,version,cluster,state,version,details,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String details, Exception reason);1544081506;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String details, Exception reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}",_                clusterState.version(), details), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,details,exception,reason,if,committed,or,failed,return,committed,false,logger,trace,new,parameterized,message,failed,to,commit,version,cluster,state,version,details,reason,committed,false,committed,or,failed,latch,count,down,return,true
PublishClusterStateAction -> SendingController -> private synchronized boolean markAsFailed(String details, Exception reason);1544632755;tries marking the publishing as failed, if a decision wasn't made yet__@return true if the publishing was failed and the cluster state is *not* committed;private synchronized boolean markAsFailed(String details, Exception reason) {_            if (committedOrFailed()) {_                return committed == false__            }_            logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}",_                clusterState.version(), details), reason)__            committed = false__            committedOrFailedLatch.countDown()__            return true__        };tries,marking,the,publishing,as,failed,if,a,decision,wasn,t,made,yet,return,true,if,the,publishing,was,failed,and,the,cluster,state,is,not,committed;private,synchronized,boolean,mark,as,failed,string,details,exception,reason,if,committed,or,failed,return,committed,false,logger,trace,new,parameterized,message,failed,to,commit,version,cluster,state,version,details,reason,committed,false,committed,or,failed,latch,count,down,return,true
