commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * called when a new incoming cluster state has been received.  * Should validate the incoming state and throw an exception if it's not a valid successor state.  */ ;/**  * called when a new incoming cluster state has been received.  * Should validate the incoming state and throw an exception if it's not a valid successor state.  */ void onIncomingClusterState(ClusterState incomingState).
true;;2;1;/**  * called when a cluster state has been committed and is ready to be processed  */ ;/**  * called when a cluster state has been committed and is ready to be processed  */ void onClusterStateCommitted(String stateUUID, ActionListener<Void> processedListener).
true;public;3;52;/**  * publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will  * be processed by the master and the other nodes.  * <p>  * The method is guaranteed to throw a {@link FailedToCommitClusterStateException}  * if the change is not committed and should be rejected.  * Any other exception signals the something wrong happened but the change is committed.  */ ;/**  * publishes a cluster change event to other nodes. if at least minMasterNodes acknowledge the change it is committed and will  * be processed by the master and the other nodes.  * <p>  * The method is guaranteed to throw a {@link FailedToCommitClusterStateException}  * if the change is not committed and should be rejected.  * Any other exception signals the something wrong happened but the change is committed.  */ public void publish(final ClusterChangedEvent clusterChangedEvent, final int minMasterNodes, final Discovery.AckListener ackListener) throws FailedToCommitClusterStateException {     final DiscoveryNodes nodes.     final SendingController sendingController.     final Set<DiscoveryNode> nodesToPublishTo.     final Map<Version, BytesReference> serializedStates.     final Map<Version, BytesReference> serializedDiffs.     final boolean sendFullVersion.     try {         nodes = clusterChangedEvent.state().nodes().         nodesToPublishTo = new HashSet<>(nodes.getSize()).         DiscoveryNode localNode = nodes.getLocalNode().         final int totalMasterNodes = nodes.getMasterNodes().size().         for (final DiscoveryNode node : nodes) {             if (node.equals(localNode) == false) {                 nodesToPublishTo.add(node).             }         }         sendFullVersion = !discoverySettings.getPublishDiff() || clusterChangedEvent.previousState() == null.         serializedStates = new HashMap<>().         serializedDiffs = new HashMap<>().         // we build these early as a best effort not to commit in the case of error.         // sadly this is not water tight as it may that a failed diff based publishing to a node         // will cause a full serialization based on an older version, which may fail after the         // change has been committed.         buildDiffAndSerializeStates(clusterChangedEvent.state(), clusterChangedEvent.previousState(), nodesToPublishTo, sendFullVersion, serializedStates, serializedDiffs).         final BlockingClusterStatePublishResponseHandler publishResponseHandler = new AckClusterStatePublishResponseHandler(nodesToPublishTo, ackListener).         sendingController = new SendingController(clusterChangedEvent.state(), minMasterNodes, totalMasterNodes, publishResponseHandler).     } catch (Exception e) {         throw new FailedToCommitClusterStateException("unexpected error while preparing to publish", e).     }     try {         innerPublish(clusterChangedEvent, nodesToPublishTo, sendingController, ackListener, sendFullVersion, serializedStates, serializedDiffs).     } catch (FailedToCommitClusterStateException t) {         throw t.     } catch (Exception e) {         // try to fail committing, in cause it's still on going         if (sendingController.markAsFailed("unexpected error", e)) {             // signal the change should be rejected             throw new FailedToCommitClusterStateException("unexpected error", e).         } else {             throw e.         }     } }
false;private;7;51;;private void innerPublish(final ClusterChangedEvent clusterChangedEvent, final Set<DiscoveryNode> nodesToPublishTo, final SendingController sendingController, final Discovery.AckListener ackListener, final boolean sendFullVersion, final Map<Version, BytesReference> serializedStates, final Map<Version, BytesReference> serializedDiffs) {     final ClusterState clusterState = clusterChangedEvent.state().     final ClusterState previousState = clusterChangedEvent.previousState().     final TimeValue publishTimeout = discoverySettings.getPublishTimeout().     final long publishingStartInNanos = System.nanoTime().     for (final DiscoveryNode node : nodesToPublishTo) {         // we don't send full version if node didn't exist in the previous version of cluster state         if (sendFullVersion || !previousState.nodes().nodeExists(node)) {             sendFullClusterState(clusterState, serializedStates, node, publishTimeout, sendingController).         } else {             sendClusterStateDiff(clusterState, serializedDiffs, serializedStates, node, publishTimeout, sendingController).         }     }     sendingController.waitForCommit(discoverySettings.getCommitTimeout()).     final long commitTime = System.nanoTime() - publishingStartInNanos.     ackListener.onCommit(TimeValue.timeValueNanos(commitTime)).     try {         long timeLeftInNanos = Math.max(0, publishTimeout.nanos() - commitTime).         final BlockingClusterStatePublishResponseHandler publishResponseHandler = sendingController.getPublishResponseHandler().         sendingController.setPublishingTimedOut(!publishResponseHandler.awaitAllNodes(TimeValue.timeValueNanos(timeLeftInNanos))).         if (sendingController.getPublishingTimedOut()) {             DiscoveryNode[] pendingNodes = publishResponseHandler.pendingNodes().             // everyone may have just responded             if (pendingNodes.length > 0) {                 logger.warn("timed out waiting for all nodes to process published state [{}] (timeout [{}], pending nodes: {})", clusterState.version(), publishTimeout, pendingNodes).             }         }         // The failure is logged under debug when a sending failed. we now log a summary.         Set<DiscoveryNode> failedNodes = publishResponseHandler.getFailedNodes().         if (failedNodes.isEmpty() == false) {             logger.warn("publishing cluster state with version [{}] failed for the following nodes: [{}]", clusterChangedEvent.state().version(), failedNodes).         }     } catch (InterruptedException e) {         // ignore & restore interrupt         Thread.currentThread().interrupt().     } }
false;private;6;25;;private void buildDiffAndSerializeStates(ClusterState clusterState, ClusterState previousState, Set<DiscoveryNode> nodesToPublishTo, boolean sendFullVersion, Map<Version, BytesReference> serializedStates, Map<Version, BytesReference> serializedDiffs) {     Diff<ClusterState> diff = null.     for (final DiscoveryNode node : nodesToPublishTo) {         try {             if (sendFullVersion || !previousState.nodes().nodeExists(node)) {                 // will send a full reference                 if (serializedStates.containsKey(node.getVersion()) == false) {                     serializedStates.put(node.getVersion(), serializeFullClusterState(clusterState, node.getVersion())).                 }             } else {                 // will send a diff                 if (diff == null) {                     diff = clusterState.diff(previousState).                 }                 if (serializedDiffs.containsKey(node.getVersion()) == false) {                     serializedDiffs.put(node.getVersion(), serializeDiffClusterState(diff, node.getVersion())).                 }             }         } catch (IOException e) {             throw new ElasticsearchException("failed to serialize cluster_state for publishing to node {}", e, node).         }     } }
false;private;5;15;;private void sendFullClusterState(ClusterState clusterState, Map<Version, BytesReference> serializedStates, DiscoveryNode node, TimeValue publishTimeout, SendingController sendingController) {     BytesReference bytes = serializedStates.get(node.getVersion()).     if (bytes == null) {         try {             bytes = serializeFullClusterState(clusterState, node.getVersion()).             serializedStates.put(node.getVersion(), bytes).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("failed to serialize cluster_state before publishing it to node {}", node), e).             sendingController.onNodeSendFailed(node, e).             return.         }     }     sendClusterStateToNode(clusterState, bytes, node, publishTimeout, sendingController, false, serializedStates). }
false;private;6;7;;private void sendClusterStateDiff(ClusterState clusterState, Map<Version, BytesReference> serializedDiffs, Map<Version, BytesReference> serializedStates, DiscoveryNode node, TimeValue publishTimeout, SendingController sendingController) {     BytesReference bytes = serializedDiffs.get(node.getVersion()).     assert bytes != null : "failed to find serialized diff for node " + node + " of version [" + node.getVersion() + "]".     sendClusterStateToNode(clusterState, bytes, node, publishTimeout, sendingController, true, serializedStates). }
false;public;1;8;;@Override public void handleResponse(TransportResponse.Empty response) {     if (sendingController.getPublishingTimedOut()) {         logger.debug("node {} responded for cluster state [{}] (took longer than [{}])", node, clusterState.version(), publishTimeout).     }     sendingController.onNodeSendAck(node). }
false;public;1;10;;@Override public void handleException(TransportException exp) {     if (sendDiffs && exp.unwrapCause() instanceof IncompatibleClusterStateVersionException) {         logger.debug("resending full cluster state to node {} reason {}", node, exp.getDetailedMessage()).         sendFullClusterState(clusterState, serializedStates, node, publishTimeout, sendingController).     } else {         logger.debug(() -> new ParameterizedMessage("failed to send cluster state to {}", node), exp).         sendingController.onNodeSendFailed(node, exp).     } }
false;private;7;37;;private void sendClusterStateToNode(final ClusterState clusterState, BytesReference bytes, final DiscoveryNode node, final TimeValue publishTimeout, final SendingController sendingController, final boolean sendDiffs, final Map<Version, BytesReference> serializedStates) {     try {         transportService.sendRequest(node, SEND_ACTION_NAME, new BytesTransportRequest(bytes, node.getVersion()), stateRequestOptions, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {              @Override             public void handleResponse(TransportResponse.Empty response) {                 if (sendingController.getPublishingTimedOut()) {                     logger.debug("node {} responded for cluster state [{}] (took longer than [{}])", node, clusterState.version(), publishTimeout).                 }                 sendingController.onNodeSendAck(node).             }              @Override             public void handleException(TransportException exp) {                 if (sendDiffs && exp.unwrapCause() instanceof IncompatibleClusterStateVersionException) {                     logger.debug("resending full cluster state to node {} reason {}", node, exp.getDetailedMessage()).                     sendFullClusterState(clusterState, serializedStates, node, publishTimeout, sendingController).                 } else {                     logger.debug(() -> new ParameterizedMessage("failed to send cluster state to {}", node), exp).                     sendingController.onNodeSendFailed(node, exp).                 }             }         }).     } catch (Exception e) {         logger.warn(() -> new ParameterizedMessage("error sending cluster state to {}", node), e).         sendingController.onNodeSendFailed(node, e).     } }
false;public;1;7;;@Override public void handleResponse(TransportResponse.Empty response) {     if (sendingController.getPublishingTimedOut()) {         logger.debug("node {} responded to cluster state commit [{}]", node, clusterState.version()).     }     sendingController.getPublishResponseHandler().onResponse(node). }
false;public;1;6;;@Override public void handleException(TransportException exp) {     logger.debug(() -> new ParameterizedMessage("failed to commit cluster state (uuid [{}], version [{}]) to {}", clusterState.stateUUID(), clusterState.version(), node), exp).     sendingController.getPublishResponseHandler().onFailure(node, exp). }
false;private;3;30;;private void sendCommitToNode(final DiscoveryNode node, final ClusterState clusterState, final SendingController sendingController) {     try {         logger.trace("sending commit for cluster state (uuid: [{}], version [{}]) to [{}]", clusterState.stateUUID(), clusterState.version(), node).         transportService.sendRequest(node, COMMIT_ACTION_NAME, new CommitClusterStateRequest(clusterState.stateUUID()), stateRequestOptions, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {              @Override             public void handleResponse(TransportResponse.Empty response) {                 if (sendingController.getPublishingTimedOut()) {                     logger.debug("node {} responded to cluster state commit [{}]", node, clusterState.version()).                 }                 sendingController.getPublishResponseHandler().onResponse(node).             }              @Override             public void handleException(TransportException exp) {                 logger.debug(() -> new ParameterizedMessage("failed to commit cluster state (uuid [{}], version [{}]) to {}", clusterState.stateUUID(), clusterState.version(), node), exp).                 sendingController.getPublishResponseHandler().onFailure(node, exp).             }         }).     } catch (Exception t) {         logger.warn(() -> new ParameterizedMessage("error sending cluster state commit (uuid [{}], version [{}]) to {}", clusterState.stateUUID(), clusterState.version(), node), t).         sendingController.getPublishResponseHandler().onFailure(node, t).     } }
false;public,static;2;9;;public static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {     BytesStreamOutput bStream = new BytesStreamOutput().     try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {         stream.setVersion(nodeVersion).         stream.writeBoolean(true).         clusterState.writeTo(stream).     }     return bStream.bytes(). }
false;public,static;2;9;;public static BytesReference serializeDiffClusterState(Diff diff, Version nodeVersion) throws IOException {     BytesStreamOutput bStream = new BytesStreamOutput().     try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {         stream.setVersion(nodeVersion).         stream.writeBoolean(false).         diff.writeTo(stream).     }     return bStream.bytes(). }
false;protected;2;41;;protected void handleIncomingClusterStateRequest(BytesTransportRequest request, TransportChannel channel) throws IOException {     Compressor compressor = CompressorFactory.compressor(request.bytes()).     StreamInput in = request.bytes().streamInput().     final ClusterState incomingState.     synchronized (lastSeenClusterStateMutex) {         try {             if (compressor != null) {                 in = compressor.streamInput(in).             }             in = new NamedWriteableAwareStreamInput(in, namedWriteableRegistry).             in.setVersion(request.version()).             // If true we received full cluster state - otherwise diffs             if (in.readBoolean()) {                 incomingState = ClusterState.readFrom(in, transportService.getLocalNode()).                 fullClusterStateReceivedCount.incrementAndGet().                 logger.debug("received full cluster state version [{}] with size [{}]", incomingState.version(), request.bytes().length()).             } else if (lastSeenClusterState != null) {                 Diff<ClusterState> diff = ClusterState.readDiffFrom(in, lastSeenClusterState.nodes().getLocalNode()).                 incomingState = diff.apply(lastSeenClusterState).                 compatibleClusterStateDiffReceivedCount.incrementAndGet().                 logger.debug("received diff cluster state version [{}] with uuid [{}], diff size [{}]", incomingState.version(), incomingState.stateUUID(), request.bytes().length()).             } else {                 logger.debug("received diff for but don't have any local cluster state - requesting full state").                 throw new IncompatibleClusterStateVersionException("have no local cluster state").             }         } catch (IncompatibleClusterStateVersionException e) {             incompatibleClusterStateDiffReceivedCount.incrementAndGet().             throw e.         } catch (Exception e) {             logger.warn("unexpected error while deserializing an incoming cluster state", e).             throw e.         } finally {             IOUtils.close(in).         }         incomingClusterStateListener.onIncomingClusterState(incomingState).         lastSeenClusterState = incomingState.     }     channel.sendResponse(TransportResponse.Empty.INSTANCE). }
false;public;1;10;;@Override public void onResponse(Void ignore) {     try {         // send a response to the master to indicate that this cluster state has been processed post committing it.         channel.sendResponse(TransportResponse.Empty.INSTANCE).     } catch (Exception e) {         logger.debug("failed to send response on cluster state processed", e).         onFailure(e).     } }
false;public;1;9;;@Override public void onFailure(Exception e) {     try {         channel.sendResponse(e).     } catch (Exception inner) {         inner.addSuppressed(e).         logger.debug("failed to send response on cluster state processed", inner).     } }
false;protected;2;25;;protected void handleCommitRequest(CommitClusterStateRequest request, final TransportChannel channel) {     incomingClusterStateListener.onClusterStateCommitted(request.stateUUID, new ActionListener<Void>() {          @Override         public void onResponse(Void ignore) {             try {                 // send a response to the master to indicate that this cluster state has been processed post committing it.                 channel.sendResponse(TransportResponse.Empty.INSTANCE).             } catch (Exception e) {                 logger.debug("failed to send response on cluster state processed", e).                 onFailure(e).             }         }          @Override         public void onFailure(Exception e) {             try {                 channel.sendResponse(e).             } catch (Exception inner) {                 inner.addSuppressed(e).                 logger.debug("failed to send response on cluster state processed", inner).             }         }     }). }
false;public;3;4;;@Override public void messageReceived(BytesTransportRequest request, final TransportChannel channel, Task task) throws Exception {     handleIncomingClusterStateRequest(request, channel). }
false;public;3;4;;@Override public void messageReceived(CommitClusterStateRequest request, final TransportChannel channel, Task task) throws Exception {     handleCommitRequest(request, channel). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     stateUUID = in.readString(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(stateUUID). }
false;public;0;3;;public BlockingClusterStatePublishResponseHandler getPublishResponseHandler() {     return publishResponseHandler. }
false;public;1;16;;public void waitForCommit(TimeValue commitTimeout) {     boolean timedout = false.     try {         timedout = committedOrFailedLatch.await(commitTimeout.millis(), TimeUnit.MILLISECONDS) == false.     } catch (InterruptedException e) {     // the commit check bellow will either translate to an exception or we are committed and we can safely continue     }     if (timedout) {         markAsFailed("timed out waiting for commit (commit timeout [" + commitTimeout + "])").     }     if (isCommitted() == false) {         throw new FailedToCommitClusterStateException("{} enough masters to ack sent cluster state. [{}] left", timedout ? "timed out while waiting for" : "failed to get", neededMastersToCommit).     } }
false;public,synchronized;0;3;;public synchronized boolean isCommitted() {     return committed. }
false;public,synchronized;1;14;;public synchronized void onNodeSendAck(DiscoveryNode node) {     if (committed) {         assert sendAckedBeforeCommit.isEmpty().         sendCommitToNode(node, clusterState, this).     } else if (committedOrFailed()) {         logger.trace("ignoring ack from [{}] for cluster state version [{}]. already failed", node, clusterState.version()).     } else {         // we're still waiting         sendAckedBeforeCommit.add(node).         if (node.isMasterNode()) {             checkForCommitOrFailIfNoPending(node).         }     } }
false;private,synchronized;0;3;;private synchronized boolean committedOrFailed() {     return committedOrFailedLatch.getCount() == 0. }
true;private,synchronized;1;14;/**  * check if enough master node responded to commit the change. fails the commit  * if there are no more pending master nodes but not enough acks to commit.  */ ;/**  * check if enough master node responded to commit the change. fails the commit  * if there are no more pending master nodes but not enough acks to commit.  */ private synchronized void checkForCommitOrFailIfNoPending(DiscoveryNode masterNode) {     logger.trace("master node {} acked cluster state version [{}]. processing ... (current pending [{}], needed [{}])", masterNode, clusterState.version(), pendingMasterNodes, neededMastersToCommit).     neededMastersToCommit--.     if (neededMastersToCommit == 0) {         if (markAsCommitted()) {             for (DiscoveryNode nodeToCommit : sendAckedBeforeCommit) {                 sendCommitToNode(nodeToCommit, clusterState, this).             }             sendAckedBeforeCommit.clear().         }     }     decrementPendingMasterAcksAndChangeForFailure(). }
false;private,synchronized;0;6;;private synchronized void decrementPendingMasterAcksAndChangeForFailure() {     pendingMasterNodes--.     if (pendingMasterNodes == 0 && neededMastersToCommit > 0) {         markAsFailed("no more pending master nodes, but failed to reach needed acks ([" + neededMastersToCommit + "] left)").     } }
false;public,synchronized;2;9;;public synchronized void onNodeSendFailed(DiscoveryNode node, Exception e) {     if (node.isMasterNode()) {         logger.trace("master node {} failed to ack cluster state version [{}]. " + "processing ... (current pending [{}], needed [{}])", node, clusterState.version(), pendingMasterNodes, neededMastersToCommit).         decrementPendingMasterAcksAndChangeForFailure().     }     publishResponseHandler.onFailure(node, e). }
true;private,synchronized;0;9;/**  * tries and commit the current state, if a decision wasn't made yet  *  * @return true if successful  */ ;/**  * tries and commit the current state, if a decision wasn't made yet  *  * @return true if successful  */ private synchronized boolean markAsCommitted() {     if (committedOrFailed()) {         return committed.     }     logger.trace("committing version [{}]", clusterState.version()).     committed = true.     committedOrFailedLatch.countDown().     return true. }
true;private,synchronized;2;10;/**  * tries marking the publishing as failed, if a decision wasn't made yet  *  * @return true if the publishing was failed and the cluster state is *not* committed  */ ;/**  * tries marking the publishing as failed, if a decision wasn't made yet  *  * @return true if the publishing was failed and the cluster state is *not* committed  */ private synchronized boolean markAsFailed(String details, Exception reason) {     if (committedOrFailed()) {         return committed == false.     }     logger.trace(() -> new ParameterizedMessage("failed to commit version [{}]. {}", clusterState.version(), details), reason).     committed = false.     committedOrFailedLatch.countDown().     return true. }
true;private,synchronized;1;9;/**  * tries marking the publishing as failed, if a decision wasn't made yet  *  * @return true if the publishing was failed and the cluster state is *not* committed  */ ;/**  * tries marking the publishing as failed, if a decision wasn't made yet  *  * @return true if the publishing was failed and the cluster state is *not* committed  */ private synchronized boolean markAsFailed(String reason) {     if (committedOrFailed()) {         return committed == false.     }     logger.trace("failed to commit version [{}]. {}", clusterState.version(), reason).     committed = false.     committedOrFailedLatch.countDown().     return true. }
false;public;0;3;;public boolean getPublishingTimedOut() {     return publishingTimedOut.get(). }
false;public;1;3;;public void setPublishingTimedOut(boolean isTimedOut) {     publishingTimedOut.set(isTimedOut). }
false;public;0;6;;public PublishClusterStateStats stats() {     return new PublishClusterStateStats(fullClusterStateReceivedCount.get(), incompatibleClusterStateDiffReceivedCount.get(), compatibleClusterStateDiffReceivedCount.get()). }
