commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static CommitStats readOptionalCommitStatsFrom(StreamInput in) throws IOException {     return in.readOptionalStreamable(CommitStats::new). }
false;public;0;3;;public Map<String, String> getUserData() {     return userData. }
false;public;0;3;;public long getGeneration() {     return generation. }
true;public;0;3;/**  * base64 version of the commit id (see {@link SegmentInfos#getId()}  */ ;/**  * base64 version of the commit id (see {@link SegmentInfos#getId()}  */ public String getId() {     return id. }
true;public;0;3;/**  * A raw version of the commit id (see {@link SegmentInfos#getId()}  */ ;/**  * A raw version of the commit id (see {@link SegmentInfos#getId()}  */ public Engine.CommitId getRawCommitId() {     return new Engine.CommitId(Base64.getDecoder().decode(id)). }
true;public;0;3;/**  * The synced-flush id of the commit if existed.  */ ;/**  * The synced-flush id of the commit if existed.  */ public String syncId() {     return userData.get(InternalEngine.SYNC_COMMIT_ID). }
true;public;0;3;/**  * Returns the number of documents in the in this commit  */ ;/**  * Returns the number of documents in the in this commit  */ public int getNumDocs() {     return numDocs. }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     MapBuilder<String, String> builder = MapBuilder.newMapBuilder().     for (int i = in.readVInt(). i > 0. i--) {         builder.put(in.readString(), in.readString()).     }     userData = builder.immutableMap().     generation = in.readLong().     id = in.readOptionalString().     numDocs = in.readInt(). }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(userData.size()).     for (Map.Entry<String, String> entry : userData.entrySet()) {         out.writeString(entry.getKey()).         out.writeString(entry.getValue()).     }     out.writeLong(generation).     out.writeOptionalString(id).     out.writeInt(numDocs). }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.COMMIT).     builder.field(Fields.ID, id).     builder.field(Fields.GENERATION, generation).     builder.field(Fields.USER_DATA, userData).     builder.field(Fields.NUM_DOCS, numDocs).     builder.endObject().     return builder. }
