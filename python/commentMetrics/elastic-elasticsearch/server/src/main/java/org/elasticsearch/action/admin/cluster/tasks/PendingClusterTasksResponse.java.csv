commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<PendingClusterTask> pendingTasks() {     return pendingTasks. }
true;public;0;3;/**  * The pending cluster tasks  */ ;/**  * The pending cluster tasks  */ public List<PendingClusterTask> getPendingTasks() {     return pendingTasks(). }
false;public;0;4;;@Override public Iterator<PendingClusterTask> iterator() {     return pendingTasks.iterator(). }
false;public;0;10;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append("tasks: (").append(pendingTasks.size()).append("):\n").     for (PendingClusterTask pendingClusterTask : this) {         sb.append(pendingClusterTask.getInsertOrder()).append("/").append(pendingClusterTask.getPriority()).append("/").append(pendingClusterTask.getSource()).append("/").append(pendingClusterTask.getTimeInQueue()).append("\n").     }     return sb.toString(). }
false;public;2;18;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startArray(Fields.TASKS).     for (PendingClusterTask pendingClusterTask : this) {         builder.startObject().         builder.field(Fields.INSERT_ORDER, pendingClusterTask.getInsertOrder()).         builder.field(Fields.PRIORITY, pendingClusterTask.getPriority()).         builder.field(Fields.SOURCE, pendingClusterTask.getSource()).         builder.field(Fields.EXECUTING, pendingClusterTask.isExecuting()).         builder.field(Fields.TIME_IN_QUEUE_MILLIS, pendingClusterTask.getTimeInQueueInMillis()).         builder.field(Fields.TIME_IN_QUEUE, pendingClusterTask.getTimeInQueue()).         builder.endObject().     }     builder.endArray().     builder.endObject().     return builder. }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     pendingTasks = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         PendingClusterTask task = new PendingClusterTask().         task.readFrom(in).         pendingTasks.add(task).     } }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(pendingTasks.size()).     for (PendingClusterTask task : pendingTasks) {         task.writeTo(out).     } }
