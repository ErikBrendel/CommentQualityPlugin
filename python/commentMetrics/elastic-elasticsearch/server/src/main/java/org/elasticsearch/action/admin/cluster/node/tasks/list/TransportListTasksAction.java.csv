commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;6;;public static long waitForCompletionTimeout(TimeValue timeout) {     if (timeout == null) {         timeout = DEFAULT_WAIT_FOR_COMPLETION_TIMEOUT.     }     return System.nanoTime() + timeout.nanos(). }
false;protected;4;5;;@Override protected ListTasksResponse newResponse(ListTasksRequest request, List<TaskInfo> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     return new ListTasksResponse(tasks, taskOperationFailures, failedNodeExceptions). }
false;protected;3;4;;@Override protected void taskOperation(ListTasksRequest request, Task task, ActionListener<TaskInfo> listener) {     listener.onResponse(task.taskInfo(clusterService.localNode().getId(), request.getDetailed())). }
false;protected;2;15;;@Override protected void processTasks(ListTasksRequest request, Consumer<Task> operation) {     if (request.getWaitForCompletion()) {         long timeoutNanos = waitForCompletionTimeout(request.getTimeout()).         operation = operation.andThen(task -> {             if (task.getAction().startsWith(ListTasksAction.NAME)) {                 // for itself or one of its child tasks                 return.             }             taskManager.waitForTaskCompletion(task, timeoutNanos).         }).     }     super.processTasks(request, operation). }
