commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public SortField.Type reducedType() {     return SortField.Type.DOUBLE. }
false;protected;1;3;;protected SortedNumericDoubleValues getValues(LeafReaderContext context) throws IOException {     return indexFieldData.load(context).getDoubleValues(). }
false;protected;1;1;;protected void setScorer(Scorable scorer) { }
false;protected;2;14;;@Override protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {     final SortedNumericDoubleValues values = getValues(context).     final NumericDoubleValues selectedValues.     if (nested == null) {         selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue).     } else {         final BitSet rootDocs = nested.rootDocs(context).         final DocIdSetIterator innerDocs = nested.innerDocs(context).         final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE.         selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren).     }     return selectedValues.getRawDoubleValues(). }
false;public;1;4;;@Override public void setScorer(Scorable scorer) {     DoubleValuesComparatorSource.this.setScorer(scorer). }
false;public;4;28;;@Override public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {     assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName()).     final double dMissingValue = (Double) missingObject(missingValue, reversed).     // the comparator doesn't check docsWithField since we replace missing values in select()     return new FieldComparator.DoubleComparator(numHits, null, null) {          @Override         protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {             final SortedNumericDoubleValues values = getValues(context).             final NumericDoubleValues selectedValues.             if (nested == null) {                 selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue).             } else {                 final BitSet rootDocs = nested.rootDocs(context).                 final DocIdSetIterator innerDocs = nested.innerDocs(context).                 final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE.                 selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren).             }             return selectedValues.getRawDoubleValues().         }          @Override         public void setScorer(Scorable scorer) {             DoubleValuesComparatorSource.this.setScorer(scorer).         }     }. }
