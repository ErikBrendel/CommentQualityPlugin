commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;10;;private static void close(Iterable<? extends Releasable> releasables, boolean ignoreException) {     try {         // this does the right thing with respect to add suppressed and not wrapping errors etc.         IOUtils.close(releasables).     } catch (IOException e) {         if (ignoreException == false) {             throw new UncheckedIOException(e).         }     } }
true;public,static;1;3;/**  * Release the provided {@link Releasable}s.  */ ;/**  * Release the provided {@link Releasable}s.  */ public static void close(Iterable<? extends Releasable> releasables) {     close(releasables, false). }
true;public,static;1;3;/**  * Release the provided {@link Releasable}s.  */ ;/**  * Release the provided {@link Releasable}s.  */ public static void close(Releasable... releasables) {     close(Arrays.asList(releasables)). }
true;public,static;1;3;/**  * Release the provided {@link Releasable}s, ignoring exceptions.  */ ;/**  * Release the provided {@link Releasable}s, ignoring exceptions.  */ public static void closeWhileHandlingException(Iterable<Releasable> releasables) {     close(releasables, true). }
true;public,static;1;3;/**  * Release the provided {@link Releasable}s, ignoring exceptions.  */ ;/**  * Release the provided {@link Releasable}s, ignoring exceptions.  */ public static void closeWhileHandlingException(Releasable... releasables) {     closeWhileHandlingException(Arrays.asList(releasables)). }
true;public,static;2;7;/**  * Release the provided {@link Releasable}s, ignoring exceptions if <code>success</code> is {@code false}.  */ ;/**  * Release the provided {@link Releasable}s, ignoring exceptions if <code>success</code> is {@code false}.  */ public static void close(boolean success, Iterable<Releasable> releasables) {     if (success) {         close(releasables).     } else {         closeWhileHandlingException(releasables).     } }
true;public,static;2;3;/**  * Release the provided {@link Releasable}s, ignoring exceptions if <code>success</code> is {@code false}.  */ ;/**  * Release the provided {@link Releasable}s, ignoring exceptions if <code>success</code> is {@code false}.  */ public static void close(boolean success, Releasable... releasables) {     close(success, Arrays.asList(releasables)). }
true;public,static;1;3;/**  * Wrap several releasables into a single one. This is typically useful for use with try-with-resources: for example let's assume  *  that you store in a list several resources that you would like to see released after execution of the try block:  *  *  <pre>  *  List&lt.Releasable&gt. resources = ....  *  try (Releasable releasable = Releasables.wrap(resources)) {  *      // do something  *  }  *  // the resources will be released when reaching here  *  </pre>  */ ;/**  * Wrap several releasables into a single one. This is typically useful for use with try-with-resources: for example let's assume  *  that you store in a list several resources that you would like to see released after execution of the try block:  *  *  <pre>  *  List&lt.Releasable&gt. resources = ....  *  try (Releasable releasable = Releasables.wrap(resources)) {  *      // do something  *  }  *  // the resources will be released when reaching here  *  </pre>  */ public static Releasable wrap(final Iterable<Releasable> releasables) {     return () -> close(releasables). }
true;public,static;1;3;/**  * @see #wrap(Iterable)  */ ;/**  * @see #wrap(Iterable)  */ public static Releasable wrap(final Releasable... releasables) {     return () -> close(releasables). }
true;public,static;1;8;/**  * Equivalent to {@link #wrap(Releasable...)} but can be called multiple times without double releasing.  */ ;/**  * Equivalent to {@link #wrap(Releasable...)} but can be called multiple times without double releasing.  */ public static Releasable releaseOnce(final Releasable... releasables) {     final AtomicBoolean released = new AtomicBoolean(false).     return () -> {         if (released.compareAndSet(false, true)) {             close(releasables).         }     }. }
