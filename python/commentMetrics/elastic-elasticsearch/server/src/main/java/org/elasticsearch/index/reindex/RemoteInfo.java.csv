commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(scheme).     out.writeString(host).     out.writeVInt(port).     out.writeBytesReference(query).     out.writeOptionalString(username).     out.writeOptionalString(password).     out.writeVInt(headers.size()).     for (Map.Entry<String, String> header : headers.entrySet()) {         out.writeString(header.getKey()).         out.writeString(header.getValue()).     }     out.writeTimeValue(socketTimeout).     out.writeTimeValue(connectTimeout).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeOptionalString(pathPrefix).     } }
false;public;0;3;;public String getScheme() {     return scheme. }
false;public;0;3;;public String getHost() {     return host. }
false;public;0;3;;public int getPort() {     return port. }
false;public;0;4;;@Nullable public String getPathPrefix() {     return pathPrefix. }
false;public;0;3;;public BytesReference getQuery() {     return query. }
false;public;0;4;;@Nullable public String getUsername() {     return username. }
false;public;0;4;;@Nullable public String getPassword() {     return password. }
false;public;0;3;;public Map<String, String> getHeaders() {     return headers. }
true;public;0;3;/**  * Time to wait for a response from each request.  */ ;/**  * Time to wait for a response from each request.  */ public TimeValue getSocketTimeout() {     return socketTimeout. }
true;public;0;3;/**  * Time to wait to connect to the external cluster.  */ ;/**  * Time to wait to connect to the external cluster.  */ public TimeValue getConnectTimeout() {     return connectTimeout. }
false;public;0;20;;@Override public String toString() {     StringBuilder b = new StringBuilder().     if (false == "http".equals(scheme)) {         // http is the default so it isn't worth taking up space if it is the scheme         b.append("scheme=").append(scheme).append(' ').     }     b.append("host=").append(host).append(" port=").append(port).     if (pathPrefix != null) {         b.append(" pathPrefix=").append(pathPrefix).     }     b.append(" query=").append(query.utf8ToString()).     if (username != null) {         b.append(" username=").append(username).     }     if (password != null) {         b.append(" password=<<>>").     }     return b.toString(). }
false;public;2;19;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (username != null) {         builder.field("username", username).     }     if (password != null) {         builder.field("password", password).     }     builder.field("host", scheme + "://" + host + ":" + port + (pathPrefix == null ? "" : "/" + pathPrefix)).     if (headers.size() > 0) {         builder.field("headers", headers).     }     builder.field("socket_timeout", socketTimeout.getStringRep()).     builder.field("connect_timeout", connectTimeout.getStringRep()).     builder.endObject().     return builder. }
