# id;timestamp;commentText;codeText;commentWords;codeWords
IndexShardOperationPermits -> <E extends Exception> void asyncBlockOperations(             final long timeout, final TimeUnit timeUnit, final CheckedRunnable<E> onBlocked, final Consumer<Exception> onFailure);1524684173;Immediately delays operations and on another thread waits for in-flight operations to finish and then executes {@code onBlocked}_under the guarantee that no new operations are started. Delayed operations are run after {@code onBlocked} has executed. After_operations are delayed and the blocking is forked to another thread, returns to the caller. If a failure occurs while blocking_operations or executing {@code onBlocked} then the {@code onFailure} handler will be invoked.__@param timeout   the maximum time to wait for the in-flight operations block_@param timeUnit  the time unit of the {@code timeout} argument_@param onBlocked the action to run once the block has been acquired_@param onFailure the action to run if a failure occurs while blocking operations_@param <E>       the type of checked exception thrown by {@code onBlocked} (not thrown on the calling thread);<E extends Exception> void asyncBlockOperations(_            final long timeout, final TimeUnit timeUnit, final CheckedRunnable<E> onBlocked, final Consumer<Exception> onFailure) {_        delayOperations()__        threadPool.executor(ThreadPool.Names.GENERIC).execute(new AbstractRunnable() {_            @Override_            public void onFailure(final Exception e) {_                onFailure.accept(e)__            }__            @Override_            protected void doRun() throws Exception {_                doBlockOperations(timeout, timeUnit, onBlocked)__            }__            @Override_            public void onAfter() {_                releaseDelayedOperations()__            }_        })__    };immediately,delays,operations,and,on,another,thread,waits,for,in,flight,operations,to,finish,and,then,executes,code,on,blocked,under,the,guarantee,that,no,new,operations,are,started,delayed,operations,are,run,after,code,on,blocked,has,executed,after,operations,are,delayed,and,the,blocking,is,forked,to,another,thread,returns,to,the,caller,if,a,failure,occurs,while,blocking,operations,or,executing,code,on,blocked,then,the,code,on,failure,handler,will,be,invoked,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument,param,on,blocked,the,action,to,run,once,the,block,has,been,acquired,param,on,failure,the,action,to,run,if,a,failure,occurs,while,blocking,operations,param,e,the,type,of,checked,exception,thrown,by,code,on,blocked,not,thrown,on,the,calling,thread;e,extends,exception,void,async,block,operations,final,long,timeout,final,time,unit,time,unit,final,checked,runnable,e,on,blocked,final,consumer,exception,on,failure,delay,operations,thread,pool,executor,thread,pool,names,generic,execute,new,abstract,runnable,override,public,void,on,failure,final,exception,e,on,failure,accept,e,override,protected,void,do,run,throws,exception,do,block,operations,timeout,time,unit,on,blocked,override,public,void,on,after,release,delayed,operations
IndexShardOperationPermits -> <E extends Exception> void asyncBlockOperations(             final long timeout, final TimeUnit timeUnit, final CheckedRunnable<E> onBlocked, final Consumer<Exception> onFailure);1533295538;Immediately delays operations and on another thread waits for in-flight operations to finish and then executes {@code onBlocked}_under the guarantee that no new operations are started. Delayed operations are run after {@code onBlocked} has executed. After_operations are delayed and the blocking is forked to another thread, returns to the caller. If a failure occurs while blocking_operations or executing {@code onBlocked} then the {@code onFailure} handler will be invoked.__@param timeout   the maximum time to wait for the in-flight operations block_@param timeUnit  the time unit of the {@code timeout} argument_@param onBlocked the action to run once the block has been acquired_@param onFailure the action to run if a failure occurs while blocking operations_@param <E>       the type of checked exception thrown by {@code onBlocked} (not thrown on the calling thread);<E extends Exception> void asyncBlockOperations(_            final long timeout, final TimeUnit timeUnit, final CheckedRunnable<E> onBlocked, final Consumer<Exception> onFailure) {_        delayOperations()__        threadPool.executor(ThreadPool.Names.GENERIC).execute(new AbstractRunnable() {_            @Override_            public void onFailure(final Exception e) {_                onFailure.accept(e)__            }__            @Override_            protected void doRun() throws Exception {_                doBlockOperations(timeout, timeUnit, onBlocked)__            }__            @Override_            public void onAfter() {_                releaseDelayedOperations()__            }_        })__    };immediately,delays,operations,and,on,another,thread,waits,for,in,flight,operations,to,finish,and,then,executes,code,on,blocked,under,the,guarantee,that,no,new,operations,are,started,delayed,operations,are,run,after,code,on,blocked,has,executed,after,operations,are,delayed,and,the,blocking,is,forked,to,another,thread,returns,to,the,caller,if,a,failure,occurs,while,blocking,operations,or,executing,code,on,blocked,then,the,code,on,failure,handler,will,be,invoked,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument,param,on,blocked,the,action,to,run,once,the,block,has,been,acquired,param,on,failure,the,action,to,run,if,a,failure,occurs,while,blocking,operations,param,e,the,type,of,checked,exception,thrown,by,code,on,blocked,not,thrown,on,the,calling,thread;e,extends,exception,void,async,block,operations,final,long,timeout,final,time,unit,time,unit,final,checked,runnable,e,on,blocked,final,consumer,exception,on,failure,delay,operations,thread,pool,executor,thread,pool,names,generic,execute,new,abstract,runnable,override,public,void,on,failure,final,exception,e,on,failure,accept,e,override,protected,void,do,run,throws,exception,do,block,operations,timeout,time,unit,on,blocked,override,public,void,on,after,release,delayed,operations
IndexShardOperationPermits -> public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,                         final Object debugInfo);1524684173;Acquires a permit whenever permit acquisition is not blocked. If the permit is directly available, the provided_{@link ActionListener} will be called on the calling thread. During calls of_{@link #blockOperations(long, TimeUnit, CheckedRunnable)}, permit acquisition can be delayed._The {@link ActionListener#onResponse(Object)} method will then be called using the provided executor once operations are no_longer blocked. Note that the executor will not be used for {@link ActionListener#onFailure(Exception)} calls. Those will run_directly on the calling thread, which in case of delays, will be a generic thread. Callers should thus make sure_that the {@link ActionListener#onFailure(Exception)} method provided here only contains lightweight operations.__@param onAcquired      {@link ActionListener} that is invoked once acquisition is successful or failed_@param executorOnDelay executor to use for the possibly delayed {@link ActionListener#onResponse(Object)} call_@param forceExecution  whether the runnable should force its execution in case it gets rejected_@param debugInfo       an extra information that can be useful when tracing an unreleased permit. When assertions are enabled_the tracing will capture the supplied object's {@link Object#toString()} value. Otherwise the object_isn't used;public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,_                        final Object debugInfo) {_        final StackTraceElement[] stackTrace__        if (Assertions.ENABLED) {_            stackTrace = Thread.currentThread().getStackTrace()__        } else {_            stackTrace = null__        }_        acquire(onAcquired, executorOnDelay, forceExecution, debugInfo, stackTrace)__    };acquires,a,permit,whenever,permit,acquisition,is,not,blocked,if,the,permit,is,directly,available,the,provided,link,action,listener,will,be,called,on,the,calling,thread,during,calls,of,link,block,operations,long,time,unit,checked,runnable,permit,acquisition,can,be,delayed,the,link,action,listener,on,response,object,method,will,then,be,called,using,the,provided,executor,once,operations,are,no,longer,blocked,note,that,the,executor,will,not,be,used,for,link,action,listener,on,failure,exception,calls,those,will,run,directly,on,the,calling,thread,which,in,case,of,delays,will,be,a,generic,thread,callers,should,thus,make,sure,that,the,link,action,listener,on,failure,exception,method,provided,here,only,contains,lightweight,operations,param,on,acquired,link,action,listener,that,is,invoked,once,acquisition,is,successful,or,failed,param,executor,on,delay,executor,to,use,for,the,possibly,delayed,link,action,listener,on,response,object,call,param,force,execution,whether,the,runnable,should,force,its,execution,in,case,it,gets,rejected,param,debug,info,an,extra,information,that,can,be,useful,when,tracing,an,unreleased,permit,when,assertions,are,enabled,the,tracing,will,capture,the,supplied,object,s,link,object,to,string,value,otherwise,the,object,isn,t,used;public,void,acquire,final,action,listener,releasable,on,acquired,final,string,executor,on,delay,final,boolean,force,execution,final,object,debug,info,final,stack,trace,element,stack,trace,if,assertions,enabled,stack,trace,thread,current,thread,get,stack,trace,else,stack,trace,null,acquire,on,acquired,executor,on,delay,force,execution,debug,info,stack,trace
IndexShardOperationPermits -> public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,                         final Object debugInfo);1533295538;Acquires a permit whenever permit acquisition is not blocked. If the permit is directly available, the provided_{@link ActionListener} will be called on the calling thread. During calls of_{@link #blockOperations(long, TimeUnit, CheckedRunnable)}, permit acquisition can be delayed._The {@link ActionListener#onResponse(Object)} method will then be called using the provided executor once operations are no_longer blocked. Note that the executor will not be used for {@link ActionListener#onFailure(Exception)} calls. Those will run_directly on the calling thread, which in case of delays, will be a generic thread. Callers should thus make sure_that the {@link ActionListener#onFailure(Exception)} method provided here only contains lightweight operations.__@param onAcquired      {@link ActionListener} that is invoked once acquisition is successful or failed_@param executorOnDelay executor to use for the possibly delayed {@link ActionListener#onResponse(Object)} call_@param forceExecution  whether the runnable should force its execution in case it gets rejected_@param debugInfo       an extra information that can be useful when tracing an unreleased permit. When assertions are enabled_the tracing will capture the supplied object's {@link Object#toString()} value. Otherwise the object_isn't used;public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,_                        final Object debugInfo) {_        final StackTraceElement[] stackTrace__        if (Assertions.ENABLED) {_            stackTrace = Thread.currentThread().getStackTrace()__        } else {_            stackTrace = null__        }_        acquire(onAcquired, executorOnDelay, forceExecution, debugInfo, stackTrace)__    };acquires,a,permit,whenever,permit,acquisition,is,not,blocked,if,the,permit,is,directly,available,the,provided,link,action,listener,will,be,called,on,the,calling,thread,during,calls,of,link,block,operations,long,time,unit,checked,runnable,permit,acquisition,can,be,delayed,the,link,action,listener,on,response,object,method,will,then,be,called,using,the,provided,executor,once,operations,are,no,longer,blocked,note,that,the,executor,will,not,be,used,for,link,action,listener,on,failure,exception,calls,those,will,run,directly,on,the,calling,thread,which,in,case,of,delays,will,be,a,generic,thread,callers,should,thus,make,sure,that,the,link,action,listener,on,failure,exception,method,provided,here,only,contains,lightweight,operations,param,on,acquired,link,action,listener,that,is,invoked,once,acquisition,is,successful,or,failed,param,executor,on,delay,executor,to,use,for,the,possibly,delayed,link,action,listener,on,response,object,call,param,force,execution,whether,the,runnable,should,force,its,execution,in,case,it,gets,rejected,param,debug,info,an,extra,information,that,can,be,useful,when,tracing,an,unreleased,permit,when,assertions,are,enabled,the,tracing,will,capture,the,supplied,object,s,link,object,to,string,value,otherwise,the,object,isn,t,used;public,void,acquire,final,action,listener,releasable,on,acquired,final,string,executor,on,delay,final,boolean,force,execution,final,object,debug,info,final,stack,trace,element,stack,trace,if,assertions,enabled,stack,trace,thread,current,thread,get,stack,trace,else,stack,trace,null,acquire,on,acquired,executor,on,delay,force,execution,debug,info,stack,trace
IndexShardOperationPermits -> public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,                         final Object debugInfo);1541665413;Acquires a permit whenever permit acquisition is not blocked. If the permit is directly available, the provided_{@link ActionListener} will be called on the calling thread. During calls of_{@link #blockOperations(long, TimeUnit, CheckedRunnable)}, permit acquisition can be delayed._The {@link ActionListener#onResponse(Object)} method will then be called using the provided executor once operations are no_longer blocked. Note that the executor will not be used for {@link ActionListener#onFailure(Exception)} calls. Those will run_directly on the calling thread, which in case of delays, will be a generic thread. Callers should thus make sure_that the {@link ActionListener#onFailure(Exception)} method provided here only contains lightweight operations.__@param onAcquired      {@link ActionListener} that is invoked once acquisition is successful or failed_@param executorOnDelay executor to use for the possibly delayed {@link ActionListener#onResponse(Object)} call_@param forceExecution  whether the runnable should force its execution in case it gets rejected_@param debugInfo       an extra information that can be useful when tracing an unreleased permit. When assertions are enabled_the tracing will capture the supplied object's {@link Object#toString()} value. Otherwise the object_isn't used;public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,_                        final Object debugInfo) {_        final StackTraceElement[] stackTrace__        if (Assertions.ENABLED) {_            stackTrace = Thread.currentThread().getStackTrace()__        } else {_            stackTrace = null__        }_        acquire(onAcquired, executorOnDelay, forceExecution, debugInfo, stackTrace)__    };acquires,a,permit,whenever,permit,acquisition,is,not,blocked,if,the,permit,is,directly,available,the,provided,link,action,listener,will,be,called,on,the,calling,thread,during,calls,of,link,block,operations,long,time,unit,checked,runnable,permit,acquisition,can,be,delayed,the,link,action,listener,on,response,object,method,will,then,be,called,using,the,provided,executor,once,operations,are,no,longer,blocked,note,that,the,executor,will,not,be,used,for,link,action,listener,on,failure,exception,calls,those,will,run,directly,on,the,calling,thread,which,in,case,of,delays,will,be,a,generic,thread,callers,should,thus,make,sure,that,the,link,action,listener,on,failure,exception,method,provided,here,only,contains,lightweight,operations,param,on,acquired,link,action,listener,that,is,invoked,once,acquisition,is,successful,or,failed,param,executor,on,delay,executor,to,use,for,the,possibly,delayed,link,action,listener,on,response,object,call,param,force,execution,whether,the,runnable,should,force,its,execution,in,case,it,gets,rejected,param,debug,info,an,extra,information,that,can,be,useful,when,tracing,an,unreleased,permit,when,assertions,are,enabled,the,tracing,will,capture,the,supplied,object,s,link,object,to,string,value,otherwise,the,object,isn,t,used;public,void,acquire,final,action,listener,releasable,on,acquired,final,string,executor,on,delay,final,boolean,force,execution,final,object,debug,info,final,stack,trace,element,stack,trace,if,assertions,enabled,stack,trace,thread,current,thread,get,stack,trace,else,stack,trace,null,acquire,on,acquired,executor,on,delay,force,execution,debug,info,stack,trace
IndexShardOperationPermits -> public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,                         final Object debugInfo);1542270280;Acquires a permit whenever permit acquisition is not blocked. If the permit is directly available, the provided_{@link ActionListener} will be called on the calling thread. During calls of_{@link #blockOperations(long, TimeUnit, CheckedRunnable)}, permit acquisition can be delayed._The {@link ActionListener#onResponse(Object)} method will then be called using the provided executor once operations are no_longer blocked. Note that the executor will not be used for {@link ActionListener#onFailure(Exception)} calls. Those will run_directly on the calling thread, which in case of delays, will be a generic thread. Callers should thus make sure_that the {@link ActionListener#onFailure(Exception)} method provided here only contains lightweight operations.__@param onAcquired      {@link ActionListener} that is invoked once acquisition is successful or failed_@param executorOnDelay executor to use for the possibly delayed {@link ActionListener#onResponse(Object)} call_@param forceExecution  whether the runnable should force its execution in case it gets rejected_@param debugInfo       an extra information that can be useful when tracing an unreleased permit. When assertions are enabled_the tracing will capture the supplied object's {@link Object#toString()} value. Otherwise the object_isn't used;public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,_                        final Object debugInfo) {_        final StackTraceElement[] stackTrace__        if (Assertions.ENABLED) {_            stackTrace = Thread.currentThread().getStackTrace()__        } else {_            stackTrace = null__        }_        acquire(onAcquired, executorOnDelay, forceExecution, debugInfo, stackTrace)__    };acquires,a,permit,whenever,permit,acquisition,is,not,blocked,if,the,permit,is,directly,available,the,provided,link,action,listener,will,be,called,on,the,calling,thread,during,calls,of,link,block,operations,long,time,unit,checked,runnable,permit,acquisition,can,be,delayed,the,link,action,listener,on,response,object,method,will,then,be,called,using,the,provided,executor,once,operations,are,no,longer,blocked,note,that,the,executor,will,not,be,used,for,link,action,listener,on,failure,exception,calls,those,will,run,directly,on,the,calling,thread,which,in,case,of,delays,will,be,a,generic,thread,callers,should,thus,make,sure,that,the,link,action,listener,on,failure,exception,method,provided,here,only,contains,lightweight,operations,param,on,acquired,link,action,listener,that,is,invoked,once,acquisition,is,successful,or,failed,param,executor,on,delay,executor,to,use,for,the,possibly,delayed,link,action,listener,on,response,object,call,param,force,execution,whether,the,runnable,should,force,its,execution,in,case,it,gets,rejected,param,debug,info,an,extra,information,that,can,be,useful,when,tracing,an,unreleased,permit,when,assertions,are,enabled,the,tracing,will,capture,the,supplied,object,s,link,object,to,string,value,otherwise,the,object,isn,t,used;public,void,acquire,final,action,listener,releasable,on,acquired,final,string,executor,on,delay,final,boolean,force,execution,final,object,debug,info,final,stack,trace,element,stack,trace,if,assertions,enabled,stack,trace,thread,current,thread,get,stack,trace,else,stack,trace,null,acquire,on,acquired,executor,on,delay,force,execution,debug,info,stack,trace
IndexShardOperationPermits -> public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,                         final Object debugInfo);1546011771;Acquires a permit whenever permit acquisition is not blocked. If the permit is directly available, the provided_{@link ActionListener} will be called on the calling thread. During calls of_{@link #blockOperations(long, TimeUnit, CheckedRunnable)}, permit acquisition can be delayed._The {@link ActionListener#onResponse(Object)} method will then be called using the provided executor once operations are no_longer blocked. Note that the executor will not be used for {@link ActionListener#onFailure(Exception)} calls. Those will run_directly on the calling thread, which in case of delays, will be a generic thread. Callers should thus make sure_that the {@link ActionListener#onFailure(Exception)} method provided here only contains lightweight operations.__@param onAcquired      {@link ActionListener} that is invoked once acquisition is successful or failed_@param executorOnDelay executor to use for the possibly delayed {@link ActionListener#onResponse(Object)} call_@param forceExecution  whether the runnable should force its execution in case it gets rejected_@param debugInfo       an extra information that can be useful when tracing an unreleased permit. When assertions are enabled_the tracing will capture the supplied object's {@link Object#toString()} value. Otherwise the object_isn't used;public void acquire(final ActionListener<Releasable> onAcquired, final String executorOnDelay, final boolean forceExecution,_                        final Object debugInfo) {_        final StackTraceElement[] stackTrace__        if (Assertions.ENABLED) {_            stackTrace = Thread.currentThread().getStackTrace()__        } else {_            stackTrace = null__        }_        acquire(onAcquired, executorOnDelay, forceExecution, debugInfo, stackTrace)__    };acquires,a,permit,whenever,permit,acquisition,is,not,blocked,if,the,permit,is,directly,available,the,provided,link,action,listener,will,be,called,on,the,calling,thread,during,calls,of,link,block,operations,long,time,unit,checked,runnable,permit,acquisition,can,be,delayed,the,link,action,listener,on,response,object,method,will,then,be,called,using,the,provided,executor,once,operations,are,no,longer,blocked,note,that,the,executor,will,not,be,used,for,link,action,listener,on,failure,exception,calls,those,will,run,directly,on,the,calling,thread,which,in,case,of,delays,will,be,a,generic,thread,callers,should,thus,make,sure,that,the,link,action,listener,on,failure,exception,method,provided,here,only,contains,lightweight,operations,param,on,acquired,link,action,listener,that,is,invoked,once,acquisition,is,successful,or,failed,param,executor,on,delay,executor,to,use,for,the,possibly,delayed,link,action,listener,on,response,object,call,param,force,execution,whether,the,runnable,should,force,its,execution,in,case,it,gets,rejected,param,debug,info,an,extra,information,that,can,be,useful,when,tracing,an,unreleased,permit,when,assertions,are,enabled,the,tracing,will,capture,the,supplied,object,s,link,object,to,string,value,otherwise,the,object,isn,t,used;public,void,acquire,final,action,listener,releasable,on,acquired,final,string,executor,on,delay,final,boolean,force,execution,final,object,debug,info,final,stack,trace,element,stack,trace,if,assertions,enabled,stack,trace,thread,current,thread,get,stack,trace,else,stack,trace,null,acquire,on,acquired,executor,on,delay,force,execution,debug,info,stack,trace
IndexShardOperationPermits -> public void asyncBlockOperations(final ActionListener<Releasable> onAcquired, final long timeout, final TimeUnit timeUnit);1541665413;Immediately delays operations and on another thread waits for in-flight operations to finish and then acquires all permits. When all_permits are acquired, the provided {@link ActionListener} is called under the guarantee that no new operations are started. Delayed_operations are run once the {@link Releasable} is released or if a failure occurs while acquiring all permits_ in this case the_{@code onFailure} handler will be invoked after delayed operations are released.__@param onAcquired {@link ActionListener} that is invoked once acquisition is successful or failed_@param timeout    the maximum time to wait for the in-flight operations block_@param timeUnit   the time unit of the {@code timeout} argument;public void asyncBlockOperations(final ActionListener<Releasable> onAcquired, final long timeout, final TimeUnit timeUnit)  {_        delayOperations()__        threadPool.executor(ThreadPool.Names.GENERIC).execute(new AbstractRunnable() {__            final AtomicBoolean released = new AtomicBoolean(false)___            @Override_            public void onFailure(final Exception e) {_                try {_                    releaseDelayedOperationsIfNeeded()_ _                } finally {_                    onAcquired.onFailure(e)__                }_            }__            @Override_            protected void doRun() throws Exception {_                final Releasable releasable = acquireAll(timeout, timeUnit)__                onAcquired.onResponse(() -> {_                    try {_                        releasable.close()__                    } finally {_                        releaseDelayedOperationsIfNeeded()__                    }_                })__            }__            private void releaseDelayedOperationsIfNeeded() {_                if (released.compareAndSet(false, true)) {_                    releaseDelayedOperations()__                }_            }_        })__    };immediately,delays,operations,and,on,another,thread,waits,for,in,flight,operations,to,finish,and,then,acquires,all,permits,when,all,permits,are,acquired,the,provided,link,action,listener,is,called,under,the,guarantee,that,no,new,operations,are,started,delayed,operations,are,run,once,the,link,releasable,is,released,or,if,a,failure,occurs,while,acquiring,all,permits,in,this,case,the,code,on,failure,handler,will,be,invoked,after,delayed,operations,are,released,param,on,acquired,link,action,listener,that,is,invoked,once,acquisition,is,successful,or,failed,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument;public,void,async,block,operations,final,action,listener,releasable,on,acquired,final,long,timeout,final,time,unit,time,unit,delay,operations,thread,pool,executor,thread,pool,names,generic,execute,new,abstract,runnable,final,atomic,boolean,released,new,atomic,boolean,false,override,public,void,on,failure,final,exception,e,try,release,delayed,operations,if,needed,finally,on,acquired,on,failure,e,override,protected,void,do,run,throws,exception,final,releasable,releasable,acquire,all,timeout,time,unit,on,acquired,on,response,try,releasable,close,finally,release,delayed,operations,if,needed,private,void,release,delayed,operations,if,needed,if,released,compare,and,set,false,true,release,delayed,operations
IndexShardOperationPermits -> public void asyncBlockOperations(final ActionListener<Releasable> onAcquired, final long timeout, final TimeUnit timeUnit);1542270280;Immediately delays operations and on another thread waits for in-flight operations to finish and then acquires all permits. When all_permits are acquired, the provided {@link ActionListener} is called under the guarantee that no new operations are started. Delayed_operations are run once the {@link Releasable} is released or if a failure occurs while acquiring all permits_ in this case the_{@code onFailure} handler will be invoked after delayed operations are released.__@param onAcquired {@link ActionListener} that is invoked once acquisition is successful or failed_@param timeout    the maximum time to wait for the in-flight operations block_@param timeUnit   the time unit of the {@code timeout} argument;public void asyncBlockOperations(final ActionListener<Releasable> onAcquired, final long timeout, final TimeUnit timeUnit)  {_        delayOperations()__        threadPool.executor(ThreadPool.Names.GENERIC).execute(new AbstractRunnable() {__            final RunOnce released = new RunOnce(() -> releaseDelayedOperations())___            @Override_            public void onFailure(final Exception e) {_                try {_                    released.run()_ _                } finally {_                    onAcquired.onFailure(e)__                }_            }__            @Override_            protected void doRun() throws Exception {_                final Releasable releasable = acquireAll(timeout, timeUnit)__                onAcquired.onResponse(() -> {_                    try {_                        releasable.close()__                    } finally {_                        released.run()__                    }_                })__            }_        })__    };immediately,delays,operations,and,on,another,thread,waits,for,in,flight,operations,to,finish,and,then,acquires,all,permits,when,all,permits,are,acquired,the,provided,link,action,listener,is,called,under,the,guarantee,that,no,new,operations,are,started,delayed,operations,are,run,once,the,link,releasable,is,released,or,if,a,failure,occurs,while,acquiring,all,permits,in,this,case,the,code,on,failure,handler,will,be,invoked,after,delayed,operations,are,released,param,on,acquired,link,action,listener,that,is,invoked,once,acquisition,is,successful,or,failed,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument;public,void,async,block,operations,final,action,listener,releasable,on,acquired,final,long,timeout,final,time,unit,time,unit,delay,operations,thread,pool,executor,thread,pool,names,generic,execute,new,abstract,runnable,final,run,once,released,new,run,once,release,delayed,operations,override,public,void,on,failure,final,exception,e,try,released,run,finally,on,acquired,on,failure,e,override,protected,void,do,run,throws,exception,final,releasable,releasable,acquire,all,timeout,time,unit,on,acquired,on,response,try,releasable,close,finally,released,run
IndexShardOperationPermits -> public void asyncBlockOperations(final ActionListener<Releasable> onAcquired, final long timeout, final TimeUnit timeUnit);1546011771;Immediately delays operations and on another thread waits for in-flight operations to finish and then acquires all permits. When all_permits are acquired, the provided {@link ActionListener} is called under the guarantee that no new operations are started. Delayed_operations are run once the {@link Releasable} is released or if a failure occurs while acquiring all permits_ in this case the_{@code onFailure} handler will be invoked after delayed operations are released.__@param onAcquired {@link ActionListener} that is invoked once acquisition is successful or failed_@param timeout    the maximum time to wait for the in-flight operations block_@param timeUnit   the time unit of the {@code timeout} argument;public void asyncBlockOperations(final ActionListener<Releasable> onAcquired, final long timeout, final TimeUnit timeUnit)  {_        delayOperations()__        threadPool.executor(ThreadPool.Names.GENERIC).execute(new AbstractRunnable() {__            final RunOnce released = new RunOnce(() -> releaseDelayedOperations())___            @Override_            public void onFailure(final Exception e) {_                try {_                    released.run()_ _                } finally {_                    onAcquired.onFailure(e)__                }_            }__            @Override_            protected void doRun() throws Exception {_                final Releasable releasable = acquireAll(timeout, timeUnit)__                onAcquired.onResponse(() -> {_                    try {_                        releasable.close()__                    } finally {_                        released.run()__                    }_                })__            }_        })__    };immediately,delays,operations,and,on,another,thread,waits,for,in,flight,operations,to,finish,and,then,acquires,all,permits,when,all,permits,are,acquired,the,provided,link,action,listener,is,called,under,the,guarantee,that,no,new,operations,are,started,delayed,operations,are,run,once,the,link,releasable,is,released,or,if,a,failure,occurs,while,acquiring,all,permits,in,this,case,the,code,on,failure,handler,will,be,invoked,after,delayed,operations,are,released,param,on,acquired,link,action,listener,that,is,invoked,once,acquisition,is,successful,or,failed,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument;public,void,async,block,operations,final,action,listener,releasable,on,acquired,final,long,timeout,final,time,unit,time,unit,delay,operations,thread,pool,executor,thread,pool,names,generic,execute,new,abstract,runnable,final,run,once,released,new,run,once,release,delayed,operations,override,public,void,on,failure,final,exception,e,try,released,run,finally,on,acquired,on,failure,e,override,protected,void,do,run,throws,exception,final,releasable,releasable,acquire,all,timeout,time,unit,on,acquired,on,response,try,releasable,close,finally,released,run
IndexShardOperationPermits -> List<String> getActiveOperations();1524684173;@return a list of describing each permit that wasn't released yet. The description consist of the debugInfo supplied_when the permit was acquired plus a stack traces that was captured when the permit was request.;List<String> getActiveOperations() {_        return issuedPermits.values().stream().map(_            t -> t.v1() + "\n" + ExceptionsHelper.formatStackTrace(t.v2()))_            .collect(Collectors.toList())__    };return,a,list,of,describing,each,permit,that,wasn,t,released,yet,the,description,consist,of,the,debug,info,supplied,when,the,permit,was,acquired,plus,a,stack,traces,that,was,captured,when,the,permit,was,request;list,string,get,active,operations,return,issued,permits,values,stream,map,t,t,v1,n,exceptions,helper,format,stack,trace,t,v2,collect,collectors,to,list
IndexShardOperationPermits -> List<String> getActiveOperations();1533295538;@return a list of describing each permit that wasn't released yet. The description consist of the debugInfo supplied_when the permit was acquired plus a stack traces that was captured when the permit was request.;List<String> getActiveOperations() {_        return issuedPermits.values().stream().map(_            t -> t.v1() + "\n" + ExceptionsHelper.formatStackTrace(t.v2()))_            .collect(Collectors.toList())__    };return,a,list,of,describing,each,permit,that,wasn,t,released,yet,the,description,consist,of,the,debug,info,supplied,when,the,permit,was,acquired,plus,a,stack,traces,that,was,captured,when,the,permit,was,request;list,string,get,active,operations,return,issued,permits,values,stream,map,t,t,v1,n,exceptions,helper,format,stack,trace,t,v2,collect,collectors,to,list
IndexShardOperationPermits -> List<String> getActiveOperations();1541665413;@return a list of describing each permit that wasn't released yet. The description consist of the debugInfo supplied_when the permit was acquired plus a stack traces that was captured when the permit was request.;List<String> getActiveOperations() {_        return issuedPermits.values().stream().map(_            t -> t.v1() + "\n" + ExceptionsHelper.formatStackTrace(t.v2()))_            .collect(Collectors.toList())__    };return,a,list,of,describing,each,permit,that,wasn,t,released,yet,the,description,consist,of,the,debug,info,supplied,when,the,permit,was,acquired,plus,a,stack,traces,that,was,captured,when,the,permit,was,request;list,string,get,active,operations,return,issued,permits,values,stream,map,t,t,v1,n,exceptions,helper,format,stack,trace,t,v2,collect,collectors,to,list
IndexShardOperationPermits -> List<String> getActiveOperations();1542270280;@return a list of describing each permit that wasn't released yet. The description consist of the debugInfo supplied_when the permit was acquired plus a stack traces that was captured when the permit was request.;List<String> getActiveOperations() {_        return issuedPermits.values().stream().map(_            t -> t.v1() + "\n" + ExceptionsHelper.formatStackTrace(t.v2()))_            .collect(Collectors.toList())__    };return,a,list,of,describing,each,permit,that,wasn,t,released,yet,the,description,consist,of,the,debug,info,supplied,when,the,permit,was,acquired,plus,a,stack,traces,that,was,captured,when,the,permit,was,request;list,string,get,active,operations,return,issued,permits,values,stream,map,t,t,v1,n,exceptions,helper,format,stack,trace,t,v2,collect,collectors,to,list
IndexShardOperationPermits -> List<String> getActiveOperations();1546011771;@return a list of describing each permit that wasn't released yet. The description consist of the debugInfo supplied_when the permit was acquired plus a stack traces that was captured when the permit was request.;List<String> getActiveOperations() {_        return issuedPermits.values().stream().map(_            t -> t.v1() + "\n" + ExceptionsHelper.formatStackTrace(t.v2()))_            .collect(Collectors.toList())__    };return,a,list,of,describing,each,permit,that,wasn,t,released,yet,the,description,consist,of,the,debug,info,supplied,when,the,permit,was,acquired,plus,a,stack,traces,that,was,captured,when,the,permit,was,request;list,string,get,active,operations,return,issued,permits,values,stream,map,t,t,v1,n,exceptions,helper,format,stack,trace,t,v2,collect,collectors,to,list
IndexShardOperationPermits -> <E extends Exception> void blockOperations(             final long timeout,             final TimeUnit timeUnit,             final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E;1524684173;Wait for in-flight operations to finish and executes {@code onBlocked} under the guarantee that no new operations are started. Queues_operations that are occurring in the meanwhile and runs them once {@code onBlocked} has executed.__@param timeout   the maximum time to wait for the in-flight operations block_@param timeUnit  the time unit of the {@code timeout} argument_@param onBlocked the action to run once the block has been acquired_@param <E>       the type of checked exception thrown by {@code onBlocked}_@throws InterruptedException      if calling thread is interrupted_@throws TimeoutException          if timed out waiting for in-flight operations to finish_@throws IndexShardClosedException if operation permit has been closed;<E extends Exception> void blockOperations(_            final long timeout,_            final TimeUnit timeUnit,_            final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E {_        if (closed) {_            throw new IndexShardClosedException(shardId)__        }_        delayOperations()__        try {_            doBlockOperations(timeout, timeUnit, onBlocked)__        } finally {_            releaseDelayedOperations()__        }_    };wait,for,in,flight,operations,to,finish,and,executes,code,on,blocked,under,the,guarantee,that,no,new,operations,are,started,queues,operations,that,are,occurring,in,the,meanwhile,and,runs,them,once,code,on,blocked,has,executed,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument,param,on,blocked,the,action,to,run,once,the,block,has,been,acquired,param,e,the,type,of,checked,exception,thrown,by,code,on,blocked,throws,interrupted,exception,if,calling,thread,is,interrupted,throws,timeout,exception,if,timed,out,waiting,for,in,flight,operations,to,finish,throws,index,shard,closed,exception,if,operation,permit,has,been,closed;e,extends,exception,void,block,operations,final,long,timeout,final,time,unit,time,unit,final,checked,runnable,e,on,blocked,throws,interrupted,exception,timeout,exception,e,if,closed,throw,new,index,shard,closed,exception,shard,id,delay,operations,try,do,block,operations,timeout,time,unit,on,blocked,finally,release,delayed,operations
IndexShardOperationPermits -> <E extends Exception> void blockOperations(             final long timeout,             final TimeUnit timeUnit,             final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E;1533295538;Wait for in-flight operations to finish and executes {@code onBlocked} under the guarantee that no new operations are started. Queues_operations that are occurring in the meanwhile and runs them once {@code onBlocked} has executed.__@param timeout   the maximum time to wait for the in-flight operations block_@param timeUnit  the time unit of the {@code timeout} argument_@param onBlocked the action to run once the block has been acquired_@param <E>       the type of checked exception thrown by {@code onBlocked}_@throws InterruptedException      if calling thread is interrupted_@throws TimeoutException          if timed out waiting for in-flight operations to finish_@throws IndexShardClosedException if operation permit has been closed;<E extends Exception> void blockOperations(_            final long timeout,_            final TimeUnit timeUnit,_            final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E {_        delayOperations()__        try {_            doBlockOperations(timeout, timeUnit, onBlocked)__        } finally {_            releaseDelayedOperations()__        }_    };wait,for,in,flight,operations,to,finish,and,executes,code,on,blocked,under,the,guarantee,that,no,new,operations,are,started,queues,operations,that,are,occurring,in,the,meanwhile,and,runs,them,once,code,on,blocked,has,executed,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument,param,on,blocked,the,action,to,run,once,the,block,has,been,acquired,param,e,the,type,of,checked,exception,thrown,by,code,on,blocked,throws,interrupted,exception,if,calling,thread,is,interrupted,throws,timeout,exception,if,timed,out,waiting,for,in,flight,operations,to,finish,throws,index,shard,closed,exception,if,operation,permit,has,been,closed;e,extends,exception,void,block,operations,final,long,timeout,final,time,unit,time,unit,final,checked,runnable,e,on,blocked,throws,interrupted,exception,timeout,exception,e,delay,operations,try,do,block,operations,timeout,time,unit,on,blocked,finally,release,delayed,operations
IndexShardOperationPermits -> <E extends Exception> void blockOperations(             final long timeout,             final TimeUnit timeUnit,             final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E;1541665413;Wait for in-flight operations to finish and executes {@code onBlocked} under the guarantee that no new operations are started. Queues_operations that are occurring in the meanwhile and runs them once {@code onBlocked} has executed.__@param timeout   the maximum time to wait for the in-flight operations block_@param timeUnit  the time unit of the {@code timeout} argument_@param onBlocked the action to run once the block has been acquired_@param <E>       the type of checked exception thrown by {@code onBlocked}_@throws InterruptedException      if calling thread is interrupted_@throws TimeoutException          if timed out waiting for in-flight operations to finish_@throws IndexShardClosedException if operation permit has been closed;<E extends Exception> void blockOperations(_            final long timeout,_            final TimeUnit timeUnit,_            final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E {_        delayOperations()__        try (Releasable ignored = acquireAll(timeout, timeUnit)) {_            onBlocked.run()__        } finally {_            releaseDelayedOperations()__        }_    };wait,for,in,flight,operations,to,finish,and,executes,code,on,blocked,under,the,guarantee,that,no,new,operations,are,started,queues,operations,that,are,occurring,in,the,meanwhile,and,runs,them,once,code,on,blocked,has,executed,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument,param,on,blocked,the,action,to,run,once,the,block,has,been,acquired,param,e,the,type,of,checked,exception,thrown,by,code,on,blocked,throws,interrupted,exception,if,calling,thread,is,interrupted,throws,timeout,exception,if,timed,out,waiting,for,in,flight,operations,to,finish,throws,index,shard,closed,exception,if,operation,permit,has,been,closed;e,extends,exception,void,block,operations,final,long,timeout,final,time,unit,time,unit,final,checked,runnable,e,on,blocked,throws,interrupted,exception,timeout,exception,e,delay,operations,try,releasable,ignored,acquire,all,timeout,time,unit,on,blocked,run,finally,release,delayed,operations
IndexShardOperationPermits -> <E extends Exception> void blockOperations(             final long timeout,             final TimeUnit timeUnit,             final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E;1542270280;Wait for in-flight operations to finish and executes {@code onBlocked} under the guarantee that no new operations are started. Queues_operations that are occurring in the meanwhile and runs them once {@code onBlocked} has executed.__@param timeout   the maximum time to wait for the in-flight operations block_@param timeUnit  the time unit of the {@code timeout} argument_@param onBlocked the action to run once the block has been acquired_@param <E>       the type of checked exception thrown by {@code onBlocked}_@throws InterruptedException      if calling thread is interrupted_@throws TimeoutException          if timed out waiting for in-flight operations to finish_@throws IndexShardClosedException if operation permit has been closed;<E extends Exception> void blockOperations(_            final long timeout,_            final TimeUnit timeUnit,_            final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E {_        delayOperations()__        try (Releasable ignored = acquireAll(timeout, timeUnit)) {_            onBlocked.run()__        } finally {_            releaseDelayedOperations()__        }_    };wait,for,in,flight,operations,to,finish,and,executes,code,on,blocked,under,the,guarantee,that,no,new,operations,are,started,queues,operations,that,are,occurring,in,the,meanwhile,and,runs,them,once,code,on,blocked,has,executed,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument,param,on,blocked,the,action,to,run,once,the,block,has,been,acquired,param,e,the,type,of,checked,exception,thrown,by,code,on,blocked,throws,interrupted,exception,if,calling,thread,is,interrupted,throws,timeout,exception,if,timed,out,waiting,for,in,flight,operations,to,finish,throws,index,shard,closed,exception,if,operation,permit,has,been,closed;e,extends,exception,void,block,operations,final,long,timeout,final,time,unit,time,unit,final,checked,runnable,e,on,blocked,throws,interrupted,exception,timeout,exception,e,delay,operations,try,releasable,ignored,acquire,all,timeout,time,unit,on,blocked,run,finally,release,delayed,operations
IndexShardOperationPermits -> <E extends Exception> void blockOperations(             final long timeout,             final TimeUnit timeUnit,             final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E;1546011771;Wait for in-flight operations to finish and executes {@code onBlocked} under the guarantee that no new operations are started. Queues_operations that are occurring in the meanwhile and runs them once {@code onBlocked} has executed.__@param timeout   the maximum time to wait for the in-flight operations block_@param timeUnit  the time unit of the {@code timeout} argument_@param onBlocked the action to run once the block has been acquired_@param <E>       the type of checked exception thrown by {@code onBlocked}_@throws InterruptedException      if calling thread is interrupted_@throws TimeoutException          if timed out waiting for in-flight operations to finish_@throws IndexShardClosedException if operation permit has been closed;<E extends Exception> void blockOperations(_            final long timeout,_            final TimeUnit timeUnit,_            final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E {_        delayOperations()__        try (Releasable ignored = acquireAll(timeout, timeUnit)) {_            onBlocked.run()__        } finally {_            releaseDelayedOperations()__        }_    };wait,for,in,flight,operations,to,finish,and,executes,code,on,blocked,under,the,guarantee,that,no,new,operations,are,started,queues,operations,that,are,occurring,in,the,meanwhile,and,runs,them,once,code,on,blocked,has,executed,param,timeout,the,maximum,time,to,wait,for,the,in,flight,operations,block,param,time,unit,the,time,unit,of,the,code,timeout,argument,param,on,blocked,the,action,to,run,once,the,block,has,been,acquired,param,e,the,type,of,checked,exception,thrown,by,code,on,blocked,throws,interrupted,exception,if,calling,thread,is,interrupted,throws,timeout,exception,if,timed,out,waiting,for,in,flight,operations,to,finish,throws,index,shard,closed,exception,if,operation,permit,has,been,closed;e,extends,exception,void,block,operations,final,long,timeout,final,time,unit,time,unit,final,checked,runnable,e,on,blocked,throws,interrupted,exception,timeout,exception,e,delay,operations,try,releasable,ignored,acquire,all,timeout,time,unit,on,blocked,run,finally,release,delayed,operations
IndexShardOperationPermits -> IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool);1524684173;Construct operation permits for the specified shards.__@param shardId    the shard_@param threadPool the thread pool (used to execute delayed operations);IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool) {_        this.shardId = shardId__        this.threadPool = threadPool__        if (Assertions.ENABLED) {_            issuedPermits = new ConcurrentHashMap<>()__        } else {_            issuedPermits = null__        }_    };construct,operation,permits,for,the,specified,shards,param,shard,id,the,shard,param,thread,pool,the,thread,pool,used,to,execute,delayed,operations;index,shard,operation,permits,final,shard,id,shard,id,final,thread,pool,thread,pool,this,shard,id,shard,id,this,thread,pool,thread,pool,if,assertions,enabled,issued,permits,new,concurrent,hash,map,else,issued,permits,null
IndexShardOperationPermits -> IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool);1533295538;Construct operation permits for the specified shards.__@param shardId    the shard_@param threadPool the thread pool (used to execute delayed operations);IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool) {_        this.shardId = shardId__        this.threadPool = threadPool__        if (Assertions.ENABLED) {_            issuedPermits = new ConcurrentHashMap<>()__        } else {_            issuedPermits = null__        }_    };construct,operation,permits,for,the,specified,shards,param,shard,id,the,shard,param,thread,pool,the,thread,pool,used,to,execute,delayed,operations;index,shard,operation,permits,final,shard,id,shard,id,final,thread,pool,thread,pool,this,shard,id,shard,id,this,thread,pool,thread,pool,if,assertions,enabled,issued,permits,new,concurrent,hash,map,else,issued,permits,null
IndexShardOperationPermits -> IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool);1541665413;Construct operation permits for the specified shards.__@param shardId    the shard_@param threadPool the thread pool (used to execute delayed operations);IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool) {_        this.shardId = shardId__        this.threadPool = threadPool__        if (Assertions.ENABLED) {_            issuedPermits = new ConcurrentHashMap<>()__        } else {_            issuedPermits = null__        }_    };construct,operation,permits,for,the,specified,shards,param,shard,id,the,shard,param,thread,pool,the,thread,pool,used,to,execute,delayed,operations;index,shard,operation,permits,final,shard,id,shard,id,final,thread,pool,thread,pool,this,shard,id,shard,id,this,thread,pool,thread,pool,if,assertions,enabled,issued,permits,new,concurrent,hash,map,else,issued,permits,null
IndexShardOperationPermits -> IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool);1542270280;Construct operation permits for the specified shards.__@param shardId    the shard_@param threadPool the thread pool (used to execute delayed operations);IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool) {_        this.shardId = shardId__        this.threadPool = threadPool__        if (Assertions.ENABLED) {_            issuedPermits = new ConcurrentHashMap<>()__        } else {_            issuedPermits = null__        }_    };construct,operation,permits,for,the,specified,shards,param,shard,id,the,shard,param,thread,pool,the,thread,pool,used,to,execute,delayed,operations;index,shard,operation,permits,final,shard,id,shard,id,final,thread,pool,thread,pool,this,shard,id,shard,id,this,thread,pool,thread,pool,if,assertions,enabled,issued,permits,new,concurrent,hash,map,else,issued,permits,null
IndexShardOperationPermits -> IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool);1546011771;Construct operation permits for the specified shards.__@param shardId    the shard_@param threadPool the thread pool (used to execute delayed operations);IndexShardOperationPermits(final ShardId shardId, final ThreadPool threadPool) {_        this.shardId = shardId__        this.threadPool = threadPool__        if (Assertions.ENABLED) {_            issuedPermits = new ConcurrentHashMap<>()__        } else {_            issuedPermits = null__        }_    };construct,operation,permits,for,the,specified,shards,param,shard,id,the,shard,param,thread,pool,the,thread,pool,used,to,execute,delayed,operations;index,shard,operation,permits,final,shard,id,shard,id,final,thread,pool,thread,pool,this,shard,id,shard,id,this,thread,pool,thread,pool,if,assertions,enabled,issued,permits,new,concurrent,hash,map,else,issued,permits,null
IndexShardOperationPermits -> int getActiveOperationsCount();1524684173;Obtain the active operation count, or zero if all permits are held (even if there are outstanding operations in flight).__@return the active operation count, or zero when all permits ar eheld;int getActiveOperationsCount() {_        int availablePermits = semaphore.availablePermits()__        if (availablePermits == 0) {_            _            return 0__        } else {_            return TOTAL_PERMITS - availablePermits__        }_    };obtain,the,active,operation,count,or,zero,if,all,permits,are,held,even,if,there,are,outstanding,operations,in,flight,return,the,active,operation,count,or,zero,when,all,permits,ar,eheld;int,get,active,operations,count,int,available,permits,semaphore,available,permits,if,available,permits,0,return,0,else,return,available,permits
IndexShardOperationPermits -> int getActiveOperationsCount();1533295538;Obtain the active operation count, or zero if all permits are held (even if there are outstanding operations in flight).__@return the active operation count, or zero when all permits ar eheld;int getActiveOperationsCount() {_        int availablePermits = semaphore.availablePermits()__        if (availablePermits == 0) {_            _            return 0__        } else {_            return TOTAL_PERMITS - availablePermits__        }_    };obtain,the,active,operation,count,or,zero,if,all,permits,are,held,even,if,there,are,outstanding,operations,in,flight,return,the,active,operation,count,or,zero,when,all,permits,ar,eheld;int,get,active,operations,count,int,available,permits,semaphore,available,permits,if,available,permits,0,return,0,else,return,available,permits
IndexShardOperationPermits -> int getActiveOperationsCount();1541665413;Obtain the active operation count, or zero if all permits are held (even if there are outstanding operations in flight).__@return the active operation count, or zero when all permits ar eheld;int getActiveOperationsCount() {_        int availablePermits = semaphore.availablePermits()__        if (availablePermits == 0) {_            _            return 0__        } else {_            return TOTAL_PERMITS - availablePermits__        }_    };obtain,the,active,operation,count,or,zero,if,all,permits,are,held,even,if,there,are,outstanding,operations,in,flight,return,the,active,operation,count,or,zero,when,all,permits,ar,eheld;int,get,active,operations,count,int,available,permits,semaphore,available,permits,if,available,permits,0,return,0,else,return,available,permits
IndexShardOperationPermits -> int getActiveOperationsCount();1542270280;Obtain the active operation count, or zero if all permits are held (even if there are outstanding operations in flight).__@return the active operation count, or zero when all permits ar eheld;int getActiveOperationsCount() {_        int availablePermits = semaphore.availablePermits()__        if (availablePermits == 0) {_            _            return 0__        } else {_            return TOTAL_PERMITS - availablePermits__        }_    };obtain,the,active,operation,count,or,zero,if,all,permits,are,held,even,if,there,are,outstanding,operations,in,flight,return,the,active,operation,count,or,zero,when,all,permits,ar,eheld;int,get,active,operations,count,int,available,permits,semaphore,available,permits,if,available,permits,0,return,0,else,return,available,permits
IndexShardOperationPermits -> int getActiveOperationsCount();1546011771;Obtain the active operation count, or zero if all permits are held (even if there are outstanding operations in flight).__@return the active operation count, or zero when all permits are held;int getActiveOperationsCount() {_        int availablePermits = semaphore.availablePermits()__        if (availablePermits == 0) {_            _            return 0__        } else {_            return TOTAL_PERMITS - availablePermits__        }_    };obtain,the,active,operation,count,or,zero,if,all,permits,are,held,even,if,there,are,outstanding,operations,in,flight,return,the,active,operation,count,or,zero,when,all,permits,are,held;int,get,active,operations,count,int,available,permits,semaphore,available,permits,if,available,permits,0,return,0,else,return,available,permits
