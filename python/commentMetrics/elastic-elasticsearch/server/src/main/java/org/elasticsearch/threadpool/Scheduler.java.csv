# id;timestamp;commentText;codeText;commentWords;codeWords
Scheduler -> Cancellable -> boolean cancel()_;1548953505;Cancel the execution of this object. This method is idempotent.;boolean cancel()_;cancel,the,execution,of,this,object,this,method,is,idempotent;boolean,cancel
Scheduler -> Cancellable -> boolean cancel()_;1549399704;Cancel the execution of this object. This method is idempotent.;boolean cancel()_;cancel,the,execution,of,this,object,this,method,is,idempotent;boolean,cancel
Scheduler -> Cancellable -> void cancel()_;1524684173;Cancel the execution of this object. This method is idempotent.;void cancel()_;cancel,the,execution,of,this,object,this,method,is,idempotent;void,cancel
Scheduler -> Cancellable -> void cancel()_;1547743595;Cancel the execution of this object. This method is idempotent.;void cancel()_;cancel,the,execution,of,this,object,this,method,is,idempotent;void,cancel
Scheduler -> static ScheduledCancellable wrapAsScheduledCancellable(ScheduledFuture<?> scheduledFuture);1548953505;Utility method to wrap a <code>ScheduledFuture</code> as a <code>ScheduledCancellable</code>_@param scheduledFuture the scheduled future to wrap_@return a SchedulecCancellable delegating to the scheduledFuture;static ScheduledCancellable wrapAsScheduledCancellable(ScheduledFuture<?> scheduledFuture) {_        return new ScheduledCancellableAdapter(scheduledFuture)__    };utility,method,to,wrap,a,code,scheduled,future,code,as,a,code,scheduled,cancellable,code,param,scheduled,future,the,scheduled,future,to,wrap,return,a,schedulec,cancellable,delegating,to,the,scheduled,future;static,scheduled,cancellable,wrap,as,scheduled,cancellable,scheduled,future,scheduled,future,return,new,scheduled,cancellable,adapter,scheduled,future
Scheduler -> static ScheduledCancellable wrapAsScheduledCancellable(ScheduledFuture<?> scheduledFuture);1549399704;Utility method to wrap a <code>ScheduledFuture</code> as a <code>ScheduledCancellable</code>_@param scheduledFuture the scheduled future to wrap_@return a SchedulecCancellable delegating to the scheduledFuture;static ScheduledCancellable wrapAsScheduledCancellable(ScheduledFuture<?> scheduledFuture) {_        return new ScheduledCancellableAdapter(scheduledFuture)__    };utility,method,to,wrap,a,code,scheduled,future,code,as,a,code,scheduled,cancellable,code,param,scheduled,future,the,scheduled,future,to,wrap,return,a,schedulec,cancellable,delegating,to,the,scheduled,future;static,scheduled,cancellable,wrap,as,scheduled,cancellable,scheduled,future,scheduled,future,return,new,scheduled,cancellable,adapter,scheduled,future
Scheduler -> default Runnable preserveContext(Runnable command);1524684173;Does nothing by default but can be used by subclasses to save the current thread context and wraps the command in a Runnable_that restores that context before running the command.;default Runnable preserveContext(Runnable command) {_        return command__    };does,nothing,by,default,but,can,be,used,by,subclasses,to,save,the,current,thread,context,and,wraps,the,command,in,a,runnable,that,restores,that,context,before,running,the,command;default,runnable,preserve,context,runnable,command,return,command
Scheduler -> default Runnable preserveContext(Runnable command);1547743595;Does nothing by default but can be used by subclasses to save the current thread context and wraps the command in a Runnable_that restores that context before running the command.;default Runnable preserveContext(Runnable command) {_        return command__    };does,nothing,by,default,but,can,be,used,by,subclasses,to,save,the,current,thread,context,and,wraps,the,command,in,a,runnable,that,restores,that,context,before,running,the,command;default,runnable,preserve,context,runnable,command,return,command
Scheduler -> default Runnable preserveContext(Runnable command);1548953505;Does nothing by default but can be used by subclasses to save the current thread context and wraps the command in a Runnable_that restores that context before running the command.;default Runnable preserveContext(Runnable command) {_        return command__    };does,nothing,by,default,but,can,be,used,by,subclasses,to,save,the,current,thread,context,and,wraps,the,command,in,a,runnable,that,restores,that,context,before,running,the,command;default,runnable,preserve,context,runnable,command,return,command
Scheduler -> default Runnable preserveContext(Runnable command);1549399704;Does nothing by default but can be used by subclasses to save the current thread context and wraps the command in a Runnable_that restores that context before running the command.;default Runnable preserveContext(Runnable command) {_        return command__    };does,nothing,by,default,but,can,be,used,by,subclasses,to,save,the,current,thread,context,and,wraps,the,command,in,a,runnable,that,restores,that,context,before,running,the,command;default,runnable,preserve,context,runnable,command,return,command
Scheduler -> static Cancellable wrapAsCancellable(Future<?> future);1548953505;Utility method to wrap a <code>Future</code> as a <code>Cancellable</code>_@param future the future to wrap_@return a cancellable delegating to the future;static Cancellable wrapAsCancellable(Future<?> future) {_        return new CancellableAdapter(future)__    };utility,method,to,wrap,a,code,future,code,as,a,code,cancellable,code,param,future,the,future,to,wrap,return,a,cancellable,delegating,to,the,future;static,cancellable,wrap,as,cancellable,future,future,return,new,cancellable,adapter,future
Scheduler -> static Cancellable wrapAsCancellable(Future<?> future);1549399704;Utility method to wrap a <code>Future</code> as a <code>Cancellable</code>_@param future the future to wrap_@return a cancellable delegating to the future;static Cancellable wrapAsCancellable(Future<?> future) {_        return new CancellableAdapter(future)__    };utility,method,to,wrap,a,code,future,code,as,a,code,cancellable,code,param,future,the,future,to,wrap,return,a,cancellable,delegating,to,the,future;static,cancellable,wrap,as,cancellable,future,future,return,new,cancellable,adapter,future
Scheduler -> ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command)_;1524684173;Schedules a one-shot command to be run after a given delay. The command is not run in the context of the calling thread._To preserve the context of the calling thread you may call {@link #preserveContext(Runnable)} on the runnable before passing_it to this method._The command runs on scheduler thread. Do not run blocking calls on the scheduler thread. Subclasses may allow_to execute on a different executor, in which case blocking calls are allowed.__@param delay delay before the task executes_@param executor the name of the executor that has to execute this task. Ignored in the default implementation but can be used_by subclasses that support multiple executors._@param command the command to run_@return a ScheduledFuture who's get will return when the task has been added to its target thread pool and throws an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture cannot interact with it._@throws EsRejectedExecutionException if the task cannot be scheduled for execution;ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command)_;schedules,a,one,shot,command,to,be,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,link,preserve,context,runnable,on,the,runnable,before,passing,it,to,this,method,the,command,runs,on,scheduler,thread,do,not,run,blocking,calls,on,the,scheduler,thread,subclasses,may,allow,to,execute,on,a,different,executor,in,which,case,blocking,calls,are,allowed,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,executor,that,has,to,execute,this,task,ignored,in,the,default,implementation,but,can,be,used,by,subclasses,that,support,multiple,executors,param,command,the,command,to,run,return,a,scheduled,future,who,s,get,will,return,when,the,task,has,been,added,to,its,target,thread,pool,and,throws,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,cannot,interact,with,it,throws,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;scheduled,future,schedule,time,value,delay,string,executor,runnable,command
Scheduler -> ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command)_;1547743595;Schedules a one-shot command to be run after a given delay. The command is not run in the context of the calling thread._To preserve the context of the calling thread you may call {@link #preserveContext(Runnable)} on the runnable before passing_it to this method._The command runs on scheduler thread. Do not run blocking calls on the scheduler thread. Subclasses may allow_to execute on a different executor, in which case blocking calls are allowed.__@param delay delay before the task executes_@param executor the name of the executor that has to execute this task. Ignored in the default implementation but can be used_by subclasses that support multiple executors._@param command the command to run_@return a ScheduledFuture who's get will return when the task has been added to its target thread pool and throws an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture cannot interact with it._@throws EsRejectedExecutionException if the task cannot be scheduled for execution;ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command)_;schedules,a,one,shot,command,to,be,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,link,preserve,context,runnable,on,the,runnable,before,passing,it,to,this,method,the,command,runs,on,scheduler,thread,do,not,run,blocking,calls,on,the,scheduler,thread,subclasses,may,allow,to,execute,on,a,different,executor,in,which,case,blocking,calls,are,allowed,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,executor,that,has,to,execute,this,task,ignored,in,the,default,implementation,but,can,be,used,by,subclasses,that,support,multiple,executors,param,command,the,command,to,run,return,a,scheduled,future,who,s,get,will,return,when,the,task,has,been,added,to,its,target,thread,pool,and,throws,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,cannot,interact,with,it,throws,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;scheduled,future,schedule,time,value,delay,string,executor,runnable,command
Scheduler -> Cancellable -> boolean isCancelled()_;1524684173;Check if the execution has been cancelled_@return true if cancelled;boolean isCancelled()_;check,if,the,execution,has,been,cancelled,return,true,if,cancelled;boolean,is,cancelled
Scheduler -> Cancellable -> boolean isCancelled()_;1547743595;Check if the execution has been cancelled_@return true if cancelled;boolean isCancelled()_;check,if,the,execution,has,been,cancelled,return,true,if,cancelled;boolean,is,cancelled
Scheduler -> Cancellable -> boolean isCancelled()_;1548953505;Check if the execution has been cancelled_@return true if cancelled;boolean isCancelled()_;check,if,the,execution,has,been,cancelled,return,true,if,cancelled;boolean,is,cancelled
Scheduler -> Cancellable -> boolean isCancelled()_;1549399704;Check if the execution has been cancelled_@return true if cancelled;boolean isCancelled()_;check,if,the,execution,has,been,cancelled,return,true,if,cancelled;boolean,is,cancelled
Scheduler -> ReschedulingRunnable -> ReschedulingRunnable(Runnable runnable, TimeValue interval, String executor, Scheduler scheduler,                              Consumer<Exception> rejectionConsumer, Consumer<Exception> failureConsumer);1524684173;Creates a new rescheduling runnable and schedules the first execution to occur after the interval specified__@param runnable the {@link Runnable} that should be executed periodically_@param interval the time interval between executions_@param executor the executor where this runnable should be scheduled to run_@param scheduler the {@link Scheduler} instance to use for scheduling;ReschedulingRunnable(Runnable runnable, TimeValue interval, String executor, Scheduler scheduler,_                             Consumer<Exception> rejectionConsumer, Consumer<Exception> failureConsumer) {_            this.runnable = runnable__            this.interval = interval__            this.executor = executor__            this.scheduler = scheduler__            this.rejectionConsumer = rejectionConsumer__            this.failureConsumer = failureConsumer__            scheduler.schedule(interval, executor, this)__        };creates,a,new,rescheduling,runnable,and,schedules,the,first,execution,to,occur,after,the,interval,specified,param,runnable,the,link,runnable,that,should,be,executed,periodically,param,interval,the,time,interval,between,executions,param,executor,the,executor,where,this,runnable,should,be,scheduled,to,run,param,scheduler,the,link,scheduler,instance,to,use,for,scheduling;rescheduling,runnable,runnable,runnable,time,value,interval,string,executor,scheduler,scheduler,consumer,exception,rejection,consumer,consumer,exception,failure,consumer,this,runnable,runnable,this,interval,interval,this,executor,executor,this,scheduler,scheduler,this,rejection,consumer,rejection,consumer,this,failure,consumer,failure,consumer,scheduler,schedule,interval,executor,this
Scheduler -> ReschedulingRunnable -> ReschedulingRunnable(Runnable runnable, TimeValue interval, String executor, Scheduler scheduler,                              Consumer<Exception> rejectionConsumer, Consumer<Exception> failureConsumer);1547743595;Creates a new rescheduling runnable and schedules the first execution to occur after the interval specified__@param runnable the {@link Runnable} that should be executed periodically_@param interval the time interval between executions_@param executor the executor where this runnable should be scheduled to run_@param scheduler the {@link Scheduler} instance to use for scheduling;ReschedulingRunnable(Runnable runnable, TimeValue interval, String executor, Scheduler scheduler,_                             Consumer<Exception> rejectionConsumer, Consumer<Exception> failureConsumer) {_            this.runnable = runnable__            this.interval = interval__            this.executor = executor__            this.scheduler = scheduler__            this.rejectionConsumer = rejectionConsumer__            this.failureConsumer = failureConsumer__            scheduler.schedule(interval, executor, this)__        };creates,a,new,rescheduling,runnable,and,schedules,the,first,execution,to,occur,after,the,interval,specified,param,runnable,the,link,runnable,that,should,be,executed,periodically,param,interval,the,time,interval,between,executions,param,executor,the,executor,where,this,runnable,should,be,scheduled,to,run,param,scheduler,the,link,scheduler,instance,to,use,for,scheduling;rescheduling,runnable,runnable,runnable,time,value,interval,string,executor,scheduler,scheduler,consumer,exception,rejection,consumer,consumer,exception,failure,consumer,this,runnable,runnable,this,interval,interval,this,executor,executor,this,scheduler,scheduler,this,rejection,consumer,rejection,consumer,this,failure,consumer,failure,consumer,scheduler,schedule,interval,executor,this
Scheduler -> ReschedulingRunnable -> ReschedulingRunnable(Runnable runnable, TimeValue interval, String executor, Scheduler scheduler,                              Consumer<Exception> rejectionConsumer, Consumer<Exception> failureConsumer);1548953505;Creates a new rescheduling runnable and schedules the first execution to occur after the interval specified__@param runnable the {@link Runnable} that should be executed periodically_@param interval the time interval between executions_@param executor the executor where this runnable should be scheduled to run_@param scheduler the {@link Scheduler} instance to use for scheduling;ReschedulingRunnable(Runnable runnable, TimeValue interval, String executor, Scheduler scheduler,_                             Consumer<Exception> rejectionConsumer, Consumer<Exception> failureConsumer) {_            this.runnable = runnable__            this.interval = interval__            this.executor = executor__            this.scheduler = scheduler__            this.rejectionConsumer = rejectionConsumer__            this.failureConsumer = failureConsumer__            scheduler.schedule(this, interval, executor)__        };creates,a,new,rescheduling,runnable,and,schedules,the,first,execution,to,occur,after,the,interval,specified,param,runnable,the,link,runnable,that,should,be,executed,periodically,param,interval,the,time,interval,between,executions,param,executor,the,executor,where,this,runnable,should,be,scheduled,to,run,param,scheduler,the,link,scheduler,instance,to,use,for,scheduling;rescheduling,runnable,runnable,runnable,time,value,interval,string,executor,scheduler,scheduler,consumer,exception,rejection,consumer,consumer,exception,failure,consumer,this,runnable,runnable,this,interval,interval,this,executor,executor,this,scheduler,scheduler,this,rejection,consumer,rejection,consumer,this,failure,consumer,failure,consumer,scheduler,schedule,this,interval,executor
Scheduler -> ReschedulingRunnable -> ReschedulingRunnable(Runnable runnable, TimeValue interval, String executor, Scheduler scheduler,                              Consumer<Exception> rejectionConsumer, Consumer<Exception> failureConsumer);1549399704;Creates a new rescheduling runnable and schedules the first execution to occur after the interval specified__@param runnable the {@link Runnable} that should be executed periodically_@param interval the time interval between executions_@param executor the executor where this runnable should be scheduled to run_@param scheduler the {@link Scheduler} instance to use for scheduling;ReschedulingRunnable(Runnable runnable, TimeValue interval, String executor, Scheduler scheduler,_                             Consumer<Exception> rejectionConsumer, Consumer<Exception> failureConsumer) {_            this.runnable = runnable__            this.interval = interval__            this.executor = executor__            this.scheduler = scheduler__            this.rejectionConsumer = rejectionConsumer__            this.failureConsumer = failureConsumer__            scheduler.schedule(this, interval, executor)__        };creates,a,new,rescheduling,runnable,and,schedules,the,first,execution,to,occur,after,the,interval,specified,param,runnable,the,link,runnable,that,should,be,executed,periodically,param,interval,the,time,interval,between,executions,param,executor,the,executor,where,this,runnable,should,be,scheduled,to,run,param,scheduler,the,link,scheduler,instance,to,use,for,scheduling;rescheduling,runnable,runnable,runnable,time,value,interval,string,executor,scheduler,scheduler,consumer,exception,rejection,consumer,consumer,exception,failure,consumer,this,runnable,runnable,this,interval,interval,this,executor,executor,this,scheduler,scheduler,this,rejection,consumer,rejection,consumer,this,failure,consumer,failure,consumer,scheduler,schedule,this,interval,executor
Scheduler -> static ScheduledThreadPoolExecutor initScheduler(Settings settings);1548953505;Create a scheduler that can be used client side. Server side, please use <code>ThreadPool.schedule</code> instead.__Notice that if any scheduled jobs fail with an exception, they will be logged as a warning. This includes jobs started_using execute, submit and schedule._@param settings the settings to use_@return executor;static ScheduledThreadPoolExecutor initScheduler(Settings settings) {_        final ScheduledThreadPoolExecutor scheduler = new SafeScheduledThreadPoolExecutor(1,_                EsExecutors.daemonThreadFactory(settings, "scheduler"), new EsAbortPolicy())__        scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false)__        scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false)__        scheduler.setRemoveOnCancelPolicy(true)__        return scheduler__    };create,a,scheduler,that,can,be,used,client,side,server,side,please,use,code,thread,pool,schedule,code,instead,notice,that,if,any,scheduled,jobs,fail,with,an,exception,they,will,be,logged,as,a,warning,this,includes,jobs,started,using,execute,submit,and,schedule,param,settings,the,settings,to,use,return,executor;static,scheduled,thread,pool,executor,init,scheduler,settings,settings,final,scheduled,thread,pool,executor,scheduler,new,safe,scheduled,thread,pool,executor,1,es,executors,daemon,thread,factory,settings,scheduler,new,es,abort,policy,scheduler,set,execute,existing,delayed,tasks,after,shutdown,policy,false,scheduler,set,continue,existing,periodic,tasks,after,shutdown,policy,false,scheduler,set,remove,on,cancel,policy,true,return,scheduler
Scheduler -> static ScheduledThreadPoolExecutor initScheduler(Settings settings);1549399704;Create a scheduler that can be used client side. Server side, please use <code>ThreadPool.schedule</code> instead.__Notice that if any scheduled jobs fail with an exception, these will bubble up to the uncaught exception handler where they will_be logged as a warning. This includes jobs started using execute, submit and schedule._@param settings the settings to use_@return executor;static ScheduledThreadPoolExecutor initScheduler(Settings settings) {_        final ScheduledThreadPoolExecutor scheduler = new SafeScheduledThreadPoolExecutor(1,_                EsExecutors.daemonThreadFactory(settings, "scheduler"), new EsAbortPolicy())__        scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false)__        scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false)__        scheduler.setRemoveOnCancelPolicy(true)__        return scheduler__    };create,a,scheduler,that,can,be,used,client,side,server,side,please,use,code,thread,pool,schedule,code,instead,notice,that,if,any,scheduled,jobs,fail,with,an,exception,these,will,bubble,up,to,the,uncaught,exception,handler,where,they,will,be,logged,as,a,warning,this,includes,jobs,started,using,execute,submit,and,schedule,param,settings,the,settings,to,use,return,executor;static,scheduled,thread,pool,executor,init,scheduler,settings,settings,final,scheduled,thread,pool,executor,scheduler,new,safe,scheduled,thread,pool,executor,1,es,executors,daemon,thread,factory,settings,scheduler,new,es,abort,policy,scheduler,set,execute,existing,delayed,tasks,after,shutdown,policy,false,scheduler,set,continue,existing,periodic,tasks,after,shutdown,policy,false,scheduler,set,remove,on,cancel,policy,true,return,scheduler
Scheduler -> ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor)_;1548953505;Schedules a one-shot command to be run after a given delay. The command is not run in the context of the calling thread._To preserve the context of the calling thread you may call {@link #preserveContext(Runnable)} on the runnable before passing_it to this method._The command runs on scheduler thread. Do not run blocking calls on the scheduler thread. Subclasses may allow_to execute on a different executor, in which case blocking calls are allowed.__@param command the command to run_@param delay delay before the task executes_@param executor the name of the executor that has to execute this task. Ignored in the default implementation but can be used_by subclasses that support multiple executors._@return a ScheduledFuture who's get will return when the task has been added to its target thread pool and throws an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture cannot interact with it._@throws EsRejectedExecutionException if the task cannot be scheduled for execution;ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor)_;schedules,a,one,shot,command,to,be,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,link,preserve,context,runnable,on,the,runnable,before,passing,it,to,this,method,the,command,runs,on,scheduler,thread,do,not,run,blocking,calls,on,the,scheduler,thread,subclasses,may,allow,to,execute,on,a,different,executor,in,which,case,blocking,calls,are,allowed,param,command,the,command,to,run,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,executor,that,has,to,execute,this,task,ignored,in,the,default,implementation,but,can,be,used,by,subclasses,that,support,multiple,executors,return,a,scheduled,future,who,s,get,will,return,when,the,task,has,been,added,to,its,target,thread,pool,and,throws,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,cannot,interact,with,it,throws,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;scheduled,cancellable,schedule,runnable,command,time,value,delay,string,executor
Scheduler -> ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor)_;1549399704;Schedules a one-shot command to be run after a given delay. The command is not run in the context of the calling thread._To preserve the context of the calling thread you may call {@link #preserveContext(Runnable)} on the runnable before passing_it to this method._The command runs on scheduler thread. Do not run blocking calls on the scheduler thread. Subclasses may allow_to execute on a different executor, in which case blocking calls are allowed.__@param command the command to run_@param delay delay before the task executes_@param executor the name of the executor that has to execute this task. Ignored in the default implementation but can be used_by subclasses that support multiple executors._@return a ScheduledFuture who's get will return when the task has been added to its target thread pool and throws an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture cannot interact with it._@throws EsRejectedExecutionException if the task cannot be scheduled for execution;ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor)_;schedules,a,one,shot,command,to,be,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,link,preserve,context,runnable,on,the,runnable,before,passing,it,to,this,method,the,command,runs,on,scheduler,thread,do,not,run,blocking,calls,on,the,scheduler,thread,subclasses,may,allow,to,execute,on,a,different,executor,in,which,case,blocking,calls,are,allowed,param,command,the,command,to,run,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,executor,that,has,to,execute,this,task,ignored,in,the,default,implementation,but,can,be,used,by,subclasses,that,support,multiple,executors,return,a,scheduled,future,who,s,get,will,return,when,the,task,has,been,added,to,its,target,thread,pool,and,throws,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,cannot,interact,with,it,throws,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;scheduled,cancellable,schedule,runnable,command,time,value,delay,string,executor
Scheduler -> default Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor);1524684173;Schedules a periodic action that runs on scheduler thread. Do not run blocking calls on the scheduler thread. Subclasses may allow_to execute on a different executor, in which case blocking calls are allowed.__@param command the action to take_@param interval the delay interval_@param executor the name of the executor that has to execute this task. Ignored in the default implementation but can be used_by subclasses that support multiple executors._@return a {@link Cancellable} that can be used to cancel the subsequent runs of the command. If the command is running, it will_not be interrupted.;default Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {_        return new ReschedulingRunnable(command, interval, executor, this, (e) -> {}, (e) -> {})__    };schedules,a,periodic,action,that,runs,on,scheduler,thread,do,not,run,blocking,calls,on,the,scheduler,thread,subclasses,may,allow,to,execute,on,a,different,executor,in,which,case,blocking,calls,are,allowed,param,command,the,action,to,take,param,interval,the,delay,interval,param,executor,the,name,of,the,executor,that,has,to,execute,this,task,ignored,in,the,default,implementation,but,can,be,used,by,subclasses,that,support,multiple,executors,return,a,link,cancellable,that,can,be,used,to,cancel,the,subsequent,runs,of,the,command,if,the,command,is,running,it,will,not,be,interrupted;default,cancellable,schedule,with,fixed,delay,runnable,command,time,value,interval,string,executor,return,new,rescheduling,runnable,command,interval,executor,this,e,e
Scheduler -> default Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor);1547743595;Schedules a periodic action that runs on scheduler thread. Do not run blocking calls on the scheduler thread. Subclasses may allow_to execute on a different executor, in which case blocking calls are allowed.__@param command the action to take_@param interval the delay interval_@param executor the name of the executor that has to execute this task. Ignored in the default implementation but can be used_by subclasses that support multiple executors._@return a {@link Cancellable} that can be used to cancel the subsequent runs of the command. If the command is running, it will_not be interrupted.;default Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {_        return new ReschedulingRunnable(command, interval, executor, this, (e) -> {}, (e) -> {})__    };schedules,a,periodic,action,that,runs,on,scheduler,thread,do,not,run,blocking,calls,on,the,scheduler,thread,subclasses,may,allow,to,execute,on,a,different,executor,in,which,case,blocking,calls,are,allowed,param,command,the,action,to,take,param,interval,the,delay,interval,param,executor,the,name,of,the,executor,that,has,to,execute,this,task,ignored,in,the,default,implementation,but,can,be,used,by,subclasses,that,support,multiple,executors,return,a,link,cancellable,that,can,be,used,to,cancel,the,subsequent,runs,of,the,command,if,the,command,is,running,it,will,not,be,interrupted;default,cancellable,schedule,with,fixed,delay,runnable,command,time,value,interval,string,executor,return,new,rescheduling,runnable,command,interval,executor,this,e,e
Scheduler -> default Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor);1548953505;Schedules a periodic action that runs on scheduler thread. Do not run blocking calls on the scheduler thread. Subclasses may allow_to execute on a different executor, in which case blocking calls are allowed.__@param command the action to take_@param interval the delay interval_@param executor the name of the executor that has to execute this task. Ignored in the default implementation but can be used_by subclasses that support multiple executors._@return a {@link Cancellable} that can be used to cancel the subsequent runs of the command. If the command is running, it will_not be interrupted.;default Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {_        return new ReschedulingRunnable(command, interval, executor, this, (e) -> {}, (e) -> {})__    };schedules,a,periodic,action,that,runs,on,scheduler,thread,do,not,run,blocking,calls,on,the,scheduler,thread,subclasses,may,allow,to,execute,on,a,different,executor,in,which,case,blocking,calls,are,allowed,param,command,the,action,to,take,param,interval,the,delay,interval,param,executor,the,name,of,the,executor,that,has,to,execute,this,task,ignored,in,the,default,implementation,but,can,be,used,by,subclasses,that,support,multiple,executors,return,a,link,cancellable,that,can,be,used,to,cancel,the,subsequent,runs,of,the,command,if,the,command,is,running,it,will,not,be,interrupted;default,cancellable,schedule,with,fixed,delay,runnable,command,time,value,interval,string,executor,return,new,rescheduling,runnable,command,interval,executor,this,e,e
Scheduler -> default Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor);1549399704;Schedules a periodic action that runs on scheduler thread. Do not run blocking calls on the scheduler thread. Subclasses may allow_to execute on a different executor, in which case blocking calls are allowed.__@param command the action to take_@param interval the delay interval_@param executor the name of the executor that has to execute this task. Ignored in the default implementation but can be used_by subclasses that support multiple executors._@return a {@link Cancellable} that can be used to cancel the subsequent runs of the command. If the command is running, it will_not be interrupted.;default Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {_        return new ReschedulingRunnable(command, interval, executor, this, (e) -> {}, (e) -> {})__    };schedules,a,periodic,action,that,runs,on,scheduler,thread,do,not,run,blocking,calls,on,the,scheduler,thread,subclasses,may,allow,to,execute,on,a,different,executor,in,which,case,blocking,calls,are,allowed,param,command,the,action,to,take,param,interval,the,delay,interval,param,executor,the,name,of,the,executor,that,has,to,execute,this,task,ignored,in,the,default,implementation,but,can,be,used,by,subclasses,that,support,multiple,executors,return,a,link,cancellable,that,can,be,used,to,cancel,the,subsequent,runs,of,the,command,if,the,command,is,running,it,will,not,be,interrupted;default,cancellable,schedule,with,fixed,delay,runnable,command,time,value,interval,string,executor,return,new,rescheduling,runnable,command,interval,executor,this,e,e
