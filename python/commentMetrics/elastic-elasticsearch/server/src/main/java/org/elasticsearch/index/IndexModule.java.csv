# id;timestamp;commentText;codeText;commentWords;codeWords
IndexModule -> public void addIndexOperationListener(IndexingOperationListener listener);1524684173;Adds an {@link IndexingOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexOperationListener(IndexingOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexOperationListeners.add(listener)__    };adds,an,link,indexing,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,operation,listener,indexing,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,operation,listeners,add,listener
IndexModule -> public void addIndexOperationListener(IndexingOperationListener listener);1525334055;Adds an {@link IndexingOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexOperationListener(IndexingOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexOperationListeners.add(listener)__    };adds,an,link,indexing,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,operation,listener,indexing,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,operation,listeners,add,listener
IndexModule -> public void addIndexOperationListener(IndexingOperationListener listener);1528706846;Adds an {@link IndexingOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexOperationListener(IndexingOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexOperationListeners.add(listener)__    };adds,an,link,indexing,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,operation,listener,indexing,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,operation,listeners,add,listener
IndexModule -> public void addIndexOperationListener(IndexingOperationListener listener);1532685069;Adds an {@link IndexingOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexOperationListener(IndexingOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexOperationListeners.add(listener)__    };adds,an,link,indexing,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,operation,listener,indexing,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,operation,listeners,add,listener
IndexModule -> public void addIndexOperationListener(IndexingOperationListener listener);1535046779;Adds an {@link IndexingOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexOperationListener(IndexingOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexOperationListeners.add(listener)__    };adds,an,link,indexing,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,operation,listener,indexing,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,operation,listeners,add,listener
IndexModule -> public void addIndexOperationListener(IndexingOperationListener listener);1546420232;Adds an {@link IndexingOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexOperationListener(IndexingOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexOperationListeners.add(listener)__    };adds,an,link,indexing,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,operation,listener,indexing,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,operation,listeners,add,listener
IndexModule -> public void addIndexOperationListener(IndexingOperationListener listener);1546495834;Adds an {@link IndexingOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexOperationListener(IndexingOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexOperationListeners.add(listener)__    };adds,an,link,indexing,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,operation,listener,indexing,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,operation,listeners,add,listener
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator);1524684173;Adds a Setting, it's consumer and validator for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer, validator)__    };adds,a,setting,it,s,consumer,and,validator,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,consumer,t,validator,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer,validator
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator);1525334055;Adds a Setting, it's consumer and validator for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer, validator)__    };adds,a,setting,it,s,consumer,and,validator,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,consumer,t,validator,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer,validator
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator);1528706846;Adds a Setting, it's consumer and validator for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer, validator)__    };adds,a,setting,it,s,consumer,and,validator,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,consumer,t,validator,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer,validator
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator);1532685069;Adds a Setting, it's consumer and validator for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer, validator)__    };adds,a,setting,it,s,consumer,and,validator,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,consumer,t,validator,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer,validator
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator);1535046779;Adds a Setting, it's consumer and validator for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer, validator)__    };adds,a,setting,it,s,consumer,and,validator,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,consumer,t,validator,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer,validator
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator);1546420232;Adds a Setting, it's consumer and validator for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer, validator)__    };adds,a,setting,it,s,consumer,and,validator,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,consumer,t,validator,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer,validator
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator);1546495834;Adds a Setting, it's consumer and validator for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer, Consumer<T> validator) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer, validator)__    };adds,a,setting,it,s,consumer,and,validator,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,consumer,t,validator,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer,validator
IndexModule -> IndexSearcherWrapperFactory -> IndexSearcherWrapper newWrapper(IndexService indexService)_;1524684173;Returns a new IndexSearcherWrapper. This method is called once per index per node;IndexSearcherWrapper newWrapper(IndexService indexService)_;returns,a,new,index,searcher,wrapper,this,method,is,called,once,per,index,per,node;index,searcher,wrapper,new,wrapper,index,service,index,service
IndexModule -> IndexSearcherWrapperFactory -> IndexSearcherWrapper newWrapper(IndexService indexService)_;1525334055;Returns a new IndexSearcherWrapper. This method is called once per index per node;IndexSearcherWrapper newWrapper(IndexService indexService)_;returns,a,new,index,searcher,wrapper,this,method,is,called,once,per,index,per,node;index,searcher,wrapper,new,wrapper,index,service,index,service
IndexModule -> IndexSearcherWrapperFactory -> IndexSearcherWrapper newWrapper(IndexService indexService)_;1528706846;Returns a new IndexSearcherWrapper. This method is called once per index per node;IndexSearcherWrapper newWrapper(IndexService indexService)_;returns,a,new,index,searcher,wrapper,this,method,is,called,once,per,index,per,node;index,searcher,wrapper,new,wrapper,index,service,index,service
IndexModule -> IndexSearcherWrapperFactory -> IndexSearcherWrapper newWrapper(IndexService indexService)_;1532685069;Returns a new IndexSearcherWrapper. This method is called once per index per node;IndexSearcherWrapper newWrapper(IndexService indexService)_;returns,a,new,index,searcher,wrapper,this,method,is,called,once,per,index,per,node;index,searcher,wrapper,new,wrapper,index,service,index,service
IndexModule -> IndexSearcherWrapperFactory -> IndexSearcherWrapper newWrapper(IndexService indexService)_;1535046779;Returns a new IndexSearcherWrapper. This method is called once per index per node;IndexSearcherWrapper newWrapper(IndexService indexService)_;returns,a,new,index,searcher,wrapper,this,method,is,called,once,per,index,per,node;index,searcher,wrapper,new,wrapper,index,service,index,service
IndexModule -> IndexSearcherWrapperFactory -> IndexSearcherWrapper newWrapper(IndexService indexService)_;1546420232;Returns a new IndexSearcherWrapper. This method is called once per index per node;IndexSearcherWrapper newWrapper(IndexService indexService)_;returns,a,new,index,searcher,wrapper,this,method,is,called,once,per,index,per,node;index,searcher,wrapper,new,wrapper,index,service,index,service
IndexModule -> IndexSearcherWrapperFactory -> IndexSearcherWrapper newWrapper(IndexService indexService)_;1546495834;Returns a new IndexSearcherWrapper. This method is called once per index per node;IndexSearcherWrapper newWrapper(IndexService indexService)_;returns,a,new,index,searcher,wrapper,this,method,is,called,once,per,index,per,node;index,searcher,wrapper,new,wrapper,index,service,index,service
IndexModule -> EngineFactory getEngineFactory();1528706846;The engine factory provided during construction of this index module.__@return the engine factory;EngineFactory getEngineFactory() {_        return engineFactory__    };the,engine,factory,provided,during,construction,of,this,index,module,return,the,engine,factory;engine,factory,get,engine,factory,return,engine,factory
IndexModule -> EngineFactory getEngineFactory();1532685069;The engine factory provided during construction of this index module.__@return the engine factory;EngineFactory getEngineFactory() {_        return engineFactory__    };the,engine,factory,provided,during,construction,of,this,index,module,return,the,engine,factory;engine,factory,get,engine,factory,return,engine,factory
IndexModule -> EngineFactory getEngineFactory();1535046779;The engine factory provided during construction of this index module.__@return the engine factory;EngineFactory getEngineFactory() {_        return engineFactory__    };the,engine,factory,provided,during,construction,of,this,index,module,return,the,engine,factory;engine,factory,get,engine,factory,return,engine,factory
IndexModule -> EngineFactory getEngineFactory();1546420232;The engine factory provided during construction of this index module.__@return the engine factory;EngineFactory getEngineFactory() {_        return engineFactory__    };the,engine,factory,provided,during,construction,of,this,index,module,return,the,engine,factory;engine,factory,get,engine,factory,return,engine,factory
IndexModule -> EngineFactory getEngineFactory();1546495834;The engine factory provided during construction of this index module.__@return the engine factory;EngineFactory getEngineFactory() {_        return engineFactory__    };the,engine,factory,provided,during,construction,of,this,index,module,return,the,engine,factory;engine,factory,get,engine,factory,return,engine,factory
IndexModule -> public Index getIndex();1524684173;Returns the index this module is associated with;public Index getIndex() {_        return indexSettings.getIndex()__    };returns,the,index,this,module,is,associated,with;public,index,get,index,return,index,settings,get,index
IndexModule -> public Index getIndex();1525334055;Returns the index this module is associated with;public Index getIndex() {_        return indexSettings.getIndex()__    };returns,the,index,this,module,is,associated,with;public,index,get,index,return,index,settings,get,index
IndexModule -> public Index getIndex();1528706846;Returns the index this module is associated with;public Index getIndex() {_        return indexSettings.getIndex()__    };returns,the,index,this,module,is,associated,with;public,index,get,index,return,index,settings,get,index
IndexModule -> public Index getIndex();1532685069;Returns the index this module is associated with;public Index getIndex() {_        return indexSettings.getIndex()__    };returns,the,index,this,module,is,associated,with;public,index,get,index,return,index,settings,get,index
IndexModule -> public Index getIndex();1535046779;Returns the index this module is associated with;public Index getIndex() {_        return indexSettings.getIndex()__    };returns,the,index,this,module,is,associated,with;public,index,get,index,return,index,settings,get,index
IndexModule -> public Index getIndex();1546420232;Returns the index this module is associated with;public Index getIndex() {_        return indexSettings.getIndex()__    };returns,the,index,this,module,is,associated,with;public,index,get,index,return,index,settings,get,index
IndexModule -> public Index getIndex();1546495834;Returns the index this module is associated with;public Index getIndex() {_        return indexSettings.getIndex()__    };returns,the,index,this,module,is,associated,with;public,index,get,index,return,index,settings,get,index
IndexModule -> public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory);1524684173;Sets a {@link org.elasticsearch.index.IndexModule.IndexSearcherWrapperFactory} that is called once the IndexService_is fully constructed._Note: this method can only be called once per index. Multiple wrappers are not supported.;public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory) {_        ensureNotFrozen()__        this.indexSearcherWrapper.set(indexSearcherWrapperFactory)__    };sets,a,link,org,elasticsearch,index,index,module,index,searcher,wrapper,factory,that,is,called,once,the,index,service,is,fully,constructed,note,this,method,can,only,be,called,once,per,index,multiple,wrappers,are,not,supported;public,void,set,searcher,wrapper,index,searcher,wrapper,factory,index,searcher,wrapper,factory,ensure,not,frozen,this,index,searcher,wrapper,set,index,searcher,wrapper,factory
IndexModule -> public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory);1525334055;Sets a {@link org.elasticsearch.index.IndexModule.IndexSearcherWrapperFactory} that is called once the IndexService_is fully constructed._Note: this method can only be called once per index. Multiple wrappers are not supported.;public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory) {_        ensureNotFrozen()__        this.indexSearcherWrapper.set(indexSearcherWrapperFactory)__    };sets,a,link,org,elasticsearch,index,index,module,index,searcher,wrapper,factory,that,is,called,once,the,index,service,is,fully,constructed,note,this,method,can,only,be,called,once,per,index,multiple,wrappers,are,not,supported;public,void,set,searcher,wrapper,index,searcher,wrapper,factory,index,searcher,wrapper,factory,ensure,not,frozen,this,index,searcher,wrapper,set,index,searcher,wrapper,factory
IndexModule -> public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory);1528706846;Sets a {@link org.elasticsearch.index.IndexModule.IndexSearcherWrapperFactory} that is called once the IndexService_is fully constructed._Note: this method can only be called once per index. Multiple wrappers are not supported.;public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory) {_        ensureNotFrozen()__        this.indexSearcherWrapper.set(indexSearcherWrapperFactory)__    };sets,a,link,org,elasticsearch,index,index,module,index,searcher,wrapper,factory,that,is,called,once,the,index,service,is,fully,constructed,note,this,method,can,only,be,called,once,per,index,multiple,wrappers,are,not,supported;public,void,set,searcher,wrapper,index,searcher,wrapper,factory,index,searcher,wrapper,factory,ensure,not,frozen,this,index,searcher,wrapper,set,index,searcher,wrapper,factory
IndexModule -> public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory);1532685069;Sets a {@link org.elasticsearch.index.IndexModule.IndexSearcherWrapperFactory} that is called once the IndexService_is fully constructed._Note: this method can only be called once per index. Multiple wrappers are not supported.;public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory) {_        ensureNotFrozen()__        this.indexSearcherWrapper.set(indexSearcherWrapperFactory)__    };sets,a,link,org,elasticsearch,index,index,module,index,searcher,wrapper,factory,that,is,called,once,the,index,service,is,fully,constructed,note,this,method,can,only,be,called,once,per,index,multiple,wrappers,are,not,supported;public,void,set,searcher,wrapper,index,searcher,wrapper,factory,index,searcher,wrapper,factory,ensure,not,frozen,this,index,searcher,wrapper,set,index,searcher,wrapper,factory
IndexModule -> public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory);1535046779;Sets a {@link org.elasticsearch.index.IndexModule.IndexSearcherWrapperFactory} that is called once the IndexService_is fully constructed._Note: this method can only be called once per index. Multiple wrappers are not supported.;public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory) {_        ensureNotFrozen()__        this.indexSearcherWrapper.set(indexSearcherWrapperFactory)__    };sets,a,link,org,elasticsearch,index,index,module,index,searcher,wrapper,factory,that,is,called,once,the,index,service,is,fully,constructed,note,this,method,can,only,be,called,once,per,index,multiple,wrappers,are,not,supported;public,void,set,searcher,wrapper,index,searcher,wrapper,factory,index,searcher,wrapper,factory,ensure,not,frozen,this,index,searcher,wrapper,set,index,searcher,wrapper,factory
IndexModule -> public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory);1546420232;Sets a {@link org.elasticsearch.index.IndexModule.IndexSearcherWrapperFactory} that is called once the IndexService_is fully constructed._Note: this method can only be called once per index. Multiple wrappers are not supported.;public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory) {_        ensureNotFrozen()__        this.indexSearcherWrapper.set(indexSearcherWrapperFactory)__    };sets,a,link,org,elasticsearch,index,index,module,index,searcher,wrapper,factory,that,is,called,once,the,index,service,is,fully,constructed,note,this,method,can,only,be,called,once,per,index,multiple,wrappers,are,not,supported;public,void,set,searcher,wrapper,index,searcher,wrapper,factory,index,searcher,wrapper,factory,ensure,not,frozen,this,index,searcher,wrapper,set,index,searcher,wrapper,factory
IndexModule -> public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory);1546495834;Sets a {@link org.elasticsearch.index.IndexModule.IndexSearcherWrapperFactory} that is called once the IndexService_is fully constructed._Note: this method can only be called once per index. Multiple wrappers are not supported.;public void setSearcherWrapper(IndexSearcherWrapperFactory indexSearcherWrapperFactory) {_        ensureNotFrozen()__        this.indexSearcherWrapper.set(indexSearcherWrapperFactory)__    };sets,a,link,org,elasticsearch,index,index,module,index,searcher,wrapper,factory,that,is,called,once,the,index,service,is,fully,constructed,note,this,method,can,only,be,called,once,per,index,multiple,wrappers,are,not,supported;public,void,set,searcher,wrapper,index,searcher,wrapper,factory,index,searcher,wrapper,factory,ensure,not,frozen,this,index,searcher,wrapper,set,index,searcher,wrapper,factory
IndexModule -> public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity);1524684173;Registers the given {@link Similarity} with the given name._The function takes as parameters:<ul>_<li>settings for this similarity_<li>version of Elasticsearch when the index was created_<li>ScriptService, for script-based similarities_</ul>__@param name Name of the SimilarityProvider_@param similarity SimilarityProvider to register;public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity) {_        ensureNotFrozen()__        if (similarities.containsKey(name) || SimilarityService.BUILT_IN.containsKey(name)) {_            throw new IllegalArgumentException("similarity for name: [" + name + " is already registered")__        }_        similarities.put(name, similarity)__    };registers,the,given,link,similarity,with,the,given,name,the,function,takes,as,parameters,ul,li,settings,for,this,similarity,li,version,of,elasticsearch,when,the,index,was,created,li,script,service,for,script,based,similarities,ul,param,name,name,of,the,similarity,provider,param,similarity,similarity,provider,to,register;public,void,add,similarity,string,name,tri,function,settings,version,script,service,similarity,similarity,ensure,not,frozen,if,similarities,contains,key,name,similarity,service,contains,key,name,throw,new,illegal,argument,exception,similarity,for,name,name,is,already,registered,similarities,put,name,similarity
IndexModule -> public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity);1525334055;Registers the given {@link Similarity} with the given name._The function takes as parameters:<ul>_<li>settings for this similarity_<li>version of Elasticsearch when the index was created_<li>ScriptService, for script-based similarities_</ul>__@param name Name of the SimilarityProvider_@param similarity SimilarityProvider to register;public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity) {_        ensureNotFrozen()__        if (similarities.containsKey(name) || SimilarityService.BUILT_IN.containsKey(name)) {_            throw new IllegalArgumentException("similarity for name: [" + name + " is already registered")__        }_        similarities.put(name, similarity)__    };registers,the,given,link,similarity,with,the,given,name,the,function,takes,as,parameters,ul,li,settings,for,this,similarity,li,version,of,elasticsearch,when,the,index,was,created,li,script,service,for,script,based,similarities,ul,param,name,name,of,the,similarity,provider,param,similarity,similarity,provider,to,register;public,void,add,similarity,string,name,tri,function,settings,version,script,service,similarity,similarity,ensure,not,frozen,if,similarities,contains,key,name,similarity,service,contains,key,name,throw,new,illegal,argument,exception,similarity,for,name,name,is,already,registered,similarities,put,name,similarity
IndexModule -> public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity);1528706846;Registers the given {@link Similarity} with the given name._The function takes as parameters:<ul>_<li>settings for this similarity_<li>version of Elasticsearch when the index was created_<li>ScriptService, for script-based similarities_</ul>__@param name Name of the SimilarityProvider_@param similarity SimilarityProvider to register;public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity) {_        ensureNotFrozen()__        if (similarities.containsKey(name) || SimilarityService.BUILT_IN.containsKey(name)) {_            throw new IllegalArgumentException("similarity for name: [" + name + " is already registered")__        }_        similarities.put(name, similarity)__    };registers,the,given,link,similarity,with,the,given,name,the,function,takes,as,parameters,ul,li,settings,for,this,similarity,li,version,of,elasticsearch,when,the,index,was,created,li,script,service,for,script,based,similarities,ul,param,name,name,of,the,similarity,provider,param,similarity,similarity,provider,to,register;public,void,add,similarity,string,name,tri,function,settings,version,script,service,similarity,similarity,ensure,not,frozen,if,similarities,contains,key,name,similarity,service,contains,key,name,throw,new,illegal,argument,exception,similarity,for,name,name,is,already,registered,similarities,put,name,similarity
IndexModule -> public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity);1532685069;Registers the given {@link Similarity} with the given name._The function takes as parameters:<ul>_<li>settings for this similarity_<li>version of Elasticsearch when the index was created_<li>ScriptService, for script-based similarities_</ul>__@param name Name of the SimilarityProvider_@param similarity SimilarityProvider to register;public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity) {_        ensureNotFrozen()__        if (similarities.containsKey(name) || SimilarityService.BUILT_IN.containsKey(name)) {_            throw new IllegalArgumentException("similarity for name: [" + name + " is already registered")__        }_        similarities.put(name, similarity)__    };registers,the,given,link,similarity,with,the,given,name,the,function,takes,as,parameters,ul,li,settings,for,this,similarity,li,version,of,elasticsearch,when,the,index,was,created,li,script,service,for,script,based,similarities,ul,param,name,name,of,the,similarity,provider,param,similarity,similarity,provider,to,register;public,void,add,similarity,string,name,tri,function,settings,version,script,service,similarity,similarity,ensure,not,frozen,if,similarities,contains,key,name,similarity,service,contains,key,name,throw,new,illegal,argument,exception,similarity,for,name,name,is,already,registered,similarities,put,name,similarity
IndexModule -> public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity);1535046779;Registers the given {@link Similarity} with the given name._The function takes as parameters:<ul>_<li>settings for this similarity_<li>version of Elasticsearch when the index was created_<li>ScriptService, for script-based similarities_</ul>__@param name Name of the SimilarityProvider_@param similarity SimilarityProvider to register;public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity) {_        ensureNotFrozen()__        if (similarities.containsKey(name) || SimilarityService.BUILT_IN.containsKey(name)) {_            throw new IllegalArgumentException("similarity for name: [" + name + " is already registered")__        }_        similarities.put(name, similarity)__    };registers,the,given,link,similarity,with,the,given,name,the,function,takes,as,parameters,ul,li,settings,for,this,similarity,li,version,of,elasticsearch,when,the,index,was,created,li,script,service,for,script,based,similarities,ul,param,name,name,of,the,similarity,provider,param,similarity,similarity,provider,to,register;public,void,add,similarity,string,name,tri,function,settings,version,script,service,similarity,similarity,ensure,not,frozen,if,similarities,contains,key,name,similarity,service,contains,key,name,throw,new,illegal,argument,exception,similarity,for,name,name,is,already,registered,similarities,put,name,similarity
IndexModule -> public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity);1546420232;Registers the given {@link Similarity} with the given name._The function takes as parameters:<ul>_<li>settings for this similarity_<li>version of Elasticsearch when the index was created_<li>ScriptService, for script-based similarities_</ul>__@param name Name of the SimilarityProvider_@param similarity SimilarityProvider to register;public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity) {_        ensureNotFrozen()__        if (similarities.containsKey(name) || SimilarityService.BUILT_IN.containsKey(name)) {_            throw new IllegalArgumentException("similarity for name: [" + name + " is already registered")__        }_        similarities.put(name, similarity)__    };registers,the,given,link,similarity,with,the,given,name,the,function,takes,as,parameters,ul,li,settings,for,this,similarity,li,version,of,elasticsearch,when,the,index,was,created,li,script,service,for,script,based,similarities,ul,param,name,name,of,the,similarity,provider,param,similarity,similarity,provider,to,register;public,void,add,similarity,string,name,tri,function,settings,version,script,service,similarity,similarity,ensure,not,frozen,if,similarities,contains,key,name,similarity,service,contains,key,name,throw,new,illegal,argument,exception,similarity,for,name,name,is,already,registered,similarities,put,name,similarity
IndexModule -> public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity);1546495834;Registers the given {@link Similarity} with the given name._The function takes as parameters:<ul>_<li>settings for this similarity_<li>version of Elasticsearch when the index was created_<li>ScriptService, for script-based similarities_</ul>__@param name Name of the SimilarityProvider_@param similarity SimilarityProvider to register;public void addSimilarity(String name, TriFunction<Settings, Version, ScriptService, Similarity> similarity) {_        ensureNotFrozen()__        if (similarities.containsKey(name) || SimilarityService.BUILT_IN.containsKey(name)) {_            throw new IllegalArgumentException("similarity for name: [" + name + " is already registered")__        }_        similarities.put(name, similarity)__    };registers,the,given,link,similarity,with,the,given,name,the,function,takes,as,parameters,ul,li,settings,for,this,similarity,li,version,of,elasticsearch,when,the,index,was,created,li,script,service,for,script,based,similarities,ul,param,name,name,of,the,similarity,provider,param,similarity,similarity,provider,to,register;public,void,add,similarity,string,name,tri,function,settings,version,script,service,similarity,similarity,ensure,not,frozen,if,similarities,contains,key,name,similarity,service,contains,key,name,throw,new,illegal,argument,exception,similarity,for,name,name,is,already,registered,similarities,put,name,similarity
IndexModule -> public void addSearchOperationListener(SearchOperationListener listener);1524684173;Adds an {@link SearchOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addSearchOperationListener(SearchOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (searchOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.searchOperationListeners.add(listener)__    };adds,an,link,search,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,search,operation,listener,search,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,search,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,search,operation,listeners,add,listener
IndexModule -> public void addSearchOperationListener(SearchOperationListener listener);1525334055;Adds an {@link SearchOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addSearchOperationListener(SearchOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (searchOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.searchOperationListeners.add(listener)__    };adds,an,link,search,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,search,operation,listener,search,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,search,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,search,operation,listeners,add,listener
IndexModule -> public void addSearchOperationListener(SearchOperationListener listener);1528706846;Adds an {@link SearchOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addSearchOperationListener(SearchOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (searchOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.searchOperationListeners.add(listener)__    };adds,an,link,search,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,search,operation,listener,search,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,search,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,search,operation,listeners,add,listener
IndexModule -> public void addSearchOperationListener(SearchOperationListener listener);1532685069;Adds an {@link SearchOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addSearchOperationListener(SearchOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (searchOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.searchOperationListeners.add(listener)__    };adds,an,link,search,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,search,operation,listener,search,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,search,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,search,operation,listeners,add,listener
IndexModule -> public void addSearchOperationListener(SearchOperationListener listener);1535046779;Adds an {@link SearchOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addSearchOperationListener(SearchOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (searchOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.searchOperationListeners.add(listener)__    };adds,an,link,search,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,search,operation,listener,search,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,search,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,search,operation,listeners,add,listener
IndexModule -> public void addSearchOperationListener(SearchOperationListener listener);1546420232;Adds an {@link SearchOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addSearchOperationListener(SearchOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (searchOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.searchOperationListeners.add(listener)__    };adds,an,link,search,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,search,operation,listener,search,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,search,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,search,operation,listeners,add,listener
IndexModule -> public void addSearchOperationListener(SearchOperationListener listener);1546495834;Adds an {@link SearchOperationListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addSearchOperationListener(SearchOperationListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (searchOperationListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.searchOperationListeners.add(listener)__    };adds,an,link,search,operation,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,search,operation,listener,search,operation,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,search,operation,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,search,operation,listeners,add,listener
IndexModule -> public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,             ScriptService scriptService) throws IOException;1524684173;creates a new mapper service to do administrative work like mapping updates. This *should not* be used for document parsing._doing so will result in an exception.;public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,_            ScriptService scriptService) throws IOException {_        return new MapperService(indexSettings, analysisRegistry.build(indexSettings), xContentRegistry,_            new SimilarityService(indexSettings, scriptService, similarities), mapperRegistry,_            () -> { throw new UnsupportedOperationException("no index query shard context available")_ })__    };creates,a,new,mapper,service,to,do,administrative,work,like,mapping,updates,this,should,not,be,used,for,document,parsing,doing,so,will,result,in,an,exception;public,mapper,service,new,index,mapper,service,named,xcontent,registry,x,content,registry,mapper,registry,mapper,registry,script,service,script,service,throws,ioexception,return,new,mapper,service,index,settings,analysis,registry,build,index,settings,x,content,registry,new,similarity,service,index,settings,script,service,similarities,mapper,registry,throw,new,unsupported,operation,exception,no,index,query,shard,context,available
IndexModule -> public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,             ScriptService scriptService) throws IOException;1525334055;creates a new mapper service to do administrative work like mapping updates. This *should not* be used for document parsing._doing so will result in an exception.;public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,_            ScriptService scriptService) throws IOException {_        return new MapperService(indexSettings, analysisRegistry.build(indexSettings), xContentRegistry,_            new SimilarityService(indexSettings, scriptService, similarities), mapperRegistry,_            () -> { throw new UnsupportedOperationException("no index query shard context available")_ })__    };creates,a,new,mapper,service,to,do,administrative,work,like,mapping,updates,this,should,not,be,used,for,document,parsing,doing,so,will,result,in,an,exception;public,mapper,service,new,index,mapper,service,named,xcontent,registry,x,content,registry,mapper,registry,mapper,registry,script,service,script,service,throws,ioexception,return,new,mapper,service,index,settings,analysis,registry,build,index,settings,x,content,registry,new,similarity,service,index,settings,script,service,similarities,mapper,registry,throw,new,unsupported,operation,exception,no,index,query,shard,context,available
IndexModule -> public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,             ScriptService scriptService) throws IOException;1528706846;creates a new mapper service to do administrative work like mapping updates. This *should not* be used for document parsing._doing so will result in an exception.;public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,_            ScriptService scriptService) throws IOException {_        return new MapperService(indexSettings, analysisRegistry.build(indexSettings), xContentRegistry,_            new SimilarityService(indexSettings, scriptService, similarities), mapperRegistry,_            () -> { throw new UnsupportedOperationException("no index query shard context available")_ })__    };creates,a,new,mapper,service,to,do,administrative,work,like,mapping,updates,this,should,not,be,used,for,document,parsing,doing,so,will,result,in,an,exception;public,mapper,service,new,index,mapper,service,named,xcontent,registry,x,content,registry,mapper,registry,mapper,registry,script,service,script,service,throws,ioexception,return,new,mapper,service,index,settings,analysis,registry,build,index,settings,x,content,registry,new,similarity,service,index,settings,script,service,similarities,mapper,registry,throw,new,unsupported,operation,exception,no,index,query,shard,context,available
IndexModule -> public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,             ScriptService scriptService) throws IOException;1532685069;creates a new mapper service to do administrative work like mapping updates. This *should not* be used for document parsing._doing so will result in an exception.;public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,_            ScriptService scriptService) throws IOException {_        return new MapperService(indexSettings, analysisRegistry.build(indexSettings), xContentRegistry,_            new SimilarityService(indexSettings, scriptService, similarities), mapperRegistry,_            () -> { throw new UnsupportedOperationException("no index query shard context available")_ })__    };creates,a,new,mapper,service,to,do,administrative,work,like,mapping,updates,this,should,not,be,used,for,document,parsing,doing,so,will,result,in,an,exception;public,mapper,service,new,index,mapper,service,named,xcontent,registry,x,content,registry,mapper,registry,mapper,registry,script,service,script,service,throws,ioexception,return,new,mapper,service,index,settings,analysis,registry,build,index,settings,x,content,registry,new,similarity,service,index,settings,script,service,similarities,mapper,registry,throw,new,unsupported,operation,exception,no,index,query,shard,context,available
IndexModule -> public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,             ScriptService scriptService) throws IOException;1535046779;creates a new mapper service to do administrative work like mapping updates. This *should not* be used for document parsing._doing so will result in an exception.;public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,_            ScriptService scriptService) throws IOException {_        return new MapperService(indexSettings, analysisRegistry.build(indexSettings), xContentRegistry,_            new SimilarityService(indexSettings, scriptService, similarities), mapperRegistry,_            () -> { throw new UnsupportedOperationException("no index query shard context available")_ })__    };creates,a,new,mapper,service,to,do,administrative,work,like,mapping,updates,this,should,not,be,used,for,document,parsing,doing,so,will,result,in,an,exception;public,mapper,service,new,index,mapper,service,named,xcontent,registry,x,content,registry,mapper,registry,mapper,registry,script,service,script,service,throws,ioexception,return,new,mapper,service,index,settings,analysis,registry,build,index,settings,x,content,registry,new,similarity,service,index,settings,script,service,similarities,mapper,registry,throw,new,unsupported,operation,exception,no,index,query,shard,context,available
IndexModule -> public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,             ScriptService scriptService) throws IOException;1546420232;creates a new mapper service to do administrative work like mapping updates. This *should not* be used for document parsing._doing so will result in an exception.;public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,_            ScriptService scriptService) throws IOException {_        return new MapperService(indexSettings, analysisRegistry.build(indexSettings), xContentRegistry,_            new SimilarityService(indexSettings, scriptService, similarities), mapperRegistry,_            () -> { throw new UnsupportedOperationException("no index query shard context available")_ })__    };creates,a,new,mapper,service,to,do,administrative,work,like,mapping,updates,this,should,not,be,used,for,document,parsing,doing,so,will,result,in,an,exception;public,mapper,service,new,index,mapper,service,named,xcontent,registry,x,content,registry,mapper,registry,mapper,registry,script,service,script,service,throws,ioexception,return,new,mapper,service,index,settings,analysis,registry,build,index,settings,x,content,registry,new,similarity,service,index,settings,script,service,similarities,mapper,registry,throw,new,unsupported,operation,exception,no,index,query,shard,context,available
IndexModule -> public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,             ScriptService scriptService) throws IOException;1546495834;creates a new mapper service to do administrative work like mapping updates. This *should not* be used for document parsing._doing so will result in an exception.;public MapperService newIndexMapperService(NamedXContentRegistry xContentRegistry, MapperRegistry mapperRegistry,_            ScriptService scriptService) throws IOException {_        return new MapperService(indexSettings, analysisRegistry.build(indexSettings), xContentRegistry,_            new SimilarityService(indexSettings, scriptService, similarities), mapperRegistry,_            () -> { throw new UnsupportedOperationException("no index query shard context available")_ })__    };creates,a,new,mapper,service,to,do,administrative,work,like,mapping,updates,this,should,not,be,used,for,document,parsing,doing,so,will,result,in,an,exception;public,mapper,service,new,index,mapper,service,named,xcontent,registry,x,content,registry,mapper,registry,mapper,registry,script,service,script,service,throws,ioexception,return,new,mapper,service,index,settings,analysis,registry,build,index,settings,x,content,registry,new,similarity,service,index,settings,script,service,similarities,mapper,registry,throw,new,unsupported,operation,exception,no,index,query,shard,context,available
IndexModule -> Type -> public boolean match(String setting);1524684173;Returns true iff this settings matches the type.;public boolean match(String setting) {_            return getSettingsKey().equals(setting)__        };returns,true,iff,this,settings,matches,the,type;public,boolean,match,string,setting,return,get,settings,key,equals,setting
IndexModule -> Type -> public boolean match(String setting);1525334055;Returns true iff this settings matches the type.;public boolean match(String setting) {_            return getSettingsKey().equals(setting)__        };returns,true,iff,this,settings,matches,the,type;public,boolean,match,string,setting,return,get,settings,key,equals,setting
IndexModule -> Type -> public boolean match(String setting);1528706846;Returns true iff this settings matches the type.;public boolean match(String setting) {_            return getSettingsKey().equals(setting)__        };returns,true,iff,this,settings,matches,the,type;public,boolean,match,string,setting,return,get,settings,key,equals,setting
IndexModule -> Type -> public boolean match(String setting);1532685069;Returns true iff this settings matches the type.;public boolean match(String setting) {_            return getSettingsKey().equals(setting)__        };returns,true,iff,this,settings,matches,the,type;public,boolean,match,string,setting,return,get,settings,key,equals,setting
IndexModule -> Type -> public boolean match(String setting);1535046779;Returns true iff this settings matches the type.;public boolean match(String setting) {_            return getSettingsKey().equals(setting)__        };returns,true,iff,this,settings,matches,the,type;public,boolean,match,string,setting,return,get,settings,key,equals,setting
IndexModule -> Type -> public boolean match(String setting);1546420232;Returns true iff this settings matches the type.;public boolean match(String setting) {_            return getSettingsKey().equals(setting)__        };returns,true,iff,this,settings,matches,the,type;public,boolean,match,string,setting,return,get,settings,key,equals,setting
IndexModule -> Type -> public boolean match(String setting);1546495834;Returns true iff this settings matches the type.;public boolean match(String setting) {_            return getSettingsKey().equals(setting)__        };returns,true,iff,this,settings,matches,the,type;public,boolean,match,string,setting,return,get,settings,key,equals,setting
IndexModule -> public IndexModule(             final IndexSettings indexSettings,             final AnalysisRegistry analysisRegistry,             final EngineFactory engineFactory,             final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories);1532685069;Construct the index module for the index with the specified index settings. The index module contains extension points for plugins_via {@link org.elasticsearch.plugins.PluginsService#onIndexModule(IndexModule)}.__@param indexSettings       the index settings_@param analysisRegistry    the analysis registry_@param engineFactory       the engine factory_@param indexStoreFactories the available store types;public IndexModule(_            final IndexSettings indexSettings,_            final AnalysisRegistry analysisRegistry,_            final EngineFactory engineFactory,_            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories) {_        this.indexSettings = indexSettings__        this.analysisRegistry = analysisRegistry__        this.engineFactory = Objects.requireNonNull(engineFactory)__        this.searchOperationListeners.add(new SearchSlowLog(indexSettings))__        this.indexOperationListeners.add(new IndexingSlowLog(indexSettings))__        this.indexStoreFactories = Collections.unmodifiableMap(indexStoreFactories)__    };construct,the,index,module,for,the,index,with,the,specified,index,settings,the,index,module,contains,extension,points,for,plugins,via,link,org,elasticsearch,plugins,plugins,service,on,index,module,index,module,param,index,settings,the,index,settings,param,analysis,registry,the,analysis,registry,param,engine,factory,the,engine,factory,param,index,store,factories,the,available,store,types;public,index,module,final,index,settings,index,settings,final,analysis,registry,analysis,registry,final,engine,factory,engine,factory,final,map,string,function,index,settings,index,store,index,store,factories,this,index,settings,index,settings,this,analysis,registry,analysis,registry,this,engine,factory,objects,require,non,null,engine,factory,this,search,operation,listeners,add,new,search,slow,log,index,settings,this,index,operation,listeners,add,new,indexing,slow,log,index,settings,this,index,store,factories,collections,unmodifiable,map,index,store,factories
IndexModule -> public IndexModule(             final IndexSettings indexSettings,             final AnalysisRegistry analysisRegistry,             final EngineFactory engineFactory,             final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories);1535046779;Construct the index module for the index with the specified index settings. The index module contains extension points for plugins_via {@link org.elasticsearch.plugins.PluginsService#onIndexModule(IndexModule)}.__@param indexSettings       the index settings_@param analysisRegistry    the analysis registry_@param engineFactory       the engine factory_@param indexStoreFactories the available store types;public IndexModule(_            final IndexSettings indexSettings,_            final AnalysisRegistry analysisRegistry,_            final EngineFactory engineFactory,_            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories) {_        this.indexSettings = indexSettings__        this.analysisRegistry = analysisRegistry__        this.engineFactory = Objects.requireNonNull(engineFactory)__        this.searchOperationListeners.add(new SearchSlowLog(indexSettings))__        this.indexOperationListeners.add(new IndexingSlowLog(indexSettings))__        this.indexStoreFactories = Collections.unmodifiableMap(indexStoreFactories)__    };construct,the,index,module,for,the,index,with,the,specified,index,settings,the,index,module,contains,extension,points,for,plugins,via,link,org,elasticsearch,plugins,plugins,service,on,index,module,index,module,param,index,settings,the,index,settings,param,analysis,registry,the,analysis,registry,param,engine,factory,the,engine,factory,param,index,store,factories,the,available,store,types;public,index,module,final,index,settings,index,settings,final,analysis,registry,analysis,registry,final,engine,factory,engine,factory,final,map,string,function,index,settings,index,store,index,store,factories,this,index,settings,index,settings,this,analysis,registry,analysis,registry,this,engine,factory,objects,require,non,null,engine,factory,this,search,operation,listeners,add,new,search,slow,log,index,settings,this,index,operation,listeners,add,new,indexing,slow,log,index,settings,this,index,store,factories,collections,unmodifiable,map,index,store,factories
IndexModule -> public IndexModule(             final IndexSettings indexSettings,             final AnalysisRegistry analysisRegistry,             final EngineFactory engineFactory,             final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories);1546420232;Construct the index module for the index with the specified index settings. The index module contains extension points for plugins_via {@link org.elasticsearch.plugins.PluginsService#onIndexModule(IndexModule)}.__@param indexSettings       the index settings_@param analysisRegistry    the analysis registry_@param engineFactory       the engine factory_@param indexStoreFactories the available store types;public IndexModule(_            final IndexSettings indexSettings,_            final AnalysisRegistry analysisRegistry,_            final EngineFactory engineFactory,_            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories) {_        this.indexSettings = indexSettings__        this.analysisRegistry = analysisRegistry__        this.engineFactory = Objects.requireNonNull(engineFactory)__        this.searchOperationListeners.add(new SearchSlowLog(indexSettings))__        this.indexOperationListeners.add(new IndexingSlowLog(indexSettings))__        this.indexStoreFactories = Collections.unmodifiableMap(indexStoreFactories)__    };construct,the,index,module,for,the,index,with,the,specified,index,settings,the,index,module,contains,extension,points,for,plugins,via,link,org,elasticsearch,plugins,plugins,service,on,index,module,index,module,param,index,settings,the,index,settings,param,analysis,registry,the,analysis,registry,param,engine,factory,the,engine,factory,param,index,store,factories,the,available,store,types;public,index,module,final,index,settings,index,settings,final,analysis,registry,analysis,registry,final,engine,factory,engine,factory,final,map,string,function,index,settings,index,store,index,store,factories,this,index,settings,index,settings,this,analysis,registry,analysis,registry,this,engine,factory,objects,require,non,null,engine,factory,this,search,operation,listeners,add,new,search,slow,log,index,settings,this,index,operation,listeners,add,new,indexing,slow,log,index,settings,this,index,store,factories,collections,unmodifiable,map,index,store,factories
IndexModule -> public IndexModule(             final IndexSettings indexSettings,             final AnalysisRegistry analysisRegistry,             final EngineFactory engineFactory,             final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories);1546495834;Construct the index module for the index with the specified index settings. The index module contains extension points for plugins_via {@link org.elasticsearch.plugins.PluginsService#onIndexModule(IndexModule)}.__@param indexSettings       the index settings_@param analysisRegistry    the analysis registry_@param engineFactory       the engine factory_@param indexStoreFactories the available store types;public IndexModule(_            final IndexSettings indexSettings,_            final AnalysisRegistry analysisRegistry,_            final EngineFactory engineFactory,_            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories) {_        this.indexSettings = indexSettings__        this.analysisRegistry = analysisRegistry__        this.engineFactory = Objects.requireNonNull(engineFactory)__        this.searchOperationListeners.add(new SearchSlowLog(indexSettings))__        this.indexOperationListeners.add(new IndexingSlowLog(indexSettings))__        this.indexStoreFactories = Collections.unmodifiableMap(indexStoreFactories)__    };construct,the,index,module,for,the,index,with,the,specified,index,settings,the,index,module,contains,extension,points,for,plugins,via,link,org,elasticsearch,plugins,plugins,service,on,index,module,index,module,param,index,settings,the,index,settings,param,analysis,registry,the,analysis,registry,param,engine,factory,the,engine,factory,param,index,store,factories,the,available,store,types;public,index,module,final,index,settings,index,settings,final,analysis,registry,analysis,registry,final,engine,factory,engine,factory,final,map,string,function,index,settings,index,store,index,store,factories,this,index,settings,index,settings,this,analysis,registry,analysis,registry,this,engine,factory,objects,require,non,null,engine,factory,this,search,operation,listeners,add,new,search,slow,log,index,settings,this,index,operation,listeners,add,new,indexing,slow,log,index,settings,this,index,store,factories,collections,unmodifiable,map,index,store,factories
IndexModule -> public void addIndexEventListener(IndexEventListener listener);1524684173;Adds an {@link IndexEventListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexEventListener(IndexEventListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexEventListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexEventListeners.add(listener)__    };adds,an,link,index,event,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,event,listener,index,event,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,event,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,event,listeners,add,listener
IndexModule -> public void addIndexEventListener(IndexEventListener listener);1525334055;Adds an {@link IndexEventListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexEventListener(IndexEventListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexEventListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexEventListeners.add(listener)__    };adds,an,link,index,event,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,event,listener,index,event,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,event,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,event,listeners,add,listener
IndexModule -> public void addIndexEventListener(IndexEventListener listener);1528706846;Adds an {@link IndexEventListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexEventListener(IndexEventListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexEventListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexEventListeners.add(listener)__    };adds,an,link,index,event,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,event,listener,index,event,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,event,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,event,listeners,add,listener
IndexModule -> public void addIndexEventListener(IndexEventListener listener);1532685069;Adds an {@link IndexEventListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexEventListener(IndexEventListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexEventListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexEventListeners.add(listener)__    };adds,an,link,index,event,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,event,listener,index,event,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,event,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,event,listeners,add,listener
IndexModule -> public void addIndexEventListener(IndexEventListener listener);1535046779;Adds an {@link IndexEventListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexEventListener(IndexEventListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexEventListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexEventListeners.add(listener)__    };adds,an,link,index,event,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,event,listener,index,event,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,event,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,event,listeners,add,listener
IndexModule -> public void addIndexEventListener(IndexEventListener listener);1546420232;Adds an {@link IndexEventListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexEventListener(IndexEventListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexEventListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexEventListeners.add(listener)__    };adds,an,link,index,event,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,event,listener,index,event,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,event,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,event,listeners,add,listener
IndexModule -> public void addIndexEventListener(IndexEventListener listener);1546495834;Adds an {@link IndexEventListener} for this index. All listeners added here_are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these_listeners go out of scope._<p>_Note: an index might be created on a node multiple times. For instance if the last shard from an index is_relocated to another node the internal representation will be destroyed which includes the registered listeners._Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again._Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node._</p>;public void addIndexEventListener(IndexEventListener listener) {_        ensureNotFrozen()__        if (listener == null) {_            throw new IllegalArgumentException("listener must not be null")__        }_        if (indexEventListeners.contains(listener)) {_            throw new IllegalArgumentException("listener already added")__        }__        this.indexEventListeners.add(listener)__    };adds,an,link,index,event,listener,for,this,index,all,listeners,added,here,are,maintained,for,the,entire,index,lifecycle,on,this,node,once,an,index,is,closed,or,deleted,these,listeners,go,out,of,scope,p,note,an,index,might,be,created,on,a,node,multiple,times,for,instance,if,the,last,shard,from,an,index,is,relocated,to,another,node,the,internal,representation,will,be,destroyed,which,includes,the,registered,listeners,once,the,node,holds,at,least,one,shard,of,an,index,all,modules,are,reloaded,and,listeners,are,registered,again,listeners,can,t,be,unregistered,they,will,stay,alive,for,the,entire,time,the,index,is,allocated,on,a,node,p;public,void,add,index,event,listener,index,event,listener,listener,ensure,not,frozen,if,listener,null,throw,new,illegal,argument,exception,listener,must,not,be,null,if,index,event,listeners,contains,listener,throw,new,illegal,argument,exception,listener,already,added,this,index,event,listeners,add,listener
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer);1524684173;Adds a Setting and it's consumer for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer)__    };adds,a,setting,and,it,s,consumer,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer);1525334055;Adds a Setting and it's consumer for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer)__    };adds,a,setting,and,it,s,consumer,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer);1528706846;Adds a Setting and it's consumer for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer)__    };adds,a,setting,and,it,s,consumer,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer);1532685069;Adds a Setting and it's consumer for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer)__    };adds,a,setting,and,it,s,consumer,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer);1535046779;Adds a Setting and it's consumer for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer)__    };adds,a,setting,and,it,s,consumer,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer);1546420232;Adds a Setting and it's consumer for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer)__    };adds,a,setting,and,it,s,consumer,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer
IndexModule -> public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer);1546495834;Adds a Setting and it's consumer for this index.;public <T> void addSettingsUpdateConsumer(Setting<T> setting, Consumer<T> consumer) {_        ensureNotFrozen()__        if (setting == null) {_            throw new IllegalArgumentException("setting must not be null")__        }_        indexSettings.getScopedSettings().addSettingsUpdateConsumer(setting, consumer)__    };adds,a,setting,and,it,s,consumer,for,this,index;public,t,void,add,settings,update,consumer,setting,t,setting,consumer,t,consumer,ensure,not,frozen,if,setting,null,throw,new,illegal,argument,exception,setting,must,not,be,null,index,settings,get,scoped,settings,add,settings,update,consumer,setting,consumer
IndexModule -> public Settings getSettings();1524684173;Returns the index {@link Settings} for this index;public Settings getSettings() {_        return indexSettings.getSettings()__    };returns,the,index,link,settings,for,this,index;public,settings,get,settings,return,index,settings,get,settings
IndexModule -> public Settings getSettings();1525334055;Returns the index {@link Settings} for this index;public Settings getSettings() {_        return indexSettings.getSettings()__    };returns,the,index,link,settings,for,this,index;public,settings,get,settings,return,index,settings,get,settings
IndexModule -> public Settings getSettings();1528706846;Returns the index {@link Settings} for this index;public Settings getSettings() {_        return indexSettings.getSettings()__    };returns,the,index,link,settings,for,this,index;public,settings,get,settings,return,index,settings,get,settings
IndexModule -> public Settings getSettings();1532685069;Returns the index {@link Settings} for this index;public Settings getSettings() {_        return indexSettings.getSettings()__    };returns,the,index,link,settings,for,this,index;public,settings,get,settings,return,index,settings,get,settings
IndexModule -> public Settings getSettings();1535046779;Returns the index {@link Settings} for this index;public Settings getSettings() {_        return indexSettings.getSettings()__    };returns,the,index,link,settings,for,this,index;public,settings,get,settings,return,index,settings,get,settings
IndexModule -> public Settings getSettings();1546420232;Returns the index {@link Settings} for this index;public Settings getSettings() {_        return indexSettings.getSettings()__    };returns,the,index,link,settings,for,this,index;public,settings,get,settings,return,index,settings,get,settings
IndexModule -> public Settings getSettings();1546495834;Returns the index {@link Settings} for this index;public Settings getSettings() {_        return indexSettings.getSettings()__    };returns,the,index,link,settings,for,this,index;public,settings,get,settings,return,index,settings,get,settings
IndexModule -> public void addIndexStore(String type, Function<IndexSettings, IndexStore> provider);1524684173;Adds an {@link IndexStore} type to this index module. Typically stores are registered with a reference to_it's constructor:_<pre>_indexModule.addIndexStore("my_store_type", MyStore::new)__</pre>__@param type the type to register_@param provider the instance provider / factory method;public void addIndexStore(String type, Function<IndexSettings, IndexStore> provider) {_        ensureNotFrozen()__        if (storeTypes.containsKey(type)) {_            throw new IllegalArgumentException("key [" + type +"] already registered")__        }_        storeTypes.put(type, provider)__    };adds,an,link,index,store,type,to,this,index,module,typically,stores,are,registered,with,a,reference,to,it,s,constructor,pre,index,module,add,index,store,my,store,new,pre,param,type,the,type,to,register,param,provider,the,instance,provider,factory,method;public,void,add,index,store,string,type,function,index,settings,index,store,provider,ensure,not,frozen,if,store,types,contains,key,type,throw,new,illegal,argument,exception,key,type,already,registered,store,types,put,type,provider
IndexModule -> public void addIndexStore(String type, Function<IndexSettings, IndexStore> provider);1525334055;Adds an {@link IndexStore} type to this index module. Typically stores are registered with a reference to_it's constructor:_<pre>_indexModule.addIndexStore("my_store_type", MyStore::new)__</pre>__@param type the type to register_@param provider the instance provider / factory method;public void addIndexStore(String type, Function<IndexSettings, IndexStore> provider) {_        ensureNotFrozen()__        if (storeTypes.containsKey(type)) {_            throw new IllegalArgumentException("key [" + type +"] already registered")__        }_        storeTypes.put(type, provider)__    };adds,an,link,index,store,type,to,this,index,module,typically,stores,are,registered,with,a,reference,to,it,s,constructor,pre,index,module,add,index,store,my,store,new,pre,param,type,the,type,to,register,param,provider,the,instance,provider,factory,method;public,void,add,index,store,string,type,function,index,settings,index,store,provider,ensure,not,frozen,if,store,types,contains,key,type,throw,new,illegal,argument,exception,key,type,already,registered,store,types,put,type,provider
IndexModule -> public void addIndexStore(String type, Function<IndexSettings, IndexStore> provider);1528706846;Adds an {@link IndexStore} type to this index module. Typically stores are registered with a reference to_it's constructor:_<pre>_indexModule.addIndexStore("my_store_type", MyStore::new)__</pre>__@param type the type to register_@param provider the instance provider / factory method;public void addIndexStore(String type, Function<IndexSettings, IndexStore> provider) {_        ensureNotFrozen()__        if (storeTypes.containsKey(type)) {_            throw new IllegalArgumentException("key [" + type +"] already registered")__        }_        storeTypes.put(type, provider)__    };adds,an,link,index,store,type,to,this,index,module,typically,stores,are,registered,with,a,reference,to,it,s,constructor,pre,index,module,add,index,store,my,store,new,pre,param,type,the,type,to,register,param,provider,the,instance,provider,factory,method;public,void,add,index,store,string,type,function,index,settings,index,store,provider,ensure,not,frozen,if,store,types,contains,key,type,throw,new,illegal,argument,exception,key,type,already,registered,store,types,put,type,provider
IndexModule -> public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider);1524684173;Forces a certain query cache to use instead of the default one. If this is set_and query caching is not disabled with {@code index.queries.cache.enabled}, then_the given provider will be used._NOTE: this can only be set once__@see #INDEX_QUERY_CACHE_ENABLED_SETTING;public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {_        ensureNotFrozen()__        this.forceQueryCacheProvider.set(queryCacheProvider)__    };forces,a,certain,query,cache,to,use,instead,of,the,default,one,if,this,is,set,and,query,caching,is,not,disabled,with,code,index,queries,cache,enabled,then,the,given,provider,will,be,used,note,this,can,only,be,set,once,see;public,void,force,query,cache,provider,bi,function,index,settings,indices,query,cache,query,cache,query,cache,provider,ensure,not,frozen,this,force,query,cache,provider,set,query,cache,provider
IndexModule -> public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider);1525334055;Forces a certain query cache to use instead of the default one. If this is set_and query caching is not disabled with {@code index.queries.cache.enabled}, then_the given provider will be used._NOTE: this can only be set once__@see #INDEX_QUERY_CACHE_ENABLED_SETTING;public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {_        ensureNotFrozen()__        this.forceQueryCacheProvider.set(queryCacheProvider)__    };forces,a,certain,query,cache,to,use,instead,of,the,default,one,if,this,is,set,and,query,caching,is,not,disabled,with,code,index,queries,cache,enabled,then,the,given,provider,will,be,used,note,this,can,only,be,set,once,see;public,void,force,query,cache,provider,bi,function,index,settings,indices,query,cache,query,cache,query,cache,provider,ensure,not,frozen,this,force,query,cache,provider,set,query,cache,provider
IndexModule -> public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider);1528706846;Forces a certain query cache to use instead of the default one. If this is set_and query caching is not disabled with {@code index.queries.cache.enabled}, then_the given provider will be used._NOTE: this can only be set once__@see #INDEX_QUERY_CACHE_ENABLED_SETTING;public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {_        ensureNotFrozen()__        this.forceQueryCacheProvider.set(queryCacheProvider)__    };forces,a,certain,query,cache,to,use,instead,of,the,default,one,if,this,is,set,and,query,caching,is,not,disabled,with,code,index,queries,cache,enabled,then,the,given,provider,will,be,used,note,this,can,only,be,set,once,see;public,void,force,query,cache,provider,bi,function,index,settings,indices,query,cache,query,cache,query,cache,provider,ensure,not,frozen,this,force,query,cache,provider,set,query,cache,provider
IndexModule -> public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider);1532685069;Forces a certain query cache to use instead of the default one. If this is set_and query caching is not disabled with {@code index.queries.cache.enabled}, then_the given provider will be used._NOTE: this can only be set once__@see #INDEX_QUERY_CACHE_ENABLED_SETTING;public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {_        ensureNotFrozen()__        this.forceQueryCacheProvider.set(queryCacheProvider)__    };forces,a,certain,query,cache,to,use,instead,of,the,default,one,if,this,is,set,and,query,caching,is,not,disabled,with,code,index,queries,cache,enabled,then,the,given,provider,will,be,used,note,this,can,only,be,set,once,see;public,void,force,query,cache,provider,bi,function,index,settings,indices,query,cache,query,cache,query,cache,provider,ensure,not,frozen,this,force,query,cache,provider,set,query,cache,provider
IndexModule -> public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider);1535046779;Forces a certain query cache to use instead of the default one. If this is set_and query caching is not disabled with {@code index.queries.cache.enabled}, then_the given provider will be used._NOTE: this can only be set once__@see #INDEX_QUERY_CACHE_ENABLED_SETTING;public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {_        ensureNotFrozen()__        this.forceQueryCacheProvider.set(queryCacheProvider)__    };forces,a,certain,query,cache,to,use,instead,of,the,default,one,if,this,is,set,and,query,caching,is,not,disabled,with,code,index,queries,cache,enabled,then,the,given,provider,will,be,used,note,this,can,only,be,set,once,see;public,void,force,query,cache,provider,bi,function,index,settings,indices,query,cache,query,cache,query,cache,provider,ensure,not,frozen,this,force,query,cache,provider,set,query,cache,provider
IndexModule -> public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider);1546420232;Forces a certain query cache to use instead of the default one. If this is set_and query caching is not disabled with {@code index.queries.cache.enabled}, then_the given provider will be used._NOTE: this can only be set once__@see #INDEX_QUERY_CACHE_ENABLED_SETTING;public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {_        ensureNotFrozen()__        this.forceQueryCacheProvider.set(queryCacheProvider)__    };forces,a,certain,query,cache,to,use,instead,of,the,default,one,if,this,is,set,and,query,caching,is,not,disabled,with,code,index,queries,cache,enabled,then,the,given,provider,will,be,used,note,this,can,only,be,set,once,see;public,void,force,query,cache,provider,bi,function,index,settings,indices,query,cache,query,cache,query,cache,provider,ensure,not,frozen,this,force,query,cache,provider,set,query,cache,provider
IndexModule -> public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider);1546495834;Forces a certain query cache to use instead of the default one. If this is set_and query caching is not disabled with {@code index.queries.cache.enabled}, then_the given provider will be used._NOTE: this can only be set once__@see #INDEX_QUERY_CACHE_ENABLED_SETTING;public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {_        ensureNotFrozen()__        this.forceQueryCacheProvider.set(queryCacheProvider)__    };forces,a,certain,query,cache,to,use,instead,of,the,default,one,if,this,is,set,and,query,caching,is,not,disabled,with,code,index,queries,cache,enabled,then,the,given,provider,will,be,used,note,this,can,only,be,set,once,see;public,void,force,query,cache,provider,bi,function,index,settings,indices,query,cache,query,cache,query,cache,provider,ensure,not,frozen,this,force,query,cache,provider,set,query,cache,provider
