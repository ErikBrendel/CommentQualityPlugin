# id;timestamp;commentText;codeText;commentWords;codeWords
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")     String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException;1524684173;Returns the line from {@code cpuacct.usage} for the control group to which the Elasticsearch process belongs for the {@code cpuacct}_subsystem. This line represents the total CPU time in nanoseconds consumed by all tasks in the same control group.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpuacct} subsystem_@return the line from {@code cpuacct.usage}_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")_    String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpuacct", controlGroup, "cpuacct.usage"))__    };returns,the,line,from,code,cpuacct,usage,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,this,line,represents,the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,same,control,group,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,return,the,line,from,code,cpuacct,usage,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpuacct,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpuacct,control,group,cpuacct,usage
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")     String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException;1539615817;Returns the line from {@code cpuacct.usage} for the control group to which the Elasticsearch process belongs for the {@code cpuacct}_subsystem. This line represents the total CPU time in nanoseconds consumed by all tasks in the same control group.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpuacct} subsystem_@return the line from {@code cpuacct.usage}_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")_    String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpuacct", controlGroup, "cpuacct.usage"))__    };returns,the,line,from,code,cpuacct,usage,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,this,line,represents,the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,same,control,group,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,return,the,line,from,code,cpuacct,usage,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpuacct,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpuacct,control,group,cpuacct,usage
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")     String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException;1541697418;Returns the line from {@code cpuacct.usage} for the control group to which the Elasticsearch process belongs for the {@code cpuacct}_subsystem. This line represents the total CPU time in nanoseconds consumed by all tasks in the same control group.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpuacct} subsystem_@return the line from {@code cpuacct.usage}_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")_    String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpuacct", controlGroup, "cpuacct.usage"))__    };returns,the,line,from,code,cpuacct,usage,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,this,line,represents,the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,same,control,group,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,return,the,line,from,code,cpuacct,usage,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpuacct,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpuacct,control,group,cpuacct,usage
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")     String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException;1542050877;Returns the line from {@code cpuacct.usage} for the control group to which the Elasticsearch process belongs for the {@code cpuacct}_subsystem. This line represents the total CPU time in nanoseconds consumed by all tasks in the same control group.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpuacct} subsystem_@return the line from {@code cpuacct.usage}_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")_    String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpuacct", controlGroup, "cpuacct.usage"))__    };returns,the,line,from,code,cpuacct,usage,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,this,line,represents,the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,same,control,group,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,return,the,line,from,code,cpuacct,usage,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpuacct,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpuacct,control,group,cpuacct,usage
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")     String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException;1542069072;Returns the line from {@code cpuacct.usage} for the control group to which the Elasticsearch process belongs for the {@code cpuacct}_subsystem. This line represents the total CPU time in nanoseconds consumed by all tasks in the same control group.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpuacct} subsystem_@return the line from {@code cpuacct.usage}_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpuacct")_    String readSysFsCgroupCpuAcctCpuAcctUsage(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpuacct", controlGroup, "cpuacct.usage"))__    };returns,the,line,from,code,cpuacct,usage,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,this,line,represents,the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,same,control,group,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,return,the,line,from,code,cpuacct,usage,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpuacct,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpuacct,control,group,cpuacct,usage
OsProbe -> private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException;1524684173;The total time in microseconds that all tasks in the Elasticsearch control group can run during one period as specified by {@code_cpu.cfs_period_us}.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctCfsQuota(controlGroup))__    };the,total,time,in,microseconds,that,all,tasks,in,the,elasticsearch,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,quota,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,control,group
OsProbe -> private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException;1539615817;The total time in microseconds that all tasks in the Elasticsearch control group can run during one period as specified by {@code_cpu.cfs_period_us}.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctCfsQuota(controlGroup))__    };the,total,time,in,microseconds,that,all,tasks,in,the,elasticsearch,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,quota,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,control,group
OsProbe -> private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException;1541697418;The total time in microseconds that all tasks in the Elasticsearch control group can run during one period as specified by {@code_cpu.cfs_period_us}.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctCfsQuota(controlGroup))__    };the,total,time,in,microseconds,that,all,tasks,in,the,elasticsearch,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,quota,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,control,group
OsProbe -> private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException;1542050877;The total time in microseconds that all tasks in the Elasticsearch control group can run during one period as specified by {@code_cpu.cfs_period_us}.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctCfsQuota(controlGroup))__    };the,total,time,in,microseconds,that,all,tasks,in,the,elasticsearch,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,quota,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,control,group
OsProbe -> private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException;1542069072;The total time in microseconds that all tasks in the Elasticsearch control group can run during one period as specified by {@code_cpu.cfs_period_us}.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctCfsQuota(controlGroup))__    };the,total,time,in,microseconds,that,all,tasks,in,the,elasticsearch,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,quota,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,control,group
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1524684173;Returns the lines from {@code cpu.stat} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. These lines represent the CPU time statistics and have the form_<blockquote><pre>_nr_periods \d+_nr_throttled \d+_throttled_time \d+_</pre></blockquote>_where {@code nr_periods} is the number of period intervals as specified by {@code cpu.cfs_period_us} that have elapsed, {@code_nr_throttled} is the number of times tasks in the given control group have been throttled, and {@code throttled_time} is the total_time in nanoseconds for which tasks in the given control group have been throttled.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the lines from {@code cpu.stat}_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.stat"))__        assert lines != null && lines.size() == 3__        return lines__    };returns,the,lines,from,code,cpu,stat,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,these,lines,represent,the,cpu,time,statistics,and,have,the,form,blockquote,pre,d,d,d,pre,blockquote,where,code,is,the,number,of,period,intervals,as,specified,by,code,cpu,that,have,elapsed,code,is,the,number,of,times,tasks,in,the,given,control,group,have,been,throttled,and,code,is,the,total,time,in,nanoseconds,for,which,tasks,in,the,given,control,group,have,been,throttled,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,lines,from,code,cpu,stat,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,list,string,read,sys,fs,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu,stat,assert,lines,null,lines,size,3,return,lines
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1539615817;Returns the lines from {@code cpu.stat} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. These lines represent the CPU time statistics and have the form_<blockquote><pre>_nr_periods \d+_nr_throttled \d+_throttled_time \d+_</pre></blockquote>_where {@code nr_periods} is the number of period intervals as specified by {@code cpu.cfs_period_us} that have elapsed, {@code_nr_throttled} is the number of times tasks in the given control group have been throttled, and {@code throttled_time} is the total_time in nanoseconds for which tasks in the given control group have been throttled.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the lines from {@code cpu.stat}_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.stat"))__        assert lines != null && lines.size() == 3__        return lines__    };returns,the,lines,from,code,cpu,stat,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,these,lines,represent,the,cpu,time,statistics,and,have,the,form,blockquote,pre,d,d,d,pre,blockquote,where,code,is,the,number,of,period,intervals,as,specified,by,code,cpu,that,have,elapsed,code,is,the,number,of,times,tasks,in,the,given,control,group,have,been,throttled,and,code,is,the,total,time,in,nanoseconds,for,which,tasks,in,the,given,control,group,have,been,throttled,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,lines,from,code,cpu,stat,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,list,string,read,sys,fs,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu,stat,assert,lines,null,lines,size,3,return,lines
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1541697418;Returns the lines from {@code cpu.stat} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. These lines represent the CPU time statistics and have the form_<blockquote><pre>_nr_periods \d+_nr_throttled \d+_throttled_time \d+_</pre></blockquote>_where {@code nr_periods} is the number of period intervals as specified by {@code cpu.cfs_period_us} that have elapsed, {@code_nr_throttled} is the number of times tasks in the given control group have been throttled, and {@code throttled_time} is the total_time in nanoseconds for which tasks in the given control group have been throttled.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the lines from {@code cpu.stat}_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.stat"))__        assert lines != null && lines.size() == 3__        return lines__    };returns,the,lines,from,code,cpu,stat,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,these,lines,represent,the,cpu,time,statistics,and,have,the,form,blockquote,pre,d,d,d,pre,blockquote,where,code,is,the,number,of,period,intervals,as,specified,by,code,cpu,that,have,elapsed,code,is,the,number,of,times,tasks,in,the,given,control,group,have,been,throttled,and,code,is,the,total,time,in,nanoseconds,for,which,tasks,in,the,given,control,group,have,been,throttled,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,lines,from,code,cpu,stat,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,list,string,read,sys,fs,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu,stat,assert,lines,null,lines,size,3,return,lines
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1542050877;Returns the lines from {@code cpu.stat} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. These lines represent the CPU time statistics and have the form_<blockquote><pre>_nr_periods \d+_nr_throttled \d+_throttled_time \d+_</pre></blockquote>_where {@code nr_periods} is the number of period intervals as specified by {@code cpu.cfs_period_us} that have elapsed, {@code_nr_throttled} is the number of times tasks in the given control group have been throttled, and {@code throttled_time} is the total_time in nanoseconds for which tasks in the given control group have been throttled.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the lines from {@code cpu.stat}_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.stat"))__        assert lines != null && lines.size() == 3__        return lines__    };returns,the,lines,from,code,cpu,stat,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,these,lines,represent,the,cpu,time,statistics,and,have,the,form,blockquote,pre,d,d,d,pre,blockquote,where,code,is,the,number,of,period,intervals,as,specified,by,code,cpu,that,have,elapsed,code,is,the,number,of,times,tasks,in,the,given,control,group,have,been,throttled,and,code,is,the,total,time,in,nanoseconds,for,which,tasks,in,the,given,control,group,have,been,throttled,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,lines,from,code,cpu,stat,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,list,string,read,sys,fs,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu,stat,assert,lines,null,lines,size,3,return,lines
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1542069072;Returns the lines from {@code cpu.stat} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. These lines represent the CPU time statistics and have the form_<blockquote><pre>_nr_periods \d+_nr_throttled \d+_throttled_time \d+_</pre></blockquote>_where {@code nr_periods} is the number of period intervals as specified by {@code cpu.cfs_period_us} that have elapsed, {@code_nr_throttled} is the number of times tasks in the given control group have been throttled, and {@code throttled_time} is the total_time in nanoseconds for which tasks in the given control group have been throttled.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the lines from {@code cpu.stat}_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    List<String> readSysFsCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.stat"))__        assert lines != null && lines.size() == 3__        return lines__    };returns,the,lines,from,code,cpu,stat,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,these,lines,represent,the,cpu,time,statistics,and,have,the,form,blockquote,pre,d,d,d,pre,blockquote,where,code,is,the,number,of,period,intervals,as,specified,by,code,cpu,that,have,elapsed,code,is,the,number,of,times,tasks,in,the,given,control,group,have,been,throttled,and,code,is,the,total,time,in,nanoseconds,for,which,tasks,in,the,given,control,group,have,been,throttled,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,lines,from,code,cpu,stat,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,list,string,read,sys,fs,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu,stat,assert,lines,null,lines,size,3,return,lines
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup")     List<String> readProcSelfCgroup() throws IOException;1524684173;The lines from {@code /proc/self/cgroup}. This file represents the control groups to which the Elasticsearch process belongs. Each_line in this file represents a control group hierarchy of the form_<p>_{@code \d+:([^:,]+(?:,[^:,]+)?):(/.*)}_<p>_with the first field representing the hierarchy ID, the second field representing a comma-separated list of the subsystems bound to_the hierarchy, and the last field representing the control group.__@return the lines from {@code /proc/self/cgroup}_@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};@SuppressForbidden(reason = "access /proc/self/cgroup")_    List<String> readProcSelfCgroup() throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/proc/self/cgroup"))__        assert lines != null && !lines.isEmpty()__        return lines__    };the,lines,from,code,proc,self,cgroup,this,file,represents,the,control,groups,to,which,the,elasticsearch,process,belongs,each,line,in,this,file,represents,a,control,group,hierarchy,of,the,form,p,code,d,p,with,the,first,field,representing,the,hierarchy,id,the,second,field,representing,a,comma,separated,list,of,the,subsystems,bound,to,the,hierarchy,and,the,last,field,representing,the,control,group,return,the,lines,from,code,proc,self,cgroup,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;suppress,forbidden,reason,access,proc,self,cgroup,list,string,read,proc,self,cgroup,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,proc,self,cgroup,assert,lines,null,lines,is,empty,return,lines
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup")     List<String> readProcSelfCgroup() throws IOException;1539615817;The lines from {@code /proc/self/cgroup}. This file represents the control groups to which the Elasticsearch process belongs. Each_line in this file represents a control group hierarchy of the form_<p>_{@code \d+:([^:,]+(?:,[^:,]+)?):(/.*)}_<p>_with the first field representing the hierarchy ID, the second field representing a comma-separated list of the subsystems bound to_the hierarchy, and the last field representing the control group.__@return the lines from {@code /proc/self/cgroup}_@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};@SuppressForbidden(reason = "access /proc/self/cgroup")_    List<String> readProcSelfCgroup() throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/proc/self/cgroup"))__        assert lines != null && !lines.isEmpty()__        return lines__    };the,lines,from,code,proc,self,cgroup,this,file,represents,the,control,groups,to,which,the,elasticsearch,process,belongs,each,line,in,this,file,represents,a,control,group,hierarchy,of,the,form,p,code,d,p,with,the,first,field,representing,the,hierarchy,id,the,second,field,representing,a,comma,separated,list,of,the,subsystems,bound,to,the,hierarchy,and,the,last,field,representing,the,control,group,return,the,lines,from,code,proc,self,cgroup,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;suppress,forbidden,reason,access,proc,self,cgroup,list,string,read,proc,self,cgroup,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,proc,self,cgroup,assert,lines,null,lines,is,empty,return,lines
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup")     List<String> readProcSelfCgroup() throws IOException;1541697418;The lines from {@code /proc/self/cgroup}. This file represents the control groups to which the Elasticsearch process belongs. Each_line in this file represents a control group hierarchy of the form_<p>_{@code \d+:([^:,]+(?:,[^:,]+)?):(/.*)}_<p>_with the first field representing the hierarchy ID, the second field representing a comma-separated list of the subsystems bound to_the hierarchy, and the last field representing the control group.__@return the lines from {@code /proc/self/cgroup}_@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};@SuppressForbidden(reason = "access /proc/self/cgroup")_    List<String> readProcSelfCgroup() throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/proc/self/cgroup"))__        assert lines != null && !lines.isEmpty()__        return lines__    };the,lines,from,code,proc,self,cgroup,this,file,represents,the,control,groups,to,which,the,elasticsearch,process,belongs,each,line,in,this,file,represents,a,control,group,hierarchy,of,the,form,p,code,d,p,with,the,first,field,representing,the,hierarchy,id,the,second,field,representing,a,comma,separated,list,of,the,subsystems,bound,to,the,hierarchy,and,the,last,field,representing,the,control,group,return,the,lines,from,code,proc,self,cgroup,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;suppress,forbidden,reason,access,proc,self,cgroup,list,string,read,proc,self,cgroup,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,proc,self,cgroup,assert,lines,null,lines,is,empty,return,lines
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup")     List<String> readProcSelfCgroup() throws IOException;1542050877;The lines from {@code /proc/self/cgroup}. This file represents the control groups to which the Elasticsearch process belongs. Each_line in this file represents a control group hierarchy of the form_<p>_{@code \d+:([^:,]+(?:,[^:,]+)?):(/.*)}_<p>_with the first field representing the hierarchy ID, the second field representing a comma-separated list of the subsystems bound to_the hierarchy, and the last field representing the control group.__@return the lines from {@code /proc/self/cgroup}_@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};@SuppressForbidden(reason = "access /proc/self/cgroup")_    List<String> readProcSelfCgroup() throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/proc/self/cgroup"))__        assert lines != null && !lines.isEmpty()__        return lines__    };the,lines,from,code,proc,self,cgroup,this,file,represents,the,control,groups,to,which,the,elasticsearch,process,belongs,each,line,in,this,file,represents,a,control,group,hierarchy,of,the,form,p,code,d,p,with,the,first,field,representing,the,hierarchy,id,the,second,field,representing,a,comma,separated,list,of,the,subsystems,bound,to,the,hierarchy,and,the,last,field,representing,the,control,group,return,the,lines,from,code,proc,self,cgroup,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;suppress,forbidden,reason,access,proc,self,cgroup,list,string,read,proc,self,cgroup,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,proc,self,cgroup,assert,lines,null,lines,is,empty,return,lines
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup")     List<String> readProcSelfCgroup() throws IOException;1542069072;The lines from {@code /proc/self/cgroup}. This file represents the control groups to which the Elasticsearch process belongs. Each_line in this file represents a control group hierarchy of the form_<p>_{@code \d+:([^:,]+(?:,[^:,]+)?):(/.*)}_<p>_with the first field representing the hierarchy ID, the second field representing a comma-separated list of the subsystems bound to_the hierarchy, and the last field representing the control group.__@return the lines from {@code /proc/self/cgroup}_@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};@SuppressForbidden(reason = "access /proc/self/cgroup")_    List<String> readProcSelfCgroup() throws IOException {_        final List<String> lines = Files.readAllLines(PathUtils.get("/proc/self/cgroup"))__        assert lines != null && !lines.isEmpty()__        return lines__    };the,lines,from,code,proc,self,cgroup,this,file,represents,the,control,groups,to,which,the,elasticsearch,process,belongs,each,line,in,this,file,represents,a,control,group,hierarchy,of,the,form,p,code,d,p,with,the,first,field,representing,the,hierarchy,id,the,second,field,representing,a,comma,separated,list,of,the,subsystems,bound,to,the,hierarchy,and,the,last,field,representing,the,control,group,return,the,lines,from,code,proc,self,cgroup,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;suppress,forbidden,reason,access,proc,self,cgroup,list,string,read,proc,self,cgroup,throws,ioexception,final,list,string,lines,files,read,all,lines,path,utils,get,proc,self,cgroup,assert,lines,null,lines,is,empty,return,lines
OsProbe -> private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException;1524684173;The total CPU time in nanoseconds consumed by all tasks in the cgroup to which the Elasticsearch process belongs for the {@code_cpuacct} subsystem.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the total CPU time in nanoseconds_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctUsage(controlGroup))__    };the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,cgroup,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,total,cpu,time,in,nanoseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;private,long,get,cgroup,cpu,acct,usage,nanos,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,control,group
OsProbe -> private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException;1539615817;The total CPU time in nanoseconds consumed by all tasks in the cgroup to which the Elasticsearch process belongs for the {@code_cpuacct} subsystem.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the total CPU time in nanoseconds_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctUsage(controlGroup))__    };the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,cgroup,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,total,cpu,time,in,nanoseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;private,long,get,cgroup,cpu,acct,usage,nanos,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,control,group
OsProbe -> private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException;1541697418;The total CPU time in nanoseconds consumed by all tasks in the cgroup to which the Elasticsearch process belongs for the {@code_cpuacct} subsystem.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the total CPU time in nanoseconds_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctUsage(controlGroup))__    };the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,cgroup,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,total,cpu,time,in,nanoseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;private,long,get,cgroup,cpu,acct,usage,nanos,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,control,group
OsProbe -> private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException;1542050877;The total CPU time in nanoseconds consumed by all tasks in the cgroup to which the Elasticsearch process belongs for the {@code_cpuacct} subsystem.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the total CPU time in nanoseconds_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctUsage(controlGroup))__    };the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,cgroup,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,total,cpu,time,in,nanoseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;private,long,get,cgroup,cpu,acct,usage,nanos,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,control,group
OsProbe -> private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException;1542069072;The total CPU time in nanoseconds consumed by all tasks in the cgroup to which the Elasticsearch process belongs for the {@code_cpuacct} subsystem.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the total CPU time in nanoseconds_@throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group;private long getCgroupCpuAcctUsageNanos(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuAcctUsage(controlGroup))__    };the,total,cpu,time,in,nanoseconds,consumed,by,all,tasks,in,the,cgroup,to,which,the,elasticsearch,process,belongs,for,the,code,cpuacct,subsystem,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,total,cpu,time,in,nanoseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpuacct,usage,for,the,control,group;private,long,get,cgroup,cpu,acct,usage,nanos,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,acct,usage,control,group
OsProbe -> private Map<String, String> getControlGroups() throws IOException;1524684173;A map of the control groups to which the Elasticsearch process belongs. Note that this is a map because the control groups can vary_from subsystem to subsystem. Additionally, this map can not be cached because a running process can be reclassified.__@return a map from subsystems to the control group for the Elasticsearch process._@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};private Map<String, String> getControlGroups() throws IOException {_        final List<String> lines = readProcSelfCgroup()__        final Map<String, String> controllerMap = new HashMap<>()__        for (final String line : lines) {_            _            final String[] fields = line.split(":")__            assert fields.length == 3__            final String[] controllers = fields[1].split(",")__            for (final String controller : controllers) {_                final String controlGroupPath__                if (CONTROL_GROUPS_HIERARCHY_OVERRIDE != null) {_                    _                    controlGroupPath = CONTROL_GROUPS_HIERARCHY_OVERRIDE__                } else {_                    controlGroupPath = fields[2]__                }_                final String previous = controllerMap.put(controller, controlGroupPath)__                assert previous == null__            }_        }_        return controllerMap__    };a,map,of,the,control,groups,to,which,the,elasticsearch,process,belongs,note,that,this,is,a,map,because,the,control,groups,can,vary,from,subsystem,to,subsystem,additionally,this,map,can,not,be,cached,because,a,running,process,can,be,reclassified,return,a,map,from,subsystems,to,the,control,group,for,the,elasticsearch,process,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;private,map,string,string,get,control,groups,throws,ioexception,final,list,string,lines,read,proc,self,cgroup,final,map,string,string,controller,map,new,hash,map,for,final,string,line,lines,final,string,fields,line,split,assert,fields,length,3,final,string,controllers,fields,1,split,for,final,string,controller,controllers,final,string,control,group,path,if,null,control,group,path,else,control,group,path,fields,2,final,string,previous,controller,map,put,controller,control,group,path,assert,previous,null,return,controller,map
OsProbe -> private Map<String, String> getControlGroups() throws IOException;1539615817;A map of the control groups to which the Elasticsearch process belongs. Note that this is a map because the control groups can vary_from subsystem to subsystem. Additionally, this map can not be cached because a running process can be reclassified.__@return a map from subsystems to the control group for the Elasticsearch process._@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};private Map<String, String> getControlGroups() throws IOException {_        final List<String> lines = readProcSelfCgroup()__        final Map<String, String> controllerMap = new HashMap<>()__        for (final String line : lines) {_            _            final String[] fields = line.split(":")__            assert fields.length == 3__            final String[] controllers = fields[1].split(",")__            for (final String controller : controllers) {_                final String controlGroupPath__                if (CONTROL_GROUPS_HIERARCHY_OVERRIDE != null) {_                    _                    controlGroupPath = CONTROL_GROUPS_HIERARCHY_OVERRIDE__                } else {_                    controlGroupPath = fields[2]__                }_                final String previous = controllerMap.put(controller, controlGroupPath)__                assert previous == null__            }_        }_        return controllerMap__    };a,map,of,the,control,groups,to,which,the,elasticsearch,process,belongs,note,that,this,is,a,map,because,the,control,groups,can,vary,from,subsystem,to,subsystem,additionally,this,map,can,not,be,cached,because,a,running,process,can,be,reclassified,return,a,map,from,subsystems,to,the,control,group,for,the,elasticsearch,process,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;private,map,string,string,get,control,groups,throws,ioexception,final,list,string,lines,read,proc,self,cgroup,final,map,string,string,controller,map,new,hash,map,for,final,string,line,lines,final,string,fields,line,split,assert,fields,length,3,final,string,controllers,fields,1,split,for,final,string,controller,controllers,final,string,control,group,path,if,null,control,group,path,else,control,group,path,fields,2,final,string,previous,controller,map,put,controller,control,group,path,assert,previous,null,return,controller,map
OsProbe -> private Map<String, String> getControlGroups() throws IOException;1541697418;A map of the control groups to which the Elasticsearch process belongs. Note that this is a map because the control groups can vary_from subsystem to subsystem. Additionally, this map can not be cached because a running process can be reclassified.__@return a map from subsystems to the control group for the Elasticsearch process._@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};private Map<String, String> getControlGroups() throws IOException {_        final List<String> lines = readProcSelfCgroup()__        final Map<String, String> controllerMap = new HashMap<>()__        for (final String line : lines) {_            _            final String[] fields = line.split(":")__            assert fields.length == 3__            final String[] controllers = fields[1].split(",")__            for (final String controller : controllers) {_                final String controlGroupPath__                if (CONTROL_GROUPS_HIERARCHY_OVERRIDE != null) {_                    _                    controlGroupPath = CONTROL_GROUPS_HIERARCHY_OVERRIDE__                } else {_                    controlGroupPath = fields[2]__                }_                final String previous = controllerMap.put(controller, controlGroupPath)__                assert previous == null__            }_        }_        return controllerMap__    };a,map,of,the,control,groups,to,which,the,elasticsearch,process,belongs,note,that,this,is,a,map,because,the,control,groups,can,vary,from,subsystem,to,subsystem,additionally,this,map,can,not,be,cached,because,a,running,process,can,be,reclassified,return,a,map,from,subsystems,to,the,control,group,for,the,elasticsearch,process,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;private,map,string,string,get,control,groups,throws,ioexception,final,list,string,lines,read,proc,self,cgroup,final,map,string,string,controller,map,new,hash,map,for,final,string,line,lines,final,string,fields,line,split,assert,fields,length,3,final,string,controllers,fields,1,split,for,final,string,controller,controllers,final,string,control,group,path,if,null,control,group,path,else,control,group,path,fields,2,final,string,previous,controller,map,put,controller,control,group,path,assert,previous,null,return,controller,map
OsProbe -> private Map<String, String> getControlGroups() throws IOException;1542050877;A map of the control groups to which the Elasticsearch process belongs. Note that this is a map because the control groups can vary_from subsystem to subsystem. Additionally, this map can not be cached because a running process can be reclassified.__@return a map from subsystems to the control group for the Elasticsearch process._@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};private Map<String, String> getControlGroups() throws IOException {_        final List<String> lines = readProcSelfCgroup()__        final Map<String, String> controllerMap = new HashMap<>()__        for (final String line : lines) {_            _            final String[] fields = line.split(":")__            assert fields.length == 3__            final String[] controllers = fields[1].split(",")__            for (final String controller : controllers) {_                final String controlGroupPath__                if (CONTROL_GROUPS_HIERARCHY_OVERRIDE != null) {_                    _                    controlGroupPath = CONTROL_GROUPS_HIERARCHY_OVERRIDE__                } else {_                    controlGroupPath = fields[2]__                }_                final String previous = controllerMap.put(controller, controlGroupPath)__                assert previous == null__            }_        }_        return controllerMap__    };a,map,of,the,control,groups,to,which,the,elasticsearch,process,belongs,note,that,this,is,a,map,because,the,control,groups,can,vary,from,subsystem,to,subsystem,additionally,this,map,can,not,be,cached,because,a,running,process,can,be,reclassified,return,a,map,from,subsystems,to,the,control,group,for,the,elasticsearch,process,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;private,map,string,string,get,control,groups,throws,ioexception,final,list,string,lines,read,proc,self,cgroup,final,map,string,string,controller,map,new,hash,map,for,final,string,line,lines,final,string,fields,line,split,assert,fields,length,3,final,string,controllers,fields,1,split,for,final,string,controller,controllers,final,string,control,group,path,if,null,control,group,path,else,control,group,path,fields,2,final,string,previous,controller,map,put,controller,control,group,path,assert,previous,null,return,controller,map
OsProbe -> private Map<String, String> getControlGroups() throws IOException;1542069072;A map of the control groups to which the Elasticsearch process belongs. Note that this is a map because the control groups can vary_from subsystem to subsystem. Additionally, this map can not be cached because a running process can be reclassified.__@return a map from subsystems to the control group for the Elasticsearch process._@throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup};private Map<String, String> getControlGroups() throws IOException {_        final List<String> lines = readProcSelfCgroup()__        final Map<String, String> controllerMap = new HashMap<>()__        for (final String line : lines) {_            _            final String[] fields = line.split(":")__            assert fields.length == 3__            final String[] controllers = fields[1].split(",")__            for (final String controller : controllers) {_                final String controlGroupPath__                if (CONTROL_GROUPS_HIERARCHY_OVERRIDE != null) {_                    _                    controlGroupPath = CONTROL_GROUPS_HIERARCHY_OVERRIDE__                } else {_                    controlGroupPath = fields[2]__                }_                final String previous = controllerMap.put(controller, controlGroupPath)__                assert previous == null__            }_        }_        return controllerMap__    };a,map,of,the,control,groups,to,which,the,elasticsearch,process,belongs,note,that,this,is,a,map,because,the,control,groups,can,vary,from,subsystem,to,subsystem,additionally,this,map,can,not,be,cached,because,a,running,process,can,be,reclassified,return,a,map,from,subsystems,to,the,control,group,for,the,elasticsearch,process,throws,ioexception,if,an,i,o,exception,occurs,reading,code,proc,self,cgroup;private,map,string,string,get,control,groups,throws,ioexception,final,list,string,lines,read,proc,self,cgroup,final,map,string,string,controller,map,new,hash,map,for,final,string,line,lines,final,string,fields,line,split,assert,fields,length,3,final,string,controllers,fields,1,split,for,final,string,controller,controllers,final,string,control,group,path,if,null,control,group,path,else,control,group,path,fields,2,final,string,previous,controller,map,put,controller,control,group,path,assert,previous,null,return,controller,map
OsProbe -> private OsStats.Cgroup getCgroup();1524684173;Basic cgroup stats.__@return basic cgroup stats, or {@code null} if an I/O exception occurred reading the cgroup stats;private OsStats.Cgroup getCgroup() {_        try {_            if (!areCgroupStatsAvailable()) {_                return null__            } else {_                final Map<String, String> controllerMap = getControlGroups()__                assert !controllerMap.isEmpty()___                final String cpuAcctControlGroup = controllerMap.get("cpuacct")__                assert cpuAcctControlGroup != null__                final long cgroupCpuAcctUsageNanos = getCgroupCpuAcctUsageNanos(cpuAcctControlGroup)___                final String cpuControlGroup = controllerMap.get("cpu")__                assert cpuControlGroup != null__                final long cgroupCpuAcctCpuCfsPeriodMicros = getCgroupCpuAcctCpuCfsPeriodMicros(cpuControlGroup)__                final long cgroupCpuAcctCpuCfsQuotaMicros = getCgroupCpuAcctCpuCfsQuotaMicros(cpuControlGroup)__                final OsStats.Cgroup.CpuStat cpuStat = getCgroupCpuAcctCpuStat(cpuControlGroup)___                final String memoryControlGroup = controllerMap.get("memory")__                assert memoryControlGroup != null__                final String cgroupMemoryLimitInBytes = getCgroupMemoryLimitInBytes(memoryControlGroup)__                final String cgroupMemoryUsageInBytes = getCgroupMemoryUsageInBytes(memoryControlGroup)___                return new OsStats.Cgroup(_                    cpuAcctControlGroup,_                    cgroupCpuAcctUsageNanos,_                    cpuControlGroup,_                    cgroupCpuAcctCpuCfsPeriodMicros,_                    cgroupCpuAcctCpuCfsQuotaMicros,_                    cpuStat,_                    memoryControlGroup,_                    cgroupMemoryLimitInBytes,_                    cgroupMemoryUsageInBytes)__            }_        } catch (final IOException e) {_            logger.debug("error reading control group stats", e)__            return null__        }_    };basic,cgroup,stats,return,basic,cgroup,stats,or,code,null,if,an,i,o,exception,occurred,reading,the,cgroup,stats;private,os,stats,cgroup,get,cgroup,try,if,are,cgroup,stats,available,return,null,else,final,map,string,string,controller,map,get,control,groups,assert,controller,map,is,empty,final,string,cpu,acct,control,group,controller,map,get,cpuacct,assert,cpu,acct,control,group,null,final,long,cgroup,cpu,acct,usage,nanos,get,cgroup,cpu,acct,usage,nanos,cpu,acct,control,group,final,string,cpu,control,group,controller,map,get,cpu,assert,cpu,control,group,null,final,long,cgroup,cpu,acct,cpu,cfs,period,micros,get,cgroup,cpu,acct,cpu,cfs,period,micros,cpu,control,group,final,long,cgroup,cpu,acct,cpu,cfs,quota,micros,get,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,control,group,final,os,stats,cgroup,cpu,stat,cpu,stat,get,cgroup,cpu,acct,cpu,stat,cpu,control,group,final,string,memory,control,group,controller,map,get,memory,assert,memory,control,group,null,final,string,cgroup,memory,limit,in,bytes,get,cgroup,memory,limit,in,bytes,memory,control,group,final,string,cgroup,memory,usage,in,bytes,get,cgroup,memory,usage,in,bytes,memory,control,group,return,new,os,stats,cgroup,cpu,acct,control,group,cgroup,cpu,acct,usage,nanos,cpu,control,group,cgroup,cpu,acct,cpu,cfs,period,micros,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,stat,memory,control,group,cgroup,memory,limit,in,bytes,cgroup,memory,usage,in,bytes,catch,final,ioexception,e,logger,debug,error,reading,control,group,stats,e,return,null
OsProbe -> private OsStats.Cgroup getCgroup();1539615817;Basic cgroup stats.__@return basic cgroup stats, or {@code null} if an I/O exception occurred reading the cgroup stats;private OsStats.Cgroup getCgroup() {_        try {_            if (!areCgroupStatsAvailable()) {_                return null__            } else {_                final Map<String, String> controllerMap = getControlGroups()__                assert !controllerMap.isEmpty()___                final String cpuAcctControlGroup = controllerMap.get("cpuacct")__                assert cpuAcctControlGroup != null__                final long cgroupCpuAcctUsageNanos = getCgroupCpuAcctUsageNanos(cpuAcctControlGroup)___                final String cpuControlGroup = controllerMap.get("cpu")__                assert cpuControlGroup != null__                final long cgroupCpuAcctCpuCfsPeriodMicros = getCgroupCpuAcctCpuCfsPeriodMicros(cpuControlGroup)__                final long cgroupCpuAcctCpuCfsQuotaMicros = getCgroupCpuAcctCpuCfsQuotaMicros(cpuControlGroup)__                final OsStats.Cgroup.CpuStat cpuStat = getCgroupCpuAcctCpuStat(cpuControlGroup)___                final String memoryControlGroup = controllerMap.get("memory")__                assert memoryControlGroup != null__                final String cgroupMemoryLimitInBytes = getCgroupMemoryLimitInBytes(memoryControlGroup)__                final String cgroupMemoryUsageInBytes = getCgroupMemoryUsageInBytes(memoryControlGroup)___                return new OsStats.Cgroup(_                    cpuAcctControlGroup,_                    cgroupCpuAcctUsageNanos,_                    cpuControlGroup,_                    cgroupCpuAcctCpuCfsPeriodMicros,_                    cgroupCpuAcctCpuCfsQuotaMicros,_                    cpuStat,_                    memoryControlGroup,_                    cgroupMemoryLimitInBytes,_                    cgroupMemoryUsageInBytes)__            }_        } catch (final IOException e) {_            logger.debug("error reading control group stats", e)__            return null__        }_    };basic,cgroup,stats,return,basic,cgroup,stats,or,code,null,if,an,i,o,exception,occurred,reading,the,cgroup,stats;private,os,stats,cgroup,get,cgroup,try,if,are,cgroup,stats,available,return,null,else,final,map,string,string,controller,map,get,control,groups,assert,controller,map,is,empty,final,string,cpu,acct,control,group,controller,map,get,cpuacct,assert,cpu,acct,control,group,null,final,long,cgroup,cpu,acct,usage,nanos,get,cgroup,cpu,acct,usage,nanos,cpu,acct,control,group,final,string,cpu,control,group,controller,map,get,cpu,assert,cpu,control,group,null,final,long,cgroup,cpu,acct,cpu,cfs,period,micros,get,cgroup,cpu,acct,cpu,cfs,period,micros,cpu,control,group,final,long,cgroup,cpu,acct,cpu,cfs,quota,micros,get,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,control,group,final,os,stats,cgroup,cpu,stat,cpu,stat,get,cgroup,cpu,acct,cpu,stat,cpu,control,group,final,string,memory,control,group,controller,map,get,memory,assert,memory,control,group,null,final,string,cgroup,memory,limit,in,bytes,get,cgroup,memory,limit,in,bytes,memory,control,group,final,string,cgroup,memory,usage,in,bytes,get,cgroup,memory,usage,in,bytes,memory,control,group,return,new,os,stats,cgroup,cpu,acct,control,group,cgroup,cpu,acct,usage,nanos,cpu,control,group,cgroup,cpu,acct,cpu,cfs,period,micros,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,stat,memory,control,group,cgroup,memory,limit,in,bytes,cgroup,memory,usage,in,bytes,catch,final,ioexception,e,logger,debug,error,reading,control,group,stats,e,return,null
OsProbe -> private OsStats.Cgroup getCgroup();1541697418;Basic cgroup stats.__@return basic cgroup stats, or {@code null} if an I/O exception occurred reading the cgroup stats;private OsStats.Cgroup getCgroup() {_        try {_            if (!areCgroupStatsAvailable()) {_                return null__            } else {_                final Map<String, String> controllerMap = getControlGroups()__                assert !controllerMap.isEmpty()___                final String cpuAcctControlGroup = controllerMap.get("cpuacct")__                assert cpuAcctControlGroup != null__                final long cgroupCpuAcctUsageNanos = getCgroupCpuAcctUsageNanos(cpuAcctControlGroup)___                final String cpuControlGroup = controllerMap.get("cpu")__                assert cpuControlGroup != null__                final long cgroupCpuAcctCpuCfsPeriodMicros = getCgroupCpuAcctCpuCfsPeriodMicros(cpuControlGroup)__                final long cgroupCpuAcctCpuCfsQuotaMicros = getCgroupCpuAcctCpuCfsQuotaMicros(cpuControlGroup)__                final OsStats.Cgroup.CpuStat cpuStat = getCgroupCpuAcctCpuStat(cpuControlGroup)___                final String memoryControlGroup = controllerMap.get("memory")__                assert memoryControlGroup != null__                final String cgroupMemoryLimitInBytes = getCgroupMemoryLimitInBytes(memoryControlGroup)__                final String cgroupMemoryUsageInBytes = getCgroupMemoryUsageInBytes(memoryControlGroup)___                return new OsStats.Cgroup(_                    cpuAcctControlGroup,_                    cgroupCpuAcctUsageNanos,_                    cpuControlGroup,_                    cgroupCpuAcctCpuCfsPeriodMicros,_                    cgroupCpuAcctCpuCfsQuotaMicros,_                    cpuStat,_                    memoryControlGroup,_                    cgroupMemoryLimitInBytes,_                    cgroupMemoryUsageInBytes)__            }_        } catch (final IOException e) {_            logger.debug("error reading control group stats", e)__            return null__        }_    };basic,cgroup,stats,return,basic,cgroup,stats,or,code,null,if,an,i,o,exception,occurred,reading,the,cgroup,stats;private,os,stats,cgroup,get,cgroup,try,if,are,cgroup,stats,available,return,null,else,final,map,string,string,controller,map,get,control,groups,assert,controller,map,is,empty,final,string,cpu,acct,control,group,controller,map,get,cpuacct,assert,cpu,acct,control,group,null,final,long,cgroup,cpu,acct,usage,nanos,get,cgroup,cpu,acct,usage,nanos,cpu,acct,control,group,final,string,cpu,control,group,controller,map,get,cpu,assert,cpu,control,group,null,final,long,cgroup,cpu,acct,cpu,cfs,period,micros,get,cgroup,cpu,acct,cpu,cfs,period,micros,cpu,control,group,final,long,cgroup,cpu,acct,cpu,cfs,quota,micros,get,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,control,group,final,os,stats,cgroup,cpu,stat,cpu,stat,get,cgroup,cpu,acct,cpu,stat,cpu,control,group,final,string,memory,control,group,controller,map,get,memory,assert,memory,control,group,null,final,string,cgroup,memory,limit,in,bytes,get,cgroup,memory,limit,in,bytes,memory,control,group,final,string,cgroup,memory,usage,in,bytes,get,cgroup,memory,usage,in,bytes,memory,control,group,return,new,os,stats,cgroup,cpu,acct,control,group,cgroup,cpu,acct,usage,nanos,cpu,control,group,cgroup,cpu,acct,cpu,cfs,period,micros,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,stat,memory,control,group,cgroup,memory,limit,in,bytes,cgroup,memory,usage,in,bytes,catch,final,ioexception,e,logger,debug,error,reading,control,group,stats,e,return,null
OsProbe -> private OsStats.Cgroup getCgroup();1542050877;Basic cgroup stats.__@return basic cgroup stats, or {@code null} if an I/O exception occurred reading the cgroup stats;private OsStats.Cgroup getCgroup() {_        try {_            if (!areCgroupStatsAvailable()) {_                return null__            } else {_                final Map<String, String> controllerMap = getControlGroups()__                assert !controllerMap.isEmpty()___                final String cpuAcctControlGroup = controllerMap.get("cpuacct")__                assert cpuAcctControlGroup != null__                final long cgroupCpuAcctUsageNanos = getCgroupCpuAcctUsageNanos(cpuAcctControlGroup)___                final String cpuControlGroup = controllerMap.get("cpu")__                assert cpuControlGroup != null__                final long cgroupCpuAcctCpuCfsPeriodMicros = getCgroupCpuAcctCpuCfsPeriodMicros(cpuControlGroup)__                final long cgroupCpuAcctCpuCfsQuotaMicros = getCgroupCpuAcctCpuCfsQuotaMicros(cpuControlGroup)__                final OsStats.Cgroup.CpuStat cpuStat = getCgroupCpuAcctCpuStat(cpuControlGroup)___                final String memoryControlGroup = controllerMap.get("memory")__                assert memoryControlGroup != null__                final String cgroupMemoryLimitInBytes = getCgroupMemoryLimitInBytes(memoryControlGroup)__                final String cgroupMemoryUsageInBytes = getCgroupMemoryUsageInBytes(memoryControlGroup)___                return new OsStats.Cgroup(_                    cpuAcctControlGroup,_                    cgroupCpuAcctUsageNanos,_                    cpuControlGroup,_                    cgroupCpuAcctCpuCfsPeriodMicros,_                    cgroupCpuAcctCpuCfsQuotaMicros,_                    cpuStat,_                    memoryControlGroup,_                    cgroupMemoryLimitInBytes,_                    cgroupMemoryUsageInBytes)__            }_        } catch (final IOException e) {_            logger.debug("error reading control group stats", e)__            return null__        }_    };basic,cgroup,stats,return,basic,cgroup,stats,or,code,null,if,an,i,o,exception,occurred,reading,the,cgroup,stats;private,os,stats,cgroup,get,cgroup,try,if,are,cgroup,stats,available,return,null,else,final,map,string,string,controller,map,get,control,groups,assert,controller,map,is,empty,final,string,cpu,acct,control,group,controller,map,get,cpuacct,assert,cpu,acct,control,group,null,final,long,cgroup,cpu,acct,usage,nanos,get,cgroup,cpu,acct,usage,nanos,cpu,acct,control,group,final,string,cpu,control,group,controller,map,get,cpu,assert,cpu,control,group,null,final,long,cgroup,cpu,acct,cpu,cfs,period,micros,get,cgroup,cpu,acct,cpu,cfs,period,micros,cpu,control,group,final,long,cgroup,cpu,acct,cpu,cfs,quota,micros,get,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,control,group,final,os,stats,cgroup,cpu,stat,cpu,stat,get,cgroup,cpu,acct,cpu,stat,cpu,control,group,final,string,memory,control,group,controller,map,get,memory,assert,memory,control,group,null,final,string,cgroup,memory,limit,in,bytes,get,cgroup,memory,limit,in,bytes,memory,control,group,final,string,cgroup,memory,usage,in,bytes,get,cgroup,memory,usage,in,bytes,memory,control,group,return,new,os,stats,cgroup,cpu,acct,control,group,cgroup,cpu,acct,usage,nanos,cpu,control,group,cgroup,cpu,acct,cpu,cfs,period,micros,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,stat,memory,control,group,cgroup,memory,limit,in,bytes,cgroup,memory,usage,in,bytes,catch,final,ioexception,e,logger,debug,error,reading,control,group,stats,e,return,null
OsProbe -> private OsStats.Cgroup getCgroup();1542069072;Basic cgroup stats.__@return basic cgroup stats, or {@code null} if an I/O exception occurred reading the cgroup stats;private OsStats.Cgroup getCgroup() {_        try {_            if (!areCgroupStatsAvailable()) {_                return null__            } else {_                final Map<String, String> controllerMap = getControlGroups()__                assert !controllerMap.isEmpty()___                final String cpuAcctControlGroup = controllerMap.get("cpuacct")__                assert cpuAcctControlGroup != null__                final long cgroupCpuAcctUsageNanos = getCgroupCpuAcctUsageNanos(cpuAcctControlGroup)___                final String cpuControlGroup = controllerMap.get("cpu")__                assert cpuControlGroup != null__                final long cgroupCpuAcctCpuCfsPeriodMicros = getCgroupCpuAcctCpuCfsPeriodMicros(cpuControlGroup)__                final long cgroupCpuAcctCpuCfsQuotaMicros = getCgroupCpuAcctCpuCfsQuotaMicros(cpuControlGroup)__                final OsStats.Cgroup.CpuStat cpuStat = getCgroupCpuAcctCpuStat(cpuControlGroup)___                final String memoryControlGroup = controllerMap.get("memory")__                assert memoryControlGroup != null__                final String cgroupMemoryLimitInBytes = getCgroupMemoryLimitInBytes(memoryControlGroup)__                final String cgroupMemoryUsageInBytes = getCgroupMemoryUsageInBytes(memoryControlGroup)___                return new OsStats.Cgroup(_                    cpuAcctControlGroup,_                    cgroupCpuAcctUsageNanos,_                    cpuControlGroup,_                    cgroupCpuAcctCpuCfsPeriodMicros,_                    cgroupCpuAcctCpuCfsQuotaMicros,_                    cpuStat,_                    memoryControlGroup,_                    cgroupMemoryLimitInBytes,_                    cgroupMemoryUsageInBytes)__            }_        } catch (final IOException e) {_            logger.debug("error reading control group stats", e)__            return null__        }_    };basic,cgroup,stats,return,basic,cgroup,stats,or,code,null,if,an,i,o,exception,occurred,reading,the,cgroup,stats;private,os,stats,cgroup,get,cgroup,try,if,are,cgroup,stats,available,return,null,else,final,map,string,string,controller,map,get,control,groups,assert,controller,map,is,empty,final,string,cpu,acct,control,group,controller,map,get,cpuacct,assert,cpu,acct,control,group,null,final,long,cgroup,cpu,acct,usage,nanos,get,cgroup,cpu,acct,usage,nanos,cpu,acct,control,group,final,string,cpu,control,group,controller,map,get,cpu,assert,cpu,control,group,null,final,long,cgroup,cpu,acct,cpu,cfs,period,micros,get,cgroup,cpu,acct,cpu,cfs,period,micros,cpu,control,group,final,long,cgroup,cpu,acct,cpu,cfs,quota,micros,get,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,control,group,final,os,stats,cgroup,cpu,stat,cpu,stat,get,cgroup,cpu,acct,cpu,stat,cpu,control,group,final,string,memory,control,group,controller,map,get,memory,assert,memory,control,group,null,final,string,cgroup,memory,limit,in,bytes,get,cgroup,memory,limit,in,bytes,memory,control,group,final,string,cgroup,memory,usage,in,bytes,get,cgroup,memory,usage,in,bytes,memory,control,group,return,new,os,stats,cgroup,cpu,acct,control,group,cgroup,cpu,acct,usage,nanos,cpu,control,group,cgroup,cpu,acct,cpu,cfs,period,micros,cgroup,cpu,acct,cpu,cfs,quota,micros,cpu,stat,memory,control,group,cgroup,memory,limit,in,bytes,cgroup,memory,usage,in,bytes,catch,final,ioexception,e,logger,debug,error,reading,control,group,stats,e,return,null
OsProbe -> private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException;1524684173;The total period of time in microseconds for how frequently the Elasticsearch control group's access to CPU resources will be_reallocated.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota period in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuCfsPeriod(controlGroup))__    };the,total,period,of,time,in,microseconds,for,how,frequently,the,elasticsearch,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,period,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,period,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,control,group
OsProbe -> private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException;1539615817;The total period of time in microseconds for how frequently the Elasticsearch control group's access to CPU resources will be_reallocated.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota period in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuCfsPeriod(controlGroup))__    };the,total,period,of,time,in,microseconds,for,how,frequently,the,elasticsearch,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,period,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,period,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,control,group
OsProbe -> private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException;1541697418;The total period of time in microseconds for how frequently the Elasticsearch control group's access to CPU resources will be_reallocated.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota period in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuCfsPeriod(controlGroup))__    };the,total,period,of,time,in,microseconds,for,how,frequently,the,elasticsearch,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,period,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,period,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,control,group
OsProbe -> private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException;1542050877;The total period of time in microseconds for how frequently the Elasticsearch control group's access to CPU resources will be_reallocated.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota period in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuCfsPeriod(controlGroup))__    };the,total,period,of,time,in,microseconds,for,how,frequently,the,elasticsearch,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,period,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,period,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,control,group
OsProbe -> private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException;1542069072;The total period of time in microseconds for how frequently the Elasticsearch control group's access to CPU resources will be_reallocated.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CFS quota period in microseconds_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;private long getCgroupCpuAcctCpuCfsPeriodMicros(final String controlGroup) throws IOException {_        return Long.parseLong(readSysFsCgroupCpuAcctCpuCfsPeriod(controlGroup))__    };the,total,period,of,time,in,microseconds,for,how,frequently,the,elasticsearch,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cfs,quota,period,in,microseconds,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;private,long,get,cgroup,cpu,acct,cpu,cfs,period,micros,final,string,control,group,throws,ioexception,return,long,parse,long,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,control,group
OsProbe -> private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1524684173;The CPU time statistics for all tasks in the Elasticsearch control group.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CPU time statistics_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = readSysFsCgroupCpuAcctCpuStat(controlGroup)__        long numberOfPeriods = -1__        long numberOfTimesThrottled = -1__        long timeThrottledNanos = -1__        for (final String line : lines) {_            final String[] fields = line.split("\\s+")__            switch (fields[0]) {_                case "nr_periods":_                    numberOfPeriods = Long.parseLong(fields[1])__                    break__                case "nr_throttled":_                    numberOfTimesThrottled = Long.parseLong(fields[1])__                    break__                case "throttled_time":_                    timeThrottledNanos = Long.parseLong(fields[1])__                    break__            }_        }_        assert numberOfPeriods != -1__        assert numberOfTimesThrottled != -1__        assert timeThrottledNanos != -1__        return new OsStats.Cgroup.CpuStat(numberOfPeriods, numberOfTimesThrottled, timeThrottledNanos)__    };the,cpu,time,statistics,for,all,tasks,in,the,elasticsearch,control,group,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cpu,time,statistics,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;private,os,stats,cgroup,cpu,stat,get,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,read,sys,fs,cgroup,cpu,acct,cpu,stat,control,group,long,number,of,periods,1,long,number,of,times,throttled,1,long,time,throttled,nanos,1,for,final,string,line,lines,final,string,fields,line,split,s,switch,fields,0,case,number,of,periods,long,parse,long,fields,1,break,case,number,of,times,throttled,long,parse,long,fields,1,break,case,time,throttled,nanos,long,parse,long,fields,1,break,assert,number,of,periods,1,assert,number,of,times,throttled,1,assert,time,throttled,nanos,1,return,new,os,stats,cgroup,cpu,stat,number,of,periods,number,of,times,throttled,time,throttled,nanos
OsProbe -> private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1539615817;The CPU time statistics for all tasks in the Elasticsearch control group.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CPU time statistics_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = readSysFsCgroupCpuAcctCpuStat(controlGroup)__        long numberOfPeriods = -1__        long numberOfTimesThrottled = -1__        long timeThrottledNanos = -1__        for (final String line : lines) {_            final String[] fields = line.split("\\s+")__            switch (fields[0]) {_                case "nr_periods":_                    numberOfPeriods = Long.parseLong(fields[1])__                    break__                case "nr_throttled":_                    numberOfTimesThrottled = Long.parseLong(fields[1])__                    break__                case "throttled_time":_                    timeThrottledNanos = Long.parseLong(fields[1])__                    break__            }_        }_        assert numberOfPeriods != -1__        assert numberOfTimesThrottled != -1__        assert timeThrottledNanos != -1__        return new OsStats.Cgroup.CpuStat(numberOfPeriods, numberOfTimesThrottled, timeThrottledNanos)__    };the,cpu,time,statistics,for,all,tasks,in,the,elasticsearch,control,group,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cpu,time,statistics,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;private,os,stats,cgroup,cpu,stat,get,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,read,sys,fs,cgroup,cpu,acct,cpu,stat,control,group,long,number,of,periods,1,long,number,of,times,throttled,1,long,time,throttled,nanos,1,for,final,string,line,lines,final,string,fields,line,split,s,switch,fields,0,case,number,of,periods,long,parse,long,fields,1,break,case,number,of,times,throttled,long,parse,long,fields,1,break,case,time,throttled,nanos,long,parse,long,fields,1,break,assert,number,of,periods,1,assert,number,of,times,throttled,1,assert,time,throttled,nanos,1,return,new,os,stats,cgroup,cpu,stat,number,of,periods,number,of,times,throttled,time,throttled,nanos
OsProbe -> private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1541697418;The CPU time statistics for all tasks in the Elasticsearch control group.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CPU time statistics_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = readSysFsCgroupCpuAcctCpuStat(controlGroup)__        long numberOfPeriods = -1__        long numberOfTimesThrottled = -1__        long timeThrottledNanos = -1__        for (final String line : lines) {_            final String[] fields = line.split("\\s+")__            switch (fields[0]) {_                case "nr_periods":_                    numberOfPeriods = Long.parseLong(fields[1])__                    break__                case "nr_throttled":_                    numberOfTimesThrottled = Long.parseLong(fields[1])__                    break__                case "throttled_time":_                    timeThrottledNanos = Long.parseLong(fields[1])__                    break__            }_        }_        assert numberOfPeriods != -1__        assert numberOfTimesThrottled != -1__        assert timeThrottledNanos != -1__        return new OsStats.Cgroup.CpuStat(numberOfPeriods, numberOfTimesThrottled, timeThrottledNanos)__    };the,cpu,time,statistics,for,all,tasks,in,the,elasticsearch,control,group,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cpu,time,statistics,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;private,os,stats,cgroup,cpu,stat,get,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,read,sys,fs,cgroup,cpu,acct,cpu,stat,control,group,long,number,of,periods,1,long,number,of,times,throttled,1,long,time,throttled,nanos,1,for,final,string,line,lines,final,string,fields,line,split,s,switch,fields,0,case,number,of,periods,long,parse,long,fields,1,break,case,number,of,times,throttled,long,parse,long,fields,1,break,case,time,throttled,nanos,long,parse,long,fields,1,break,assert,number,of,periods,1,assert,number,of,times,throttled,1,assert,time,throttled,nanos,1,return,new,os,stats,cgroup,cpu,stat,number,of,periods,number,of,times,throttled,time,throttled,nanos
OsProbe -> private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1542050877;The CPU time statistics for all tasks in the Elasticsearch control group.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CPU time statistics_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = readSysFsCgroupCpuAcctCpuStat(controlGroup)__        long numberOfPeriods = -1__        long numberOfTimesThrottled = -1__        long timeThrottledNanos = -1__        for (final String line : lines) {_            final String[] fields = line.split("\\s+")__            switch (fields[0]) {_                case "nr_periods":_                    numberOfPeriods = Long.parseLong(fields[1])__                    break__                case "nr_throttled":_                    numberOfTimesThrottled = Long.parseLong(fields[1])__                    break__                case "throttled_time":_                    timeThrottledNanos = Long.parseLong(fields[1])__                    break__            }_        }_        assert numberOfPeriods != -1__        assert numberOfTimesThrottled != -1__        assert timeThrottledNanos != -1__        return new OsStats.Cgroup.CpuStat(numberOfPeriods, numberOfTimesThrottled, timeThrottledNanos)__    };the,cpu,time,statistics,for,all,tasks,in,the,elasticsearch,control,group,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cpu,time,statistics,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;private,os,stats,cgroup,cpu,stat,get,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,read,sys,fs,cgroup,cpu,acct,cpu,stat,control,group,long,number,of,periods,1,long,number,of,times,throttled,1,long,time,throttled,nanos,1,for,final,string,line,lines,final,string,fields,line,split,s,switch,fields,0,case,number,of,periods,long,parse,long,fields,1,break,case,number,of,times,throttled,long,parse,long,fields,1,break,case,time,throttled,nanos,long,parse,long,fields,1,break,assert,number,of,periods,1,assert,number,of,times,throttled,1,assert,time,throttled,nanos,1,return,new,os,stats,cgroup,cpu,stat,number,of,periods,number,of,times,throttled,time,throttled,nanos
OsProbe -> private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException;1542069072;The CPU time statistics for all tasks in the Elasticsearch control group.__@param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem_@return the CPU time statistics_@throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group;private OsStats.Cgroup.CpuStat getCgroupCpuAcctCpuStat(final String controlGroup) throws IOException {_        final List<String> lines = readSysFsCgroupCpuAcctCpuStat(controlGroup)__        long numberOfPeriods = -1__        long numberOfTimesThrottled = -1__        long timeThrottledNanos = -1__        for (final String line : lines) {_            final String[] fields = line.split("\\s+")__            switch (fields[0]) {_                case "nr_periods":_                    numberOfPeriods = Long.parseLong(fields[1])__                    break__                case "nr_throttled":_                    numberOfTimesThrottled = Long.parseLong(fields[1])__                    break__                case "throttled_time":_                    timeThrottledNanos = Long.parseLong(fields[1])__                    break__            }_        }_        assert numberOfPeriods != -1__        assert numberOfTimesThrottled != -1__        assert timeThrottledNanos != -1__        return new OsStats.Cgroup.CpuStat(numberOfPeriods, numberOfTimesThrottled, timeThrottledNanos)__    };the,cpu,time,statistics,for,all,tasks,in,the,elasticsearch,control,group,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,cpuacct,subsystem,return,the,cpu,time,statistics,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,stat,for,the,control,group;private,os,stats,cgroup,cpu,stat,get,cgroup,cpu,acct,cpu,stat,final,string,control,group,throws,ioexception,final,list,string,lines,read,sys,fs,cgroup,cpu,acct,cpu,stat,control,group,long,number,of,periods,1,long,number,of,times,throttled,1,long,time,throttled,nanos,1,for,final,string,line,lines,final,string,fields,line,split,s,switch,fields,0,case,number,of,periods,long,parse,long,fields,1,break,case,number,of,times,throttled,long,parse,long,fields,1,break,case,time,throttled,nanos,long,parse,long,fields,1,break,assert,number,of,periods,1,assert,number,of,times,throttled,1,assert,time,throttled,nanos,1,return,new,os,stats,cgroup,cpu,stat,number,of,periods,number,of,times,throttled,time,throttled,nanos
OsProbe -> private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1524684173;The maximum amount of user memory (including file cache)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the maximum amount of user memory (including file cache)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryLimitInBytes(controlGroup)__    };the,maximum,amount,of,user,memory,including,file,cache,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,maximum,amount,of,user,memory,including,file,cache,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,limit,in,bytes,control,group
OsProbe -> private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1539615817;The maximum amount of user memory (including file cache)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the maximum amount of user memory (including file cache)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryLimitInBytes(controlGroup)__    };the,maximum,amount,of,user,memory,including,file,cache,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,maximum,amount,of,user,memory,including,file,cache,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,limit,in,bytes,control,group
OsProbe -> private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1541697418;The maximum amount of user memory (including file cache)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the maximum amount of user memory (including file cache)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryLimitInBytes(controlGroup)__    };the,maximum,amount,of,user,memory,including,file,cache,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,maximum,amount,of,user,memory,including,file,cache,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,limit,in,bytes,control,group
OsProbe -> private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1542050877;The maximum amount of user memory (including file cache)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the maximum amount of user memory (including file cache)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryLimitInBytes(controlGroup)__    };the,maximum,amount,of,user,memory,including,file,cache,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,maximum,amount,of,user,memory,including,file,cache,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,limit,in,bytes,control,group
OsProbe -> private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1542069072;The maximum amount of user memory (including file cache)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the maximum amount of user memory (including file cache)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryLimitInBytes(controlGroup)__    };the,maximum,amount,of,user,memory,including,file,cache,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,maximum,amount,of,user,memory,including,file,cache,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,limit,in,bytes,control,group
OsProbe -> public long getTotalPhysicalMemorySize();1524684173;Returns the total amount of physical memory in bytes.;public long getTotalPhysicalMemorySize() {_        if (getTotalPhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getTotalPhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,physical,memory,in,bytes;public,long,get,total,physical,memory,size,if,get,total,physical,memory,size,null,return,1,try,return,long,get,total,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalPhysicalMemorySize();1539615817;Returns the total amount of physical memory in bytes.;public long getTotalPhysicalMemorySize() {_        if (getTotalPhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getTotalPhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,physical,memory,in,bytes;public,long,get,total,physical,memory,size,if,get,total,physical,memory,size,null,return,1,try,return,long,get,total,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalPhysicalMemorySize();1541697418;Returns the total amount of physical memory in bytes.;public long getTotalPhysicalMemorySize() {_        if (getTotalPhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getTotalPhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,physical,memory,in,bytes;public,long,get,total,physical,memory,size,if,get,total,physical,memory,size,null,return,1,try,return,long,get,total,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalPhysicalMemorySize();1542050877;Returns the total amount of physical memory in bytes.;public long getTotalPhysicalMemorySize() {_        if (getTotalPhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getTotalPhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,physical,memory,in,bytes;public,long,get,total,physical,memory,size,if,get,total,physical,memory,size,null,return,1,try,return,long,get,total,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalPhysicalMemorySize();1542069072;Returns the total amount of physical memory in bytes.;public long getTotalPhysicalMemorySize() {_        if (getTotalPhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getTotalPhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,physical,memory,in,bytes;public,long,get,total,physical,memory,size,if,get,total,physical,memory,size,null,return,1,try,return,long,get,total,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1524684173;The total current memory usage by processes in the cgroup (in bytes)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the total current memory usage by processes in the cgroup (in bytes)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryUsageInBytes(controlGroup)__    };the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,usage,in,bytes,control,group
OsProbe -> private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1539615817;The total current memory usage by processes in the cgroup (in bytes)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the total current memory usage by processes in the cgroup (in bytes)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryUsageInBytes(controlGroup)__    };the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,usage,in,bytes,control,group
OsProbe -> private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1541697418;The total current memory usage by processes in the cgroup (in bytes)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the total current memory usage by processes in the cgroup (in bytes)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryUsageInBytes(controlGroup)__    };the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,usage,in,bytes,control,group
OsProbe -> private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1542050877;The total current memory usage by processes in the cgroup (in bytes)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the total current memory usage by processes in the cgroup (in bytes)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryUsageInBytes(controlGroup)__    };the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,usage,in,bytes,control,group
OsProbe -> private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1542069072;The total current memory usage by processes in the cgroup (in bytes)._If there is no limit then some Linux versions return the maximum value that can be stored in an_unsigned 64 bit number, and this will overflow a long, hence the result type is <code>String</code>._(The alternative would have been <code>BigInteger</code> but then it would not be possible to index_the OS stats document into Elasticsearch without losing information, as <code>BigInteger</code> is_not a supported Elasticsearch type.)__@param controlGroup the control group for the Elasticsearch process for the {@code memory} subsystem_@return the total current memory usage by processes in the cgroup (in bytes)_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;private String getCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSysFsCgroupMemoryUsageInBytes(controlGroup)__    };the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,if,there,is,no,limit,then,some,linux,versions,return,the,maximum,value,that,can,be,stored,in,an,unsigned,64,bit,number,and,this,will,overflow,a,long,hence,the,result,type,is,code,string,code,the,alternative,would,have,been,code,big,integer,code,but,then,it,would,not,be,possible,to,index,the,os,stats,document,into,elasticsearch,without,losing,information,as,code,big,integer,code,is,not,a,supported,elasticsearch,type,param,control,group,the,control,group,for,the,elasticsearch,process,for,the,code,memory,subsystem,return,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;private,string,get,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,sys,fs,cgroup,memory,usage,in,bytes,control,group
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1524684173;Returns the line from {@code memory.usage_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the total current memory usage by processes in the cgroup (in bytes).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.usage_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.usage_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.usage_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1539615817;Returns the line from {@code memory.usage_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the total current memory usage by processes in the cgroup (in bytes).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.usage_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.usage_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.usage_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1541697418;Returns the line from {@code memory.usage_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the total current memory usage by processes in the cgroup (in bytes).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.usage_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.usage_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.usage_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1542050877;Returns the line from {@code memory.usage_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the total current memory usage by processes in the cgroup (in bytes).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.usage_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.usage_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.usage_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException;1542069072;Returns the line from {@code memory.usage_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the total current memory usage by processes in the cgroup (in bytes).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.usage_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.usage_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryUsageInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.usage_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,total,current,memory,usage,by,processes,in,the,cgroup,in,bytes,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,usage,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> public long getFreeSwapSpaceSize();1524684173;Returns the amount of free swap space in bytes.;public long getFreeSwapSpaceSize() {_        if (getFreeSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getFreeSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,swap,space,in,bytes;public,long,get,free,swap,space,size,if,get,free,swap,space,size,null,return,1,try,return,long,get,free,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getFreeSwapSpaceSize();1539615817;Returns the amount of free swap space in bytes.;public long getFreeSwapSpaceSize() {_        if (getFreeSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getFreeSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,swap,space,in,bytes;public,long,get,free,swap,space,size,if,get,free,swap,space,size,null,return,1,try,return,long,get,free,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getFreeSwapSpaceSize();1541697418;Returns the amount of free swap space in bytes.;public long getFreeSwapSpaceSize() {_        if (getFreeSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getFreeSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,swap,space,in,bytes;public,long,get,free,swap,space,size,if,get,free,swap,space,size,null,return,1,try,return,long,get,free,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getFreeSwapSpaceSize();1542050877;Returns the amount of free swap space in bytes.;public long getFreeSwapSpaceSize() {_        if (getFreeSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getFreeSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,swap,space,in,bytes;public,long,get,free,swap,space,size,if,get,free,swap,space,size,null,return,1,try,return,long,get,free,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getFreeSwapSpaceSize();1542069072;Returns the amount of free swap space in bytes.;public long getFreeSwapSpaceSize() {_        if (getFreeSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getFreeSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,swap,space,in,bytes;public,long,get,free,swap,space,size,if,get,free,swap,space,size,null,return,1,try,return,long,get,free,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalSwapSpaceSize();1524684173;Returns the total amount of swap space in bytes.;public long getTotalSwapSpaceSize() {_        if (getTotalSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getTotalSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,swap,space,in,bytes;public,long,get,total,swap,space,size,if,get,total,swap,space,size,null,return,1,try,return,long,get,total,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalSwapSpaceSize();1539615817;Returns the total amount of swap space in bytes.;public long getTotalSwapSpaceSize() {_        if (getTotalSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getTotalSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,swap,space,in,bytes;public,long,get,total,swap,space,size,if,get,total,swap,space,size,null,return,1,try,return,long,get,total,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalSwapSpaceSize();1541697418;Returns the total amount of swap space in bytes.;public long getTotalSwapSpaceSize() {_        if (getTotalSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getTotalSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,swap,space,in,bytes;public,long,get,total,swap,space,size,if,get,total,swap,space,size,null,return,1,try,return,long,get,total,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalSwapSpaceSize();1542050877;Returns the total amount of swap space in bytes.;public long getTotalSwapSpaceSize() {_        if (getTotalSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getTotalSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,swap,space,in,bytes;public,long,get,total,swap,space,size,if,get,total,swap,space,size,null,return,1,try,return,long,get,total,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getTotalSwapSpaceSize();1542069072;Returns the total amount of swap space in bytes.;public long getTotalSwapSpaceSize() {_        if (getTotalSwapSpaceSize == null) {_            return -1__        }_        try {_            return (long) getTotalSwapSpaceSize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,total,amount,of,swap,space,in,bytes;public,long,get,total,swap,space,size,if,get,total,swap,space,size,null,return,1,try,return,long,get,total,swap,space,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> @SuppressForbidden(reason = "access /etc/os-release or /usr/lib/os-release")     List<String> readOsRelease() throws IOException;1541697418;The lines from {@code /etc/os-release} or {@code /usr/lib/os-release} as a fallback. These file represents identification of the_underlying operating system. The structure of the file is newlines of key-value pairs of shell-compatible variable assignments.__@return the lines from {@code /etc/os-release} or {@code /usr/lib/os-release}_@throws IOException if an I/O exception occurs reading {@code /etc/os-release} or {@code /usr/lib/os-release};@SuppressForbidden(reason = "access /etc/os-release or /usr/lib/os-release")_    List<String> readOsRelease() throws IOException {_        final List<String> lines__        if (Files.exists(PathUtils.get("/etc/os-release"))) {_            lines = Files.readAllLines(PathUtils.get("/etc/os-release"))__        } else {_            lines = Files.readAllLines(PathUtils.get("/usr/lib/os-release"))__        }_        assert lines != null && lines.isEmpty() == false__        return lines__    };the,lines,from,code,etc,os,release,or,code,usr,lib,os,release,as,a,fallback,these,file,represents,identification,of,the,underlying,operating,system,the,structure,of,the,file,is,newlines,of,key,value,pairs,of,shell,compatible,variable,assignments,return,the,lines,from,code,etc,os,release,or,code,usr,lib,os,release,throws,ioexception,if,an,i,o,exception,occurs,reading,code,etc,os,release,or,code,usr,lib,os,release;suppress,forbidden,reason,access,etc,os,release,or,usr,lib,os,release,list,string,read,os,release,throws,ioexception,final,list,string,lines,if,files,exists,path,utils,get,etc,os,release,lines,files,read,all,lines,path,utils,get,etc,os,release,else,lines,files,read,all,lines,path,utils,get,usr,lib,os,release,assert,lines,null,lines,is,empty,false,return,lines
OsProbe -> @SuppressForbidden(reason = "access /etc/os-release or /usr/lib/os-release")     List<String> readOsRelease() throws IOException;1542050877;The lines from {@code /etc/os-release} or {@code /usr/lib/os-release} as a fallback. These file represents identification of the_underlying operating system. The structure of the file is newlines of key-value pairs of shell-compatible variable assignments.__@return the lines from {@code /etc/os-release} or {@code /usr/lib/os-release}_@throws IOException if an I/O exception occurs reading {@code /etc/os-release} or {@code /usr/lib/os-release};@SuppressForbidden(reason = "access /etc/os-release or /usr/lib/os-release")_    List<String> readOsRelease() throws IOException {_        final List<String> lines__        if (Files.exists(PathUtils.get("/etc/os-release"))) {_            lines = Files.readAllLines(PathUtils.get("/etc/os-release"))__        } else {_            lines = Files.readAllLines(PathUtils.get("/usr/lib/os-release"))__        }_        assert lines != null && lines.isEmpty() == false__        return lines__    };the,lines,from,code,etc,os,release,or,code,usr,lib,os,release,as,a,fallback,these,file,represents,identification,of,the,underlying,operating,system,the,structure,of,the,file,is,newlines,of,key,value,pairs,of,shell,compatible,variable,assignments,return,the,lines,from,code,etc,os,release,or,code,usr,lib,os,release,throws,ioexception,if,an,i,o,exception,occurs,reading,code,etc,os,release,or,code,usr,lib,os,release;suppress,forbidden,reason,access,etc,os,release,or,usr,lib,os,release,list,string,read,os,release,throws,ioexception,final,list,string,lines,if,files,exists,path,utils,get,etc,os,release,lines,files,read,all,lines,path,utils,get,etc,os,release,else,lines,files,read,all,lines,path,utils,get,usr,lib,os,release,assert,lines,null,lines,is,empty,false,return,lines
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException;1524684173;Returns the line from {@code cpu.cfs_quota_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the total time in microseconds that all tasks in the control group can run during one period as_specified by {@code cpu.cfs_period_us}.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_quota_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_quota_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,total,time,in,microseconds,that,all,tasks,in,the,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException;1539615817;Returns the line from {@code cpu.cfs_quota_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the total time in microseconds that all tasks in the control group can run during one period as_specified by {@code cpu.cfs_period_us}.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_quota_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_quota_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,total,time,in,microseconds,that,all,tasks,in,the,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException;1541697418;Returns the line from {@code cpu.cfs_quota_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the total time in microseconds that all tasks in the control group can run during one period as_specified by {@code cpu.cfs_period_us}.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_quota_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_quota_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,total,time,in,microseconds,that,all,tasks,in,the,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException;1542050877;Returns the line from {@code cpu.cfs_quota_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the total time in microseconds that all tasks in the control group can run during one period as_specified by {@code cpu.cfs_period_us}.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_quota_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_quota_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,total,time,in,microseconds,that,all,tasks,in,the,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException;1542069072;Returns the line from {@code cpu.cfs_quota_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the total time in microseconds that all tasks in the control group can run during one period as_specified by {@code cpu.cfs_period_us}.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_quota_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuAcctCfsQuota(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_quota_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,total,time,in,microseconds,that,all,tasks,in,the,control,group,can,run,during,one,period,as,specified,by,code,cpu,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,acct,cfs,quota,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> final double[] getSystemLoadAverage();1524684173;The system load averages as an array.__On Windows, this method returns {@code null}.__On Linux, this method returns the 1, 5, and 15-minute load averages.__On macOS, this method should return the 1-minute load average.__@return the available system load averages or {@code null};final double[] getSystemLoadAverage() {_        if (Constants.WINDOWS) {_            return null__        } else if (Constants.LINUX) {_            try {_                final String procLoadAvg = readProcLoadavg()__                assert procLoadAvg.matches("(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+")__                final String[] fields = procLoadAvg.split("\\s+")__                return new double[]{Double.parseDouble(fields[0]), Double.parseDouble(fields[1]), Double.parseDouble(fields[2])}__            } catch (final IOException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading /proc/loadavg", e)__                }_                return null__            }_        } else {_            assert Constants.MAC_OS_X__            if (getSystemLoadAverage == null) {_                return null__            }_            try {_                final double oneMinuteLoadAverage = (double) getSystemLoadAverage.invoke(osMxBean)__                return new double[]{oneMinuteLoadAverage >= 0 ? oneMinuteLoadAverage : -1, -1, -1}__            } catch (IllegalAccessException | InvocationTargetException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading one minute load average from operating system", e)__                }_                return null__            }_        }_    };the,system,load,averages,as,an,array,on,windows,this,method,returns,code,null,on,linux,this,method,returns,the,1,5,and,15,minute,load,averages,on,mac,os,this,method,should,return,the,1,minute,load,average,return,the,available,system,load,averages,or,code,null;final,double,get,system,load,average,if,constants,windows,return,null,else,if,constants,linux,try,final,string,proc,load,avg,read,proc,loadavg,assert,proc,load,avg,matches,d,d,s,3,d,d,s,d,final,string,fields,proc,load,avg,split,s,return,new,double,double,parse,double,fields,0,double,parse,double,fields,1,double,parse,double,fields,2,catch,final,ioexception,e,if,logger,is,debug,enabled,logger,debug,error,reading,proc,loadavg,e,return,null,else,assert,constants,if,get,system,load,average,null,return,null,try,final,double,one,minute,load,average,double,get,system,load,average,invoke,os,mx,bean,return,new,double,one,minute,load,average,0,one,minute,load,average,1,1,1,catch,illegal,access,exception,invocation,target,exception,e,if,logger,is,debug,enabled,logger,debug,error,reading,one,minute,load,average,from,operating,system,e,return,null
OsProbe -> final double[] getSystemLoadAverage();1539615817;The system load averages as an array.__On Windows, this method returns {@code null}.__On Linux, this method returns the 1, 5, and 15-minute load averages.__On macOS, this method should return the 1-minute load average.__@return the available system load averages or {@code null};final double[] getSystemLoadAverage() {_        if (Constants.WINDOWS) {_            return null__        } else if (Constants.LINUX) {_            try {_                final String procLoadAvg = readProcLoadavg()__                assert procLoadAvg.matches("(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+")__                final String[] fields = procLoadAvg.split("\\s+")__                return new double[]{Double.parseDouble(fields[0]), Double.parseDouble(fields[1]), Double.parseDouble(fields[2])}__            } catch (final IOException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading /proc/loadavg", e)__                }_                return null__            }_        } else {_            assert Constants.MAC_OS_X__            if (getSystemLoadAverage == null) {_                return null__            }_            try {_                final double oneMinuteLoadAverage = (double) getSystemLoadAverage.invoke(osMxBean)__                return new double[]{oneMinuteLoadAverage >= 0 ? oneMinuteLoadAverage : -1, -1, -1}__            } catch (IllegalAccessException | InvocationTargetException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading one minute load average from operating system", e)__                }_                return null__            }_        }_    };the,system,load,averages,as,an,array,on,windows,this,method,returns,code,null,on,linux,this,method,returns,the,1,5,and,15,minute,load,averages,on,mac,os,this,method,should,return,the,1,minute,load,average,return,the,available,system,load,averages,or,code,null;final,double,get,system,load,average,if,constants,windows,return,null,else,if,constants,linux,try,final,string,proc,load,avg,read,proc,loadavg,assert,proc,load,avg,matches,d,d,s,3,d,d,s,d,final,string,fields,proc,load,avg,split,s,return,new,double,double,parse,double,fields,0,double,parse,double,fields,1,double,parse,double,fields,2,catch,final,ioexception,e,if,logger,is,debug,enabled,logger,debug,error,reading,proc,loadavg,e,return,null,else,assert,constants,if,get,system,load,average,null,return,null,try,final,double,one,minute,load,average,double,get,system,load,average,invoke,os,mx,bean,return,new,double,one,minute,load,average,0,one,minute,load,average,1,1,1,catch,illegal,access,exception,invocation,target,exception,e,if,logger,is,debug,enabled,logger,debug,error,reading,one,minute,load,average,from,operating,system,e,return,null
OsProbe -> final double[] getSystemLoadAverage();1541697418;The system load averages as an array.__On Windows, this method returns {@code null}.__On Linux, this method returns the 1, 5, and 15-minute load averages.__On macOS, this method should return the 1-minute load average.__@return the available system load averages or {@code null};final double[] getSystemLoadAverage() {_        if (Constants.WINDOWS) {_            return null__        } else if (Constants.LINUX) {_            try {_                final String procLoadAvg = readProcLoadavg()__                assert procLoadAvg.matches("(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+")__                final String[] fields = procLoadAvg.split("\\s+")__                return new double[]{Double.parseDouble(fields[0]), Double.parseDouble(fields[1]), Double.parseDouble(fields[2])}__            } catch (final IOException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading /proc/loadavg", e)__                }_                return null__            }_        } else {_            assert Constants.MAC_OS_X__            if (getSystemLoadAverage == null) {_                return null__            }_            try {_                final double oneMinuteLoadAverage = (double) getSystemLoadAverage.invoke(osMxBean)__                return new double[]{oneMinuteLoadAverage >= 0 ? oneMinuteLoadAverage : -1, -1, -1}__            } catch (IllegalAccessException | InvocationTargetException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading one minute load average from operating system", e)__                }_                return null__            }_        }_    };the,system,load,averages,as,an,array,on,windows,this,method,returns,code,null,on,linux,this,method,returns,the,1,5,and,15,minute,load,averages,on,mac,os,this,method,should,return,the,1,minute,load,average,return,the,available,system,load,averages,or,code,null;final,double,get,system,load,average,if,constants,windows,return,null,else,if,constants,linux,try,final,string,proc,load,avg,read,proc,loadavg,assert,proc,load,avg,matches,d,d,s,3,d,d,s,d,final,string,fields,proc,load,avg,split,s,return,new,double,double,parse,double,fields,0,double,parse,double,fields,1,double,parse,double,fields,2,catch,final,ioexception,e,if,logger,is,debug,enabled,logger,debug,error,reading,proc,loadavg,e,return,null,else,assert,constants,if,get,system,load,average,null,return,null,try,final,double,one,minute,load,average,double,get,system,load,average,invoke,os,mx,bean,return,new,double,one,minute,load,average,0,one,minute,load,average,1,1,1,catch,illegal,access,exception,invocation,target,exception,e,if,logger,is,debug,enabled,logger,debug,error,reading,one,minute,load,average,from,operating,system,e,return,null
OsProbe -> final double[] getSystemLoadAverage();1542050877;The system load averages as an array.__On Windows, this method returns {@code null}.__On Linux, this method returns the 1, 5, and 15-minute load averages.__On macOS, this method should return the 1-minute load average.__@return the available system load averages or {@code null};final double[] getSystemLoadAverage() {_        if (Constants.WINDOWS) {_            return null__        } else if (Constants.LINUX) {_            try {_                final String procLoadAvg = readProcLoadavg()__                assert procLoadAvg.matches("(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+")__                final String[] fields = procLoadAvg.split("\\s+")__                return new double[]{Double.parseDouble(fields[0]), Double.parseDouble(fields[1]), Double.parseDouble(fields[2])}__            } catch (final IOException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading /proc/loadavg", e)__                }_                return null__            }_        } else {_            assert Constants.MAC_OS_X__            if (getSystemLoadAverage == null) {_                return null__            }_            try {_                final double oneMinuteLoadAverage = (double) getSystemLoadAverage.invoke(osMxBean)__                return new double[]{oneMinuteLoadAverage >= 0 ? oneMinuteLoadAverage : -1, -1, -1}__            } catch (IllegalAccessException | InvocationTargetException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading one minute load average from operating system", e)__                }_                return null__            }_        }_    };the,system,load,averages,as,an,array,on,windows,this,method,returns,code,null,on,linux,this,method,returns,the,1,5,and,15,minute,load,averages,on,mac,os,this,method,should,return,the,1,minute,load,average,return,the,available,system,load,averages,or,code,null;final,double,get,system,load,average,if,constants,windows,return,null,else,if,constants,linux,try,final,string,proc,load,avg,read,proc,loadavg,assert,proc,load,avg,matches,d,d,s,3,d,d,s,d,final,string,fields,proc,load,avg,split,s,return,new,double,double,parse,double,fields,0,double,parse,double,fields,1,double,parse,double,fields,2,catch,final,ioexception,e,if,logger,is,debug,enabled,logger,debug,error,reading,proc,loadavg,e,return,null,else,assert,constants,if,get,system,load,average,null,return,null,try,final,double,one,minute,load,average,double,get,system,load,average,invoke,os,mx,bean,return,new,double,one,minute,load,average,0,one,minute,load,average,1,1,1,catch,illegal,access,exception,invocation,target,exception,e,if,logger,is,debug,enabled,logger,debug,error,reading,one,minute,load,average,from,operating,system,e,return,null
OsProbe -> final double[] getSystemLoadAverage();1542069072;The system load averages as an array.__On Windows, this method returns {@code null}.__On Linux, this method returns the 1, 5, and 15-minute load averages.__On macOS, this method should return the 1-minute load average.__@return the available system load averages or {@code null};final double[] getSystemLoadAverage() {_        if (Constants.WINDOWS) {_            return null__        } else if (Constants.LINUX) {_            try {_                final String procLoadAvg = readProcLoadavg()__                assert procLoadAvg.matches("(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+")__                final String[] fields = procLoadAvg.split("\\s+")__                return new double[]{Double.parseDouble(fields[0]), Double.parseDouble(fields[1]), Double.parseDouble(fields[2])}__            } catch (final IOException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading /proc/loadavg", e)__                }_                return null__            }_        } else {_            assert Constants.MAC_OS_X__            if (getSystemLoadAverage == null) {_                return null__            }_            try {_                final double oneMinuteLoadAverage = (double) getSystemLoadAverage.invoke(osMxBean)__                return new double[]{oneMinuteLoadAverage >= 0 ? oneMinuteLoadAverage : -1, -1, -1}__            } catch (IllegalAccessException | InvocationTargetException e) {_                if (logger.isDebugEnabled()) {_                    logger.debug("error reading one minute load average from operating system", e)__                }_                return null__            }_        }_    };the,system,load,averages,as,an,array,on,windows,this,method,returns,code,null,on,linux,this,method,returns,the,1,5,and,15,minute,load,averages,on,mac,os,this,method,should,return,the,1,minute,load,average,return,the,available,system,load,averages,or,code,null;final,double,get,system,load,average,if,constants,windows,return,null,else,if,constants,linux,try,final,string,proc,load,avg,read,proc,loadavg,assert,proc,load,avg,matches,d,d,s,3,d,d,s,d,final,string,fields,proc,load,avg,split,s,return,new,double,double,parse,double,fields,0,double,parse,double,fields,1,double,parse,double,fields,2,catch,final,ioexception,e,if,logger,is,debug,enabled,logger,debug,error,reading,proc,loadavg,e,return,null,else,assert,constants,if,get,system,load,average,null,return,null,try,final,double,one,minute,load,average,double,get,system,load,average,invoke,os,mx,bean,return,new,double,one,minute,load,average,0,one,minute,load,average,1,1,1,catch,illegal,access,exception,invocation,target,exception,e,if,logger,is,debug,enabled,logger,debug,error,reading,one,minute,load,average,from,operating,system,e,return,null
OsProbe -> private String readSingleLine(final Path path) throws IOException;1524684173;Reads a file containing a single line.__@param path path to the file to read_@return the single line_@throws IOException if an I/O exception occurs reading the file;private String readSingleLine(final Path path) throws IOException {_        final List<String> lines = Files.readAllLines(path)__        assert lines != null && lines.size() == 1__        return lines.get(0)__    };reads,a,file,containing,a,single,line,param,path,path,to,the,file,to,read,return,the,single,line,throws,ioexception,if,an,i,o,exception,occurs,reading,the,file;private,string,read,single,line,final,path,path,throws,ioexception,final,list,string,lines,files,read,all,lines,path,assert,lines,null,lines,size,1,return,lines,get,0
OsProbe -> private String readSingleLine(final Path path) throws IOException;1539615817;Reads a file containing a single line.__@param path path to the file to read_@return the single line_@throws IOException if an I/O exception occurs reading the file;private String readSingleLine(final Path path) throws IOException {_        final List<String> lines = Files.readAllLines(path)__        assert lines != null && lines.size() == 1__        return lines.get(0)__    };reads,a,file,containing,a,single,line,param,path,path,to,the,file,to,read,return,the,single,line,throws,ioexception,if,an,i,o,exception,occurs,reading,the,file;private,string,read,single,line,final,path,path,throws,ioexception,final,list,string,lines,files,read,all,lines,path,assert,lines,null,lines,size,1,return,lines,get,0
OsProbe -> private String readSingleLine(final Path path) throws IOException;1541697418;Reads a file containing a single line.__@param path path to the file to read_@return the single line_@throws IOException if an I/O exception occurs reading the file;private String readSingleLine(final Path path) throws IOException {_        final List<String> lines = Files.readAllLines(path)__        assert lines != null && lines.size() == 1__        return lines.get(0)__    };reads,a,file,containing,a,single,line,param,path,path,to,the,file,to,read,return,the,single,line,throws,ioexception,if,an,i,o,exception,occurs,reading,the,file;private,string,read,single,line,final,path,path,throws,ioexception,final,list,string,lines,files,read,all,lines,path,assert,lines,null,lines,size,1,return,lines,get,0
OsProbe -> private String readSingleLine(final Path path) throws IOException;1542050877;Reads a file containing a single line.__@param path path to the file to read_@return the single line_@throws IOException if an I/O exception occurs reading the file;private String readSingleLine(final Path path) throws IOException {_        final List<String> lines = Files.readAllLines(path)__        assert lines != null && lines.size() == 1__        return lines.get(0)__    };reads,a,file,containing,a,single,line,param,path,path,to,the,file,to,read,return,the,single,line,throws,ioexception,if,an,i,o,exception,occurs,reading,the,file;private,string,read,single,line,final,path,path,throws,ioexception,final,list,string,lines,files,read,all,lines,path,assert,lines,null,lines,size,1,return,lines,get,0
OsProbe -> private String readSingleLine(final Path path) throws IOException;1542069072;Reads a file containing a single line.__@param path path to the file to read_@return the single line_@throws IOException if an I/O exception occurs reading the file;private String readSingleLine(final Path path) throws IOException {_        final List<String> lines = Files.readAllLines(path)__        assert lines != null && lines.size() == 1__        return lines.get(0)__    };reads,a,file,containing,a,single,line,param,path,path,to,the,file,to,read,return,the,single,line,throws,ioexception,if,an,i,o,exception,occurs,reading,the,file;private,string,read,single,line,final,path,path,throws,ioexception,final,list,string,lines,files,read,all,lines,path,assert,lines,null,lines,size,1,return,lines,get,0
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException;1524684173;Returns the line from {@code cpu.cfs_period_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the period of time in microseconds for how frequently the control group's access to CPU resources_will be reallocated.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_period_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_period_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,period,of,time,in,microseconds,for,how,frequently,the,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException;1539615817;Returns the line from {@code cpu.cfs_period_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the period of time in microseconds for how frequently the control group's access to CPU resources_will be reallocated.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_period_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_period_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,period,of,time,in,microseconds,for,how,frequently,the,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException;1541697418;Returns the line from {@code cpu.cfs_period_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the period of time in microseconds for how frequently the control group's access to CPU resources_will be reallocated.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_period_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_period_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,period,of,time,in,microseconds,for,how,frequently,the,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException;1542050877;Returns the line from {@code cpu.cfs_period_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the period of time in microseconds for how frequently the control group's access to CPU resources_will be reallocated.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_period_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_period_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,period,of,time,in,microseconds,for,how,frequently,the,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")     String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException;1542069072;Returns the line from {@code cpu.cfs_period_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}_subsystem. This line represents the period of time in microseconds for how frequently the control group's access to CPU resources_will be reallocated.__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem_@return the line from {@code cpu.cfs_period_us}_@throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/cpu")_    String readSysFsCgroupCpuAcctCpuCfsPeriod(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/cpu", controlGroup, "cpu.cfs_period_us"))__    };returns,the,line,from,code,cpu,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,this,line,represents,the,period,of,time,in,microseconds,for,how,frequently,the,control,group,s,access,to,cpu,resources,will,be,reallocated,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,cpu,subsystem,return,the,line,from,code,cpu,throws,ioexception,if,an,i,o,exception,occurs,reading,code,cpu,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,cpu,string,read,sys,fs,cgroup,cpu,acct,cpu,cfs,period,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,cpu,control,group,cpu
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1524684173;Returns the line from {@code memory.limit_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the maximum amount of user memory (including file cache).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.limit_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.limit_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,maximum,amount,of,user,memory,including,file,cache,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1539615817;Returns the line from {@code memory.limit_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the maximum amount of user memory (including file cache).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.limit_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.limit_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,maximum,amount,of,user,memory,including,file,cache,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1541697418;Returns the line from {@code memory.limit_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the maximum amount of user memory (including file cache).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.limit_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.limit_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,maximum,amount,of,user,memory,including,file,cache,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1542050877;Returns the line from {@code memory.limit_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the maximum amount of user memory (including file cache).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.limit_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.limit_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,maximum,amount,of,user,memory,including,file,cache,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /sys/fs/cgroup/memory")     String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException;1542069072;Returns the line from {@code memory.limit_in_bytes} for the control group to which the Elasticsearch process belongs for the_{@code memory} subsystem. This line represents the maximum amount of user memory (including file cache).__@param controlGroup the control group to which the Elasticsearch process belongs for the {@code memory} subsystem_@return the line from {@code memory.limit_in_bytes}_@throws IOException if an I/O exception occurs reading {@code memory.limit_in_bytes} for the control group;@SuppressForbidden(reason = "access /sys/fs/cgroup/memory")_    String readSysFsCgroupMemoryLimitInBytes(final String controlGroup) throws IOException {_        return readSingleLine(PathUtils.get("/sys/fs/cgroup/memory", controlGroup, "memory.limit_in_bytes"))__    };returns,the,line,from,code,memory,for,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,this,line,represents,the,maximum,amount,of,user,memory,including,file,cache,param,control,group,the,control,group,to,which,the,elasticsearch,process,belongs,for,the,code,memory,subsystem,return,the,line,from,code,memory,throws,ioexception,if,an,i,o,exception,occurs,reading,code,memory,for,the,control,group;suppress,forbidden,reason,access,sys,fs,cgroup,memory,string,read,sys,fs,cgroup,memory,limit,in,bytes,final,string,control,group,throws,ioexception,return,read,single,line,path,utils,get,sys,fs,cgroup,memory,control,group,memory
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")     boolean areCgroupStatsAvailable();1524684173;Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup}, {@code /sys/fs/cgroup/cpu},_{@code /sys/fs/cgroup/cpuacct} and {@code /sys/fs/cgroup/memory}.__@return {@code true} if the stats are available, otherwise {@code false};@SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")_    boolean areCgroupStatsAvailable() {_        if (!Files.exists(PathUtils.get("/proc/self/cgroup"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpu"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpuacct"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/memory"))) {_            return false__        }_        return true__    };checks,if,cgroup,stats,are,available,by,checking,for,the,existence,of,code,proc,self,cgroup,code,sys,fs,cgroup,cpu,code,sys,fs,cgroup,cpuacct,and,code,sys,fs,cgroup,memory,return,code,true,if,the,stats,are,available,otherwise,code,false;suppress,forbidden,reason,access,proc,self,cgroup,sys,fs,cgroup,cpu,sys,fs,cgroup,cpuacct,and,sys,fs,cgroup,memory,boolean,are,cgroup,stats,available,if,files,exists,path,utils,get,proc,self,cgroup,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpu,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpuacct,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,memory,return,false,return,true
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")     boolean areCgroupStatsAvailable();1539615817;Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup}, {@code /sys/fs/cgroup/cpu},_{@code /sys/fs/cgroup/cpuacct} and {@code /sys/fs/cgroup/memory}.__@return {@code true} if the stats are available, otherwise {@code false};@SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")_    boolean areCgroupStatsAvailable() {_        if (!Files.exists(PathUtils.get("/proc/self/cgroup"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpu"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpuacct"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/memory"))) {_            return false__        }_        return true__    };checks,if,cgroup,stats,are,available,by,checking,for,the,existence,of,code,proc,self,cgroup,code,sys,fs,cgroup,cpu,code,sys,fs,cgroup,cpuacct,and,code,sys,fs,cgroup,memory,return,code,true,if,the,stats,are,available,otherwise,code,false;suppress,forbidden,reason,access,proc,self,cgroup,sys,fs,cgroup,cpu,sys,fs,cgroup,cpuacct,and,sys,fs,cgroup,memory,boolean,are,cgroup,stats,available,if,files,exists,path,utils,get,proc,self,cgroup,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpu,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpuacct,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,memory,return,false,return,true
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")     boolean areCgroupStatsAvailable();1541697418;Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup}, {@code /sys/fs/cgroup/cpu},_{@code /sys/fs/cgroup/cpuacct} and {@code /sys/fs/cgroup/memory}.__@return {@code true} if the stats are available, otherwise {@code false};@SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")_    boolean areCgroupStatsAvailable() {_        if (!Files.exists(PathUtils.get("/proc/self/cgroup"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpu"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpuacct"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/memory"))) {_            return false__        }_        return true__    };checks,if,cgroup,stats,are,available,by,checking,for,the,existence,of,code,proc,self,cgroup,code,sys,fs,cgroup,cpu,code,sys,fs,cgroup,cpuacct,and,code,sys,fs,cgroup,memory,return,code,true,if,the,stats,are,available,otherwise,code,false;suppress,forbidden,reason,access,proc,self,cgroup,sys,fs,cgroup,cpu,sys,fs,cgroup,cpuacct,and,sys,fs,cgroup,memory,boolean,are,cgroup,stats,available,if,files,exists,path,utils,get,proc,self,cgroup,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpu,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpuacct,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,memory,return,false,return,true
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")     boolean areCgroupStatsAvailable();1542050877;Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup}, {@code /sys/fs/cgroup/cpu},_{@code /sys/fs/cgroup/cpuacct} and {@code /sys/fs/cgroup/memory}.__@return {@code true} if the stats are available, otherwise {@code false};@SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")_    boolean areCgroupStatsAvailable() {_        if (!Files.exists(PathUtils.get("/proc/self/cgroup"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpu"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpuacct"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/memory"))) {_            return false__        }_        return true__    };checks,if,cgroup,stats,are,available,by,checking,for,the,existence,of,code,proc,self,cgroup,code,sys,fs,cgroup,cpu,code,sys,fs,cgroup,cpuacct,and,code,sys,fs,cgroup,memory,return,code,true,if,the,stats,are,available,otherwise,code,false;suppress,forbidden,reason,access,proc,self,cgroup,sys,fs,cgroup,cpu,sys,fs,cgroup,cpuacct,and,sys,fs,cgroup,memory,boolean,are,cgroup,stats,available,if,files,exists,path,utils,get,proc,self,cgroup,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpu,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpuacct,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,memory,return,false,return,true
OsProbe -> @SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")     boolean areCgroupStatsAvailable();1542069072;Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup}, {@code /sys/fs/cgroup/cpu},_{@code /sys/fs/cgroup/cpuacct} and {@code /sys/fs/cgroup/memory}.__@return {@code true} if the stats are available, otherwise {@code false};@SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, /sys/fs/cgroup/cpuacct and /sys/fs/cgroup/memory")_    boolean areCgroupStatsAvailable() {_        if (!Files.exists(PathUtils.get("/proc/self/cgroup"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpu"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpuacct"))) {_            return false__        }_        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/memory"))) {_            return false__        }_        return true__    };checks,if,cgroup,stats,are,available,by,checking,for,the,existence,of,code,proc,self,cgroup,code,sys,fs,cgroup,cpu,code,sys,fs,cgroup,cpuacct,and,code,sys,fs,cgroup,memory,return,code,true,if,the,stats,are,available,otherwise,code,false;suppress,forbidden,reason,access,proc,self,cgroup,sys,fs,cgroup,cpu,sys,fs,cgroup,cpuacct,and,sys,fs,cgroup,memory,boolean,are,cgroup,stats,available,if,files,exists,path,utils,get,proc,self,cgroup,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpu,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,cpuacct,return,false,if,files,exists,path,utils,get,sys,fs,cgroup,memory,return,false,return,true
OsProbe -> public long getFreePhysicalMemorySize();1524684173;Returns the amount of free physical memory in bytes.;public long getFreePhysicalMemorySize() {_        if (getFreePhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getFreePhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,physical,memory,in,bytes;public,long,get,free,physical,memory,size,if,get,free,physical,memory,size,null,return,1,try,return,long,get,free,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getFreePhysicalMemorySize();1539615817;Returns the amount of free physical memory in bytes.;public long getFreePhysicalMemorySize() {_        if (getFreePhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getFreePhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,physical,memory,in,bytes;public,long,get,free,physical,memory,size,if,get,free,physical,memory,size,null,return,1,try,return,long,get,free,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getFreePhysicalMemorySize();1541697418;Returns the amount of free physical memory in bytes.;public long getFreePhysicalMemorySize() {_        if (getFreePhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getFreePhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,physical,memory,in,bytes;public,long,get,free,physical,memory,size,if,get,free,physical,memory,size,null,return,1,try,return,long,get,free,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getFreePhysicalMemorySize();1542050877;Returns the amount of free physical memory in bytes.;public long getFreePhysicalMemorySize() {_        if (getFreePhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getFreePhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,physical,memory,in,bytes;public,long,get,free,physical,memory,size,if,get,free,physical,memory,size,null,return,1,try,return,long,get,free,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> public long getFreePhysicalMemorySize();1542069072;Returns the amount of free physical memory in bytes.;public long getFreePhysicalMemorySize() {_        if (getFreePhysicalMemorySize == null) {_            return -1__        }_        try {_            return (long) getFreePhysicalMemorySize.invoke(osMxBean)__        } catch (Exception e) {_            return -1__        }_    };returns,the,amount,of,free,physical,memory,in,bytes;public,long,get,free,physical,memory,size,if,get,free,physical,memory,size,null,return,1,try,return,long,get,free,physical,memory,size,invoke,os,mx,bean,catch,exception,e,return,1
OsProbe -> @SuppressForbidden(reason = "access /proc/loadavg")     String readProcLoadavg() throws IOException;1524684173;The line from {@code /proc/loadavg}. The first three fields are the load averages averaged over 1, 5, and 15 minutes. The fourth_field is two numbers separated by a slash, the first is the number of currently runnable scheduling entities, the second is the_number of scheduling entities on the system. The fifth field is the PID of the most recently created process.__@return the line from {@code /proc/loadavg} or {@code null};@SuppressForbidden(reason = "access /proc/loadavg")_    String readProcLoadavg() throws IOException {_        return readSingleLine(PathUtils.get("/proc/loadavg"))__    };the,line,from,code,proc,loadavg,the,first,three,fields,are,the,load,averages,averaged,over,1,5,and,15,minutes,the,fourth,field,is,two,numbers,separated,by,a,slash,the,first,is,the,number,of,currently,runnable,scheduling,entities,the,second,is,the,number,of,scheduling,entities,on,the,system,the,fifth,field,is,the,pid,of,the,most,recently,created,process,return,the,line,from,code,proc,loadavg,or,code,null;suppress,forbidden,reason,access,proc,loadavg,string,read,proc,loadavg,throws,ioexception,return,read,single,line,path,utils,get,proc,loadavg
OsProbe -> @SuppressForbidden(reason = "access /proc/loadavg")     String readProcLoadavg() throws IOException;1539615817;The line from {@code /proc/loadavg}. The first three fields are the load averages averaged over 1, 5, and 15 minutes. The fourth_field is two numbers separated by a slash, the first is the number of currently runnable scheduling entities, the second is the_number of scheduling entities on the system. The fifth field is the PID of the most recently created process.__@return the line from {@code /proc/loadavg} or {@code null};@SuppressForbidden(reason = "access /proc/loadavg")_    String readProcLoadavg() throws IOException {_        return readSingleLine(PathUtils.get("/proc/loadavg"))__    };the,line,from,code,proc,loadavg,the,first,three,fields,are,the,load,averages,averaged,over,1,5,and,15,minutes,the,fourth,field,is,two,numbers,separated,by,a,slash,the,first,is,the,number,of,currently,runnable,scheduling,entities,the,second,is,the,number,of,scheduling,entities,on,the,system,the,fifth,field,is,the,pid,of,the,most,recently,created,process,return,the,line,from,code,proc,loadavg,or,code,null;suppress,forbidden,reason,access,proc,loadavg,string,read,proc,loadavg,throws,ioexception,return,read,single,line,path,utils,get,proc,loadavg
OsProbe -> @SuppressForbidden(reason = "access /proc/loadavg")     String readProcLoadavg() throws IOException;1541697418;The line from {@code /proc/loadavg}. The first three fields are the load averages averaged over 1, 5, and 15 minutes. The fourth_field is two numbers separated by a slash, the first is the number of currently runnable scheduling entities, the second is the_number of scheduling entities on the system. The fifth field is the PID of the most recently created process.__@return the line from {@code /proc/loadavg} or {@code null};@SuppressForbidden(reason = "access /proc/loadavg")_    String readProcLoadavg() throws IOException {_        return readSingleLine(PathUtils.get("/proc/loadavg"))__    };the,line,from,code,proc,loadavg,the,first,three,fields,are,the,load,averages,averaged,over,1,5,and,15,minutes,the,fourth,field,is,two,numbers,separated,by,a,slash,the,first,is,the,number,of,currently,runnable,scheduling,entities,the,second,is,the,number,of,scheduling,entities,on,the,system,the,fifth,field,is,the,pid,of,the,most,recently,created,process,return,the,line,from,code,proc,loadavg,or,code,null;suppress,forbidden,reason,access,proc,loadavg,string,read,proc,loadavg,throws,ioexception,return,read,single,line,path,utils,get,proc,loadavg
OsProbe -> @SuppressForbidden(reason = "access /proc/loadavg")     String readProcLoadavg() throws IOException;1542050877;The line from {@code /proc/loadavg}. The first three fields are the load averages averaged over 1, 5, and 15 minutes. The fourth_field is two numbers separated by a slash, the first is the number of currently runnable scheduling entities, the second is the_number of scheduling entities on the system. The fifth field is the PID of the most recently created process.__@return the line from {@code /proc/loadavg} or {@code null};@SuppressForbidden(reason = "access /proc/loadavg")_    String readProcLoadavg() throws IOException {_        return readSingleLine(PathUtils.get("/proc/loadavg"))__    };the,line,from,code,proc,loadavg,the,first,three,fields,are,the,load,averages,averaged,over,1,5,and,15,minutes,the,fourth,field,is,two,numbers,separated,by,a,slash,the,first,is,the,number,of,currently,runnable,scheduling,entities,the,second,is,the,number,of,scheduling,entities,on,the,system,the,fifth,field,is,the,pid,of,the,most,recently,created,process,return,the,line,from,code,proc,loadavg,or,code,null;suppress,forbidden,reason,access,proc,loadavg,string,read,proc,loadavg,throws,ioexception,return,read,single,line,path,utils,get,proc,loadavg
OsProbe -> @SuppressForbidden(reason = "access /proc/loadavg")     String readProcLoadavg() throws IOException;1542069072;The line from {@code /proc/loadavg}. The first three fields are the load averages averaged over 1, 5, and 15 minutes. The fourth_field is two numbers separated by a slash, the first is the number of currently runnable scheduling entities, the second is the_number of scheduling entities on the system. The fifth field is the PID of the most recently created process.__@return the line from {@code /proc/loadavg} or {@code null};@SuppressForbidden(reason = "access /proc/loadavg")_    String readProcLoadavg() throws IOException {_        return readSingleLine(PathUtils.get("/proc/loadavg"))__    };the,line,from,code,proc,loadavg,the,first,three,fields,are,the,load,averages,averaged,over,1,5,and,15,minutes,the,fourth,field,is,two,numbers,separated,by,a,slash,the,first,is,the,number,of,currently,runnable,scheduling,entities,the,second,is,the,number,of,scheduling,entities,on,the,system,the,fifth,field,is,the,pid,of,the,most,recently,created,process,return,the,line,from,code,proc,loadavg,or,code,null;suppress,forbidden,reason,access,proc,loadavg,string,read,proc,loadavg,throws,ioexception,return,read,single,line,path,utils,get,proc,loadavg
OsProbe -> private static Method getMethod(String methodName);1524684173;Returns a given method of the OperatingSystemMXBean, or null if the method is not found or unavailable.;private static Method getMethod(String methodName) {_        try {_            return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName)__        } catch (Exception e) {_            _            return null__        }_    };returns,a,given,method,of,the,operating,system,mxbean,or,null,if,the,method,is,not,found,or,unavailable;private,static,method,get,method,string,method,name,try,return,class,for,name,com,sun,management,operating,system,mxbean,get,method,method,name,catch,exception,e,return,null
OsProbe -> private static Method getMethod(String methodName);1539615817;Returns a given method of the OperatingSystemMXBean, or null if the method is not found or unavailable.;private static Method getMethod(String methodName) {_        try {_            return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName)__        } catch (Exception e) {_            _            return null__        }_    };returns,a,given,method,of,the,operating,system,mxbean,or,null,if,the,method,is,not,found,or,unavailable;private,static,method,get,method,string,method,name,try,return,class,for,name,com,sun,management,operating,system,mxbean,get,method,method,name,catch,exception,e,return,null
OsProbe -> private static Method getMethod(String methodName);1541697418;Returns a given method of the OperatingSystemMXBean, or null if the method is not found or unavailable.;private static Method getMethod(String methodName) {_        try {_            return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName)__        } catch (Exception e) {_            _            return null__        }_    };returns,a,given,method,of,the,operating,system,mxbean,or,null,if,the,method,is,not,found,or,unavailable;private,static,method,get,method,string,method,name,try,return,class,for,name,com,sun,management,operating,system,mxbean,get,method,method,name,catch,exception,e,return,null
OsProbe -> private static Method getMethod(String methodName);1542050877;Returns a given method of the OperatingSystemMXBean, or null if the method is not found or unavailable.;private static Method getMethod(String methodName) {_        try {_            return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName)__        } catch (Exception e) {_            _            return null__        }_    };returns,a,given,method,of,the,operating,system,mxbean,or,null,if,the,method,is,not,found,or,unavailable;private,static,method,get,method,string,method,name,try,return,class,for,name,com,sun,management,operating,system,mxbean,get,method,method,name,catch,exception,e,return,null
OsProbe -> private static Method getMethod(String methodName);1542069072;Returns a given method of the OperatingSystemMXBean, or null if the method is not found or unavailable.;private static Method getMethod(String methodName) {_        try {_            return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName)__        } catch (Exception e) {_            _            return null__        }_    };returns,a,given,method,of,the,operating,system,mxbean,or,null,if,the,method,is,not,found,or,unavailable;private,static,method,get,method,string,method,name,try,return,class,for,name,com,sun,management,operating,system,mxbean,get,method,method,name,catch,exception,e,return,null
