commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "nodes_reload_action". }
false;public;2;12;;@Override public RestResponse buildResponse(NodesReloadSecureSettingsResponse response, XContentBuilder builder) throws Exception {     builder.startObject().     {         RestActions.buildNodesHeader(builder, channel.request(), response).         builder.field("cluster_name", response.getClusterName().value()).         response.toXContent(builder, channel.request()).     }     builder.endObject().     return new BytesRestResponse(RestStatus.OK, builder). }
false;public;2;25;;@Override public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {     final String[] nodesIds = Strings.splitStringByCommaToArray(request.param("nodeId")).     final NodesReloadSecureSettingsRequestBuilder nodesRequestBuilder = client.admin().cluster().prepareReloadSecureSettings().setTimeout(request.param("timeout")).setNodesIds(nodesIds).     final NodesReloadSecureSettingsRequest nodesRequest = nodesRequestBuilder.request().     return channel -> nodesRequestBuilder.execute(new RestBuilderListener<NodesReloadSecureSettingsResponse>(channel) {          @Override         public RestResponse buildResponse(NodesReloadSecureSettingsResponse response, XContentBuilder builder) throws Exception {             builder.startObject().             {                 RestActions.buildNodesHeader(builder, channel.request(), response).                 builder.field("cluster_name", response.getClusterName().value()).                 response.toXContent(builder, channel.request()).             }             builder.endObject().             return new BytesRestResponse(RestStatus.OK, builder).         }     }). }
false;public;0;4;;@Override public boolean canTripCircuitBreaker() {     return false. }
