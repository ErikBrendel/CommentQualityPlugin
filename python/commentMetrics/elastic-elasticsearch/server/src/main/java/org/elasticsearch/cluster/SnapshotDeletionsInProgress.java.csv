commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Returns a new instance of {@link SnapshotDeletionsInProgress} with the given  * {@link Entry} added.  */ ;/**  * Returns a new instance of {@link SnapshotDeletionsInProgress} with the given  * {@link Entry} added.  */ public static SnapshotDeletionsInProgress newInstance(Entry entry) {     return new SnapshotDeletionsInProgress(Collections.singletonList(entry)). }
true;public;1;5;/**  * Returns a new instance of {@link SnapshotDeletionsInProgress} which adds  * the given {@link Entry} to the invoking instance.  */ ;/**  * Returns a new instance of {@link SnapshotDeletionsInProgress} which adds  * the given {@link Entry} to the invoking instance.  */ public SnapshotDeletionsInProgress withAddedEntry(Entry entry) {     List<Entry> entries = new ArrayList<>(getEntries()).     entries.add(entry).     return new SnapshotDeletionsInProgress(entries). }
true;public;1;5;/**  * Returns a new instance of {@link SnapshotDeletionsInProgress} which removes  * the given entry from the invoking instance.  */ ;/**  * Returns a new instance of {@link SnapshotDeletionsInProgress} which removes  * the given entry from the invoking instance.  */ public SnapshotDeletionsInProgress withRemovedEntry(Entry entry) {     List<Entry> entries = new ArrayList<>(getEntries()).     entries.remove(entry).     return new SnapshotDeletionsInProgress(entries). }
true;public;0;3;/**  * Returns an unmodifiable list of snapshot deletion entries.  */ ;/**  * Returns an unmodifiable list of snapshot deletion entries.  */ public List<Entry> getEntries() {     return entries. }
true;public;0;3;/**  * Returns {@code true} if there are snapshot deletions in progress in the cluster,  * returns {@code false} otherwise.  */ ;/**  * Returns {@code true} if there are snapshot deletions in progress in the cluster,  * returns {@code false} otherwise.  */ public boolean hasDeletionsInProgress() {     return entries.isEmpty() == false. }
false;public;0;4;;@Override public String getWriteableName() {     return TYPE. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     SnapshotDeletionsInProgress that = (SnapshotDeletionsInProgress) o.     return entries.equals(that.entries). }
false;public;0;4;;@Override public int hashCode() {     return 31 + entries.hashCode(). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeList(entries). }
false;public,static;1;3;;public static NamedDiff<Custom> readDiffFrom(StreamInput in) throws IOException {     return readDiffFrom(Custom.class, TYPE, in). }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.CURRENT.minimumCompatibilityVersion(). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startArray(TYPE).     for (Entry entry : entries) {         builder.startObject().         {             builder.field("repository", entry.snapshot.getRepository()).             builder.field("snapshot", entry.snapshot.getSnapshotId().getName()).             builder.humanReadableField("start_time_millis", "start_time", new TimeValue(entry.startTime)).             builder.field("repository_state_id", entry.repositoryStateId).         }         builder.endObject().     }     builder.endArray().     return builder. }
false;public;0;11;;@Override public String toString() {     StringBuilder builder = new StringBuilder("SnapshotDeletionsInProgress[").     for (int i = 0. i < entries.size(). i++) {         builder.append(entries.get(i).getSnapshot().getSnapshotId().getName()).         if (i + 1 < entries.size()) {             builder.append(",").         }     }     return builder.append("]").toString(). }
true;public;0;3;/**  * The snapshot to delete.  */ ;/**  * The snapshot to delete.  */ public Snapshot getSnapshot() {     return snapshot. }
true;public;0;3;/**  * The start time in milliseconds for deleting the snapshots.  */ ;/**  * The start time in milliseconds for deleting the snapshots.  */ public long getStartTime() {     return startTime. }
true;public;0;3;/**  * The repository state id at the time the snapshot deletion began.  */ ;/**  * The repository state id at the time the snapshot deletion began.  */ public long getRepositoryStateId() {     return repositoryStateId. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Entry that = (Entry) o.     return snapshot.equals(that.snapshot) && startTime == that.startTime && repositoryStateId == that.repositoryStateId. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(snapshot, startTime, repositoryStateId). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     snapshot.writeTo(out).     out.writeVLong(startTime).     out.writeLong(repositoryStateId). }
