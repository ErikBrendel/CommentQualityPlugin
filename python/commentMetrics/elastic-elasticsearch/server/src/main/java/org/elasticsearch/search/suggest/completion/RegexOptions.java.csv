commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;static;1;3;;static RegexOptions parse(XContentParser parser) throws IOException {     return PARSER.parse(parser, null).build(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(flagsValue).     out.writeVInt(maxDeterminizedStates). }
true;public;0;3;/**  * Returns internal regular expression syntax flag value  * see {@link RegexpFlag#value()}  */ ;/**  * Returns internal regular expression syntax flag value  * see {@link RegexpFlag#value()}  */ public int getFlagsValue() {     return flagsValue. }
true;public;0;3;/**  * Returns the maximum automaton states allowed for fuzzy expansion  */ ;/**  * Returns the maximum automaton states allowed for fuzzy expansion  */ public int getMaxDeterminizedStates() {     return maxDeterminizedStates. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     RegexOptions that = (RegexOptions) o.     if (flagsValue != that.flagsValue)         return false.     return maxDeterminizedStates == that.maxDeterminizedStates. }
false;public;0;6;;@Override public int hashCode() {     int result = flagsValue.     result = 31 * result + maxDeterminizedStates.     return result. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(REGEX_OPTIONS.getPreferredName()).     builder.field(FLAGS_VALUE.getPreferredName(), flagsValue).     builder.field(MAX_DETERMINIZED_STATES.getPreferredName(), maxDeterminizedStates).     builder.endObject().     return builder. }
true;public;1;4;/**  * Sets the regular expression syntax flags  * see {@link RegexpFlag}  */ ;/**  * Sets the regular expression syntax flags  * see {@link RegexpFlag}  */ public Builder setFlags(String flags) {     this.flagsValue = RegexpFlag.resolveValue(flags).     return this. }
false;private;1;4;;private Builder setFlagsValue(int flagsValue) {     this.flagsValue = flagsValue.     return this. }
true;public;1;7;/**  * Sets the maximum automaton states allowed for the regular expression expansion  */ ;/**  * Sets the maximum automaton states allowed for the regular expression expansion  */ public Builder setMaxDeterminizedStates(int maxDeterminizedStates) {     if (maxDeterminizedStates < 0) {         throw new IllegalArgumentException("maxDeterminizedStates must not be negative").     }     this.maxDeterminizedStates = maxDeterminizedStates.     return this. }
false;public;0;3;;public RegexOptions build() {     return new RegexOptions(flagsValue, maxDeterminizedStates). }
