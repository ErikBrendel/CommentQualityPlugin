# id;timestamp;commentText;codeText;commentWords;codeWords
Repository -> void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState)_;1524684173;Restores snapshot of the shard._<p>_The index can be renamed on restore, hence different {@code shardId} and {@code snapshotShardId} are supplied.__@param shard           the shard to restore the index into_@param snapshotId      snapshot id_@param version         version of elasticsearch that created this snapshot_@param indexId         id of the index in the repository from which the restore is occurring_@param snapshotShardId shard id (in the snapshot)_@param recoveryState   recovery state;void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState)_;restores,snapshot,of,the,shard,p,the,index,can,be,renamed,on,restore,hence,different,code,shard,id,and,code,snapshot,shard,id,are,supplied,param,shard,the,shard,to,restore,the,index,into,param,snapshot,id,snapshot,id,param,version,version,of,elasticsearch,that,created,this,snapshot,param,index,id,id,of,the,index,in,the,repository,from,which,the,restore,is,occurring,param,snapshot,shard,id,shard,id,in,the,snapshot,param,recovery,state,recovery,state;void,restore,shard,index,shard,shard,snapshot,id,snapshot,id,version,version,index,id,index,id,shard,id,snapshot,shard,id,recovery,state,recovery,state
Repository -> void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState)_;1536828374;Restores snapshot of the shard._<p>_The index can be renamed on restore, hence different {@code shardId} and {@code snapshotShardId} are supplied.__@param shard           the shard to restore the index into_@param snapshotId      snapshot id_@param version         version of elasticsearch that created this snapshot_@param indexId         id of the index in the repository from which the restore is occurring_@param snapshotShardId shard id (in the snapshot)_@param recoveryState   recovery state;void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState)_;restores,snapshot,of,the,shard,p,the,index,can,be,renamed,on,restore,hence,different,code,shard,id,and,code,snapshot,shard,id,are,supplied,param,shard,the,shard,to,restore,the,index,into,param,snapshot,id,snapshot,id,param,version,version,of,elasticsearch,that,created,this,snapshot,param,index,id,id,of,the,index,in,the,repository,from,which,the,restore,is,occurring,param,snapshot,shard,id,shard,id,in,the,snapshot,param,recovery,state,recovery,state;void,restore,shard,index,shard,shard,snapshot,id,snapshot,id,version,version,index,id,index,id,shard,id,snapshot,shard,id,recovery,state,recovery,state
Repository -> boolean isReadOnly()_;1524684173;Returns true if the repository supports only read operations_@return true if the repository is read/only;boolean isReadOnly()_;returns,true,if,the,repository,supports,only,read,operations,return,true,if,the,repository,is,read,only;boolean,is,read,only
Repository -> boolean isReadOnly()_;1536828374;Returns true if the repository supports only read operations_@return true if the repository is read/only;boolean isReadOnly()_;returns,true,if,the,repository,supports,only,read,operations,return,true,if,the,repository,is,read,only;boolean,is,read,only
Repository -> boolean isReadOnly()_;1546974294;Returns true if the repository supports only read operations_@return true if the repository is read/only;boolean isReadOnly()_;returns,true,if,the,repository,supports,only,read,operations,return,true,if,the,repository,is,read,only;boolean,is,read,only
Repository -> long getRestoreThrottleTimeInNanos()_;1524684173;Returns restore throttle time in nanoseconds;long getRestoreThrottleTimeInNanos()_;returns,restore,throttle,time,in,nanoseconds;long,get,restore,throttle,time,in,nanos
Repository -> long getRestoreThrottleTimeInNanos()_;1536828374;Returns restore throttle time in nanoseconds;long getRestoreThrottleTimeInNanos()_;returns,restore,throttle,time,in,nanoseconds;long,get,restore,throttle,time,in,nanos
Repository -> long getRestoreThrottleTimeInNanos()_;1546974294;Returns restore throttle time in nanoseconds;long getRestoreThrottleTimeInNanos()_;returns,restore,throttle,time,in,nanoseconds;long,get,restore,throttle,time,in,nanos
Repository -> long getSnapshotThrottleTimeInNanos()_;1524684173;Returns snapshot throttle time in nanoseconds;long getSnapshotThrottleTimeInNanos()_;returns,snapshot,throttle,time,in,nanoseconds;long,get,snapshot,throttle,time,in,nanos
Repository -> long getSnapshotThrottleTimeInNanos()_;1536828374;Returns snapshot throttle time in nanoseconds;long getSnapshotThrottleTimeInNanos()_;returns,snapshot,throttle,time,in,nanoseconds;long,get,snapshot,throttle,time,in,nanos
Repository -> long getSnapshotThrottleTimeInNanos()_;1546974294;Returns snapshot throttle time in nanoseconds;long getSnapshotThrottleTimeInNanos()_;returns,snapshot,throttle,time,in,nanoseconds;long,get,snapshot,throttle,time,in,nanos
Repository -> IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException_;1524684173;Returns the index metadata associated with the snapshot.__@param snapshotId the snapshot id to load the index metadata from_@param index      the {@link IndexId} to load the metadata from_@return the index metadata about the given index for the given snapshot;IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException_;returns,the,index,metadata,associated,with,the,snapshot,param,snapshot,id,the,snapshot,id,to,load,the,index,metadata,from,param,index,the,link,index,id,to,load,the,metadata,from,return,the,index,metadata,about,the,given,index,for,the,given,snapshot;index,meta,data,get,snapshot,index,meta,data,snapshot,id,snapshot,id,index,id,index,throws,ioexception
Repository -> IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException_;1536828374;Returns the index metadata associated with the snapshot.__@param snapshotId the snapshot id to load the index metadata from_@param index      the {@link IndexId} to load the metadata from_@return the index metadata about the given index for the given snapshot;IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException_;returns,the,index,metadata,associated,with,the,snapshot,param,snapshot,id,the,snapshot,id,to,load,the,index,metadata,from,param,index,the,link,index,id,to,load,the,metadata,from,return,the,index,metadata,about,the,given,index,for,the,given,snapshot;index,meta,data,get,snapshot,index,meta,data,snapshot,id,snapshot,id,index,id,index,throws,ioexception
Repository -> IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException_;1546974294;Returns the index metadata associated with the snapshot.__@param snapshotId the snapshot id to load the index metadata from_@param index      the {@link IndexId} to load the metadata from_@return the index metadata about the given index for the given snapshot;IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException_;returns,the,index,metadata,associated,with,the,snapshot,param,snapshot,id,the,snapshot,id,to,load,the,index,metadata,from,param,index,the,link,index,id,to,load,the,metadata,from,return,the,index,metadata,about,the,given,index,for,the,given,snapshot;index,meta,data,get,snapshot,index,meta,data,snapshot,id,snapshot,id,index,id,index,throws,ioexception
Repository -> Factory -> Repository create(RepositoryMetaData metadata) throws Exception_;1524684173;Constructs a repository._@param metadata    metadata for the repository including name and settings;Repository create(RepositoryMetaData metadata) throws Exception_;constructs,a,repository,param,metadata,metadata,for,the,repository,including,name,and,settings;repository,create,repository,meta,data,metadata,throws,exception
Repository -> Factory -> Repository create(RepositoryMetaData metadata) throws Exception_;1536828374;Constructs a repository._@param metadata    metadata for the repository including name and settings;Repository create(RepositoryMetaData metadata) throws Exception_;constructs,a,repository,param,metadata,metadata,for,the,repository,including,name,and,settings;repository,create,repository,meta,data,metadata,throws,exception
Repository -> Factory -> Repository create(RepositoryMetaData metadata) throws Exception_;1546974294;Constructs a repository._@param metadata    metadata for the repository including name and settings;Repository create(RepositoryMetaData metadata) throws Exception_;constructs,a,repository,param,metadata,metadata,for,the,repository,including,name,and,settings;repository,create,repository,meta,data,metadata,throws,exception
Repository -> void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData)_;1524684173;Starts snapshotting process__@param snapshotId snapshot id_@param indices    list of indices to be snapshotted_@param metaData   cluster metadata;void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData)_;starts,snapshotting,process,param,snapshot,id,snapshot,id,param,indices,list,of,indices,to,be,snapshotted,param,meta,data,cluster,metadata;void,initialize,snapshot,snapshot,id,snapshot,id,list,index,id,indices,meta,data,meta,data
Repository -> void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData)_;1536828374;Starts snapshotting process__@param snapshotId snapshot id_@param indices    list of indices to be snapshotted_@param metaData   cluster metadata;void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData)_;starts,snapshotting,process,param,snapshot,id,snapshot,id,param,indices,list,of,indices,to,be,snapshotted,param,meta,data,cluster,metadata;void,initialize,snapshot,snapshot,id,snapshot,id,list,index,id,indices,meta,data,meta,data
Repository -> void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData)_;1546974294;Starts snapshotting process__@param snapshotId snapshot id_@param indices    list of indices to be snapshotted_@param metaData   cluster metadata;void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData)_;starts,snapshotting,process,param,snapshot,id,snapshot,id,param,indices,list,of,indices,to,be,snapshotted,param,meta,data,cluster,metadata;void,initialize,snapshot,snapshot,id,snapshot,id,list,index,id,indices,meta,data,meta,data
Repository -> SnapshotInfo getSnapshotInfo(SnapshotId snapshotId)_;1524684173;Reads snapshot description from repository.__@param snapshotId  snapshot id_@return information about snapshot;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId)_;reads,snapshot,description,from,repository,param,snapshot,id,snapshot,id,return,information,about,snapshot;snapshot,info,get,snapshot,info,snapshot,id,snapshot,id
Repository -> SnapshotInfo getSnapshotInfo(SnapshotId snapshotId)_;1536828374;Reads snapshot description from repository.__@param snapshotId  snapshot id_@return information about snapshot;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId)_;reads,snapshot,description,from,repository,param,snapshot,id,snapshot,id,return,information,about,snapshot;snapshot,info,get,snapshot,info,snapshot,id,snapshot,id
Repository -> SnapshotInfo getSnapshotInfo(SnapshotId snapshotId)_;1546974294;Reads snapshot description from repository.__@param snapshotId  snapshot id_@return information about snapshot;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId)_;reads,snapshot,description,from,repository,param,snapshot,id,snapshot,id,return,information,about,snapshot;snapshot,info,get,snapshot,info,snapshot,id,snapshot,id
Repository -> RepositoryData getRepositoryData()_;1524684173;Returns a {@link RepositoryData} to describe the data in the repository, including the snapshots_and the indices across all snapshots found in the repository.  Throws a {@link RepositoryException}_if there was an error in reading the data.;RepositoryData getRepositoryData()_;returns,a,link,repository,data,to,describe,the,data,in,the,repository,including,the,snapshots,and,the,indices,across,all,snapshots,found,in,the,repository,throws,a,link,repository,exception,if,there,was,an,error,in,reading,the,data;repository,data,get,repository,data
Repository -> RepositoryData getRepositoryData()_;1536828374;Returns a {@link RepositoryData} to describe the data in the repository, including the snapshots_and the indices across all snapshots found in the repository.  Throws a {@link RepositoryException}_if there was an error in reading the data.;RepositoryData getRepositoryData()_;returns,a,link,repository,data,to,describe,the,data,in,the,repository,including,the,snapshots,and,the,indices,across,all,snapshots,found,in,the,repository,throws,a,link,repository,exception,if,there,was,an,error,in,reading,the,data;repository,data,get,repository,data
Repository -> RepositoryData getRepositoryData()_;1546974294;Returns a {@link RepositoryData} to describe the data in the repository, including the snapshots_and the indices across all snapshots found in the repository.  Throws a {@link RepositoryException}_if there was an error in reading the data.;RepositoryData getRepositoryData()_;returns,a,link,repository,data,to,describe,the,data,in,the,repository,including,the,snapshots,and,the,indices,across,all,snapshots,found,in,the,repository,throws,a,link,repository,exception,if,there,was,an,error,in,reading,the,data;repository,data,get,repository,data
Repository -> void snapshotShard(IndexShard shard, Store store, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit,                        IndexShardSnapshotStatus snapshotStatus)_;1536828374;Creates a snapshot of the shard based on the index commit point._<p>_The index commit point can be obtained by using {@link org.elasticsearch.index.engine.Engine#acquireLastIndexCommit} method._Repository implementations shouldn't release the snapshot index commit point. It is done by the method caller._<p>_As snapshot process progresses, implementation of this method should update {@link IndexShardSnapshotStatus} object and check_{@link IndexShardSnapshotStatus#isAborted()} to see if the snapshot process should be aborted._@param shard               shard to be snapshotted_@param store               store to be snapshotted_@param snapshotId          snapshot id_@param indexId             id for the index being snapshotted_@param snapshotIndexCommit commit point_@param snapshotStatus      snapshot status;void snapshotShard(IndexShard shard, Store store, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit,_                       IndexShardSnapshotStatus snapshotStatus)_;creates,a,snapshot,of,the,shard,based,on,the,index,commit,point,p,the,index,commit,point,can,be,obtained,by,using,link,org,elasticsearch,index,engine,engine,acquire,last,index,commit,method,repository,implementations,shouldn,t,release,the,snapshot,index,commit,point,it,is,done,by,the,method,caller,p,as,snapshot,process,progresses,implementation,of,this,method,should,update,link,index,shard,snapshot,status,object,and,check,link,index,shard,snapshot,status,is,aborted,to,see,if,the,snapshot,process,should,be,aborted,param,shard,shard,to,be,snapshotted,param,store,store,to,be,snapshotted,param,snapshot,id,snapshot,id,param,index,id,id,for,the,index,being,snapshotted,param,snapshot,index,commit,commit,point,param,snapshot,status,snapshot,status;void,snapshot,shard,index,shard,shard,store,store,snapshot,id,snapshot,id,index,id,index,id,index,commit,snapshot,index,commit,index,shard,snapshot,status,snapshot,status
Repository -> void snapshotShard(IndexShard shard, Store store, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit,                        IndexShardSnapshotStatus snapshotStatus)_;1546974294;Creates a snapshot of the shard based on the index commit point._<p>_The index commit point can be obtained by using {@link org.elasticsearch.index.engine.Engine#acquireLastIndexCommit} method._Repository implementations shouldn't release the snapshot index commit point. It is done by the method caller._<p>_As snapshot process progresses, implementation of this method should update {@link IndexShardSnapshotStatus} object and check_{@link IndexShardSnapshotStatus#isAborted()} to see if the snapshot process should be aborted._@param shard               shard to be snapshotted_@param store               store to be snapshotted_@param snapshotId          snapshot id_@param indexId             id for the index being snapshotted_@param snapshotIndexCommit commit point_@param snapshotStatus      snapshot status;void snapshotShard(IndexShard shard, Store store, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit,_                       IndexShardSnapshotStatus snapshotStatus)_;creates,a,snapshot,of,the,shard,based,on,the,index,commit,point,p,the,index,commit,point,can,be,obtained,by,using,link,org,elasticsearch,index,engine,engine,acquire,last,index,commit,method,repository,implementations,shouldn,t,release,the,snapshot,index,commit,point,it,is,done,by,the,method,caller,p,as,snapshot,process,progresses,implementation,of,this,method,should,update,link,index,shard,snapshot,status,object,and,check,link,index,shard,snapshot,status,is,aborted,to,see,if,the,snapshot,process,should,be,aborted,param,shard,shard,to,be,snapshotted,param,store,store,to,be,snapshotted,param,snapshot,id,snapshot,id,param,index,id,id,for,the,index,being,snapshotted,param,snapshot,index,commit,commit,point,param,snapshot,status,snapshot,status;void,snapshot,shard,index,shard,shard,store,store,snapshot,id,snapshot,id,index,id,index,id,index,commit,snapshot,index,commit,index,shard,snapshot,status,snapshot,status
Repository -> RepositoryMetaData getMetadata()_;1524684173;Returns metadata about this repository.;RepositoryMetaData getMetadata()_;returns,metadata,about,this,repository;repository,meta,data,get,metadata
Repository -> RepositoryMetaData getMetadata()_;1536828374;Returns metadata about this repository.;RepositoryMetaData getMetadata()_;returns,metadata,about,this,repository;repository,meta,data,get,metadata
Repository -> RepositoryMetaData getMetadata()_;1546974294;Returns metadata about this repository.;RepositoryMetaData getMetadata()_;returns,metadata,about,this,repository;repository,meta,data,get,metadata
Repository -> MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId)_;1524684173;Returns global metadata associated with the snapshot.__@param snapshotId the snapshot id to load the global metadata from_@return the global metadata about the snapshot;MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId)_;returns,global,metadata,associated,with,the,snapshot,param,snapshot,id,the,snapshot,id,to,load,the,global,metadata,from,return,the,global,metadata,about,the,snapshot;meta,data,get,snapshot,global,meta,data,snapshot,id,snapshot,id
Repository -> MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId)_;1536828374;Returns global metadata associated with the snapshot.__@param snapshotId the snapshot id to load the global metadata from_@return the global metadata about the snapshot;MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId)_;returns,global,metadata,associated,with,the,snapshot,param,snapshot,id,the,snapshot,id,to,load,the,global,metadata,from,return,the,global,metadata,about,the,snapshot;meta,data,get,snapshot,global,meta,data,snapshot,id,snapshot,id
Repository -> MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId)_;1546974294;Returns global metadata associated with the snapshot.__@param snapshotId the snapshot id to load the global metadata from_@return the global metadata about the snapshot;MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId)_;returns,global,metadata,associated,with,the,snapshot,param,snapshot,id,the,snapshot,id,to,load,the,global,metadata,from,return,the,global,metadata,about,the,snapshot;meta,data,get,snapshot,global,meta,data,snapshot,id,snapshot,id
Repository -> String startVerification()_;1524684173;Verifies repository on the master node and returns the verification token._<p>_If the verification token is not null, it's passed to all data nodes for verification. If it's null - no_additional verification is required__@return verification token that should be passed to all Index Shard Repositories for additional verification or null;String startVerification()_;verifies,repository,on,the,master,node,and,returns,the,verification,token,p,if,the,verification,token,is,not,null,it,s,passed,to,all,data,nodes,for,verification,if,it,s,null,no,additional,verification,is,required,return,verification,token,that,should,be,passed,to,all,index,shard,repositories,for,additional,verification,or,null;string,start,verification
Repository -> String startVerification()_;1536828374;Verifies repository on the master node and returns the verification token._<p>_If the verification token is not null, it's passed to all data nodes for verification. If it's null - no_additional verification is required__@return verification token that should be passed to all Index Shard Repositories for additional verification or null;String startVerification()_;verifies,repository,on,the,master,node,and,returns,the,verification,token,p,if,the,verification,token,is,not,null,it,s,passed,to,all,data,nodes,for,verification,if,it,s,null,no,additional,verification,is,required,return,verification,token,that,should,be,passed,to,all,index,shard,repositories,for,additional,verification,or,null;string,start,verification
Repository -> String startVerification()_;1546974294;Verifies repository on the master node and returns the verification token._<p>_If the verification token is not null, it's passed to all data nodes for verification. If it's null - no_additional verification is required__@return verification token that should be passed to all Index Shard Repositories for additional verification or null;String startVerification()_;verifies,repository,on,the,master,node,and,returns,the,verification,token,p,if,the,verification,token,is,not,null,it,s,passed,to,all,data,nodes,for,verification,if,it,s,null,no,additional,verification,is,required,return,verification,token,that,should,be,passed,to,all,index,shard,repositories,for,additional,verification,or,null;string,start,verification
Repository -> SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards,                                   List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState)_;1524684173;Finalizes snapshotting process_<p>_This method is called on master after all shards are snapshotted.__@param snapshotId    snapshot id_@param indices       list of indices in the snapshot_@param startTime     start time of the snapshot_@param failure       global failure reason or null_@param totalShards   total number of shards_@param shardFailures list of shard failures_@param repositoryStateId the unique id identifying the state of the repository when the snapshot began_@param includeGlobalState include cluster global state_@return snapshot description;SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards,_                                  List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState)_;finalizes,snapshotting,process,p,this,method,is,called,on,master,after,all,shards,are,snapshotted,param,snapshot,id,snapshot,id,param,indices,list,of,indices,in,the,snapshot,param,start,time,start,time,of,the,snapshot,param,failure,global,failure,reason,or,null,param,total,shards,total,number,of,shards,param,shard,failures,list,of,shard,failures,param,repository,state,id,the,unique,id,identifying,the,state,of,the,repository,when,the,snapshot,began,param,include,global,state,include,cluster,global,state,return,snapshot,description;snapshot,info,finalize,snapshot,snapshot,id,snapshot,id,list,index,id,indices,long,start,time,string,failure,int,total,shards,list,snapshot,shard,failure,shard,failures,long,repository,state,id,boolean,include,global,state
Repository -> SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards,                                   List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState)_;1536828374;Finalizes snapshotting process_<p>_This method is called on master after all shards are snapshotted.__@param snapshotId    snapshot id_@param indices       list of indices in the snapshot_@param startTime     start time of the snapshot_@param failure       global failure reason or null_@param totalShards   total number of shards_@param shardFailures list of shard failures_@param repositoryStateId the unique id identifying the state of the repository when the snapshot began_@param includeGlobalState include cluster global state_@return snapshot description;SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards,_                                  List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState)_;finalizes,snapshotting,process,p,this,method,is,called,on,master,after,all,shards,are,snapshotted,param,snapshot,id,snapshot,id,param,indices,list,of,indices,in,the,snapshot,param,start,time,start,time,of,the,snapshot,param,failure,global,failure,reason,or,null,param,total,shards,total,number,of,shards,param,shard,failures,list,of,shard,failures,param,repository,state,id,the,unique,id,identifying,the,state,of,the,repository,when,the,snapshot,began,param,include,global,state,include,cluster,global,state,return,snapshot,description;snapshot,info,finalize,snapshot,snapshot,id,snapshot,id,list,index,id,indices,long,start,time,string,failure,int,total,shards,list,snapshot,shard,failure,shard,failures,long,repository,state,id,boolean,include,global,state
Repository -> SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards,                                   List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState)_;1546974294;Finalizes snapshotting process_<p>_This method is called on master after all shards are snapshotted.__@param snapshotId    snapshot id_@param indices       list of indices in the snapshot_@param startTime     start time of the snapshot_@param failure       global failure reason or null_@param totalShards   total number of shards_@param shardFailures list of shard failures_@param repositoryStateId the unique id identifying the state of the repository when the snapshot began_@param includeGlobalState include cluster global state_@return snapshot description;SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards,_                                  List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState)_;finalizes,snapshotting,process,p,this,method,is,called,on,master,after,all,shards,are,snapshotted,param,snapshot,id,snapshot,id,param,indices,list,of,indices,in,the,snapshot,param,start,time,start,time,of,the,snapshot,param,failure,global,failure,reason,or,null,param,total,shards,total,number,of,shards,param,shard,failures,list,of,shard,failures,param,repository,state,id,the,unique,id,identifying,the,state,of,the,repository,when,the,snapshot,began,param,include,global,state,include,cluster,global,state,return,snapshot,description;snapshot,info,finalize,snapshot,snapshot,id,snapshot,id,list,index,id,indices,long,start,time,string,failure,int,total,shards,list,snapshot,shard,failure,shard,failures,long,repository,state,id,boolean,include,global,state
Repository -> void endVerification(String verificationToken)_;1524684173;Called at the end of repository verification process._<p>_This method should perform all necessary cleanup of the temporary files created in the repository__@param verificationToken verification request generated by {@link #startVerification} command;void endVerification(String verificationToken)_;called,at,the,end,of,repository,verification,process,p,this,method,should,perform,all,necessary,cleanup,of,the,temporary,files,created,in,the,repository,param,verification,token,verification,request,generated,by,link,start,verification,command;void,end,verification,string,verification,token
Repository -> void endVerification(String verificationToken)_;1536828374;Called at the end of repository verification process._<p>_This method should perform all necessary cleanup of the temporary files created in the repository__@param verificationToken verification request generated by {@link #startVerification} command;void endVerification(String verificationToken)_;called,at,the,end,of,repository,verification,process,p,this,method,should,perform,all,necessary,cleanup,of,the,temporary,files,created,in,the,repository,param,verification,token,verification,request,generated,by,link,start,verification,command;void,end,verification,string,verification,token
Repository -> void endVerification(String verificationToken)_;1546974294;Called at the end of repository verification process._<p>_This method should perform all necessary cleanup of the temporary files created in the repository__@param verificationToken verification request generated by {@link #startVerification} command;void endVerification(String verificationToken)_;called,at,the,end,of,repository,verification,process,p,this,method,should,perform,all,necessary,cleanup,of,the,temporary,files,created,in,the,repository,param,verification,token,verification,request,generated,by,link,start,verification,command;void,end,verification,string,verification,token
Repository -> IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId)_;1524684173;Retrieve shard snapshot status for the stored snapshot__@param snapshotId snapshot id_@param version    version of elasticsearch that created this snapshot_@param indexId    the snapshotted index id for the shard to get status for_@param shardId    shard id_@return snapshot status;IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId)_;retrieve,shard,snapshot,status,for,the,stored,snapshot,param,snapshot,id,snapshot,id,param,version,version,of,elasticsearch,that,created,this,snapshot,param,index,id,the,snapshotted,index,id,for,the,shard,to,get,status,for,param,shard,id,shard,id,return,snapshot,status;index,shard,snapshot,status,get,shard,snapshot,status,snapshot,id,snapshot,id,version,version,index,id,index,id,shard,id,shard,id
Repository -> IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId)_;1536828374;Retrieve shard snapshot status for the stored snapshot__@param snapshotId snapshot id_@param version    version of elasticsearch that created this snapshot_@param indexId    the snapshotted index id for the shard to get status for_@param shardId    shard id_@return snapshot status;IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId)_;retrieve,shard,snapshot,status,for,the,stored,snapshot,param,snapshot,id,snapshot,id,param,version,version,of,elasticsearch,that,created,this,snapshot,param,index,id,the,snapshotted,index,id,for,the,shard,to,get,status,for,param,shard,id,shard,id,return,snapshot,status;index,shard,snapshot,status,get,shard,snapshot,status,snapshot,id,snapshot,id,version,version,index,id,index,id,shard,id,shard,id
Repository -> IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId)_;1546974294;Retrieve shard snapshot status for the stored snapshot__@param snapshotId snapshot id_@param version    version of elasticsearch that created this snapshot_@param indexId    the snapshotted index id for the shard to get status for_@param shardId    shard id_@return snapshot status;IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId)_;retrieve,shard,snapshot,status,for,the,stored,snapshot,param,snapshot,id,snapshot,id,param,version,version,of,elasticsearch,that,created,this,snapshot,param,index,id,the,snapshotted,index,id,for,the,shard,to,get,status,for,param,shard,id,shard,id,return,snapshot,status;index,shard,snapshot,status,get,shard,snapshot,status,snapshot,id,snapshot,id,version,version,index,id,index,id,shard,id,shard,id
Repository -> void verify(String verificationToken, DiscoveryNode localNode)_;1524684173;Verifies repository settings on data node._@param verificationToken value returned by {@link org.elasticsearch.repositories.Repository#startVerification()}_@param localNode         the local node information, for inclusion in verification errors;void verify(String verificationToken, DiscoveryNode localNode)_;verifies,repository,settings,on,data,node,param,verification,token,value,returned,by,link,org,elasticsearch,repositories,repository,start,verification,param,local,node,the,local,node,information,for,inclusion,in,verification,errors;void,verify,string,verification,token,discovery,node,local,node
Repository -> void verify(String verificationToken, DiscoveryNode localNode)_;1536828374;Verifies repository settings on data node._@param verificationToken value returned by {@link org.elasticsearch.repositories.Repository#startVerification()}_@param localNode         the local node information, for inclusion in verification errors;void verify(String verificationToken, DiscoveryNode localNode)_;verifies,repository,settings,on,data,node,param,verification,token,value,returned,by,link,org,elasticsearch,repositories,repository,start,verification,param,local,node,the,local,node,information,for,inclusion,in,verification,errors;void,verify,string,verification,token,discovery,node,local,node
Repository -> void verify(String verificationToken, DiscoveryNode localNode)_;1546974294;Verifies repository settings on data node._@param verificationToken value returned by {@link org.elasticsearch.repositories.Repository#startVerification()}_@param localNode         the local node information, for inclusion in verification errors;void verify(String verificationToken, DiscoveryNode localNode)_;verifies,repository,settings,on,data,node,param,verification,token,value,returned,by,link,org,elasticsearch,repositories,repository,start,verification,param,local,node,the,local,node,information,for,inclusion,in,verification,errors;void,verify,string,verification,token,discovery,node,local,node
Repository -> void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId)_;1524684173;Deletes snapshot__@param snapshotId snapshot id_@param repositoryStateId the unique id identifying the state of the repository when the snapshot deletion began;void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId)_;deletes,snapshot,param,snapshot,id,snapshot,id,param,repository,state,id,the,unique,id,identifying,the,state,of,the,repository,when,the,snapshot,deletion,began;void,delete,snapshot,snapshot,id,snapshot,id,long,repository,state,id
Repository -> void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId)_;1536828374;Deletes snapshot__@param snapshotId snapshot id_@param repositoryStateId the unique id identifying the state of the repository when the snapshot deletion began;void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId)_;deletes,snapshot,param,snapshot,id,snapshot,id,param,repository,state,id,the,unique,id,identifying,the,state,of,the,repository,when,the,snapshot,deletion,began;void,delete,snapshot,snapshot,id,snapshot,id,long,repository,state,id
Repository -> void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId)_;1546974294;Deletes snapshot__@param snapshotId snapshot id_@param repositoryStateId the unique id identifying the state of the repository when the snapshot deletion began;void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId)_;deletes,snapshot,param,snapshot,id,snapshot,id,param,repository,state,id,the,unique,id,identifying,the,state,of,the,repository,when,the,snapshot,deletion,began;void,delete,snapshot,snapshot,id,snapshot,id,long,repository,state,id
