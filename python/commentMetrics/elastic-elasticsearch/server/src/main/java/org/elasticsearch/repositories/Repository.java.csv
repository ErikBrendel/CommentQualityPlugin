commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Constructs a repository.  * @param metadata    metadata for the repository including name and settings  */ ;/**  * Constructs a repository.  * @param metadata    metadata for the repository including name and settings  */ Repository create(RepositoryMetaData metadata) throws Exception.
false;default;2;3;;default Repository create(RepositoryMetaData metaData, Function<String, Repository.Factory> typeLookup) throws Exception {     return create(metaData). }
true;;0;1;/**  * Returns metadata about this repository.  */ ;/**  * Returns metadata about this repository.  */ RepositoryMetaData getMetadata().
true;;1;1;/**  * Reads snapshot description from repository.  *  * @param snapshotId  snapshot id  * @return information about snapshot  */ ;/**  * Reads snapshot description from repository.  *  * @param snapshotId  snapshot id  * @return information about snapshot  */ SnapshotInfo getSnapshotInfo(SnapshotId snapshotId).
true;;1;1;/**  * Returns global metadata associated with the snapshot.  *  * @param snapshotId the snapshot id to load the global metadata from  * @return the global metadata about the snapshot  */ ;/**  * Returns global metadata associated with the snapshot.  *  * @param snapshotId the snapshot id to load the global metadata from  * @return the global metadata about the snapshot  */ MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId).
true;;2;1;/**  * Returns the index metadata associated with the snapshot.  *  * @param snapshotId the snapshot id to load the index metadata from  * @param index      the {@link IndexId} to load the metadata from  * @return the index metadata about the given index for the given snapshot  */ ;/**  * Returns the index metadata associated with the snapshot.  *  * @param snapshotId the snapshot id to load the index metadata from  * @param index      the {@link IndexId} to load the metadata from  * @return the index metadata about the given index for the given snapshot  */ IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException.
true;;0;1;/**  * Returns a {@link RepositoryData} to describe the data in the repository, including the snapshots  * and the indices across all snapshots found in the repository.  Throws a {@link RepositoryException}  * if there was an error in reading the data.  */ ;/**  * Returns a {@link RepositoryData} to describe the data in the repository, including the snapshots  * and the indices across all snapshots found in the repository.  Throws a {@link RepositoryException}  * if there was an error in reading the data.  */ RepositoryData getRepositoryData().
true;;3;1;/**  * Starts snapshotting process  *  * @param snapshotId snapshot id  * @param indices    list of indices to be snapshotted  * @param metaData   cluster metadata  */ ;/**  * Starts snapshotting process  *  * @param snapshotId snapshot id  * @param indices    list of indices to be snapshotted  * @param metaData   cluster metadata  */ void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData).
true;;8;2;/**  * Finalizes snapshotting process  * <p>  * This method is called on master after all shards are snapshotted.  *  * @param snapshotId    snapshot id  * @param indices       list of indices in the snapshot  * @param startTime     start time of the snapshot  * @param failure       global failure reason or null  * @param totalShards   total number of shards  * @param shardFailures list of shard failures  * @param repositoryStateId the unique id identifying the state of the repository when the snapshot began  * @param includeGlobalState include cluster global state  * @return snapshot description  */ ;/**  * Finalizes snapshotting process  * <p>  * This method is called on master after all shards are snapshotted.  *  * @param snapshotId    snapshot id  * @param indices       list of indices in the snapshot  * @param startTime     start time of the snapshot  * @param failure       global failure reason or null  * @param totalShards   total number of shards  * @param shardFailures list of shard failures  * @param repositoryStateId the unique id identifying the state of the repository when the snapshot began  * @param includeGlobalState include cluster global state  * @return snapshot description  */ SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards, List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState).
true;;2;1;/**  * Deletes snapshot  *  * @param snapshotId snapshot id  * @param repositoryStateId the unique id identifying the state of the repository when the snapshot deletion began  */ ;/**  * Deletes snapshot  *  * @param snapshotId snapshot id  * @param repositoryStateId the unique id identifying the state of the repository when the snapshot deletion began  */ void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId).
true;;0;1;/**  * Returns snapshot throttle time in nanoseconds  */ ;/**  * Returns snapshot throttle time in nanoseconds  */ long getSnapshotThrottleTimeInNanos().
true;;0;1;/**  * Returns restore throttle time in nanoseconds  */ ;/**  * Returns restore throttle time in nanoseconds  */ long getRestoreThrottleTimeInNanos().
true;;0;1;/**  * Verifies repository on the master node and returns the verification token.  * <p>  * If the verification token is not null, it's passed to all data nodes for verification. If it's null - no  * additional verification is required  *  * @return verification token that should be passed to all Index Shard Repositories for additional verification or null  */ ;/**  * Verifies repository on the master node and returns the verification token.  * <p>  * If the verification token is not null, it's passed to all data nodes for verification. If it's null - no  * additional verification is required  *  * @return verification token that should be passed to all Index Shard Repositories for additional verification or null  */ String startVerification().
true;;1;1;/**  * Called at the end of repository verification process.  * <p>  * This method should perform all necessary cleanup of the temporary files created in the repository  *  * @param verificationToken verification request generated by {@link #startVerification} command  */ ;/**  * Called at the end of repository verification process.  * <p>  * This method should perform all necessary cleanup of the temporary files created in the repository  *  * @param verificationToken verification request generated by {@link #startVerification} command  */ void endVerification(String verificationToken).
true;;2;1;/**  * Verifies repository settings on data node.  * @param verificationToken value returned by {@link org.elasticsearch.repositories.Repository#startVerification()}  * @param localNode         the local node information, for inclusion in verification errors  */ ;/**  * Verifies repository settings on data node.  * @param verificationToken value returned by {@link org.elasticsearch.repositories.Repository#startVerification()}  * @param localNode         the local node information, for inclusion in verification errors  */ void verify(String verificationToken, DiscoveryNode localNode).
true;;0;1;/**  * Returns true if the repository supports only read operations  * @return true if the repository is read/only  */ ;/**  * Returns true if the repository supports only read operations  * @return true if the repository is read/only  */ boolean isReadOnly().
true;;6;2;/**  * Creates a snapshot of the shard based on the index commit point.  * <p>  * The index commit point can be obtained by using {@link org.elasticsearch.index.engine.Engine#acquireLastIndexCommit} method.  * Repository implementations shouldn't release the snapshot index commit point. It is done by the method caller.  * <p>  * As snapshot process progresses, implementation of this method should update {@link IndexShardSnapshotStatus} object and check  * {@link IndexShardSnapshotStatus#isAborted()} to see if the snapshot process should be aborted.  * @param shard               shard to be snapshotted  * @param store               store to be snapshotted  * @param snapshotId          snapshot id  * @param indexId             id for the index being snapshotted  * @param snapshotIndexCommit commit point  * @param snapshotStatus      snapshot status  */ ;/**  * Creates a snapshot of the shard based on the index commit point.  * <p>  * The index commit point can be obtained by using {@link org.elasticsearch.index.engine.Engine#acquireLastIndexCommit} method.  * Repository implementations shouldn't release the snapshot index commit point. It is done by the method caller.  * <p>  * As snapshot process progresses, implementation of this method should update {@link IndexShardSnapshotStatus} object and check  * {@link IndexShardSnapshotStatus#isAborted()} to see if the snapshot process should be aborted.  * @param shard               shard to be snapshotted  * @param store               store to be snapshotted  * @param snapshotId          snapshot id  * @param indexId             id for the index being snapshotted  * @param snapshotIndexCommit commit point  * @param snapshotStatus      snapshot status  */ void snapshotShard(IndexShard shard, Store store, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus).
true;;6;2;/**  * Restores snapshot of the shard.  * <p>  * The index can be renamed on restore, hence different {@code shardId} and {@code snapshotShardId} are supplied.  *  * @param shard           the shard to restore the index into  * @param snapshotId      snapshot id  * @param version         version of elasticsearch that created this snapshot  * @param indexId         id of the index in the repository from which the restore is occurring  * @param snapshotShardId shard id (in the snapshot)  * @param recoveryState   recovery state  */ ;/**  * Restores snapshot of the shard.  * <p>  * The index can be renamed on restore, hence different {@code shardId} and {@code snapshotShardId} are supplied.  *  * @param shard           the shard to restore the index into  * @param snapshotId      snapshot id  * @param version         version of elasticsearch that created this snapshot  * @param indexId         id of the index in the repository from which the restore is occurring  * @param snapshotShardId shard id (in the snapshot)  * @param recoveryState   recovery state  */ void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState).
true;;4;1;/**  * Retrieve shard snapshot status for the stored snapshot  *  * @param snapshotId snapshot id  * @param version    version of elasticsearch that created this snapshot  * @param indexId    the snapshotted index id for the shard to get status for  * @param shardId    shard id  * @return snapshot status  */ ;/**  * Retrieve shard snapshot status for the stored snapshot  *  * @param snapshotId snapshot id  * @param version    version of elasticsearch that created this snapshot  * @param indexId    the snapshotted index id for the shard to get status for  * @param shardId    shard id  * @return snapshot status  */ IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId).
