commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * A supplier of the outstanding retention leases. This is used during merged operations to determine which operations that have been  * soft deleted should be retained.  *  * @return a supplier of outstanding retention leases  */ ;/**  * A supplier of the outstanding retention leases. This is used during merged operations to determine which operations that have been  * soft deleted should be retained.  *  * @return a supplier of outstanding retention leases  */ public Supplier<RetentionLeases> retentionLeasesSupplier() {     return retentionLeasesSupplier. }
true;public;1;3;/**  * Enables / disables gc deletes  *  * @see #isEnableGcDeletes()  */ ;/**  * Enables / disables gc deletes  *  * @see #isEnableGcDeletes()  */ public void setEnableGcDeletes(boolean enableGcDeletes) {     this.enableGcDeletes = enableGcDeletes. }
true;public;0;3;/**  * Returns the initial index buffer size. This setting is only read on startup and otherwise controlled  * by {@link IndexingMemoryController}  */ ;/**  * Returns the initial index buffer size. This setting is only read on startup and otherwise controlled  * by {@link IndexingMemoryController}  */ public ByteSizeValue getIndexingBufferSize() {     return indexingBufferSize. }
true;public;0;3;/**  * Returns <code>true</code> iff delete garbage collection in the engine should be enabled. This setting is updateable  * in realtime and forces a volatile read. Consumers can safely read this value directly go fetch it's latest value.  * The default is <code>true</code>  * <p>  *     Engine GC deletion if enabled collects deleted documents from in-memory realtime data structures after a certain amount of  *     time ({@link IndexSettings#getGcDeletesInMillis()} if enabled. Before deletes are GCed they will cause re-adding the document  *     that was deleted to fail.  * </p>  */ ;/**  * Returns <code>true</code> iff delete garbage collection in the engine should be enabled. This setting is updateable  * in realtime and forces a volatile read. Consumers can safely read this value directly go fetch it's latest value.  * The default is <code>true</code>  * <p>  *     Engine GC deletion if enabled collects deleted documents from in-memory realtime data structures after a certain amount of  *     time ({@link IndexSettings#getGcDeletesInMillis()} if enabled. Before deletes are GCed they will cause re-adding the document  *     that was deleted to fail.  * </p>  */ public boolean isEnableGcDeletes() {     return enableGcDeletes. }
true;public;0;3;/**  * Returns the {@link Codec} used in the engines {@link org.apache.lucene.index.IndexWriter}  * <p>  *     Note: this settings is only read on startup.  * </p>  */ ;/**  * Returns the {@link Codec} used in the engines {@link org.apache.lucene.index.IndexWriter}  * <p>  *     Note: this settings is only read on startup.  * </p>  */ public Codec getCodec() {     return codecService.codec(codecName). }
true;public;0;3;/**  * Returns a thread-pool mainly used to get estimated time stamps from  * {@link org.elasticsearch.threadpool.ThreadPool#relativeTimeInMillis()} and to schedule  * async force merge calls on the {@link org.elasticsearch.threadpool.ThreadPool.Names#FORCE_MERGE} thread-pool  */ ;/**  * Returns a thread-pool mainly used to get estimated time stamps from  * {@link org.elasticsearch.threadpool.ThreadPool#relativeTimeInMillis()} and to schedule  * async force merge calls on the {@link org.elasticsearch.threadpool.ThreadPool.Names#FORCE_MERGE} thread-pool  */ public ThreadPool getThreadPool() {     return threadPool. }
true;public;0;3;/**  * Returns an {@link org.elasticsearch.index.engine.Engine.Warmer} used to warm new searchers before they are used for searching.  */ ;/**  * Returns an {@link org.elasticsearch.index.engine.Engine.Warmer} used to warm new searchers before they are used for searching.  */ public Engine.Warmer getWarmer() {     return warmer. }
true;public;0;3;/**  * Returns the {@link org.elasticsearch.index.store.Store} instance that provides access to the  * {@link org.apache.lucene.store.Directory} used for the engines {@link org.apache.lucene.index.IndexWriter} to write it's index files  * to.  * <p>  * Note: In order to use this instance the consumer needs to increment the stores reference before it's used the first time and hold  * it's reference until it's not needed anymore.  * </p>  */ ;/**  * Returns the {@link org.elasticsearch.index.store.Store} instance that provides access to the  * {@link org.apache.lucene.store.Directory} used for the engines {@link org.apache.lucene.index.IndexWriter} to write it's index files  * to.  * <p>  * Note: In order to use this instance the consumer needs to increment the stores reference before it's used the first time and hold  * it's reference until it's not needed anymore.  * </p>  */ public Store getStore() {     return store. }
true;public;0;3;/**  * Returns the global checkpoint tracker  */ ;/**  * Returns the global checkpoint tracker  */ public LongSupplier getGlobalCheckpointSupplier() {     return globalCheckpointSupplier. }
true;public;0;3;/**  * Returns the {@link org.apache.lucene.index.MergePolicy} for the engines {@link org.apache.lucene.index.IndexWriter}  */ ;/**  * Returns the {@link org.apache.lucene.index.MergePolicy} for the engines {@link org.apache.lucene.index.IndexWriter}  */ public MergePolicy getMergePolicy() {     return mergePolicy. }
true;public;0;3;/**  * Returns a listener that should be called on engine failure  */ ;/**  * Returns a listener that should be called on engine failure  */ public Engine.EventListener getEventListener() {     return eventListener. }
true;public;0;3;/**  * Returns the index settings for this index.  */ ;/**  * Returns the index settings for this index.  */ public IndexSettings getIndexSettings() {     return indexSettings. }
true;public;0;1;/**  * Returns the engines shard ID  */ ;/**  * Returns the engines shard ID  */ public ShardId getShardId() {     return shardId. }
true;public;0;3;/**  * Returns the allocation ID for the shard.  *  * @return the allocation ID  */ ;/**  * Returns the allocation ID for the shard.  *  * @return the allocation ID  */ public String getAllocationId() {     return allocationId. }
true;public;0;3;/**  * Returns the analyzer as the default analyzer in the engines {@link org.apache.lucene.index.IndexWriter}  */ ;/**  * Returns the analyzer as the default analyzer in the engines {@link org.apache.lucene.index.IndexWriter}  */ public Analyzer getAnalyzer() {     return analyzer. }
true;public;0;3;/**  * Returns the {@link org.apache.lucene.search.similarities.Similarity} used for indexing and searching.  */ ;/**  * Returns the {@link org.apache.lucene.search.similarities.Similarity} used for indexing and searching.  */ public Similarity getSimilarity() {     return similarity. }
true;public;0;3;/**  * Return the cache to use for queries.  */ ;/**  * Return the cache to use for queries.  */ public QueryCache getQueryCache() {     return queryCache. }
true;public;0;3;/**  * Return the policy to use when caching queries.  */ ;/**  * Return the policy to use when caching queries.  */ public QueryCachingPolicy getQueryCachingPolicy() {     return queryCachingPolicy. }
true;public;0;3;/**  * Returns the translog config for this engine  */ ;/**  * Returns the translog config for this engine  */ public TranslogConfig getTranslogConfig() {     return translogConfig. }
true;public;0;1;/**  * Returns a {@link TimeValue} at what time interval after the last write modification to the engine finished merges  * should be automatically flushed. This is used to free up transient disk usage of potentially large segments that  * are written after the engine became inactive from an indexing perspective.  */ ;/**  * Returns a {@link TimeValue} at what time interval after the last write modification to the engine finished merges  * should be automatically flushed. This is used to free up transient disk usage of potentially large segments that  * are written after the engine became inactive from an indexing perspective.  */ public TimeValue getFlushMergesAfter() {     return flushMergesAfter. }
true;public;0;3;/**  * The refresh listeners to add to Lucene for externally visible refreshes  */ ;/**  * The refresh listeners to add to Lucene for externally visible refreshes  */ public List<ReferenceManager.RefreshListener> getExternalRefreshListener() {     return externalRefreshListener. }
true;public;0;1;/**  * The refresh listeners to add to Lucene for internally visible refreshes. These listeners will also be invoked on external refreshes  */ ;/**  * The refresh listeners to add to Lucene for internally visible refreshes. These listeners will also be invoked on external refreshes  */ public List<ReferenceManager.RefreshListener> getInternalRefreshListener() {     return internalRefreshListener. }
true;public;0;3;/**  * Return the sort order of this index, or null if the index has no sort.  */ ;/**  * Return the sort order of this index, or null if the index has no sort.  */ public Sort getIndexSort() {     return indexSort. }
true;public;0;4;/**  * Returns the circuit breaker service for this engine, or {@code null} if none is to be used.  */ ;/**  * Returns the circuit breaker service for this engine, or {@code null} if none is to be used.  */ @Nullable public CircuitBreakerService getCircuitBreakerService() {     return this.circuitBreakerService. }
true;public;0;3;/**  * Returns a supplier that supplies the latest primary term value of the associated shard.  */ ;/**  * Returns a supplier that supplies the latest primary term value of the associated shard.  */ public LongSupplier getPrimaryTermSupplier() {     return primaryTermSupplier. }
true;;2;1;/**  * Creates a tombstone document for a delete operation.  */ ;/**  * Creates a tombstone document for a delete operation.  */ ParsedDocument newDeleteTombstoneDoc(String type, String id).
true;;1;1;/**  * Creates a tombstone document for a noop operation.  * @param reason the reason of an a noop  */ ;/**  * Creates a tombstone document for a noop operation.  * @param reason the reason of an a noop  */ ParsedDocument newNoopTombstoneDoc(String reason).
false;public;0;3;;public TombstoneDocSupplier getTombstoneDocSupplier() {     return tombstoneDocSupplier. }
