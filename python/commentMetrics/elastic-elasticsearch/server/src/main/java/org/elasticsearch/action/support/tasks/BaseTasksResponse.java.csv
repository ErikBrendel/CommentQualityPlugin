commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(taskFailures.size()).     for (TaskOperationFailure exp : taskFailures) {         exp.writeTo(out).     }     out.writeVInt(nodeFailures.size()).     for (ElasticsearchException exp : nodeFailures) {         exp.writeTo(out).     } }
true;public;0;3;/**  * The list of task failures exception.  */ ;/**  * The list of task failures exception.  */ public List<TaskOperationFailure> getTaskFailures() {     return taskFailures. }
true;public;0;3;/**  * The list of node failures exception.  */ ;/**  * The list of node failures exception.  */ public List<ElasticsearchException> getNodeFailures() {     return nodeFailures. }
true;public;1;7;/**  * Rethrow task failures if there are any.  */ ;/**  * Rethrow task failures if there are any.  */ public void rethrowFailures(String operationName) {     rethrowAndSuppress(Stream.concat(getNodeFailures().stream(), getTaskFailures().stream().map(f -> new ElasticsearchException("{} of [{}] failed", f.getCause(), operationName, new TaskId(f.getNodeId(), f.getTaskId())))).collect(toList())). }
false;protected;2;21;;protected void toXContentCommon(XContentBuilder builder, ToXContent.Params params) throws IOException {     if (getTaskFailures() != null && getTaskFailures().size() > 0) {         builder.startArray(TASK_FAILURES).         for (TaskOperationFailure ex : getTaskFailures()) {             builder.startObject().             builder.value(ex).             builder.endObject().         }         builder.endArray().     }     if (getNodeFailures() != null && getNodeFailures().size() > 0) {         builder.startArray(NODE_FAILURES).         for (ElasticsearchException ex : getNodeFailures()) {             builder.startObject().             ex.toXContent(builder, params).             builder.endObject().         }         builder.endArray().     } }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     BaseTasksResponse response = (BaseTasksResponse) o.     return taskFailures.equals(response.taskFailures) && nodeFailures.equals(response.nodeFailures). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(taskFailures, nodeFailures). }
