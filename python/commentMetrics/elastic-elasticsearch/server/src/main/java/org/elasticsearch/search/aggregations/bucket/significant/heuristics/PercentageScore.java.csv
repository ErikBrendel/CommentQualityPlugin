commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public void writeTo(StreamOutput out) throws IOException { }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).endObject().     return builder. }
false;public,static;1;9;;public static SignificanceHeuristic parse(XContentParser parser) throws IOException, QueryShardException {     // move to the closing bracket     if (!parser.nextToken().equals(XContentParser.Token.END_OBJECT)) {         throw new ElasticsearchParseException("failed to parse [percentage] significance heuristic. expected an empty object, " + "but got [{}] instead", parser.currentToken()).     }     return new PercentageScore(). }
true;public;4;9;/**  * Indicates the significance of a term in a sample by determining what percentage  * of all occurrences of a term are found in the sample.  */ ;/**  * Indicates the significance of a term in a sample by determining what percentage  * of all occurrences of a term are found in the sample.  */ @Override public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) {     checkFrequencyValidity(subsetFreq, subsetSize, supersetFreq, supersetSize, "PercentageScore").     if (supersetFreq == 0) {         // avoid a divide by zero issue         return 0.     }     return (double) subsetFreq / (double) supersetFreq. }
false;public;1;7;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     return true. }
false;public;0;4;;@Override public int hashCode() {     return getClass().hashCode(). }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).endObject().     return builder. }
