commented;modifiers;parameterAmount;loc;comment;code
false;public;4;8;;@Override public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) {     subsetSizeHolder.value = subsetSize.     supersetSizeHolder.value = supersetSize.     subsetDfHolder.value = subsetFreq.     supersetDfHolder.value = supersetFreq.     return executableScript.execute(params). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     script.writeTo(out). }
false;public;1;6;;@Override public SignificanceHeuristic rewrite(InternalAggregation.ReduceContext context) {     SignificantTermsHeuristicScoreScript.Factory factory = context.scriptService().compile(script, SignificantTermsHeuristicScoreScript.CONTEXT).     return new ExecutableScriptHeuristic(script, factory.newInstance()). }
false;public;1;7;;@Override public SignificanceHeuristic rewrite(SearchContext context) {     QueryShardContext shardContext = context.getQueryShardContext().     SignificantTermsHeuristicScoreScript.Factory compiledScript = shardContext.getScriptService().compile(script, SignificantTermsHeuristicScoreScript.CONTEXT).     return new ExecutableScriptHeuristic(script, compiledScript.newInstance()). }
true;public;4;5;/**  * Calculates score with a script  *  * @param subsetFreq   The frequency of the term in the selected sample  * @param subsetSize   The size of the selected sample (typically number of docs)  * @param supersetFreq The frequency of the term in the superset from which the sample was taken  * @param supersetSize The size of the superset from which the sample was taken  (typically number of docs)  * @return a "significance" score  */ ;/**  * Calculates score with a script  *  * @param subsetFreq   The frequency of the term in the selected sample  * @param subsetSize   The size of the selected sample (typically number of docs)  * @param supersetFreq The frequency of the term in the superset from which the sample was taken  * @param supersetSize The size of the superset from which the sample was taken  (typically number of docs)  * @return a "significance" score  */ @Override public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) {     throw new UnsupportedOperationException("This scoring heuristic must have 'rewrite' called on it to provide a version ready " + "for use"). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params builderParams) throws IOException {     builder.startObject(NAME).     builder.field(Script.SCRIPT_PARSE_FIELD.getPreferredName()).     script.toXContent(builder, builderParams).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(script). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     ScriptHeuristic other = (ScriptHeuristic) obj.     return Objects.equals(script, other.script). }
false;public,static;1;25;;public static SignificanceHeuristic parse(XContentParser parser) throws IOException, QueryShardException {     String heuristicName = parser.currentName().     Script script = null.     XContentParser.Token token.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token.equals(XContentParser.Token.FIELD_NAME)) {             currentFieldName = parser.currentName().         } else {             if (Script.SCRIPT_PARSE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 script = Script.parse(parser).             } else {                 throw new ElasticsearchParseException("failed to parse [{}] significance heuristic. unknown object [{}]", heuristicName, currentFieldName).             }         }     }     if (script == null) {         throw new ElasticsearchParseException("failed to parse [{}] significance heuristic. no script found in script_heuristic", heuristicName).     }     return new ScriptHeuristic(script). }
false;public;0;4;;@Override public int intValue() {     return (int) value. }
false;public;0;4;;@Override public long longValue() {     return value. }
false;public;0;4;;@Override public float floatValue() {     return value. }
false;public;0;4;;@Override public double doubleValue() {     return value. }
false;public;0;4;;@Override public String toString() {     return Long.toString(value). }
