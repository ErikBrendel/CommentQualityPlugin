commented;modifiers;parameterAmount;loc;comment;code
true;static;2;10;/**  * Create a new {@link ShapeBuilder} from {@link XContent}  * @param parser parser to read the GeoShape from  * @param shapeMapper document field mapper reference required for spatial parameters relevant  *                     to the shape construction process (e.g., orientation)  *                     todo: refactor to place build specific parameters in the SpatialContext  * @return {@link ShapeBuilder} read from the parser or null  *          if the parsers current token has been <code>null</code>  * @throws IOException if the input could not be read  */ ;/**  * Create a new {@link ShapeBuilder} from {@link XContent}  * @param parser parser to read the GeoShape from  * @param shapeMapper document field mapper reference required for spatial parameters relevant  *                     to the shape construction process (e.g., orientation)  *                     todo: refactor to place build specific parameters in the SpatialContext  * @return {@link ShapeBuilder} read from the parser or null  *          if the parsers current token has been <code>null</code>  * @throws IOException if the input could not be read  */ static ShapeBuilder parse(XContentParser parser, BaseGeoShapeFieldMapper shapeMapper) throws IOException {     if (parser.currentToken() == XContentParser.Token.VALUE_NULL) {         return null.     }     if (parser.currentToken() == XContentParser.Token.START_OBJECT) {         return GeoJsonParser.parse(parser, shapeMapper).     } else if (parser.currentToken() == XContentParser.Token.VALUE_STRING) {         return GeoWKTParser.parse(parser, shapeMapper).     }     throw new ElasticsearchParseException("shape must be an object consisting of type and coordinates"). }
true;static;1;3;/**  * Create a new {@link ShapeBuilder} from {@link XContent}  * @param parser parser to read the GeoShape from  * @return {@link ShapeBuilder} read from the parser or null  *          if the parsers current token has been <code>null</code>  * @throws IOException if the input could not be read  */ ;/**  * Create a new {@link ShapeBuilder} from {@link XContent}  * @param parser parser to read the GeoShape from  * @return {@link ShapeBuilder} read from the parser or null  *          if the parsers current token has been <code>null</code>  * @throws IOException if the input could not be read  */ static ShapeBuilder parse(XContentParser parser) throws IOException {     return parse(parser, null). }
