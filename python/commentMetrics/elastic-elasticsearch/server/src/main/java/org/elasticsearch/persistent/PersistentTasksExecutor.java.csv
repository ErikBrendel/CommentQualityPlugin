# id;timestamp;commentText;codeText;commentWords;codeWords
PersistentTasksExecutor -> protected abstract void nodeOperation(AllocatedPersistentTask task, Params params, @Nullable PersistentTaskState state)_;1529076503;This operation will be executed on the executor node._<p>_NOTE: The nodeOperation has to throw an exception, trigger task.markAsCompleted() or task.completeAndNotifyIfNeeded() methods to_indicate that the persistent task has finished.;protected abstract void nodeOperation(AllocatedPersistentTask task, Params params, @Nullable PersistentTaskState state)_;this,operation,will,be,executed,on,the,executor,node,p,note,the,node,operation,has,to,throw,an,exception,trigger,task,mark,as,completed,or,task,complete,and,notify,if,needed,methods,to,indicate,that,the,persistent,task,has,finished;protected,abstract,void,node,operation,allocated,persistent,task,task,params,params,nullable,persistent,task,state,state
PersistentTasksExecutor -> protected abstract void nodeOperation(AllocatedPersistentTask task, Params params, @Nullable PersistentTaskState state)_;1541092382;This operation will be executed on the executor node._<p>_NOTE: The nodeOperation has to throw an exception, trigger task.markAsCompleted() or task.completeAndNotifyIfNeeded() methods to_indicate that the persistent task has finished.;protected abstract void nodeOperation(AllocatedPersistentTask task, Params params, @Nullable PersistentTaskState state)_;this,operation,will,be,executed,on,the,executor,node,p,note,the,node,operation,has,to,throw,an,exception,trigger,task,mark,as,completed,or,task,complete,and,notify,if,needed,methods,to,indicate,that,the,persistent,task,has,finished;protected,abstract,void,node,operation,allocated,persistent,task,task,params,params,nullable,persistent,task,state,state
PersistentTasksExecutor -> protected abstract void nodeOperation(AllocatedPersistentTask task, Params params, @Nullable PersistentTaskState state)_;1542402632;This operation will be executed on the executor node._<p>_NOTE: The nodeOperation has to throw an exception, trigger task.markAsCompleted() or task.completeAndNotifyIfNeeded() methods to_indicate that the persistent task has finished.;protected abstract void nodeOperation(AllocatedPersistentTask task, Params params, @Nullable PersistentTaskState state)_;this,operation,will,be,executed,on,the,executor,node,p,note,the,node,operation,has,to,throw,an,exception,trigger,task,mark,as,completed,or,task,complete,and,notify,if,needed,methods,to,indicate,that,the,persistent,task,has,finished;protected,abstract,void,node,operation,allocated,persistent,task,task,params,params,nullable,persistent,task,state,state
PersistentTasksExecutor -> public void validate(Params params, ClusterState clusterState);1524684173;Checks the current cluster state for compatibility with the params_<p>_Throws an exception if the supplied params cannot be executed on the cluster in the current state.;public void validate(Params params, ClusterState clusterState) {};checks,the,current,cluster,state,for,compatibility,with,the,params,p,throws,an,exception,if,the,supplied,params,cannot,be,executed,on,the,cluster,in,the,current,state;public,void,validate,params,params,cluster,state,cluster,state
PersistentTasksExecutor -> public void validate(Params params, ClusterState clusterState);1528103657;Checks the current cluster state for compatibility with the params_<p>_Throws an exception if the supplied params cannot be executed on the cluster in the current state.;public void validate(Params params, ClusterState clusterState) {};checks,the,current,cluster,state,for,compatibility,with,the,params,p,throws,an,exception,if,the,supplied,params,cannot,be,executed,on,the,cluster,in,the,current,state;public,void,validate,params,params,cluster,state,cluster,state
PersistentTasksExecutor -> public void validate(Params params, ClusterState clusterState);1529076503;Checks the current cluster state for compatibility with the params_<p>_Throws an exception if the supplied params cannot be executed on the cluster in the current state.;public void validate(Params params, ClusterState clusterState) {};checks,the,current,cluster,state,for,compatibility,with,the,params,p,throws,an,exception,if,the,supplied,params,cannot,be,executed,on,the,cluster,in,the,current,state;public,void,validate,params,params,cluster,state,cluster,state
PersistentTasksExecutor -> public void validate(Params params, ClusterState clusterState);1541092382;Checks the current cluster state for compatibility with the params_<p>_Throws an exception if the supplied params cannot be executed on the cluster in the current state.;public void validate(Params params, ClusterState clusterState) {};checks,the,current,cluster,state,for,compatibility,with,the,params,p,throws,an,exception,if,the,supplied,params,cannot,be,executed,on,the,cluster,in,the,current,state;public,void,validate,params,params,cluster,state,cluster,state
PersistentTasksExecutor -> public void validate(Params params, ClusterState clusterState);1542402632;Checks the current cluster state for compatibility with the params_<p>_Throws an exception if the supplied params cannot be executed on the cluster in the current state.;public void validate(Params params, ClusterState clusterState) {};checks,the,current,cluster,state,for,compatibility,with,the,params,p,throws,an,exception,if,the,supplied,params,cannot,be,executed,on,the,cluster,in,the,current,state;public,void,validate,params,params,cluster,state,cluster,state
PersistentTasksExecutor -> protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector);1524684173;Finds the least loaded node that satisfies the selector criteria;protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector) {_        long minLoad = Long.MAX_VALUE__        DiscoveryNode minLoadedNode = null__        PersistentTasksCustomMetaData persistentTasks = clusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        for (DiscoveryNode node : clusterState.getNodes()) {_            if (selector.test(node)) {_                if (persistentTasks == null) {_                    _                    return node__                }_                long numberOfTasks = persistentTasks.getNumberOfTasksOnNode(node.getId(), taskName)__                if (minLoad > numberOfTasks) {_                    minLoad = numberOfTasks__                    minLoadedNode = node__                }_            }_        }_        return minLoadedNode__    };finds,the,least,loaded,node,that,satisfies,the,selector,criteria;protected,discovery,node,select,least,loaded,node,cluster,state,cluster,state,predicate,discovery,node,selector,long,min,load,long,discovery,node,min,loaded,node,null,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,for,discovery,node,node,cluster,state,get,nodes,if,selector,test,node,if,persistent,tasks,null,return,node,long,number,of,tasks,persistent,tasks,get,number,of,tasks,on,node,node,get,id,task,name,if,min,load,number,of,tasks,min,load,number,of,tasks,min,loaded,node,node,return,min,loaded,node
PersistentTasksExecutor -> protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector);1528103657;Finds the least loaded node that satisfies the selector criteria;protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector) {_        long minLoad = Long.MAX_VALUE__        DiscoveryNode minLoadedNode = null__        PersistentTasksCustomMetaData persistentTasks = clusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        for (DiscoveryNode node : clusterState.getNodes()) {_            if (selector.test(node)) {_                if (persistentTasks == null) {_                    _                    return node__                }_                long numberOfTasks = persistentTasks.getNumberOfTasksOnNode(node.getId(), taskName)__                if (minLoad > numberOfTasks) {_                    minLoad = numberOfTasks__                    minLoadedNode = node__                }_            }_        }_        return minLoadedNode__    };finds,the,least,loaded,node,that,satisfies,the,selector,criteria;protected,discovery,node,select,least,loaded,node,cluster,state,cluster,state,predicate,discovery,node,selector,long,min,load,long,discovery,node,min,loaded,node,null,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,for,discovery,node,node,cluster,state,get,nodes,if,selector,test,node,if,persistent,tasks,null,return,node,long,number,of,tasks,persistent,tasks,get,number,of,tasks,on,node,node,get,id,task,name,if,min,load,number,of,tasks,min,load,number,of,tasks,min,loaded,node,node,return,min,loaded,node
PersistentTasksExecutor -> protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector);1529076503;Finds the least loaded node that satisfies the selector criteria;protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector) {_        long minLoad = Long.MAX_VALUE__        DiscoveryNode minLoadedNode = null__        PersistentTasksCustomMetaData persistentTasks = clusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        for (DiscoveryNode node : clusterState.getNodes()) {_            if (selector.test(node)) {_                if (persistentTasks == null) {_                    _                    return node__                }_                long numberOfTasks = persistentTasks.getNumberOfTasksOnNode(node.getId(), taskName)__                if (minLoad > numberOfTasks) {_                    minLoad = numberOfTasks__                    minLoadedNode = node__                }_            }_        }_        return minLoadedNode__    };finds,the,least,loaded,node,that,satisfies,the,selector,criteria;protected,discovery,node,select,least,loaded,node,cluster,state,cluster,state,predicate,discovery,node,selector,long,min,load,long,discovery,node,min,loaded,node,null,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,for,discovery,node,node,cluster,state,get,nodes,if,selector,test,node,if,persistent,tasks,null,return,node,long,number,of,tasks,persistent,tasks,get,number,of,tasks,on,node,node,get,id,task,name,if,min,load,number,of,tasks,min,load,number,of,tasks,min,loaded,node,node,return,min,loaded,node
PersistentTasksExecutor -> protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector);1541092382;Finds the least loaded node that satisfies the selector criteria;protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector) {_        long minLoad = Long.MAX_VALUE__        DiscoveryNode minLoadedNode = null__        PersistentTasksCustomMetaData persistentTasks = clusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        for (DiscoveryNode node : clusterState.getNodes()) {_            if (selector.test(node)) {_                if (persistentTasks == null) {_                    _                    return node__                }_                long numberOfTasks = persistentTasks.getNumberOfTasksOnNode(node.getId(), taskName)__                if (minLoad > numberOfTasks) {_                    minLoad = numberOfTasks__                    minLoadedNode = node__                }_            }_        }_        return minLoadedNode__    };finds,the,least,loaded,node,that,satisfies,the,selector,criteria;protected,discovery,node,select,least,loaded,node,cluster,state,cluster,state,predicate,discovery,node,selector,long,min,load,long,discovery,node,min,loaded,node,null,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,for,discovery,node,node,cluster,state,get,nodes,if,selector,test,node,if,persistent,tasks,null,return,node,long,number,of,tasks,persistent,tasks,get,number,of,tasks,on,node,node,get,id,task,name,if,min,load,number,of,tasks,min,load,number,of,tasks,min,loaded,node,node,return,min,loaded,node
PersistentTasksExecutor -> protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector);1542402632;Finds the least loaded node that satisfies the selector criteria;protected DiscoveryNode selectLeastLoadedNode(ClusterState clusterState, Predicate<DiscoveryNode> selector) {_        long minLoad = Long.MAX_VALUE__        DiscoveryNode minLoadedNode = null__        PersistentTasksCustomMetaData persistentTasks = clusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        for (DiscoveryNode node : clusterState.getNodes()) {_            if (selector.test(node)) {_                if (persistentTasks == null) {_                    _                    return node__                }_                long numberOfTasks = persistentTasks.getNumberOfTasksOnNode(node.getId(), taskName)__                if (minLoad > numberOfTasks) {_                    minLoad = numberOfTasks__                    minLoadedNode = node__                }_            }_        }_        return minLoadedNode__    };finds,the,least,loaded,node,that,satisfies,the,selector,criteria;protected,discovery,node,select,least,loaded,node,cluster,state,cluster,state,predicate,discovery,node,selector,long,min,load,long,discovery,node,min,loaded,node,null,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,for,discovery,node,node,cluster,state,get,nodes,if,selector,test,node,if,persistent,tasks,null,return,node,long,number,of,tasks,persistent,tasks,get,number,of,tasks,on,node,node,get,id,task,name,if,min,load,number,of,tasks,min,load,number,of,tasks,min,loaded,node,node,return,min,loaded,node
PersistentTasksExecutor -> protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,                                                  PersistentTask<Params> taskInProgress, Map<String, String> headers);1524684173;Creates a AllocatedPersistentTask for communicating with task manager;protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,_                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {_        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers)__    };creates,a,allocated,persistent,task,for,communicating,with,task,manager;protected,allocated,persistent,task,create,task,long,id,string,type,string,action,task,id,parent,task,id,persistent,task,params,task,in,progress,map,string,string,headers,return,new,allocated,persistent,task,id,type,action,get,description,task,in,progress,parent,task,id,headers
PersistentTasksExecutor -> protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,                                                  PersistentTask<Params> taskInProgress, Map<String, String> headers);1528103657;Creates a AllocatedPersistentTask for communicating with task manager;protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,_                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {_        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers)__    };creates,a,allocated,persistent,task,for,communicating,with,task,manager;protected,allocated,persistent,task,create,task,long,id,string,type,string,action,task,id,parent,task,id,persistent,task,params,task,in,progress,map,string,string,headers,return,new,allocated,persistent,task,id,type,action,get,description,task,in,progress,parent,task,id,headers
PersistentTasksExecutor -> protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,                                                  PersistentTask<Params> taskInProgress, Map<String, String> headers);1529076503;Creates a AllocatedPersistentTask for communicating with task manager;protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,_                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {_        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers)__    };creates,a,allocated,persistent,task,for,communicating,with,task,manager;protected,allocated,persistent,task,create,task,long,id,string,type,string,action,task,id,parent,task,id,persistent,task,params,task,in,progress,map,string,string,headers,return,new,allocated,persistent,task,id,type,action,get,description,task,in,progress,parent,task,id,headers
PersistentTasksExecutor -> protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,                                                  PersistentTask<Params> taskInProgress, Map<String, String> headers);1541092382;Creates a AllocatedPersistentTask for communicating with task manager;protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,_                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {_        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers)__    };creates,a,allocated,persistent,task,for,communicating,with,task,manager;protected,allocated,persistent,task,create,task,long,id,string,type,string,action,task,id,parent,task,id,persistent,task,params,task,in,progress,map,string,string,headers,return,new,allocated,persistent,task,id,type,action,get,description,task,in,progress,parent,task,id,headers
PersistentTasksExecutor -> protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,                                                  PersistentTask<Params> taskInProgress, Map<String, String> headers);1542402632;Creates a AllocatedPersistentTask for communicating with task manager;protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId,_                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {_        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers)__    };creates,a,allocated,persistent,task,for,communicating,with,task,manager;protected,allocated,persistent,task,create,task,long,id,string,type,string,action,task,id,parent,task,id,persistent,task,params,task,in,progress,map,string,string,headers,return,new,allocated,persistent,task,id,type,action,get,description,task,in,progress,parent,task,id,headers
PersistentTasksExecutor -> protected String getDescription(PersistentTask<Params> taskInProgress);1524684173;Returns task description that will be available via task manager;protected String getDescription(PersistentTask<Params> taskInProgress) {_        return "id=" + taskInProgress.getId()__    };returns,task,description,that,will,be,available,via,task,manager;protected,string,get,description,persistent,task,params,task,in,progress,return,id,task,in,progress,get,id
PersistentTasksExecutor -> protected String getDescription(PersistentTask<Params> taskInProgress);1528103657;Returns task description that will be available via task manager;protected String getDescription(PersistentTask<Params> taskInProgress) {_        return "id=" + taskInProgress.getId()__    };returns,task,description,that,will,be,available,via,task,manager;protected,string,get,description,persistent,task,params,task,in,progress,return,id,task,in,progress,get,id
PersistentTasksExecutor -> protected String getDescription(PersistentTask<Params> taskInProgress);1529076503;Returns task description that will be available via task manager;protected String getDescription(PersistentTask<Params> taskInProgress) {_        return "id=" + taskInProgress.getId()__    };returns,task,description,that,will,be,available,via,task,manager;protected,string,get,description,persistent,task,params,task,in,progress,return,id,task,in,progress,get,id
PersistentTasksExecutor -> protected String getDescription(PersistentTask<Params> taskInProgress);1541092382;Returns task description that will be available via task manager;protected String getDescription(PersistentTask<Params> taskInProgress) {_        return "id=" + taskInProgress.getId()__    };returns,task,description,that,will,be,available,via,task,manager;protected,string,get,description,persistent,task,params,task,in,progress,return,id,task,in,progress,get,id
PersistentTasksExecutor -> protected String getDescription(PersistentTask<Params> taskInProgress);1542402632;Returns task description that will be available via task manager;protected String getDescription(PersistentTask<Params> taskInProgress) {_        return "id=" + taskInProgress.getId()__    };returns,task,description,that,will,be,available,via,task,manager;protected,string,get,description,persistent,task,params,task,in,progress,return,id,task,in,progress,get,id
PersistentTasksExecutor -> public Assignment getAssignment(Params params, ClusterState clusterState);1524684173;Returns the node id where the params has to be executed,_<p>_The default implementation returns the least loaded data node;public Assignment getAssignment(Params params, ClusterState clusterState) {_        DiscoveryNode discoveryNode = selectLeastLoadedNode(clusterState, DiscoveryNode::isDataNode)__        if (discoveryNode == null) {_            return NO_NODE_FOUND__        } else {_            return new Assignment(discoveryNode.getId(), "")__        }_    };returns,the,node,id,where,the,params,has,to,be,executed,p,the,default,implementation,returns,the,least,loaded,data,node;public,assignment,get,assignment,params,params,cluster,state,cluster,state,discovery,node,discovery,node,select,least,loaded,node,cluster,state,discovery,node,is,data,node,if,discovery,node,null,return,else,return,new,assignment,discovery,node,get,id
PersistentTasksExecutor -> public Assignment getAssignment(Params params, ClusterState clusterState);1528103657;Returns the node id where the params has to be executed,_<p>_The default implementation returns the least loaded data node;public Assignment getAssignment(Params params, ClusterState clusterState) {_        DiscoveryNode discoveryNode = selectLeastLoadedNode(clusterState, DiscoveryNode::isDataNode)__        if (discoveryNode == null) {_            return NO_NODE_FOUND__        } else {_            return new Assignment(discoveryNode.getId(), "")__        }_    };returns,the,node,id,where,the,params,has,to,be,executed,p,the,default,implementation,returns,the,least,loaded,data,node;public,assignment,get,assignment,params,params,cluster,state,cluster,state,discovery,node,discovery,node,select,least,loaded,node,cluster,state,discovery,node,is,data,node,if,discovery,node,null,return,else,return,new,assignment,discovery,node,get,id
PersistentTasksExecutor -> public Assignment getAssignment(Params params, ClusterState clusterState);1529076503;Returns the node id where the params has to be executed,_<p>_The default implementation returns the least loaded data node;public Assignment getAssignment(Params params, ClusterState clusterState) {_        DiscoveryNode discoveryNode = selectLeastLoadedNode(clusterState, DiscoveryNode::isDataNode)__        if (discoveryNode == null) {_            return NO_NODE_FOUND__        } else {_            return new Assignment(discoveryNode.getId(), "")__        }_    };returns,the,node,id,where,the,params,has,to,be,executed,p,the,default,implementation,returns,the,least,loaded,data,node;public,assignment,get,assignment,params,params,cluster,state,cluster,state,discovery,node,discovery,node,select,least,loaded,node,cluster,state,discovery,node,is,data,node,if,discovery,node,null,return,else,return,new,assignment,discovery,node,get,id
PersistentTasksExecutor -> public Assignment getAssignment(Params params, ClusterState clusterState);1541092382;Returns the node id where the params has to be executed,_<p>_The default implementation returns the least loaded data node;public Assignment getAssignment(Params params, ClusterState clusterState) {_        DiscoveryNode discoveryNode = selectLeastLoadedNode(clusterState, DiscoveryNode::isDataNode)__        if (discoveryNode == null) {_            return NO_NODE_FOUND__        } else {_            return new Assignment(discoveryNode.getId(), "")__        }_    };returns,the,node,id,where,the,params,has,to,be,executed,p,the,default,implementation,returns,the,least,loaded,data,node;public,assignment,get,assignment,params,params,cluster,state,cluster,state,discovery,node,discovery,node,select,least,loaded,node,cluster,state,discovery,node,is,data,node,if,discovery,node,null,return,else,return,new,assignment,discovery,node,get,id
PersistentTasksExecutor -> public Assignment getAssignment(Params params, ClusterState clusterState);1542402632;Returns the node id where the params has to be executed,_<p>_The default implementation returns the least loaded data node;public Assignment getAssignment(Params params, ClusterState clusterState) {_        DiscoveryNode discoveryNode = selectLeastLoadedNode(clusterState, DiscoveryNode::isDataNode)__        if (discoveryNode == null) {_            return NO_NODE_FOUND__        } else {_            return new Assignment(discoveryNode.getId(), "")__        }_    };returns,the,node,id,where,the,params,has,to,be,executed,p,the,default,implementation,returns,the,least,loaded,data,node;public,assignment,get,assignment,params,params,cluster,state,cluster,state,discovery,node,discovery,node,select,least,loaded,node,cluster,state,discovery,node,is,data,node,if,discovery,node,null,return,else,return,new,assignment,discovery,node,get,id
