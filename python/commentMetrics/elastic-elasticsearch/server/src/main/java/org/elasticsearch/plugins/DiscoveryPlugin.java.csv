commented;modifiers;parameterAmount;loc;comment;code
true;default;1;3;/**  * Override to add additional {@link NetworkService.CustomNameResolver}s.  * This can be handy if you want to provide your own Network interface name like _mycard_  * and implement by yourself the logic to get an actual IP address/hostname based on this  * name.  *  * For example: you could call a third party service (an API) to resolve _mycard_.  * Then you could define in elasticsearch.yml settings like:  *  * <pre>{@code  * network.host: _mycard_  * }</pre>  */ ;/**  * Override to add additional {@link NetworkService.CustomNameResolver}s.  * This can be handy if you want to provide your own Network interface name like _mycard_  * and implement by yourself the logic to get an actual IP address/hostname based on this  * name.  *  * For example: you could call a third party service (an API) to resolve _mycard_.  * Then you could define in elasticsearch.yml settings like:  *  * <pre>{@code  * network.host: _mycard_  * }</pre>  */ default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {     return null. }
true;default;2;4;/**  * Returns providers of seed hosts for discovery.  *  * The key of the returned map is the name of the host provider  * (see {@link org.elasticsearch.discovery.DiscoveryModule#DISCOVERY_SEED_PROVIDERS_SETTING}), and  * the value is a supplier to construct the host provider when it is selected for use.  *  * @param transportService Use to form the {@link org.elasticsearch.common.transport.TransportAddress} portion  *                         of a {@link org.elasticsearch.cluster.node.DiscoveryNode}  * @param networkService Use to find the publish host address of the current node  */ ;/**  * Returns providers of seed hosts for discovery.  *  * The key of the returned map is the name of the host provider  * (see {@link org.elasticsearch.discovery.DiscoveryModule#DISCOVERY_SEED_PROVIDERS_SETTING}), and  * the value is a supplier to construct the host provider when it is selected for use.  *  * @param transportService Use to form the {@link org.elasticsearch.common.transport.TransportAddress} portion  *                         of a {@link org.elasticsearch.cluster.node.DiscoveryNode}  * @param networkService Use to find the publish host address of the current node  */ default Map<String, Supplier<SeedHostsProvider>> getSeedHostProviders(TransportService transportService, NetworkService networkService) {     return Collections.emptyMap(). }
true;default;0;1;/**  * Returns a consumer that validate the initial join cluster state. The validator, unless <code>null</code> is called exactly once per  * join attempt but might be called multiple times during the lifetime of a node. Validators are expected to throw a  * {@link IllegalStateException} if the node and the cluster-state are incompatible.  */ ;/**  * Returns a consumer that validate the initial join cluster state. The validator, unless <code>null</code> is called exactly once per  * join attempt but might be called multiple times during the lifetime of a node. Validators are expected to throw a  * {@link IllegalStateException} if the node and the cluster-state are incompatible.  */ default BiConsumer<DiscoveryNode, ClusterState> getJoinValidator() {     return null. }
