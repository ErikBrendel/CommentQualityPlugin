# id;timestamp;commentText;codeText;commentWords;codeWords
DiscoveryPlugin -> default Map<String, Supplier<Discovery>> getDiscoveryTypes(ThreadPool threadPool, TransportService transportService,                                                                NamedWriteableRegistry namedWriteableRegistry,                                                                MasterService masterService,                                                                ClusterApplier clusterApplier,                                                                ClusterSettings clusterSettings,                                                                UnicastHostsProvider hostsProvider,                                                                AllocationService allocationService,                                                                GatewayMetaState gatewayMetaState);1544081506;Returns custom discovery implementations added by this plugin.__The key of the returned map is the name of the discovery implementation_(see {@link org.elasticsearch.discovery.DiscoveryModule#DISCOVERY_TYPE_SETTING}, and_the value is a supplier to construct the {@link Discovery}.__@param threadPool Use to schedule ping actions_@param transportService Use to communicate with other nodes_@param masterService Use to submit cluster state update tasks_@param clusterApplier Use to locally apply cluster state updates_@param clusterSettings Use to get cluster settings_@param hostsProvider Use to find configured hosts which should be pinged for initial discovery;default Map<String, Supplier<Discovery>> getDiscoveryTypes(ThreadPool threadPool, TransportService transportService,_                                                               NamedWriteableRegistry namedWriteableRegistry,_                                                               MasterService masterService,_                                                               ClusterApplier clusterApplier,_                                                               ClusterSettings clusterSettings,_                                                               UnicastHostsProvider hostsProvider,_                                                               AllocationService allocationService,_                                                               GatewayMetaState gatewayMetaState) {_        return Collections.emptyMap()__    };returns,custom,discovery,implementations,added,by,this,plugin,the,key,of,the,returned,map,is,the,name,of,the,discovery,implementation,see,link,org,elasticsearch,discovery,discovery,module,and,the,value,is,a,supplier,to,construct,the,link,discovery,param,thread,pool,use,to,schedule,ping,actions,param,transport,service,use,to,communicate,with,other,nodes,param,master,service,use,to,submit,cluster,state,update,tasks,param,cluster,applier,use,to,locally,apply,cluster,state,updates,param,cluster,settings,use,to,get,cluster,settings,param,hosts,provider,use,to,find,configured,hosts,which,should,be,pinged,for,initial,discovery;default,map,string,supplier,discovery,get,discovery,types,thread,pool,thread,pool,transport,service,transport,service,named,writeable,registry,named,writeable,registry,master,service,master,service,cluster,applier,cluster,applier,cluster,settings,cluster,settings,unicast,hosts,provider,hosts,provider,allocation,service,allocation,service,gateway,meta,state,gateway,meta,state,return,collections,empty,map
DiscoveryPlugin -> default Map<String, Supplier<Discovery>> getDiscoveryTypes(ThreadPool threadPool, TransportService transportService,                                                                NamedWriteableRegistry namedWriteableRegistry,                                                                MasterService masterService,                                                                ClusterApplier clusterApplier,                                                                ClusterSettings clusterSettings,                                                                UnicastHostsProvider hostsProvider,                                                                AllocationService allocationService,                                                                GatewayMetaState gatewayMetaState);1549356412;Returns custom discovery implementations added by this plugin.__The key of the returned map is the name of the discovery implementation_(see {@link org.elasticsearch.discovery.DiscoveryModule#DISCOVERY_TYPE_SETTING}, and_the value is a supplier to construct the {@link Discovery}.__@param threadPool Use to schedule ping actions_@param transportService Use to communicate with other nodes_@param masterService Use to submit cluster state update tasks_@param clusterApplier Use to locally apply cluster state updates_@param clusterSettings Use to get cluster settings_@param hostsProvider Use to find configured hosts which should be pinged for initial discovery;default Map<String, Supplier<Discovery>> getDiscoveryTypes(ThreadPool threadPool, TransportService transportService,_                                                               NamedWriteableRegistry namedWriteableRegistry,_                                                               MasterService masterService,_                                                               ClusterApplier clusterApplier,_                                                               ClusterSettings clusterSettings,_                                                               UnicastHostsProvider hostsProvider,_                                                               AllocationService allocationService,_                                                               GatewayMetaState gatewayMetaState) {_        return Collections.emptyMap()__    };returns,custom,discovery,implementations,added,by,this,plugin,the,key,of,the,returned,map,is,the,name,of,the,discovery,implementation,see,link,org,elasticsearch,discovery,discovery,module,and,the,value,is,a,supplier,to,construct,the,link,discovery,param,thread,pool,use,to,schedule,ping,actions,param,transport,service,use,to,communicate,with,other,nodes,param,master,service,use,to,submit,cluster,state,update,tasks,param,cluster,applier,use,to,locally,apply,cluster,state,updates,param,cluster,settings,use,to,get,cluster,settings,param,hosts,provider,use,to,find,configured,hosts,which,should,be,pinged,for,initial,discovery;default,map,string,supplier,discovery,get,discovery,types,thread,pool,thread,pool,transport,service,transport,service,named,writeable,registry,named,writeable,registry,master,service,master,service,cluster,applier,cluster,applier,cluster,settings,cluster,settings,unicast,hosts,provider,hosts,provider,allocation,service,allocation,service,gateway,meta,state,gateway,meta,state,return,collections,empty,map
DiscoveryPlugin -> default Map<String, Supplier<UnicastHostsProvider>> getZenHostsProviders(TransportService transportService,                                                                              NetworkService networkService);1524684173;Returns providers of unicast host lists for zen discovery.__The key of the returned map is the name of the host provider_(see {@link org.elasticsearch.discovery.DiscoveryModule#DISCOVERY_HOSTS_PROVIDER_SETTING}), and_the value is a supplier to construct the host provider when it is selected for use.__@param transportService Use to form the {@link org.elasticsearch.common.transport.TransportAddress} portion_of a {@link org.elasticsearch.cluster.node.DiscoveryNode}_@param networkService Use to find the publish host address of the current node;default Map<String, Supplier<UnicastHostsProvider>> getZenHostsProviders(TransportService transportService,_                                                                             NetworkService networkService) {_        return Collections.emptyMap()__    };returns,providers,of,unicast,host,lists,for,zen,discovery,the,key,of,the,returned,map,is,the,name,of,the,host,provider,see,link,org,elasticsearch,discovery,discovery,module,and,the,value,is,a,supplier,to,construct,the,host,provider,when,it,is,selected,for,use,param,transport,service,use,to,form,the,link,org,elasticsearch,common,transport,transport,address,portion,of,a,link,org,elasticsearch,cluster,node,discovery,node,param,network,service,use,to,find,the,publish,host,address,of,the,current,node;default,map,string,supplier,unicast,hosts,provider,get,zen,hosts,providers,transport,service,transport,service,network,service,network,service,return,collections,empty,map
DiscoveryPlugin -> default Map<String, Supplier<UnicastHostsProvider>> getZenHostsProviders(TransportService transportService,                                                                              NetworkService networkService);1544081506;Returns providers of unicast host lists for zen discovery.__The key of the returned map is the name of the host provider_(see {@link org.elasticsearch.discovery.DiscoveryModule#DISCOVERY_HOSTS_PROVIDER_SETTING}), and_the value is a supplier to construct the host provider when it is selected for use.__@param transportService Use to form the {@link org.elasticsearch.common.transport.TransportAddress} portion_of a {@link org.elasticsearch.cluster.node.DiscoveryNode}_@param networkService Use to find the publish host address of the current node;default Map<String, Supplier<UnicastHostsProvider>> getZenHostsProviders(TransportService transportService,_                                                                             NetworkService networkService) {_        return Collections.emptyMap()__    };returns,providers,of,unicast,host,lists,for,zen,discovery,the,key,of,the,returned,map,is,the,name,of,the,host,provider,see,link,org,elasticsearch,discovery,discovery,module,and,the,value,is,a,supplier,to,construct,the,host,provider,when,it,is,selected,for,use,param,transport,service,use,to,form,the,link,org,elasticsearch,common,transport,transport,address,portion,of,a,link,org,elasticsearch,cluster,node,discovery,node,param,network,service,use,to,find,the,publish,host,address,of,the,current,node;default,map,string,supplier,unicast,hosts,provider,get,zen,hosts,providers,transport,service,transport,service,network,service,network,service,return,collections,empty,map
DiscoveryPlugin -> default Map<String, Supplier<UnicastHostsProvider>> getZenHostsProviders(TransportService transportService,                                                                              NetworkService networkService);1549356412;Returns providers of unicast host lists for zen discovery.__The key of the returned map is the name of the host provider_(see {@link org.elasticsearch.discovery.DiscoveryModule#DISCOVERY_SEED_PROVIDERS_SETTING}), and_the value is a supplier to construct the host provider when it is selected for use.__@param transportService Use to form the {@link org.elasticsearch.common.transport.TransportAddress} portion_of a {@link org.elasticsearch.cluster.node.DiscoveryNode}_@param networkService Use to find the publish host address of the current node;default Map<String, Supplier<UnicastHostsProvider>> getZenHostsProviders(TransportService transportService,_                                                                             NetworkService networkService) {_        return Collections.emptyMap()__    };returns,providers,of,unicast,host,lists,for,zen,discovery,the,key,of,the,returned,map,is,the,name,of,the,host,provider,see,link,org,elasticsearch,discovery,discovery,module,and,the,value,is,a,supplier,to,construct,the,host,provider,when,it,is,selected,for,use,param,transport,service,use,to,form,the,link,org,elasticsearch,common,transport,transport,address,portion,of,a,link,org,elasticsearch,cluster,node,discovery,node,param,network,service,use,to,find,the,publish,host,address,of,the,current,node;default,map,string,supplier,unicast,hosts,provider,get,zen,hosts,providers,transport,service,transport,service,network,service,network,service,return,collections,empty,map
DiscoveryPlugin -> default Map<String, Supplier<UnicastHostsProvider>> getZenHostsProviders(TransportService transportService,                                                                              NetworkService networkService);1549388544;Returns providers of unicast host lists for zen discovery.__The key of the returned map is the name of the host provider_(see {@link org.elasticsearch.discovery.DiscoveryModule#DISCOVERY_SEED_PROVIDERS_SETTING}), and_the value is a supplier to construct the host provider when it is selected for use.__@param transportService Use to form the {@link org.elasticsearch.common.transport.TransportAddress} portion_of a {@link org.elasticsearch.cluster.node.DiscoveryNode}_@param networkService Use to find the publish host address of the current node;default Map<String, Supplier<UnicastHostsProvider>> getZenHostsProviders(TransportService transportService,_                                                                             NetworkService networkService) {_        return Collections.emptyMap()__    };returns,providers,of,unicast,host,lists,for,zen,discovery,the,key,of,the,returned,map,is,the,name,of,the,host,provider,see,link,org,elasticsearch,discovery,discovery,module,and,the,value,is,a,supplier,to,construct,the,host,provider,when,it,is,selected,for,use,param,transport,service,use,to,form,the,link,org,elasticsearch,common,transport,transport,address,portion,of,a,link,org,elasticsearch,cluster,node,discovery,node,param,network,service,use,to,find,the,publish,host,address,of,the,current,node;default,map,string,supplier,unicast,hosts,provider,get,zen,hosts,providers,transport,service,transport,service,network,service,network,service,return,collections,empty,map
DiscoveryPlugin -> default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator();1524684173;Returns a consumer that validate the initial join cluster state. The validator, unless <code>null</code> is called exactly once per_join attempt but might be called multiple times during the lifetime of a node. Validators are expected to throw a_{@link IllegalStateException} if the node and the cluster-state are incompatible.;default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator() { return null_ };returns,a,consumer,that,validate,the,initial,join,cluster,state,the,validator,unless,code,null,code,is,called,exactly,once,per,join,attempt,but,might,be,called,multiple,times,during,the,lifetime,of,a,node,validators,are,expected,to,throw,a,link,illegal,state,exception,if,the,node,and,the,cluster,state,are,incompatible;default,bi,consumer,discovery,node,cluster,state,get,join,validator,return,null
DiscoveryPlugin -> default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator();1544081506;Returns a consumer that validate the initial join cluster state. The validator, unless <code>null</code> is called exactly once per_join attempt but might be called multiple times during the lifetime of a node. Validators are expected to throw a_{@link IllegalStateException} if the node and the cluster-state are incompatible.;default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator() { return null_ };returns,a,consumer,that,validate,the,initial,join,cluster,state,the,validator,unless,code,null,code,is,called,exactly,once,per,join,attempt,but,might,be,called,multiple,times,during,the,lifetime,of,a,node,validators,are,expected,to,throw,a,link,illegal,state,exception,if,the,node,and,the,cluster,state,are,incompatible;default,bi,consumer,discovery,node,cluster,state,get,join,validator,return,null
DiscoveryPlugin -> default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator();1549356412;Returns a consumer that validate the initial join cluster state. The validator, unless <code>null</code> is called exactly once per_join attempt but might be called multiple times during the lifetime of a node. Validators are expected to throw a_{@link IllegalStateException} if the node and the cluster-state are incompatible.;default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator() { return null_ };returns,a,consumer,that,validate,the,initial,join,cluster,state,the,validator,unless,code,null,code,is,called,exactly,once,per,join,attempt,but,might,be,called,multiple,times,during,the,lifetime,of,a,node,validators,are,expected,to,throw,a,link,illegal,state,exception,if,the,node,and,the,cluster,state,are,incompatible;default,bi,consumer,discovery,node,cluster,state,get,join,validator,return,null
DiscoveryPlugin -> default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator();1549388544;Returns a consumer that validate the initial join cluster state. The validator, unless <code>null</code> is called exactly once per_join attempt but might be called multiple times during the lifetime of a node. Validators are expected to throw a_{@link IllegalStateException} if the node and the cluster-state are incompatible.;default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator() { return null_ };returns,a,consumer,that,validate,the,initial,join,cluster,state,the,validator,unless,code,null,code,is,called,exactly,once,per,join,attempt,but,might,be,called,multiple,times,during,the,lifetime,of,a,node,validators,are,expected,to,throw,a,link,illegal,state,exception,if,the,node,and,the,cluster,state,are,incompatible;default,bi,consumer,discovery,node,cluster,state,get,join,validator,return,null
DiscoveryPlugin -> default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator();1549452878;Returns a consumer that validate the initial join cluster state. The validator, unless <code>null</code> is called exactly once per_join attempt but might be called multiple times during the lifetime of a node. Validators are expected to throw a_{@link IllegalStateException} if the node and the cluster-state are incompatible.;default BiConsumer<DiscoveryNode,ClusterState> getJoinValidator() { return null_ };returns,a,consumer,that,validate,the,initial,join,cluster,state,the,validator,unless,code,null,code,is,called,exactly,once,per,join,attempt,but,might,be,called,multiple,times,during,the,lifetime,of,a,node,validators,are,expected,to,throw,a,link,illegal,state,exception,if,the,node,and,the,cluster,state,are,incompatible;default,bi,consumer,discovery,node,cluster,state,get,join,validator,return,null
DiscoveryPlugin -> default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings);1524684173;Override to add additional {@link NetworkService.CustomNameResolver}s._This can be handy if you want to provide your own Network interface name like _mycard__and implement by yourself the logic to get an actual IP address/hostname based on this_name.__For example: you could call a third party service (an API) to resolve _mycard_._Then you could define in elasticsearch.yml settings like:__<pre>{@code_network.host: _mycard__}</pre>;default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {_        return null__    };override,to,add,additional,link,network,service,custom,name,resolver,s,this,can,be,handy,if,you,want,to,provide,your,own,network,interface,name,like,and,implement,by,yourself,the,logic,to,get,an,actual,ip,address,hostname,based,on,this,name,for,example,you,could,call,a,third,party,service,an,api,to,resolve,then,you,could,define,in,elasticsearch,yml,settings,like,pre,code,network,host,pre;default,network,service,custom,name,resolver,get,custom,name,resolver,settings,settings,return,null
DiscoveryPlugin -> default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings);1544081506;Override to add additional {@link NetworkService.CustomNameResolver}s._This can be handy if you want to provide your own Network interface name like _mycard__and implement by yourself the logic to get an actual IP address/hostname based on this_name.__For example: you could call a third party service (an API) to resolve _mycard_._Then you could define in elasticsearch.yml settings like:__<pre>{@code_network.host: _mycard__}</pre>;default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {_        return null__    };override,to,add,additional,link,network,service,custom,name,resolver,s,this,can,be,handy,if,you,want,to,provide,your,own,network,interface,name,like,and,implement,by,yourself,the,logic,to,get,an,actual,ip,address,hostname,based,on,this,name,for,example,you,could,call,a,third,party,service,an,api,to,resolve,then,you,could,define,in,elasticsearch,yml,settings,like,pre,code,network,host,pre;default,network,service,custom,name,resolver,get,custom,name,resolver,settings,settings,return,null
DiscoveryPlugin -> default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings);1549356412;Override to add additional {@link NetworkService.CustomNameResolver}s._This can be handy if you want to provide your own Network interface name like _mycard__and implement by yourself the logic to get an actual IP address/hostname based on this_name.__For example: you could call a third party service (an API) to resolve _mycard_._Then you could define in elasticsearch.yml settings like:__<pre>{@code_network.host: _mycard__}</pre>;default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {_        return null__    };override,to,add,additional,link,network,service,custom,name,resolver,s,this,can,be,handy,if,you,want,to,provide,your,own,network,interface,name,like,and,implement,by,yourself,the,logic,to,get,an,actual,ip,address,hostname,based,on,this,name,for,example,you,could,call,a,third,party,service,an,api,to,resolve,then,you,could,define,in,elasticsearch,yml,settings,like,pre,code,network,host,pre;default,network,service,custom,name,resolver,get,custom,name,resolver,settings,settings,return,null
DiscoveryPlugin -> default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings);1549388544;Override to add additional {@link NetworkService.CustomNameResolver}s._This can be handy if you want to provide your own Network interface name like _mycard__and implement by yourself the logic to get an actual IP address/hostname based on this_name.__For example: you could call a third party service (an API) to resolve _mycard_._Then you could define in elasticsearch.yml settings like:__<pre>{@code_network.host: _mycard__}</pre>;default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {_        return null__    };override,to,add,additional,link,network,service,custom,name,resolver,s,this,can,be,handy,if,you,want,to,provide,your,own,network,interface,name,like,and,implement,by,yourself,the,logic,to,get,an,actual,ip,address,hostname,based,on,this,name,for,example,you,could,call,a,third,party,service,an,api,to,resolve,then,you,could,define,in,elasticsearch,yml,settings,like,pre,code,network,host,pre;default,network,service,custom,name,resolver,get,custom,name,resolver,settings,settings,return,null
DiscoveryPlugin -> default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings);1549452878;Override to add additional {@link NetworkService.CustomNameResolver}s._This can be handy if you want to provide your own Network interface name like _mycard__and implement by yourself the logic to get an actual IP address/hostname based on this_name.__For example: you could call a third party service (an API) to resolve _mycard_._Then you could define in elasticsearch.yml settings like:__<pre>{@code_network.host: _mycard__}</pre>;default NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {_        return null__    };override,to,add,additional,link,network,service,custom,name,resolver,s,this,can,be,handy,if,you,want,to,provide,your,own,network,interface,name,like,and,implement,by,yourself,the,logic,to,get,an,actual,ip,address,hostname,based,on,this,name,for,example,you,could,call,a,third,party,service,an,api,to,resolve,then,you,could,define,in,elasticsearch,yml,settings,like,pre,code,network,host,pre;default,network,service,custom,name,resolver,get,custom,name,resolver,settings,settings,return,null
