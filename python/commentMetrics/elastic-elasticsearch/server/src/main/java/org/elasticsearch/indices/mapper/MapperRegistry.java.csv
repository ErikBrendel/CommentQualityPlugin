commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return a map of the mappers that have been registered. The  * returned map uses the type of the field as a key.  */ ;/**  * Return a map of the mappers that have been registered. The  * returned map uses the type of the field as a key.  */ public Map<String, Mapper.TypeParser> getMapperParsers() {     return mapperParsers. }
true;public;1;3;/**  * Return a map of the meta mappers that have been registered. The  * returned map uses the name of the field as a key.  */ ;/**  * Return a map of the meta mappers that have been registered. The  * returned map uses the name of the field as a key.  */ public Map<String, MetadataFieldMapper.TypeParser> getMetadataMapperParsers(Version indexCreatedVersion) {     return indexCreatedVersion.onOrAfter(Version.V_7_0_0) ? metadataMapperParsers : metadataMapperParsers6x. }
true;public;2;3;/**  * Returns true if the provided field is a registered metadata field, false otherwise  */ ;/**  * Returns true if the provided field is a registered metadata field, false otherwise  */ public boolean isMetaDataField(Version indexCreatedVersion, String field) {     return getMetadataMapperParsers(indexCreatedVersion).containsKey(field). }
true;public;0;3;/**  * Returns a function that given an index name, returns a predicate that fields must match in order to be returned by get mappings,  * get index, get field mappings and field capabilities API. Useful to filter the fields that such API return.  * The predicate receives the field name as input arguments. In case multiple plugins register a field filter through  * {@link MapperPlugin#getFieldFilter()}, only fields that match all the registered filters will be returned by get mappings,  * get index, get field mappings and field capabilities API.  */ ;/**  * Returns a function that given an index name, returns a predicate that fields must match in order to be returned by get mappings,  * get index, get field mappings and field capabilities API. Useful to filter the fields that such API return.  * The predicate receives the field name as input arguments. In case multiple plugins register a field filter through  * {@link MapperPlugin#getFieldFilter()}, only fields that match all the registered filters will be returned by get mappings,  * get index, get field mappings and field capabilities API.  */ public Function<String, Predicate<String>> getFieldFilter() {     return fieldFilter. }
