commented;modifiers;parameterAmount;loc;comment;code
false;static;2;3;;static HistogramValuesSourceBuilder parse(String name, XContentParser parser) throws IOException {     return PARSER.parse(parser, new HistogramValuesSourceBuilder(name), null). }
false;protected;1;4;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeDouble(interval). }
false;protected;2;4;;@Override protected void doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(Histogram.INTERVAL_FIELD.getPreferredName(), interval). }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(interval). }
false;protected;1;4;;@Override protected boolean innerEquals(HistogramValuesSourceBuilder other) {     return Objects.equals(interval, other.interval). }
false;public;0;4;;@Override public String type() {     return TYPE. }
true;public;0;3;/**  * Returns the interval that is set on this source  */ ;/**  * Returns the interval that is set on this source  */ public double interval() {     return interval. }
true;public;1;7;/**  * Sets the interval on this source.  */ ;/**  * Sets the interval on this source.  */ public HistogramValuesSourceBuilder interval(double interval) {     if (interval <= 0) {         throw new IllegalArgumentException("[interval] must be greater than 0 for [histogram] source").     }     this.interval = interval.     return this. }
false;protected;2;15;;@Override protected CompositeValuesSourceConfig innerBuild(SearchContext context, ValuesSourceConfig<?> config) throws IOException {     ValuesSource orig = config.toValuesSource(context.getQueryShardContext()).     if (orig == null) {         orig = ValuesSource.Numeric.EMPTY.     }     if (orig instanceof ValuesSource.Numeric) {         ValuesSource.Numeric numeric = (ValuesSource.Numeric) orig.         final HistogramValuesSource vs = new HistogramValuesSource(numeric, interval).         final MappedFieldType fieldType = config.fieldContext() != null ? config.fieldContext().fieldType() : null.         return new CompositeValuesSourceConfig(name, fieldType, vs, config.format(), order(), missingBucket()).     } else {         throw new IllegalArgumentException("invalid source, expected numeric, got " + orig.getClass().getSimpleName()).     } }
