commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Returns a {@code Path} from name components.  * <p>  * This works just like {@code Paths.get()}.  * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION  * UTILITY FUNCTION.  * <p>  * Remember: this should almost never be used. Usually resolve  * a path against an existing one!  */ ;/**  * Returns a {@code Path} from name components.  * <p>  * This works just like {@code Paths.get()}.  * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION  * UTILITY FUNCTION.  * <p>  * Remember: this should almost never be used. Usually resolve  * a path against an existing one!  */ public static Path get(String first, String... more) {     return DEFAULT.getPath(first, more). }
true;public,static;1;7;/**  * Returns a {@code Path} from a URI  * <p>  * This works just like {@code Paths.get()}.  * <p>  * Remember: this should almost never be used. Usually resolve  * a path against an existing one!  */ ;/**  * Returns a {@code Path} from a URI  * <p>  * This works just like {@code Paths.get()}.  * <p>  * Remember: this should almost never be used. Usually resolve  * a path against an existing one!  */ public static Path get(URI uri) {     if (uri.getScheme().equalsIgnoreCase("file")) {         return DEFAULT.provider().getPath(uri).     } else {         return Paths.get(uri).     } }
true;public,static;2;10;/**  * Tries to resolve the given path against the list of available roots.  *  * If path starts with one of the listed roots, it returned back by this method, otherwise null is returned.  */ ;/**  * Tries to resolve the given path against the list of available roots.  *  * If path starts with one of the listed roots, it returned back by this method, otherwise null is returned.  */ public static Path get(Path[] roots, String path) {     for (Path root : roots) {         Path normalizedRoot = root.normalize().         Path normalizedPath = normalizedRoot.resolve(path).normalize().         if (normalizedPath.startsWith(normalizedRoot)) {             return normalizedPath.         }     }     return null. }
true;public,static;2;3;/**  * Tries to resolve the given file uri against the list of available roots.  *  * If uri starts with one of the listed roots, it returned back by this method, otherwise null is returned.  */ ;/**  * Tries to resolve the given file uri against the list of available roots.  *  * If uri starts with one of the listed roots, it returned back by this method, otherwise null is returned.  */ public static Path get(Path[] roots, URI uri) {     return get(roots, PathUtils.get(uri).normalize().toString()). }
true;public,static;0;3;/**  * Returns the default FileSystem.  */ ;/**  * Returns the default FileSystem.  */ public static FileSystem getDefaultFileSystem() {     return DEFAULT. }
