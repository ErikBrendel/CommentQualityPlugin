# id;timestamp;commentText;codeText;commentWords;codeWords
IOUtils -> public static void close(final Iterable<? extends Closeable> objects) throws IOException;1528706846;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method either throws the first exception it hit_while closing with other exceptions added as suppressed, or completes normally if there were_no exceptions.__@param objects objects to close;public static void close(final Iterable<? extends Closeable> objects) throws IOException {_        close(null, objects)__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,either,throws,the,first,exception,it,hit,while,closing,with,other,exceptions,added,as,suppressed,or,completes,normally,if,there,were,no,exceptions,param,objects,objects,to,close;public,static,void,close,final,iterable,extends,closeable,objects,throws,ioexception,close,null,objects
IOUtils -> public static void close(final Iterable<? extends Closeable> objects) throws IOException;1536828374;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method either throws the first exception it hit_while closing with other exceptions added as suppressed, or completes normally if there were_no exceptions.__@param objects objects to close;public static void close(final Iterable<? extends Closeable> objects) throws IOException {_        close(null, objects)__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,either,throws,the,first,exception,it,hit,while,closing,with,other,exceptions,added,as,suppressed,or,completes,normally,if,there,were,no,exceptions,param,objects,objects,to,close;public,static,void,close,final,iterable,extends,closeable,objects,throws,ioexception,close,null,objects
IOUtils -> public static void close(final Iterable<? extends Closeable> objects) throws IOException;1541618615;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method either throws the first exception it hit_while closing with other exceptions added as suppressed, or completes normally if there were_no exceptions.__@param objects objects to close;public static void close(final Iterable<? extends Closeable> objects) throws IOException {_        close(null, objects)__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,either,throws,the,first,exception,it,hit,while,closing,with,other,exceptions,added,as,suppressed,or,completes,normally,if,there,were,no,exceptions,param,objects,objects,to,close;public,static,void,close,final,iterable,extends,closeable,objects,throws,ioexception,close,null,objects
IOUtils -> public static void close(final Exception ex, final Iterable<? extends Closeable> objects) throws IOException;1528706846;Closes all given {@link Closeable}s. If a non-null exception is passed in, or closing a_stream causes an exception, throws the exception with other {@link RuntimeException} or_{@link IOException} exceptions added as suppressed.__@param ex existing Exception to add exceptions occurring during close to_@param objects objects to close__@see #close(Closeable...);public static void close(final Exception ex, final Iterable<? extends Closeable> objects) throws IOException {_        Exception firstException = ex__        for (final Closeable object : objects) {_            try {_                if (object != null) {_                    object.close()__                }_            } catch (final IOException | RuntimeException e) {_                if (firstException == null) {_                    firstException = e__                } else {_                    firstException.addSuppressed(e)__                }_            }_        }__        if (firstException != null) {_            if (firstException instanceof IOException) {_                throw (IOException) firstException__            } else {_                _                throw (RuntimeException) firstException__            }_        }_    };closes,all,given,link,closeable,s,if,a,non,null,exception,is,passed,in,or,closing,a,stream,causes,an,exception,throws,the,exception,with,other,link,runtime,exception,or,link,ioexception,exceptions,added,as,suppressed,param,ex,existing,exception,to,add,exceptions,occurring,during,close,to,param,objects,objects,to,close,see,close,closeable;public,static,void,close,final,exception,ex,final,iterable,extends,closeable,objects,throws,ioexception,exception,first,exception,ex,for,final,closeable,object,objects,try,if,object,null,object,close,catch,final,ioexception,runtime,exception,e,if,first,exception,null,first,exception,e,else,first,exception,add,suppressed,e,if,first,exception,null,if,first,exception,instanceof,ioexception,throw,ioexception,first,exception,else,throw,runtime,exception,first,exception
IOUtils -> public static void close(final Exception ex, final Iterable<? extends Closeable> objects) throws IOException;1536828374;Closes all given {@link Closeable}s. If a non-null exception is passed in, or closing a_stream causes an exception, throws the exception with other {@link RuntimeException} or_{@link IOException} exceptions added as suppressed.__@param ex existing Exception to add exceptions occurring during close to_@param objects objects to close__@see #close(Closeable...);public static void close(final Exception ex, final Iterable<? extends Closeable> objects) throws IOException {_        Exception firstException = ex__        for (final Closeable object : objects) {_            try {_                if (object != null) {_                    object.close()__                }_            } catch (final IOException | RuntimeException e) {_                if (firstException == null) {_                    firstException = e__                } else {_                    firstException.addSuppressed(e)__                }_            }_        }__        if (firstException != null) {_            if (firstException instanceof IOException) {_                throw (IOException) firstException__            } else {_                _                throw (RuntimeException) firstException__            }_        }_    };closes,all,given,link,closeable,s,if,a,non,null,exception,is,passed,in,or,closing,a,stream,causes,an,exception,throws,the,exception,with,other,link,runtime,exception,or,link,ioexception,exceptions,added,as,suppressed,param,ex,existing,exception,to,add,exceptions,occurring,during,close,to,param,objects,objects,to,close,see,close,closeable;public,static,void,close,final,exception,ex,final,iterable,extends,closeable,objects,throws,ioexception,exception,first,exception,ex,for,final,closeable,object,objects,try,if,object,null,object,close,catch,final,ioexception,runtime,exception,e,if,first,exception,null,first,exception,e,else,first,exception,add,suppressed,e,if,first,exception,null,if,first,exception,instanceof,ioexception,throw,ioexception,first,exception,else,throw,runtime,exception,first,exception
IOUtils -> public static void close(final Exception ex, final Iterable<? extends Closeable> objects) throws IOException;1541618615;Closes all given {@link Closeable}s. If a non-null exception is passed in, or closing a_stream causes an exception, throws the exception with other {@link RuntimeException} or_{@link IOException} exceptions added as suppressed.__@param ex existing Exception to add exceptions occurring during close to_@param objects objects to close__@see #close(Closeable...);public static void close(final Exception ex, final Iterable<? extends Closeable> objects) throws IOException {_        Exception firstException = ex__        for (final Closeable object : objects) {_            try {_                if (object != null) {_                    object.close()__                }_            } catch (final IOException | RuntimeException e) {_                if (firstException == null) {_                    firstException = e__                } else {_                    firstException.addSuppressed(e)__                }_            }_        }__        if (firstException != null) {_            if (firstException instanceof IOException) {_                throw (IOException) firstException__            } else {_                _                throw (RuntimeException) firstException__            }_        }_    };closes,all,given,link,closeable,s,if,a,non,null,exception,is,passed,in,or,closing,a,stream,causes,an,exception,throws,the,exception,with,other,link,runtime,exception,or,link,ioexception,exceptions,added,as,suppressed,param,ex,existing,exception,to,add,exceptions,occurring,during,close,to,param,objects,objects,to,close,see,close,closeable;public,static,void,close,final,exception,ex,final,iterable,extends,closeable,objects,throws,ioexception,exception,first,exception,ex,for,final,closeable,object,objects,try,if,object,null,object,close,catch,final,ioexception,runtime,exception,e,if,first,exception,null,first,exception,e,else,first,exception,add,suppressed,e,if,first,exception,null,if,first,exception,instanceof,ioexception,throw,ioexception,first,exception,else,throw,runtime,exception,first,exception
IOUtils -> public static void close(final Closeable... objects) throws IOException;1528706846;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method either throws the first exception it hit_while closing with other exceptions added as suppressed, or completes normally if there were_no exceptions.__@param objects objects to close;public static void close(final Closeable... objects) throws IOException {_        close(null, Arrays.asList(objects))__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,either,throws,the,first,exception,it,hit,while,closing,with,other,exceptions,added,as,suppressed,or,completes,normally,if,there,were,no,exceptions,param,objects,objects,to,close;public,static,void,close,final,closeable,objects,throws,ioexception,close,null,arrays,as,list,objects
IOUtils -> public static void close(final Closeable... objects) throws IOException;1536828374;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method either throws the first exception it hit_while closing with other exceptions added as suppressed, or completes normally if there were_no exceptions.__@param objects objects to close;public static void close(final Closeable... objects) throws IOException {_        close(null, Arrays.asList(objects))__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,either,throws,the,first,exception,it,hit,while,closing,with,other,exceptions,added,as,suppressed,or,completes,normally,if,there,were,no,exceptions,param,objects,objects,to,close;public,static,void,close,final,closeable,objects,throws,ioexception,close,null,arrays,as,list,objects
IOUtils -> public static void close(final Closeable... objects) throws IOException;1541618615;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method either throws the first exception it hit_while closing with other exceptions added as suppressed, or completes normally if there were_no exceptions.__@param objects objects to close;public static void close(final Closeable... objects) throws IOException {_        close(null, Arrays.asList(objects))__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,either,throws,the,first,exception,it,hit,while,closing,with,other,exceptions,added,as,suppressed,or,completes,normally,if,there,were,no,exceptions,param,objects,objects,to,close;public,static,void,close,final,closeable,objects,throws,ioexception,close,null,arrays,as,list,objects
IOUtils -> public static void rm(final Path... locations) throws IOException;1528706846;Deletes one or more files or directories (and everything underneath it).__@throws IOException if any of the given files (or their sub-hierarchy files in case of directories) cannot be removed.;public static void rm(final Path... locations) throws IOException {_        final LinkedHashMap<Path,Throwable> unremoved = rm(new LinkedHashMap<>(), locations)__        if (!unremoved.isEmpty()) {_            final StringBuilder b = new StringBuilder("could not remove the following files (in the order of attempts):\n")__            for (final Map.Entry<Path,Throwable> kv : unremoved.entrySet()) {_                b.append("   ")_                        .append(kv.getKey().toAbsolutePath())_                        .append(": ")_                        .append(kv.getValue())_                        .append("\n")__            }_            throw new IOException(b.toString())__        }_    };deletes,one,or,more,files,or,directories,and,everything,underneath,it,throws,ioexception,if,any,of,the,given,files,or,their,sub,hierarchy,files,in,case,of,directories,cannot,be,removed;public,static,void,rm,final,path,locations,throws,ioexception,final,linked,hash,map,path,throwable,unremoved,rm,new,linked,hash,map,locations,if,unremoved,is,empty,final,string,builder,b,new,string,builder,could,not,remove,the,following,files,in,the,order,of,attempts,n,for,final,map,entry,path,throwable,kv,unremoved,entry,set,b,append,append,kv,get,key,to,absolute,path,append,append,kv,get,value,append,n,throw,new,ioexception,b,to,string
IOUtils -> public static void rm(final Path... locations) throws IOException;1536828374;Deletes one or more files or directories (and everything underneath it).__@throws IOException if any of the given files (or their sub-hierarchy files in case of directories) cannot be removed.;public static void rm(final Path... locations) throws IOException {_        final LinkedHashMap<Path,Throwable> unremoved = rm(new LinkedHashMap<>(), locations)__        if (!unremoved.isEmpty()) {_            final StringBuilder b = new StringBuilder("could not remove the following files (in the order of attempts):\n")__            for (final Map.Entry<Path,Throwable> kv : unremoved.entrySet()) {_                b.append("   ")_                        .append(kv.getKey().toAbsolutePath())_                        .append(": ")_                        .append(kv.getValue())_                        .append("\n")__            }_            throw new IOException(b.toString())__        }_    };deletes,one,or,more,files,or,directories,and,everything,underneath,it,throws,ioexception,if,any,of,the,given,files,or,their,sub,hierarchy,files,in,case,of,directories,cannot,be,removed;public,static,void,rm,final,path,locations,throws,ioexception,final,linked,hash,map,path,throwable,unremoved,rm,new,linked,hash,map,locations,if,unremoved,is,empty,final,string,builder,b,new,string,builder,could,not,remove,the,following,files,in,the,order,of,attempts,n,for,final,map,entry,path,throwable,kv,unremoved,entry,set,b,append,append,kv,get,key,to,absolute,path,append,append,kv,get,value,append,n,throw,new,ioexception,b,to,string
IOUtils -> public static void rm(final Path... locations) throws IOException;1541618615;Deletes one or more files or directories (and everything underneath it).__@throws IOException if any of the given files (or their sub-hierarchy files in case of directories) cannot be removed.;public static void rm(final Path... locations) throws IOException {_        final LinkedHashMap<Path,Throwable> unremoved = rm(new LinkedHashMap<>(), locations)__        if (!unremoved.isEmpty()) {_            final StringBuilder b = new StringBuilder("could not remove the following files (in the order of attempts):\n")__            for (final Map.Entry<Path,Throwable> kv : unremoved.entrySet()) {_                b.append("   ")_                        .append(kv.getKey().toAbsolutePath())_                        .append(": ")_                        .append(kv.getValue())_                        .append("\n")__            }_            throw new IOException(b.toString())__        }_    };deletes,one,or,more,files,or,directories,and,everything,underneath,it,throws,ioexception,if,any,of,the,given,files,or,their,sub,hierarchy,files,in,case,of,directories,cannot,be,removed;public,static,void,rm,final,path,locations,throws,ioexception,final,linked,hash,map,path,throwable,unremoved,rm,new,linked,hash,map,locations,if,unremoved,is,empty,final,string,builder,b,new,string,builder,could,not,remove,the,following,files,in,the,order,of,attempts,n,for,final,map,entry,path,throwable,kv,unremoved,entry,set,b,append,append,kv,get,key,to,absolute,path,append,append,kv,get,value,append,n,throw,new,ioexception,b,to,string
IOUtils -> public static void closeWhileHandlingException(final Closeable... objects);1528706846;Closes all given {@link Closeable}s, suppressing all thrown exceptions. Some of the {@link Closeable}s may be null, they are ignored.__@param objects objects to close;public static void closeWhileHandlingException(final Closeable... objects) {_        closeWhileHandlingException(Arrays.asList(objects))__    };closes,all,given,link,closeable,s,suppressing,all,thrown,exceptions,some,of,the,link,closeable,s,may,be,null,they,are,ignored,param,objects,objects,to,close;public,static,void,close,while,handling,exception,final,closeable,objects,close,while,handling,exception,arrays,as,list,objects
IOUtils -> public static void closeWhileHandlingException(final Closeable... objects);1536828374;Closes all given {@link Closeable}s, suppressing all thrown exceptions. Some of the {@link Closeable}s may be null, they are ignored.__@param objects objects to close;public static void closeWhileHandlingException(final Closeable... objects) {_        closeWhileHandlingException(Arrays.asList(objects))__    };closes,all,given,link,closeable,s,suppressing,all,thrown,exceptions,some,of,the,link,closeable,s,may,be,null,they,are,ignored,param,objects,objects,to,close;public,static,void,close,while,handling,exception,final,closeable,objects,close,while,handling,exception,arrays,as,list,objects
IOUtils -> public static void closeWhileHandlingException(final Closeable... objects);1541618615;Closes all given {@link Closeable}s, suppressing all thrown exceptions. Some of the {@link Closeable}s may be null, they are ignored.__@param objects objects to close;public static void closeWhileHandlingException(final Closeable... objects) {_        closeWhileHandlingException(Arrays.asList(objects))__    };closes,all,given,link,closeable,s,suppressing,all,thrown,exceptions,some,of,the,link,closeable,s,may,be,null,they,are,ignored,param,objects,objects,to,close;public,static,void,close,while,handling,exception,final,closeable,objects,close,while,handling,exception,arrays,as,list,objects
IOUtils -> public static void deleteFilesIgnoringExceptions(final Collection<? extends Path> files);1528706846;Deletes all given files, suppressing all thrown {@link IOException}s. Some of the files may be null, if so they are ignored.__@param files the paths of files to delete;public static void deleteFilesIgnoringExceptions(final Collection<? extends Path> files) {_        for (final Path name : files) {_            if (name != null) {_                _                try {_                    Files.delete(name)__                } catch (final IOException ignored) {__                }_            }_        }_    };deletes,all,given,files,suppressing,all,thrown,link,ioexception,s,some,of,the,files,may,be,null,if,so,they,are,ignored,param,files,the,paths,of,files,to,delete;public,static,void,delete,files,ignoring,exceptions,final,collection,extends,path,files,for,final,path,name,files,if,name,null,try,files,delete,name,catch,final,ioexception,ignored
IOUtils -> public static void deleteFilesIgnoringExceptions(final Collection<? extends Path> files);1536828374;Deletes all given files, suppressing all thrown {@link IOException}s. Some of the files may be null, if so they are ignored.__@param files the paths of files to delete;public static void deleteFilesIgnoringExceptions(final Collection<? extends Path> files) {_        for (final Path name : files) {_            if (name != null) {_                _                try {_                    Files.delete(name)__                } catch (final IOException ignored) {__                }_            }_        }_    };deletes,all,given,files,suppressing,all,thrown,link,ioexception,s,some,of,the,files,may,be,null,if,so,they,are,ignored,param,files,the,paths,of,files,to,delete;public,static,void,delete,files,ignoring,exceptions,final,collection,extends,path,files,for,final,path,name,files,if,name,null,try,files,delete,name,catch,final,ioexception,ignored
IOUtils -> public static void deleteFilesIgnoringExceptions(final Collection<? extends Path> files);1541618615;Deletes all given files, suppressing all thrown {@link IOException}s. Some of the files may be null, if so they are ignored.__@param files the paths of files to delete;public static void deleteFilesIgnoringExceptions(final Collection<? extends Path> files) {_        for (final Path name : files) {_            if (name != null) {_                _                try {_                    Files.delete(name)__                } catch (final IOException ignored) {__                }_            }_        }_    };deletes,all,given,files,suppressing,all,thrown,link,ioexception,s,some,of,the,files,may,be,null,if,so,they,are,ignored,param,files,the,paths,of,files,to,delete;public,static,void,delete,files,ignoring,exceptions,final,collection,extends,path,files,for,final,path,name,files,if,name,null,try,files,delete,name,catch,final,ioexception,ignored
IOUtils -> public static void closeWhileHandlingException(final Iterable<? extends Closeable> objects);1528706846;Closes all given {@link Closeable}s, suppressing all thrown exceptions.__@param objects objects to close__@see #closeWhileHandlingException(Closeable...);public static void closeWhileHandlingException(final Iterable<? extends Closeable> objects) {_        for (final Closeable object : objects) {_            _            try {_                if (object != null) {_                    object.close()__                }_            } catch (final IOException | RuntimeException e) {__            }_        }_    };closes,all,given,link,closeable,s,suppressing,all,thrown,exceptions,param,objects,objects,to,close,see,close,while,handling,exception,closeable;public,static,void,close,while,handling,exception,final,iterable,extends,closeable,objects,for,final,closeable,object,objects,try,if,object,null,object,close,catch,final,ioexception,runtime,exception,e
IOUtils -> public static void closeWhileHandlingException(final Iterable<? extends Closeable> objects);1536828374;Closes all given {@link Closeable}s, suppressing all thrown exceptions.__@param objects objects to close__@see #closeWhileHandlingException(Closeable...);public static void closeWhileHandlingException(final Iterable<? extends Closeable> objects) {_        for (final Closeable object : objects) {_            _            try {_                if (object != null) {_                    object.close()__                }_            } catch (final IOException | RuntimeException e) {__            }_        }_    };closes,all,given,link,closeable,s,suppressing,all,thrown,exceptions,param,objects,objects,to,close,see,close,while,handling,exception,closeable;public,static,void,close,while,handling,exception,final,iterable,extends,closeable,objects,for,final,closeable,object,objects,try,if,object,null,object,close,catch,final,ioexception,runtime,exception,e
IOUtils -> public static void closeWhileHandlingException(final Iterable<? extends Closeable> objects);1541618615;Closes all given {@link Closeable}s, suppressing all thrown exceptions.__@param objects objects to close__@see #closeWhileHandlingException(Closeable...);public static void closeWhileHandlingException(final Iterable<? extends Closeable> objects) {_        for (final Closeable object : objects) {_            _            try {_                if (object != null) {_                    object.close()__                }_            } catch (final IOException | RuntimeException e) {__            }_        }_    };closes,all,given,link,closeable,s,suppressing,all,thrown,exceptions,param,objects,objects,to,close,see,close,while,handling,exception,closeable;public,static,void,close,while,handling,exception,final,iterable,extends,closeable,objects,for,final,closeable,object,objects,try,if,object,null,object,close,catch,final,ioexception,runtime,exception,e
IOUtils -> public static void fsync(final Path fileToSync, final boolean isDir) throws IOException;1528706846;Ensure that any writes to the given file is written to the storage device that contains it. The {@code isDir} parameter specifies_whether or not the path to sync is a directory. This is needed because we open for read and ignore an {@link IOException} since not_all filesystems and operating systems support fsyncing on a directory. For regular files we must open for write for the fsync to have_an effect.__@param fileToSync the file to fsync_@param isDir      if true, the given file is a directory (we open for read and ignore {@link IOException}s, because not all file_systems and operating systems allow to fsync on a directory);public static void fsync(final Path fileToSync, final boolean isDir) throws IOException {_        try (FileChannel file = FileChannel.open(fileToSync, isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)) {_            file.force(true)__        } catch (final IOException ioe) {_            if (isDir) {_                assert (LINUX || MAC_OS_X) == false :_                        "on Linux and MacOSX fsyncing a directory should not throw IOException, "+_                                "we just don't want to rely on that in production (undocumented)_ got: " + ioe__                _                return__            }_            _            throw ioe__        }_    };ensure,that,any,writes,to,the,given,file,is,written,to,the,storage,device,that,contains,it,the,code,is,dir,parameter,specifies,whether,or,not,the,path,to,sync,is,a,directory,this,is,needed,because,we,open,for,read,and,ignore,an,link,ioexception,since,not,all,filesystems,and,operating,systems,support,fsyncing,on,a,directory,for,regular,files,we,must,open,for,write,for,the,fsync,to,have,an,effect,param,file,to,sync,the,file,to,fsync,param,is,dir,if,true,the,given,file,is,a,directory,we,open,for,read,and,ignore,link,ioexception,s,because,not,all,file,systems,and,operating,systems,allow,to,fsync,on,a,directory;public,static,void,fsync,final,path,file,to,sync,final,boolean,is,dir,throws,ioexception,try,file,channel,file,file,channel,open,file,to,sync,is,dir,standard,open,option,read,standard,open,option,write,file,force,true,catch,final,ioexception,ioe,if,is,dir,assert,linux,false,on,linux,and,mac,osx,fsyncing,a,directory,should,not,throw,ioexception,we,just,don,t,want,to,rely,on,that,in,production,undocumented,got,ioe,return,throw,ioe
IOUtils -> public static void fsync(final Path fileToSync, final boolean isDir) throws IOException;1536828374;Ensure that any writes to the given file is written to the storage device that contains it. The {@code isDir} parameter specifies_whether or not the path to sync is a directory. This is needed because we open for read and ignore an {@link IOException} since not_all filesystems and operating systems support fsyncing on a directory. For regular files we must open for write for the fsync to have_an effect.__@param fileToSync the file to fsync_@param isDir      if true, the given file is a directory (we open for read and ignore {@link IOException}s, because not all file_systems and operating systems allow to fsync on a directory);public static void fsync(final Path fileToSync, final boolean isDir) throws IOException {_        try (FileChannel file = FileChannel.open(fileToSync, isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)) {_            file.force(true)__        } catch (final IOException ioe) {_            if (isDir) {_                assert (LINUX || MAC_OS_X) == false :_                        "on Linux and MacOSX fsyncing a directory should not throw IOException, "+_                                "we just don't want to rely on that in production (undocumented)_ got: " + ioe__                _                return__            }_            _            throw ioe__        }_    };ensure,that,any,writes,to,the,given,file,is,written,to,the,storage,device,that,contains,it,the,code,is,dir,parameter,specifies,whether,or,not,the,path,to,sync,is,a,directory,this,is,needed,because,we,open,for,read,and,ignore,an,link,ioexception,since,not,all,filesystems,and,operating,systems,support,fsyncing,on,a,directory,for,regular,files,we,must,open,for,write,for,the,fsync,to,have,an,effect,param,file,to,sync,the,file,to,fsync,param,is,dir,if,true,the,given,file,is,a,directory,we,open,for,read,and,ignore,link,ioexception,s,because,not,all,file,systems,and,operating,systems,allow,to,fsync,on,a,directory;public,static,void,fsync,final,path,file,to,sync,final,boolean,is,dir,throws,ioexception,try,file,channel,file,file,channel,open,file,to,sync,is,dir,standard,open,option,read,standard,open,option,write,file,force,true,catch,final,ioexception,ioe,if,is,dir,assert,linux,false,on,linux,and,mac,osx,fsyncing,a,directory,should,not,throw,ioexception,we,just,don,t,want,to,rely,on,that,in,production,undocumented,got,ioe,return,throw,ioe
IOUtils -> public static void fsync(final Path fileToSync, final boolean isDir) throws IOException;1541618615;Ensure that any writes to the given file is written to the storage device that contains it. The {@code isDir} parameter specifies_whether or not the path to sync is a directory. This is needed because we open for read and ignore an {@link IOException} since not_all filesystems and operating systems support fsyncing on a directory. For regular files we must open for write for the fsync to have_an effect.__@param fileToSync the file to fsync_@param isDir      if true, the given file is a directory (we open for read and ignore {@link IOException}s, because not all file_systems and operating systems allow to fsync on a directory);public static void fsync(final Path fileToSync, final boolean isDir) throws IOException {_        try (FileChannel file = FileChannel.open(fileToSync, isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)) {_            file.force(true)__        } catch (final IOException ioe) {_            if (isDir) {_                assert (LINUX || MAC_OS_X) == false :_                        "on Linux and MacOSX fsyncing a directory should not throw IOException, "+_                                "we just don't want to rely on that in production (undocumented)_ got: " + ioe__                _                return__            }_            _            throw ioe__        }_    };ensure,that,any,writes,to,the,given,file,is,written,to,the,storage,device,that,contains,it,the,code,is,dir,parameter,specifies,whether,or,not,the,path,to,sync,is,a,directory,this,is,needed,because,we,open,for,read,and,ignore,an,link,ioexception,since,not,all,filesystems,and,operating,systems,support,fsyncing,on,a,directory,for,regular,files,we,must,open,for,write,for,the,fsync,to,have,an,effect,param,file,to,sync,the,file,to,fsync,param,is,dir,if,true,the,given,file,is,a,directory,we,open,for,read,and,ignore,link,ioexception,s,because,not,all,file,systems,and,operating,systems,allow,to,fsync,on,a,directory;public,static,void,fsync,final,path,file,to,sync,final,boolean,is,dir,throws,ioexception,try,file,channel,file,file,channel,open,file,to,sync,is,dir,standard,open,option,read,standard,open,option,write,file,force,true,catch,final,ioexception,ioe,if,is,dir,assert,linux,false,on,linux,and,mac,osx,fsyncing,a,directory,should,not,throw,ioexception,we,just,don,t,want,to,rely,on,that,in,production,undocumented,got,ioe,return,throw,ioe
IOUtils -> public static void deleteFilesIgnoringExceptions(final Path... files);1528706846;Deletes all given files, suppressing all thrown {@link IOException}s. Some of the files may be null, if so they are ignored.__@param files the paths of files to delete;public static void deleteFilesIgnoringExceptions(final Path... files) {_        deleteFilesIgnoringExceptions(Arrays.asList(files))__    };deletes,all,given,files,suppressing,all,thrown,link,ioexception,s,some,of,the,files,may,be,null,if,so,they,are,ignored,param,files,the,paths,of,files,to,delete;public,static,void,delete,files,ignoring,exceptions,final,path,files,delete,files,ignoring,exceptions,arrays,as,list,files
IOUtils -> public static void deleteFilesIgnoringExceptions(final Path... files);1536828374;Deletes all given files, suppressing all thrown {@link IOException}s. Some of the files may be null, if so they are ignored.__@param files the paths of files to delete;public static void deleteFilesIgnoringExceptions(final Path... files) {_        deleteFilesIgnoringExceptions(Arrays.asList(files))__    };deletes,all,given,files,suppressing,all,thrown,link,ioexception,s,some,of,the,files,may,be,null,if,so,they,are,ignored,param,files,the,paths,of,files,to,delete;public,static,void,delete,files,ignoring,exceptions,final,path,files,delete,files,ignoring,exceptions,arrays,as,list,files
IOUtils -> public static void deleteFilesIgnoringExceptions(final Path... files);1541618615;Deletes all given files, suppressing all thrown {@link IOException}s. Some of the files may be null, if so they are ignored.__@param files the paths of files to delete;public static void deleteFilesIgnoringExceptions(final Path... files) {_        deleteFilesIgnoringExceptions(Arrays.asList(files))__    };deletes,all,given,files,suppressing,all,thrown,link,ioexception,s,some,of,the,files,may,be,null,if,so,they,are,ignored,param,files,the,paths,of,files,to,delete;public,static,void,delete,files,ignoring,exceptions,final,path,files,delete,files,ignoring,exceptions,arrays,as,list,files
IOUtils -> public static void close(final Exception e, final Closeable... objects) throws IOException;1528706846;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method adds any exceptions as suppressed to the_original exception, or throws the first exception it hit if {@code Exception} is null. If_no exceptions are encountered and the passed in exception is null, it completes normally.__@param objects objects to close;public static void close(final Exception e, final Closeable... objects) throws IOException {_        close(e, Arrays.asList(objects))__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,adds,any,exceptions,as,suppressed,to,the,original,exception,or,throws,the,first,exception,it,hit,if,code,exception,is,null,if,no,exceptions,are,encountered,and,the,passed,in,exception,is,null,it,completes,normally,param,objects,objects,to,close;public,static,void,close,final,exception,e,final,closeable,objects,throws,ioexception,close,e,arrays,as,list,objects
IOUtils -> public static void close(final Exception e, final Closeable... objects) throws IOException;1536828374;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method adds any exceptions as suppressed to the_original exception, or throws the first exception it hit if {@code Exception} is null. If_no exceptions are encountered and the passed in exception is null, it completes normally.__@param objects objects to close;public static void close(final Exception e, final Closeable... objects) throws IOException {_        close(e, Arrays.asList(objects))__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,adds,any,exceptions,as,suppressed,to,the,original,exception,or,throws,the,first,exception,it,hit,if,code,exception,is,null,if,no,exceptions,are,encountered,and,the,passed,in,exception,is,null,it,completes,normally,param,objects,objects,to,close;public,static,void,close,final,exception,e,final,closeable,objects,throws,ioexception,close,e,arrays,as,list,objects
IOUtils -> public static void close(final Exception e, final Closeable... objects) throws IOException;1541618615;Closes all given {@link Closeable}s. Some of the {@linkplain Closeable}s may be null_ they are_ignored. After everything is closed, the method adds any exceptions as suppressed to the_original exception, or throws the first exception it hit if {@code Exception} is null. If_no exceptions are encountered and the passed in exception is null, it completes normally.__@param objects objects to close;public static void close(final Exception e, final Closeable... objects) throws IOException {_        close(e, Arrays.asList(objects))__    };closes,all,given,link,closeable,s,some,of,the,linkplain,closeable,s,may,be,null,they,are,ignored,after,everything,is,closed,the,method,adds,any,exceptions,as,suppressed,to,the,original,exception,or,throws,the,first,exception,it,hit,if,code,exception,is,null,if,no,exceptions,are,encountered,and,the,passed,in,exception,is,null,it,completes,normally,param,objects,objects,to,close;public,static,void,close,final,exception,e,final,closeable,objects,throws,ioexception,close,e,arrays,as,list,objects
