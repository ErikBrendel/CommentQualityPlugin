commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;6;;@Override public final void incRef() {     if (tryIncRef() == false) {         alreadyClosed().     } }
false;public,final;0;13;;@Override public final boolean tryIncRef() {     do {         int i = refCount.get().         if (i > 0) {             if (refCount.compareAndSet(i, i + 1)) {                 return true.             }         } else {             return false.         }     } while (true). }
false;public,final;0;9;;@Override public final void decRef() {     int i = refCount.decrementAndGet().     assert i >= 0.     if (i == 0) {         closeInternal().     } }
false;protected;0;3;;protected void alreadyClosed() {     throw new IllegalStateException(name + " is already closed can't increment refCount current count [" + refCount.get() + "]"). }
true;public;0;3;/**  * Returns the current reference count.  */ ;/**  * Returns the current reference count.  */ public int refCount() {     return this.refCount.get(). }
true;public;0;3;/**  * gets the name of this instance  */ ;/**  * gets the name of this instance  */ public String getName() {     return name. }
false;protected,abstract;0;1;;protected abstract void closeInternal().
