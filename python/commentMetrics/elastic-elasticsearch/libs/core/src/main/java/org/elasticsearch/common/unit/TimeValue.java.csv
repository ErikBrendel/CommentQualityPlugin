commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static TimeValue timeValueNanos(long nanos) {     return new TimeValue(nanos, TimeUnit.NANOSECONDS). }
false;public,static;1;3;;public static TimeValue timeValueMillis(long millis) {     return new TimeValue(millis, TimeUnit.MILLISECONDS). }
false;public,static;1;3;;public static TimeValue timeValueSeconds(long seconds) {     return new TimeValue(seconds, TimeUnit.SECONDS). }
false;public,static;1;3;;public static TimeValue timeValueMinutes(long minutes) {     return new TimeValue(minutes, TimeUnit.MINUTES). }
false;public,static;1;3;;public static TimeValue timeValueHours(long hours) {     return new TimeValue(hours, TimeUnit.HOURS). }
true;public;0;3;/**  * @return the number of {@link #timeUnit()} units this value contains  */ ;/**  * @return the number of {@link #timeUnit()} units this value contains  */ public long duration() {     return duration. }
true;public;0;3;/**  * @return the unit used for the this time value, see {@link #duration()}  */ ;/**  * @return the unit used for the this time value, see {@link #duration()}  */ public TimeUnit timeUnit() {     return timeUnit. }
false;public;0;3;;public long nanos() {     return timeUnit.toNanos(duration). }
false;public;0;3;;public long getNanos() {     return nanos(). }
false;public;0;3;;public long micros() {     return timeUnit.toMicros(duration). }
false;public;0;3;;public long getMicros() {     return micros(). }
false;public;0;3;;public long millis() {     return timeUnit.toMillis(duration). }
false;public;0;3;;public long getMillis() {     return millis(). }
false;public;0;3;;public long seconds() {     return timeUnit.toSeconds(duration). }
false;public;0;3;;public long getSeconds() {     return seconds(). }
false;public;0;3;;public long minutes() {     return timeUnit.toMinutes(duration). }
false;public;0;3;;public long getMinutes() {     return minutes(). }
false;public;0;3;;public long hours() {     return timeUnit.toHours(duration). }
false;public;0;3;;public long getHours() {     return hours(). }
false;public;0;3;;public long days() {     return timeUnit.toDays(duration). }
false;public;0;3;;public long getDays() {     return days(). }
false;public;0;3;;public double microsFrac() {     return ((double) nanos()) / C1. }
false;public;0;3;;public double getMicrosFrac() {     return microsFrac(). }
false;public;0;3;;public double millisFrac() {     return ((double) nanos()) / C2. }
false;public;0;3;;public double getMillisFrac() {     return millisFrac(). }
false;public;0;3;;public double secondsFrac() {     return ((double) nanos()) / C3. }
false;public;0;3;;public double getSecondsFrac() {     return secondsFrac(). }
false;public;0;3;;public double minutesFrac() {     return ((double) nanos()) / C4. }
false;public;0;3;;public double getMinutesFrac() {     return minutesFrac(). }
false;public;0;3;;public double hoursFrac() {     return ((double) nanos()) / C5. }
false;public;0;3;;public double getHoursFrac() {     return hoursFrac(). }
false;public;0;3;;public double daysFrac() {     return ((double) nanos()) / C6. }
false;public;0;3;;public double getDaysFrac() {     return daysFrac(). }
true;public;0;32;/**  * Returns a {@link String} representation of the current {@link TimeValue}.  *  * Note that this method might produce fractional time values (ex 1.6m) which cannot be  * parsed by method like {@link TimeValue#parse(String, String, String)}.  */ ;/**  * Returns a {@link String} representation of the current {@link TimeValue}.  *  * Note that this method might produce fractional time values (ex 1.6m) which cannot be  * parsed by method like {@link TimeValue#parse(String, String, String)}.  */ @Override public String toString() {     if (duration < 0) {         return Long.toString(duration).     }     long nanos = nanos().     if (nanos == 0) {         return "0s".     }     double value = nanos.     String suffix = "nanos".     if (nanos >= C6) {         value = daysFrac().         suffix = "d".     } else if (nanos >= C5) {         value = hoursFrac().         suffix = "h".     } else if (nanos >= C4) {         value = minutesFrac().         suffix = "m".     } else if (nanos >= C3) {         value = secondsFrac().         suffix = "s".     } else if (nanos >= C2) {         value = millisFrac().         suffix = "ms".     } else if (nanos >= C1) {         value = microsFrac().         suffix = "micros".     }     return formatDecimal(value) + suffix. }
false;private,static;1;19;;private static String formatDecimal(double value) {     String p = String.valueOf(value).     int ix = p.indexOf('.') + 1.     int ex = p.indexOf('E').     char fraction = p.charAt(ix).     if (fraction == '0') {         if (ex != -1) {             return p.substring(0, ix - 1) + p.substring(ex).         } else {             return p.substring(0, ix - 1).         }     } else {         if (ex != -1) {             return p.substring(0, ix) + fraction + p.substring(ex).         } else {             return p.substring(0, ix) + fraction.         }     } }
false;public;0;23;;public String getStringRep() {     if (duration < 0) {         return Long.toString(duration).     }     switch(timeUnit) {         case NANOSECONDS:             return duration + "nanos".         case MICROSECONDS:             return duration + "micros".         case MILLISECONDS:             return duration + "ms".         case SECONDS:             return duration + "s".         case MINUTES:             return duration + "m".         case HOURS:             return duration + "h".         case DAYS:             return duration + "d".         default:             throw new IllegalArgumentException("unknown time unit: " + timeUnit.name()).     } }
false;public,static;2;5;;public static TimeValue parseTimeValue(String sValue, String settingName) {     Objects.requireNonNull(settingName).     Objects.requireNonNull(sValue).     return parseTimeValue(sValue, null, settingName). }
false;public,static;3;31;;public static TimeValue parseTimeValue(String sValue, TimeValue defaultValue, String settingName) {     settingName = Objects.requireNonNull(settingName).     if (sValue == null) {         return defaultValue.     }     final String normalized = sValue.toLowerCase(Locale.ROOT).trim().     if (normalized.endsWith("nanos")) {         return new TimeValue(parse(sValue, normalized, "nanos"), TimeUnit.NANOSECONDS).     } else if (normalized.endsWith("micros")) {         return new TimeValue(parse(sValue, normalized, "micros"), TimeUnit.MICROSECONDS).     } else if (normalized.endsWith("ms")) {         return new TimeValue(parse(sValue, normalized, "ms"), TimeUnit.MILLISECONDS).     } else if (normalized.endsWith("s")) {         return new TimeValue(parse(sValue, normalized, "s"), TimeUnit.SECONDS).     } else if (sValue.endsWith("m")) {         // parsing minutes should be case-sensitive as 'M' means "months", not "minutes". this is the only special case.         return new TimeValue(parse(sValue, normalized, "m"), TimeUnit.MINUTES).     } else if (normalized.endsWith("h")) {         return new TimeValue(parse(sValue, normalized, "h"), TimeUnit.HOURS).     } else if (normalized.endsWith("d")) {         return new TimeValue(parse(sValue, normalized, "d"), TimeUnit.DAYS).     } else if (normalized.matches("-0*1")) {         return TimeValue.MINUS_ONE.     } else if (normalized.matches("0+")) {         return TimeValue.ZERO.     } else {         // Missing units:         throw new IllegalArgumentException("failed to parse setting [" + settingName + "] with value [" + sValue + "] as a time value: unit is missing or unrecognized").     } }
false;private,static;3;13;;private static long parse(final String initialInput, final String normalized, final String suffix) {     final String s = normalized.substring(0, normalized.length() - suffix.length()).trim().     try {         return Long.parseLong(s).     } catch (final NumberFormatException e) {         try {             @SuppressWarnings("unused")             final double ignored = Double.parseDouble(s).             throw new IllegalArgumentException("failed to parse [" + initialInput + "], fractional time values are not supported", e).         } catch (final NumberFormatException ignored) {             throw new IllegalArgumentException("failed to parse [" + initialInput + "]", e).         }     } }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     return this.compareTo(((TimeValue) o)) == 0. }
false;public;0;4;;@Override public int hashCode() {     return Double.hashCode(((double) duration) * timeUnit.toNanos(1)). }
false;public,static;1;3;;public static long nsecToMSec(long ns) {     return ns / NSEC_PER_MSEC. }
false;public;1;6;;@Override public int compareTo(TimeValue timeValue) {     double thisValue = ((double) duration) * timeUnit.toNanos(1).     double otherValue = ((double) timeValue.duration) * timeValue.timeUnit.toNanos(1).     return Double.compare(thisValue, otherValue). }
