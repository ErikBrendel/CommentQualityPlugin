commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * The type this content handles and produces.  */ ;/**  * The type this content handles and produces.  */ XContentType type().
false;;0;1;;byte streamSeparator().
true;default;1;3;/**  * Creates a new generator using the provided output stream.  */ ;/**  * Creates a new generator using the provided output stream.  */ default XContentGenerator createGenerator(OutputStream os) throws IOException {     return createGenerator(os, Collections.emptySet(), Collections.emptySet()). }
true;;3;1;/**  * Creates a new generator using the provided output stream and some inclusive and/or exclusive filters. When both exclusive and  * inclusive filters are provided, the underlying generator will first use exclusion filters to remove fields and then will check the  * remaining fields against the inclusive filters.  *  * @param os       the output stream  * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output.  * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.  */ ;/**  * Creates a new generator using the provided output stream and some inclusive and/or exclusive filters. When both exclusive and  * inclusive filters are provided, the underlying generator will first use exclusion filters to remove fields and then will check the  * remaining fields against the inclusive filters.  *  * @param os       the output stream  * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output.  * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.  */ XContentGenerator createGenerator(OutputStream os, Set<String> includes, Set<String> excludes) throws IOException.
true;;3;2;/**  * Creates a parser over the provided string content.  */ ;/**  * Creates a parser over the provided string content.  */ XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler, String content) throws IOException.
true;;3;2;/**  * Creates a parser over the provided input stream.  */ ;/**  * Creates a parser over the provided input stream.  */ XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler, InputStream is) throws IOException.
true;;3;2;/**  * Creates a parser over the provided bytes.  */ ;/**  * Creates a parser over the provided bytes.  */ XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler, byte[] data) throws IOException.
true;;5;2;/**  * Creates a parser over the provided bytes.  */ ;/**  * Creates a parser over the provided bytes.  */ XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler, byte[] data, int offset, int length) throws IOException.
true;;3;2;/**  * Creates a parser over the provided reader.  */ ;/**  * Creates a parser over the provided reader.  */ XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler, Reader reader) throws IOException.
