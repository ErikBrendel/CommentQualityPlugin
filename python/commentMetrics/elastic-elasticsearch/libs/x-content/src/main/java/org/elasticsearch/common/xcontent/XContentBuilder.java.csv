commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Create a new {@link XContentBuilder} using the given {@link XContent} content.  * <p>  * The builder uses an internal {@link ByteArrayOutputStream} output stream to build the content.  * </p>  *  * @param xContent the {@link XContent}  * @return a new {@link XContentBuilder}  * @throws IOException if an {@link IOException} occurs while building the content  */ ;/**  * Create a new {@link XContentBuilder} using the given {@link XContent} content.  * <p>  * The builder uses an internal {@link ByteArrayOutputStream} output stream to build the content.  * </p>  *  * @param xContent the {@link XContent}  * @return a new {@link XContentBuilder}  * @throws IOException if an {@link IOException} occurs while building the content  */ public static XContentBuilder builder(XContent xContent) throws IOException {     return new XContentBuilder(xContent, new ByteArrayOutputStream()). }
true;public,static;3;3;/**  * Create a new {@link XContentBuilder} using the given {@link XContent} content and some inclusive and/or exclusive filters.  * <p>  * The builder uses an internal {@link ByteArrayOutputStream} output stream to build the content. When both exclusive and  * inclusive filters are provided, the underlying builder will first use exclusion filters to remove fields and then will check the  * remaining fields against the inclusive filters.  * <p>  *  * @param xContent the {@link XContent}  * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output.  * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.  * @throws IOException if an {@link IOException} occurs while building the content  */ ;/**  * Create a new {@link XContentBuilder} using the given {@link XContent} content and some inclusive and/or exclusive filters.  * <p>  * The builder uses an internal {@link ByteArrayOutputStream} output stream to build the content. When both exclusive and  * inclusive filters are provided, the underlying builder will first use exclusion filters to remove fields and then will check the  * remaining fields against the inclusive filters.  * <p>  *  * @param xContent the {@link XContent}  * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output.  * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.  * @throws IOException if an {@link IOException} occurs while building the content  */ public static XContentBuilder builder(XContent xContent, Set<String> includes, Set<String> excludes) throws IOException {     return new XContentBuilder(xContent, new ByteArrayOutputStream(), includes, excludes). }
false;;2;1;;void write(XContentBuilder builder, Object value) throws IOException.
false;;1;1;;Object rawValue(Object value) throws IOException.
false;public;0;3;;public XContentType contentType() {     return generator.contentType(). }
true;public;0;3;/**  * @return the output stream to which the built object is being written. Note that is dangerous to modify the stream.  */ ;/**  * @return the output stream to which the built object is being written. Note that is dangerous to modify the stream.  */ public OutputStream getOutputStream() {     return bos. }
false;public;0;4;;public XContentBuilder prettyPrint() {     generator.usePrettyPrint().     return this. }
false;public;0;3;;public boolean isPrettyPrint() {     return generator.isPrettyPrint(). }
true;public;0;4;/**  * Indicate that the current {@link XContentBuilder} must write a line feed ("\n")  * at the end of the built object.  * <p>  * This only applies for JSON XContent type. It has no effect for other types.  */ ;/**  * Indicate that the current {@link XContentBuilder} must write a line feed ("\n")  * at the end of the built object.  * <p>  * This only applies for JSON XContent type. It has no effect for other types.  */ public XContentBuilder lfAtEnd() {     generator.usePrintLineFeedAtEnd().     return this. }
true;public;1;4;/**  * Set the "human readable" flag. Once set, some types of values are written in a  * format easier to read for a human.  */ ;/**  * Set the "human readable" flag. Once set, some types of values are written in a  * format easier to read for a human.  */ public XContentBuilder humanReadable(boolean humanReadable) {     this.humanReadable = humanReadable.     return this. }
true;public;0;3;/**  * @return the value of the "human readable" flag. When the value is equal to true,  * some types of values are written in a format easier to read for a human.  */ ;/**  * @return the value of the "human readable" flag. When the value is equal to true,  * some types of values are written in a format easier to read for a human.  */ public boolean humanReadable() {     return this.humanReadable. }
false;public;0;4;;// ////////////////////////////////////////////////////////////////////////// // Structure (object, array, field, null values...) // //////////////////////////////// public XContentBuilder startObject() throws IOException {     generator.writeStartObject().     return this. }
false;public;1;3;;public XContentBuilder startObject(String name) throws IOException {     return field(name).startObject(). }
false;public;0;4;;public XContentBuilder endObject() throws IOException {     generator.writeEndObject().     return this. }
false;public;0;4;;public XContentBuilder startArray() throws IOException {     generator.writeStartArray().     return this. }
false;public;1;3;;public XContentBuilder startArray(String name) throws IOException {     return field(name).startArray(). }
false;public;0;4;;public XContentBuilder endArray() throws IOException {     generator.writeEndArray().     return this. }
false;public;1;5;;public XContentBuilder field(String name) throws IOException {     ensureNameNotNull(name).     generator.writeFieldName(name).     return this. }
false;public;1;5;;public XContentBuilder nullField(String name) throws IOException {     ensureNameNotNull(name).     generator.writeNullField(name).     return this. }
false;public;0;4;;public XContentBuilder nullValue() throws IOException {     generator.writeNull().     return this. }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Boolean // //////////////////////////////// public XContentBuilder field(String name, Boolean value) throws IOException {     return (value == null) ? nullField(name) : field(name, value.booleanValue()). }
false;public;2;5;;public XContentBuilder field(String name, boolean value) throws IOException {     ensureNameNotNull(name).     generator.writeBooleanField(name, value).     return this. }
false;public;2;3;;public XContentBuilder array(String name, boolean[] values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(boolean[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (boolean b : values) {         value(b).     }     endArray().     return this. }
false;public;1;3;;public XContentBuilder value(Boolean value) throws IOException {     return (value == null) ? nullValue() : value(value.booleanValue()). }
false;public;1;4;;public XContentBuilder value(boolean value) throws IOException {     generator.writeBoolean(value).     return this. }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Byte // //////////////////////////////// public XContentBuilder field(String name, Byte value) throws IOException {     return (value == null) ? nullField(name) : field(name, value.byteValue()). }
false;public;2;3;;public XContentBuilder field(String name, byte value) throws IOException {     return field(name).value(value). }
false;public;1;3;;public XContentBuilder value(Byte value) throws IOException {     return (value == null) ? nullValue() : value(value.byteValue()). }
false;public;1;4;;public XContentBuilder value(byte value) throws IOException {     generator.writeNumber(value).     return this. }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Double // //////////////////////////////// public XContentBuilder field(String name, Double value) throws IOException {     return (value == null) ? nullField(name) : field(name, value.doubleValue()). }
false;public;2;5;;public XContentBuilder field(String name, double value) throws IOException {     ensureNameNotNull(name).     generator.writeNumberField(name, value).     return this. }
false;public;2;3;;public XContentBuilder array(String name, double[] values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(double[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (double b : values) {         value(b).     }     endArray().     return this. }
false;public;1;3;;public XContentBuilder value(Double value) throws IOException {     return (value == null) ? nullValue() : value(value.doubleValue()). }
false;public;1;4;;public XContentBuilder value(double value) throws IOException {     generator.writeNumber(value).     return this. }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Float // //////////////////////////////// public XContentBuilder field(String name, Float value) throws IOException {     return (value == null) ? nullField(name) : field(name, value.floatValue()). }
false;public;2;5;;public XContentBuilder field(String name, float value) throws IOException {     ensureNameNotNull(name).     generator.writeNumberField(name, value).     return this. }
false;public;2;3;;public XContentBuilder array(String name, float[] values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(float[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (float f : values) {         value(f).     }     endArray().     return this. }
false;public;1;3;;public XContentBuilder value(Float value) throws IOException {     return (value == null) ? nullValue() : value(value.floatValue()). }
false;public;1;4;;public XContentBuilder value(float value) throws IOException {     generator.writeNumber(value).     return this. }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Integer // //////////////////////////////// public XContentBuilder field(String name, Integer value) throws IOException {     return (value == null) ? nullField(name) : field(name, value.intValue()). }
false;public;2;5;;public XContentBuilder field(String name, int value) throws IOException {     ensureNameNotNull(name).     generator.writeNumberField(name, value).     return this. }
false;public;2;3;;public XContentBuilder array(String name, int[] values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(int[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (int i : values) {         value(i).     }     endArray().     return this. }
false;public;1;3;;public XContentBuilder value(Integer value) throws IOException {     return (value == null) ? nullValue() : value(value.intValue()). }
false;public;1;4;;public XContentBuilder value(int value) throws IOException {     generator.writeNumber(value).     return this. }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Long // //////////////////////////////// public XContentBuilder field(String name, Long value) throws IOException {     return (value == null) ? nullField(name) : field(name, value.longValue()). }
false;public;2;5;;public XContentBuilder field(String name, long value) throws IOException {     ensureNameNotNull(name).     generator.writeNumberField(name, value).     return this. }
false;public;2;3;;public XContentBuilder array(String name, long[] values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(long[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (long l : values) {         value(l).     }     endArray().     return this. }
false;public;1;3;;public XContentBuilder value(Long value) throws IOException {     return (value == null) ? nullValue() : value(value.longValue()). }
false;public;1;4;;public XContentBuilder value(long value) throws IOException {     generator.writeNumber(value).     return this. }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Short // //////////////////////////////// public XContentBuilder field(String name, Short value) throws IOException {     return (value == null) ? nullField(name) : field(name, value.shortValue()). }
false;public;2;3;;public XContentBuilder field(String name, short value) throws IOException {     return field(name).value(value). }
false;public;2;3;;public XContentBuilder array(String name, short[] values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(short[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (short s : values) {         value(s).     }     endArray().     return this. }
false;public;1;3;;public XContentBuilder value(Short value) throws IOException {     return (value == null) ? nullValue() : value(value.shortValue()). }
false;public;1;4;;public XContentBuilder value(short value) throws IOException {     generator.writeNumber(value).     return this. }
false;public;2;8;;// ////////////////////////////////////////////////////////////////////////// // BigInteger // //////////////////////////////// public XContentBuilder field(String name, BigInteger value) throws IOException {     if (value == null) {         return nullField(name).     }     ensureNameNotNull(name).     generator.writeNumberField(name, value).     return this. }
false;public;2;3;;public XContentBuilder array(String name, BigInteger[] values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(BigInteger[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (BigInteger b : values) {         value(b).     }     endArray().     return this. }
false;public;1;7;;public XContentBuilder value(BigInteger value) throws IOException {     if (value == null) {         return nullValue().     }     generator.writeNumber(value).     return this. }
false;public;2;8;;// ////////////////////////////////////////////////////////////////////////// // BigDecimal // //////////////////////////////// public XContentBuilder field(String name, BigDecimal value) throws IOException {     if (value == null) {         return nullField(name).     }     ensureNameNotNull(name).     generator.writeNumberField(name, value).     return this. }
false;public;2;3;;public XContentBuilder array(String name, BigDecimal[] values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(BigDecimal[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (BigDecimal b : values) {         value(b).     }     endArray().     return this. }
false;public;1;7;;public XContentBuilder value(BigDecimal value) throws IOException {     if (value == null) {         return nullValue().     }     generator.writeNumber(value).     return this. }
false;public;2;8;;// ////////////////////////////////////////////////////////////////////////// // String // //////////////////////////////// public XContentBuilder field(String name, String value) throws IOException {     if (value == null) {         return nullField(name).     }     ensureNameNotNull(name).     generator.writeStringField(name, value).     return this. }
false;public;2;3;;public XContentBuilder array(String name, String... values) throws IOException {     return field(name).values(values). }
false;private;1;11;;private XContentBuilder values(String[] values) throws IOException {     if (values == null) {         return nullValue().     }     startArray().     for (String s : values) {         value(s).     }     endArray().     return this. }
false;public;1;7;;public XContentBuilder value(String value) throws IOException {     if (value == null) {         return nullValue().     }     generator.writeString(value).     return this. }
false;public;2;8;;// ////////////////////////////////////////////////////////////////////////// // Binary // //////////////////////////////// public XContentBuilder field(String name, byte[] value) throws IOException {     if (value == null) {         return nullField(name).     }     ensureNameNotNull(name).     generator.writeBinaryField(name, value).     return this. }
false;public;1;7;;public XContentBuilder value(byte[] value) throws IOException {     if (value == null) {         return nullValue().     }     generator.writeBinary(value).     return this. }
false;public;4;3;;public XContentBuilder field(String name, byte[] value, int offset, int length) throws IOException {     return field(name).value(value, offset, length). }
false;public;3;7;;public XContentBuilder value(byte[] value, int offset, int length) throws IOException {     if (value == null) {         return nullValue().     }     generator.writeBinary(value, offset, length).     return this. }
true;public;3;4;/**  * Writes the binary content of the given byte array as UTF-8 bytes.  *  * Use {@link XContentParser#charBuffer()} to read the value back  */ ;/**  * Writes the binary content of the given byte array as UTF-8 bytes.  *  * Use {@link XContentParser#charBuffer()} to read the value back  */ public XContentBuilder utf8Value(byte[] bytes, int offset, int length) throws IOException {     generator.writeUTF8String(bytes, offset, length).     return this. }
true;public;2;3;/**  * Write a time-based field and value, if the passed timeValue is null a  * null value is written, otherwise a date transformers lookup is performed.  *  * @throws IllegalArgumentException if there is no transformers for the type of object  */ ;// ////////////////////////////////////////////////////////////////////////// // Date // //////////////////////////////// /**  * Write a time-based field and value, if the passed timeValue is null a  * null value is written, otherwise a date transformers lookup is performed.  *  * @throws IllegalArgumentException if there is no transformers for the type of object  */ public XContentBuilder timeField(String name, Object timeValue) throws IOException {     return field(name).timeValue(timeValue). }
true;public;3;11;/**  * If the {@code humanReadable} flag is set, writes both a formatted and  * unformatted version of the time value using the date transformer for the  * {@link Long} class.  */ ;/**  * If the {@code humanReadable} flag is set, writes both a formatted and  * unformatted version of the time value using the date transformer for the  * {@link Long} class.  */ public XContentBuilder timeField(String name, String readableName, long value) throws IOException {     if (humanReadable) {         Function<Object, Object> longTransformer = DATE_TRANSFORMERS.get(Long.class).         if (longTransformer == null) {             throw new IllegalArgumentException("cannot write time value xcontent for unknown value of type Long").         }         field(readableName).value(longTransformer.apply(value)).     }     field(name, value).     return this. }
true;public;1;11;/**  * Write a time-based value, if the value is null a null value is written,  * otherwise a date transformers lookup is performed.  *  * @throws IllegalArgumentException if there is no transformers for the type of object  */ ;/**  * Write a time-based value, if the value is null a null value is written,  * otherwise a date transformers lookup is performed.  *  * @throws IllegalArgumentException if there is no transformers for the type of object  */ public XContentBuilder timeValue(Object timeValue) throws IOException {     if (timeValue == null) {         return nullValue().     } else {         Function<Object, Object> transformer = DATE_TRANSFORMERS.get(timeValue.getClass()).         if (transformer == null) {             throw new IllegalArgumentException("cannot write time value xcontent for unknown value of type " + timeValue.getClass()).         }         return value(transformer.apply(timeValue)).     } }
false;public;3;3;;// ////////////////////////////////////////////////////////////////////////// // LatLon // //////////////////////////////// public XContentBuilder latlon(String name, double lat, double lon) throws IOException {     return field(name).latlon(lat, lon). }
false;public;2;3;;public XContentBuilder latlon(double lat, double lon) throws IOException {     return startObject().field("lat", lat).field("lon", lon).endObject(). }
false;public;1;6;;// ////////////////////////////////////////////////////////////////////////// // Path // //////////////////////////////// public XContentBuilder value(Path value) throws IOException {     if (value == null) {         return nullValue().     }     return value(value.toString()). }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Objects //  // These methods are used when the type of value is unknown. It tries to fallback // on typed methods and use Object.toString() as a last resort. Always prefer using // typed methods over this. // //////////////////////////////// public XContentBuilder field(String name, Object value) throws IOException {     return field(name).value(value). }
false;public;2;3;;public XContentBuilder array(String name, Object... values) throws IOException {     return field(name).values(values, true). }
false;private;2;6;;private XContentBuilder values(Object[] values, boolean ensureNoSelfReferences) throws IOException {     if (values == null) {         return nullValue().     }     return value(Arrays.asList(values), ensureNoSelfReferences). }
false;public;1;4;;public XContentBuilder value(Object value) throws IOException {     unknownValue(value, true).     return this. }
false;private;2;28;;private void unknownValue(Object value, boolean ensureNoSelfReferences) throws IOException {     if (value == null) {         nullValue().         return.     }     Writer writer = WRITERS.get(value.getClass()).     if (writer != null) {         writer.write(this, value).     } else if (value instanceof Path) {         // Path implements Iterable<Path> and causes endless recursion and a StackOverFlow if treated as an Iterable here         value((Path) value).     } else if (value instanceof Map) {         @SuppressWarnings("unchecked")         final Map<String, ?> valueMap = (Map<String, ?>) value.         map(valueMap, ensureNoSelfReferences).     } else if (value instanceof Iterable) {         value((Iterable<?>) value, ensureNoSelfReferences).     } else if (value instanceof Object[]) {         values((Object[]) value, ensureNoSelfReferences).     } else if (value instanceof ToXContent) {         value((ToXContent) value).     } else if (value instanceof Enum<?>) {         // Write out the Enum toString         value(Objects.toString(value)).     } else {         throw new IllegalArgumentException("cannot write xcontent for unknown value of type " + value.getClass()).     } }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // ToXContent // //////////////////////////////// public XContentBuilder field(String name, ToXContent value) throws IOException {     return field(name).value(value). }
false;public;3;3;;public XContentBuilder field(String name, ToXContent value, ToXContent.Params params) throws IOException {     return field(name).value(value, params). }
false;private;1;3;;private XContentBuilder value(ToXContent value) throws IOException {     return value(value, ToXContent.EMPTY_PARAMS). }
false;private;2;7;;private XContentBuilder value(ToXContent value, ToXContent.Params params) throws IOException {     if (value == null) {         return nullValue().     }     value.toXContent(this, params).     return this. }
false;public;2;3;;// ////////////////////////////////////////////////////////////////////////// // Maps & Iterable // //////////////////////////////// public XContentBuilder field(String name, Map<String, Object> values) throws IOException {     return field(name).map(values). }
false;public;1;3;;public XContentBuilder map(Map<String, ?> values) throws IOException {     return map(values, true). }
false;private;2;20;;private XContentBuilder map(Map<String, ?> values, boolean ensureNoSelfReferences) throws IOException {     if (values == null) {         return nullValue().     }     // iterating over map entries will cause a stackoverflow error     if (ensureNoSelfReferences) {         ensureNoSelfReferences(values).     }     startObject().     for (Map.Entry<String, ?> value : values.entrySet()) {         field(value.getKey()).         // pass ensureNoSelfReferences=false as we already performed the check at a higher level         unknownValue(value.getValue(), false).     }     endObject().     return this. }
false;public;2;3;;public XContentBuilder field(String name, Iterable<?> values) throws IOException {     return field(name).value(values). }
false;private;2;23;;private XContentBuilder value(Iterable<?> values, boolean ensureNoSelfReferences) throws IOException {     if (values == null) {         return nullValue().     }     if (values instanceof Path) {         // treat as single value         value((Path) values).     } else {         // iterating over entries will cause a stackoverflow error         if (ensureNoSelfReferences) {             ensureNoSelfReferences(values).         }         startArray().         for (Object value : values) {             // pass ensureNoSelfReferences=false as we already performed the check at a higher level             unknownValue(value, false).         }         endArray().     }     return this. }
false;public;3;13;;// ////////////////////////////////////////////////////////////////////////// // Human readable fields //  // These are fields that have a "raw" value and a "human readable" value, // such as time values or byte sizes. The human readable variant is only // used if the humanReadable flag has been set // //////////////////////////////// public XContentBuilder humanReadableField(String rawFieldName, String readableFieldName, Object value) throws IOException {     if (humanReadable) {         field(readableFieldName, Objects.toString(value)).     }     HumanReadableTransformer transformer = HUMAN_READABLE_TRANSFORMERS.get(value.getClass()).     if (transformer != null) {         Object rawValue = transformer.rawValue(value).         field(rawFieldName, rawValue).     } else {         throw new IllegalArgumentException("no raw transformer found for class " + value.getClass()).     }     return this. }
false;public;3;7;;// ////////////////////////////////////////////////////////////////////////// // Misc. // //////////////////////////////// public XContentBuilder percentageField(String rawFieldName, String readableFieldName, double percentage) throws IOException {     if (humanReadable) {         field(readableFieldName, String.format(Locale.ROOT, "%1.1f%%", percentage)).     }     field(rawFieldName, percentage).     return this. }
true;public;2;5;/**  * Writes a raw field with the value taken from the bytes in the stream  * @deprecated use {@link #rawField(String, InputStream, XContentType)} to avoid content type auto-detection  */ ;// ////////////////////////////////////////////////////////////////////////// // Raw fields // //////////////////////////////// /**  * Writes a raw field with the value taken from the bytes in the stream  * @deprecated use {@link #rawField(String, InputStream, XContentType)} to avoid content type auto-detection  */ @Deprecated public XContentBuilder rawField(String name, InputStream value) throws IOException {     generator.writeRawField(name, value).     return this. }
true;public;3;4;/**  * Writes a raw field with the value taken from the bytes in the stream  */ ;/**  * Writes a raw field with the value taken from the bytes in the stream  */ public XContentBuilder rawField(String name, InputStream value, XContentType contentType) throws IOException {     generator.writeRawField(name, value, contentType).     return this. }
true;public;2;4;/**  * Writes a value with the source coming directly from the bytes in the stream  */ ;/**  * Writes a value with the source coming directly from the bytes in the stream  */ public XContentBuilder rawValue(InputStream stream, XContentType contentType) throws IOException {     generator.writeRawValue(stream, contentType).     return this. }
false;public;1;4;;public XContentBuilder copyCurrentStructure(XContentParser parser) throws IOException {     generator.copyCurrentStructure(parser).     return this. }
false;public;0;4;;@Override public void flush() throws IOException {     generator.flush(). }
false;public;0;8;;@Override public void close() {     try {         generator.close().     } catch (IOException e) {         throw new IllegalStateException("Failed to close the XContentBuilder", e).     } }
false;public;0;3;;public XContentGenerator generator() {     return this.generator. }
false;static;1;3;;static void ensureNameNotNull(String name) {     ensureNotNull(name, "Field name cannot be null"). }
false;static;2;5;;static void ensureNotNull(Object value, String message) {     if (value == null) {         throw new IllegalArgumentException(message).     } }
false;private,static;1;6;;private static void ensureNoSelfReferences(Object value) {     Iterable<?> it = convert(value).     if (it != null) {         ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>())).     } }
false;private,static;1;14;;private static Iterable<?> convert(Object value) {     if (value == null) {         return null.     }     if (value instanceof Map) {         return ((Map<?, ?>) value).values().     } else if ((value instanceof Iterable) && (value instanceof Path == false)) {         return (Iterable<?>) value.     } else if (value instanceof Object[]) {         return Arrays.asList((Object[]) value).     } else {         return null.     } }
false;private,static;3;11;;private static void ensureNoSelfReferences(final Iterable<?> value, Object originalReference, final Set<Object> ancestors) {     if (value != null) {         if (ancestors.add(originalReference) == false) {             throw new IllegalArgumentException("Iterable object is self-referencing itself").         }         for (Object o : value) {             ensureNoSelfReferences(convert(o), o, ancestors).         }         ancestors.remove(originalReference).     } }
