commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String mediaTypeWithoutParameters() {     return "application/json". }
false;public;0;4;;@Override public String mediaType() {     return "application/json. charset=UTF-8". }
false;public;0;4;;@Override public String shortName() {     return "json". }
false;public;0;4;;@Override public XContent xContent() {     return JsonXContent.jsonXContent. }
false;public;0;4;;@Override public String mediaTypeWithoutParameters() {     return "application/smile". }
false;public;0;4;;@Override public String shortName() {     return "smile". }
false;public;0;4;;@Override public XContent xContent() {     return SmileXContent.smileXContent. }
false;public;0;4;;@Override public String mediaTypeWithoutParameters() {     return "application/yaml". }
false;public;0;4;;@Override public String shortName() {     return "yaml". }
false;public;0;4;;@Override public XContent xContent() {     return YamlXContent.yamlXContent. }
false;public;0;4;;@Override public String mediaTypeWithoutParameters() {     return "application/cbor". }
false;public;0;4;;@Override public String shortName() {     return "cbor". }
false;public;0;4;;@Override public XContent xContent() {     return CborXContent.cborXContent. }
true;public,static;1;16;/**  * Accepts either a format string, which is equivalent to {@link XContentType#shortName()} or a media type that optionally has  * parameters and attempts to match the value to an {@link XContentType}. The comparisons are done in lower case format and this method  * also supports a wildcard accept for {@code application/*}. This method can be used to parse the {@code Accept} HTTP header or a  * format query string parameter. This method will return {@code null} if no match is found  */ ;/**  * Accepts either a format string, which is equivalent to {@link XContentType#shortName()} or a media type that optionally has  * parameters and attempts to match the value to an {@link XContentType}. The comparisons are done in lower case format and this method  * also supports a wildcard accept for {@code application/*}. This method can be used to parse the {@code Accept} HTTP header or a  * format query string parameter. This method will return {@code null} if no match is found  */ public static XContentType fromMediaTypeOrFormat(String mediaType) {     if (mediaType == null) {         return null.     }     for (XContentType type : values()) {         if (isSameMediaTypeOrFormatAs(mediaType, type)) {             return type.         }     }     final String lowercaseMediaType = mediaType.toLowerCase(Locale.ROOT).     if (lowercaseMediaType.startsWith("application/*")) {         return JSON.     }     return null. }
true;public,static;1;10;/**  * Attempts to match the given media type with the known {@link XContentType} values. This match is done in a case-insensitive manner.  * The provided media type should not include any parameters. This method is suitable for parsing part of the {@code Content-Type}  * HTTP header. This method will return {@code null} if no match is found  */ ;/**  * Attempts to match the given media type with the known {@link XContentType} values. This match is done in a case-insensitive manner.  * The provided media type should not include any parameters. This method is suitable for parsing part of the {@code Content-Type}  * HTTP header. This method will return {@code null} if no match is found  */ public static XContentType fromMediaType(String mediaType) {     final String lowercaseMediaType = Objects.requireNonNull(mediaType, "mediaType cannot be null").toLowerCase(Locale.ROOT).     for (XContentType type : values()) {         if (type.mediaTypeWithoutParameters().equals(lowercaseMediaType)) {             return type.         }     }     return null. }
false;private,static;2;5;;private static boolean isSameMediaTypeOrFormatAs(String stringType, XContentType type) {     return type.mediaTypeWithoutParameters().equalsIgnoreCase(stringType) || stringType.toLowerCase(Locale.ROOT).startsWith(type.mediaTypeWithoutParameters().toLowerCase(Locale.ROOT) + ".") || type.shortName().equalsIgnoreCase(stringType). }
false;public;0;3;;public int index() {     return index. }
false;public;0;3;;public String mediaType() {     return mediaTypeWithoutParameters(). }
false;public,abstract;0;1;;public abstract String shortName().
false;public,abstract;0;1;;public abstract XContent xContent().
false;public,abstract;0;1;;public abstract String mediaTypeWithoutParameters().
