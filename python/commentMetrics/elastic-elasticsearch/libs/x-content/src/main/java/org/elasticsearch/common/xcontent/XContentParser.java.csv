commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isValue() {     return false. }
false;public;0;4;;@Override public boolean isValue() {     return false. }
false;public;0;4;;@Override public boolean isValue() {     return false. }
false;public;0;4;;@Override public boolean isValue() {     return false. }
false;public;0;4;;@Override public boolean isValue() {     return false. }
false;public;0;4;;@Override public boolean isValue() {     return true. }
false;public;0;4;;@Override public boolean isValue() {     return true. }
false;public;0;4;;@Override public boolean isValue() {     return true. }
false;public;0;4;;@Override public boolean isValue() {     return true. }
false;public;0;4;;@Override public boolean isValue() {     return false. }
false;public,abstract;0;1;;public abstract boolean isValue().
false;;0;1;;XContentType contentType().
false;;0;1;;Token nextToken() throws IOException.
false;;0;1;;void skipChildren() throws IOException.
false;;0;1;;Token currentToken().
false;;0;1;;String currentName() throws IOException.
false;;0;1;;Map<String, Object> map() throws IOException.
false;;0;1;;Map<String, Object> mapOrdered() throws IOException.
false;;0;1;;Map<String, String> mapStrings() throws IOException.
false;;0;1;;Map<String, String> mapStringsOrdered() throws IOException.
false;;0;1;;List<Object> list() throws IOException.
false;;0;1;;List<Object> listOrderedMap() throws IOException.
false;;0;1;;String text() throws IOException.
false;;0;1;;String textOrNull() throws IOException.
false;;0;1;;CharBuffer charBufferOrNull() throws IOException.
true;;0;1;/**  * Returns a {@link CharBuffer} holding UTF-8 bytes.  * This method should be used to read text only binary content should be read through {@link #binaryValue()}  */ ;/**  * Returns a {@link CharBuffer} holding UTF-8 bytes.  * This method should be used to read text only binary content should be read through {@link #binaryValue()}  */ CharBuffer charBuffer() throws IOException.
false;;0;1;;Object objectText() throws IOException.
false;;0;1;;Object objectBytes() throws IOException.
true;;0;1;/**  * Method that can be used to determine whether calling of textCharacters() would be the most efficient way to  * access textual content for the event parser currently points to.  *  * Default implementation simply returns false since only actual  * implementation class has knowledge of its internal buffering  * state.  *  * This method shouldn't be used to check if the token contains text or not.  */ ;/**  * Method that can be used to determine whether calling of textCharacters() would be the most efficient way to  * access textual content for the event parser currently points to.  *  * Default implementation simply returns false since only actual  * implementation class has knowledge of its internal buffering  * state.  *  * This method shouldn't be used to check if the token contains text or not.  */ boolean hasTextCharacters().
false;;0;1;;char[] textCharacters() throws IOException.
false;;0;1;;int textLength() throws IOException.
false;;0;1;;int textOffset() throws IOException.
false;;0;1;;Number numberValue() throws IOException.
false;;0;1;;NumberType numberType() throws IOException.
false;;1;1;;short shortValue(boolean coerce) throws IOException.
false;;1;1;;int intValue(boolean coerce) throws IOException.
false;;1;1;;long longValue(boolean coerce) throws IOException.
false;;1;1;;float floatValue(boolean coerce) throws IOException.
false;;1;1;;double doubleValue(boolean coerce) throws IOException.
false;;0;1;;short shortValue() throws IOException.
false;;0;1;;int intValue() throws IOException.
false;;0;1;;long longValue() throws IOException.
false;;0;1;;float floatValue() throws IOException.
false;;0;1;;double doubleValue() throws IOException.
true;;0;1;/**  * @return true iff the current value is either boolean (<code>true</code> or <code>false</code>) or one of "false", "true".  */ ;/**  * @return true iff the current value is either boolean (<code>true</code> or <code>false</code>) or one of "false", "true".  */ boolean isBooleanValue() throws IOException.
false;;0;1;;boolean booleanValue() throws IOException.
true;;0;1;/**  * Reads a plain binary value that was written via one of the following methods:  *  * <ul>  *     <li>{@link XContentBuilder#field(String, byte[], int, int)}}</li>  *     <li>{@link XContentBuilder#field(String, byte[])}}</li>  * </ul>  *  * as well as via their <code>String</code> variants of the separated value methods.  * Note: Do not use this method to read values written with:  * <ul>  *     <li>{@link XContentBuilder#utf8Value(byte[], int, int)}</li>  * </ul>  *  * these methods write UTF-8 encoded strings and must be read through:  * <ul>  *     <li>{@link XContentParser#text()} ()}</li>  *     <li>{@link XContentParser#textOrNull()} ()}</li>  *     <li>{@link XContentParser#textCharacters()} ()}}</li>  * </ul>  */ ;/**  * Reads a plain binary value that was written via one of the following methods:  *  * <ul>  *     <li>{@link XContentBuilder#field(String, byte[], int, int)}}</li>  *     <li>{@link XContentBuilder#field(String, byte[])}}</li>  * </ul>  *  * as well as via their <code>String</code> variants of the separated value methods.  * Note: Do not use this method to read values written with:  * <ul>  *     <li>{@link XContentBuilder#utf8Value(byte[], int, int)}</li>  * </ul>  *  * these methods write UTF-8 encoded strings and must be read through:  * <ul>  *     <li>{@link XContentParser#text()} ()}</li>  *     <li>{@link XContentParser#textOrNull()} ()}</li>  *     <li>{@link XContentParser#textCharacters()} ()}}</li>  * </ul>  */ byte[] binaryValue() throws IOException.
true;;0;1;/**  * Used for error reporting to highlight where syntax errors occur in  * content being parsed.  *  * @return last token's location or null if cannot be determined  */ ;/**  * Used for error reporting to highlight where syntax errors occur in  * content being parsed.  *  * @return last token's location or null if cannot be determined  */ XContentLocation getTokenLocation().
true;;3;1;/**  * Parse an object by name.  */ ;// TODO remove context entirely when it isn't needed /**  * Parse an object by name.  */ <T> T namedObject(Class<T> categoryClass, String name, Object context) throws IOException.
true;;0;1;/**  * The registry used to resolve {@link #namedObject(Class, String, Object)}. Use this when building a sub-parser from this parser.  */ ;/**  * The registry used to resolve {@link #namedObject(Class, String, Object)}. Use this when building a sub-parser from this parser.  */ NamedXContentRegistry getXContentRegistry().
false;;0;1;;boolean isClosed().
true;;0;1;/**  * The callback to notify when parsing encounters a deprecated field.  */ ;/**  * The callback to notify when parsing encounters a deprecated field.  */ DeprecationHandler getDeprecationHandler().
