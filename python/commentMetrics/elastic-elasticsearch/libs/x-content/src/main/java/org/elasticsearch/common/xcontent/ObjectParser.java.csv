# id;timestamp;commentText;codeText;commentWords;codeWords
ObjectParser -> @Override     public String getName();1524684173;Get the name of the parser.;@Override_    public String getName() {_        return name__    };get,the,name,of,the,parser;override,public,string,get,name,return,name
ObjectParser -> @Override     public String getName();1528167589;Get the name of the parser.;@Override_    public String getName() {_        return name__    };get,the,name,of,the,parser;override,public,string,get,name,return,name
ObjectParser -> @Override     public String getName();1531179852;Get the name of the parser.;@Override_    public String getName() {_        return name__    };get,the,name,of,the,parser;override,public,string,get,name,return,name
ObjectParser -> @Override     public String getName();1540503333;Get the name of the parser.;@Override_    public String getName() {_        return name__    };get,the,name,of,the,parser;override,public,string,get,name,return,name
ObjectParser -> @Override     public String getName();1544035746;Get the name of the parser.;@Override_    public String getName() {_        return name__    };get,the,name,of,the,parser;override,public,string,get,name,return,name
ObjectParser -> public ObjectParser(String name);1524684173;Creates a new ObjectParser instance with a name. This name is used to reference the parser in exceptions and messages.;public ObjectParser(String name) {_        this(name, null)__    };creates,a,new,object,parser,instance,with,a,name,this,name,is,used,to,reference,the,parser,in,exceptions,and,messages;public,object,parser,string,name,this,name,null
ObjectParser -> public ObjectParser(String name);1528167589;Creates a new ObjectParser instance with a name. This name is used to reference the parser in exceptions and messages.;public ObjectParser(String name) {_        this(name, null)__    };creates,a,new,object,parser,instance,with,a,name,this,name,is,used,to,reference,the,parser,in,exceptions,and,messages;public,object,parser,string,name,this,name,null
ObjectParser -> public ObjectParser(String name);1531179852;Creates a new ObjectParser instance with a name. This name is used to reference the parser in exceptions and messages.;public ObjectParser(String name) {_        this(name, null)__    };creates,a,new,object,parser,instance,with,a,name,this,name,is,used,to,reference,the,parser,in,exceptions,and,messages;public,object,parser,string,name,this,name,null
ObjectParser -> public ObjectParser(String name);1540503333;Creates a new ObjectParser instance with a name. This name is used to reference the parser in exceptions and messages.;public ObjectParser(String name) {_        this(name, null)__    };creates,a,new,object,parser,instance,with,a,name,this,name,is,used,to,reference,the,parser,in,exceptions,and,messages;public,object,parser,string,name,this,name,null
ObjectParser -> public ObjectParser(String name);1544035746;Creates a new ObjectParser instance with a name. This name is used to reference the parser in exceptions and messages.;public ObjectParser(String name) {_        this(name, null)__    };creates,a,new,object,parser,instance,with,a,name,this,name,is,used,to,reference,the,parser,in,exceptions,and,messages;public,object,parser,string,name,this,name,null
ObjectParser -> public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier);1524684173;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier) {_        this(name, false, valueSupplier)__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,nullable,supplier,value,value,supplier,this,name,false,value,supplier
ObjectParser -> public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier);1528167589;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier) {_        this(name, false, valueSupplier)__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,nullable,supplier,value,value,supplier,this,name,false,value,supplier
ObjectParser -> public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier);1531179852;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier) {_        this(name, false, valueSupplier)__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,nullable,supplier,value,value,supplier,this,name,false,value,supplier
ObjectParser -> public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier);1540503333;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier) {_        this(name, false, valueSupplier)__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,nullable,supplier,value,value,supplier,this,name,false,value,supplier
ObjectParser -> public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier);1544035746;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier) {_        this(name, false, valueSupplier)__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,nullable,supplier,value,value,supplier,this,name,false,value,supplier
ObjectParser -> @Override     public Value parse(XContentParser parser, Context context) throws IOException;1524684173;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param context context needed for parsing_@return a new value instance drawn from the provided value supplier on {@link #ObjectParser(String, Supplier)}_@throws IOException if an IOException occurs.;@Override_    public Value parse(XContentParser parser, Context context) throws IOException {_        if (valueSupplier == null) {_            throw new NullPointerException("valueSupplier is not set")__        }_        return parse(parser, valueSupplier.get(), context)__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,context,context,needed,for,parsing,return,a,new,value,instance,drawn,from,the,provided,value,supplier,on,link,object,parser,string,supplier,throws,ioexception,if,an,ioexception,occurs;override,public,value,parse,xcontent,parser,parser,context,context,throws,ioexception,if,value,supplier,null,throw,new,null,pointer,exception,value,supplier,is,not,set,return,parse,parser,value,supplier,get,context
ObjectParser -> @Override     public Value parse(XContentParser parser, Context context) throws IOException;1528167589;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param context context needed for parsing_@return a new value instance drawn from the provided value supplier on {@link #ObjectParser(String, Supplier)}_@throws IOException if an IOException occurs.;@Override_    public Value parse(XContentParser parser, Context context) throws IOException {_        if (valueSupplier == null) {_            throw new NullPointerException("valueSupplier is not set")__        }_        return parse(parser, valueSupplier.get(), context)__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,context,context,needed,for,parsing,return,a,new,value,instance,drawn,from,the,provided,value,supplier,on,link,object,parser,string,supplier,throws,ioexception,if,an,ioexception,occurs;override,public,value,parse,xcontent,parser,parser,context,context,throws,ioexception,if,value,supplier,null,throw,new,null,pointer,exception,value,supplier,is,not,set,return,parse,parser,value,supplier,get,context
ObjectParser -> @Override     public Value parse(XContentParser parser, Context context) throws IOException;1531179852;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param context context needed for parsing_@return a new value instance drawn from the provided value supplier on {@link #ObjectParser(String, Supplier)}_@throws IOException if an IOException occurs.;@Override_    public Value parse(XContentParser parser, Context context) throws IOException {_        if (valueSupplier == null) {_            throw new NullPointerException("valueSupplier is not set")__        }_        return parse(parser, valueSupplier.get(), context)__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,context,context,needed,for,parsing,return,a,new,value,instance,drawn,from,the,provided,value,supplier,on,link,object,parser,string,supplier,throws,ioexception,if,an,ioexception,occurs;override,public,value,parse,xcontent,parser,parser,context,context,throws,ioexception,if,value,supplier,null,throw,new,null,pointer,exception,value,supplier,is,not,set,return,parse,parser,value,supplier,get,context
ObjectParser -> @Override     public Value parse(XContentParser parser, Context context) throws IOException;1540503333;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param context context needed for parsing_@return a new value instance drawn from the provided value supplier on {@link #ObjectParser(String, Supplier)}_@throws IOException if an IOException occurs.;@Override_    public Value parse(XContentParser parser, Context context) throws IOException {_        if (valueSupplier == null) {_            throw new NullPointerException("valueSupplier is not set")__        }_        return parse(parser, valueSupplier.get(), context)__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,context,context,needed,for,parsing,return,a,new,value,instance,drawn,from,the,provided,value,supplier,on,link,object,parser,string,supplier,throws,ioexception,if,an,ioexception,occurs;override,public,value,parse,xcontent,parser,parser,context,context,throws,ioexception,if,value,supplier,null,throw,new,null,pointer,exception,value,supplier,is,not,set,return,parse,parser,value,supplier,get,context
ObjectParser -> @Override     public Value parse(XContentParser parser, Context context) throws IOException;1544035746;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param context context needed for parsing_@return a new value instance drawn from the provided value supplier on {@link #ObjectParser(String, Supplier)}_@throws IOException if an IOException occurs.;@Override_    public Value parse(XContentParser parser, Context context) throws IOException {_        if (valueSupplier == null) {_            throw new NullPointerException("valueSupplier is not set")__        }_        return parse(parser, valueSupplier.get(), context)__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,context,context,needed,for,parsing,return,a,new,value,instance,drawn,from,the,provided,value,supplier,on,link,object,parser,string,supplier,throws,ioexception,if,an,ioexception,occurs;override,public,value,parse,xcontent,parser,parser,context,context,throws,ioexception,if,value,supplier,null,throw,new,null,pointer,exception,value,supplier,is,not,set,return,parse,parser,value,supplier,get,context
ObjectParser -> public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier);1524684173;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing_responses from external systems, never when parsing requests from users._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier) {_        this.name = name__        this.valueSupplier = valueSupplier__        this.ignoreUnknownFields = ignoreUnknownFields__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,ignore,unknown,fields,should,this,parser,ignore,unknown,fields,this,should,generally,be,set,to,true,only,when,parsing,responses,from,external,systems,never,when,parsing,requests,from,users,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,boolean,ignore,unknown,fields,nullable,supplier,value,value,supplier,this,name,name,this,value,supplier,value,supplier,this,ignore,unknown,fields,ignore,unknown,fields
ObjectParser -> public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier);1528167589;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing_responses from external systems, never when parsing requests from users._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier) {_        this.name = name__        this.valueSupplier = valueSupplier__        this.ignoreUnknownFields = ignoreUnknownFields__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,ignore,unknown,fields,should,this,parser,ignore,unknown,fields,this,should,generally,be,set,to,true,only,when,parsing,responses,from,external,systems,never,when,parsing,requests,from,users,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,boolean,ignore,unknown,fields,nullable,supplier,value,value,supplier,this,name,name,this,value,supplier,value,supplier,this,ignore,unknown,fields,ignore,unknown,fields
ObjectParser -> public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier);1531179852;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing_responses from external systems, never when parsing requests from users._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier) {_        this.name = name__        this.valueSupplier = valueSupplier__        this.ignoreUnknownFields = ignoreUnknownFields__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,ignore,unknown,fields,should,this,parser,ignore,unknown,fields,this,should,generally,be,set,to,true,only,when,parsing,responses,from,external,systems,never,when,parsing,requests,from,users,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,boolean,ignore,unknown,fields,nullable,supplier,value,value,supplier,this,name,name,this,value,supplier,value,supplier,this,ignore,unknown,fields,ignore,unknown,fields
ObjectParser -> public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier);1540503333;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing_responses from external systems, never when parsing requests from users._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier) {_        this.name = name__        this.valueSupplier = valueSupplier__        this.ignoreUnknownFields = ignoreUnknownFields__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,ignore,unknown,fields,should,this,parser,ignore,unknown,fields,this,should,generally,be,set,to,true,only,when,parsing,responses,from,external,systems,never,when,parsing,requests,from,users,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,boolean,ignore,unknown,fields,nullable,supplier,value,value,supplier,this,name,name,this,value,supplier,value,supplier,this,ignore,unknown,fields,ignore,unknown,fields
ObjectParser -> public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier);1544035746;Creates a new ObjectParser instance which a name._@param name the parsers name, used to reference the parser in exceptions and messages._@param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing_responses from external systems, never when parsing requests from users._@param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.;public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier) {_        this.name = name__        this.valueSupplier = valueSupplier__        this.ignoreUnknownFields = ignoreUnknownFields__    };creates,a,new,object,parser,instance,which,a,name,param,name,the,parsers,name,used,to,reference,the,parser,in,exceptions,and,messages,param,ignore,unknown,fields,should,this,parser,ignore,unknown,fields,this,should,generally,be,set,to,true,only,when,parsing,responses,from,external,systems,never,when,parsing,requests,from,users,param,value,supplier,a,supplier,that,creates,a,new,value,instance,used,when,the,parser,is,used,as,an,inner,object,parser;public,object,parser,string,name,boolean,ignore,unknown,fields,nullable,supplier,value,value,supplier,this,name,name,this,value,supplier,value,supplier,this,ignore,unknown,fields,ignore,unknown,fields
ObjectParser -> public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,             BiConsumer<Value, ElementValue[]> consumer);1524684173;Adapts an array (or varags) setter into a list setter.;public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,_            BiConsumer<Value, ElementValue[]> consumer) {_        return (Value v, List<ElementValue> l) -> {_            @SuppressWarnings("unchecked")_            ElementValue[] array = (ElementValue[]) Array.newInstance(c, l.size())__            consumer.accept(v, l.toArray(array))__        }__    };adapts,an,array,or,varags,setter,into,a,list,setter;public,static,value,element,value,bi,consumer,value,list,element,value,from,list,class,element,value,c,bi,consumer,value,element,value,consumer,return,value,v,list,element,value,l,suppress,warnings,unchecked,element,value,array,element,value,array,new,instance,c,l,size,consumer,accept,v,l,to,array,array
ObjectParser -> public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,             BiConsumer<Value, ElementValue[]> consumer);1528167589;Adapts an array (or varags) setter into a list setter.;public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,_            BiConsumer<Value, ElementValue[]> consumer) {_        return (Value v, List<ElementValue> l) -> {_            @SuppressWarnings("unchecked")_            ElementValue[] array = (ElementValue[]) Array.newInstance(c, l.size())__            consumer.accept(v, l.toArray(array))__        }__    };adapts,an,array,or,varags,setter,into,a,list,setter;public,static,value,element,value,bi,consumer,value,list,element,value,from,list,class,element,value,c,bi,consumer,value,element,value,consumer,return,value,v,list,element,value,l,suppress,warnings,unchecked,element,value,array,element,value,array,new,instance,c,l,size,consumer,accept,v,l,to,array,array
ObjectParser -> public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,             BiConsumer<Value, ElementValue[]> consumer);1531179852;Adapts an array (or varags) setter into a list setter.;public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,_            BiConsumer<Value, ElementValue[]> consumer) {_        return (Value v, List<ElementValue> l) -> {_            @SuppressWarnings("unchecked")_            ElementValue[] array = (ElementValue[]) Array.newInstance(c, l.size())__            consumer.accept(v, l.toArray(array))__        }__    };adapts,an,array,or,varags,setter,into,a,list,setter;public,static,value,element,value,bi,consumer,value,list,element,value,from,list,class,element,value,c,bi,consumer,value,element,value,consumer,return,value,v,list,element,value,l,suppress,warnings,unchecked,element,value,array,element,value,array,new,instance,c,l,size,consumer,accept,v,l,to,array,array
ObjectParser -> public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,             BiConsumer<Value, ElementValue[]> consumer);1540503333;Adapts an array (or varags) setter into a list setter.;public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,_            BiConsumer<Value, ElementValue[]> consumer) {_        return (Value v, List<ElementValue> l) -> {_            @SuppressWarnings("unchecked")_            ElementValue[] array = (ElementValue[]) Array.newInstance(c, l.size())__            consumer.accept(v, l.toArray(array))__        }__    };adapts,an,array,or,varags,setter,into,a,list,setter;public,static,value,element,value,bi,consumer,value,list,element,value,from,list,class,element,value,c,bi,consumer,value,element,value,consumer,return,value,v,list,element,value,l,suppress,warnings,unchecked,element,value,array,element,value,array,new,instance,c,l,size,consumer,accept,v,l,to,array,array
ObjectParser -> public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,             BiConsumer<Value, ElementValue[]> consumer);1544035746;Adapts an array (or varags) setter into a list setter.;public static <Value, ElementValue> BiConsumer<Value, List<ElementValue>> fromList(Class<ElementValue> c,_            BiConsumer<Value, ElementValue[]> consumer) {_        return (Value v, List<ElementValue> l) -> {_            @SuppressWarnings("unchecked")_            ElementValue[] array = (ElementValue[]) Array.newInstance(c, l.size())__            consumer.accept(v, l.toArray(array))__        }__    };adapts,an,array,or,varags,setter,into,a,list,setter;public,static,value,element,value,bi,consumer,value,list,element,value,from,list,class,element,value,c,bi,consumer,value,element,value,consumer,return,value,v,list,element,value,l,suppress,warnings,unchecked,element,value,array,element,value,array,new,instance,c,l,size,consumer,accept,v,l,to,array,array
ObjectParser -> public Value parse(XContentParser parser, Value value, Context context) throws IOException;1524684173;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param value the value to fill from the parser_@param context a context that is passed along to all declared field parsers_@return the parsed value_@throws IOException if an IOException occurs.;public Value parse(XContentParser parser, Value value, Context context) throws IOException {_        XContentParser.Token token__        if (parser.currentToken() == XContentParser.Token.START_OBJECT) {_            token = parser.currentToken()__        } else {_            token = parser.nextToken()__            if (token != XContentParser.Token.START_OBJECT) {_                throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] Expected START_OBJECT but was: " + token)__            }_        }__        FieldParser fieldParser = null__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__                fieldParser = getParser(currentFieldName)__            } else {_                if (currentFieldName == null) {_                    throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] no field found")__                }_                if (fieldParser == null) {_                    assert ignoreUnknownFields : "this should only be possible if configured to ignore known fields"__                    parser.skipChildren()_ _                } else {_                    fieldParser.assertSupports(name, parser, currentFieldName)__                    parseSub(parser, fieldParser, currentFieldName, value, context)__                }_                fieldParser = null__            }_        }_        return value__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,value,the,value,to,fill,from,the,parser,param,context,a,context,that,is,passed,along,to,all,declared,field,parsers,return,the,parsed,value,throws,ioexception,if,an,ioexception,occurs;public,value,parse,xcontent,parser,parser,value,value,context,context,throws,ioexception,xcontent,parser,token,token,if,parser,current,token,xcontent,parser,token,token,parser,current,token,else,token,parser,next,token,if,token,xcontent,parser,token,throw,new,xcontent,parse,exception,parser,get,token,location,name,expected,but,was,token,field,parser,field,parser,null,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,field,parser,get,parser,current,field,name,else,if,current,field,name,null,throw,new,xcontent,parse,exception,parser,get,token,location,name,no,field,found,if,field,parser,null,assert,ignore,unknown,fields,this,should,only,be,possible,if,configured,to,ignore,known,fields,parser,skip,children,else,field,parser,assert,supports,name,parser,current,field,name,parse,sub,parser,field,parser,current,field,name,value,context,field,parser,null,return,value
ObjectParser -> public Value parse(XContentParser parser, Value value, Context context) throws IOException;1528167589;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param value the value to fill from the parser_@param context a context that is passed along to all declared field parsers_@return the parsed value_@throws IOException if an IOException occurs.;public Value parse(XContentParser parser, Value value, Context context) throws IOException {_        XContentParser.Token token__        if (parser.currentToken() == XContentParser.Token.START_OBJECT) {_            token = parser.currentToken()__        } else {_            token = parser.nextToken()__            if (token != XContentParser.Token.START_OBJECT) {_                throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] Expected START_OBJECT but was: " + token)__            }_        }__        FieldParser fieldParser = null__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__                fieldParser = getParser(currentFieldName, parser)__            } else {_                if (currentFieldName == null) {_                    throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] no field found")__                }_                if (fieldParser == null) {_                    assert ignoreUnknownFields : "this should only be possible if configured to ignore known fields"__                    parser.skipChildren()_ _                } else {_                    fieldParser.assertSupports(name, parser, currentFieldName)__                    parseSub(parser, fieldParser, currentFieldName, value, context)__                }_                fieldParser = null__            }_        }_        return value__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,value,the,value,to,fill,from,the,parser,param,context,a,context,that,is,passed,along,to,all,declared,field,parsers,return,the,parsed,value,throws,ioexception,if,an,ioexception,occurs;public,value,parse,xcontent,parser,parser,value,value,context,context,throws,ioexception,xcontent,parser,token,token,if,parser,current,token,xcontent,parser,token,token,parser,current,token,else,token,parser,next,token,if,token,xcontent,parser,token,throw,new,xcontent,parse,exception,parser,get,token,location,name,expected,but,was,token,field,parser,field,parser,null,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,field,parser,get,parser,current,field,name,parser,else,if,current,field,name,null,throw,new,xcontent,parse,exception,parser,get,token,location,name,no,field,found,if,field,parser,null,assert,ignore,unknown,fields,this,should,only,be,possible,if,configured,to,ignore,known,fields,parser,skip,children,else,field,parser,assert,supports,name,parser,current,field,name,parse,sub,parser,field,parser,current,field,name,value,context,field,parser,null,return,value
ObjectParser -> public Value parse(XContentParser parser, Value value, Context context) throws IOException;1531179852;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param value the value to fill from the parser_@param context a context that is passed along to all declared field parsers_@return the parsed value_@throws IOException if an IOException occurs.;public Value parse(XContentParser parser, Value value, Context context) throws IOException {_        XContentParser.Token token__        if (parser.currentToken() == XContentParser.Token.START_OBJECT) {_            token = parser.currentToken()__        } else {_            token = parser.nextToken()__            if (token != XContentParser.Token.START_OBJECT) {_                throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] Expected START_OBJECT but was: " + token)__            }_        }__        FieldParser fieldParser = null__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__                fieldParser = getParser(currentFieldName, parser)__            } else {_                if (currentFieldName == null) {_                    throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] no field found")__                }_                if (fieldParser == null) {_                    assert ignoreUnknownFields : "this should only be possible if configured to ignore known fields"__                    parser.skipChildren()_ _                } else {_                    fieldParser.assertSupports(name, parser, currentFieldName)__                    parseSub(parser, fieldParser, currentFieldName, value, context)__                }_                fieldParser = null__            }_        }_        return value__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,value,the,value,to,fill,from,the,parser,param,context,a,context,that,is,passed,along,to,all,declared,field,parsers,return,the,parsed,value,throws,ioexception,if,an,ioexception,occurs;public,value,parse,xcontent,parser,parser,value,value,context,context,throws,ioexception,xcontent,parser,token,token,if,parser,current,token,xcontent,parser,token,token,parser,current,token,else,token,parser,next,token,if,token,xcontent,parser,token,throw,new,xcontent,parse,exception,parser,get,token,location,name,expected,but,was,token,field,parser,field,parser,null,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,field,parser,get,parser,current,field,name,parser,else,if,current,field,name,null,throw,new,xcontent,parse,exception,parser,get,token,location,name,no,field,found,if,field,parser,null,assert,ignore,unknown,fields,this,should,only,be,possible,if,configured,to,ignore,known,fields,parser,skip,children,else,field,parser,assert,supports,name,parser,current,field,name,parse,sub,parser,field,parser,current,field,name,value,context,field,parser,null,return,value
ObjectParser -> public Value parse(XContentParser parser, Value value, Context context) throws IOException;1540503333;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param value the value to fill from the parser_@param context a context that is passed along to all declared field parsers_@return the parsed value_@throws IOException if an IOException occurs.;public Value parse(XContentParser parser, Value value, Context context) throws IOException {_        XContentParser.Token token__        if (parser.currentToken() == XContentParser.Token.START_OBJECT) {_            token = parser.currentToken()__        } else {_            token = parser.nextToken()__            if (token != XContentParser.Token.START_OBJECT) {_                throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] Expected START_OBJECT but was: " + token)__            }_        }__        FieldParser fieldParser = null__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__                fieldParser = getParser(currentFieldName, parser)__            } else {_                if (currentFieldName == null) {_                    throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] no field found")__                }_                if (fieldParser == null) {_                    assert ignoreUnknownFields : "this should only be possible if configured to ignore known fields"__                    parser.skipChildren()_ _                } else {_                    fieldParser.assertSupports(name, parser, currentFieldName)__                    parseSub(parser, fieldParser, currentFieldName, value, context)__                }_                fieldParser = null__            }_        }_        return value__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,value,the,value,to,fill,from,the,parser,param,context,a,context,that,is,passed,along,to,all,declared,field,parsers,return,the,parsed,value,throws,ioexception,if,an,ioexception,occurs;public,value,parse,xcontent,parser,parser,value,value,context,context,throws,ioexception,xcontent,parser,token,token,if,parser,current,token,xcontent,parser,token,token,parser,current,token,else,token,parser,next,token,if,token,xcontent,parser,token,throw,new,xcontent,parse,exception,parser,get,token,location,name,expected,but,was,token,field,parser,field,parser,null,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,field,parser,get,parser,current,field,name,parser,else,if,current,field,name,null,throw,new,xcontent,parse,exception,parser,get,token,location,name,no,field,found,if,field,parser,null,assert,ignore,unknown,fields,this,should,only,be,possible,if,configured,to,ignore,known,fields,parser,skip,children,else,field,parser,assert,supports,name,parser,current,field,name,parse,sub,parser,field,parser,current,field,name,value,context,field,parser,null,return,value
ObjectParser -> public Value parse(XContentParser parser, Value value, Context context) throws IOException;1544035746;Parses a Value from the given {@link XContentParser}_@param parser the parser to build a value from_@param value the value to fill from the parser_@param context a context that is passed along to all declared field parsers_@return the parsed value_@throws IOException if an IOException occurs.;public Value parse(XContentParser parser, Value value, Context context) throws IOException {_        XContentParser.Token token__        if (parser.currentToken() == XContentParser.Token.START_OBJECT) {_            token = parser.currentToken()__        } else {_            token = parser.nextToken()__            if (token != XContentParser.Token.START_OBJECT) {_                throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] Expected START_OBJECT but was: " + token)__            }_        }__        FieldParser fieldParser = null__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__                fieldParser = getParser(currentFieldName, parser)__            } else {_                if (currentFieldName == null) {_                    throw new XContentParseException(parser.getTokenLocation(), "[" + name  + "] no field found")__                }_                if (fieldParser == null) {_                    assert ignoreUnknownFields : "this should only be possible if configured to ignore known fields"__                    parser.skipChildren()_ _                } else {_                    fieldParser.assertSupports(name, parser, currentFieldName)__                    parseSub(parser, fieldParser, currentFieldName, value, context)__                }_                fieldParser = null__            }_        }_        return value__    };parses,a,value,from,the,given,link,xcontent,parser,param,parser,the,parser,to,build,a,value,from,param,value,the,value,to,fill,from,the,parser,param,context,a,context,that,is,passed,along,to,all,declared,field,parsers,return,the,parsed,value,throws,ioexception,if,an,ioexception,occurs;public,value,parse,xcontent,parser,parser,value,value,context,context,throws,ioexception,xcontent,parser,token,token,if,parser,current,token,xcontent,parser,token,token,parser,current,token,else,token,parser,next,token,if,token,xcontent,parser,token,throw,new,xcontent,parse,exception,parser,get,token,location,name,expected,but,was,token,field,parser,field,parser,null,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,field,parser,get,parser,current,field,name,parser,else,if,current,field,name,null,throw,new,xcontent,parse,exception,parser,get,token,location,name,no,field,found,if,field,parser,null,assert,ignore,unknown,fields,this,should,only,be,possible,if,configured,to,ignore,known,fields,parser,skip,children,else,field,parser,assert,supports,name,parser,current,field,name,parse,sub,parser,field,parser,current,field,name,value,context,field,parser,null,return,value
