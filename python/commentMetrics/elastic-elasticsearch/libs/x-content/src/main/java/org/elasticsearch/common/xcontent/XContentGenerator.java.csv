commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;XContentType contentType().
false;;0;1;;void usePrettyPrint().
false;;0;1;;boolean isPrettyPrint().
false;;0;1;;void usePrintLineFeedAtEnd().
false;;0;1;;void writeStartObject() throws IOException.
false;;0;1;;void writeEndObject() throws IOException.
false;;0;1;;void writeStartArray() throws IOException.
false;;0;1;;void writeEndArray() throws IOException.
false;;1;1;;void writeFieldName(String name) throws IOException.
false;;0;1;;void writeNull() throws IOException.
false;;1;1;;void writeNullField(String name) throws IOException.
false;;2;1;;void writeBooleanField(String name, boolean value) throws IOException.
false;;1;1;;void writeBoolean(boolean value) throws IOException.
false;;2;1;;void writeNumberField(String name, double value) throws IOException.
false;;1;1;;void writeNumber(double value) throws IOException.
false;;2;1;;void writeNumberField(String name, float value) throws IOException.
false;;1;1;;void writeNumber(float value) throws IOException.
false;;2;1;;void writeNumberField(String name, int value) throws IOException.
false;;1;1;;void writeNumber(int value) throws IOException.
false;;2;1;;void writeNumberField(String name, long value) throws IOException.
false;;1;1;;void writeNumber(long value) throws IOException.
false;;1;1;;void writeNumber(short value) throws IOException.
false;;1;1;;void writeNumber(BigInteger value) throws IOException.
false;;2;1;;void writeNumberField(String name, BigInteger value) throws IOException.
false;;1;1;;void writeNumber(BigDecimal value) throws IOException.
false;;2;1;;void writeNumberField(String name, BigDecimal value) throws IOException.
false;;2;1;;void writeStringField(String name, String value) throws IOException.
false;;1;1;;void writeString(String value) throws IOException.
false;;3;1;;void writeString(char[] text, int offset, int len) throws IOException.
false;;3;1;;void writeUTF8String(byte[] value, int offset, int length) throws IOException.
false;;2;1;;void writeBinaryField(String name, byte[] value) throws IOException.
false;;1;1;;void writeBinary(byte[] value) throws IOException.
false;;3;1;;void writeBinary(byte[] value, int offset, int length) throws IOException.
true;;2;2;/**  * Writes a raw field with the value taken from the bytes in the stream  * @deprecated use {@link #writeRawField(String, InputStream, XContentType)} to avoid content type auto-detection  */ ;/**  * Writes a raw field with the value taken from the bytes in the stream  * @deprecated use {@link #writeRawField(String, InputStream, XContentType)} to avoid content type auto-detection  */ @Deprecated void writeRawField(String name, InputStream value) throws IOException.
true;;3;1;/**  * Writes a raw field with the value taken from the bytes in the stream  */ ;/**  * Writes a raw field with the value taken from the bytes in the stream  */ void writeRawField(String name, InputStream value, XContentType xContentType) throws IOException.
true;;2;1;/**  * Writes a raw value taken from the bytes in the stream  */ ;/**  * Writes a raw value taken from the bytes in the stream  */ void writeRawValue(InputStream value, XContentType xContentType) throws IOException.
false;;1;1;;void copyCurrentStructure(XContentParser parser) throws IOException.
false;default;1;50;;default void copyCurrentEvent(XContentParser parser) throws IOException {     switch(parser.currentToken()) {         case START_OBJECT:             writeStartObject().             break.         case END_OBJECT:             writeEndObject().             break.         case START_ARRAY:             writeStartArray().             break.         case END_ARRAY:             writeEndArray().             break.         case FIELD_NAME:             writeFieldName(parser.currentName()).             break.         case VALUE_STRING:             if (parser.hasTextCharacters()) {                 writeString(parser.textCharacters(), parser.textOffset(), parser.textLength()).             } else {                 writeString(parser.text()).             }             break.         case VALUE_NUMBER:             switch(parser.numberType()) {                 case INT:                     writeNumber(parser.intValue()).                     break.                 case LONG:                     writeNumber(parser.longValue()).                     break.                 case FLOAT:                     writeNumber(parser.floatValue()).                     break.                 case DOUBLE:                     writeNumber(parser.doubleValue()).                     break.             }             break.         case VALUE_BOOLEAN:             writeBoolean(parser.booleanValue()).             break.         case VALUE_NULL:             writeNull().             break.         case VALUE_EMBEDDED_OBJECT:             writeBinary(parser.binaryValue()).     } }
true;;0;1;/**  * Returns {@code true} if this XContentGenerator has been closed. A closed generator can not do any more output.  */ ;/**  * Returns {@code true} if this XContentGenerator has been closed. A closed generator can not do any more output.  */ boolean isClosed().
