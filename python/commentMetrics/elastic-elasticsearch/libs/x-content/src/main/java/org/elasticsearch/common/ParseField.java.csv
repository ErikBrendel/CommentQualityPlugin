commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return the preferred name used for this field  */ ;/**  * @return the preferred name used for this field  */ public String getPreferredName() {     return name. }
true;public;0;3;/**  * @return All names for this field regardless of whether they are  *         deprecated  */ ;/**  * @return All names for this field regardless of whether they are  *         deprecated  */ public String[] getAllNamesIncludedDeprecated() {     return allNames. }
true;public;1;3;/**  * @param deprecatedNames  *            deprecated names to include with the returned  *            {@link ParseField}  * @return a new {@link ParseField} using the preferred name from this one  *         but with the specified deprecated names  */ ;/**  * @param deprecatedNames  *            deprecated names to include with the returned  *            {@link ParseField}  * @return a new {@link ParseField} using the preferred name from this one  *         but with the specified deprecated names  */ public ParseField withDeprecation(String... deprecatedNames) {     return new ParseField(this.name, deprecatedNames). }
true;public;1;5;/**  * Return a new ParseField where all field names are deprecated and replaced  * with {@code allReplacedWith}.  */ ;/**  * Return a new ParseField where all field names are deprecated and replaced  * with {@code allReplacedWith}.  */ public ParseField withAllDeprecated(String allReplacedWith) {     ParseField parseField = this.withDeprecation(getAllNamesIncludedDeprecated()).     parseField.allReplacedWith = allReplacedWith.     return parseField. }
true;public;2;22;/**  * Does {@code fieldName} match this field?  * @param fieldName  *            the field name to match against this {@link ParseField}  * @param deprecationHandler called if {@code fieldName} is deprecated  * @return true if <code>fieldName</code> matches any of the acceptable  *         names for this {@link ParseField}.  */ ;/**  * Does {@code fieldName} match this field?  * @param fieldName  *            the field name to match against this {@link ParseField}  * @param deprecationHandler called if {@code fieldName} is deprecated  * @return true if <code>fieldName</code> matches any of the acceptable  *         names for this {@link ParseField}.  */ public boolean match(String fieldName, DeprecationHandler deprecationHandler) {     Objects.requireNonNull(fieldName, "fieldName cannot be null").     // match the preferred name     if (allReplacedWith == null && fieldName.equals(name)) {         return true.     }     // fields will be in the deprecatedNames array     for (String depName : deprecatedNames) {         if (fieldName.equals(depName)) {             if (allReplacedWith == null) {                 deprecationHandler.usedDeprecatedName(fieldName, name).             } else {                 deprecationHandler.usedDeprecatedField(fieldName, allReplacedWith).             }             return true.         }     }     return false. }
false;public;0;4;;@Override public String toString() {     return getPreferredName(). }
true;public;0;3;/**  * @return the message to use if this {@link ParseField} has been entirely  *         deprecated in favor of something else. This method will return  *         <code>null</code> if the ParseField has not been completely  *         deprecated.  */ ;/**  * @return the message to use if this {@link ParseField} has been entirely  *         deprecated in favor of something else. This method will return  *         <code>null</code> if the ParseField has not been completely  *         deprecated.  */ public String getAllReplacedWith() {     return allReplacedWith. }
true;public;0;3;/**  * @return an array of the names for the {@link ParseField} which are  *         deprecated.  */ ;/**  * @return an array of the names for the {@link ParseField} which are  *         deprecated.  */ public String[] getDeprecatedNames() {     return deprecatedNames. }
