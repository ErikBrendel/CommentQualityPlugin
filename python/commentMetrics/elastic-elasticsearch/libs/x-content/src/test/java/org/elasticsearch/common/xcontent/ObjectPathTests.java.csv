commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testEval() {     Map<String, Object> map = singletonMap("key", "value").     assertThat(ObjectPath.eval("key", map), is((Object) "value")).     assertThat(ObjectPath.eval("key1", map), nullValue()). }
false;public;0;7;;public void testEvalList() {     List<Integer> list = Arrays.asList(1, 2, 3, 4).     Map<String, Object> map = singletonMap("key", list).     int index = randomInt(3).     assertThat(ObjectPath.eval("key." + index, map), is(list.get(index))). }
false;public;0;7;;public void testEvalArray() {     int[] array = new int[] { 1, 2, 3, 4 }.     Map<String, Object> map = singletonMap("key", array).     int index = randomInt(3).     assertThat(((Number) ObjectPath.eval("key." + index, map)).intValue(), is(array[index])). }
false;public;0;5;;public void testEvalMap() {     Map<String, Object> map = singletonMap("a", singletonMap("b", "val")).     assertThat(ObjectPath.eval("a.b", map), is((Object) "val")). }
false;public;0;21;;public void testEvalMixed() {     Map<String, Object> map = new HashMap<>().     Map<String, Object> mapA = new HashMap<>().     map.put("a", mapA).     List<Object> listB = new ArrayList<>().     mapA.put("b", listB).     List<Object> listB1 = new ArrayList<>().     listB.add(listB1).     Map<String, Object> mapB11 = new HashMap<>().     listB1.add(mapB11).     mapB11.put("c", "val").     assertThat(ObjectPath.eval("", map), is((Object) map)).     assertThat(ObjectPath.eval("a.b.0.0.c", map), is((Object) "val")).     assertThat(ObjectPath.eval("a.b.0.0.c.d", map), nullValue()).     assertThat(ObjectPath.eval("a.b.0.0.d", map), nullValue()).     assertThat(ObjectPath.eval("a.b.c", map), nullValue()). }
