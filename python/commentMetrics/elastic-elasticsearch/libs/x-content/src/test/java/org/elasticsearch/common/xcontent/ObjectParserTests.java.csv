# id;timestamp;commentText;codeText;commentWords;codeWords
ObjectParserTests -> public void testUseClassicPullParsingSubParser() throws IOException;1524684173;This test ensures we can use a classic pull-parsing parser_together with the object parser;public void testUseClassicPullParsingSubParser() throws IOException {_        class ClassicParser {_            URI parseURI(XContentParser parser) throws IOException {_                String fieldName = null__                String host = ""__                int port = 0__                XContentParser.Token token__                while (( token = parser.currentToken()) != XContentParser.Token.END_OBJECT) {_                    if (token == XContentParser.Token.FIELD_NAME) {_                        fieldName = parser.currentName()__                    } else if (token == XContentParser.Token.VALUE_STRING){_                        if (fieldName.equals("host")) {_                            host = parser.text()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    } else if (token == XContentParser.Token.VALUE_NUMBER){_                        if (fieldName.equals("port")) {_                            port = parser.intValue()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    }_                    parser.nextToken()__                }_                return URI.create(host + ":" + port)__            }_        }_        class Foo {_            public String name__            public URI uri__            public void setName(String name) {_                this.name = name__            }__            public void setURI(URI uri) {_                this.uri = uri__            }_        }__        class CustomParseContext {__            public final ClassicParser parser___            CustomParseContext(ClassicParser parser) {_                this.parser = parser__            }__            public URI parseURI(XContentParser parser) {_                try {_                    return this.parser.parseURI(parser)__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            }_        }_        XContentParser parser = createParser(JsonXContent.jsonXContent,_                "{\"url\" : { \"host\": \"http://foobar\", \"port\" : 80}, \"name\" : \"foobarbaz\"}")__        ObjectParser<Foo, CustomParseContext> objectParser = new ObjectParser<>("foo")__        objectParser.declareString(Foo::setName, new ParseField("name"))__        objectParser.declareObjectOrDefault(Foo::setURI, (p, s) -> s.parseURI(p), () -> null, new ParseField("url"))__        Foo s = objectParser.parse(parser, new Foo(), new CustomParseContext(new ClassicParser()))__        assertEquals(s.uri.getHost(),  "foobar")__        assertEquals(s.uri.getPort(),  80)__        assertEquals(s.name, "foobarbaz")__    };this,test,ensures,we,can,use,a,classic,pull,parsing,parser,together,with,the,object,parser;public,void,test,use,classic,pull,parsing,sub,parser,throws,ioexception,class,classic,parser,uri,parse,uri,xcontent,parser,parser,throws,ioexception,string,field,name,null,string,host,int,port,0,xcontent,parser,token,token,while,token,parser,current,token,xcontent,parser,token,if,token,xcontent,parser,token,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,field,name,equals,host,host,parser,text,else,throw,new,illegal,state,exception,boom,else,if,token,xcontent,parser,token,if,field,name,equals,port,port,parser,int,value,else,throw,new,illegal,state,exception,boom,parser,next,token,return,uri,create,host,port,class,foo,public,string,name,public,uri,uri,public,void,set,name,string,name,this,name,name,public,void,set,uri,uri,uri,this,uri,uri,class,custom,parse,context,public,final,classic,parser,parser,custom,parse,context,classic,parser,parser,this,parser,parser,public,uri,parse,uri,xcontent,parser,parser,try,return,this,parser,parse,uri,parser,catch,ioexception,e,throw,new,unchecked,ioexception,e,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,url,host,http,foobar,port,80,name,foobarbaz,object,parser,foo,custom,parse,context,object,parser,new,object,parser,foo,object,parser,declare,string,foo,set,name,new,parse,field,name,object,parser,declare,object,or,default,foo,set,uri,p,s,s,parse,uri,p,null,new,parse,field,url,foo,s,object,parser,parse,parser,new,foo,new,custom,parse,context,new,classic,parser,assert,equals,s,uri,get,host,foobar,assert,equals,s,uri,get,port,80,assert,equals,s,name,foobarbaz
ObjectParserTests -> public void testUseClassicPullParsingSubParser() throws IOException;1528167589;This test ensures we can use a classic pull-parsing parser_together with the object parser;public void testUseClassicPullParsingSubParser() throws IOException {_        class ClassicParser {_            URI parseURI(XContentParser parser) throws IOException {_                String fieldName = null__                String host = ""__                int port = 0__                XContentParser.Token token__                while (( token = parser.currentToken()) != XContentParser.Token.END_OBJECT) {_                    if (token == XContentParser.Token.FIELD_NAME) {_                        fieldName = parser.currentName()__                    } else if (token == XContentParser.Token.VALUE_STRING){_                        if (fieldName.equals("host")) {_                            host = parser.text()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    } else if (token == XContentParser.Token.VALUE_NUMBER){_                        if (fieldName.equals("port")) {_                            port = parser.intValue()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    }_                    parser.nextToken()__                }_                return URI.create(host + ":" + port)__            }_        }_        class Foo {_            public String name__            public URI uri__            public void setName(String name) {_                this.name = name__            }__            public void setURI(URI uri) {_                this.uri = uri__            }_        }__        class CustomParseContext {__            public final ClassicParser parser___            CustomParseContext(ClassicParser parser) {_                this.parser = parser__            }__            public URI parseURI(XContentParser parser) {_                try {_                    return this.parser.parseURI(parser)__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            }_        }_        XContentParser parser = createParser(JsonXContent.jsonXContent,_                "{\"url\" : { \"host\": \"http://foobar\", \"port\" : 80}, \"name\" : \"foobarbaz\"}")__        ObjectParser<Foo, CustomParseContext> objectParser = new ObjectParser<>("foo")__        objectParser.declareString(Foo::setName, new ParseField("name"))__        objectParser.declareObjectOrDefault(Foo::setURI, (p, s) -> s.parseURI(p), () -> null, new ParseField("url"))__        Foo s = objectParser.parse(parser, new Foo(), new CustomParseContext(new ClassicParser()))__        assertEquals(s.uri.getHost(),  "foobar")__        assertEquals(s.uri.getPort(),  80)__        assertEquals(s.name, "foobarbaz")__    };this,test,ensures,we,can,use,a,classic,pull,parsing,parser,together,with,the,object,parser;public,void,test,use,classic,pull,parsing,sub,parser,throws,ioexception,class,classic,parser,uri,parse,uri,xcontent,parser,parser,throws,ioexception,string,field,name,null,string,host,int,port,0,xcontent,parser,token,token,while,token,parser,current,token,xcontent,parser,token,if,token,xcontent,parser,token,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,field,name,equals,host,host,parser,text,else,throw,new,illegal,state,exception,boom,else,if,token,xcontent,parser,token,if,field,name,equals,port,port,parser,int,value,else,throw,new,illegal,state,exception,boom,parser,next,token,return,uri,create,host,port,class,foo,public,string,name,public,uri,uri,public,void,set,name,string,name,this,name,name,public,void,set,uri,uri,uri,this,uri,uri,class,custom,parse,context,public,final,classic,parser,parser,custom,parse,context,classic,parser,parser,this,parser,parser,public,uri,parse,uri,xcontent,parser,parser,try,return,this,parser,parse,uri,parser,catch,ioexception,e,throw,new,unchecked,ioexception,e,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,url,host,http,foobar,port,80,name,foobarbaz,object,parser,foo,custom,parse,context,object,parser,new,object,parser,foo,object,parser,declare,string,foo,set,name,new,parse,field,name,object,parser,declare,object,or,default,foo,set,uri,p,s,s,parse,uri,p,null,new,parse,field,url,foo,s,object,parser,parse,parser,new,foo,new,custom,parse,context,new,classic,parser,assert,equals,s,uri,get,host,foobar,assert,equals,s,uri,get,port,80,assert,equals,s,name,foobarbaz
ObjectParserTests -> public void testUseClassicPullParsingSubParser() throws IOException;1538067637;This test ensures we can use a classic pull-parsing parser_together with the object parser;public void testUseClassicPullParsingSubParser() throws IOException {_        class ClassicParser {_            URI parseURI(XContentParser parser) throws IOException {_                String fieldName = null__                String host = ""__                int port = 0__                XContentParser.Token token__                while (( token = parser.currentToken()) != XContentParser.Token.END_OBJECT) {_                    if (token == XContentParser.Token.FIELD_NAME) {_                        fieldName = parser.currentName()__                    } else if (token == XContentParser.Token.VALUE_STRING){_                        if (fieldName.equals("host")) {_                            host = parser.text()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    } else if (token == XContentParser.Token.VALUE_NUMBER){_                        if (fieldName.equals("port")) {_                            port = parser.intValue()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    }_                    parser.nextToken()__                }_                return URI.create(host + ":" + port)__            }_        }_        class Foo {_            public String name__            public URI uri__            public void setName(String name) {_                this.name = name__            }__            public void setURI(URI uri) {_                this.uri = uri__            }_        }__        class CustomParseContext {__            public final ClassicParser parser___            CustomParseContext(ClassicParser parser) {_                this.parser = parser__            }__            public URI parseURI(XContentParser parser) {_                try {_                    return this.parser.parseURI(parser)__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            }_        }_        XContentParser parser = createParser(JsonXContent.jsonXContent,_                "{\"url\" : { \"host\": \"http://foobar\", \"port\" : 80}, \"name\" : \"foobarbaz\"}")__        ObjectParser<Foo, CustomParseContext> objectParser = new ObjectParser<>("foo")__        objectParser.declareString(Foo::setName, new ParseField("name"))__        objectParser.declareObjectOrDefault(Foo::setURI, (p, s) -> s.parseURI(p), () -> null, new ParseField("url"))__        Foo s = objectParser.parse(parser, new Foo(), new CustomParseContext(new ClassicParser()))__        assertEquals(s.uri.getHost(),  "foobar")__        assertEquals(s.uri.getPort(),  80)__        assertEquals(s.name, "foobarbaz")__    };this,test,ensures,we,can,use,a,classic,pull,parsing,parser,together,with,the,object,parser;public,void,test,use,classic,pull,parsing,sub,parser,throws,ioexception,class,classic,parser,uri,parse,uri,xcontent,parser,parser,throws,ioexception,string,field,name,null,string,host,int,port,0,xcontent,parser,token,token,while,token,parser,current,token,xcontent,parser,token,if,token,xcontent,parser,token,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,field,name,equals,host,host,parser,text,else,throw,new,illegal,state,exception,boom,else,if,token,xcontent,parser,token,if,field,name,equals,port,port,parser,int,value,else,throw,new,illegal,state,exception,boom,parser,next,token,return,uri,create,host,port,class,foo,public,string,name,public,uri,uri,public,void,set,name,string,name,this,name,name,public,void,set,uri,uri,uri,this,uri,uri,class,custom,parse,context,public,final,classic,parser,parser,custom,parse,context,classic,parser,parser,this,parser,parser,public,uri,parse,uri,xcontent,parser,parser,try,return,this,parser,parse,uri,parser,catch,ioexception,e,throw,new,unchecked,ioexception,e,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,url,host,http,foobar,port,80,name,foobarbaz,object,parser,foo,custom,parse,context,object,parser,new,object,parser,foo,object,parser,declare,string,foo,set,name,new,parse,field,name,object,parser,declare,object,or,default,foo,set,uri,p,s,s,parse,uri,p,null,new,parse,field,url,foo,s,object,parser,parse,parser,new,foo,new,custom,parse,context,new,classic,parser,assert,equals,s,uri,get,host,foobar,assert,equals,s,uri,get,port,80,assert,equals,s,name,foobarbaz
ObjectParserTests -> public void testUseClassicPullParsingSubParser() throws IOException;1540503333;This test ensures we can use a classic pull-parsing parser_together with the object parser;public void testUseClassicPullParsingSubParser() throws IOException {_        class ClassicParser {_            URI parseURI(XContentParser parser) throws IOException {_                String fieldName = null__                String host = ""__                int port = 0__                XContentParser.Token token__                while (( token = parser.currentToken()) != XContentParser.Token.END_OBJECT) {_                    if (token == XContentParser.Token.FIELD_NAME) {_                        fieldName = parser.currentName()__                    } else if (token == XContentParser.Token.VALUE_STRING){_                        if (fieldName.equals("host")) {_                            host = parser.text()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    } else if (token == XContentParser.Token.VALUE_NUMBER){_                        if (fieldName.equals("port")) {_                            port = parser.intValue()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    }_                    parser.nextToken()__                }_                return URI.create(host + ":" + port)__            }_        }_        class Foo {_            public String name__            public URI uri__            public void setName(String name) {_                this.name = name__            }__            public void setURI(URI uri) {_                this.uri = uri__            }_        }__        class CustomParseContext {__            public final ClassicParser parser___            CustomParseContext(ClassicParser parser) {_                this.parser = parser__            }__            public URI parseURI(XContentParser parser) {_                try {_                    return this.parser.parseURI(parser)__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            }_        }_        XContentParser parser = createParser(JsonXContent.jsonXContent,_                "{\"url\" : { \"host\": \"http://foobar\", \"port\" : 80}, \"name\" : \"foobarbaz\"}")__        ObjectParser<Foo, CustomParseContext> objectParser = new ObjectParser<>("foo")__        objectParser.declareString(Foo::setName, new ParseField("name"))__        objectParser.declareObjectOrDefault(Foo::setURI, (p, s) -> s.parseURI(p), () -> null, new ParseField("url"))__        Foo s = objectParser.parse(parser, new Foo(), new CustomParseContext(new ClassicParser()))__        assertEquals(s.uri.getHost(),  "foobar")__        assertEquals(s.uri.getPort(),  80)__        assertEquals(s.name, "foobarbaz")__    };this,test,ensures,we,can,use,a,classic,pull,parsing,parser,together,with,the,object,parser;public,void,test,use,classic,pull,parsing,sub,parser,throws,ioexception,class,classic,parser,uri,parse,uri,xcontent,parser,parser,throws,ioexception,string,field,name,null,string,host,int,port,0,xcontent,parser,token,token,while,token,parser,current,token,xcontent,parser,token,if,token,xcontent,parser,token,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,field,name,equals,host,host,parser,text,else,throw,new,illegal,state,exception,boom,else,if,token,xcontent,parser,token,if,field,name,equals,port,port,parser,int,value,else,throw,new,illegal,state,exception,boom,parser,next,token,return,uri,create,host,port,class,foo,public,string,name,public,uri,uri,public,void,set,name,string,name,this,name,name,public,void,set,uri,uri,uri,this,uri,uri,class,custom,parse,context,public,final,classic,parser,parser,custom,parse,context,classic,parser,parser,this,parser,parser,public,uri,parse,uri,xcontent,parser,parser,try,return,this,parser,parse,uri,parser,catch,ioexception,e,throw,new,unchecked,ioexception,e,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,url,host,http,foobar,port,80,name,foobarbaz,object,parser,foo,custom,parse,context,object,parser,new,object,parser,foo,object,parser,declare,string,foo,set,name,new,parse,field,name,object,parser,declare,object,or,default,foo,set,uri,p,s,s,parse,uri,p,null,new,parse,field,url,foo,s,object,parser,parse,parser,new,foo,new,custom,parse,context,new,classic,parser,assert,equals,s,uri,get,host,foobar,assert,equals,s,uri,get,port,80,assert,equals,s,name,foobarbaz
ObjectParserTests -> public void testUseClassicPullParsingSubParser() throws IOException;1548422582;This test ensures we can use a classic pull-parsing parser_together with the object parser;public void testUseClassicPullParsingSubParser() throws IOException {_        class ClassicParser {_            URI parseURI(XContentParser parser) throws IOException {_                String fieldName = null__                String host = ""__                int port = 0__                XContentParser.Token token__                while (( token = parser.currentToken()) != XContentParser.Token.END_OBJECT) {_                    if (token == XContentParser.Token.FIELD_NAME) {_                        fieldName = parser.currentName()__                    } else if (token == XContentParser.Token.VALUE_STRING){_                        if (fieldName.equals("host")) {_                            host = parser.text()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    } else if (token == XContentParser.Token.VALUE_NUMBER){_                        if (fieldName.equals("port")) {_                            port = parser.intValue()__                        } else {_                            throw new IllegalStateException("boom")__                        }_                    }_                    parser.nextToken()__                }_                return URI.create(host + ":" + port)__            }_        }_        class Foo {_            public String name__            public URI uri__            public void setName(String name) {_                this.name = name__            }__            public void setURI(URI uri) {_                this.uri = uri__            }_        }__        class CustomParseContext {__            public final ClassicParser parser___            CustomParseContext(ClassicParser parser) {_                this.parser = parser__            }__            public URI parseURI(XContentParser parser) {_                try {_                    return this.parser.parseURI(parser)__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            }_        }_        XContentParser parser = createParser(JsonXContent.jsonXContent,_                "{\"url\" : { \"host\": \"http://foobar\", \"port\" : 80}, \"name\" : \"foobarbaz\"}")__        ObjectParser<Foo, CustomParseContext> objectParser = new ObjectParser<>("foo")__        objectParser.declareString(Foo::setName, new ParseField("name"))__        objectParser.declareObjectOrDefault(Foo::setURI, (p, s) -> s.parseURI(p), () -> null, new ParseField("url"))__        Foo s = objectParser.parse(parser, new Foo(), new CustomParseContext(new ClassicParser()))__        assertEquals(s.uri.getHost(),  "foobar")__        assertEquals(s.uri.getPort(),  80)__        assertEquals(s.name, "foobarbaz")__    };this,test,ensures,we,can,use,a,classic,pull,parsing,parser,together,with,the,object,parser;public,void,test,use,classic,pull,parsing,sub,parser,throws,ioexception,class,classic,parser,uri,parse,uri,xcontent,parser,parser,throws,ioexception,string,field,name,null,string,host,int,port,0,xcontent,parser,token,token,while,token,parser,current,token,xcontent,parser,token,if,token,xcontent,parser,token,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,field,name,equals,host,host,parser,text,else,throw,new,illegal,state,exception,boom,else,if,token,xcontent,parser,token,if,field,name,equals,port,port,parser,int,value,else,throw,new,illegal,state,exception,boom,parser,next,token,return,uri,create,host,port,class,foo,public,string,name,public,uri,uri,public,void,set,name,string,name,this,name,name,public,void,set,uri,uri,uri,this,uri,uri,class,custom,parse,context,public,final,classic,parser,parser,custom,parse,context,classic,parser,parser,this,parser,parser,public,uri,parse,uri,xcontent,parser,parser,try,return,this,parser,parse,uri,parser,catch,ioexception,e,throw,new,unchecked,ioexception,e,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,url,host,http,foobar,port,80,name,foobarbaz,object,parser,foo,custom,parse,context,object,parser,new,object,parser,foo,object,parser,declare,string,foo,set,name,new,parse,field,name,object,parser,declare,object,or,default,foo,set,uri,p,s,s,parse,uri,p,null,new,parse,field,url,foo,s,object,parser,parse,parser,new,foo,new,custom,parse,context,new,classic,parser,assert,equals,s,uri,get,host,foobar,assert,equals,s,uri,get,port,80,assert,equals,s,name,foobarbaz
