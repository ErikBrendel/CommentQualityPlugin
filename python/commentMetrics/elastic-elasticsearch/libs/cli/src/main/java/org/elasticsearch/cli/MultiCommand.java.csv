commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;12;;@Override protected void printAdditionalHelp(Terminal terminal) {     if (subcommands.isEmpty()) {         throw new IllegalStateException("No subcommands configured").     }     terminal.println("Commands").     terminal.println("--------").     for (Map.Entry<String, Command> subcommand : subcommands.entrySet()) {         terminal.println(subcommand.getKey() + " - " + subcommand.getValue().description).     }     terminal.println(""). }
false;protected;2;15;;@Override protected void execute(Terminal terminal, OptionSet options) throws Exception {     if (subcommands.isEmpty()) {         throw new IllegalStateException("No subcommands configured").     }     String[] args = arguments.values(options).toArray(new String[0]).     if (args.length == 0) {         throw new UserException(ExitCodes.USAGE, "Missing command").     }     Command subcommand = subcommands.get(args[0]).     if (subcommand == null) {         throw new UserException(ExitCodes.USAGE, "Unknown command [" + args[0] + "]").     }     subcommand.mainWithoutErrorHandling(Arrays.copyOfRange(args, 1, args.length), terminal). }
false;public;0;4;;@Override public void close() throws IOException {     IOUtils.close(subcommands.values()). }
