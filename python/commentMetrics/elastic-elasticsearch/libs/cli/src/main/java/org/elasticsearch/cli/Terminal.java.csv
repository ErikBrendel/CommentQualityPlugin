commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Sets the verbosity of the terminal.  */ ;/**  * Sets the verbosity of the terminal.  */ public void setVerbosity(Verbosity verbosity) {     this.verbosity = verbosity. }
true;public,abstract;1;1;/**  * Reads clear text from the terminal input. See {@link Console#readLine()}.  */ ;/**  * Reads clear text from the terminal input. See {@link Console#readLine()}.  */ public abstract String readText(String prompt).
true;public,abstract;1;1;/**  * Reads password text from the terminal input. See {@link Console#readPassword()}}.  */ ;/**  * Reads password text from the terminal input. See {@link Console#readPassword()}}.  */ public abstract char[] readSecret(String prompt).
true;public,abstract;0;1;/**  * Returns a Writer which can be used to write to the terminal directly.  */ ;/**  * Returns a Writer which can be used to write to the terminal directly.  */ public abstract PrintWriter getWriter().
true;public,final;1;3;/**  * Prints a line to the terminal at {@link Verbosity#NORMAL} verbosity level.  */ ;/**  * Prints a line to the terminal at {@link Verbosity#NORMAL} verbosity level.  */ public final void println(String msg) {     println(Verbosity.NORMAL, msg). }
true;public,final;2;3;/**  * Prints a line to the terminal at {@code verbosity} level.  */ ;/**  * Prints a line to the terminal at {@code verbosity} level.  */ public final void println(Verbosity verbosity, String msg) {     print(verbosity, msg + lineSeparator). }
true;public,final;2;6;/**  * Prints message to the terminal at {@code verbosity} level, without a newline.  */ ;/**  * Prints message to the terminal at {@code verbosity} level, without a newline.  */ public final void print(Verbosity verbosity, String msg) {     if (isPrintable(verbosity)) {         getWriter().print(msg).         getWriter().flush().     } }
true;public,final;1;3;/**  * Checks if is enough {@code verbosity} level to be printed  */ ;/**  * Checks if is enough {@code verbosity} level to be printed  */ public final boolean isPrintable(Verbosity verbosity) {     return this.verbosity.ordinal() >= verbosity.ordinal(). }
true;public,final;2;16;/**  * Prompt for a yes or no answer from the user. This method will loop until 'y' or 'n'  * (or the default empty value) is entered.  */ ;/**  * Prompt for a yes or no answer from the user. This method will loop until 'y' or 'n'  * (or the default empty value) is entered.  */ public final boolean promptYesNo(String prompt, boolean defaultYes) {     String answerPrompt = defaultYes ? " [Y/n]" : " [y/N]".     while (true) {         String answer = readText(prompt + answerPrompt).         if (answer == null || answer.isEmpty()) {             return defaultYes.         }         answer = answer.toLowerCase(Locale.ROOT).         boolean answerYes = answer.equals("y").         if (answerYes == false && answer.equals("n") == false) {             println("Did not understand answer '" + answer + "'").             continue.         }         return answerYes.     } }
false;static;0;3;;static boolean isSupported() {     return CONSOLE != null. }
false;public;0;4;;@Override public PrintWriter getWriter() {     return CONSOLE.writer(). }
false;public;1;4;;@Override public String readText(String prompt) {     return CONSOLE.readLine("%s", prompt). }
false;public;1;4;;@Override public char[] readSecret(String prompt) {     return CONSOLE.readPassword("%s", prompt). }
false;private,static;0;4;;@SuppressForbidden(reason = "Writer for System.out") private static PrintWriter newWriter() {     return new PrintWriter(System.out). }
false;public;0;4;;@Override public PrintWriter getWriter() {     return WRITER. }
false;public;1;14;;@Override public String readText(String text) {     getWriter().print(text).     BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, Charset.defaultCharset())).     try {         final String line = reader.readLine().         if (line == null) {             throw new IllegalStateException("unable to read from standard input. is standard input open and a tty attached?").         }         return line.     } catch (IOException ioe) {         throw new RuntimeException(ioe).     } }
false;public;1;4;;@Override public char[] readSecret(String text) {     return readText(text).toCharArray(). }
