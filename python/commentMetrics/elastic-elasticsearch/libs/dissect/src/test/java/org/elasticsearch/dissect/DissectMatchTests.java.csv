commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testIllegalArgs() {     expectThrows(IllegalArgumentException.class, () -> new DissectMatch("", 0, 1, 0, 0)).     expectThrows(IllegalArgumentException.class, () -> new DissectMatch("", 1, 0, 0, 0)). }
false;public;0;8;;public void testValidAndFullyMatched() {     int expectedMatches = randomIntBetween(1, 26).     DissectMatch dissectMatch = new DissectMatch("", expectedMatches, expectedMatches, 0, 0).     // allow for a-z values     IntStream.range(97, 97 + expectedMatches).forEach(i -> dissectMatch.add(new DissectKey(new String(new byte[] { (byte) i }, StandardCharsets.UTF_8)), "")).     assertThat(dissectMatch.fullyMatched(), equalTo(true)).     assertThat(dissectMatch.isValid(dissectMatch.getResults()), equalTo(true)). }
false;public;0;8;;public void testNotValidAndFullyMatched() {     int expectedMatches = randomIntBetween(1, 26).     DissectMatch dissectMatch = new DissectMatch("", expectedMatches, expectedMatches, 0, 0).     // allow for a-z values     IntStream.range(97, 97 + expectedMatches - 1).forEach(i -> dissectMatch.add(new DissectKey(new String(new byte[] { (byte) i }, StandardCharsets.UTF_8)), "")).     assertThat(dissectMatch.fullyMatched(), equalTo(false)).     assertThat(dissectMatch.isValid(dissectMatch.getResults()), equalTo(false)). }
false;public;0;7;;public void testGetResultsIdempotent() {     int expectedMatches = randomIntBetween(1, 26).     DissectMatch dissectMatch = new DissectMatch("", expectedMatches, expectedMatches, 0, 0).     // allow for a-z values     IntStream.range(97, 97 + expectedMatches).forEach(i -> dissectMatch.add(new DissectKey(new String(new byte[] { (byte) i }, StandardCharsets.UTF_8)), "")).     assertThat(dissectMatch.getResults(), equalTo(dissectMatch.getResults())). }
false;public;0;9;;public void testAppend() {     DissectMatch dissectMatch = new DissectMatch("-", 3, 1, 3, 0).     dissectMatch.add(new DissectKey("+a"), "x").     dissectMatch.add(new DissectKey("+a"), "y").     dissectMatch.add(new DissectKey("+a"), "z").     Map<String, String> results = dissectMatch.getResults().     assertThat(dissectMatch.isValid(results), equalTo(true)).     assertThat(results, equalTo(MapBuilder.newMapBuilder().put("a", "x-y-z").map())). }
false;public;0;9;;public void testAppendWithOrder() {     DissectMatch dissectMatch = new DissectMatch("-", 3, 1, 3, 0).     dissectMatch.add(new DissectKey("+a/3"), "x").     dissectMatch.add(new DissectKey("+a"), "y").     dissectMatch.add(new DissectKey("+a/1"), "z").     Map<String, String> results = dissectMatch.getResults().     assertThat(dissectMatch.isValid(results), equalTo(true)).     assertThat(results, equalTo(MapBuilder.newMapBuilder().put("a", "y-z-x").map())). }
false;public;0;8;;public void testReference() {     DissectMatch dissectMatch = new DissectMatch("-", 2, 1, 0, 1).     dissectMatch.add(new DissectKey("&a"), "x").     dissectMatch.add(new DissectKey("*a"), "y").     Map<String, String> results = dissectMatch.getResults().     assertThat(dissectMatch.isValid(results), equalTo(true)).     assertThat(results, equalTo(MapBuilder.newMapBuilder().put("y", "x").map())). }
