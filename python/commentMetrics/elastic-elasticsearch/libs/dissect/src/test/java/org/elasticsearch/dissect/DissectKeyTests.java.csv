commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testNoModifier() {     String keyName = randomAlphaOfLengthBetween(1, 10).     DissectKey dissectKey = new DissectKey(keyName).     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.NONE)).     assertThat(dissectKey.skip(), is(false)).     assertThat(dissectKey.skipRightPadding(), is(false)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;9;;public void testAppendModifier() {     String keyName = randomAlphaOfLengthBetween(1, 10).     DissectKey dissectKey = new DissectKey("+" + keyName).     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.APPEND)).     assertThat(dissectKey.skip(), is(false)).     assertThat(dissectKey.skipRightPadding(), is(false)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;10;;public void testAppendWithOrderModifier() {     String keyName = randomAlphaOfLengthBetween(1, 10).     int length = randomIntBetween(1, 100).     DissectKey dissectKey = new DissectKey("+" + keyName + "/" + length).     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.APPEND_WITH_ORDER)).     assertThat(dissectKey.skip(), is(false)).     assertThat(dissectKey.skipRightPadding(), is(false)).     assertThat(dissectKey.getAppendPosition(), equalTo(length)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;5;;public void testAppendWithOrderModifierNoName() {     int length = randomIntBetween(1, 100).     DissectException e = expectThrows(DissectException.class, () -> new DissectKey("+/" + length)).     assertThat(e.getMessage(), CoreMatchers.containsString("Unable to parse key")). }
false;public;0;6;;public void testOrderModifierWithoutAppend() {     String keyName = randomAlphaOfLengthBetween(1, 10).     int length = randomIntBetween(1, 100).     DissectException e = expectThrows(DissectException.class, () -> new DissectKey(keyName + "/" + length)).     assertThat(e.getMessage(), CoreMatchers.containsString("Unable to parse key")). }
false;public;0;9;;public void testFieldNameModifier() {     String keyName = randomAlphaOfLengthBetween(1, 10).     DissectKey dissectKey = new DissectKey("*" + keyName).     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.FIELD_NAME)).     assertThat(dissectKey.skip(), is(false)).     assertThat(dissectKey.skipRightPadding(), is(false)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;9;;public void testFieldValueModifiers() {     String keyName = randomAlphaOfLengthBetween(1, 10).     DissectKey dissectKey = new DissectKey("&" + keyName).     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.FIELD_VALUE)).     assertThat(dissectKey.skip(), is(false)).     assertThat(dissectKey.skipRightPadding(), is(false)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;24;;public void testRightPaddingModifiers() {     String keyName = randomAlphaOfLengthBetween(1, 10).     DissectKey dissectKey = new DissectKey(keyName + "->").     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.NONE)).     assertThat(dissectKey.skip(), is(false)).     assertThat(dissectKey.skipRightPadding(), is(true)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)).     dissectKey = new DissectKey("*" + keyName + "->").     assertThat(dissectKey.skipRightPadding(), is(true)).     dissectKey = new DissectKey("&" + keyName + "->").     assertThat(dissectKey.skipRightPadding(), is(true)).     dissectKey = new DissectKey("+" + keyName + "->").     assertThat(dissectKey.skipRightPadding(), is(true)).     dissectKey = new DissectKey("?" + keyName + "->").     assertThat(dissectKey.skipRightPadding(), is(true)).     dissectKey = new DissectKey("+" + keyName + "/2->").     assertThat(dissectKey.skipRightPadding(), is(true)). }
false;public;0;11;;public void testMultipleLeftModifiers() {     String keyName = randomAlphaOfLengthBetween(1, 10).     List<String> validModifiers = EnumSet.allOf(DissectKey.Modifier.class).stream().filter(m -> !m.equals(DissectKey.Modifier.NONE)).map(DissectKey.Modifier::toString).collect(Collectors.toList()).     String modifier1 = randomFrom(validModifiers).     String modifier2 = randomFrom(validModifiers).     DissectException e = expectThrows(DissectException.class, () -> new DissectKey(modifier1 + modifier2 + keyName)).     assertThat(e.getMessage(), CoreMatchers.containsString("Unable to parse key")). }
false;public;0;9;;public void testSkipKey() {     String keyName = "".     DissectKey dissectKey = new DissectKey(keyName).     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.NONE)).     assertThat(dissectKey.skip(), is(true)).     assertThat(dissectKey.skipRightPadding(), is(false)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;9;;public void testNamedSkipKey() {     String keyName = "myname".     DissectKey dissectKey = new DissectKey("?" + keyName).     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.NAMED_SKIP)).     assertThat(dissectKey.skip(), is(true)).     assertThat(dissectKey.skipRightPadding(), is(false)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;9;;public void testSkipKeyWithPadding() {     String keyName = "".     DissectKey dissectKey = new DissectKey(keyName + "->").     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.NONE)).     assertThat(dissectKey.skip(), is(true)).     assertThat(dissectKey.skipRightPadding(), is(true)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;9;;public void testNamedEmptySkipKeyWithPadding() {     String keyName = "".     DissectKey dissectKey = new DissectKey("?" + keyName + "->").     assertThat(dissectKey.getModifier(), equalTo(DissectKey.Modifier.NAMED_SKIP)).     assertThat(dissectKey.skip(), is(true)).     assertThat(dissectKey.skipRightPadding(), is(true)).     assertThat(dissectKey.getAppendPosition(), equalTo(0)).     assertThat(dissectKey.getName(), equalTo(keyName)). }
false;public;0;5;;public void testInvalidModifiers() {     // should never happen due to regex     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> DissectKey.Modifier.fromString("x")).     assertThat(e.getMessage(), CoreMatchers.containsString("invalid modifier")). }
