# id;timestamp;commentText;codeText;commentWords;codeWords
DissectParserTests -> public void testLogstashSpecs();1534338685;Borrowed from Logstash's test cases:_https://github.com/logstash-plugins/logstash-filter-dissect/blob/master/src/test/java/org/logstash/dissect/DissectorTest.java_Append Note - Logstash appends with the delimiter as the separator between values, this uses a user defined separator;public void testLogstashSpecs() {_        assertMatch("%{a} %{b->} %{c}", "foo bar   baz", Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMiss("%{a}%{b} %{c}", null)__        assertMiss("%{a} %{b}%{c} %{d}", "foo bar baz")__        assertMiss("%{a} %{b} %{c}%{d}", "foo bar baz quux")__        assertMatch("%{a} %{b->} %{c}", "foo bar   baz", Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMatch("%{a} %{} %{c}", "foo bar baz", Arrays.asList("a", "c"), Arrays.asList("foo", "baz"))__        assertMatch("%{a} %{b} %{+b} %{z}", "foo bar baz quux", Arrays.asList("a", "b", "z"), Arrays.asList("foo", "bar baz", "quux"), " ")__        assertMatch("%{a}------->%{b}", "foo------->bar baz quux", Arrays.asList("a", "b"), Arrays.asList("foo", "bar baz quux"))__        assertMatch("%{a}------->%{}", "foo------->bar baz quux", Arrays.asList("a"), Arrays.asList("foo"))__        assertMatch("%{a} » %{b}»%{c}€%{d}", "foo » bar»baz€quux",_            Arrays.asList("a", "b", "c", "d"), Arrays.asList("foo", "bar", "baz", "quux"))__        assertMatch("%{a} %{b} %{+a}", "foo bar baz quux", Arrays.asList("a", "b"), Arrays.asList("foo baz quux", "bar"), " ")__        _        _        _        assertMatch("%{+a} %{a} %{+a} %{b}", "December 31 1999 quux",_            Arrays.asList("a", "b"), Arrays.asList("December 31 1999", "quux"), " ")__        _        assertMatch("%{+a/1} %{a} %{+a/2} %{b}", "December 31 1999 quux",_            Arrays.asList("a", "b"), Arrays.asList("31 December 1999", "quux"), " ")__        assertMatch("%{+a/2} %{+a/4} %{+a/1} %{+a/3}", "bar quux foo baz", Arrays.asList("a"), Arrays.asList("foo bar baz quux"), " ")__        assertMatch("%{+a} %{b}", "foo bar", Arrays.asList("a", "b"), Arrays.asList("foo", "bar"))__        assertMatch("%{+a} %{b} %{+a} %{c}", "foo bar baz quux",_            Arrays.asList("a", "b", "c"), Arrays.asList("foo baz", "bar", "quux"), " ")__        assertMatch("%{} %{syslog_timestamp} %{hostname} %{rt}: %{reason} %{+reason} %{src_ip}/%{src_port}->%{dst_ip}/%{dst_port} " +_                "%{polrt} %{+polrt} %{+polrt} %{from_zone} %{to_zone} %{rest}",_            "42 2016-05-25T14:47:23Z host.name.com RT_FLOW - RT_FLOW_SESSION_DENY: session denied 2.2.2.20/60000->1.1.1.10/8090 None " +_                "6(0) DEFAULT-DENY ZONE-UNTRUST ZONE-DMZ UNKNOWN UNKNOWN N/A(N/A) ge-0/0/0.0",_            Arrays.asList("syslog_timestamp", "hostname", "rt", "reason", "src_ip", "src_port", "dst_ip", "dst_port", "polrt"_                , "from_zone", "to_zone", "rest"),_            Arrays.asList("2016-05-25T14:47:23Z", "host.name.com", "RT_FLOW - RT_FLOW_SESSION_DENY", "session denied", "2.2.2.20", "60000"_                , "1.1.1.10", "8090", "None 6(0) DEFAULT-DENY", "ZONE-UNTRUST", "ZONE-DMZ", "UNKNOWN UNKNOWN N/A(N/A) ge-0/0/0.0"), " ")__        assertBadKey("%{+/2}")__        assertBadKey("%{&+a_field}")__        assertMatch("%{a->}   %{b->}---%{c}", "foo            bar------------baz",_            Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMatch("%{->}-%{a}", "-----666", Arrays.asList("a"), Arrays.asList("666"))__        assertMatch("%{?skipme->}-%{a}", "-----666", Arrays.asList("a"), Arrays.asList("666"))__        assertMatch("%{a},%{b},%{c},%{d},%{e},%{f}", "111,,333,,555,666",_            Arrays.asList("a", "b", "c", "d", "e", "f"), Arrays.asList("111", "", "333", "", "555", "666"))__        assertMatch("%{a}.࿏.%{b}", "⟳༒.࿏.༒⟲", Arrays.asList("a", "b"), Arrays.asList("⟳༒", "༒⟲"))__        assertMatch("%{a}", "子", Arrays.asList("a"), Arrays.asList("子"))__        assertMatch("%{a}{\n}%{b}", "aaa{\n}bbb", Arrays.asList("a", "b"), Arrays.asList("aaa", "bbb"))__        assertMiss("MACHINE[%{a}] %{b}", "1234567890 MACHINE[foo] bar")__        assertMiss("%{a} %{b} %{c}", "foo:bar:baz")__        assertMatch("/var/%{key1}/log/%{key2}.log", "/var/foo/log/bar.log", Arrays.asList("key1", "key2"), Arrays.asList("foo", "bar"))__        assertMatch("%{a->}   %{b}-.-%{c}-%{d}-..-%{e}-%{f}-%{g}-%{h}", "foo            bar-.-baz-1111-..-22-333-4444-55555",_            Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h"),_            Arrays.asList("foo", "bar", "baz", "1111", "22", "333", "4444", "55555"))__    };borrowed,from,logstash,s,test,cases,https,github,com,logstash,plugins,logstash,filter,dissect,blob,master,src,test,java,org,logstash,dissect,dissector,test,java,append,note,logstash,appends,with,the,delimiter,as,the,separator,between,values,this,uses,a,user,defined,separator;public,void,test,logstash,specs,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,miss,a,b,c,null,assert,miss,a,b,c,d,foo,bar,baz,assert,miss,a,b,c,d,foo,bar,baz,quux,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,match,a,c,foo,bar,baz,arrays,as,list,a,c,arrays,as,list,foo,baz,assert,match,a,b,b,z,foo,bar,baz,quux,arrays,as,list,a,b,z,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,foo,bar,baz,quux,arrays,as,list,a,b,arrays,as,list,foo,bar,baz,quux,assert,match,a,foo,bar,baz,quux,arrays,as,list,a,arrays,as,list,foo,assert,match,a,b,c,d,foo,bar,baz,quux,arrays,as,list,a,b,c,d,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,a,foo,bar,baz,quux,arrays,as,list,a,b,arrays,as,list,foo,baz,quux,bar,assert,match,a,a,a,b,december,31,1999,quux,arrays,as,list,a,b,arrays,as,list,december,31,1999,quux,assert,match,a,1,a,a,2,b,december,31,1999,quux,arrays,as,list,a,b,arrays,as,list,31,december,1999,quux,assert,match,a,2,a,4,a,1,a,3,bar,quux,foo,baz,arrays,as,list,a,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,foo,bar,arrays,as,list,a,b,arrays,as,list,foo,bar,assert,match,a,b,a,c,foo,bar,baz,quux,arrays,as,list,a,b,c,arrays,as,list,foo,baz,bar,quux,assert,match,hostname,rt,reason,reason,polrt,polrt,polrt,rest,42,2016,05,25t14,47,23z,host,name,com,session,denied,2,2,2,20,60000,1,1,1,10,8090,none,6,0,default,deny,zone,untrust,zone,dmz,unknown,unknown,n,a,n,a,ge,0,0,0,0,arrays,as,list,hostname,rt,reason,polrt,rest,arrays,as,list,2016,05,25t14,47,23z,host,name,com,session,denied,2,2,2,20,60000,1,1,1,10,8090,none,6,0,default,deny,zone,untrust,zone,dmz,unknown,unknown,n,a,n,a,ge,0,0,0,0,assert,bad,key,2,assert,bad,key,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,match,a,666,arrays,as,list,a,arrays,as,list,666,assert,match,skipme,a,666,arrays,as,list,a,arrays,as,list,666,assert,match,a,b,c,d,e,f,111,333,555,666,arrays,as,list,a,b,c,d,e,f,arrays,as,list,111,333,555,666,assert,match,a,b,arrays,as,list,a,b,arrays,as,list,assert,match,a,arrays,as,list,a,arrays,as,list,assert,match,a,n,b,aaa,n,bbb,arrays,as,list,a,b,arrays,as,list,aaa,bbb,assert,miss,machine,a,b,1234567890,machine,foo,bar,assert,miss,a,b,c,foo,bar,baz,assert,match,var,key1,log,key2,log,var,foo,log,bar,log,arrays,as,list,key1,key2,arrays,as,list,foo,bar,assert,match,a,b,c,d,e,f,g,h,foo,bar,baz,1111,22,333,4444,55555,arrays,as,list,a,b,c,d,e,f,g,h,arrays,as,list,foo,bar,baz,1111,22,333,4444,55555
DissectParserTests -> public void testLogstashSpecs();1550763001;Borrowed from Logstash's test cases:_https://github.com/logstash-plugins/logstash-filter-dissect/blob/master/src/test/java/org/logstash/dissect/DissectorTest.java_Append Note - Logstash appends with the delimiter as the separator between values, this uses a user defined separator;public void testLogstashSpecs() {_        assertMatch("%{a} %{b->} %{c}", "foo bar   baz", Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMiss("%{a}%{b} %{c}", null)__        assertMiss("%{a} %{b}%{c} %{d}", "foo bar baz")__        assertMiss("%{a} %{b} %{c}%{d}", "foo bar baz quux")__        assertMatch("%{a} %{b->} %{c}", "foo bar   baz", Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMatch("%{a} %{} %{c}", "foo bar baz", Arrays.asList("a", "c"), Arrays.asList("foo", "baz"))__        assertMatch("%{a} %{b} %{+b} %{z}", "foo bar baz quux", Arrays.asList("a", "b", "z"), Arrays.asList("foo", "bar baz", "quux"), " ")__        assertMatch("%{a}------->%{b}", "foo------->bar baz quux", Arrays.asList("a", "b"), Arrays.asList("foo", "bar baz quux"))__        assertMatch("%{a}------->%{}", "foo------->bar baz quux", Arrays.asList("a"), Arrays.asList("foo"))__        assertMatch("%{a} » %{b}»%{c}€%{d}", "foo » bar»baz€quux",_            Arrays.asList("a", "b", "c", "d"), Arrays.asList("foo", "bar", "baz", "quux"))__        assertMatch("%{a} %{b} %{+a}", "foo bar baz quux", Arrays.asList("a", "b"), Arrays.asList("foo baz quux", "bar"), " ")__        _        _        _        assertMatch("%{+a} %{a} %{+a} %{b}", "December 31 1999 quux",_            Arrays.asList("a", "b"), Arrays.asList("December 31 1999", "quux"), " ")__        _        assertMatch("%{+a/1} %{a} %{+a/2} %{b}", "December 31 1999 quux",_            Arrays.asList("a", "b"), Arrays.asList("31 December 1999", "quux"), " ")__        assertMatch("%{+a/2} %{+a/4} %{+a/1} %{+a/3}", "bar quux foo baz", Arrays.asList("a"), Arrays.asList("foo bar baz quux"), " ")__        assertMatch("%{+a} %{b}", "foo bar", Arrays.asList("a", "b"), Arrays.asList("foo", "bar"))__        assertMatch("%{+a} %{b} %{+a} %{c}", "foo bar baz quux",_            Arrays.asList("a", "b", "c"), Arrays.asList("foo baz", "bar", "quux"), " ")__        assertMatch("%{} %{syslog_timestamp} %{hostname} %{rt}: %{reason} %{+reason} %{src_ip}/%{src_port}->%{dst_ip}/%{dst_port} " +_                "%{polrt} %{+polrt} %{+polrt} %{from_zone} %{to_zone} %{rest}",_            "42 2016-05-25T14:47:23Z host.name.com RT_FLOW - RT_FLOW_SESSION_DENY: session denied 2.2.2.20/60000->1.1.1.10/8090 None " +_                "6(0) DEFAULT-DENY ZONE-UNTRUST ZONE-DMZ UNKNOWN UNKNOWN N/A(N/A) ge-0/0/0.0",_            Arrays.asList("syslog_timestamp", "hostname", "rt", "reason", "src_ip", "src_port", "dst_ip", "dst_port", "polrt"_                , "from_zone", "to_zone", "rest"),_            Arrays.asList("2016-05-25T14:47:23Z", "host.name.com", "RT_FLOW - RT_FLOW_SESSION_DENY", "session denied", "2.2.2.20", "60000"_                , "1.1.1.10", "8090", "None 6(0) DEFAULT-DENY", "ZONE-UNTRUST", "ZONE-DMZ", "UNKNOWN UNKNOWN N/A(N/A) ge-0/0/0.0"), " ")__        assertBadKey("%{+/2}")__        assertBadKey("%{&+a_field}")__        assertMatch("%{a->}   %{b->}---%{c}", "foo            bar------------baz",_            Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMatch("%{->}-%{a}", "-----666", Arrays.asList("a"), Arrays.asList("666"))__        assertMatch("%{?skipme->}-%{a}", "-----666", Arrays.asList("a"), Arrays.asList("666"))__        assertMatch("%{a},%{b},%{c},%{d},%{e},%{f}", "111,,333,,555,666",_            Arrays.asList("a", "b", "c", "d", "e", "f"), Arrays.asList("111", "", "333", "", "555", "666"))__        assertMatch("%{a}.࿏.%{b}", "⟳༒.࿏.༒⟲", Arrays.asList("a", "b"), Arrays.asList("⟳༒", "༒⟲"))__        assertMatch("%{a}", "子", Arrays.asList("a"), Arrays.asList("子"))__        assertMatch("%{a}{\n}%{b}", "aaa{\n}bbb", Arrays.asList("a", "b"), Arrays.asList("aaa", "bbb"))__        assertMiss("MACHINE[%{a}] %{b}", "1234567890 MACHINE[foo] bar")__        assertMiss("%{a} %{b} %{c}", "foo:bar:baz")__        assertMatch("/var/%{key1}/log/%{key2}.log", "/var/foo/log/bar.log", Arrays.asList("key1", "key2"), Arrays.asList("foo", "bar"))__        assertMatch("%{a->}   %{b}-.-%{c}-%{d}-..-%{e}-%{f}-%{g}-%{h}", "foo            bar-.-baz-1111-..-22-333-4444-55555",_            Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h"),_            Arrays.asList("foo", "bar", "baz", "1111", "22", "333", "4444", "55555"))__    };borrowed,from,logstash,s,test,cases,https,github,com,logstash,plugins,logstash,filter,dissect,blob,master,src,test,java,org,logstash,dissect,dissector,test,java,append,note,logstash,appends,with,the,delimiter,as,the,separator,between,values,this,uses,a,user,defined,separator;public,void,test,logstash,specs,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,miss,a,b,c,null,assert,miss,a,b,c,d,foo,bar,baz,assert,miss,a,b,c,d,foo,bar,baz,quux,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,match,a,c,foo,bar,baz,arrays,as,list,a,c,arrays,as,list,foo,baz,assert,match,a,b,b,z,foo,bar,baz,quux,arrays,as,list,a,b,z,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,foo,bar,baz,quux,arrays,as,list,a,b,arrays,as,list,foo,bar,baz,quux,assert,match,a,foo,bar,baz,quux,arrays,as,list,a,arrays,as,list,foo,assert,match,a,b,c,d,foo,bar,baz,quux,arrays,as,list,a,b,c,d,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,a,foo,bar,baz,quux,arrays,as,list,a,b,arrays,as,list,foo,baz,quux,bar,assert,match,a,a,a,b,december,31,1999,quux,arrays,as,list,a,b,arrays,as,list,december,31,1999,quux,assert,match,a,1,a,a,2,b,december,31,1999,quux,arrays,as,list,a,b,arrays,as,list,31,december,1999,quux,assert,match,a,2,a,4,a,1,a,3,bar,quux,foo,baz,arrays,as,list,a,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,foo,bar,arrays,as,list,a,b,arrays,as,list,foo,bar,assert,match,a,b,a,c,foo,bar,baz,quux,arrays,as,list,a,b,c,arrays,as,list,foo,baz,bar,quux,assert,match,hostname,rt,reason,reason,polrt,polrt,polrt,rest,42,2016,05,25t14,47,23z,host,name,com,session,denied,2,2,2,20,60000,1,1,1,10,8090,none,6,0,default,deny,zone,untrust,zone,dmz,unknown,unknown,n,a,n,a,ge,0,0,0,0,arrays,as,list,hostname,rt,reason,polrt,rest,arrays,as,list,2016,05,25t14,47,23z,host,name,com,session,denied,2,2,2,20,60000,1,1,1,10,8090,none,6,0,default,deny,zone,untrust,zone,dmz,unknown,unknown,n,a,n,a,ge,0,0,0,0,assert,bad,key,2,assert,bad,key,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,match,a,666,arrays,as,list,a,arrays,as,list,666,assert,match,skipme,a,666,arrays,as,list,a,arrays,as,list,666,assert,match,a,b,c,d,e,f,111,333,555,666,arrays,as,list,a,b,c,d,e,f,arrays,as,list,111,333,555,666,assert,match,a,b,arrays,as,list,a,b,arrays,as,list,assert,match,a,arrays,as,list,a,arrays,as,list,assert,match,a,n,b,aaa,n,bbb,arrays,as,list,a,b,arrays,as,list,aaa,bbb,assert,miss,machine,a,b,1234567890,machine,foo,bar,assert,miss,a,b,c,foo,bar,baz,assert,match,var,key1,log,key2,log,var,foo,log,bar,log,arrays,as,list,key1,key2,arrays,as,list,foo,bar,assert,match,a,b,c,d,e,f,g,h,foo,bar,baz,1111,22,333,4444,55555,arrays,as,list,a,b,c,d,e,f,g,h,arrays,as,list,foo,bar,baz,1111,22,333,4444,55555
DissectParserTests -> public void testLogstashSpecs();1550843829;Borrowed from Logstash's test cases:_https://github.com/logstash-plugins/logstash-filter-dissect/blob/master/src/test/java/org/logstash/dissect/DissectorTest.java_Append Note - Logstash appends with the delimiter as the separator between values, this uses a user defined separator;public void testLogstashSpecs() {_        assertMatch("%{a} %{b->} %{c}", "foo bar   baz", Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMiss("%{a}%{b} %{c}", null)__        assertMiss("%{a} %{b}%{c} %{d}", "foo bar baz")__        assertMiss("%{a} %{b} %{c}%{d}", "foo bar baz quux")__        assertMatch("%{a} %{b->} %{c}", "foo bar   baz", Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMatch("%{a} %{} %{c}", "foo bar baz", Arrays.asList("a", "c"), Arrays.asList("foo", "baz"))__        assertMatch("%{a} %{b} %{+b} %{z}", "foo bar baz quux", Arrays.asList("a", "b", "z"), Arrays.asList("foo", "bar baz", "quux"), " ")__        assertMatch("%{a}------->%{b}", "foo------->bar baz quux", Arrays.asList("a", "b"), Arrays.asList("foo", "bar baz quux"))__        assertMatch("%{a}------->%{}", "foo------->bar baz quux", Arrays.asList("a"), Arrays.asList("foo"))__        assertMatch("%{a} » %{b}»%{c}€%{d}", "foo » bar»baz€quux",_            Arrays.asList("a", "b", "c", "d"), Arrays.asList("foo", "bar", "baz", "quux"))__        assertMatch("%{a} %{b} %{+a}", "foo bar baz quux", Arrays.asList("a", "b"), Arrays.asList("foo baz quux", "bar"), " ")__        _        _        _        assertMatch("%{+a} %{a} %{+a} %{b}", "December 31 1999 quux",_            Arrays.asList("a", "b"), Arrays.asList("December 31 1999", "quux"), " ")__        _        assertMatch("%{+a/1} %{a} %{+a/2} %{b}", "December 31 1999 quux",_            Arrays.asList("a", "b"), Arrays.asList("31 December 1999", "quux"), " ")__        assertMatch("%{+a/2} %{+a/4} %{+a/1} %{+a/3}", "bar quux foo baz", Arrays.asList("a"), Arrays.asList("foo bar baz quux"), " ")__        assertMatch("%{+a} %{b}", "foo bar", Arrays.asList("a", "b"), Arrays.asList("foo", "bar"))__        assertMatch("%{+a} %{b} %{+a} %{c}", "foo bar baz quux",_            Arrays.asList("a", "b", "c"), Arrays.asList("foo baz", "bar", "quux"), " ")__        assertMatch("%{} %{syslog_timestamp} %{hostname} %{rt}: %{reason} %{+reason} %{src_ip}/%{src_port}->%{dst_ip}/%{dst_port} " +_                "%{polrt} %{+polrt} %{+polrt} %{from_zone} %{to_zone} %{rest}",_            "42 2016-05-25T14:47:23Z host.name.com RT_FLOW - RT_FLOW_SESSION_DENY: session denied 2.2.2.20/60000->1.1.1.10/8090 None " +_                "6(0) DEFAULT-DENY ZONE-UNTRUST ZONE-DMZ UNKNOWN UNKNOWN N/A(N/A) ge-0/0/0.0",_            Arrays.asList("syslog_timestamp", "hostname", "rt", "reason", "src_ip", "src_port", "dst_ip", "dst_port", "polrt"_                , "from_zone", "to_zone", "rest"),_            Arrays.asList("2016-05-25T14:47:23Z", "host.name.com", "RT_FLOW - RT_FLOW_SESSION_DENY", "session denied", "2.2.2.20", "60000"_                , "1.1.1.10", "8090", "None 6(0) DEFAULT-DENY", "ZONE-UNTRUST", "ZONE-DMZ", "UNKNOWN UNKNOWN N/A(N/A) ge-0/0/0.0"), " ")__        assertBadKey("%{+/2}")__        assertBadKey("%{&+a_field}")__        assertMatch("%{a->}   %{b->}---%{c}", "foo            bar------------baz",_            Arrays.asList("a", "b", "c"), Arrays.asList("foo", "bar", "baz"))__        assertMatch("%{->}-%{a}", "-----666", Arrays.asList("a"), Arrays.asList("666"))__        assertMatch("%{?skipme->}-%{a}", "-----666", Arrays.asList("a"), Arrays.asList("666"))__        assertMatch("%{a},%{b},%{c},%{d},%{e},%{f}", "111,,333,,555,666",_            Arrays.asList("a", "b", "c", "d", "e", "f"), Arrays.asList("111", "", "333", "", "555", "666"))__        assertMatch("%{a}.࿏.%{b}", "⟳༒.࿏.༒⟲", Arrays.asList("a", "b"), Arrays.asList("⟳༒", "༒⟲"))__        assertMatch("%{a}", "子", Arrays.asList("a"), Arrays.asList("子"))__        assertMatch("%{a}{\n}%{b}", "aaa{\n}bbb", Arrays.asList("a", "b"), Arrays.asList("aaa", "bbb"))__        assertMiss("MACHINE[%{a}] %{b}", "1234567890 MACHINE[foo] bar")__        assertMiss("%{a} %{b} %{c}", "foo:bar:baz")__        assertMatch("/var/%{key1}/log/%{key2}.log", "/var/foo/log/bar.log", Arrays.asList("key1", "key2"), Arrays.asList("foo", "bar"))__        assertMatch("%{a->}   %{b}-.-%{c}-%{d}-..-%{e}-%{f}-%{g}-%{h}", "foo            bar-.-baz-1111-..-22-333-4444-55555",_            Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h"),_            Arrays.asList("foo", "bar", "baz", "1111", "22", "333", "4444", "55555"))__    };borrowed,from,logstash,s,test,cases,https,github,com,logstash,plugins,logstash,filter,dissect,blob,master,src,test,java,org,logstash,dissect,dissector,test,java,append,note,logstash,appends,with,the,delimiter,as,the,separator,between,values,this,uses,a,user,defined,separator;public,void,test,logstash,specs,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,miss,a,b,c,null,assert,miss,a,b,c,d,foo,bar,baz,assert,miss,a,b,c,d,foo,bar,baz,quux,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,match,a,c,foo,bar,baz,arrays,as,list,a,c,arrays,as,list,foo,baz,assert,match,a,b,b,z,foo,bar,baz,quux,arrays,as,list,a,b,z,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,foo,bar,baz,quux,arrays,as,list,a,b,arrays,as,list,foo,bar,baz,quux,assert,match,a,foo,bar,baz,quux,arrays,as,list,a,arrays,as,list,foo,assert,match,a,b,c,d,foo,bar,baz,quux,arrays,as,list,a,b,c,d,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,a,foo,bar,baz,quux,arrays,as,list,a,b,arrays,as,list,foo,baz,quux,bar,assert,match,a,a,a,b,december,31,1999,quux,arrays,as,list,a,b,arrays,as,list,december,31,1999,quux,assert,match,a,1,a,a,2,b,december,31,1999,quux,arrays,as,list,a,b,arrays,as,list,31,december,1999,quux,assert,match,a,2,a,4,a,1,a,3,bar,quux,foo,baz,arrays,as,list,a,arrays,as,list,foo,bar,baz,quux,assert,match,a,b,foo,bar,arrays,as,list,a,b,arrays,as,list,foo,bar,assert,match,a,b,a,c,foo,bar,baz,quux,arrays,as,list,a,b,c,arrays,as,list,foo,baz,bar,quux,assert,match,hostname,rt,reason,reason,polrt,polrt,polrt,rest,42,2016,05,25t14,47,23z,host,name,com,session,denied,2,2,2,20,60000,1,1,1,10,8090,none,6,0,default,deny,zone,untrust,zone,dmz,unknown,unknown,n,a,n,a,ge,0,0,0,0,arrays,as,list,hostname,rt,reason,polrt,rest,arrays,as,list,2016,05,25t14,47,23z,host,name,com,session,denied,2,2,2,20,60000,1,1,1,10,8090,none,6,0,default,deny,zone,untrust,zone,dmz,unknown,unknown,n,a,n,a,ge,0,0,0,0,assert,bad,key,2,assert,bad,key,assert,match,a,b,c,foo,bar,baz,arrays,as,list,a,b,c,arrays,as,list,foo,bar,baz,assert,match,a,666,arrays,as,list,a,arrays,as,list,666,assert,match,skipme,a,666,arrays,as,list,a,arrays,as,list,666,assert,match,a,b,c,d,e,f,111,333,555,666,arrays,as,list,a,b,c,d,e,f,arrays,as,list,111,333,555,666,assert,match,a,b,arrays,as,list,a,b,arrays,as,list,assert,match,a,arrays,as,list,a,arrays,as,list,assert,match,a,n,b,aaa,n,bbb,arrays,as,list,a,b,arrays,as,list,aaa,bbb,assert,miss,machine,a,b,1234567890,machine,foo,bar,assert,miss,a,b,c,foo,bar,baz,assert,match,var,key1,log,key2,log,var,foo,log,bar,log,arrays,as,list,key1,key2,arrays,as,list,foo,bar,assert,match,a,b,c,d,e,f,g,h,foo,bar,baz,1111,22,333,4444,55555,arrays,as,list,a,b,c,d,e,f,g,h,arrays,as,list,foo,bar,baz,1111,22,333,4444,55555
DissectParserTests -> public void testMiss();1534338685;Runtime errors;public void testMiss() {_        assertMiss("%{a}%{b}", "foo")__        assertMiss("%{a},%{b}", "foo bar")__        assertMiss("%{a}, %{b}", "foo,bar")__        assertMiss("x%{a},%{b}", "foo,bar")__        assertMiss("x%{},%{b}", "foo,bar")__        assertMiss("leading_delimiter_long%{a}", "foo")__        assertMiss("%{a}trailing_delimiter_long", "foo")__        assertMiss("leading_delimiter_long%{a}trailing_delimiter_long", "foo")__        assertMiss("%{a}x", "foo")__        assertMiss("%{a},%{b}x", "foo,bar")__    };runtime,errors;public,void,test,miss,assert,miss,a,b,foo,assert,miss,a,b,foo,bar,assert,miss,a,b,foo,bar,assert,miss,x,a,b,foo,bar,assert,miss,x,b,foo,bar,assert,miss,a,foo,assert,miss,a,foo,assert,miss,a,foo,assert,miss,a,x,foo,assert,miss,a,b,x,foo,bar
DissectParserTests -> public void testMiss();1550763001;Runtime errors;public void testMiss() {_        assertMiss("%{a}%{b}", "foo")__        assertMiss("%{a},%{b}", "foo bar")__        assertMiss("%{a}, %{b}", "foo,bar")__        assertMiss("x%{a},%{b}", "foo,bar")__        assertMiss("x%{},%{b}", "foo,bar")__        assertMiss("leading_delimiter_long%{a}", "foo")__        assertMiss("%{a}trailing_delimiter_long", "foo")__        assertMiss("leading_delimiter_long%{a}trailing_delimiter_long", "foo")__        assertMiss("%{a}x", "foo")__        assertMiss("%{a},%{b}x", "foo,bar")__    };runtime,errors;public,void,test,miss,assert,miss,a,b,foo,assert,miss,a,b,foo,bar,assert,miss,a,b,foo,bar,assert,miss,x,a,b,foo,bar,assert,miss,x,b,foo,bar,assert,miss,a,foo,assert,miss,a,foo,assert,miss,a,foo,assert,miss,a,x,foo,assert,miss,a,b,x,foo,bar
DissectParserTests -> public void testMiss();1550843829;Runtime errors;public void testMiss() {_        assertMiss("%{a}%{b}", "foo")__        assertMiss("%{a},%{b}", "foo bar")__        assertMiss("%{a}, %{b}", "foo,bar")__        assertMiss("x%{a},%{b}", "foo,bar")__        assertMiss("x%{},%{b}", "foo,bar")__        assertMiss("leading_delimiter_long%{a}", "foo")__        assertMiss("%{a}trailing_delimiter_long", "foo")__        assertMiss("leading_delimiter_long%{a}trailing_delimiter_long", "foo")__        assertMiss("%{a}x", "foo")__        assertMiss("%{a},%{b}x", "foo,bar")__    };runtime,errors;public,void,test,miss,assert,miss,a,b,foo,assert,miss,a,b,foo,bar,assert,miss,a,b,foo,bar,assert,miss,x,a,b,foo,bar,assert,miss,x,b,foo,bar,assert,miss,a,foo,assert,miss,a,foo,assert,miss,a,foo,assert,miss,a,x,foo,assert,miss,a,b,x,foo,bar
DissectParserTests -> public void testBadPatternOrKey();1534338685;Construction errors;public void testBadPatternOrKey() {_        assertBadPattern("")__        assertBadPattern("{}")__        assertBadPattern("%{*a} %{&b}")__        assertBadKey("%{*}")__        assertBadKey("%{++}")__    };construction,errors;public,void,test,bad,pattern,or,key,assert,bad,pattern,assert,bad,pattern,assert,bad,pattern,a,b,assert,bad,key,assert,bad,key
DissectParserTests -> public void testBadPatternOrKey();1550763001;Construction errors;public void testBadPatternOrKey() {_        assertBadPattern("")__        assertBadPattern("{}")__        assertBadPattern("%{*a} %{&b}")__        assertBadKey("%{*}")__        assertBadKey("%{++}")__    };construction,errors;public,void,test,bad,pattern,or,key,assert,bad,pattern,assert,bad,pattern,assert,bad,pattern,a,b,assert,bad,key,assert,bad,key
DissectParserTests -> public void testBadPatternOrKey();1550843829;Construction errors;public void testBadPatternOrKey() {_        assertBadPattern("")__        assertBadPattern("{}")__        assertBadPattern("%{*a} %{&b}")__        assertBadKey("%{*}")__        assertBadKey("%{++}")__    };construction,errors;public,void,test,bad,pattern,or,key,assert,bad,pattern,assert,bad,pattern,assert,bad,pattern,a,b,assert,bad,key,assert,bad,key
DissectParserTests -> public void testJsonSpecification() throws Exception;1534338685;Shared specification between Beats, Logstash, and Ingest node;public void testJsonSpecification() throws Exception {_        ObjectMapper mapper = new ObjectMapper()__        JsonNode rootNode = mapper.readTree(this.getClass().getResourceAsStream("/specification/tests.json"))__        Iterator<JsonNode> tests = rootNode.elements()__        while (tests.hasNext()) {_            JsonNode test = tests.next()__            boolean skip = test.path("skip").asBoolean()__            if (!skip) {_                String name = test.path("name").asText()__                logger.debug("Running Json specification: " + name)__                String pattern = test.path("tok").asText()__                String input = test.path("msg").asText()__                String append = test.path("append").asText()__                boolean fail = test.path("fail").asBoolean()__                Iterator<Map.Entry<String, JsonNode>> expected = test.path("expected").fields()__                List<String> expectedKeys = new ArrayList<>()__                List<String> expectedValues = new ArrayList<>()__                expected.forEachRemaining(entry -> {_                    expectedKeys.add(entry.getKey())__                    expectedValues.add(entry.getValue().asText())__                })__                if (fail) {_                    assertFail(pattern, input)__                } else {_                    assertMatch(pattern, input, expectedKeys, expectedValues, append)__                }_            }_        }_    };shared,specification,between,beats,logstash,and,ingest,node;public,void,test,json,specification,throws,exception,object,mapper,mapper,new,object,mapper,json,node,root,node,mapper,read,tree,this,get,class,get,resource,as,stream,specification,tests,json,iterator,json,node,tests,root,node,elements,while,tests,has,next,json,node,test,tests,next,boolean,skip,test,path,skip,as,boolean,if,skip,string,name,test,path,name,as,text,logger,debug,running,json,specification,name,string,pattern,test,path,tok,as,text,string,input,test,path,msg,as,text,string,append,test,path,append,as,text,boolean,fail,test,path,fail,as,boolean,iterator,map,entry,string,json,node,expected,test,path,expected,fields,list,string,expected,keys,new,array,list,list,string,expected,values,new,array,list,expected,for,each,remaining,entry,expected,keys,add,entry,get,key,expected,values,add,entry,get,value,as,text,if,fail,assert,fail,pattern,input,else,assert,match,pattern,input,expected,keys,expected,values,append
DissectParserTests -> public void testJsonSpecification() throws Exception;1550763001;Shared specification between Beats, Logstash, and Ingest node;public void testJsonSpecification() throws Exception {_        ObjectMapper mapper = new ObjectMapper()__        JsonNode rootNode = mapper.readTree(this.getClass().getResourceAsStream("/specification/tests.json"))__        Iterator<JsonNode> tests = rootNode.elements()__        while (tests.hasNext()) {_            JsonNode test = tests.next()__            boolean skip = test.path("skip").asBoolean()__            if (!skip) {_                String name = test.path("name").asText()__                logger.debug("Running Json specification: " + name)__                String pattern = test.path("tok").asText()__                String input = test.path("msg").asText()__                String append = test.path("append").asText()__                boolean fail = test.path("fail").asBoolean()__                Iterator<Map.Entry<String, JsonNode>> expected = test.path("expected").fields()__                List<String> expectedKeys = new ArrayList<>()__                List<String> expectedValues = new ArrayList<>()__                expected.forEachRemaining(entry -> {_                    expectedKeys.add(entry.getKey())__                    expectedValues.add(entry.getValue().asText())__                })__                if (fail) {_                    assertFail(pattern, input)__                } else {_                    assertMatch(pattern, input, expectedKeys, expectedValues, append)__                }_            }_        }_    };shared,specification,between,beats,logstash,and,ingest,node;public,void,test,json,specification,throws,exception,object,mapper,mapper,new,object,mapper,json,node,root,node,mapper,read,tree,this,get,class,get,resource,as,stream,specification,tests,json,iterator,json,node,tests,root,node,elements,while,tests,has,next,json,node,test,tests,next,boolean,skip,test,path,skip,as,boolean,if,skip,string,name,test,path,name,as,text,logger,debug,running,json,specification,name,string,pattern,test,path,tok,as,text,string,input,test,path,msg,as,text,string,append,test,path,append,as,text,boolean,fail,test,path,fail,as,boolean,iterator,map,entry,string,json,node,expected,test,path,expected,fields,list,string,expected,keys,new,array,list,list,string,expected,values,new,array,list,expected,for,each,remaining,entry,expected,keys,add,entry,get,key,expected,values,add,entry,get,value,as,text,if,fail,assert,fail,pattern,input,else,assert,match,pattern,input,expected,keys,expected,values,append
DissectParserTests -> public void testJsonSpecification() throws Exception;1550843829;Shared specification between Beats, Logstash, and Ingest node;public void testJsonSpecification() throws Exception {_        ObjectMapper mapper = new ObjectMapper()__        JsonNode rootNode = mapper.readTree(this.getClass().getResourceAsStream("/specification/tests.json"))__        Iterator<JsonNode> tests = rootNode.elements()__        while (tests.hasNext()) {_            JsonNode test = tests.next()__            boolean skip = test.path("skip").asBoolean()__            if (!skip) {_                String name = test.path("name").asText()__                logger.debug("Running Json specification: " + name)__                String pattern = test.path("tok").asText()__                String input = test.path("msg").asText()__                String append = test.path("append").asText()__                boolean fail = test.path("fail").asBoolean()__                Iterator<Map.Entry<String, JsonNode>> expected = test.path("expected").fields()__                List<String> expectedKeys = new ArrayList<>()__                List<String> expectedValues = new ArrayList<>()__                expected.forEachRemaining(entry -> {_                    expectedKeys.add(entry.getKey())__                    expectedValues.add(entry.getValue().asText())__                })__                if (fail) {_                    assertFail(pattern, input)__                } else {_                    assertMatch(pattern, input, expectedKeys, expectedValues, append)__                }_            }_        }_    };shared,specification,between,beats,logstash,and,ingest,node;public,void,test,json,specification,throws,exception,object,mapper,mapper,new,object,mapper,json,node,root,node,mapper,read,tree,this,get,class,get,resource,as,stream,specification,tests,json,iterator,json,node,tests,root,node,elements,while,tests,has,next,json,node,test,tests,next,boolean,skip,test,path,skip,as,boolean,if,skip,string,name,test,path,name,as,text,logger,debug,running,json,specification,name,string,pattern,test,path,tok,as,text,string,input,test,path,msg,as,text,string,append,test,path,append,as,text,boolean,fail,test,path,fail,as,boolean,iterator,map,entry,string,json,node,expected,test,path,expected,fields,list,string,expected,keys,new,array,list,list,string,expected,values,new,array,list,expected,for,each,remaining,entry,expected,keys,add,entry,get,key,expected,values,add,entry,get,value,as,text,if,fail,assert,fail,pattern,input,else,assert,match,pattern,input,expected,keys,expected,values,append
