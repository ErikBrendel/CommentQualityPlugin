commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Collection<Path> getDependentFiles() {     return Arrays.asList(certificate, key). }
false;public;0;11;;@Override public X509ExtendedKeyManager createKeyManager() {     PrivateKey privateKey = getPrivateKey().     List<Certificate> certificates = getCertificates().     try {         final KeyStore keyStore = KeyStoreUtil.buildKeyStore(certificates, privateKey, keyPassword).         return KeyStoreUtil.createKeyManager(keyStore, keyPassword, KeyManagerFactory.getDefaultAlgorithm()).     } catch (GeneralSecurityException e) {         throw new SslConfigException("failed to load a KeyManager for certificate/key pair [" + certificate + "], [" + key + "]", e).     } }
false;private;0;15;;private PrivateKey getPrivateKey() {     try {         final PrivateKey privateKey = PemUtils.readPrivateKey(key, () -> keyPassword).         if (privateKey == null) {             throw new SslConfigException("could not load ssl private key file [" + key + "]").         }         return privateKey.     } catch (FileNotFoundException | NoSuchFileException e) {         throw new SslConfigException("the configured ssl private key file [" + key.toAbsolutePath() + "] does not exist", e).     } catch (IOException e) {         throw new SslConfigException("the configured ssl private key file [" + key.toAbsolutePath() + "] cannot be read", e).     } catch (GeneralSecurityException e) {         throw new SslConfigException("cannot load ssl private key file [" + key.toAbsolutePath() + "]", e).     } }
false;private;0;11;;private List<Certificate> getCertificates() {     try {         return PemUtils.readCertificates(Collections.singleton(certificate)).     } catch (FileNotFoundException | NoSuchFileException e) {         throw new SslConfigException("the configured ssl certificate file [" + certificate.toAbsolutePath() + "] does not exist", e).     } catch (IOException e) {         throw new SslConfigException("the configured ssl certificate file [" + certificate.toAbsolutePath() + "] cannot be read", e).     } catch (GeneralSecurityException e) {         throw new SslConfigException("cannot load ssl certificate from [" + certificate.toAbsolutePath() + "]", e).     } }
false;public;0;4;;@Override public String toString() {     return "PEM-key-config{cert=" + certificate.toAbsolutePath() + " key=" + key.toAbsolutePath() + "}". }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final PemKeyConfig that = (PemKeyConfig) o.     return Objects.equals(this.certificate, that.certificate) && Objects.equals(this.key, that.key) && Arrays.equals(this.keyPassword, that.keyPassword). }
false;public;0;6;;@Override public int hashCode() {     int result = Objects.hash(certificate, key).     result = 31 * result + Arrays.hashCode(keyPassword).     return result. }
