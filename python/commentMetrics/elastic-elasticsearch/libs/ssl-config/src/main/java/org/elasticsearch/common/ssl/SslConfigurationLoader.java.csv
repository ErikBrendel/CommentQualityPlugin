# id;timestamp;commentText;codeText;commentWords;codeWords
SslConfigurationLoader -> public void setDefaultKeyConfig(SslKeyConfig defaultKeyConfig);1547635937;Change the default key config._The initial key config is {@link EmptyKeyConfig}, which does not provide any keys;public void setDefaultKeyConfig(SslKeyConfig defaultKeyConfig) {_        this.defaultKeyConfig = defaultKeyConfig__    };change,the,default,key,config,the,initial,key,config,is,link,empty,key,config,which,does,not,provide,any,keys;public,void,set,default,key,config,ssl,key,config,default,key,config,this,default,key,config,default,key,config
SslConfigurationLoader -> public void setDefaultKeyConfig(SslKeyConfig defaultKeyConfig);1548391599;Change the default key config._The initial key config is {@link EmptyKeyConfig}, which does not provide any keys;public void setDefaultKeyConfig(SslKeyConfig defaultKeyConfig) {_        this.defaultKeyConfig = defaultKeyConfig__    };change,the,default,key,config,the,initial,key,config,is,link,empty,key,config,which,does,not,provide,any,keys;public,void,set,default,key,config,ssl,key,config,default,key,config,this,default,key,config,default,key,config
SslConfigurationLoader -> public void setDefaultKeyConfig(SslKeyConfig defaultKeyConfig);1549035251;Change the default key config._The initial key config is {@link EmptyKeyConfig}, which does not provide any keys;public void setDefaultKeyConfig(SslKeyConfig defaultKeyConfig) {_        this.defaultKeyConfig = defaultKeyConfig__    };change,the,default,key,config,the,initial,key,config,is,link,empty,key,config,which,does,not,provide,any,keys;public,void,set,default,key,config,ssl,key,config,default,key,config,this,default,key,config,default,key,config
SslConfigurationLoader -> protected abstract List<String> getSettingAsList(String key) throws Exception_;1547635937;Clients of this class should implement this method to load a fully-qualified key from the preferred settings source._This method will be called for list settings (see {@link SslConfigurationKeys#getListKeys()})._<p>_The setting should be returned as a list of strings, and this class will convert the values to the relevant type.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract List<String> getSettingAsList(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,settings,source,this,method,will,be,called,for,list,settings,see,link,ssl,configuration,keys,get,list,keys,p,the,setting,should,be,returned,as,a,list,of,strings,and,this,class,will,convert,the,values,to,the,relevant,type,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,list,string,get,setting,as,list,string,key,throws,exception
SslConfigurationLoader -> protected abstract List<String> getSettingAsList(String key) throws Exception_;1548391599;Clients of this class should implement this method to load a fully-qualified key from the preferred settings source._This method will be called for list settings (see {@link SslConfigurationKeys#getListKeys()})._<p>_The setting should be returned as a list of strings, and this class will convert the values to the relevant type.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract List<String> getSettingAsList(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,settings,source,this,method,will,be,called,for,list,settings,see,link,ssl,configuration,keys,get,list,keys,p,the,setting,should,be,returned,as,a,list,of,strings,and,this,class,will,convert,the,values,to,the,relevant,type,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,list,string,get,setting,as,list,string,key,throws,exception
SslConfigurationLoader -> protected abstract List<String> getSettingAsList(String key) throws Exception_;1549035251;Clients of this class should implement this method to load a fully-qualified key from the preferred settings source._This method will be called for list settings (see {@link SslConfigurationKeys#getListKeys()})._<p>_The setting should be returned as a list of strings, and this class will convert the values to the relevant type.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract List<String> getSettingAsList(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,settings,source,this,method,will,be,called,for,list,settings,see,link,ssl,configuration,keys,get,list,keys,p,the,setting,should,be,returned,as,a,list,of,strings,and,this,class,will,convert,the,values,to,the,relevant,type,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,list,string,get,setting,as,list,string,key,throws,exception
SslConfigurationLoader -> protected abstract char[] getSecureSetting(String key) throws Exception_;1547635937;Clients of this class should implement this method to load a fully-qualified key from the preferred secure settings source._This method will be called for any setting keys that are marked as being_{@link SslConfigurationKeys#getSecureStringKeys() secure} settings.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract char[] getSecureSetting(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,secure,settings,source,this,method,will,be,called,for,any,setting,keys,that,are,marked,as,being,link,ssl,configuration,keys,get,secure,string,keys,secure,settings,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,char,get,secure,setting,string,key,throws,exception
SslConfigurationLoader -> protected abstract char[] getSecureSetting(String key) throws Exception_;1548391599;Clients of this class should implement this method to load a fully-qualified key from the preferred secure settings source._This method will be called for any setting keys that are marked as being_{@link SslConfigurationKeys#getSecureStringKeys() secure} settings.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract char[] getSecureSetting(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,secure,settings,source,this,method,will,be,called,for,any,setting,keys,that,are,marked,as,being,link,ssl,configuration,keys,get,secure,string,keys,secure,settings,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,char,get,secure,setting,string,key,throws,exception
SslConfigurationLoader -> protected abstract char[] getSecureSetting(String key) throws Exception_;1549035251;Clients of this class should implement this method to load a fully-qualified key from the preferred secure settings source._This method will be called for any setting keys that are marked as being_{@link SslConfigurationKeys#getSecureStringKeys() secure} settings.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract char[] getSecureSetting(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,secure,settings,source,this,method,will,be,called,for,any,setting,keys,that,are,marked,as,being,link,ssl,configuration,keys,get,secure,string,keys,secure,settings,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,char,get,secure,setting,string,key,throws,exception
SslConfigurationLoader -> public SslConfigurationLoader(String settingPrefix);1547635937;Construct a new loader with the "standard" default values.__@param settingPrefix The prefix to apply to all settings that are loaded. It may be the empty string, otherwise it_must end in a "." (period). For example, if the prefix is {@code "reindex.ssl."} then the keys that are_passed to methods like {@link #getSettingAsString(String)} will be in the form_{@code "reindex.ssl.verification_mode"}, and those same keys will be reported in error messages (via_{@link SslConfigException}).;public SslConfigurationLoader(String settingPrefix) {_        this.settingPrefix = settingPrefix == null ? "" : settingPrefix__        if (this.settingPrefix.isEmpty() == false && this.settingPrefix.endsWith(".") == false) {_            throw new IllegalArgumentException("Setting prefix [" + settingPrefix + "] must be blank or end in '.'")__        }_        this.defaultTrustConfig = new DefaultJdkTrustConfig()__        this.defaultKeyConfig = EmptyKeyConfig.INSTANCE__        this.defaultVerificationMode = SslVerificationMode.FULL__        this.defaultClientAuth = SslClientAuthenticationMode.OPTIONAL__        this.defaultProtocols = DEFAULT_PROTOCOLS__        this.defaultCiphers = DEFAULT_CIPHERS__    };construct,a,new,loader,with,the,standard,default,values,param,setting,prefix,the,prefix,to,apply,to,all,settings,that,are,loaded,it,may,be,the,empty,string,otherwise,it,must,end,in,a,period,for,example,if,the,prefix,is,code,reindex,ssl,then,the,keys,that,are,passed,to,methods,like,link,get,setting,as,string,string,will,be,in,the,form,code,reindex,ssl,and,those,same,keys,will,be,reported,in,error,messages,via,link,ssl,config,exception;public,ssl,configuration,loader,string,setting,prefix,this,setting,prefix,setting,prefix,null,setting,prefix,if,this,setting,prefix,is,empty,false,this,setting,prefix,ends,with,false,throw,new,illegal,argument,exception,setting,prefix,setting,prefix,must,be,blank,or,end,in,this,default,trust,config,new,default,jdk,trust,config,this,default,key,config,empty,key,config,instance,this,default,verification,mode,ssl,verification,mode,full,this,default,client,auth,ssl,client,authentication,mode,optional,this,default,protocols,this,default,ciphers
SslConfigurationLoader -> public SslConfigurationLoader(String settingPrefix);1548391599;Construct a new loader with the "standard" default values.__@param settingPrefix The prefix to apply to all settings that are loaded. It may be the empty string, otherwise it_must end in a "." (period). For example, if the prefix is {@code "reindex.ssl."} then the keys that are_passed to methods like {@link #getSettingAsString(String)} will be in the form_{@code "reindex.ssl.verification_mode"}, and those same keys will be reported in error messages (via_{@link SslConfigException}).;public SslConfigurationLoader(String settingPrefix) {_        this.settingPrefix = settingPrefix == null ? "" : settingPrefix__        if (this.settingPrefix.isEmpty() == false && this.settingPrefix.endsWith(".") == false) {_            throw new IllegalArgumentException("Setting prefix [" + settingPrefix + "] must be blank or end in '.'")__        }_        this.defaultTrustConfig = new DefaultJdkTrustConfig()__        this.defaultKeyConfig = EmptyKeyConfig.INSTANCE__        this.defaultVerificationMode = SslVerificationMode.FULL__        this.defaultClientAuth = SslClientAuthenticationMode.OPTIONAL__        this.defaultProtocols = DEFAULT_PROTOCOLS__        this.defaultCiphers = DEFAULT_CIPHERS__    };construct,a,new,loader,with,the,standard,default,values,param,setting,prefix,the,prefix,to,apply,to,all,settings,that,are,loaded,it,may,be,the,empty,string,otherwise,it,must,end,in,a,period,for,example,if,the,prefix,is,code,reindex,ssl,then,the,keys,that,are,passed,to,methods,like,link,get,setting,as,string,string,will,be,in,the,form,code,reindex,ssl,and,those,same,keys,will,be,reported,in,error,messages,via,link,ssl,config,exception;public,ssl,configuration,loader,string,setting,prefix,this,setting,prefix,setting,prefix,null,setting,prefix,if,this,setting,prefix,is,empty,false,this,setting,prefix,ends,with,false,throw,new,illegal,argument,exception,setting,prefix,setting,prefix,must,be,blank,or,end,in,this,default,trust,config,new,default,jdk,trust,config,this,default,key,config,empty,key,config,instance,this,default,verification,mode,ssl,verification,mode,full,this,default,client,auth,ssl,client,authentication,mode,optional,this,default,protocols,this,default,ciphers
SslConfigurationLoader -> public SslConfigurationLoader(String settingPrefix);1549035251;Construct a new loader with the "standard" default values.__@param settingPrefix The prefix to apply to all settings that are loaded. It may be the empty string, otherwise it_must end in a "." (period). For example, if the prefix is {@code "reindex.ssl."} then the keys that are_passed to methods like {@link #getSettingAsString(String)} will be in the form_{@code "reindex.ssl.verification_mode"}, and those same keys will be reported in error messages (via_{@link SslConfigException}).;public SslConfigurationLoader(String settingPrefix) {_        this.settingPrefix = settingPrefix == null ? "" : settingPrefix__        if (this.settingPrefix.isEmpty() == false && this.settingPrefix.endsWith(".") == false) {_            throw new IllegalArgumentException("Setting prefix [" + settingPrefix + "] must be blank or end in '.'")__        }_        this.defaultTrustConfig = new DefaultJdkTrustConfig()__        this.defaultKeyConfig = EmptyKeyConfig.INSTANCE__        this.defaultVerificationMode = SslVerificationMode.FULL__        this.defaultClientAuth = SslClientAuthenticationMode.OPTIONAL__        this.defaultProtocols = DEFAULT_PROTOCOLS__        this.defaultCiphers = DEFAULT_CIPHERS__    };construct,a,new,loader,with,the,standard,default,values,param,setting,prefix,the,prefix,to,apply,to,all,settings,that,are,loaded,it,may,be,the,empty,string,otherwise,it,must,end,in,a,period,for,example,if,the,prefix,is,code,reindex,ssl,then,the,keys,that,are,passed,to,methods,like,link,get,setting,as,string,string,will,be,in,the,form,code,reindex,ssl,and,those,same,keys,will,be,reported,in,error,messages,via,link,ssl,config,exception;public,ssl,configuration,loader,string,setting,prefix,this,setting,prefix,setting,prefix,null,setting,prefix,if,this,setting,prefix,is,empty,false,this,setting,prefix,ends,with,false,throw,new,illegal,argument,exception,setting,prefix,setting,prefix,must,be,blank,or,end,in,this,default,trust,config,new,default,jdk,trust,config,this,default,key,config,empty,key,config,instance,this,default,verification,mode,ssl,verification,mode,full,this,default,client,auth,ssl,client,authentication,mode,optional,this,default,protocols,this,default,ciphers
SslConfigurationLoader -> public void setDefaultProtocols(List<String> defaultProtocols);1547635937;Change the default SSL/TLS protocol list._The initial protocol list is defined by {@link #DEFAULT_PROTOCOLS};public void setDefaultProtocols(List<String> defaultProtocols) {_        this.defaultProtocols = defaultProtocols__    };change,the,default,ssl,tls,protocol,list,the,initial,protocol,list,is,defined,by,link;public,void,set,default,protocols,list,string,default,protocols,this,default,protocols,default,protocols
SslConfigurationLoader -> public void setDefaultProtocols(List<String> defaultProtocols);1548391599;Change the default SSL/TLS protocol list._The initial protocol list is defined by {@link #DEFAULT_PROTOCOLS};public void setDefaultProtocols(List<String> defaultProtocols) {_        this.defaultProtocols = defaultProtocols__    };change,the,default,ssl,tls,protocol,list,the,initial,protocol,list,is,defined,by,link;public,void,set,default,protocols,list,string,default,protocols,this,default,protocols,default,protocols
SslConfigurationLoader -> public void setDefaultProtocols(List<String> defaultProtocols);1549035251;Change the default SSL/TLS protocol list._The initial protocol list is defined by {@link #DEFAULT_PROTOCOLS};public void setDefaultProtocols(List<String> defaultProtocols) {_        this.defaultProtocols = defaultProtocols__    };change,the,default,ssl,tls,protocol,list,the,initial,protocol,list,is,defined,by,link;public,void,set,default,protocols,list,string,default,protocols,this,default,protocols,default,protocols
SslConfigurationLoader -> public void setDefaultCiphers(List<String> defaultCiphers);1547635937;Change the default supported ciphers._The initial cipher list depends on the availability of {@link #has256BitAES() 256 bit AES}.__@see #loadDefaultCiphers();public void setDefaultCiphers(List<String> defaultCiphers) {_        this.defaultCiphers = defaultCiphers__    };change,the,default,supported,ciphers,the,initial,cipher,list,depends,on,the,availability,of,link,has256bit,aes,256,bit,aes,see,load,default,ciphers;public,void,set,default,ciphers,list,string,default,ciphers,this,default,ciphers,default,ciphers
SslConfigurationLoader -> public void setDefaultCiphers(List<String> defaultCiphers);1548391599;Change the default supported ciphers._The initial cipher list depends on the availability of {@link #has256BitAES() 256 bit AES}.__@see #loadDefaultCiphers();public void setDefaultCiphers(List<String> defaultCiphers) {_        this.defaultCiphers = defaultCiphers__    };change,the,default,supported,ciphers,the,initial,cipher,list,depends,on,the,availability,of,link,has256bit,aes,256,bit,aes,see,load,default,ciphers;public,void,set,default,ciphers,list,string,default,ciphers,this,default,ciphers,default,ciphers
SslConfigurationLoader -> public void setDefaultCiphers(List<String> defaultCiphers);1549035251;Change the default supported ciphers._The initial cipher list depends on the availability of {@link #has256BitAES() 256 bit AES}.__@see #loadDefaultCiphers();public void setDefaultCiphers(List<String> defaultCiphers) {_        this.defaultCiphers = defaultCiphers__    };change,the,default,supported,ciphers,the,initial,cipher,list,depends,on,the,availability,of,link,has256bit,aes,256,bit,aes,see,load,default,ciphers;public,void,set,default,ciphers,list,string,default,ciphers,this,default,ciphers,default,ciphers
SslConfigurationLoader -> public SslConfiguration load(Path basePath);1547635937;Resolve all necessary configuration settings, and load a {@link SslConfiguration}.__@param basePath The base path to use for any settings that represent file paths. Typically points to the Elasticsearch_configuration directory._@throws SslConfigException For any problems with the configuration, or with loading the required SSL classes.;public SslConfiguration load(Path basePath) {_        Objects.requireNonNull(basePath, "Base Path cannot be null")__        final List<String> protocols = resolveListSetting(PROTOCOLS, Function.identity(), defaultProtocols)__        final List<String> ciphers = resolveListSetting(CIPHERS, Function.identity(), defaultCiphers)__        final SslVerificationMode verificationMode = resolveSetting(VERIFICATION_MODE, SslVerificationMode::parse, defaultVerificationMode)__        final SslClientAuthenticationMode clientAuth = resolveSetting(CLIENT_AUTH, SslClientAuthenticationMode::parse, defaultClientAuth)___        final SslTrustConfig trustConfig = buildTrustConfig(basePath, verificationMode)__        final SslKeyConfig keyConfig = buildKeyConfig(basePath)___        if (protocols == null || protocols.isEmpty()) {_            throw new SslConfigException("no protocols configured in [" + settingPrefix + PROTOCOLS + "]")__        }_        if (ciphers == null || ciphers.isEmpty()) {_            throw new SslConfigException("no cipher suites configured in [" + settingPrefix + CIPHERS + "]")__        }_        return new SslConfiguration(trustConfig, keyConfig, verificationMode, clientAuth, ciphers, protocols)__    };resolve,all,necessary,configuration,settings,and,load,a,link,ssl,configuration,param,base,path,the,base,path,to,use,for,any,settings,that,represent,file,paths,typically,points,to,the,elasticsearch,configuration,directory,throws,ssl,config,exception,for,any,problems,with,the,configuration,or,with,loading,the,required,ssl,classes;public,ssl,configuration,load,path,base,path,objects,require,non,null,base,path,base,path,cannot,be,null,final,list,string,protocols,resolve,list,setting,protocols,function,identity,default,protocols,final,list,string,ciphers,resolve,list,setting,ciphers,function,identity,default,ciphers,final,ssl,verification,mode,verification,mode,resolve,setting,ssl,verification,mode,parse,default,verification,mode,final,ssl,client,authentication,mode,client,auth,resolve,setting,ssl,client,authentication,mode,parse,default,client,auth,final,ssl,trust,config,trust,config,build,trust,config,base,path,verification,mode,final,ssl,key,config,key,config,build,key,config,base,path,if,protocols,null,protocols,is,empty,throw,new,ssl,config,exception,no,protocols,configured,in,setting,prefix,protocols,if,ciphers,null,ciphers,is,empty,throw,new,ssl,config,exception,no,cipher,suites,configured,in,setting,prefix,ciphers,return,new,ssl,configuration,trust,config,key,config,verification,mode,client,auth,ciphers,protocols
SslConfigurationLoader -> public SslConfiguration load(Path basePath);1548391599;Resolve all necessary configuration settings, and load a {@link SslConfiguration}.__@param basePath The base path to use for any settings that represent file paths. Typically points to the Elasticsearch_configuration directory._@throws SslConfigException For any problems with the configuration, or with loading the required SSL classes.;public SslConfiguration load(Path basePath) {_        Objects.requireNonNull(basePath, "Base Path cannot be null")__        final List<String> protocols = resolveListSetting(PROTOCOLS, Function.identity(), defaultProtocols)__        final List<String> ciphers = resolveListSetting(CIPHERS, Function.identity(), defaultCiphers)__        final SslVerificationMode verificationMode = resolveSetting(VERIFICATION_MODE, SslVerificationMode::parse, defaultVerificationMode)__        final SslClientAuthenticationMode clientAuth = resolveSetting(CLIENT_AUTH, SslClientAuthenticationMode::parse, defaultClientAuth)___        final SslTrustConfig trustConfig = buildTrustConfig(basePath, verificationMode)__        final SslKeyConfig keyConfig = buildKeyConfig(basePath)___        if (protocols == null || protocols.isEmpty()) {_            throw new SslConfigException("no protocols configured in [" + settingPrefix + PROTOCOLS + "]")__        }_        if (ciphers == null || ciphers.isEmpty()) {_            throw new SslConfigException("no cipher suites configured in [" + settingPrefix + CIPHERS + "]")__        }_        return new SslConfiguration(trustConfig, keyConfig, verificationMode, clientAuth, ciphers, protocols)__    };resolve,all,necessary,configuration,settings,and,load,a,link,ssl,configuration,param,base,path,the,base,path,to,use,for,any,settings,that,represent,file,paths,typically,points,to,the,elasticsearch,configuration,directory,throws,ssl,config,exception,for,any,problems,with,the,configuration,or,with,loading,the,required,ssl,classes;public,ssl,configuration,load,path,base,path,objects,require,non,null,base,path,base,path,cannot,be,null,final,list,string,protocols,resolve,list,setting,protocols,function,identity,default,protocols,final,list,string,ciphers,resolve,list,setting,ciphers,function,identity,default,ciphers,final,ssl,verification,mode,verification,mode,resolve,setting,ssl,verification,mode,parse,default,verification,mode,final,ssl,client,authentication,mode,client,auth,resolve,setting,ssl,client,authentication,mode,parse,default,client,auth,final,ssl,trust,config,trust,config,build,trust,config,base,path,verification,mode,final,ssl,key,config,key,config,build,key,config,base,path,if,protocols,null,protocols,is,empty,throw,new,ssl,config,exception,no,protocols,configured,in,setting,prefix,protocols,if,ciphers,null,ciphers,is,empty,throw,new,ssl,config,exception,no,cipher,suites,configured,in,setting,prefix,ciphers,return,new,ssl,configuration,trust,config,key,config,verification,mode,client,auth,ciphers,protocols
SslConfigurationLoader -> public SslConfiguration load(Path basePath);1549035251;Resolve all necessary configuration settings, and load a {@link SslConfiguration}.__@param basePath The base path to use for any settings that represent file paths. Typically points to the Elasticsearch_configuration directory._@throws SslConfigException For any problems with the configuration, or with loading the required SSL classes.;public SslConfiguration load(Path basePath) {_        Objects.requireNonNull(basePath, "Base Path cannot be null")__        final List<String> protocols = resolveListSetting(PROTOCOLS, Function.identity(), defaultProtocols)__        final List<String> ciphers = resolveListSetting(CIPHERS, Function.identity(), defaultCiphers)__        final SslVerificationMode verificationMode = resolveSetting(VERIFICATION_MODE, SslVerificationMode::parse, defaultVerificationMode)__        final SslClientAuthenticationMode clientAuth = resolveSetting(CLIENT_AUTH, SslClientAuthenticationMode::parse, defaultClientAuth)___        final SslTrustConfig trustConfig = buildTrustConfig(basePath, verificationMode)__        final SslKeyConfig keyConfig = buildKeyConfig(basePath)___        if (protocols == null || protocols.isEmpty()) {_            throw new SslConfigException("no protocols configured in [" + settingPrefix + PROTOCOLS + "]")__        }_        if (ciphers == null || ciphers.isEmpty()) {_            throw new SslConfigException("no cipher suites configured in [" + settingPrefix + CIPHERS + "]")__        }_        return new SslConfiguration(trustConfig, keyConfig, verificationMode, clientAuth, ciphers, protocols)__    };resolve,all,necessary,configuration,settings,and,load,a,link,ssl,configuration,param,base,path,the,base,path,to,use,for,any,settings,that,represent,file,paths,typically,points,to,the,elasticsearch,configuration,directory,throws,ssl,config,exception,for,any,problems,with,the,configuration,or,with,loading,the,required,ssl,classes;public,ssl,configuration,load,path,base,path,objects,require,non,null,base,path,base,path,cannot,be,null,final,list,string,protocols,resolve,list,setting,protocols,function,identity,default,protocols,final,list,string,ciphers,resolve,list,setting,ciphers,function,identity,default,ciphers,final,ssl,verification,mode,verification,mode,resolve,setting,ssl,verification,mode,parse,default,verification,mode,final,ssl,client,authentication,mode,client,auth,resolve,setting,ssl,client,authentication,mode,parse,default,client,auth,final,ssl,trust,config,trust,config,build,trust,config,base,path,verification,mode,final,ssl,key,config,key,config,build,key,config,base,path,if,protocols,null,protocols,is,empty,throw,new,ssl,config,exception,no,protocols,configured,in,setting,prefix,protocols,if,ciphers,null,ciphers,is,empty,throw,new,ssl,config,exception,no,cipher,suites,configured,in,setting,prefix,ciphers,return,new,ssl,configuration,trust,config,key,config,verification,mode,client,auth,ciphers,protocols
SslConfigurationLoader -> public void setDefaultTrustConfig(SslTrustConfig defaultTrustConfig);1547635937;Change the default trust config._The initial trust config is {@link DefaultJdkTrustConfig}, which trusts the JDK's default CA certs;public void setDefaultTrustConfig(SslTrustConfig defaultTrustConfig) {_        this.defaultTrustConfig = defaultTrustConfig__    };change,the,default,trust,config,the,initial,trust,config,is,link,default,jdk,trust,config,which,trusts,the,jdk,s,default,ca,certs;public,void,set,default,trust,config,ssl,trust,config,default,trust,config,this,default,trust,config,default,trust,config
SslConfigurationLoader -> public void setDefaultTrustConfig(SslTrustConfig defaultTrustConfig);1548391599;Change the default trust config._The initial trust config is {@link DefaultJdkTrustConfig}, which trusts the JDK's default CA certs;public void setDefaultTrustConfig(SslTrustConfig defaultTrustConfig) {_        this.defaultTrustConfig = defaultTrustConfig__    };change,the,default,trust,config,the,initial,trust,config,is,link,default,jdk,trust,config,which,trusts,the,jdk,s,default,ca,certs;public,void,set,default,trust,config,ssl,trust,config,default,trust,config,this,default,trust,config,default,trust,config
SslConfigurationLoader -> public void setDefaultTrustConfig(SslTrustConfig defaultTrustConfig);1549035251;Change the default trust config._The initial trust config is {@link DefaultJdkTrustConfig}, which trusts the JDK's default CA certs;public void setDefaultTrustConfig(SslTrustConfig defaultTrustConfig) {_        this.defaultTrustConfig = defaultTrustConfig__    };change,the,default,trust,config,the,initial,trust,config,is,link,default,jdk,trust,config,which,trusts,the,jdk,s,default,ca,certs;public,void,set,default,trust,config,ssl,trust,config,default,trust,config,this,default,trust,config,default,trust,config
SslConfigurationLoader -> public void setDefaultVerificationMode(SslVerificationMode defaultVerificationMode);1547635937;Change the default verification mode._The initial verification mode is {@link SslVerificationMode#FULL}.;public void setDefaultVerificationMode(SslVerificationMode defaultVerificationMode) {_        this.defaultVerificationMode = defaultVerificationMode__    };change,the,default,verification,mode,the,initial,verification,mode,is,link,ssl,verification,mode,full;public,void,set,default,verification,mode,ssl,verification,mode,default,verification,mode,this,default,verification,mode,default,verification,mode
SslConfigurationLoader -> public void setDefaultVerificationMode(SslVerificationMode defaultVerificationMode);1548391599;Change the default verification mode._The initial verification mode is {@link SslVerificationMode#FULL}.;public void setDefaultVerificationMode(SslVerificationMode defaultVerificationMode) {_        this.defaultVerificationMode = defaultVerificationMode__    };change,the,default,verification,mode,the,initial,verification,mode,is,link,ssl,verification,mode,full;public,void,set,default,verification,mode,ssl,verification,mode,default,verification,mode,this,default,verification,mode,default,verification,mode
SslConfigurationLoader -> public void setDefaultVerificationMode(SslVerificationMode defaultVerificationMode);1549035251;Change the default verification mode._The initial verification mode is {@link SslVerificationMode#FULL}.;public void setDefaultVerificationMode(SslVerificationMode defaultVerificationMode) {_        this.defaultVerificationMode = defaultVerificationMode__    };change,the,default,verification,mode,the,initial,verification,mode,is,link,ssl,verification,mode,full;public,void,set,default,verification,mode,ssl,verification,mode,default,verification,mode,this,default,verification,mode,default,verification,mode
SslConfigurationLoader -> protected abstract String getSettingAsString(String key) throws Exception_;1547635937;Clients of this class should implement this method to load a fully-qualified key from the preferred settings source._This method will be called for basic string settings (see {@link SslConfigurationKeys#getStringKeys()})._<p>_The setting should be returned as a string, and this class will convert it to the relevant type.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract String getSettingAsString(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,settings,source,this,method,will,be,called,for,basic,string,settings,see,link,ssl,configuration,keys,get,string,keys,p,the,setting,should,be,returned,as,a,string,and,this,class,will,convert,it,to,the,relevant,type,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,string,get,setting,as,string,string,key,throws,exception
SslConfigurationLoader -> protected abstract String getSettingAsString(String key) throws Exception_;1548391599;Clients of this class should implement this method to load a fully-qualified key from the preferred settings source._This method will be called for basic string settings (see {@link SslConfigurationKeys#getStringKeys()})._<p>_The setting should be returned as a string, and this class will convert it to the relevant type.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract String getSettingAsString(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,settings,source,this,method,will,be,called,for,basic,string,settings,see,link,ssl,configuration,keys,get,string,keys,p,the,setting,should,be,returned,as,a,string,and,this,class,will,convert,it,to,the,relevant,type,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,string,get,setting,as,string,string,key,throws,exception
SslConfigurationLoader -> protected abstract String getSettingAsString(String key) throws Exception_;1549035251;Clients of this class should implement this method to load a fully-qualified key from the preferred settings source._This method will be called for basic string settings (see {@link SslConfigurationKeys#getStringKeys()})._<p>_The setting should be returned as a string, and this class will convert it to the relevant type.__@throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in_{@link SslConfigException} before being rethrown.;protected abstract String getSettingAsString(String key) throws Exception_;clients,of,this,class,should,implement,this,method,to,load,a,fully,qualified,key,from,the,preferred,settings,source,this,method,will,be,called,for,basic,string,settings,see,link,ssl,configuration,keys,get,string,keys,p,the,setting,should,be,returned,as,a,string,and,this,class,will,convert,it,to,the,relevant,type,throws,exception,if,a,link,runtime,exception,is,thrown,it,will,be,rethrown,unwrapped,all,checked,exceptions,are,wrapped,in,link,ssl,config,exception,before,being,rethrown;protected,abstract,string,get,setting,as,string,string,key,throws,exception
SslConfigurationLoader -> public void setDefaultClientAuth(SslClientAuthenticationMode defaultClientAuth);1547635937;Change the default client authentication mode._The initial client auth mode is {@link SslClientAuthenticationMode#OPTIONAL}.;public void setDefaultClientAuth(SslClientAuthenticationMode defaultClientAuth) {_        this.defaultClientAuth = defaultClientAuth__    };change,the,default,client,authentication,mode,the,initial,client,auth,mode,is,link,ssl,client,authentication,mode,optional;public,void,set,default,client,auth,ssl,client,authentication,mode,default,client,auth,this,default,client,auth,default,client,auth
SslConfigurationLoader -> public void setDefaultClientAuth(SslClientAuthenticationMode defaultClientAuth);1548391599;Change the default client authentication mode._The initial client auth mode is {@link SslClientAuthenticationMode#OPTIONAL}.;public void setDefaultClientAuth(SslClientAuthenticationMode defaultClientAuth) {_        this.defaultClientAuth = defaultClientAuth__    };change,the,default,client,authentication,mode,the,initial,client,auth,mode,is,link,ssl,client,authentication,mode,optional;public,void,set,default,client,auth,ssl,client,authentication,mode,default,client,auth,this,default,client,auth,default,client,auth
SslConfigurationLoader -> public void setDefaultClientAuth(SslClientAuthenticationMode defaultClientAuth);1549035251;Change the default client authentication mode._The initial client auth mode is {@link SslClientAuthenticationMode#OPTIONAL}.;public void setDefaultClientAuth(SslClientAuthenticationMode defaultClientAuth) {_        this.defaultClientAuth = defaultClientAuth__    };change,the,default,client,authentication,mode,the,initial,client,auth,mode,is,link,ssl,client,authentication,mode,optional;public,void,set,default,client,auth,ssl,client,authentication,mode,default,client,auth,this,default,client,auth,default,client,auth
