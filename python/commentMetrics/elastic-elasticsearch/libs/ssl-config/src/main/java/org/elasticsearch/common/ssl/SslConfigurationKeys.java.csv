commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;8;/**  * The list of keys that are used to load a non-secure, non-list setting  */ ;/**  * The list of keys that are used to load a non-secure, non-list setting  */ public static List<String> getStringKeys() {     return Arrays.asList(VERIFICATION_MODE, CLIENT_AUTH, TRUSTSTORE_PATH, TRUSTSTORE_LEGACY_PASSWORD, TRUSTSTORE_TYPE, TRUSTSTORE_TYPE, KEYSTORE_PATH, KEYSTORE_LEGACY_PASSWORD, KEYSTORE_LEGACY_KEY_PASSWORD, KEYSTORE_TYPE, KEYSTORE_ALGORITHM, CERTIFICATE, KEY, KEY_LEGACY_PASSPHRASE). }
true;public,static;0;3;/**  * The list of keys that are used to load a non-secure, list setting  */ ;/**  * The list of keys that are used to load a non-secure, list setting  */ public static List<String> getListKeys() {     return Arrays.asList(PROTOCOLS, CIPHERS, CERTIFICATE_AUTHORITIES). }
true;public,static;0;3;/**  * The list of keys that are used to load a secure setting (such as a password) that would typically be stored in the elasticsearch  * keystore.  */ ;/**  * The list of keys that are used to load a secure setting (such as a password) that would typically be stored in the elasticsearch  * keystore.  */ public static List<String> getSecureStringKeys() {     return Arrays.asList(TRUSTSTORE_SECURE_PASSWORD, KEYSTORE_SECURE_PASSWORD, KEYSTORE_SECURE_KEY_PASSWORD, KEY_SECURE_PASSPHRASE). }
true;public,static;1;3;/**  * @return {@code true} if the provided key is a deprecated setting  */ ;/**  * @return {@code true} if the provided key is a deprecated setting  */ public static boolean isDeprecated(String key) {     return DEPRECATED_KEYS.contains(key). }
