commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public X509ExtendedTrustManager createTrustManager() {     try {         return KeyStoreUtil.createTrustManager(getSystemTrustStore(), TrustManagerFactory.getDefaultAlgorithm()).     } catch (GeneralSecurityException e) {         throw new SslConfigException("failed to initialize a TrustManager for the system keystore", e).     } }
true;private;0;12;/**  * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore  * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where  * we only need to pass the password for reading Private Key entries ).  *  * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise  */ ;/**  * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore  * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where  * we only need to pass the password for reading Private Key entries ).  *  * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise  */ private KeyStore getSystemTrustStore() {     if (isPkcs11Truststore(systemProperties) && trustStorePassword != null) {         try {             KeyStore keyStore = KeyStore.getInstance("PKCS11").             keyStore.load(null, trustStorePassword).             return keyStore.         } catch (GeneralSecurityException | IOException e) {             throw new SslConfigException("failed to load the system PKCS#11 truststore", e).         }     }     return null. }
false;private,static;1;3;;private static boolean isPkcs11Truststore(BiFunction<String, String, String> systemProperties) {     return systemProperties.apply("javax.net.ssl.trustStoreType", "").equalsIgnoreCase("PKCS11"). }
false;private,static;1;3;;private static char[] getSystemTrustStorePassword(BiFunction<String, String, String> systemProperties) {     return systemProperties.apply("javax.net.ssl.trustStorePassword", "").toCharArray(). }
false;public;0;4;;@Override public Collection<Path> getDependentFiles() {     return Collections.emptyList(). }
false;public;0;4;;@Override public String toString() {     return "JDK-trusted-certs". }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final DefaultJdkTrustConfig that = (DefaultJdkTrustConfig) o.     return Arrays.equals(this.trustStorePassword, that.trustStorePassword). }
false;public;0;4;;@Override public int hashCode() {     return Arrays.hashCode(trustStorePassword). }
