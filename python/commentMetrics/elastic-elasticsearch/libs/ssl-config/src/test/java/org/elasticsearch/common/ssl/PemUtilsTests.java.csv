commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testReadPKCS8RsaKey() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/rsa_key_pkcs8_plain.pem"), EMPTY_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;8;;public void testReadPKCS8RsaKeyWithBagAttrs() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/testnode_with_bagattrs.pem"), EMPTY_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;8;;public void testReadPKCS8DsaKey() throws Exception {     Key key = getKeyFromKeystore("DSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/dsa_key_pkcs8_plain.pem"), EMPTY_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;8;;public void testReadPKCS8EcKey() throws Exception {     Key key = getKeyFromKeystore("EC").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/ec_key_pkcs8_plain.pem"), EMPTY_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;10;;public void testReadEncryptedPKCS8Key() throws Exception {     assumeFalse("Can't run in a FIPS JVM, PBE KeySpec is not available", inFipsJvm()).     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/key_pkcs8_encrypted.pem"), TESTNODE_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;8;;public void testReadDESEncryptedPKCS1Key() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/testnode.pem"), TESTNODE_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;10;;public void testReadAESEncryptedPKCS1Key() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     String bits = randomFrom("128", "192", "256").     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/testnode-aes" + bits + ".pem"), TESTNODE_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadPKCS1RsaKey() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/testnode-unprotected.pem"), TESTNODE_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadOpenSslDsaKey() throws Exception {     Key key = getKeyFromKeystore("DSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/dsa_key_openssl_plain.pem"), EMPTY_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;10;;public void testReadOpenSslDsaKeyWithParams() throws Exception {     Key key = getKeyFromKeystore("DSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/dsa_key_openssl_plain_with_params.pem"), EMPTY_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadEncryptedOpenSslDsaKey() throws Exception {     Key key = getKeyFromKeystore("DSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/dsa_key_openssl_encrypted.pem"), TESTNODE_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadOpenSslEcKey() throws Exception {     Key key = getKeyFromKeystore("EC").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/ec_key_openssl_plain.pem"), EMPTY_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;10;;public void testReadOpenSslEcKeyWithParams() throws Exception {     Key key = getKeyFromKeystore("EC").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/ec_key_openssl_plain_with_params.pem"), EMPTY_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadEncryptedOpenSslEcKey() throws Exception {     Key key = getKeyFromKeystore("EC").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/certs/pem-utils/ec_key_openssl_encrypted.pem"), TESTNODE_PASSWORD).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;6;;public void testReadUnsupportedKey() {     final Path path = getDataPath("/certs/pem-utils/key_unsupported.pem").     SslConfigException e = expectThrows(SslConfigException.class, () -> PemUtils.readPrivateKey(path, TESTNODE_PASSWORD)).     assertThat(e.getMessage(), containsString("file does not contain a supported key format")).     assertThat(e.getMessage(), containsString(path.toAbsolutePath().toString())). }
false;public;0;6;;public void testReadPemCertificateAsKey() {     final Path path = getDataPath("/certs/pem-utils/testnode.crt").     SslConfigException e = expectThrows(SslConfigException.class, () -> PemUtils.readPrivateKey(path, TESTNODE_PASSWORD)).     assertThat(e.getMessage(), containsString("file does not contain a supported key format")).     assertThat(e.getMessage(), containsString(path.toAbsolutePath().toString())). }
false;public;0;8;;public void testReadCorruptedKey() {     final Path path = getDataPath("/certs/pem-utils/corrupted_key_pkcs8_plain.pem").     SslConfigException e = expectThrows(SslConfigException.class, () -> PemUtils.readPrivateKey(path, TESTNODE_PASSWORD)).     assertThat(e.getMessage(), containsString("private key")).     assertThat(e.getMessage(), containsString("cannot be parsed")).     assertThat(e.getMessage(), containsString(path.toAbsolutePath().toString())).     assertThat(e.getCause().getMessage(), containsString("PEM footer is invalid or missing")). }
false;public;0;6;;public void testReadEmptyFile() {     final Path path = getDataPath("/certs/pem-utils/empty.pem").     SslConfigException e = expectThrows(SslConfigException.class, () -> PemUtils.readPrivateKey(path, TESTNODE_PASSWORD)).     assertThat(e.getMessage(), containsString("file is empty")).     assertThat(e.getMessage(), containsString(path.toAbsolutePath().toString())). }
false;private;1;8;;private Key getKeyFromKeystore(String algo) throws Exception {     Path keystorePath = getDataPath("/certs/pem-utils/testnode.jks").     try (InputStream in = Files.newInputStream(keystorePath)) {         KeyStore keyStore = KeyStore.getInstance("jks").         keyStore.load(in, "testnode".toCharArray()).         return keyStore.getKey("testnode_" + algo, "testnode".toCharArray()).     } }
