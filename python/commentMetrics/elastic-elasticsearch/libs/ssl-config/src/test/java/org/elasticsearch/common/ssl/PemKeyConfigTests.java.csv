commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testBuildKeyConfigFromPemFilesWithoutPassword() throws Exception {     final Path cert = getDataPath("/certs/cert1/cert1.crt").     final Path key = getDataPath("/certs/cert1/cert1.key").     final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, new char[0]).     assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key)).     assertCertificateAndKey(keyConfig, "CN=cert1"). }
false;public;0;7;;public void testBuildKeyConfigFromPemFilesWithPassword() throws Exception {     final Path cert = getDataPath("/certs/cert2/cert2.crt").     final Path key = getDataPath("/certs/cert2/cert2.key").     final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, "c2-pass".toCharArray()).     assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key)).     assertCertificateAndKey(keyConfig, "CN=cert2"). }
false;public;0;6;;public void testKeyManagerFailsWithIncorrectPassword() throws Exception {     final Path cert = getDataPath("/certs/cert2/cert2.crt").     final Path key = getDataPath("/certs/cert2/cert2.key").     final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, "wrong-password".toCharArray()).     assertPasswordIsIncorrect(keyConfig, key). }
false;public;0;7;;public void testMissingCertificateFailsWithMeaningfulMessage() throws Exception {     final Path key = getDataPath("/certs/cert1/cert1.key").     final Path cert = key.getParent().resolve("dne.crt").     final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, new char[0]).     assertFileNotFound(keyConfig, "certificate", cert). }
false;public;0;7;;public void testMissingKeyFailsWithMeaningfulMessage() throws Exception {     final Path cert = getDataPath("/certs/cert1/cert1.crt").     final Path key = cert.getParent().resolve("dne.key").     final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, new char[0]).     assertFileNotFound(keyConfig, "private key", key). }
false;public;0;25;;public void testKeyConfigReloadsFileContents() throws Exception {     final Path cert1 = getDataPath("/certs/cert1/cert1.crt").     final Path key1 = getDataPath("/certs/cert1/cert1.key").     final Path cert2 = getDataPath("/certs/cert2/cert2.crt").     final Path key2 = getDataPath("/certs/cert2/cert2.key").     final Path cert = createTempFile("cert", ".crt").     final Path key = createTempFile("cert", ".key").     final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, new char[0]).     Files.copy(cert1, cert, StandardCopyOption.REPLACE_EXISTING).     Files.copy(key1, key, StandardCopyOption.REPLACE_EXISTING).     assertCertificateAndKey(keyConfig, "CN=cert1").     Files.copy(cert2, cert, StandardCopyOption.REPLACE_EXISTING).     Files.copy(key2, key, StandardCopyOption.REPLACE_EXISTING).     assertPasswordIsIncorrect(keyConfig, key).     Files.copy(cert1, cert, StandardCopyOption.REPLACE_EXISTING).     Files.copy(key1, key, StandardCopyOption.REPLACE_EXISTING).     assertCertificateAndKey(keyConfig, "CN=cert1").     Files.delete(cert).     assertFileNotFound(keyConfig, "certificate", cert). }
false;private;2;20;;private void assertCertificateAndKey(PemKeyConfig keyConfig, String expectedDN) throws CertificateParsingException {     final X509ExtendedKeyManager keyManager = keyConfig.createKeyManager().     assertThat(keyManager, notNullValue()).     final PrivateKey privateKey = keyManager.getPrivateKey("key").     assertThat(privateKey, notNullValue()).     assertThat(privateKey.getAlgorithm(), is("RSA")).     final X509Certificate[] chain = keyManager.getCertificateChain("key").     assertThat(chain, notNullValue()).     assertThat(chain, arrayWithSize(1)).     final X509Certificate certificate = chain[0].     assertThat(certificate.getIssuerDN().getName(), is("CN=Test CA 1")).     assertThat(certificate.getSubjectDN().getName(), is(expectedDN)).     assertThat(certificate.getSubjectAlternativeNames(), iterableWithSize(2)).     assertThat(certificate.getSubjectAlternativeNames(), containsInAnyOrder(Arrays.asList(DNS_NAME, "localhost"), Arrays.asList(IP_NAME, "127.0.0.1"))). }
false;private;2;6;;private void assertPasswordIsIncorrect(PemKeyConfig keyConfig, Path key) {     final SslConfigException exception = expectThrows(SslConfigException.class, keyConfig::createKeyManager).     assertThat(exception.getMessage(), containsString("private key file")).     assertThat(exception.getMessage(), containsString(key.toAbsolutePath().toString())).     assertThat(exception.getCause(), instanceOf(GeneralSecurityException.class)). }
false;private;3;7;;private void assertFileNotFound(PemKeyConfig keyConfig, String type, Path file) {     final SslConfigException exception = expectThrows(SslConfigException.class, keyConfig::createKeyManager).     assertThat(exception.getMessage(), containsString(type + " file")).     assertThat(exception.getMessage(), containsString(file.toAbsolutePath().toString())).     assertThat(exception.getMessage(), containsString("does not exist")).     assertThat(exception.getCause(), instanceOf(NoSuchFileException.class)). }
