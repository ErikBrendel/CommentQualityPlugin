commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testBuildTrustConfigFromSinglePemFile() throws Exception {     final Path cert = getDataPath("/certs/ca1/ca.crt").     final PemTrustConfig trustConfig = new PemTrustConfig(Collections.singletonList(cert)).     assertThat(trustConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert)).     assertCertificateChain(trustConfig, "CN=Test CA 1"). }
false;public;0;8;;public void testBuildTrustConfigFromMultiplePemFiles() throws Exception {     final Path cert1 = getDataPath("/certs/ca1/ca.crt").     final Path cert2 = getDataPath("/certs/ca2/ca.crt").     final Path cert3 = getDataPath("/certs/ca3/ca.crt").     final PemTrustConfig trustConfig = new PemTrustConfig(Arrays.asList(cert1, cert2, cert3)).     assertThat(trustConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert1, cert2, cert3)).     assertCertificateChain(trustConfig, "CN=Test CA 1", "CN=Test CA 2", "CN=Test CA 3"). }
false;public;0;7;;public void testBadFileFormatFails() throws Exception {     final Path ca = createTempFile("ca", ".crt").     Files.write(ca, randomByteArrayOfLength(128), StandardOpenOption.APPEND).     final PemTrustConfig trustConfig = new PemTrustConfig(Collections.singletonList(ca)).     assertThat(trustConfig.getDependentFiles(), Matchers.containsInAnyOrder(ca)).     assertInvalidFileFormat(trustConfig, ca). }
false;public;0;6;;public void testEmptyFileFails() throws Exception {     final Path ca = createTempFile("ca", ".crt").     final PemTrustConfig trustConfig = new PemTrustConfig(Collections.singletonList(ca)).     assertThat(trustConfig.getDependentFiles(), Matchers.containsInAnyOrder(ca)).     assertEmptyFile(trustConfig, ca). }
false;public;0;6;;public void testMissingFileFailsWithMeaningfulMessage() throws Exception {     final Path cert = getDataPath("/certs/ca1/ca.crt").getParent().resolve("dne.crt").     final PemTrustConfig trustConfig = new PemTrustConfig(Collections.singletonList(cert)).     assertThat(trustConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert)).     assertFileNotFound(trustConfig, cert). }
false;public;0;8;;public void testOneMissingFileFailsWithMeaningfulMessageEvenIfOtherFileExist() throws Exception {     final Path cert1 = getDataPath("/certs/ca1/ca.crt").     final Path cert2 = getDataPath("/certs/ca2/ca.crt").getParent().resolve("dne.crt").     final Path cert3 = getDataPath("/certs/ca3/ca.crt").     final PemTrustConfig trustConfig = new PemTrustConfig(Arrays.asList(cert1, cert2, cert3)).     assertThat(trustConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert1, cert2, cert3)).     assertFileNotFound(trustConfig, cert2). }
false;public;0;23;;public void testTrustConfigReloadsFileContents() throws Exception {     final Path cert1 = getDataPath("/certs/ca1/ca.crt").     final Path cert2 = getDataPath("/certs/ca2/ca.crt").     final Path cert3 = getDataPath("/certs/ca3/ca.crt").     final Path ca1 = createTempFile("ca1", ".crt").     final Path ca2 = createTempFile("ca2", ".crt").     final PemTrustConfig trustConfig = new PemTrustConfig(Arrays.asList(ca1, ca2)).     Files.copy(cert1, ca1, StandardCopyOption.REPLACE_EXISTING).     Files.copy(cert2, ca2, StandardCopyOption.REPLACE_EXISTING).     assertCertificateChain(trustConfig, "CN=Test CA 1", "CN=Test CA 2").     Files.copy(cert3, ca2, StandardCopyOption.REPLACE_EXISTING).     assertCertificateChain(trustConfig, "CN=Test CA 1", "CN=Test CA 3").     Files.delete(ca1).     assertFileNotFound(trustConfig, ca1).     Files.write(ca1, randomByteArrayOfLength(128), StandardOpenOption.CREATE).     assertInvalidFileFormat(trustConfig, ca1). }
false;private;2;10;;private void assertCertificateChain(PemTrustConfig trustConfig, String... caNames) {     final X509ExtendedTrustManager trustManager = trustConfig.createTrustManager().     final X509Certificate[] issuers = trustManager.getAcceptedIssuers().     final Set<String> issuerNames = Stream.of(issuers).map(X509Certificate::getSubjectDN).map(Principal::getName).collect(Collectors.toSet()).     assertThat(issuerNames, Matchers.containsInAnyOrder(caNames)). }
false;private;2;5;;private void assertEmptyFile(PemTrustConfig trustConfig, Path file) {     final SslConfigException exception = expectThrows(SslConfigException.class, trustConfig::createTrustManager).     assertThat(exception.getMessage(), Matchers.containsString(file.toAbsolutePath().toString())).     assertThat(exception.getMessage(), Matchers.containsString("failed to parse any certificates")). }
false;private;2;12;;private void assertInvalidFileFormat(PemTrustConfig trustConfig, Path file) {     if (inFipsJvm()) {         // When running on BC-FIPS, an invalid file format behaves like an empty file         assertEmptyFile(trustConfig, file).         return.     }     final SslConfigException exception = expectThrows(SslConfigException.class, trustConfig::createTrustManager).     assertThat(exception.getMessage(), Matchers.containsString(file.toAbsolutePath().toString())).     assertThat(exception.getMessage(), Matchers.containsString("cannot create trust")).     assertThat(exception.getMessage(), Matchers.containsString("PEM")).     assertThat(exception.getCause(), Matchers.instanceOf(GeneralSecurityException.class)). }
false;private;2;7;;private void assertFileNotFound(PemTrustConfig trustConfig, Path file) {     final SslConfigException exception = expectThrows(SslConfigException.class, trustConfig::createTrustManager).     assertThat(exception.getMessage(), Matchers.containsString("files do not exist")).     assertThat(exception.getMessage(), Matchers.containsString("PEM")).     assertThat(exception.getMessage(), Matchers.containsString(file.toAbsolutePath().toString())).     assertThat(exception.getCause(), Matchers.instanceOf(NoSuchFileException.class)). }
