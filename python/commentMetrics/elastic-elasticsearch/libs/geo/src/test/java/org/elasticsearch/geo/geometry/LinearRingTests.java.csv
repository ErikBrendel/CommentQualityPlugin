commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testBasicSerialization() {     UnsupportedOperationException ex = expectThrows(UnsupportedOperationException.class, () -> WellKnownText.toWKT(new LinearRing(new double[] { 1, 2, 3, 1 }, new double[] { 3, 4, 5, 3 }))).     assertEquals("line ring cannot be serialized using WKT", ex.getMessage()). }
false;public;0;15;;public void testInitValidation() {     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new LinearRing(new double[] { 1, 2, 3 }, new double[] { 3, 4, 5 })).     assertEquals("first and last points of the linear ring must be the same (it must close itself): lats[0]=1.0 lats[2]=3.0", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new LinearRing(new double[] { 1 }, new double[] { 3 })).     assertEquals("at least two points in the line is required", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new LinearRing(new double[] { 1, 2, 3, 1 }, new double[] { 3, 4, 500, 3 })).     assertEquals("invalid longitude 500.0. must be between -180.0 and 180.0", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new LinearRing(new double[] { 1, 100, 3, 1 }, new double[] { 3, 4, 5, 3 })).     assertEquals("invalid latitude 100.0. must be between -90.0 and 90.0", ex.getMessage()). }
false;public;0;3;;public void testVisitor() {     BaseGeometryTestCase.testVisitor(new LinearRing(new double[] { 1, 2, 3, 1 }, new double[] { 3, 4, 5, 3 })). }
