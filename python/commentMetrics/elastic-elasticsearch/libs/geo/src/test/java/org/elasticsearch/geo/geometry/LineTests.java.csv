commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Line createTestInstance() {     return randomLine(). }
false;public;0;7;;public void testBasicSerialization() throws IOException, ParseException {     assertEquals("linestring (3.0 1.0, 4.0 2.0)", WellKnownText.toWKT(new Line(new double[] { 1, 2 }, new double[] { 3, 4 }))).     assertEquals(new Line(new double[] { 1, 2 }, new double[] { 3, 4 }), WellKnownText.fromWKT("linestring (3 1, 4 2)")).     assertEquals("linestring EMPTY", WellKnownText.toWKT(Line.EMPTY)).     assertEquals(Line.EMPTY, WellKnownText.fromWKT("linestring EMPTY)")). }
false;public;0;10;;public void testInitValidation() {     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new Line(new double[] { 1 }, new double[] { 3 })).     assertEquals("at least two points in the line is required", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new Line(new double[] { 1, 2, 3, 1 }, new double[] { 3, 4, 500, 3 })).     assertEquals("invalid longitude 500.0. must be between -180.0 and 180.0", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new Line(new double[] { 1, 100, 3, 1 }, new double[] { 3, 4, 5, 3 })).     assertEquals("invalid latitude 100.0. must be between -90.0 and 90.0", ex.getMessage()). }
