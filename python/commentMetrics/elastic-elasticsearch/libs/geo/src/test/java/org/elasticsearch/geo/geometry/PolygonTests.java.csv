commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Polygon createTestInstance() {     return randomPolygon(). }
false;public;0;9;;public void testBasicSerialization() throws IOException, ParseException {     assertEquals("polygon ((3.0 1.0, 4.0 2.0, 5.0 3.0, 3.0 1.0))", WellKnownText.toWKT(new Polygon(new LinearRing(new double[] { 1, 2, 3, 1 }, new double[] { 3, 4, 5, 3 })))).     assertEquals(new Polygon(new LinearRing(new double[] { 1, 2, 3, 1 }, new double[] { 3, 4, 5, 3 })), WellKnownText.fromWKT("polygon ((3 1, 4 2, 5 3, 3 1))")).     assertEquals("polygon EMPTY", WellKnownText.toWKT(Polygon.EMPTY)).     assertEquals(Polygon.EMPTY, WellKnownText.fromWKT("polygon EMPTY)")). }
false;public;0;9;;public void testInitValidation() {     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new Polygon(new LinearRing(new double[] { 1, 2, 1 }, new double[] { 3, 4, 3 }))).     assertEquals("at least 4 polygon points required", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new Polygon(new LinearRing(new double[] { 1, 2, 3, 1 }, new double[] { 3, 4, 5, 3 }), null)).     assertEquals("holes must not be null", ex.getMessage()). }
