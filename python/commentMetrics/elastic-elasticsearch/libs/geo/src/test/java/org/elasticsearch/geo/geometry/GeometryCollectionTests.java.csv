commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected GeometryCollection<Geometry> createTestInstance() {     return randomGeometryCollection(). }
false;public;0;10;;public void testBasicSerialization() throws IOException, ParseException {     assertEquals("geometrycollection (point (20.0 10.0),point EMPTY)", WellKnownText.toWKT(new GeometryCollection<Geometry>(Arrays.asList(new Point(10, 20), Point.EMPTY)))).     assertEquals(new GeometryCollection<Geometry>(Arrays.asList(new Point(10, 20), Point.EMPTY)), WellKnownText.fromWKT("geometrycollection (point (20.0 10.0),point EMPTY)")).     assertEquals("geometrycollection EMPTY", WellKnownText.toWKT(GeometryCollection.EMPTY)).     assertEquals(GeometryCollection.EMPTY, WellKnownText.fromWKT("geometrycollection EMPTY)")). }
false;public;0;8;;@SuppressWarnings("ConstantConditions") public void testInitValidation() {     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new GeometryCollection<>(Collections.emptyList())).     assertEquals("the list of shapes cannot be null or empty", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new GeometryCollection<>(null)).     assertEquals("the list of shapes cannot be null or empty", ex.getMessage()). }
