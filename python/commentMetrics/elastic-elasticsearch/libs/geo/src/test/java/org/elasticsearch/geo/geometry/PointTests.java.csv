commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Point createTestInstance() {     return randomPoint(). }
false;public;0;7;;public void testBasicSerialization() throws IOException, ParseException {     assertEquals("point (20.0 10.0)", WellKnownText.toWKT(new Point(10, 20))).     assertEquals(new Point(10, 20), WellKnownText.fromWKT("point (20.0 10.0)")).     assertEquals("point EMPTY", WellKnownText.toWKT(Point.EMPTY)).     assertEquals(Point.EMPTY, WellKnownText.fromWKT("point EMPTY)")). }
false;public;0;7;;public void testInitValidation() {     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new Point(100, 10)).     assertEquals("invalid latitude 100.0. must be between -90.0 and 90.0", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new Point(10, 500)).     assertEquals("invalid longitude 500.0. must be between -180.0 and 180.0", ex.getMessage()). }
