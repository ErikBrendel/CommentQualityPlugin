commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Circle createTestInstance() {     return new Circle(randomDoubleBetween(-90, 90, true), randomDoubleBetween(-180, 180, true), randomDoubleBetween(0, 100, false)). }
false;public;0;7;;public void testBasicSerialization() throws IOException, ParseException {     assertEquals("circle (20.0 10.0 15.0)", WellKnownText.toWKT(new Circle(10, 20, 15))).     assertEquals(new Circle(10, 20, 15), WellKnownText.fromWKT("circle (20.0 10.0 15.0)")).     assertEquals("circle EMPTY", WellKnownText.toWKT(Circle.EMPTY)).     assertEquals(Circle.EMPTY, WellKnownText.fromWKT("circle EMPTY)")). }
false;public;0;10;;public void testInitValidation() {     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new Circle(10, 20, -1)).     assertEquals("Circle radius [-1.0] cannot be negative", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new Circle(100, 20, 1)).     assertEquals("invalid latitude 100.0. must be between -90.0 and 90.0", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> new Circle(10, 200, 1)).     assertEquals("invalid longitude 200.0. must be between -180.0 and 180.0", ex.getMessage()). }
