commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Before @SuppressWarnings("unchecked") public void setUpHandler() throws IOException {     channelExceptionHandler = mock(Consumer.class).     genericExceptionHandler = mock(Consumer.class).     readWriteHandler = mock(ReadWriteHandler.class).     channelFactory = mock(ChannelFactory.class).     NioSelector selector = mock(NioSelector.class).     ArrayList<NioSelector> selectors = new ArrayList<>().     selectors.add(selector).     selectorSupplier = new RoundRobinSupplier<>(selectors.toArray(new NioSelector[0])).     handler = new EventHandler(genericExceptionHandler, selectorSupplier).     SocketChannel rawChannel = mock(SocketChannel.class).     when(rawChannel.finishConnect()).thenReturn(true).     NioSocketChannel channel = new NioSocketChannel(rawChannel).     context = new DoNotRegisterSocketContext(channel, selector, channelExceptionHandler, readWriteHandler).     channel.setContext(context).     handler.handleRegistration(context).     ServerSocketChannel serverSocketChannel = mock(ServerSocketChannel.class).     when(serverSocketChannel.socket()).thenReturn(mock(ServerSocket.class)).     NioServerSocketChannel serverChannel = new NioServerSocketChannel(serverSocketChannel).     serverContext = new DoNotRegisterServerContext(serverChannel, mock(NioSelector.class), mock(Consumer.class)).     serverChannel.setContext(serverContext).     when(selector.isOnCurrentThread()).thenReturn(true). }
false;public;0;8;;public void testRegisterCallsContext() throws IOException {     NioSocketChannel channel = mock(NioSocketChannel.class).     SocketChannelContext channelContext = mock(SocketChannelContext.class).     when(channel.getContext()).thenReturn(channelContext).     when(channelContext.getSelectionKey()).thenReturn(new TestSelectionKey(0)).     handler.handleRegistration(channelContext).     verify(channelContext).register(). }
false;public;0;6;;public void testRegisterNonServerAddsOP_CONNECTAndOP_READInterest() throws IOException {     SocketChannelContext context = mock(SocketChannelContext.class).     when(context.getSelectionKey()).thenReturn(new TestSelectionKey(0)).     handler.handleRegistration(context).     assertEquals(SelectionKey.OP_READ | SelectionKey.OP_CONNECT, context.getSelectionKey().interestOps()). }
false;public;0;6;;public void testRegisterAddsAttachment() throws IOException {     ChannelContext<?> context = randomBoolean() ? mock(SocketChannelContext.class) : mock(ServerChannelContext.class).     when(context.getSelectionKey()).thenReturn(new TestSelectionKey(0)).     handler.handleRegistration(context).     assertEquals(context, context.getSelectionKey().attachment()). }
false;public;0;7;;public void testHandleServerRegisterSetsOP_ACCEPTInterest() throws IOException {     assertNull(serverContext.getSelectionKey()).     handler.handleRegistration(serverContext).     assertEquals(SelectionKey.OP_ACCEPT, serverContext.getSelectionKey().interestOps()). }
false;public;0;9;;public void testHandleAcceptCallsChannelFactory() throws IOException {     NioSocketChannel childChannel = new NioSocketChannel(mock(SocketChannel.class)).     NioSocketChannel nullChannel = null.     when(channelFactory.acceptNioChannel(same(serverContext), same(selectorSupplier))).thenReturn(childChannel, nullChannel).     handler.acceptChannel(serverContext).     verify(channelFactory, times(2)).acceptNioChannel(same(serverContext), same(selectorSupplier)). }
false;public;0;11;;public void testHandleAcceptCallsServerAcceptCallback() throws IOException {     NioSocketChannel childChannel = new NioSocketChannel(mock(SocketChannel.class)).     SocketChannelContext childContext = mock(SocketChannelContext.class).     childChannel.setContext(childContext).     ServerChannelContext serverChannelContext = mock(ServerChannelContext.class).     when(channelFactory.acceptNioChannel(same(serverContext), same(selectorSupplier))).thenReturn(childChannel).     handler.acceptChannel(serverChannelContext).     verify(serverChannelContext).acceptChannels(selectorSupplier). }
false;public;0;7;;public void testAcceptExceptionCallsExceptionHandler() throws IOException {     ServerChannelContext serverChannelContext = mock(ServerChannelContext.class).     IOException exception = new IOException().     handler.acceptException(serverChannelContext, exception).     verify(serverChannelContext).handleException(exception). }
false;public;0;7;;public void testRegisterWithPendingWritesAddsOP_CONNECTAndOP_READAndOP_WRITEInterest() throws IOException {     FlushReadyWrite flushReadyWrite = mock(FlushReadyWrite.class).     when(readWriteHandler.writeToBytes(flushReadyWrite)).thenReturn(Collections.singletonList(flushReadyWrite)).     context.queueWriteOperation(flushReadyWrite).     handler.handleRegistration(context).     assertEquals(SelectionKey.OP_READ | SelectionKey.OP_CONNECT | SelectionKey.OP_WRITE, context.getSelectionKey().interestOps()). }
false;public;0;5;;public void testRegistrationExceptionCallsExceptionHandler() throws IOException {     CancelledKeyException exception = new CancelledKeyException().     handler.registrationException(context, exception).     verify(channelExceptionHandler).accept(exception). }
false;public;0;5;;public void testConnectDoesNotRemoveOP_CONNECTInterestIfIncomplete() throws IOException {     SelectionKeyUtils.setConnectAndReadInterested(context.getSelectionKey()).     handler.handleConnect(context).     assertEquals(SelectionKey.OP_READ, context.getSelectionKey().interestOps()). }
false;public;0;5;;public void testConnectRemovesOP_CONNECTInterestIfComplete() throws IOException {     SelectionKeyUtils.setConnectAndReadInterested(context.getSelectionKey()).     handler.handleConnect(context).     assertEquals(SelectionKey.OP_READ, context.getSelectionKey().interestOps()). }
false;public;0;5;;public void testConnectExceptionCallsExceptionHandler() throws IOException {     IOException exception = new IOException().     handler.connectException(context, exception).     verify(channelExceptionHandler).accept(exception). }
false;public;0;5;;public void testHandleReadDelegatesToContext() throws IOException {     SocketChannelContext context = mock(SocketChannelContext.class).     handler.handleRead(context).     verify(context).read(). }
false;public;0;5;;public void testReadExceptionCallsExceptionHandler() {     IOException exception = new IOException().     handler.readException(context, exception).     verify(channelExceptionHandler).accept(exception). }
false;public;0;5;;public void testWriteExceptionCallsExceptionHandler() {     IOException exception = new IOException().     handler.writeException(context, exception).     verify(channelExceptionHandler).accept(exception). }
false;public;0;10;;public void testPostHandlingCallWillCloseTheChannelIfReady() throws IOException {     NioSocketChannel channel = mock(NioSocketChannel.class).     SocketChannelContext context = mock(SocketChannelContext.class).     when(channel.getContext()).thenReturn(context).     when(context.selectorShouldClose()).thenReturn(true).     handler.postHandling(context).     verify(context).closeFromSelector(). }
false;public;0;12;;public void testPostHandlingCallWillNotCloseTheChannelIfNotReady() throws IOException {     SocketChannelContext context = mock(SocketChannelContext.class).     when(context.getSelectionKey()).thenReturn(new TestSelectionKey(SelectionKey.OP_READ | SelectionKey.OP_WRITE)).     when(context.selectorShouldClose()).thenReturn(false).     NioSocketChannel channel = mock(NioSocketChannel.class).     when(channel.getContext()).thenReturn(context).     handler.postHandling(context).     verify(context, times(0)).closeFromSelector(). }
false;public;0;13;;public void testPostHandlingWillAddWriteIfNecessary() throws IOException {     TestSelectionKey selectionKey = new TestSelectionKey(SelectionKey.OP_READ).     SocketChannelContext context = mock(SocketChannelContext.class).     when(context.getSelectionKey()).thenReturn(selectionKey).     when(context.readyForFlush()).thenReturn(true).     NioSocketChannel channel = mock(NioSocketChannel.class).     when(channel.getContext()).thenReturn(context).     assertEquals(SelectionKey.OP_READ, selectionKey.interestOps()).     handler.postHandling(context).     assertEquals(SelectionKey.OP_READ | SelectionKey.OP_WRITE, selectionKey.interestOps()). }
false;public;0;14;;public void testPostHandlingWillRemoveWriteIfNecessary() throws IOException {     TestSelectionKey key = new TestSelectionKey(SelectionKey.OP_READ | SelectionKey.OP_WRITE).     SocketChannelContext context = mock(SocketChannelContext.class).     when(context.getSelectionKey()).thenReturn(key).     when(context.readyForFlush()).thenReturn(false).     NioSocketChannel channel = mock(NioSocketChannel.class).     when(channel.getContext()).thenReturn(context).     assertEquals(SelectionKey.OP_READ | SelectionKey.OP_WRITE, key.interestOps()).     handler.postHandling(context).     assertEquals(SelectionKey.OP_READ, key.interestOps()). }
false;public;0;5;;public void testListenerExceptionCallsGenericExceptionHandler() throws IOException {     RuntimeException listenerException = new RuntimeException().     handler.taskException(listenerException).     verify(genericExceptionHandler).accept(listenerException). }
false;public;0;4;;@Override public void register() {     setSelectionKey(new TestSelectionKey(0)). }
false;public;0;4;;@Override public void register() {     setSelectionKey(new TestSelectionKey(0)). }
