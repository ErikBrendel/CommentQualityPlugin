commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @SuppressWarnings("unchecked") public void setUp() throws Exception {     super.setUp().     nioGroup = new NioSelectorGroup(daemonThreadFactory(Settings.EMPTY, "acceptor"), 1, daemonThreadFactory(Settings.EMPTY, "selector"), 1, (s) -> new EventHandler(mock(Consumer.class), s)). }
false;public;0;5;;@Override public void tearDown() throws Exception {     nioGroup.close().     super.tearDown(). }
false;public;0;5;;public void testStartAndClose() throws IOException {     // ctor starts threads. So we are testing that close() stops the threads. Our thread linger checks     // will throw an exception is stop fails     nioGroup.close(). }
false;public;0;11;;@SuppressWarnings("unchecked") public void testCannotOperateAfterClose() throws IOException {     nioGroup.close().     IllegalStateException ise = expectThrows(IllegalStateException.class, () -> nioGroup.bindServerChannel(mock(InetSocketAddress.class), mock(ChannelFactory.class))).     assertEquals("NioGroup is closed.", ise.getMessage()).     ise = expectThrows(IllegalStateException.class, () -> nioGroup.openChannel(mock(InetSocketAddress.class), mock(ChannelFactory.class))).     assertEquals("NioGroup is closed.", ise.getMessage()). }
false;public;0;4;;public void testCanCloseTwice() throws IOException {     nioGroup.close().     nioGroup.close(). }
false;public;0;11;;@SuppressWarnings("unchecked") public void testExceptionAtStartIsHandled() throws IOException {     RuntimeException ex = new RuntimeException().     CheckedRunnable<IOException> ctor = () -> new NioSelectorGroup(r -> {         throw ex.     }, 1, daemonThreadFactory(Settings.EMPTY, "selector"), 1, (s) -> new EventHandler(mock(Consumer.class), s)).     RuntimeException runtimeException = expectThrows(RuntimeException.class, ctor::run).     assertSame(ex, runtimeException). // ctor starts threads. So we are testing that a failure to construct will stop threads. Our thread // linger checks will throw an exception is stop fails }
