commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @SuppressWarnings("unchecked") public void setupFactory() throws IOException {     rawChannelFactory = mock(ChannelFactory.RawChannelFactory.class).     channelFactory = new TestChannelFactory(rawChannelFactory).     socketSelector = mock(NioSelector.class).     acceptingSelector = mock(NioSelector.class).     socketSelectorSupplier = mock(Supplier.class).     acceptingSelectorSupplier = mock(Supplier.class).     rawChannel = SocketChannel.open().     rawServerChannel = ServerSocketChannel.open().     when(socketSelectorSupplier.get()).thenReturn(socketSelector).     when(acceptingSelectorSupplier.get()).thenReturn(acceptingSelector). }
false;public;0;4;;@After public void ensureClosed() throws IOException {     IOUtils.closeWhileHandlingException(rawChannel, rawServerChannel). }
false;public;0;10;;public void testAcceptChannel() throws IOException {     ServerChannelContext serverChannelContext = mock(ServerChannelContext.class).     when(rawChannelFactory.acceptNioChannel(serverChannelContext)).thenReturn(rawChannel).     NioSocketChannel channel = channelFactory.acceptNioChannel(serverChannelContext, socketSelectorSupplier).     verify(socketSelector).scheduleForRegistration(channel).     assertEquals(rawChannel, channel.getRawChannel()). }
false;public;0;9;;public void testAcceptedChannelRejected() throws IOException {     ServerChannelContext serverChannelContext = mock(ServerChannelContext.class).     when(rawChannelFactory.acceptNioChannel(serverChannelContext)).thenReturn(rawChannel).     doThrow(new IllegalStateException()).when(socketSelector).scheduleForRegistration(any()).     expectThrows(IllegalStateException.class, () -> channelFactory.acceptNioChannel(serverChannelContext, socketSelectorSupplier)).     assertFalse(rawChannel.isOpen()). }
false;public;0;10;;public void testOpenChannel() throws IOException {     InetSocketAddress address = mock(InetSocketAddress.class).     when(rawChannelFactory.openNioChannel(same(address))).thenReturn(rawChannel).     NioSocketChannel channel = channelFactory.openNioChannel(address, socketSelectorSupplier).     verify(socketSelector).scheduleForRegistration(channel).     assertEquals(rawChannel, channel.getRawChannel()). }
false;public;0;9;;public void testOpenedChannelRejected() throws IOException {     InetSocketAddress address = mock(InetSocketAddress.class).     when(rawChannelFactory.openNioChannel(same(address))).thenReturn(rawChannel).     doThrow(new IllegalStateException()).when(socketSelector).scheduleForRegistration(any()).     expectThrows(IllegalStateException.class, () -> channelFactory.openNioChannel(address, socketSelectorSupplier)).     assertFalse(rawChannel.isOpen()). }
false;public;0;10;;public void testOpenServerChannel() throws IOException {     InetSocketAddress address = mock(InetSocketAddress.class).     when(rawChannelFactory.openNioServerSocketChannel(same(address))).thenReturn(rawServerChannel).     NioServerSocketChannel channel = channelFactory.openNioServerSocketChannel(address, acceptingSelectorSupplier).     verify(acceptingSelector).scheduleForRegistration(channel).     assertEquals(rawServerChannel, channel.getRawChannel()). }
false;public;0;9;;public void testOpenedServerChannelRejected() throws IOException {     InetSocketAddress address = mock(InetSocketAddress.class).     when(rawChannelFactory.openNioServerSocketChannel(same(address))).thenReturn(rawServerChannel).     doThrow(new IllegalStateException()).when(acceptingSelector).scheduleForRegistration(any()).     expectThrows(IllegalStateException.class, () -> channelFactory.openNioServerSocketChannel(address, acceptingSelectorSupplier)).     assertFalse(rawServerChannel.isOpen()). }
false;public;2;6;;@Override public NioSocketChannel createChannel(NioSelector selector, SocketChannel channel) throws IOException {     NioSocketChannel nioSocketChannel = new NioSocketChannel(channel).     nioSocketChannel.setContext(mock(SocketChannelContext.class)).     return nioSocketChannel. }
false;public;2;4;;@Override public NioServerSocketChannel createServerChannel(NioSelector selector, ServerSocketChannel channel) throws IOException {     return new NioServerSocketChannel(channel). }
