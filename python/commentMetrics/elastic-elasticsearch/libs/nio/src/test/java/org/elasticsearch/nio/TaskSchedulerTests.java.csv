commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testScheduleTask() {     AtomicBoolean complete = new AtomicBoolean(false).     long executeTime = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(10).     scheduler.scheduleAtRelativeTime(() -> complete.set(true), executeTime).     while (true) {         long nanoTime = System.nanoTime().         Runnable runnable = scheduler.pollTask(nanoTime).         if (nanoTime - executeTime >= 0) {             runnable.run().             assertTrue(complete.get()).             break.         } else {             assertNull(runnable).             LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(1)).         }     } }
false;public;0;7;;public void testPollScheduleTaskAtExactTime() {     long executeTime = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(10).     scheduler.scheduleAtRelativeTime(() -> {     }, executeTime).     assertNull(scheduler.pollTask(executeTime - 1)).     assertNotNull(scheduler.pollTask(executeTime)). }
false;public;0;22;;public void testTaskOrdering() {     AtomicBoolean first = new AtomicBoolean(false).     AtomicBoolean second = new AtomicBoolean(false).     AtomicBoolean third = new AtomicBoolean(false).     long executeTime = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(10).     scheduler.scheduleAtRelativeTime(() -> third.set(true), executeTime + 2).     scheduler.scheduleAtRelativeTime(() -> first.set(true), executeTime).     scheduler.scheduleAtRelativeTime(() -> second.set(true), executeTime + 1).     scheduler.pollTask(executeTime + 10).run().     assertTrue(first.get()).     assertFalse(second.get()).     assertFalse(third.get()).     scheduler.pollTask(executeTime + 10).run().     assertTrue(first.get()).     assertTrue(second.get()).     assertFalse(third.get()).     scheduler.pollTask(executeTime + 10).run().     assertTrue(first.get()).     assertTrue(second.get()).     assertTrue(third.get()). }
false;public;0;13;;public void testTaskCancel() {     AtomicBoolean first = new AtomicBoolean(false).     AtomicBoolean second = new AtomicBoolean(false).     long executeTime = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(10).     Runnable cancellable = scheduler.scheduleAtRelativeTime(() -> first.set(true), executeTime).     scheduler.scheduleAtRelativeTime(() -> second.set(true), executeTime + 1).     cancellable.run().     scheduler.pollTask(executeTime + 10).run().     assertFalse(first.get()).     assertTrue(second.get()).     assertNull(scheduler.pollTask(executeTime + 10)). }
false;public;0;7;;public void testNanosUntilNextTask() {     long nanoTime = System.nanoTime().     long executeTime = nanoTime + TimeUnit.MILLISECONDS.toNanos(10).     scheduler.scheduleAtRelativeTime(() -> {     }, executeTime).     assertEquals(TimeUnit.MILLISECONDS.toNanos(10), scheduler.nanosUntilNextTask(nanoTime)).     assertEquals(TimeUnit.MILLISECONDS.toNanos(5), scheduler.nanosUntilNextTask(nanoTime + TimeUnit.MILLISECONDS.toNanos(5))). }
