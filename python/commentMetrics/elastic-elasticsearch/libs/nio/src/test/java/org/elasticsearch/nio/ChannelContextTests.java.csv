commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@SuppressWarnings("unchecked") @Before public void setup() throws Exception {     super.setUp().     exceptionHandler = mock(Consumer.class). }
false;public;0;21;;public void testCloseSuccess() throws IOException {     FakeRawChannel rawChannel = new FakeRawChannel(null).     context = new TestChannelContext(rawChannel, exceptionHandler).     AtomicBoolean listenerCalled = new AtomicBoolean(false).     context.addCloseListener((v, t) -> {         if (t == null) {             listenerCalled.compareAndSet(false, true).         } else {             throw new AssertionError("Close should not fail").         }     }).     assertFalse(rawChannel.hasCloseBeenCalled()).     assertTrue(context.isOpen()).     assertFalse(listenerCalled.get()).     context.closeFromSelector().     assertTrue(rawChannel.hasCloseBeenCalled()).     assertFalse(context.isOpen()).     assertTrue(listenerCalled.get()). }
false;public;0;22;;public void testCloseException() throws IOException {     IOException ioException = new IOException("boom").     FakeRawChannel rawChannel = new FakeRawChannel(ioException).     context = new TestChannelContext(rawChannel, exceptionHandler).     AtomicReference<Exception> exception = new AtomicReference<>().     context.addCloseListener((v, t) -> {         if (t == null) {             throw new AssertionError("Close should not fail").         } else {             exception.set(t).         }     }).     assertFalse(rawChannel.hasCloseBeenCalled()).     assertTrue(context.isOpen()).     assertNull(exception.get()).     expectThrows(IOException.class, context::closeFromSelector).     assertTrue(rawChannel.hasCloseBeenCalled()).     assertFalse(context.isOpen()).     assertSame(ioException, exception.get()). }
false;public;0;6;;public void testExceptionsAreDelegatedToHandler() {     context = new TestChannelContext(new FakeRawChannel(null), exceptionHandler).     IOException exception = new IOException().     context.handleException(exception).     verify(exceptionHandler).accept(exception). }
false;public;0;4;;@Override public void closeChannel() {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public NioSelector getSelector() {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public NioChannel getChannel() {     throw new UnsupportedOperationException("not implemented"). }
false;protected;0;7;;@Override protected void implCloseChannel() throws IOException {     hasCloseBeenCalled.compareAndSet(false, true).     if (exceptionOnClose != null) {         throw exceptionOnClose.     } }
false;private;0;3;;private boolean hasCloseBeenCalled() {     return hasCloseBeenCalled.get(). }
false;public;1;4;;@Override public NetworkChannel bind(SocketAddress local) throws IOException {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public SocketAddress getLocalAddress() throws IOException {     throw new UnsupportedOperationException("not implemented"). }
false;public;2;4;;@Override public <T> NetworkChannel setOption(SocketOption<T> name, T value) throws IOException {     throw new UnsupportedOperationException("not implemented"). }
false;public;1;4;;@Override public <T> T getOption(SocketOption<T> name) throws IOException {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public Set<SocketOption<?>> supportedOptions() {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public SelectorProvider provider() {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public int validOps() {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public boolean isRegistered() {     throw new UnsupportedOperationException("not implemented"). }
false;public;1;4;;@Override public SelectionKey keyFor(Selector sel) {     throw new UnsupportedOperationException("not implemented"). }
false;public;3;4;;@Override public SelectionKey register(Selector sel, int ops, Object att) throws ClosedChannelException {     throw new UnsupportedOperationException("not implemented"). }
false;public;1;4;;@Override public SelectableChannel configureBlocking(boolean block) throws IOException {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public boolean isBlocking() {     throw new UnsupportedOperationException("not implemented"). }
false;public;0;4;;@Override public Object blockingLock() {     throw new UnsupportedOperationException("not implemented"). }
