commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public int read() throws IOException {     int bytesRead = readFromChannel(channelBuffer).     if (bytesRead == 0) {         return 0.     }     handleReadBytes().     return bytesRead. }
false;public;0;18;;@Override public void flushChannel() throws IOException {     getSelector().assertOnSelectorThread().     boolean lastOpCompleted = true.     FlushOperation flushOperation.     while (lastOpCompleted && (flushOperation = getPendingFlush()) != null) {         try {             if (singleFlush(flushOperation)) {                 currentFlushOperationComplete().             } else {                 lastOpCompleted = false.             }         } catch (IOException e) {             currentFlushOperationFailed(e).             throw e.         }     } }
false;public;0;6;;@Override public void closeChannel() {     if (isClosing.compareAndSet(false, true)) {         getSelector().queueChannelClose(channel).     } }
false;public;0;4;;@Override public boolean selectorShouldClose() {     return closeNow() || isClosing.get(). }
true;private;1;4;/**  * Returns a boolean indicating if the operation was fully flushed.  */ ;/**  * Returns a boolean indicating if the operation was fully flushed.  */ private boolean singleFlush(FlushOperation flushOperation) throws IOException {     flushToChannel(flushOperation).     return flushOperation.isFullyFlushed(). }
