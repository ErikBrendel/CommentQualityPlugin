# id;timestamp;commentText;codeText;commentWords;codeWords
SocketChannelContext -> public abstract boolean selectorShouldClose()_;1528706846;This method indicates if a selector should close this channel.__@return a boolean indicating if the selector should close;public abstract boolean selectorShouldClose()_;this,method,indicates,if,a,selector,should,close,this,channel,return,a,boolean,indicating,if,the,selector,should,close;public,abstract,boolean,selector,should,close
SocketChannelContext -> public abstract boolean selectorShouldClose()_;1528930607;This method indicates if a selector should close this channel.__@return a boolean indicating if the selector should close;public abstract boolean selectorShouldClose()_;this,method,indicates,if,a,selector,should,close,this,channel,return,a,boolean,indicating,if,the,selector,should,close;public,abstract,boolean,selector,should,close
SocketChannelContext -> public abstract boolean selectorShouldClose()_;1531729807;This method indicates if a selector should close this channel.__@return a boolean indicating if the selector should close;public abstract boolean selectorShouldClose()_;this,method,indicates,if,a,selector,should,close,this,channel,return,a,boolean,indicating,if,the,selector,should,close;public,abstract,boolean,selector,should,close
SocketChannelContext -> public abstract boolean selectorShouldClose()_;1544144947;This method indicates if a selector should close this channel.__@return a boolean indicating if the selector should close;public abstract boolean selectorShouldClose()_;this,method,indicates,if,a,selector,should,close,this,channel,return,a,boolean,indicating,if,the,selector,should,close;public,abstract,boolean,selector,should,close
SocketChannelContext -> public abstract boolean selectorShouldClose()_;1547059584;This method indicates if a selector should close this channel.__@return a boolean indicating if the selector should close;public abstract boolean selectorShouldClose()_;this,method,indicates,if,a,selector,should,close,this,channel,return,a,boolean,indicating,if,the,selector,should,close;public,abstract,boolean,selector,should,close
SocketChannelContext -> public abstract boolean selectorShouldClose()_;1547137040;This method indicates if a selector should close this channel.__@return a boolean indicating if the selector should close;public abstract boolean selectorShouldClose()_;this,method,indicates,if,a,selector,should,close,this,channel,return,a,boolean,indicating,if,the,selector,should,close;public,abstract,boolean,selector,should,close
SocketChannelContext -> public abstract boolean selectorShouldClose()_;1550637215;This method indicates if a selector should close this channel.__@return a boolean indicating if the selector should close;public abstract boolean selectorShouldClose()_;this,method,indicates,if,a,selector,should,close,this,channel,return,a,boolean,indicating,if,the,selector,should,close;public,abstract,boolean,selector,should,close
SocketChannelContext -> public boolean connect() throws IOException;1528706846;This method will attempt to complete the connection process for this channel. It should be called for_new channels or for a channel that has produced a OP_CONNECT event. If this method returns true then_the connection is complete and the channel is ready for reads and writes. If it returns false, the_channel is not yet connected and this method should be called again when a OP_CONNECT event is_received.__@return true if the connection process is complete_@throws IOException if an I/O error occurs;public boolean connect() throws IOException {_        if (isConnectComplete()) {_            return true__        } else if (connectContext.isCompletedExceptionally()) {_            Exception exception = connectException__            if (exception == null) {_                throw new AssertionError("Should have received connection exception")__            } else if (exception instanceof IOException) {_                throw (IOException) exception__            } else {_                throw (RuntimeException) exception__            }_        }__        boolean isConnected = rawChannel.isConnected()__        if (isConnected == false) {_            try {_                isConnected = rawChannel.finishConnect()__            } catch (IOException | RuntimeException e) {_                connectException = e__                connectContext.completeExceptionally(e)__                throw e__            }_        }_        if (isConnected) {_            connectContext.complete(null)__        }_        return isConnected__    };this,method,will,attempt,to,complete,the,connection,process,for,this,channel,it,should,be,called,for,new,channels,or,for,a,channel,that,has,produced,a,event,if,this,method,returns,true,then,the,connection,is,complete,and,the,channel,is,ready,for,reads,and,writes,if,it,returns,false,the,channel,is,not,yet,connected,and,this,method,should,be,called,again,when,a,event,is,received,return,true,if,the,connection,process,is,complete,throws,ioexception,if,an,i,o,error,occurs;public,boolean,connect,throws,ioexception,if,is,connect,complete,return,true,else,if,connect,context,is,completed,exceptionally,exception,exception,connect,exception,if,exception,null,throw,new,assertion,error,should,have,received,connection,exception,else,if,exception,instanceof,ioexception,throw,ioexception,exception,else,throw,runtime,exception,exception,boolean,is,connected,raw,channel,is,connected,if,is,connected,false,try,is,connected,raw,channel,finish,connect,catch,ioexception,runtime,exception,e,connect,exception,e,connect,context,complete,exceptionally,e,throw,e,if,is,connected,connect,context,complete,null,return,is,connected
SocketChannelContext -> public boolean connect() throws IOException;1528930607;This method will attempt to complete the connection process for this channel. It should be called for_new channels or for a channel that has produced a OP_CONNECT event. If this method returns true then_the connection is complete and the channel is ready for reads and writes. If it returns false, the_channel is not yet connected and this method should be called again when a OP_CONNECT event is_received.__@return true if the connection process is complete_@throws IOException if an I/O error occurs;public boolean connect() throws IOException {_        if (isConnectComplete()) {_            return true__        } else if (connectContext.isCompletedExceptionally()) {_            Exception exception = connectException__            if (exception == null) {_                throw new AssertionError("Should have received connection exception")__            } else if (exception instanceof IOException) {_                throw (IOException) exception__            } else {_                throw (RuntimeException) exception__            }_        }__        boolean isConnected = rawChannel.isConnected()__        if (isConnected == false) {_            try {_                isConnected = rawChannel.finishConnect()__            } catch (IOException | RuntimeException e) {_                connectException = e__                connectContext.completeExceptionally(e)__                throw e__            }_        }_        if (isConnected) {_            connectContext.complete(null)__        }_        return isConnected__    };this,method,will,attempt,to,complete,the,connection,process,for,this,channel,it,should,be,called,for,new,channels,or,for,a,channel,that,has,produced,a,event,if,this,method,returns,true,then,the,connection,is,complete,and,the,channel,is,ready,for,reads,and,writes,if,it,returns,false,the,channel,is,not,yet,connected,and,this,method,should,be,called,again,when,a,event,is,received,return,true,if,the,connection,process,is,complete,throws,ioexception,if,an,i,o,error,occurs;public,boolean,connect,throws,ioexception,if,is,connect,complete,return,true,else,if,connect,context,is,completed,exceptionally,exception,exception,connect,exception,if,exception,null,throw,new,assertion,error,should,have,received,connection,exception,else,if,exception,instanceof,ioexception,throw,ioexception,exception,else,throw,runtime,exception,exception,boolean,is,connected,raw,channel,is,connected,if,is,connected,false,try,is,connected,raw,channel,finish,connect,catch,ioexception,runtime,exception,e,connect,exception,e,connect,context,complete,exceptionally,e,throw,e,if,is,connected,connect,context,complete,null,return,is,connected
SocketChannelContext -> public boolean connect() throws IOException;1531729807;This method will attempt to complete the connection process for this channel. It should be called for_new channels or for a channel that has produced a OP_CONNECT event. If this method returns true then_the connection is complete and the channel is ready for reads and writes. If it returns false, the_channel is not yet connected and this method should be called again when a OP_CONNECT event is_received.__@return true if the connection process is complete_@throws IOException if an I/O error occurs;public boolean connect() throws IOException {_        if (isConnectComplete()) {_            return true__        } else if (connectContext.isCompletedExceptionally()) {_            Exception exception = connectException__            if (exception == null) {_                throw new AssertionError("Should have received connection exception")__            } else if (exception instanceof IOException) {_                throw (IOException) exception__            } else {_                throw (RuntimeException) exception__            }_        }__        boolean isConnected = rawChannel.isConnected()__        if (isConnected == false) {_            try {_                isConnected = rawChannel.finishConnect()__            } catch (IOException | RuntimeException e) {_                connectException = e__                connectContext.completeExceptionally(e)__                throw e__            }_        }_        if (isConnected) {_            connectContext.complete(null)__        }_        return isConnected__    };this,method,will,attempt,to,complete,the,connection,process,for,this,channel,it,should,be,called,for,new,channels,or,for,a,channel,that,has,produced,a,event,if,this,method,returns,true,then,the,connection,is,complete,and,the,channel,is,ready,for,reads,and,writes,if,it,returns,false,the,channel,is,not,yet,connected,and,this,method,should,be,called,again,when,a,event,is,received,return,true,if,the,connection,process,is,complete,throws,ioexception,if,an,i,o,error,occurs;public,boolean,connect,throws,ioexception,if,is,connect,complete,return,true,else,if,connect,context,is,completed,exceptionally,exception,exception,connect,exception,if,exception,null,throw,new,assertion,error,should,have,received,connection,exception,else,if,exception,instanceof,ioexception,throw,ioexception,exception,else,throw,runtime,exception,exception,boolean,is,connected,raw,channel,is,connected,if,is,connected,false,try,is,connected,raw,channel,finish,connect,catch,ioexception,runtime,exception,e,connect,exception,e,connect,context,complete,exceptionally,e,throw,e,if,is,connected,connect,context,complete,null,return,is,connected
SocketChannelContext -> public boolean connect() throws IOException;1544144947;This method will attempt to complete the connection process for this channel. It should be called for_new channels or for a channel that has produced a OP_CONNECT event. If this method returns true then_the connection is complete and the channel is ready for reads and writes. If it returns false, the_channel is not yet connected and this method should be called again when a OP_CONNECT event is_received.__@return true if the connection process is complete_@throws IOException if an I/O error occurs;public boolean connect() throws IOException {_        if (isConnectComplete()) {_            return true__        } else if (connectContext.isCompletedExceptionally()) {_            Exception exception = connectException__            if (exception == null) {_                throw new AssertionError("Should have received connection exception")__            } else if (exception instanceof IOException) {_                throw (IOException) exception__            } else {_                throw (RuntimeException) exception__            }_        }__        boolean isConnected = rawChannel.isConnected()__        if (isConnected == false) {_            try {_                isConnected = rawChannel.finishConnect()__            } catch (IOException | RuntimeException e) {_                connectException = e__                connectContext.completeExceptionally(e)__                throw e__            }_        }_        if (isConnected) {_            connectContext.complete(null)__        }_        return isConnected__    };this,method,will,attempt,to,complete,the,connection,process,for,this,channel,it,should,be,called,for,new,channels,or,for,a,channel,that,has,produced,a,event,if,this,method,returns,true,then,the,connection,is,complete,and,the,channel,is,ready,for,reads,and,writes,if,it,returns,false,the,channel,is,not,yet,connected,and,this,method,should,be,called,again,when,a,event,is,received,return,true,if,the,connection,process,is,complete,throws,ioexception,if,an,i,o,error,occurs;public,boolean,connect,throws,ioexception,if,is,connect,complete,return,true,else,if,connect,context,is,completed,exceptionally,exception,exception,connect,exception,if,exception,null,throw,new,assertion,error,should,have,received,connection,exception,else,if,exception,instanceof,ioexception,throw,ioexception,exception,else,throw,runtime,exception,exception,boolean,is,connected,raw,channel,is,connected,if,is,connected,false,try,is,connected,raw,channel,finish,connect,catch,ioexception,runtime,exception,e,connect,exception,e,connect,context,complete,exceptionally,e,throw,e,if,is,connected,connect,context,complete,null,return,is,connected
SocketChannelContext -> public boolean connect() throws IOException;1547059584;This method will attempt to complete the connection process for this channel. It should be called for_new channels or for a channel that has produced a OP_CONNECT event. If this method returns true then_the connection is complete and the channel is ready for reads and writes. If it returns false, the_channel is not yet connected and this method should be called again when a OP_CONNECT event is_received.__@return true if the connection process is complete_@throws IOException if an I/O error occurs;public boolean connect() throws IOException {_        if (isConnectComplete()) {_            return true__        } else if (connectContext.isCompletedExceptionally()) {_            Exception exception = connectException__            if (exception == null) {_                throw new AssertionError("Should have received connection exception")__            } else if (exception instanceof IOException) {_                throw (IOException) exception__            } else {_                throw (RuntimeException) exception__            }_        }__        boolean isConnected = rawChannel.isConnected()__        if (isConnected == false) {_            try {_                isConnected = rawChannel.finishConnect()__            } catch (IOException | RuntimeException e) {_                connectException = e__                connectContext.completeExceptionally(e)__                throw e__            }_        }_        if (isConnected) {_            connectContext.complete(null)__        }_        return isConnected__    };this,method,will,attempt,to,complete,the,connection,process,for,this,channel,it,should,be,called,for,new,channels,or,for,a,channel,that,has,produced,a,event,if,this,method,returns,true,then,the,connection,is,complete,and,the,channel,is,ready,for,reads,and,writes,if,it,returns,false,the,channel,is,not,yet,connected,and,this,method,should,be,called,again,when,a,event,is,received,return,true,if,the,connection,process,is,complete,throws,ioexception,if,an,i,o,error,occurs;public,boolean,connect,throws,ioexception,if,is,connect,complete,return,true,else,if,connect,context,is,completed,exceptionally,exception,exception,connect,exception,if,exception,null,throw,new,assertion,error,should,have,received,connection,exception,else,if,exception,instanceof,ioexception,throw,ioexception,exception,else,throw,runtime,exception,exception,boolean,is,connected,raw,channel,is,connected,if,is,connected,false,try,is,connected,raw,channel,finish,connect,catch,ioexception,runtime,exception,e,connect,exception,e,connect,context,complete,exceptionally,e,throw,e,if,is,connected,connect,context,complete,null,return,is,connected
SocketChannelContext -> public boolean connect() throws IOException;1547137040;This method will attempt to complete the connection process for this channel. It should be called for_new channels or for a channel that has produced a OP_CONNECT event. If this method returns true then_the connection is complete and the channel is ready for reads and writes. If it returns false, the_channel is not yet connected and this method should be called again when a OP_CONNECT event is_received.__@return true if the connection process is complete_@throws IOException if an I/O error occurs;public boolean connect() throws IOException {_        if (isConnectComplete()) {_            return true__        } else if (connectContext.isCompletedExceptionally()) {_            Exception exception = connectException__            if (exception == null) {_                throw new AssertionError("Should have received connection exception")__            } else if (exception instanceof IOException) {_                throw (IOException) exception__            } else {_                throw (RuntimeException) exception__            }_        }__        boolean isConnected = rawChannel.isConnected()__        if (isConnected == false) {_            try {_                isConnected = rawChannel.finishConnect()__            } catch (IOException | RuntimeException e) {_                connectException = e__                connectContext.completeExceptionally(e)__                throw e__            }_        }_        if (isConnected) {_            connectContext.complete(null)__        }_        return isConnected__    };this,method,will,attempt,to,complete,the,connection,process,for,this,channel,it,should,be,called,for,new,channels,or,for,a,channel,that,has,produced,a,event,if,this,method,returns,true,then,the,connection,is,complete,and,the,channel,is,ready,for,reads,and,writes,if,it,returns,false,the,channel,is,not,yet,connected,and,this,method,should,be,called,again,when,a,event,is,received,return,true,if,the,connection,process,is,complete,throws,ioexception,if,an,i,o,error,occurs;public,boolean,connect,throws,ioexception,if,is,connect,complete,return,true,else,if,connect,context,is,completed,exceptionally,exception,exception,connect,exception,if,exception,null,throw,new,assertion,error,should,have,received,connection,exception,else,if,exception,instanceof,ioexception,throw,ioexception,exception,else,throw,runtime,exception,exception,boolean,is,connected,raw,channel,is,connected,if,is,connected,false,try,is,connected,raw,channel,finish,connect,catch,ioexception,runtime,exception,e,connect,exception,e,connect,context,complete,exceptionally,e,throw,e,if,is,connected,connect,context,complete,null,return,is,connected
SocketChannelContext -> public boolean connect() throws IOException;1550637215;This method will attempt to complete the connection process for this channel. It should be called for_new channels or for a channel that has produced a OP_CONNECT event. If this method returns true then_the connection is complete and the channel is ready for reads and writes. If it returns false, the_channel is not yet connected and this method should be called again when a OP_CONNECT event is_received.__@return true if the connection process is complete_@throws IOException if an I/O error occurs;public boolean connect() throws IOException {_        if (isConnectComplete()) {_            return true__        } else if (connectContext.isCompletedExceptionally()) {_            Exception exception = connectException__            if (exception == null) {_                throw new AssertionError("Should have received connection exception")__            } else if (exception instanceof IOException) {_                throw (IOException) exception__            } else {_                throw (RuntimeException) exception__            }_        }__        boolean isConnected = rawChannel.isConnected()__        if (isConnected == false) {_            try {_                isConnected = rawChannel.finishConnect()__            } catch (IOException | RuntimeException e) {_                connectException = e__                connectContext.completeExceptionally(e)__                throw e__            }_        }_        if (isConnected) {_            connectContext.complete(null)__        }_        return isConnected__    };this,method,will,attempt,to,complete,the,connection,process,for,this,channel,it,should,be,called,for,new,channels,or,for,a,channel,that,has,produced,a,event,if,this,method,returns,true,then,the,connection,is,complete,and,the,channel,is,ready,for,reads,and,writes,if,it,returns,false,the,channel,is,not,yet,connected,and,this,method,should,be,called,again,when,a,event,is,received,return,true,if,the,connection,process,is,complete,throws,ioexception,if,an,i,o,error,occurs;public,boolean,connect,throws,ioexception,if,is,connect,complete,return,true,else,if,connect,context,is,completed,exceptionally,exception,exception,connect,exception,if,exception,null,throw,new,assertion,error,should,have,received,connection,exception,else,if,exception,instanceof,ioexception,throw,ioexception,exception,else,throw,runtime,exception,exception,boolean,is,connected,raw,channel,is,connected,if,is,connected,false,try,is,connected,raw,channel,finish,connect,catch,ioexception,runtime,exception,e,connect,exception,e,connect,context,complete,exceptionally,e,throw,e,if,is,connected,connect,context,complete,null,return,is,connected
