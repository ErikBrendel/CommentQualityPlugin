# id;timestamp;commentText;codeText;commentWords;codeWords
EventHandler -> protected void readException(SocketChannelContext context, Exception exception);1528706846;This method is called when an attempt to read from a channel throws an exception.__@param context that was being read_@param exception that occurred;protected void readException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,read,from,a,channel,throws,an,exception,param,context,that,was,being,read,param,exception,that,occurred;protected,void,read,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void readException(SocketChannelContext context, Exception exception);1528930607;This method is called when an attempt to read from a channel throws an exception.__@param context that was being read_@param exception that occurred;protected void readException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,read,from,a,channel,throws,an,exception,param,context,that,was,being,read,param,exception,that,occurred;protected,void,read,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void readException(SocketChannelContext context, Exception exception);1547059584;This method is called when an attempt to read from a channel throws an exception.__@param context that was being read_@param exception that occurred;protected void readException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,read,from,a,channel,throws,an,exception,param,context,that,was,being,read,param,exception,that,occurred;protected,void,read,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void handleWrite(SocketChannelContext context) throws IOException;1528706846;This method is called when a channel signals it is ready to receive writes. All of the write logic_should occur in this call.__@param context that can be written to;protected void handleWrite(SocketChannelContext context) throws IOException {_        context.flushChannel()__    };this,method,is,called,when,a,channel,signals,it,is,ready,to,receive,writes,all,of,the,write,logic,should,occur,in,this,call,param,context,that,can,be,written,to;protected,void,handle,write,socket,channel,context,context,throws,ioexception,context,flush,channel
EventHandler -> protected void handleWrite(SocketChannelContext context) throws IOException;1528930607;This method is called when a channel signals it is ready to receive writes. All of the write logic_should occur in this call.__@param context that can be written to;protected void handleWrite(SocketChannelContext context) throws IOException {_        context.flushChannel()__    };this,method,is,called,when,a,channel,signals,it,is,ready,to,receive,writes,all,of,the,write,logic,should,occur,in,this,call,param,context,that,can,be,written,to;protected,void,handle,write,socket,channel,context,context,throws,ioexception,context,flush,channel
EventHandler -> protected void handleWrite(SocketChannelContext context) throws IOException;1547059584;This method is called when a channel signals it is ready to receive writes. All of the write logic_should occur in this call.__@param context that can be written to;protected void handleWrite(SocketChannelContext context) throws IOException {_        context.flushChannel()__    };this,method,is,called,when,a,channel,signals,it,is,ready,to,receive,writes,all,of,the,write,logic,should,occur,in,this,call,param,context,that,can,be,written,to;protected,void,handle,write,socket,channel,context,context,throws,ioexception,context,flush,channel
EventHandler -> protected void postHandling(SocketChannelContext context);1528706846;This method is called after ready events (READ, ACCEPT, WRITE, CONNECT) have been handled for a_channel.__@param context that was handled;protected void postHandling(SocketChannelContext context) {_        if (context.selectorShouldClose()) {_            handleClose(context)__        } else {_            SelectionKey selectionKey = context.getSelectionKey()__            boolean currentlyWriteInterested = SelectionKeyUtils.isWriteInterested(selectionKey)__            boolean pendingWrites = context.readyForFlush()__            if (currentlyWriteInterested == false && pendingWrites) {_                SelectionKeyUtils.setWriteInterested(selectionKey)__            } else if (currentlyWriteInterested && pendingWrites == false) {_                SelectionKeyUtils.removeWriteInterested(selectionKey)__            }_        }_    };this,method,is,called,after,ready,events,read,accept,write,connect,have,been,handled,for,a,channel,param,context,that,was,handled;protected,void,post,handling,socket,channel,context,context,if,context,selector,should,close,handle,close,context,else,selection,key,selection,key,context,get,selection,key,boolean,currently,write,interested,selection,key,utils,is,write,interested,selection,key,boolean,pending,writes,context,ready,for,flush,if,currently,write,interested,false,pending,writes,selection,key,utils,set,write,interested,selection,key,else,if,currently,write,interested,pending,writes,false,selection,key,utils,remove,write,interested,selection,key
EventHandler -> protected void postHandling(SocketChannelContext context);1528930607;This method is called after events (READ, WRITE, CONNECT) have been handled for a channel.__@param context that was handled;protected void postHandling(SocketChannelContext context) {_        if (context.selectorShouldClose()) {_            handleClose(context)__        } else {_            SelectionKey selectionKey = context.getSelectionKey()__            boolean currentlyWriteInterested = SelectionKeyUtils.isWriteInterested(selectionKey)__            boolean pendingWrites = context.readyForFlush()__            if (currentlyWriteInterested == false && pendingWrites) {_                SelectionKeyUtils.setWriteInterested(selectionKey)__            } else if (currentlyWriteInterested && pendingWrites == false) {_                SelectionKeyUtils.removeWriteInterested(selectionKey)__            }_        }_    };this,method,is,called,after,events,read,write,connect,have,been,handled,for,a,channel,param,context,that,was,handled;protected,void,post,handling,socket,channel,context,context,if,context,selector,should,close,handle,close,context,else,selection,key,selection,key,context,get,selection,key,boolean,currently,write,interested,selection,key,utils,is,write,interested,selection,key,boolean,pending,writes,context,ready,for,flush,if,currently,write,interested,false,pending,writes,selection,key,utils,set,write,interested,selection,key,else,if,currently,write,interested,pending,writes,false,selection,key,utils,remove,write,interested,selection,key
EventHandler -> protected void postHandling(SocketChannelContext context);1547059584;This method is called after events (READ, WRITE, CONNECT) have been handled for a channel.__@param context that was handled;protected void postHandling(SocketChannelContext context) {_        if (context.selectorShouldClose()) {_            handleClose(context)__        } else {_            SelectionKey selectionKey = context.getSelectionKey()__            boolean currentlyWriteInterested = SelectionKeyUtils.isWriteInterested(selectionKey)__            boolean pendingWrites = context.readyForFlush()__            if (currentlyWriteInterested == false && pendingWrites) {_                SelectionKeyUtils.setWriteInterested(selectionKey)__            } else if (currentlyWriteInterested && pendingWrites == false) {_                SelectionKeyUtils.removeWriteInterested(selectionKey)__            }_        }_    };this,method,is,called,after,events,read,write,connect,have,been,handled,for,a,channel,param,context,that,was,handled;protected,void,post,handling,socket,channel,context,context,if,context,selector,should,close,handle,close,context,else,selection,key,selection,key,context,get,selection,key,boolean,currently,write,interested,selection,key,utils,is,write,interested,selection,key,boolean,pending,writes,context,ready,for,flush,if,currently,write,interested,false,pending,writes,selection,key,utils,set,write,interested,selection,key,else,if,currently,write,interested,pending,writes,false,selection,key,utils,remove,write,interested,selection,key
EventHandler -> protected void genericChannelException(ChannelContext<?> channel, Exception exception);1528706846;This method is called when handling an event from a channel fails due to an unexpected exception._An example would be if checking ready ops on a {@link java.nio.channels.SelectionKey} threw_{@link java.nio.channels.CancelledKeyException}.__@param channel that caused the exception_@param exception that was thrown;protected void genericChannelException(ChannelContext<?> channel, Exception exception) {_        channel.handleException(exception)__    };this,method,is,called,when,handling,an,event,from,a,channel,fails,due,to,an,unexpected,exception,an,example,would,be,if,checking,ready,ops,on,a,link,java,nio,channels,selection,key,threw,link,java,nio,channels,cancelled,key,exception,param,channel,that,caused,the,exception,param,exception,that,was,thrown;protected,void,generic,channel,exception,channel,context,channel,exception,exception,channel,handle,exception,exception
EventHandler -> protected void genericChannelException(ChannelContext<?> channel, Exception exception);1528930607;This method is called when handling an event from a channel fails due to an unexpected exception._An example would be if checking ready ops on a {@link java.nio.channels.SelectionKey} threw_{@link java.nio.channels.CancelledKeyException}.__@param channel that caused the exception_@param exception that was thrown;protected void genericChannelException(ChannelContext<?> channel, Exception exception) {_        channel.handleException(exception)__    };this,method,is,called,when,handling,an,event,from,a,channel,fails,due,to,an,unexpected,exception,an,example,would,be,if,checking,ready,ops,on,a,link,java,nio,channels,selection,key,threw,link,java,nio,channels,cancelled,key,exception,param,channel,that,caused,the,exception,param,exception,that,was,thrown;protected,void,generic,channel,exception,channel,context,channel,exception,exception,channel,handle,exception,exception
EventHandler -> protected void genericChannelException(ChannelContext<?> channel, Exception exception);1547059584;This method is called when handling an event from a channel fails due to an unexpected exception._An example would be if checking ready ops on a {@link java.nio.channels.SelectionKey} threw_{@link java.nio.channels.CancelledKeyException}.__@param channel that caused the exception_@param exception that was thrown;protected void genericChannelException(ChannelContext<?> channel, Exception exception) {_        channel.handleException(exception)__    };this,method,is,called,when,handling,an,event,from,a,channel,fails,due,to,an,unexpected,exception,an,example,would,be,if,checking,ready,ops,on,a,link,java,nio,channels,selection,key,threw,link,java,nio,channels,cancelled,key,exception,param,channel,that,caused,the,exception,param,exception,that,was,thrown;protected,void,generic,channel,exception,channel,context,channel,exception,exception,channel,handle,exception,exception
EventHandler -> protected void acceptException(ServerChannelContext context, Exception exception);1528706846;This method is called when an attempt to accept a connection throws an exception.__@param context that accepting a connection_@param exception that occurred;protected void acceptException(ServerChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,accept,a,connection,throws,an,exception,param,context,that,accepting,a,connection,param,exception,that,occurred;protected,void,accept,exception,server,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void acceptException(ServerChannelContext context, Exception exception);1528930607;This method is called when an attempt to accept a connection throws an exception.__@param context that accepting a connection_@param exception that occurred;protected void acceptException(ServerChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,accept,a,connection,throws,an,exception,param,context,that,accepting,a,connection,param,exception,that,occurred;protected,void,accept,exception,server,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void acceptException(ServerChannelContext context, Exception exception);1547059584;This method is called when an attempt to accept a connection throws an exception.__@param context that accepting a connection_@param exception that occurred;protected void acceptException(ServerChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,accept,a,connection,throws,an,exception,param,context,that,accepting,a,connection,param,exception,that,occurred;protected,void,accept,exception,server,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void connectException(SocketChannelContext context, Exception exception);1528706846;This method is called when an attempt to connect a channel throws an exception.__@param context that was connecting_@param exception that occurred;protected void connectException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,connect,a,channel,throws,an,exception,param,context,that,was,connecting,param,exception,that,occurred;protected,void,connect,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void connectException(SocketChannelContext context, Exception exception);1528930607;This method is called when an attempt to connect a channel throws an exception.__@param context that was connecting_@param exception that occurred;protected void connectException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,connect,a,channel,throws,an,exception,param,context,that,was,connecting,param,exception,that,occurred;protected,void,connect,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void connectException(SocketChannelContext context, Exception exception);1547059584;This method is called when an attempt to connect a channel throws an exception.__@param context that was connecting_@param exception that occurred;protected void connectException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,connect,a,channel,throws,an,exception,param,context,that,was,connecting,param,exception,that,occurred;protected,void,connect,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void handleClose(ChannelContext<?> context);1528706846;This method handles the closing of an NioChannel__@param context that should be closed;protected void handleClose(ChannelContext<?> context) {_        try {_            context.closeFromSelector()__        } catch (IOException e) {_            closeException(context, e)__        }_        assert context.isOpen() == false : "Should always be done as we are on the selector thread"__    };this,method,handles,the,closing,of,an,nio,channel,param,context,that,should,be,closed;protected,void,handle,close,channel,context,context,try,context,close,from,selector,catch,ioexception,e,close,exception,context,e,assert,context,is,open,false,should,always,be,done,as,we,are,on,the,selector,thread
EventHandler -> protected void handleClose(ChannelContext<?> context);1528930607;This method handles the closing of an NioChannel__@param context that should be closed;protected void handleClose(ChannelContext<?> context) {_        try {_            context.closeFromSelector()__        } catch (IOException e) {_            closeException(context, e)__        }_        assert context.isOpen() == false : "Should always be done as we are on the selector thread"__    };this,method,handles,the,closing,of,an,nio,channel,param,context,that,should,be,closed;protected,void,handle,close,channel,context,context,try,context,close,from,selector,catch,ioexception,e,close,exception,context,e,assert,context,is,open,false,should,always,be,done,as,we,are,on,the,selector,thread
EventHandler -> protected void handleClose(ChannelContext<?> context);1547059584;This method handles the closing of an NioChannel__@param context that should be closed;protected void handleClose(ChannelContext<?> context) {_        try {_            context.closeFromSelector()__        } catch (IOException e) {_            closeException(context, e)__        }_        assert context.isOpen() == false : "Should always be done as we are on the selector thread"__    };this,method,handles,the,closing,of,an,nio,channel,param,context,that,should,be,closed;protected,void,handle,close,channel,context,context,try,context,close,from,selector,catch,ioexception,e,close,exception,context,e,assert,context,is,open,false,should,always,be,done,as,we,are,on,the,selector,thread
EventHandler -> protected void handleRegistration(ChannelContext<?> context) throws IOException;1528706846;This method is called when a NioChannel is being registered with the selector. It should_only be called once per channel.__@param context that was registered;protected void handleRegistration(ChannelContext<?> context) throws IOException {_        context.register()__        SelectionKey selectionKey = context.getSelectionKey()__        selectionKey.attach(context)__        if (context instanceof SocketChannelContext) {_            if (((SocketChannelContext) context).readyForFlush()) {_                SelectionKeyUtils.setConnectReadAndWriteInterested(context.getSelectionKey())__            } else {_                SelectionKeyUtils.setConnectAndReadInterested(context.getSelectionKey())__            }_        } else {_            assert context instanceof ServerChannelContext : "If not SocketChannelContext the context must be a ServerChannelContext"__            SelectionKeyUtils.setAcceptInterested(context.getSelectionKey())__        }_    };this,method,is,called,when,a,nio,channel,is,being,registered,with,the,selector,it,should,only,be,called,once,per,channel,param,context,that,was,registered;protected,void,handle,registration,channel,context,context,throws,ioexception,context,register,selection,key,selection,key,context,get,selection,key,selection,key,attach,context,if,context,instanceof,socket,channel,context,if,socket,channel,context,context,ready,for,flush,selection,key,utils,set,connect,read,and,write,interested,context,get,selection,key,else,selection,key,utils,set,connect,and,read,interested,context,get,selection,key,else,assert,context,instanceof,server,channel,context,if,not,socket,channel,context,the,context,must,be,a,server,channel,context,selection,key,utils,set,accept,interested,context,get,selection,key
EventHandler -> protected void handleRegistration(ChannelContext<?> context) throws IOException;1528930607;This method is called when a NioChannel is being registered with the selector. It should_only be called once per channel.__@param context that was registered;protected void handleRegistration(ChannelContext<?> context) throws IOException {_        context.register()__        SelectionKey selectionKey = context.getSelectionKey()__        selectionKey.attach(context)__        if (context instanceof SocketChannelContext) {_            if (((SocketChannelContext) context).readyForFlush()) {_                SelectionKeyUtils.setConnectReadAndWriteInterested(context.getSelectionKey())__            } else {_                SelectionKeyUtils.setConnectAndReadInterested(context.getSelectionKey())__            }_        } else {_            assert context instanceof ServerChannelContext : "If not SocketChannelContext the context must be a ServerChannelContext"__            SelectionKeyUtils.setAcceptInterested(context.getSelectionKey())__        }_    };this,method,is,called,when,a,nio,channel,is,being,registered,with,the,selector,it,should,only,be,called,once,per,channel,param,context,that,was,registered;protected,void,handle,registration,channel,context,context,throws,ioexception,context,register,selection,key,selection,key,context,get,selection,key,selection,key,attach,context,if,context,instanceof,socket,channel,context,if,socket,channel,context,context,ready,for,flush,selection,key,utils,set,connect,read,and,write,interested,context,get,selection,key,else,selection,key,utils,set,connect,and,read,interested,context,get,selection,key,else,assert,context,instanceof,server,channel,context,if,not,socket,channel,context,the,context,must,be,a,server,channel,context,selection,key,utils,set,accept,interested,context,get,selection,key
EventHandler -> protected void handleRegistration(ChannelContext<?> context) throws IOException;1547059584;This method is called when a NioChannel is being registered with the selector. It should_only be called once per channel.__@param context that was registered;protected void handleRegistration(ChannelContext<?> context) throws IOException {_        context.register()__        SelectionKey selectionKey = context.getSelectionKey()__        selectionKey.attach(context)__        if (context instanceof SocketChannelContext) {_            if (((SocketChannelContext) context).readyForFlush()) {_                SelectionKeyUtils.setConnectReadAndWriteInterested(context.getSelectionKey())__            } else {_                SelectionKeyUtils.setConnectAndReadInterested(context.getSelectionKey())__            }_        } else {_            assert context instanceof ServerChannelContext : "If not SocketChannelContext the context must be a ServerChannelContext"__            SelectionKeyUtils.setAcceptInterested(context.getSelectionKey())__        }_    };this,method,is,called,when,a,nio,channel,is,being,registered,with,the,selector,it,should,only,be,called,once,per,channel,param,context,that,was,registered;protected,void,handle,registration,channel,context,context,throws,ioexception,context,register,selection,key,selection,key,context,get,selection,key,selection,key,attach,context,if,context,instanceof,socket,channel,context,if,socket,channel,context,context,ready,for,flush,selection,key,utils,set,connect,read,and,write,interested,context,get,selection,key,else,selection,key,utils,set,connect,and,read,interested,context,get,selection,key,else,assert,context,instanceof,server,channel,context,if,not,socket,channel,context,the,context,must,be,a,server,channel,context,selection,key,utils,set,accept,interested,context,get,selection,key
EventHandler -> protected void writeException(SocketChannelContext context, Exception exception);1528706846;This method is called when an attempt to write to a channel throws an exception.__@param context that was being written to_@param exception that occurred;protected void writeException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,write,to,a,channel,throws,an,exception,param,context,that,was,being,written,to,param,exception,that,occurred;protected,void,write,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void writeException(SocketChannelContext context, Exception exception);1528930607;This method is called when an attempt to write to a channel throws an exception.__@param context that was being written to_@param exception that occurred;protected void writeException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,write,to,a,channel,throws,an,exception,param,context,that,was,being,written,to,param,exception,that,occurred;protected,void,write,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void writeException(SocketChannelContext context, Exception exception);1547059584;This method is called when an attempt to write to a channel throws an exception.__@param context that was being written to_@param exception that occurred;protected void writeException(SocketChannelContext context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,write,to,a,channel,throws,an,exception,param,context,that,was,being,written,to,param,exception,that,occurred;protected,void,write,exception,socket,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void acceptChannel(ServerChannelContext context) throws IOException;1528706846;This method is called when a server channel signals it is ready to accept a connection. All of the_accept logic should occur in this call.__@param context that can accept a connection;protected void acceptChannel(ServerChannelContext context) throws IOException {_        context.acceptChannels(selectorSupplier)__    };this,method,is,called,when,a,server,channel,signals,it,is,ready,to,accept,a,connection,all,of,the,accept,logic,should,occur,in,this,call,param,context,that,can,accept,a,connection;protected,void,accept,channel,server,channel,context,context,throws,ioexception,context,accept,channels,selector,supplier
EventHandler -> protected void acceptChannel(ServerChannelContext context) throws IOException;1528930607;This method is called when a server channel signals it is ready to accept a connection. All of the_accept logic should occur in this call.__@param context that can accept a connection;protected void acceptChannel(ServerChannelContext context) throws IOException {_        context.acceptChannels(selectorSupplier)__    };this,method,is,called,when,a,server,channel,signals,it,is,ready,to,accept,a,connection,all,of,the,accept,logic,should,occur,in,this,call,param,context,that,can,accept,a,connection;protected,void,accept,channel,server,channel,context,context,throws,ioexception,context,accept,channels,selector,supplier
EventHandler -> protected void acceptChannel(ServerChannelContext context) throws IOException;1547059584;This method is called when a server channel signals it is ready to accept a connection. All of the_accept logic should occur in this call.__@param context that can accept a connection;protected void acceptChannel(ServerChannelContext context) throws IOException {_        context.acceptChannels(selectorSupplier)__    };this,method,is,called,when,a,server,channel,signals,it,is,ready,to,accept,a,connection,all,of,the,accept,logic,should,occur,in,this,call,param,context,that,can,accept,a,connection;protected,void,accept,channel,server,channel,context,context,throws,ioexception,context,accept,channels,selector,supplier
EventHandler -> protected void registrationException(ChannelContext<?> context, Exception exception);1528706846;This method is called when an attempt to register a channel throws an exception.__@param context that was registered_@param exception that occurred;protected void registrationException(ChannelContext<?> context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,register,a,channel,throws,an,exception,param,context,that,was,registered,param,exception,that,occurred;protected,void,registration,exception,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void registrationException(ChannelContext<?> context, Exception exception);1528930607;This method is called when an attempt to register a channel throws an exception.__@param context that was registered_@param exception that occurred;protected void registrationException(ChannelContext<?> context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,register,a,channel,throws,an,exception,param,context,that,was,registered,param,exception,that,occurred;protected,void,registration,exception,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void registrationException(ChannelContext<?> context, Exception exception);1547059584;This method is called when an attempt to register a channel throws an exception.__@param context that was registered_@param exception that occurred;protected void registrationException(ChannelContext<?> context, Exception exception) {_        context.handleException(exception)__    };this,method,is,called,when,an,attempt,to,register,a,channel,throws,an,exception,param,context,that,was,registered,param,exception,that,occurred;protected,void,registration,exception,channel,context,context,exception,exception,context,handle,exception,exception
EventHandler -> protected void handleRead(SocketChannelContext context) throws IOException;1528706846;This method is called when a channel signals it is ready for be read. All of the read logic should_occur in this call.__@param context that can be read;protected void handleRead(SocketChannelContext context) throws IOException {_        context.read()__    };this,method,is,called,when,a,channel,signals,it,is,ready,for,be,read,all,of,the,read,logic,should,occur,in,this,call,param,context,that,can,be,read;protected,void,handle,read,socket,channel,context,context,throws,ioexception,context,read
EventHandler -> protected void handleRead(SocketChannelContext context) throws IOException;1528930607;This method is called when a channel signals it is ready for be read. All of the read logic should_occur in this call.__@param context that can be read;protected void handleRead(SocketChannelContext context) throws IOException {_        context.read()__    };this,method,is,called,when,a,channel,signals,it,is,ready,for,be,read,all,of,the,read,logic,should,occur,in,this,call,param,context,that,can,be,read;protected,void,handle,read,socket,channel,context,context,throws,ioexception,context,read
EventHandler -> protected void handleRead(SocketChannelContext context) throws IOException;1547059584;This method is called when a channel signals it is ready for be read. All of the read logic should_occur in this call.__@param context that can be read;protected void handleRead(SocketChannelContext context) throws IOException {_        context.read()__    };this,method,is,called,when,a,channel,signals,it,is,ready,for,be,read,all,of,the,read,logic,should,occur,in,this,call,param,context,that,can,be,read;protected,void,handle,read,socket,channel,context,context,throws,ioexception,context,read
EventHandler -> protected void listenerException(Exception exception);1528706846;This method is called when a listener attached to a channel operation throws an exception.__@param exception that occurred;protected void listenerException(Exception exception) {_        exceptionHandler.accept(exception)__    };this,method,is,called,when,a,listener,attached,to,a,channel,operation,throws,an,exception,param,exception,that,occurred;protected,void,listener,exception,exception,exception,exception,handler,accept,exception
EventHandler -> protected void listenerException(Exception exception);1528930607;This method is called when a listener attached to a channel operation throws an exception.__@param exception that occurred;protected void listenerException(Exception exception) {_        exceptionHandler.accept(exception)__    };this,method,is,called,when,a,listener,attached,to,a,channel,operation,throws,an,exception,param,exception,that,occurred;protected,void,listener,exception,exception,exception,exception,handler,accept,exception
EventHandler -> protected void closeException(ChannelContext<?> channel, Exception exception);1528706846;This method is called when an attempt to close a channel throws an exception.__@param channel that was being closed_@param exception that occurred;protected void closeException(ChannelContext<?> channel, Exception exception) {_        channel.handleException(exception)__    };this,method,is,called,when,an,attempt,to,close,a,channel,throws,an,exception,param,channel,that,was,being,closed,param,exception,that,occurred;protected,void,close,exception,channel,context,channel,exception,exception,channel,handle,exception,exception
EventHandler -> protected void closeException(ChannelContext<?> channel, Exception exception);1528930607;This method is called when an attempt to close a channel throws an exception.__@param channel that was being closed_@param exception that occurred;protected void closeException(ChannelContext<?> channel, Exception exception) {_        channel.handleException(exception)__    };this,method,is,called,when,an,attempt,to,close,a,channel,throws,an,exception,param,channel,that,was,being,closed,param,exception,that,occurred;protected,void,close,exception,channel,context,channel,exception,exception,channel,handle,exception,exception
EventHandler -> protected void closeException(ChannelContext<?> channel, Exception exception);1547059584;This method is called when an attempt to close a channel throws an exception.__@param channel that was being closed_@param exception that occurred;protected void closeException(ChannelContext<?> channel, Exception exception) {_        channel.handleException(exception)__    };this,method,is,called,when,an,attempt,to,close,a,channel,throws,an,exception,param,channel,that,was,being,closed,param,exception,that,occurred;protected,void,close,exception,channel,context,channel,exception,exception,channel,handle,exception,exception
EventHandler -> protected void uncaughtException(Exception exception);1528706846;This method handles an exception that was uncaught during a select loop.__@param exception that was uncaught;protected void uncaughtException(Exception exception) {_        Thread thread = Thread.currentThread()__        thread.getUncaughtExceptionHandler().uncaughtException(thread, exception)__    };this,method,handles,an,exception,that,was,uncaught,during,a,select,loop,param,exception,that,was,uncaught;protected,void,uncaught,exception,exception,exception,thread,thread,thread,current,thread,thread,get,uncaught,exception,handler,uncaught,exception,thread,exception
EventHandler -> protected void uncaughtException(Exception exception);1528930607;This method handles an exception that was uncaught during a select loop.__@param exception that was uncaught;protected void uncaughtException(Exception exception) {_        Thread thread = Thread.currentThread()__        thread.getUncaughtExceptionHandler().uncaughtException(thread, exception)__    };this,method,handles,an,exception,that,was,uncaught,during,a,select,loop,param,exception,that,was,uncaught;protected,void,uncaught,exception,exception,exception,thread,thread,thread,current,thread,thread,get,uncaught,exception,handler,uncaught,exception,thread,exception
EventHandler -> protected void uncaughtException(Exception exception);1547059584;This method handles an exception that was uncaught during a select loop.__@param exception that was uncaught;protected void uncaughtException(Exception exception) {_        Thread thread = Thread.currentThread()__        thread.getUncaughtExceptionHandler().uncaughtException(thread, exception)__    };this,method,handles,an,exception,that,was,uncaught,during,a,select,loop,param,exception,that,was,uncaught;protected,void,uncaught,exception,exception,exception,thread,thread,thread,current,thread,thread,get,uncaught,exception,handler,uncaught,exception,thread,exception
EventHandler -> protected void handleConnect(SocketChannelContext context) throws IOException;1528706846;This method is called when a NioSocketChannel has just been accepted or if it has receive an_OP_CONNECT event.__@param context that was registered;protected void handleConnect(SocketChannelContext context) throws IOException {_        if (context.connect()) {_            SelectionKeyUtils.removeConnectInterested(context.getSelectionKey())__        }_    };this,method,is,called,when,a,nio,socket,channel,has,just,been,accepted,or,if,it,has,receive,an,event,param,context,that,was,registered;protected,void,handle,connect,socket,channel,context,context,throws,ioexception,if,context,connect,selection,key,utils,remove,connect,interested,context,get,selection,key
EventHandler -> protected void handleConnect(SocketChannelContext context) throws IOException;1528930607;This method is called when a NioSocketChannel has just been accepted or if it has receive an_OP_CONNECT event.__@param context that was registered;protected void handleConnect(SocketChannelContext context) throws IOException {_        if (context.connect()) {_            SelectionKeyUtils.removeConnectInterested(context.getSelectionKey())__        }_    };this,method,is,called,when,a,nio,socket,channel,has,just,been,accepted,or,if,it,has,receive,an,event,param,context,that,was,registered;protected,void,handle,connect,socket,channel,context,context,throws,ioexception,if,context,connect,selection,key,utils,remove,connect,interested,context,get,selection,key
EventHandler -> protected void handleConnect(SocketChannelContext context) throws IOException;1547059584;This method is called when a NioSocketChannel has just been accepted or if it has receive an_OP_CONNECT event.__@param context that was registered;protected void handleConnect(SocketChannelContext context) throws IOException {_        if (context.connect()) {_            SelectionKeyUtils.removeConnectInterested(context.getSelectionKey())__        }_    };this,method,is,called,when,a,nio,socket,channel,has,just,been,accepted,or,if,it,has,receive,an,event,param,context,that,was,registered;protected,void,handle,connect,socket,channel,context,context,throws,ioexception,if,context,connect,selection,key,utils,remove,connect,interested,context,get,selection,key
EventHandler -> protected void selectorException(IOException exception);1528706846;This method handles an IOException that was thrown during a call to {@link Selector#select(long)} or_{@link Selector#close()}.__@param exception the exception;protected void selectorException(IOException exception) {_        exceptionHandler.accept(exception)__    };this,method,handles,an,ioexception,that,was,thrown,during,a,call,to,link,selector,select,long,or,link,selector,close,param,exception,the,exception;protected,void,selector,exception,ioexception,exception,exception,handler,accept,exception
EventHandler -> protected void selectorException(IOException exception);1528930607;This method handles an IOException that was thrown during a call to {@link Selector#select(long)} or_{@link Selector#close()}.__@param exception the exception;protected void selectorException(IOException exception) {_        exceptionHandler.accept(exception)__    };this,method,handles,an,ioexception,that,was,thrown,during,a,call,to,link,selector,select,long,or,link,selector,close,param,exception,the,exception;protected,void,selector,exception,ioexception,exception,exception,handler,accept,exception
EventHandler -> protected void selectorException(IOException exception);1547059584;This method handles an IOException that was thrown during a call to {@link Selector#select(long)} or_{@link Selector#close()}.__@param exception the exception;protected void selectorException(IOException exception) {_        exceptionHandler.accept(exception)__    };this,method,handles,an,ioexception,that,was,thrown,during,a,call,to,link,selector,select,long,or,link,selector,close,param,exception,the,exception;protected,void,selector,exception,ioexception,exception,exception,handler,accept,exception
