commented;modifiers;parameterAmount;loc;comment;code
true;public;2;5;/**  * Schedule a task at the defined relative nanotime. When {@link #pollTask(long)} is called with a  * relative nanotime after the scheduled time, the task will be returned. This method returns a  * {@link Runnable} that can be run to cancel the scheduled task.  *  * @param task to schedule  * @param relativeNanos defining when to execute the task  * @return runnable that will cancel the task  */ ;/**  * Schedule a task at the defined relative nanotime. When {@link #pollTask(long)} is called with a  * relative nanotime after the scheduled time, the task will be returned. This method returns a  * {@link Runnable} that can be run to cancel the scheduled task.  *  * @param task to schedule  * @param relativeNanos defining when to execute the task  * @return runnable that will cancel the task  */ public Runnable scheduleAtRelativeTime(Runnable task, long relativeNanos) {     DelayedTask delayedTask = new DelayedTask(relativeNanos, task).     tasks.offer(delayedTask).     return delayedTask. }
false;;1;14;;Runnable pollTask(long relativeNanos) {     DelayedTask task.     while ((task = tasks.peek()) != null) {         if (relativeNanos - task.deadline >= 0) {             tasks.remove().             if (task.cancelled == false) {                 return task.runnable.             }         } else {             return null.         }     }     return null. }
false;;1;8;;long nanosUntilNextTask(long relativeNanos) {     DelayedTask nextTask = tasks.peek().     if (nextTask == null) {         return Long.MAX_VALUE.     } else {         return Math.max(nextTask.deadline - relativeNanos, 0).     } }
false;private;0;3;;private long getDeadline() {     return deadline. }
false;public;0;4;;@Override public void run() {     cancelled = true. }
