commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;@Override public <S extends NioServerSocketChannel> S bindServerChannel(InetSocketAddress address, ChannelFactory<S, ?> factory) throws IOException {     ensureOpen().     return factory.openNioServerSocketChannel(address, acceptorSupplier). }
false;public;2;5;;@Override public <S extends NioSocketChannel> S openChannel(InetSocketAddress address, ChannelFactory<?, S> factory) throws IOException {     ensureOpen().     return factory.openNioChannel(address, selectorSupplier). }
false;public;0;15;;@Override public void close() throws IOException {     if (isOpen.compareAndSet(true, false)) {         List<NioSelector> toClose = Stream.concat(dedicatedAcceptors.stream(), selectors.stream()).collect(Collectors.toList()).         List<IOException> closingExceptions = new ArrayList<>().         for (NioSelector selector : toClose) {             try {                 selector.close().             } catch (IOException e) {                 closingExceptions.add(e).             }         }         ExceptionsHelper.rethrowAndSuppress(closingExceptions).     } }
false;private,static;2;19;;private static void startSelectors(Iterable<NioSelector> selectors, ThreadFactory threadFactory) {     for (NioSelector selector : selectors) {         if (selector.isRunning() == false) {             threadFactory.newThread(selector::runLoop).start().             try {                 selector.isRunningFuture().get().             } catch (InterruptedException e) {                 Thread.currentThread().interrupt().                 throw new IllegalStateException("Interrupted while waiting for selector to start.", e).             } catch (ExecutionException e) {                 if (e.getCause() instanceof RuntimeException) {                     throw (RuntimeException) e.getCause().                 } else {                     throw new RuntimeException("Exception during selector start.", e).                 }             }         }     } }
false;private;0;5;;private void ensureOpen() {     if (isOpen.get() == false) {         throw new IllegalStateException("NioGroup is closed.").     } }
