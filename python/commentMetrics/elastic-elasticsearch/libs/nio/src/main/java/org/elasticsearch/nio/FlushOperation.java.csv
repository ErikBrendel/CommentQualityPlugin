commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public BiConsumer<Void, Exception> getListener() {     return listener. }
false;public;0;5;;public boolean isFullyFlushed() {     assert length >= internalIndex : "Should never have an index that is greater than the length [length=" + length + ", index=" + internalIndex + "]".     return internalIndex == length. }
false;public;1;5;;public void incrementIndex(int delta) {     internalIndex += delta.     assert length >= internalIndex : "Should never increment index past length [length=" + length + ", post-increment index=" + internalIndex + ", delta=" + delta + "]". }
false;public;0;16;;public ByteBuffer[] getBuffersToWrite() {     final int index = Arrays.binarySearch(offsets, internalIndex).     int offsetIndex = index < 0 ? (-(index + 1)) - 1 : index.     ByteBuffer[] postIndexBuffers = new ByteBuffer[buffers.length - offsetIndex].     ByteBuffer firstBuffer = buffers[offsetIndex].duplicate().     firstBuffer.position(internalIndex - offsets[offsetIndex]).     postIndexBuffers[0] = firstBuffer.     int j = 1.     for (int i = (offsetIndex + 1). i < buffers.length. ++i) {         postIndexBuffers[j++] = buffers[i].duplicate().     }     return postIndexBuffers. }
