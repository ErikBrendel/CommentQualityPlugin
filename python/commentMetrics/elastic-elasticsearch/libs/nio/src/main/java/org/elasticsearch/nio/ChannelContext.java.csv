# id;timestamp;commentText;codeText;commentWords;codeWords
ChannelContext -> public abstract void closeChannel()_;1528706846;Schedules a channel to be closed by the selector event loop with which it is registered.__If the channel is open and the state can be transitioned to closed, the close operation will_be scheduled with the event loop.__Depending on the underlying protocol of the channel, a close operation might simply close the socket_channel or may involve reading and writing messages.;public abstract void closeChannel()_;schedules,a,channel,to,be,closed,by,the,selector,event,loop,with,which,it,is,registered,if,the,channel,is,open,and,the,state,can,be,transitioned,to,closed,the,close,operation,will,be,scheduled,with,the,event,loop,depending,on,the,underlying,protocol,of,the,channel,a,close,operation,might,simply,close,the,socket,channel,or,may,involve,reading,and,writing,messages;public,abstract,void,close,channel
ChannelContext -> public abstract void closeChannel()_;1528930607;Schedules a channel to be closed by the selector event loop with which it is registered.__If the channel is open and the state can be transitioned to closed, the close operation will_be scheduled with the event loop.__Depending on the underlying protocol of the channel, a close operation might simply close the socket_channel or may involve reading and writing messages.;public abstract void closeChannel()_;schedules,a,channel,to,be,closed,by,the,selector,event,loop,with,which,it,is,registered,if,the,channel,is,open,and,the,state,can,be,transitioned,to,closed,the,close,operation,will,be,scheduled,with,the,event,loop,depending,on,the,underlying,protocol,of,the,channel,a,close,operation,might,simply,close,the,socket,channel,or,may,involve,reading,and,writing,messages;public,abstract,void,close,channel
ChannelContext -> public abstract void closeChannel()_;1531729807;Schedules a channel to be closed by the selector event loop with which it is registered.__If the channel is open and the state can be transitioned to closed, the close operation will_be scheduled with the event loop.__Depending on the underlying protocol of the channel, a close operation might simply close the socket_channel or may involve reading and writing messages.;public abstract void closeChannel()_;schedules,a,channel,to,be,closed,by,the,selector,event,loop,with,which,it,is,registered,if,the,channel,is,open,and,the,state,can,be,transitioned,to,closed,the,close,operation,will,be,scheduled,with,the,event,loop,depending,on,the,underlying,protocol,of,the,channel,a,close,operation,might,simply,close,the,socket,channel,or,may,involve,reading,and,writing,messages;public,abstract,void,close,channel
ChannelContext -> public void addCloseListener(BiConsumer<Void, Exception> listener);1528706846;Add a listener that will be called when the channel is closed.__@param listener to be called;public void addCloseListener(BiConsumer<Void, Exception> listener) {_        closeContext.addListener(listener)__    };add,a,listener,that,will,be,called,when,the,channel,is,closed,param,listener,to,be,called;public,void,add,close,listener,bi,consumer,void,exception,listener,close,context,add,listener,listener
ChannelContext -> public void addCloseListener(BiConsumer<Void, Exception> listener);1528930607;Add a listener that will be called when the channel is closed.__@param listener to be called;public void addCloseListener(BiConsumer<Void, Exception> listener) {_        closeContext.addListener(listener)__    };add,a,listener,that,will,be,called,when,the,channel,is,closed,param,listener,to,be,called;public,void,add,close,listener,bi,consumer,void,exception,listener,close,context,add,listener,listener
ChannelContext -> public void addCloseListener(BiConsumer<Void, Exception> listener);1531729807;Add a listener that will be called when the channel is closed.__@param listener to be called;public void addCloseListener(BiConsumer<Void, Exception> listener) {_        closeContext.addListener(listener)__    };add,a,listener,that,will,be,called,when,the,channel,is,closed,param,listener,to,be,called;public,void,add,close,listener,bi,consumer,void,exception,listener,close,context,add,listener,listener
ChannelContext -> public void closeFromSelector() throws IOException;1528706846;This method cleans up any context resources that need to be released when a channel is closed. It_should only be called by the selector thread.__@throws IOException during channel / context close;public void closeFromSelector() throws IOException {_        if (closeContext.isDone() == false) {_            try {_                rawChannel.close()__                closeContext.complete(null)__            } catch (Exception e) {_                closeContext.completeExceptionally(e)__                throw e__            }_        }_    };this,method,cleans,up,any,context,resources,that,need,to,be,released,when,a,channel,is,closed,it,should,only,be,called,by,the,selector,thread,throws,ioexception,during,channel,context,close;public,void,close,from,selector,throws,ioexception,if,close,context,is,done,false,try,raw,channel,close,close,context,complete,null,catch,exception,e,close,context,complete,exceptionally,e,throw,e
ChannelContext -> public void closeFromSelector() throws IOException;1528930607;This method cleans up any context resources that need to be released when a channel is closed. It_should only be called by the selector thread.__@throws IOException during channel / context close;public void closeFromSelector() throws IOException {_        if (isOpen()) {_            try {_                rawChannel.close()__                closeContext.complete(null)__            } catch (Exception e) {_                closeContext.completeExceptionally(e)__                throw e__            }_        }_    };this,method,cleans,up,any,context,resources,that,need,to,be,released,when,a,channel,is,closed,it,should,only,be,called,by,the,selector,thread,throws,ioexception,during,channel,context,close;public,void,close,from,selector,throws,ioexception,if,is,open,try,raw,channel,close,close,context,complete,null,catch,exception,e,close,context,complete,exceptionally,e,throw,e
ChannelContext -> public void closeFromSelector() throws IOException;1531729807;This method cleans up any context resources that need to be released when a channel is closed. It_should only be called by the selector thread.__@throws IOException during channel / context close;public void closeFromSelector() throws IOException {_        if (isOpen()) {_            try {_                rawChannel.close()__                closeContext.complete(null)__            } catch (Exception e) {_                closeContext.completeExceptionally(e)__                throw e__            }_        }_    };this,method,cleans,up,any,context,resources,that,need,to,be,released,when,a,channel,is,closed,it,should,only,be,called,by,the,selector,thread,throws,ioexception,during,channel,context,close;public,void,close,from,selector,throws,ioexception,if,is,open,try,raw,channel,close,close,context,complete,null,catch,exception,e,close,context,complete,exceptionally,e,throw,e
