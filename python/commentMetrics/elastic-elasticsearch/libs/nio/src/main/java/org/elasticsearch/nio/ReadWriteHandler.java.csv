commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * This method is called when a message is queued with a channel. It can be called from any thread.  * This method should validate that the message is a valid type and return a write operation object  * to be queued with the channel  *  * @param context the channel context  * @param message the message  * @param listener the listener to be called when the message is sent  * @return the write operation to be queued  */ ;/**  * This method is called when a message is queued with a channel. It can be called from any thread.  * This method should validate that the message is a valid type and return a write operation object  * to be queued with the channel  *  * @param context the channel context  * @param message the message  * @param listener the listener to be called when the message is sent  * @return the write operation to be queued  */ WriteOperation createWriteOperation(SocketChannelContext context, Object message, BiConsumer<Void, Exception> listener).
true;;1;1;/**  * This method is called on the event loop thread. It should serialize a write operation object to bytes  * that can be flushed to the raw nio channel.  *  * @param writeOperation to be converted to bytes  * @return the operations to flush the bytes to the channel  */ ;/**  * This method is called on the event loop thread. It should serialize a write operation object to bytes  * that can be flushed to the raw nio channel.  *  * @param writeOperation to be converted to bytes  * @return the operations to flush the bytes to the channel  */ List<FlushOperation> writeToBytes(WriteOperation writeOperation).
true;;0;1;/**  * Returns any flush operations that are ready to flush. This exists as a way to check if any flush  * operations were produced during a read call.  *  * @return flush operations  */ ;/**  * Returns any flush operations that are ready to flush. This exists as a way to check if any flush  * operations were produced during a read call.  *  * @return flush operations  */ List<FlushOperation> pollFlushOperations().
true;;1;1;/**  * This method handles bytes that have been read from the network. It should return the number of bytes  * consumed so that they can be released.  *  * @param channelBuffer of bytes read from the network  * @return the number of bytes consumed  * @throws IOException if an exception occurs  */ ;/**  * This method handles bytes that have been read from the network. It should return the number of bytes  * consumed so that they can be released.  *  * @param channelBuffer of bytes read from the network  * @return the number of bytes consumed  * @throws IOException if an exception occurs  */ int consumeReads(InboundChannelBuffer channelBuffer) throws IOException.
false;;0;1;;void close() throws IOException.
