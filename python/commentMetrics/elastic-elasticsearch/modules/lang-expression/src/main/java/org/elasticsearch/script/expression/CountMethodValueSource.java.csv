commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public double doubleVal(int doc) throws IOException {     if (values.advanceExact(doc)) {         return values.docValueCount().     } else {         return 0.     } }
false;public;2;17;;@Override // ValueSource uses a rawtype @SuppressWarnings("rawtypes") public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {     AtomicNumericFieldData leafData = (AtomicNumericFieldData) fieldData.load(leaf).     final SortedNumericDoubleValues values = leafData.getDoubleValues().     return new DoubleDocValues(this) {          @Override         public double doubleVal(int doc) throws IOException {             if (values.advanceExact(doc)) {                 return values.docValueCount().             } else {                 return 0.             }         }     }. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     FieldDataValueSource that = (FieldDataValueSource) o.     return fieldData.equals(that.fieldData). }
false;public;0;4;;@Override public int hashCode() {     return 31 * getClass().hashCode() + fieldData.hashCode(). }
false;public;0;4;;@Override public String description() {     return "count: field(" + fieldData.getFieldName() + ")". }
