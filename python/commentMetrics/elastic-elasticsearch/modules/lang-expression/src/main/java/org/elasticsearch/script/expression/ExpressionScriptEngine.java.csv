# id;timestamp;commentText;codeText;commentWords;codeWords
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1524684173;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1527583663;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1533547893;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1534203100;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1536611444;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1538424609;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1539615817;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1539723533;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1539796943;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1539815831;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1540238977;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        SearchScript.LeafFactory searchLeafFactory = newSearchScript(expr, lookup, vars)__        return ctx -> {_            SearchScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.runAsDouble() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,search,script,leaf,factory,search,leaf,factory,new,search,script,expr,lookup,vars,return,ctx,search,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,run,as,double,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1540486836;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        ScoreScript.LeafFactory searchLeafFactory = newScoreScript(expr, lookup, vars)__        return ctx -> {_            ScoreScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.execute() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,score,script,leaf,factory,search,leaf,factory,new,score,script,expr,lookup,vars,return,ctx,score,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,execute,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1541092382;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        ScoreScript.LeafFactory searchLeafFactory = newScoreScript(expr, lookup, vars)__        return ctx -> {_            ScoreScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.execute() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,score,script,leaf,factory,search,leaf,factory,new,score,script,expr,lookup,vars,return,ctx,score,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,execute,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars);1542400381;This is a hack for filter scripts, which must return booleans instead of doubles as expression do._See https://github.com/elastic/elasticsearch/issues/26429.;private FilterScript.LeafFactory newFilterScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {_        ScoreScript.LeafFactory searchLeafFactory = newScoreScript(expr, lookup, vars)__        return ctx -> {_            ScoreScript script = searchLeafFactory.newInstance(ctx)__            return new FilterScript(vars, lookup, ctx) {_                @Override_                public boolean execute() {_                    return script.execute() != 0.0__                }_                @Override_                public void setDocument(int docid) {_                    script.setDocument(docid)__                }_            }__        }__    };this,is,a,hack,for,filter,scripts,which,must,return,booleans,instead,of,doubles,as,expression,do,see,https,github,com,elastic,elasticsearch,issues,26429;private,filter,script,leaf,factory,new,filter,script,expression,expr,search,lookup,lookup,nullable,map,string,object,vars,score,script,leaf,factory,search,leaf,factory,new,score,script,expr,lookup,vars,return,ctx,score,script,script,search,leaf,factory,new,instance,ctx,return,new,filter,script,vars,lookup,ctx,override,public,boolean,execute,return,script,execute,0,0,override,public,void,set,document,int,docid,script,set,document,docid
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1524684173;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1527583663;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1533547893;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1534203100;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1536611444;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1538424609;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1539615817;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1539723533;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1539796943;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1539815831;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1540238977;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1540486836;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1541092382;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
ExpressionScriptEngine -> private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause);1542400381;converts a ParseException at compile-time or link-time to a ScriptException;private ScriptException convertToScriptException(String message, String source, String portion, Throwable cause) {_        List<String> stack = new ArrayList<>()__        stack.add(portion)__        StringBuilder pointer = new StringBuilder()__        if (cause instanceof ParseException) {_            int offset = ((ParseException) cause).getErrorOffset()__            for (int i = 0_ i < offset_ i++) {_                pointer.append(' ')__            }_        }_        pointer.append("^---- HERE")__        stack.add(pointer.toString())__        throw new ScriptException(message, cause, stack, source, NAME)__    };converts,a,parse,exception,at,compile,time,or,link,time,to,a,script,exception;private,script,exception,convert,to,script,exception,string,message,string,source,string,portion,throwable,cause,list,string,stack,new,array,list,stack,add,portion,string,builder,pointer,new,string,builder,if,cause,instanceof,parse,exception,int,offset,parse,exception,cause,get,error,offset,for,int,i,0,i,offset,i,pointer,append,pointer,append,here,stack,add,pointer,to,string,throw,new,script,exception,message,cause,stack,source,name
