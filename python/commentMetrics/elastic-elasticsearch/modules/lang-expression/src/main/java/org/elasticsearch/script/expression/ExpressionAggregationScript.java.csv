commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public Object execute() {     try {         return values.doubleValue().     } catch (Exception exception) {         throw new GeneralScriptException("Error evaluating " + exprScript, exception).     } }
false;public;1;8;;@Override public void setDocument(int d) {     try {         values.advanceExact(d).     } catch (IOException e) {         throw new IllegalStateException("Can't advance to doc using " + exprScript, e).     } }
false;public;1;11;;@Override public void setNextAggregationValue(Object value) {     // _value isn't used in script if specialValue == null     if (specialValue != null) {         if (value instanceof Number) {             specialValue.setValue(((Number) value).doubleValue()).         } else {             throw new GeneralScriptException("Cannot use expression with text variable using " + exprScript).         }     } }
false;public;1;37;;@Override public AggregationScript newInstance(final LeafReaderContext leaf) throws IOException {     return new AggregationScript() {          // Fake the scorer until setScorer is called.         DoubleValues values = source.getValues(leaf, null).          @Override         public Object execute() {             try {                 return values.doubleValue().             } catch (Exception exception) {                 throw new GeneralScriptException("Error evaluating " + exprScript, exception).             }         }          @Override         public void setDocument(int d) {             try {                 values.advanceExact(d).             } catch (IOException e) {                 throw new IllegalStateException("Can't advance to doc using " + exprScript, e).             }         }          @Override         public void setNextAggregationValue(Object value) {             // _value isn't used in script if specialValue == null             if (specialValue != null) {                 if (value instanceof Number) {                     specialValue.setValue(((Number) value).doubleValue()).                 } else {                     throw new GeneralScriptException("Cannot use expression with text variable using " + exprScript).                 }             }         }     }. }
false;public;0;4;;@Override public boolean needs_score() {     return false. }
