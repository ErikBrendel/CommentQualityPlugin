commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public double doubleVal(int docId) throws IOException {     if (docValues.advanceExact(docId)) {         long millis = (long) docValues.doubleValue().         calendar.setTimeInMillis(millis).         return calendar.get(calendarType).     } else {         return 0.     } }
false;public;2;19;;@Override // ValueSource uses a rawtype @SuppressWarnings("rawtypes") public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {     AtomicNumericFieldData leafData = (AtomicNumericFieldData) fieldData.load(leaf).     final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"), Locale.ROOT).     NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues()).     return new DoubleDocValues(this) {          @Override         public double doubleVal(int docId) throws IOException {             if (docValues.advanceExact(docId)) {                 long millis = (long) docValues.doubleValue().                 calendar.setTimeInMillis(millis).                 return calendar.get(calendarType).             } else {                 return 0.             }         }     }. }
false;public;0;4;;@Override public String description() {     return methodName + ": field(" + fieldData.getFieldName() + ")". }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     if (!super.equals(o))         return false.     DateMethodValueSource that = (DateMethodValueSource) o.     if (calendarType != that.calendarType)         return false.     return methodName.equals(that.methodName). }
false;public;0;7;;@Override public int hashCode() {     int result = super.hashCode().     result = 31 * result + methodName.hashCode().     result = 31 * result + calendarType.     return result. }
