commented;modifiers;parameterAmount;loc;comment;code
false;static;3;43;;static ValueSource getVariable(IndexFieldData<?> fieldData, String fieldName, String variable) {     switch(variable) {         case CENTURY_OF_ERA_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getCenturyOfEra).         case DAY_OF_MONTH_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getDayOfMonth).         case DAY_OF_WEEK_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getDayOfWeek).         case DAY_OF_YEAR_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getDayOfYear).         case ERA_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getEra).         case HOUR_OF_DAY_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getHourOfDay).         case MILLIS_OF_DAY_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getMillisOfDay).         case MILLIS_OF_SECOND_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getMillisOfSecond).         case MINUTE_OF_DAY_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getMinuteOfDay).         case MINUTE_OF_HOUR_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getMinuteOfHour).         case MONTH_OF_YEAR_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getMonthOfYear).         case SECOND_OF_DAY_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getSecondOfDay).         case SECOND_OF_MINUTE_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getSecondOfMinute).         case WEEK_OF_WEEK_YEAR_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getWeekOfWeekyear).         case WEEK_YEAR_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getWeekyear).         case YEAR_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getYear).         case YEAR_OF_CENTURY_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getYearOfCentury).         case YEAR_OF_ERA_VARIABLE:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, variable, ReadableDateTime::getYearOfEra).         default:             throw new IllegalArgumentException("Member variable [" + variable + "] does not exist for date object on field [" + fieldName + "].").     } }
false;static;3;43;;static ValueSource getMethod(IndexFieldData<?> fieldData, String fieldName, String method) {     switch(method) {         case GETCENTURY_OF_ERA_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getCenturyOfEra).         case GETDAY_OF_MONTH_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getDayOfMonth).         case GETDAY_OF_WEEK_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getDayOfWeek).         case GETDAY_OF_YEAR_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getDayOfYear).         case GETERA_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getEra).         case GETHOUR_OF_DAY_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getHourOfDay).         case GETMILLIS_OF_DAY_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getMillisOfDay).         case GETMILLIS_OF_SECOND_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getMillisOfSecond).         case GETMINUTE_OF_DAY_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getMinuteOfDay).         case GETMINUTE_OF_HOUR_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getMinuteOfHour).         case GETMONTH_OF_YEAR_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getMonthOfYear).         case GETSECOND_OF_DAY_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getSecondOfDay).         case GETSECOND_OF_MINUTE_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getSecondOfMinute).         case GETWEEK_OF_WEEK_YEAR_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getWeekOfWeekyear).         case GETWEEK_YEAR_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getWeekyear).         case GETYEAR_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getYear).         case GETYEAR_OF_CENTURY_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getYearOfCentury).         case GETYEAR_OF_ERA_METHOD:             return new DateObjectValueSource(fieldData, MultiValueMode.MIN, method, ReadableDateTime::getYearOfEra).         default:             throw new IllegalArgumentException("Member method [" + method + "] does not exist for date object on field [" + fieldName + "].").     } }
