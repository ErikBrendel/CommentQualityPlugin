commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public Number execute() {     try {         return values.doubleValue().     } catch (Exception exception) {         throw new GeneralScriptException("Error evaluating " + exprScript, exception).     } }
false;public;1;8;;@Override public void setDocument(int d) {     try {         values.advanceExact(d).     } catch (IOException e) {         throw new IllegalStateException("Can't advance to doc using " + exprScript, e).     } }
false;public;1;25;;@Override public TermsSetQueryScript newInstance(final LeafReaderContext leaf) throws IOException {     return new TermsSetQueryScript() {          // Fake the scorer until setScorer is called.         DoubleValues values = source.getValues(leaf, null).          @Override         public Number execute() {             try {                 return values.doubleValue().             } catch (Exception exception) {                 throw new GeneralScriptException("Error evaluating " + exprScript, exception).             }         }          @Override         public void setDocument(int d) {             try {                 values.advanceExact(d).             } catch (IOException e) {                 throw new IllegalStateException("Can't advance to doc using " + exprScript, e).             }         }     }. }
