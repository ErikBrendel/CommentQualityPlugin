commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Override public void setUp() throws Exception {     super.setUp().     NumberFieldMapper.NumberFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE).     MapperService mapperService = mock(MapperService.class).     when(mapperService.fullName("field")).thenReturn(fieldType).     when(mapperService.fullName("alias")).thenReturn(fieldType).     SortedNumericDoubleValues doubleValues = mock(SortedNumericDoubleValues.class).     when(doubleValues.advanceExact(anyInt())).thenReturn(true).     when(doubleValues.nextValue()).thenReturn(2.718).     AtomicNumericFieldData atomicFieldData = mock(AtomicNumericFieldData.class).     when(atomicFieldData.getDoubleValues()).thenReturn(doubleValues).     IndexNumericFieldData fieldData = mock(IndexNumericFieldData.class).     when(fieldData.getFieldName()).thenReturn("field").     when(fieldData.load(anyObject())).thenReturn(atomicFieldData).     service = new ExpressionScriptEngine().     lookup = new SearchLookup(mapperService, ignored -> fieldData, null). }
false;private;1;4;;private FieldScript.LeafFactory compile(String expression) {     FieldScript.Factory factory = service.compile(null, expression, FieldScript.CONTEXT, Collections.emptyMap()).     return factory.newFactory(Collections.emptyMap(), lookup). }
false;public;0;6;;public void testCompileError() {     ScriptException e = expectThrows(ScriptException.class, () -> {         compile("doc['field'].value * *@#)(@$*@#$ + 4").     }).     assertTrue(e.getCause() instanceof ParseException). }
false;public;0;6;;public void testLinkError() {     ScriptException e = expectThrows(ScriptException.class, () -> {         compile("doc['nonexistent'].value * 5").     }).     assertTrue(e.getCause() instanceof ParseException). }
false;public;0;7;;public void testFieldAccess() throws IOException {     FieldScript script = compile("doc['field'].value").newInstance(null).     script.setDocument(1).     Object result = script.execute().     assertThat(result, equalTo(2.718)). }
false;public;0;7;;public void testFieldAccessWithFieldAlias() throws IOException {     FieldScript script = compile("doc['alias'].value").newInstance(null).     script.setDocument(1).     Object result = script.execute().     assertThat(result, equalTo(2.718)). }
