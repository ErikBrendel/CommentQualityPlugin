commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException e = null.     if (rankingEvaluationSpec == null) {         e = new ActionRequestValidationException().         e.addValidationError("missing ranking evaluation specification").     }     return e. }
true;public;0;3;/**  * Returns the specification of the ranking evaluation.  */ ;/**  * Returns the specification of the ranking evaluation.  */ public RankEvalSpec getRankEvalSpec() {     return rankingEvaluationSpec. }
true;public;1;3;/**  * Set the the specification of the ranking evaluation.  */ ;/**  * Set the the specification of the ranking evaluation.  */ public void setRankEvalSpec(RankEvalSpec task) {     this.rankingEvaluationSpec = task. }
true;public;1;9;/**  * Sets the indices the search will be executed on.  */ ;/**  * Sets the indices the search will be executed on.  */ @Override public RankEvalRequest indices(String... indices) {     Objects.requireNonNull(indices, "indices must not be null").     for (String index : indices) {         Objects.requireNonNull(index, "index must not be null").     }     this.indices = indices.     return this. }
true;public;0;4;/**  * @return the indices for this request  */ ;/**  * @return the indices for this request  */ @Override public String[] indices() {     return indices. }
false;public;0;4;;@Override public IndicesOptions indicesOptions() {     return indicesOptions. }
false;public;1;3;;public void indicesOptions(IndicesOptions indicesOptions) {     this.indicesOptions = Objects.requireNonNull(indicesOptions, "indicesOptions must not be null"). }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     rankingEvaluationSpec.writeTo(out).     if (out.getVersion().onOrAfter(Version.V_6_3_0)) {         out.writeStringArray(indices).         indicesOptions.writeIndicesOptions(out).     } else {         // writeStringArray uses writeVInt for size, we used writeInt in 6.2         out.writeInt(indices.length).         for (String index : indices) {             out.writeString(index).         }     // no indices options yet     } }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     RankEvalRequest that = (RankEvalRequest) o.     return Objects.equals(indicesOptions, that.indicesOptions) && Arrays.equals(indices, that.indices) && Objects.equals(rankingEvaluationSpec, that.rankingEvaluationSpec). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(indicesOptions, Arrays.hashCode(indices), rankingEvaluationSpec). }
