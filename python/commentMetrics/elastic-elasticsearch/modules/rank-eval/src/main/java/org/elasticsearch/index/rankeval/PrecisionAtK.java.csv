commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;int getK() {     return this.k. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(relevantRatingThreshhold).     out.writeBoolean(ignoreUnlabeled).     out.writeVInt(k). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
true;public;0;3;/**  * Return the rating threshold above which ratings are considered to be  * "relevant" for this metric. Defaults to 1.  */ ;/**  * Return the rating threshold above which ratings are considered to be  * "relevant" for this metric. Defaults to 1.  */ public int getRelevantRatingThreshold() {     return relevantRatingThreshhold. }
true;public;0;3;/**  * Gets the 'ignore_unlabeled' parameter.  */ ;/**  * Gets the 'ignore_unlabeled' parameter.  */ public boolean getIgnoreUnlabeled() {     return ignoreUnlabeled. }
false;public;0;4;;@Override public OptionalInt forcedSearchSize() {     return OptionalInt.of(k). }
false;public,static;1;3;;public static PrecisionAtK fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
true;public;3;28;/**  * Compute precisionAtN based on provided relevant document IDs.  *  * @return precision at n for above {@link SearchResult} list.  */ ;/**  * Compute precisionAtN based on provided relevant document IDs.  *  * @return precision at n for above {@link SearchResult} list.  */ @Override public EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs) {     int truePositives = 0.     int falsePositives = 0.     List<RatedSearchHit> ratedSearchHits = joinHitsWithRatings(hits, ratedDocs).     for (RatedSearchHit hit : ratedSearchHits) {         OptionalInt rating = hit.getRating().         if (rating.isPresent()) {             if (rating.getAsInt() >= this.relevantRatingThreshhold) {                 truePositives++.             } else {                 falsePositives++.             }         } else if (ignoreUnlabeled == false) {             falsePositives++.         }     }     double precision = 0.0.     if (truePositives + falsePositives > 0) {         precision = (double) truePositives / (truePositives + falsePositives).     }     EvalQueryQuality evalQueryQuality = new EvalQueryQuality(taskId, precision).     evalQueryQuality.setMetricDetails(new PrecisionAtK.Detail(truePositives, truePositives + falsePositives)).     evalQueryQuality.addHitsAndRatings(ratedSearchHits).     return evalQueryQuality. }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(NAME).     builder.field(RELEVANT_RATING_FIELD.getPreferredName(), this.relevantRatingThreshhold).     builder.field(IGNORE_UNLABELED_FIELD.getPreferredName(), this.ignoreUnlabeled).     builder.field(K_FIELD.getPreferredName(), this.k).     builder.endObject().     builder.endObject().     return builder. }
false;public,final;1;13;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     PrecisionAtK other = (PrecisionAtK) obj.     return Objects.equals(relevantRatingThreshhold, other.relevantRatingThreshhold) && Objects.equals(k, other.k) && Objects.equals(ignoreUnlabeled, other.ignoreUnlabeled). }
false;public,final;0;4;;@Override public final int hashCode() {     return Objects.hash(relevantRatingThreshhold, ignoreUnlabeled, k). }
false;public;2;7;;@Override public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(RELEVANT_DOCS_RETRIEVED_FIELD.getPreferredName(), relevantRetrieved).     builder.field(DOCS_RETRIEVED_FIELD.getPreferredName(), retrieved).     return builder. }
false;public,static;1;3;;public static Detail fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(relevantRetrieved).     out.writeVInt(retrieved). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;0;3;;public int getRelevantRetrieved() {     return relevantRetrieved. }
false;public;0;3;;public int getRetrieved() {     return retrieved. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     PrecisionAtK.Detail other = (PrecisionAtK.Detail) obj.     return Objects.equals(relevantRetrieved, other.relevantRetrieved) && Objects.equals(retrieved, other.retrieved). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(relevantRetrieved, retrieved). }
