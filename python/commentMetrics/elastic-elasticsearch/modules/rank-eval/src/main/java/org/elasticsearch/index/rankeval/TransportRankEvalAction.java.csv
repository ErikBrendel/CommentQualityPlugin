commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;54;;@Override protected void doExecute(Task task, RankEvalRequest request, ActionListener<RankEvalResponse> listener) {     RankEvalSpec evaluationSpecification = request.getRankEvalSpec().     EvaluationMetric metric = evaluationSpecification.getMetric().     List<RatedRequest> ratedRequests = evaluationSpecification.getRatedRequests().     Map<String, Exception> errors = new ConcurrentHashMap<>(ratedRequests.size()).     Map<String, TemplateScript.Factory> scriptsWithoutParams = new HashMap<>().     for (Entry<String, Script> entry : evaluationSpecification.getTemplates().entrySet()) {         scriptsWithoutParams.put(entry.getKey(), scriptService.compile(entry.getValue(), TemplateScript.CONTEXT)).     }     MultiSearchRequest msearchRequest = new MultiSearchRequest().     msearchRequest.maxConcurrentSearchRequests(evaluationSpecification.getMaxConcurrentSearches()).     List<RatedRequest> ratedRequestsInSearch = new ArrayList<>().     for (RatedRequest ratedRequest : ratedRequests) {         SearchSourceBuilder evaluationRequest = ratedRequest.getEvaluationRequest().         if (evaluationRequest == null) {             Map<String, Object> params = ratedRequest.getParams().             String templateId = ratedRequest.getTemplateId().             TemplateScript.Factory templateScript = scriptsWithoutParams.get(templateId).             String resolvedRequest = templateScript.newInstance(params).execute().             try (XContentParser subParser = createParser(namedXContentRegistry, LoggingDeprecationHandler.INSTANCE, new BytesArray(resolvedRequest), XContentType.JSON)) {                 evaluationRequest = SearchSourceBuilder.fromXContent(subParser, false).                 // check for parts that should not be part of a ranking evaluation request                 validateEvaluatedQuery(evaluationRequest).             } catch (IOException e) {                 // if we fail parsing, put the exception into the errors map and continue                 errors.put(ratedRequest.getId(), e).                 continue.             }         }         if (metric.forcedSearchSize().isPresent()) {             evaluationRequest.size(metric.forcedSearchSize().getAsInt()).         }         ratedRequestsInSearch.add(ratedRequest).         List<String> summaryFields = ratedRequest.getSummaryFields().         if (summaryFields.isEmpty()) {             evaluationRequest.fetchSource(false).         } else {             evaluationRequest.fetchSource(summaryFields.toArray(new String[summaryFields.size()]), new String[0]).         }         SearchRequest searchRequest = new SearchRequest(request.indices(), evaluationRequest).         searchRequest.indicesOptions(request.indicesOptions()).         msearchRequest.add(searchRequest).     }     assert ratedRequestsInSearch.size() == msearchRequest.requests().size().     client.multiSearch(msearchRequest, new RankEvalActionListener(listener, metric, ratedRequestsInSearch.toArray(new RatedRequest[ratedRequestsInSearch.size()]), errors)). }
false;public;1;17;;@Override public void onResponse(MultiSearchResponse multiSearchResponse) {     int responsePosition = 0.     Map<String, EvalQueryQuality> responseDetails = new HashMap<>(specifications.length).     for (Item response : multiSearchResponse.getResponses()) {         RatedRequest specification = specifications[responsePosition].         if (response.isFailure() == false) {             SearchHit[] hits = response.getResponse().getHits().getHits().             EvalQueryQuality queryQuality = this.metric.evaluate(specification.getId(), hits, specification.getRatedDocs()).             responseDetails.put(specification.getId(), queryQuality).         } else {             errors.put(specification.getId(), response.getFailure()).         }         responsePosition++.     }     listener.onResponse(new RankEvalResponse(this.metric.combine(responseDetails.values()), responseDetails, this.errors)). }
false;public;1;4;;@Override public void onFailure(Exception exception) {     listener.onFailure(exception). }
