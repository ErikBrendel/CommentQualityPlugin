commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(queryId).     out.writeDouble(metricScore).     out.writeList(ratedHits).     out.writeOptionalNamedWriteable(this.optionalMetricDetails). }
false;public;0;3;;public String getId() {     return queryId. }
false;public;0;3;;public double metricScore() {     return metricScore. }
false;public;1;3;;public void setMetricDetails(MetricDetail breakdown) {     this.optionalMetricDetails = breakdown. }
false;public;0;3;;public MetricDetail getMetricDetails() {     return this.optionalMetricDetails. }
false;public;1;3;;public void addHitsAndRatings(List<RatedSearchHit> hits) {     this.ratedHits.addAll(hits). }
false;public;0;3;;public List<RatedSearchHit> getHitsAndRatings() {     return this.ratedHits. }
false;public;2;23;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(queryId).     builder.field(METRIC_SCORE_FIELD.getPreferredName(), this.metricScore).     builder.startArray(UNRATED_DOCS_FIELD.getPreferredName()).     for (DocumentKey key : EvaluationMetric.filterUnratedDocuments(ratedHits)) {         builder.startObject().         builder.field(RatedDocument.INDEX_FIELD.getPreferredName(), key.getIndex()).         builder.field(RatedDocument.DOC_ID_FIELD.getPreferredName(), key.getDocId()).         builder.endObject().     }     builder.endArray().     builder.startArray(HITS_FIELD.getPreferredName()).     for (RatedSearchHit hit : ratedHits) {         hit.toXContent(builder, params).     }     builder.endArray().     if (optionalMetricDetails != null) {         builder.field(METRIC_DETAILS_FIELD.getPreferredName(), optionalMetricDetails).     }     builder.endObject().     return builder. }
false;private,static;1;7;;private static MetricDetail parseMetricDetail(XContentParser parser) throws IOException {     XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation).     XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation).     MetricDetail metricDetail = parser.namedObject(MetricDetail.class, parser.currentName(), null).     XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation).     return metricDetail. }
false;public,static;2;3;;public static EvalQueryQuality fromXContent(XContentParser parser, String queryId) throws IOException {     return new EvalQueryQuality(queryId, PARSER.apply(parser, null)). }
false;public,final;1;14;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     EvalQueryQuality other = (EvalQueryQuality) obj.     return Objects.equals(queryId, other.queryId) && Objects.equals(metricScore, other.metricScore) && Objects.equals(ratedHits, other.ratedHits) && Objects.equals(optionalMetricDetails, other.optionalMetricDetails). }
false;public,final;0;4;;@Override public final int hashCode() {     return Objects.hash(queryId, metricScore, ratedHits, optionalMetricDetails). }
