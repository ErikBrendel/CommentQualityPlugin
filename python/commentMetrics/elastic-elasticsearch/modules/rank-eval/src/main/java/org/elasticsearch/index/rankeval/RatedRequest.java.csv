commented;modifiers;parameterAmount;loc;comment;code
false;static;1;20;;static void validateEvaluatedQuery(SearchSourceBuilder evaluationRequest) {     // ensure that testRequest, if set, does not contain aggregation, suggest or highlighting section     if (evaluationRequest != null) {         if (evaluationRequest.suggest() != null) {             throw new IllegalArgumentException("Query in rated requests should not contain a suggest section.").         }         if (evaluationRequest.aggregations() != null) {             throw new IllegalArgumentException("Query in rated requests should not contain aggregations.").         }         if (evaluationRequest.highlighter() != null) {             throw new IllegalArgumentException("Query in rated requests should not contain a highlighter section.").         }         if (evaluationRequest.explain() != null && evaluationRequest.explain()) {             throw new IllegalArgumentException("Query in rated requests should not use explain.").         }         if (evaluationRequest.profile()) {             throw new IllegalArgumentException("Query in rated requests should not use profile.").         }     } }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(id).     out.writeOptionalWriteable(evaluationRequest).     out.writeInt(ratedDocs.size()).     for (RatedDocument ratedDoc : ratedDocs) {         ratedDoc.writeTo(out).     }     out.writeMap(params).     out.writeInt(summaryFields.size()).     for (String fieldName : summaryFields) {         out.writeString(fieldName).     }     out.writeOptionalString(this.templateId). }
false;public;0;3;;public SearchSourceBuilder getEvaluationRequest() {     return evaluationRequest. }
true;public;0;3;/**  * return the user supplied request id  */ ;/**  * return the user supplied request id  */ public String getId() {     return id. }
true;public;0;3;/**  * return the list of rated documents to evaluate.  */ ;/**  * return the list of rated documents to evaluate.  */ public List<RatedDocument> getRatedDocs() {     return Collections.unmodifiableList(ratedDocs). }
true;public;0;3;/**  * return the parameters if this request uses a template, otherwise this will be empty.  */ ;/**  * return the parameters if this request uses a template, otherwise this will be empty.  */ public Map<String, Object> getParams() {     return Collections.unmodifiableMap(this.params). }
true;public;0;3;/**  * return the parameters if this request uses a template, otherwise this will be {@code null}.  */ ;/**  * return the parameters if this request uses a template, otherwise this will be {@code null}.  */ public String getTemplateId() {     return this.templateId. }
true;public;0;3;/**  * returns a list of fields that should be included in the document summary for matched documents  */ ;/**  * returns a list of fields that should be included in the document summary for matched documents  */ public List<String> getSummaryFields() {     return Collections.unmodifiableList(summaryFields). }
false;public;1;3;;public void addSummaryFields(List<String> summaryFields) {     this.summaryFields.addAll(Objects.requireNonNull(summaryFields, "no summary fields supplied")). }
true;public,static;1;3;/**  * parse from rest representation  */ ;/**  * parse from rest representation  */ public static RatedRequest fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;2;32;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ID_FIELD.getPreferredName(), this.id).     if (evaluationRequest != null) {         builder.field(REQUEST_FIELD.getPreferredName(), this.evaluationRequest).     }     builder.startArray(RATINGS_FIELD.getPreferredName()).     for (RatedDocument doc : this.ratedDocs) {         doc.toXContent(builder, params).     }     builder.endArray().     if (this.templateId != null) {         builder.field(TEMPLATE_ID_FIELD.getPreferredName(), this.templateId).     }     if (this.params.isEmpty() == false) {         builder.startObject(PARAMS_FIELD.getPreferredName()).         for (Entry<String, Object> entry : this.params.entrySet()) {             builder.field(entry.getKey(), entry.getValue()).         }         builder.endObject().     }     if (this.summaryFields.isEmpty() == false) {         builder.startArray(FIELDS_FIELD.getPreferredName()).         for (String field : this.summaryFields) {             builder.value(field).         }         builder.endArray().     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public,final;1;17;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     RatedRequest other = (RatedRequest) obj.     return Objects.equals(id, other.id) && Objects.equals(evaluationRequest, other.evaluationRequest) && Objects.equals(summaryFields, other.summaryFields) && Objects.equals(ratedDocs, other.ratedDocs) && Objects.equals(params, other.params) && Objects.equals(templateId, other.templateId). }
false;public,final;0;5;;@Override public final int hashCode() {     return Objects.hash(id, evaluationRequest, summaryFields, ratedDocs, params, templateId). }
