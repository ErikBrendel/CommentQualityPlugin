commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(maxRelevance).     out.writeOptionalVInt(unknownDocRating).     out.writeVInt(k). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;;0;3;;int getK() {     return this.k. }
false;;0;3;;int getMaxRelevance() {     return this.maxRelevance. }
true;public;0;3;/**  * get the rating used for unrated documents  */ ;/**  * get the rating used for unrated documents  */ public Integer getUnknownDocRating() {     return this.unknownDocRating. }
false;public;0;4;;@Override public OptionalInt forcedSearchSize() {     return OptionalInt.of(k). }
false;public;3;38;;@Override public EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs) {     List<RatedSearchHit> ratedHits = joinHitsWithRatings(hits, ratedDocs).     if (ratedHits.size() > this.k) {         ratedHits = ratedHits.subList(0, k).     }     List<Integer> ratingsInSearchHits = new ArrayList<>(ratedHits.size()).     int unratedResults = 0.     for (RatedSearchHit hit : ratedHits) {         if (hit.getRating().isPresent()) {             ratingsInSearchHits.add(hit.getRating().getAsInt()).         } else {             // unknownDocRating might be null, in which case unrated docs will be ignored in the dcg calculation.             // we still need to add them as a placeholder so the rank of the subsequent ratings is correct             ratingsInSearchHits.add(unknownDocRating).         }         if (hit.getRating().isPresent() == false) {             unratedResults++.         }     }     double p = 1.     double err = 0.     int rank = 1.     for (Integer rating : ratingsInSearchHits) {         if (rating != null) {             double probR = probabilityOfRelevance(rating).             err = err + (p * probR / rank).             p = p * (1 - probR).         }         rank++.     }     EvalQueryQuality evalQueryQuality = new EvalQueryQuality(taskId, err).     evalQueryQuality.addHitsAndRatings(ratedHits).     evalQueryQuality.setMetricDetails(new Detail(unratedResults)).     return evalQueryQuality. }
false;;1;3;;double probabilityOfRelevance(Integer rating) {     return (Math.pow(2, rating) - 1) / this.two_pow_maxRelevance. }
false;public,static;1;3;;public static ExpectedReciprocalRank fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(NAME).     builder.field(MAX_RELEVANCE_FIELD.getPreferredName(), this.maxRelevance).     if (unknownDocRating != null) {         builder.field(UNKNOWN_DOC_RATING_FIELD.getPreferredName(), this.unknownDocRating).     }     builder.field(K_FIELD.getPreferredName(), this.k).     builder.endObject().     builder.endObject().     return builder. }
false;public,final;1;13;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ExpectedReciprocalRank other = (ExpectedReciprocalRank) obj.     return this.k == other.k && this.maxRelevance == other.maxRelevance && Objects.equals(unknownDocRating, other.unknownDocRating). }
false;public,final;0;4;;@Override public final int hashCode() {     return Objects.hash(unknownDocRating, k, maxRelevance). }
false;public;0;5;;@Override public String getMetricName() {     return NAME. }
false;public;2;4;;@Override public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException {     return builder.field(UNRATED_FIELD.getPreferredName(), this.unratedDocs). }
false;public,static;1;3;;public static Detail fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(this.unratedDocs). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
true;public;0;3;/**  * @return the number of unrated documents in the search results  */ ;/**  * @return the number of unrated documents in the search results  */ public Object getUnratedDocs() {     return this.unratedDocs. }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ExpectedReciprocalRank.Detail other = (ExpectedReciprocalRank.Detail) obj.     return this.unratedDocs == other.unratedDocs. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(this.unratedDocs). }
