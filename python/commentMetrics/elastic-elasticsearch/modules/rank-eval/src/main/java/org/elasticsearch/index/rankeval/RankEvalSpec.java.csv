commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(ratedRequests.size()).     for (RatedRequest spec : ratedRequests) {         spec.writeTo(out).     }     out.writeNamedWriteable(metric).     out.writeVInt(templates.size()).     for (Entry<String, Script> entry : templates.entrySet()) {         out.writeString(entry.getKey()).         entry.getValue().writeTo(out).     }     out.writeVInt(maxConcurrentSearches). }
true;public;0;3;/**  * Returns the metric to use for quality evaluation.  */ ;/**  * Returns the metric to use for quality evaluation.  */ public EvaluationMetric getMetric() {     return metric. }
true;public;0;3;/**  * Returns a list of intent to query translation specifications to evaluate.  */ ;/**  * Returns a list of intent to query translation specifications to evaluate.  */ public List<RatedRequest> getRatedRequests() {     return Collections.unmodifiableList(ratedRequests). }
true;public;0;3;/**  * Returns the template to base test requests on.  */ ;/**  * Returns the template to base test requests on.  */ public Map<String, Script> getTemplates() {     return this.templates. }
true;public;0;3;/**  * Returns the max concurrent searches allowed.  */ ;/**  * Returns the max concurrent searches allowed.  */ public int getMaxConcurrentSearches() {     return this.maxConcurrentSearches. }
true;public;1;3;/**  * Set the max concurrent searches allowed.  */ ;/**  * Set the max concurrent searches allowed.  */ public void setMaxConcurrentSearches(int maxConcurrentSearches) {     this.maxConcurrentSearches = maxConcurrentSearches. }
false;private,static;1;7;;private static EvaluationMetric parseMetric(XContentParser parser) throws IOException {     XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation).     XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation).     EvaluationMetric metric = parser.namedObject(EvaluationMetric.class, parser.currentName(), null).     XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation).     return metric. }
false;public,static;1;3;;public static RankEvalSpec parse(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public,static;1;3;;public static ScriptWithId fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;2;22;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startArray(TEMPLATES_FIELD.getPreferredName()).     for (Entry<String, Script> entry : templates.entrySet()) {         builder.startObject().         builder.field(ScriptWithId.TEMPLATE_ID_FIELD.getPreferredName(), entry.getKey()).         builder.field(ScriptWithId.TEMPLATE_FIELD.getPreferredName(), entry.getValue()).         builder.endObject().     }     builder.endArray().     builder.startArray(REQUESTS_FIELD.getPreferredName()).     for (RatedRequest spec : this.ratedRequests) {         spec.toXContent(builder, params).     }     builder.endArray().     builder.field(METRIC_FIELD.getPreferredName(), this.metric).     builder.field(MAX_CONCURRENT_SEARCHES_FIELD.getPreferredName(), maxConcurrentSearches).     builder.endObject().     return builder. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public,final;1;15;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     RankEvalSpec other = (RankEvalSpec) obj.     return Objects.equals(ratedRequests, other.ratedRequests) && Objects.equals(metric, other.metric) && Objects.equals(maxConcurrentSearches, other.maxConcurrentSearches) && Objects.equals(templates, other.templates). }
false;public,final;0;4;;@Override public final int hashCode() {     return Objects.hash(ratedRequests, metric, templates, maxConcurrentSearches). }
