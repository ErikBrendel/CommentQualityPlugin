# id;timestamp;commentText;codeText;commentWords;codeWords
EvaluationMetric -> static List<RatedSearchHit> joinHitsWithRatings(SearchHit[] hits, List<RatedDocument> ratedDocs);1524684173;join hits with rated documents using the joint _index/_id document key;static List<RatedSearchHit> joinHitsWithRatings(SearchHit[] hits, List<RatedDocument> ratedDocs) {_        Map<DocumentKey, RatedDocument> ratedDocumentMap = ratedDocs.stream()_                .collect(Collectors.toMap(RatedDocument::getKey, item -> item))__        List<RatedSearchHit> ratedSearchHits = new ArrayList<>(hits.length)__        for (SearchHit hit : hits) {_            DocumentKey key = new DocumentKey(hit.getIndex(), hit.getId())__            RatedDocument ratedDoc = ratedDocumentMap.get(key)__            if (ratedDoc != null) {_                ratedSearchHits.add(new RatedSearchHit(hit, Optional.of(ratedDoc.getRating())))__            } else {_                ratedSearchHits.add(new RatedSearchHit(hit, Optional.empty()))__            }_        }_        return ratedSearchHits__    };join,hits,with,rated,documents,using,the,joint,document,key;static,list,rated,search,hit,join,hits,with,ratings,search,hit,hits,list,rated,document,rated,docs,map,document,key,rated,document,rated,document,map,rated,docs,stream,collect,collectors,to,map,rated,document,get,key,item,item,list,rated,search,hit,rated,search,hits,new,array,list,hits,length,for,search,hit,hit,hits,document,key,key,new,document,key,hit,get,index,hit,get,id,rated,document,rated,doc,rated,document,map,get,key,if,rated,doc,null,rated,search,hits,add,new,rated,search,hit,hit,optional,of,rated,doc,get,rating,else,rated,search,hits,add,new,rated,search,hit,hit,optional,empty,return,rated,search,hits
EvaluationMetric -> static List<RatedSearchHit> joinHitsWithRatings(SearchHit[] hits, List<RatedDocument> ratedDocs);1532353780;join hits with rated documents using the joint _index/_id document key;static List<RatedSearchHit> joinHitsWithRatings(SearchHit[] hits, List<RatedDocument> ratedDocs) {_        Map<DocumentKey, RatedDocument> ratedDocumentMap = ratedDocs.stream()_                .collect(Collectors.toMap(RatedDocument::getKey, item -> item))__        List<RatedSearchHit> ratedSearchHits = new ArrayList<>(hits.length)__        for (SearchHit hit : hits) {_            DocumentKey key = new DocumentKey(hit.getIndex(), hit.getId())__            RatedDocument ratedDoc = ratedDocumentMap.get(key)__            if (ratedDoc != null) {_                ratedSearchHits.add(new RatedSearchHit(hit, Optional.of(ratedDoc.getRating())))__            } else {_                ratedSearchHits.add(new RatedSearchHit(hit, Optional.empty()))__            }_        }_        return ratedSearchHits__    };join,hits,with,rated,documents,using,the,joint,document,key;static,list,rated,search,hit,join,hits,with,ratings,search,hit,hits,list,rated,document,rated,docs,map,document,key,rated,document,rated,document,map,rated,docs,stream,collect,collectors,to,map,rated,document,get,key,item,item,list,rated,search,hit,rated,search,hits,new,array,list,hits,length,for,search,hit,hit,hits,document,key,key,new,document,key,hit,get,index,hit,get,id,rated,document,rated,doc,rated,document,map,get,key,if,rated,doc,null,rated,search,hits,add,new,rated,search,hit,hit,optional,of,rated,doc,get,rating,else,rated,search,hits,add,new,rated,search,hit,hit,optional,empty,return,rated,search,hits
EvaluationMetric -> static List<RatedSearchHit> joinHitsWithRatings(SearchHit[] hits, List<RatedDocument> ratedDocs);1532434432;Joins hits with rated documents using the joint _index/_id document key.;static List<RatedSearchHit> joinHitsWithRatings(SearchHit[] hits, List<RatedDocument> ratedDocs) {_        Map<DocumentKey, RatedDocument> ratedDocumentMap = ratedDocs.stream()_                .collect(Collectors.toMap(RatedDocument::getKey, item -> item))__        List<RatedSearchHit> ratedSearchHits = new ArrayList<>(hits.length)__        for (SearchHit hit : hits) {_            DocumentKey key = new DocumentKey(hit.getIndex(), hit.getId())__            RatedDocument ratedDoc = ratedDocumentMap.get(key)__            if (ratedDoc != null) {_                ratedSearchHits.add(new RatedSearchHit(hit, Optional.of(ratedDoc.getRating())))__            } else {_                ratedSearchHits.add(new RatedSearchHit(hit, Optional.empty()))__            }_        }_        return ratedSearchHits__    };joins,hits,with,rated,documents,using,the,joint,document,key;static,list,rated,search,hit,join,hits,with,ratings,search,hit,hits,list,rated,document,rated,docs,map,document,key,rated,document,rated,document,map,rated,docs,stream,collect,collectors,to,map,rated,document,get,key,item,item,list,rated,search,hit,rated,search,hits,new,array,list,hits,length,for,search,hit,hit,hits,document,key,key,new,document,key,hit,get,index,hit,get,id,rated,document,rated,doc,rated,document,map,get,key,if,rated,doc,null,rated,search,hits,add,new,rated,search,hit,hit,optional,of,rated,doc,get,rating,else,rated,search,hits,add,new,rated,search,hit,hit,optional,empty,return,rated,search,hits
EvaluationMetric -> static List<RatedSearchHit> joinHitsWithRatings(SearchHit[] hits, List<RatedDocument> ratedDocs);1538509426;Joins hits with rated documents using the joint _index/_id document key.;static List<RatedSearchHit> joinHitsWithRatings(SearchHit[] hits, List<RatedDocument> ratedDocs) {_        Map<DocumentKey, RatedDocument> ratedDocumentMap = ratedDocs.stream()_                .collect(Collectors.toMap(RatedDocument::getKey, item -> item))__        List<RatedSearchHit> ratedSearchHits = new ArrayList<>(hits.length)__        for (SearchHit hit : hits) {_            DocumentKey key = new DocumentKey(hit.getIndex(), hit.getId())__            RatedDocument ratedDoc = ratedDocumentMap.get(key)__            if (ratedDoc != null) {_                ratedSearchHits.add(new RatedSearchHit(hit, OptionalInt.of(ratedDoc.getRating())))__            } else {_                ratedSearchHits.add(new RatedSearchHit(hit, OptionalInt.empty()))__            }_        }_        return ratedSearchHits__    };joins,hits,with,rated,documents,using,the,joint,document,key;static,list,rated,search,hit,join,hits,with,ratings,search,hit,hits,list,rated,document,rated,docs,map,document,key,rated,document,rated,document,map,rated,docs,stream,collect,collectors,to,map,rated,document,get,key,item,item,list,rated,search,hit,rated,search,hits,new,array,list,hits,length,for,search,hit,hit,hits,document,key,key,new,document,key,hit,get,index,hit,get,id,rated,document,rated,doc,rated,document,map,get,key,if,rated,doc,null,rated,search,hits,add,new,rated,search,hit,hit,optional,int,of,rated,doc,get,rating,else,rated,search,hits,add,new,rated,search,hit,hit,optional,int,empty,return,rated,search,hits
EvaluationMetric -> EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs)_;1524684173;Returns a single metric representing the ranking quality of a set of returned_documents wrt. to a set of document ids labeled as relevant for this search.__@param taskId_the id of the query for which the ranking is currently evaluated_@param hits_the result hits as returned by a search request_@param ratedDocs_the documents that were ranked by human annotators for this query_case_@return some metric representing the quality of the result hit list wrt. to_relevant doc ids.;EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs)_;returns,a,single,metric,representing,the,ranking,quality,of,a,set,of,returned,documents,wrt,to,a,set,of,document,ids,labeled,as,relevant,for,this,search,param,task,id,the,id,of,the,query,for,which,the,ranking,is,currently,evaluated,param,hits,the,result,hits,as,returned,by,a,search,request,param,rated,docs,the,documents,that,were,ranked,by,human,annotators,for,this,query,case,return,some,metric,representing,the,quality,of,the,result,hit,list,wrt,to,relevant,doc,ids;eval,query,quality,evaluate,string,task,id,search,hit,hits,list,rated,document,rated,docs
EvaluationMetric -> EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs)_;1532353780;Returns a single metric representing the ranking quality of a set of returned_documents wrt. to a set of document ids labeled as relevant for this search.__@param taskId_the id of the query for which the ranking is currently evaluated_@param hits_the result hits as returned by a search request_@param ratedDocs_the documents that were ranked by human annotators for this query_case_@return some metric representing the quality of the result hit list wrt. to_relevant doc ids.;EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs)_;returns,a,single,metric,representing,the,ranking,quality,of,a,set,of,returned,documents,wrt,to,a,set,of,document,ids,labeled,as,relevant,for,this,search,param,task,id,the,id,of,the,query,for,which,the,ranking,is,currently,evaluated,param,hits,the,result,hits,as,returned,by,a,search,request,param,rated,docs,the,documents,that,were,ranked,by,human,annotators,for,this,query,case,return,some,metric,representing,the,quality,of,the,result,hit,list,wrt,to,relevant,doc,ids;eval,query,quality,evaluate,string,task,id,search,hit,hits,list,rated,document,rated,docs
EvaluationMetric -> EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs)_;1532434432;Evaluates a single ranking evaluation case.__@param taskId_an identifier of the query for which the search ranking is_evaluated_@param hits_the search result hits_@param ratedDocs_the documents that contain the document rating for this query case_@return an {@link EvalQueryQuality} instance that contains the metric score_with respect to the provided search hits and ratings;EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs)_;evaluates,a,single,ranking,evaluation,case,param,task,id,an,identifier,of,the,query,for,which,the,search,ranking,is,evaluated,param,hits,the,search,result,hits,param,rated,docs,the,documents,that,contain,the,document,rating,for,this,query,case,return,an,link,eval,query,quality,instance,that,contains,the,metric,score,with,respect,to,the,provided,search,hits,and,ratings;eval,query,quality,evaluate,string,task,id,search,hit,hits,list,rated,document,rated,docs
EvaluationMetric -> EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs)_;1538509426;Evaluates a single ranking evaluation case.__@param taskId_an identifier of the query for which the search ranking is_evaluated_@param hits_the search result hits_@param ratedDocs_the documents that contain the document rating for this query case_@return an {@link EvalQueryQuality} instance that contains the metric score_with respect to the provided search hits and ratings;EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs)_;evaluates,a,single,ranking,evaluation,case,param,task,id,an,identifier,of,the,query,for,which,the,search,ranking,is,evaluated,param,hits,the,search,result,hits,param,rated,docs,the,documents,that,contain,the,document,rating,for,this,query,case,return,an,link,eval,query,quality,instance,that,contains,the,metric,score,with,respect,to,the,provided,search,hits,and,ratings;eval,query,quality,evaluate,string,task,id,search,hit,hits,list,rated,document,rated,docs
EvaluationMetric -> default double combine(Collection<EvalQueryQuality> partialResults);1524684173;how evaluation metrics for particular search queries get combined for the overall evaluation score._Defaults to averaging over the partial results.;default double combine(Collection<EvalQueryQuality> partialResults) {_        return partialResults.stream().mapToDouble(EvalQueryQuality::getQualityLevel).sum() / partialResults.size()__    };how,evaluation,metrics,for,particular,search,queries,get,combined,for,the,overall,evaluation,score,defaults,to,averaging,over,the,partial,results;default,double,combine,collection,eval,query,quality,partial,results,return,partial,results,stream,map,to,double,eval,query,quality,get,quality,level,sum,partial,results,size
EvaluationMetric -> default double combine(Collection<EvalQueryQuality> partialResults);1532353780;how evaluation metrics for particular search queries get combined for the overall evaluation score._Defaults to averaging over the partial results.;default double combine(Collection<EvalQueryQuality> partialResults) {_        return partialResults.stream().mapToDouble(EvalQueryQuality::getQualityLevel).sum() / partialResults.size()__    };how,evaluation,metrics,for,particular,search,queries,get,combined,for,the,overall,evaluation,score,defaults,to,averaging,over,the,partial,results;default,double,combine,collection,eval,query,quality,partial,results,return,partial,results,stream,map,to,double,eval,query,quality,get,quality,level,sum,partial,results,size
EvaluationMetric -> default double combine(Collection<EvalQueryQuality> partialResults);1532434432;Combine several {@link EvalQueryQuality} results into the overall evaluation score._This defaults to averaging over the partial results, but can be overwritten to obtain a different behavior.;default double combine(Collection<EvalQueryQuality> partialResults) {_        return partialResults.stream().mapToDouble(EvalQueryQuality::metricScore).sum() / partialResults.size()__    };combine,several,link,eval,query,quality,results,into,the,overall,evaluation,score,this,defaults,to,averaging,over,the,partial,results,but,can,be,overwritten,to,obtain,a,different,behavior;default,double,combine,collection,eval,query,quality,partial,results,return,partial,results,stream,map,to,double,eval,query,quality,metric,score,sum,partial,results,size
EvaluationMetric -> default double combine(Collection<EvalQueryQuality> partialResults);1538509426;Combine several {@link EvalQueryQuality} results into the overall evaluation score._This defaults to averaging over the partial results, but can be overwritten to obtain a different behavior.;default double combine(Collection<EvalQueryQuality> partialResults) {_        return partialResults.stream().mapToDouble(EvalQueryQuality::metricScore).sum() / partialResults.size()__    };combine,several,link,eval,query,quality,results,into,the,overall,evaluation,score,this,defaults,to,averaging,over,the,partial,results,but,can,be,overwritten,to,obtain,a,different,behavior;default,double,combine,collection,eval,query,quality,partial,results,return,partial,results,stream,map,to,double,eval,query,quality,metric,score,sum,partial,results,size
EvaluationMetric -> default Optional<Integer> forcedSearchSize();1524684173;Metrics can define a size of the search hits windows they want to retrieve by overwriting_this method. The default implementation returns an empty optional._@return the number of search hits this metrics requests;default Optional<Integer> forcedSearchSize() {_        return Optional.empty()__    };metrics,can,define,a,size,of,the,search,hits,windows,they,want,to,retrieve,by,overwriting,this,method,the,default,implementation,returns,an,empty,optional,return,the,number,of,search,hits,this,metrics,requests;default,optional,integer,forced,search,size,return,optional,empty
EvaluationMetric -> default Optional<Integer> forcedSearchSize();1532353780;Metrics can define a size of the search hits windows they want to retrieve by overwriting_this method. The default implementation returns an empty optional._@return the number of search hits this metrics requests;default Optional<Integer> forcedSearchSize() {_        return Optional.empty()__    };metrics,can,define,a,size,of,the,search,hits,windows,they,want,to,retrieve,by,overwriting,this,method,the,default,implementation,returns,an,empty,optional,return,the,number,of,search,hits,this,metrics,requests;default,optional,integer,forced,search,size,return,optional,empty
EvaluationMetric -> default Optional<Integer> forcedSearchSize();1532434432;Metrics can define a size of the search hits windows they want to retrieve by overwriting_this method. The default implementation returns an empty optional._@return the number of search hits this metrics requests;default Optional<Integer> forcedSearchSize() {_        return Optional.empty()__    };metrics,can,define,a,size,of,the,search,hits,windows,they,want,to,retrieve,by,overwriting,this,method,the,default,implementation,returns,an,empty,optional,return,the,number,of,search,hits,this,metrics,requests;default,optional,integer,forced,search,size,return,optional,empty
EvaluationMetric -> static List<DocumentKey> filterUnratedDocuments(List<RatedSearchHit> ratedHits);1532353780;filter @link {@link RatedSearchHit} that don't have a rating;static List<DocumentKey> filterUnratedDocuments(List<RatedSearchHit> ratedHits) {_        return ratedHits.stream().filter(hit -> hit.getRating().isPresent() == false)_                .map(hit -> new DocumentKey(hit.getSearchHit().getIndex(), hit.getSearchHit().getId())).collect(Collectors.toList())__    };filter,link,link,rated,search,hit,that,don,t,have,a,rating;static,list,document,key,filter,unrated,documents,list,rated,search,hit,rated,hits,return,rated,hits,stream,filter,hit,hit,get,rating,is,present,false,map,hit,new,document,key,hit,get,search,hit,get,index,hit,get,search,hit,get,id,collect,collectors,to,list
EvaluationMetric -> static List<DocumentKey> filterUnratedDocuments(List<RatedSearchHit> ratedHits);1532434432;Filter {@link RatedSearchHit}s that do not have a rating.;static List<DocumentKey> filterUnratedDocuments(List<RatedSearchHit> ratedHits) {_        return ratedHits.stream().filter(hit -> hit.getRating().isPresent() == false)_                .map(hit -> new DocumentKey(hit.getSearchHit().getIndex(), hit.getSearchHit().getId())).collect(Collectors.toList())__    };filter,link,rated,search,hit,s,that,do,not,have,a,rating;static,list,document,key,filter,unrated,documents,list,rated,search,hit,rated,hits,return,rated,hits,stream,filter,hit,hit,get,rating,is,present,false,map,hit,new,document,key,hit,get,search,hit,get,index,hit,get,search,hit,get,id,collect,collectors,to,list
EvaluationMetric -> static List<DocumentKey> filterUnratedDocuments(List<RatedSearchHit> ratedHits);1538509426;Filter {@link RatedSearchHit}s that do not have a rating.;static List<DocumentKey> filterUnratedDocuments(List<RatedSearchHit> ratedHits) {_        return ratedHits.stream().filter(hit -> hit.getRating().isPresent() == false)_                .map(hit -> new DocumentKey(hit.getSearchHit().getIndex(), hit.getSearchHit().getId())).collect(Collectors.toList())__    };filter,link,rated,search,hit,s,that,do,not,have,a,rating;static,list,document,key,filter,unrated,documents,list,rated,search,hit,rated,hits,return,rated,hits,stream,filter,hit,hit,get,rating,is,present,false,map,hit,new,document,key,hit,get,search,hit,get,index,hit,get,search,hit,get,id,collect,collectors,to,list
