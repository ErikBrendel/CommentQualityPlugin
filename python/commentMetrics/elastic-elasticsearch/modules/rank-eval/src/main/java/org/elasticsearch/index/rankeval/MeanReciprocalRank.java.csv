# id;timestamp;commentText;codeText;commentWords;codeWords
MeanReciprocalRank -> Detail -> public int getFirstRelevantRank();1524684173;the ranking of the first relevant document, or -1 if no relevant document was_found;public int getFirstRelevantRank() {_            return firstRelevantRank__        };the,ranking,of,the,first,relevant,document,or,1,if,no,relevant,document,was,found;public,int,get,first,relevant,rank,return,first,relevant,rank
MeanReciprocalRank -> Detail -> public int getFirstRelevantRank();1532434432;the ranking of the first relevant document, or -1 if no relevant document was_found;public int getFirstRelevantRank() {_            return firstRelevantRank__        };the,ranking,of,the,first,relevant,document,or,1,if,no,relevant,document,was,found;public,int,get,first,relevant,rank,return,first,relevant,rank
MeanReciprocalRank -> Detail -> public int getFirstRelevantRank();1538509426;the ranking of the first relevant document, or -1 if no relevant document was_found;public int getFirstRelevantRank() {_            return firstRelevantRank__        };the,ranking,of,the,first,relevant,document,or,1,if,no,relevant,document,was,found;public,int,get,first,relevant,rank,return,first,relevant,rank
MeanReciprocalRank -> public int getRelevantRatingThreshold();1524684173;Return the rating threshold above which ratings are considered to be "relevant".;public int getRelevantRatingThreshold() {_        return relevantRatingThreshhold__    };return,the,rating,threshold,above,which,ratings,are,considered,to,be,relevant;public,int,get,relevant,rating,threshold,return,relevant,rating,threshhold
MeanReciprocalRank -> public int getRelevantRatingThreshold();1532434432;Return the rating threshold above which ratings are considered to be "relevant".;public int getRelevantRatingThreshold() {_        return relevantRatingThreshhold__    };return,the,rating,threshold,above,which,ratings,are,considered,to,be,relevant;public,int,get,relevant,rating,threshold,return,relevant,rating,threshhold
MeanReciprocalRank -> public int getRelevantRatingThreshold();1538509426;Return the rating threshold above which ratings are considered to be "relevant".;public int getRelevantRatingThreshold() {_        return relevantRatingThreshhold__    };return,the,rating,threshold,above,which,ratings,are,considered,to,be,relevant;public,int,get,relevant,rating,threshold,return,relevant,rating,threshhold
MeanReciprocalRank -> public MeanReciprocalRank(int relevantRatingThreshold, int k);1524684173;Metric implementing Mean Reciprocal Rank (https://en.wikipedia.org/wiki/Mean_reciprocal_rank).<br>_@param relevantRatingThreshold the rating value that a document needs to be regarded as "relevant". Defaults to 1._@param k the search window size all request use.;public MeanReciprocalRank(int relevantRatingThreshold, int k) {_        if (relevantRatingThreshold < 0) {_            throw new IllegalArgumentException("Relevant rating threshold for precision must be positive integer.")__        }_        if (k <= 0) {_            throw new IllegalArgumentException("Window size k must be positive.")__        }_        this.k = k__        this.relevantRatingThreshhold = relevantRatingThreshold__    };metric,implementing,mean,reciprocal,rank,https,en,wikipedia,org,wiki,br,param,relevant,rating,threshold,the,rating,value,that,a,document,needs,to,be,regarded,as,relevant,defaults,to,1,param,k,the,search,window,size,all,request,use;public,mean,reciprocal,rank,int,relevant,rating,threshold,int,k,if,relevant,rating,threshold,0,throw,new,illegal,argument,exception,relevant,rating,threshold,for,precision,must,be,positive,integer,if,k,0,throw,new,illegal,argument,exception,window,size,k,must,be,positive,this,k,k,this,relevant,rating,threshhold,relevant,rating,threshold
MeanReciprocalRank -> public MeanReciprocalRank(int relevantRatingThreshold, int k);1532434432;Metric implementing Mean Reciprocal Rank (https://en.wikipedia.org/wiki/Mean_reciprocal_rank).<br>_@param relevantRatingThreshold the rating value that a document needs to be regarded as "relevant". Defaults to 1._@param k the search window size all request use.;public MeanReciprocalRank(int relevantRatingThreshold, int k) {_        if (relevantRatingThreshold < 0) {_            throw new IllegalArgumentException("Relevant rating threshold for precision must be positive integer.")__        }_        if (k <= 0) {_            throw new IllegalArgumentException("Window size k must be positive.")__        }_        this.k = k__        this.relevantRatingThreshhold = relevantRatingThreshold__    };metric,implementing,mean,reciprocal,rank,https,en,wikipedia,org,wiki,br,param,relevant,rating,threshold,the,rating,value,that,a,document,needs,to,be,regarded,as,relevant,defaults,to,1,param,k,the,search,window,size,all,request,use;public,mean,reciprocal,rank,int,relevant,rating,threshold,int,k,if,relevant,rating,threshold,0,throw,new,illegal,argument,exception,relevant,rating,threshold,for,precision,must,be,positive,integer,if,k,0,throw,new,illegal,argument,exception,window,size,k,must,be,positive,this,k,k,this,relevant,rating,threshhold,relevant,rating,threshold
MeanReciprocalRank -> public MeanReciprocalRank(int relevantRatingThreshold, int k);1538509426;Metric implementing Mean Reciprocal Rank (https://en.wikipedia.org/wiki/Mean_reciprocal_rank).<br>_@param relevantRatingThreshold the rating value that a document needs to be regarded as "relevant". Defaults to 1._@param k the search window size all request use.;public MeanReciprocalRank(int relevantRatingThreshold, int k) {_        if (relevantRatingThreshold < 0) {_            throw new IllegalArgumentException("Relevant rating threshold for precision must be positive integer.")__        }_        if (k <= 0) {_            throw new IllegalArgumentException("Window size k must be positive.")__        }_        this.k = k__        this.relevantRatingThreshhold = relevantRatingThreshold__    };metric,implementing,mean,reciprocal,rank,https,en,wikipedia,org,wiki,br,param,relevant,rating,threshold,the,rating,value,that,a,document,needs,to,be,regarded,as,relevant,defaults,to,1,param,k,the,search,window,size,all,request,use;public,mean,reciprocal,rank,int,relevant,rating,threshold,int,k,if,relevant,rating,threshold,0,throw,new,illegal,argument,exception,relevant,rating,threshold,for,precision,must,be,positive,integer,if,k,0,throw,new,illegal,argument,exception,window,size,k,must,be,positive,this,k,k,this,relevant,rating,threshhold,relevant,rating,threshold
MeanReciprocalRank -> @Override     public EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs);1532434432;Compute ReciprocalRank based on provided relevant document IDs.;@Override_    public EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs) {_        List<RatedSearchHit> ratedHits = joinHitsWithRatings(hits, ratedDocs)__        int firstRelevant = -1__        int rank = 1__        for (RatedSearchHit hit : ratedHits) {_            Optional<Integer> rating = hit.getRating()__            if (rating.isPresent()) {_                if (rating.get() >= this.relevantRatingThreshhold) {_                    firstRelevant = rank__                    break__                }_            }_            rank++__        }__        double reciprocalRank = (firstRelevant == -1) ? 0 : 1.0d / firstRelevant__        EvalQueryQuality evalQueryQuality = new EvalQueryQuality(taskId, reciprocalRank)__        evalQueryQuality.setMetricDetails(new Detail(firstRelevant))__        evalQueryQuality.addHitsAndRatings(ratedHits)__        return evalQueryQuality__    };compute,reciprocal,rank,based,on,provided,relevant,document,ids;override,public,eval,query,quality,evaluate,string,task,id,search,hit,hits,list,rated,document,rated,docs,list,rated,search,hit,rated,hits,join,hits,with,ratings,hits,rated,docs,int,first,relevant,1,int,rank,1,for,rated,search,hit,hit,rated,hits,optional,integer,rating,hit,get,rating,if,rating,is,present,if,rating,get,this,relevant,rating,threshhold,first,relevant,rank,break,rank,double,reciprocal,rank,first,relevant,1,0,1,0d,first,relevant,eval,query,quality,eval,query,quality,new,eval,query,quality,task,id,reciprocal,rank,eval,query,quality,set,metric,details,new,detail,first,relevant,eval,query,quality,add,hits,and,ratings,rated,hits,return,eval,query,quality
MeanReciprocalRank -> @Override     public EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs);1538509426;Compute ReciprocalRank based on provided relevant document IDs.;@Override_    public EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs) {_        List<RatedSearchHit> ratedHits = joinHitsWithRatings(hits, ratedDocs)__        int firstRelevant = -1__        int rank = 1__        for (RatedSearchHit hit : ratedHits) {_            OptionalInt rating = hit.getRating()__            if (rating.isPresent()) {_                if (rating.getAsInt() >= this.relevantRatingThreshhold) {_                    firstRelevant = rank__                    break__                }_            }_            rank++__        }__        double reciprocalRank = (firstRelevant == -1) ? 0 : 1.0d / firstRelevant__        EvalQueryQuality evalQueryQuality = new EvalQueryQuality(taskId, reciprocalRank)__        evalQueryQuality.setMetricDetails(new Detail(firstRelevant))__        evalQueryQuality.addHitsAndRatings(ratedHits)__        return evalQueryQuality__    };compute,reciprocal,rank,based,on,provided,relevant,document,ids;override,public,eval,query,quality,evaluate,string,task,id,search,hit,hits,list,rated,document,rated,docs,list,rated,search,hit,rated,hits,join,hits,with,ratings,hits,rated,docs,int,first,relevant,1,int,rank,1,for,rated,search,hit,hit,rated,hits,optional,int,rating,hit,get,rating,if,rating,is,present,if,rating,get,as,int,this,relevant,rating,threshhold,first,relevant,rank,break,rank,double,reciprocal,rank,first,relevant,1,0,1,0d,first,relevant,eval,query,quality,eval,query,quality,new,eval,query,quality,task,id,reciprocal,rank,eval,query,quality,set,metric,details,new,detail,first,relevant,eval,query,quality,add,hits,and,ratings,rated,hits,return,eval,query,quality
