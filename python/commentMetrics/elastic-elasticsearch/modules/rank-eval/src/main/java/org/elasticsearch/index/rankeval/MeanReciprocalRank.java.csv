commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(this.relevantRatingThreshhold).     out.writeVInt(this.k). }
false;;0;3;;int getK() {     return this.k. }
false;public;0;4;;@Override public OptionalInt forcedSearchSize() {     return OptionalInt.of(k). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
true;public;0;3;/**  * Return the rating threshold above which ratings are considered to be "relevant".  */ ;/**  * Return the rating threshold above which ratings are considered to be "relevant".  */ public int getRelevantRatingThreshold() {     return relevantRatingThreshhold. }
true;public;3;22;/**  * Compute ReciprocalRank based on provided relevant document IDs.  */ ;/**  * Compute ReciprocalRank based on provided relevant document IDs.  */ @Override public EvalQueryQuality evaluate(String taskId, SearchHit[] hits, List<RatedDocument> ratedDocs) {     List<RatedSearchHit> ratedHits = joinHitsWithRatings(hits, ratedDocs).     int firstRelevant = -1.     int rank = 1.     for (RatedSearchHit hit : ratedHits) {         OptionalInt rating = hit.getRating().         if (rating.isPresent()) {             if (rating.getAsInt() >= this.relevantRatingThreshhold) {                 firstRelevant = rank.                 break.             }         }         rank++.     }     double reciprocalRank = (firstRelevant == -1) ? 0 : 1.0d / firstRelevant.     EvalQueryQuality evalQueryQuality = new EvalQueryQuality(taskId, reciprocalRank).     evalQueryQuality.setMetricDetails(new Detail(firstRelevant)).     evalQueryQuality.addHitsAndRatings(ratedHits).     return evalQueryQuality. }
false;public,static;1;3;;public static MeanReciprocalRank fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(NAME).     builder.field(RELEVANT_RATING_FIELD.getPreferredName(), this.relevantRatingThreshhold).     builder.field(K_FIELD.getPreferredName(), this.k).     builder.endObject().     builder.endObject().     return builder. }
false;public,final;1;12;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     MeanReciprocalRank other = (MeanReciprocalRank) obj.     return Objects.equals(relevantRatingThreshhold, other.relevantRatingThreshhold) && Objects.equals(k, other.k). }
false;public,final;0;4;;@Override public final int hashCode() {     return Objects.hash(relevantRatingThreshhold, k). }
false;public;0;5;;@Override public String getMetricName() {     return NAME. }
false;public;2;5;;@Override public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException {     return builder.field(FIRST_RELEVANT_RANK_FIELD.getPreferredName(), firstRelevantRank). }
false;public,static;1;3;;public static Detail fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(firstRelevantRank). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
true;public;0;3;/**  * the ranking of the first relevant document, or -1 if no relevant document was  * found  */ ;/**  * the ranking of the first relevant document, or -1 if no relevant document was  * found  */ public int getFirstRelevantRank() {     return firstRelevantRank. }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     MeanReciprocalRank.Detail other = (MeanReciprocalRank.Detail) obj.     return Objects.equals(firstRelevantRank, other.firstRelevantRank). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(firstRelevantRank). }
