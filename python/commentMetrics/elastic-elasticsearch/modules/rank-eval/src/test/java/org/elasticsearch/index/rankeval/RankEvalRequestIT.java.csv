# id;timestamp;commentText;codeText;commentWords;codeWords
RankEvalRequestIT -> public void testPrecisionAtRequest();1524684173;Test cases retrieves all six documents indexed above. The first part checks the Prec@10 calculation where_all unlabeled docs are treated as "unrelevant". We average Prec@ metric across two search use cases, the_first one that labels 4 out of the 6 documents as relevant, the second one with only one relevant document.;public void testPrecisionAtRequest() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), testQuery)__        amsterdamRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))___        specifications.add(amsterdamRequest)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("1"),_                testQuery)__        berlinRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))__        specifications.add(berlinRequest)___        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(),_                RankEvalAction.INSTANCE, new RankEvalRequest())__        builder.setRankEvalSpec(task)___        String indexToUse = randomBoolean() ? TEST_INDEX : INDEX_ALIAS__        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request().indices(indexToUse))_                .actionGet()__        _        _        double expectedPrecision = (1.0 / 6.0 + 4.0 / 6.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__        Set<Entry<String, EvalQueryQuality>> entrySet = response.getPartialResults().entrySet()__        assertEquals(2, entrySet.size())__        for (Entry<String, EvalQueryQuality> entry : entrySet) {_            EvalQueryQuality quality = entry.getValue()__            if (entry.getKey() == "amsterdam_query") {_                assertEquals(2, filterUnknownDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1") || id.equals("6")) {_                        assertFalse(hit.getRating().isPresent())__                    } else {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().get().intValue())__                    }_                }_            }_            if (entry.getKey() == "berlin_query") {_                assertEquals(5, filterUnknownDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1")) {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().get().intValue())__                    } else {_                        assertFalse(hit.getRating().isPresent())__                    }_                }_            }_        }__        _        metric = new PrecisionAtK(1, false, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        _        _        expectedPrecision = (1.0 / 3.0 + 2.0 / 3.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__    };test,cases,retrieves,all,six,documents,indexed,above,the,first,part,checks,the,prec,10,calculation,where,all,unlabeled,docs,are,treated,as,unrelevant,we,average,prec,metric,across,two,search,use,cases,the,first,one,that,labels,4,out,of,the,6,documents,as,relevant,the,second,one,with,only,one,relevant,document;public,void,test,precision,at,request,list,rated,request,specifications,new,array,list,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,test,query,amsterdam,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,amsterdam,request,rated,request,berlin,request,new,rated,request,create,relevant,1,test,query,berlin,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,builder,set,rank,eval,spec,task,string,index,to,use,random,boolean,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,indices,index,to,use,action,get,double,expected,precision,1,0,6,0,4,0,6,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double,set,entry,string,eval,query,quality,entry,set,response,get,partial,results,entry,set,assert,equals,2,entry,set,size,for,entry,string,eval,query,quality,entry,entry,set,eval,query,quality,quality,entry,get,value,if,entry,get,key,assert,equals,2,filter,unknown,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,hit,get,rating,get,int,value,if,entry,get,key,assert,equals,5,filter,unknown,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,metric,new,precision,at,k,1,false,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,expected,precision,1,0,3,0,2,0,3,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double
RankEvalRequestIT -> public void testPrecisionAtRequest();1532353780;Test cases retrieves all six documents indexed above. The first part checks the Prec@10 calculation where_all unlabeled docs are treated as "unrelevant". We average Prec@ metric across two search use cases, the_first one that labels 4 out of the 6 documents as relevant, the second one with only one relevant document.;public void testPrecisionAtRequest() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), testQuery)__        amsterdamRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))___        specifications.add(amsterdamRequest)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("1"),_                testQuery)__        berlinRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))__        specifications.add(berlinRequest)___        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(),_                RankEvalAction.INSTANCE, new RankEvalRequest())__        builder.setRankEvalSpec(task)___        String indexToUse = randomBoolean() ? TEST_INDEX : INDEX_ALIAS__        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request().indices(indexToUse))_                .actionGet()__        _        _        double expectedPrecision = (1.0 / 6.0 + 4.0 / 6.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__        Set<Entry<String, EvalQueryQuality>> entrySet = response.getPartialResults().entrySet()__        assertEquals(2, entrySet.size())__        for (Entry<String, EvalQueryQuality> entry : entrySet) {_            EvalQueryQuality quality = entry.getValue()__            if (entry.getKey() == "amsterdam_query") {_                assertEquals(2, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1") || id.equals("6")) {_                        assertFalse(hit.getRating().isPresent())__                    } else {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().get().intValue())__                    }_                }_            }_            if (entry.getKey() == "berlin_query") {_                assertEquals(5, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1")) {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().get().intValue())__                    } else {_                        assertFalse(hit.getRating().isPresent())__                    }_                }_            }_        }__        _        metric = new PrecisionAtK(1, false, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        _        _        expectedPrecision = (1.0 / 3.0 + 2.0 / 3.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__    };test,cases,retrieves,all,six,documents,indexed,above,the,first,part,checks,the,prec,10,calculation,where,all,unlabeled,docs,are,treated,as,unrelevant,we,average,prec,metric,across,two,search,use,cases,the,first,one,that,labels,4,out,of,the,6,documents,as,relevant,the,second,one,with,only,one,relevant,document;public,void,test,precision,at,request,list,rated,request,specifications,new,array,list,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,test,query,amsterdam,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,amsterdam,request,rated,request,berlin,request,new,rated,request,create,relevant,1,test,query,berlin,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,builder,set,rank,eval,spec,task,string,index,to,use,random,boolean,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,indices,index,to,use,action,get,double,expected,precision,1,0,6,0,4,0,6,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double,set,entry,string,eval,query,quality,entry,set,response,get,partial,results,entry,set,assert,equals,2,entry,set,size,for,entry,string,eval,query,quality,entry,entry,set,eval,query,quality,quality,entry,get,value,if,entry,get,key,assert,equals,2,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,hit,get,rating,get,int,value,if,entry,get,key,assert,equals,5,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,metric,new,precision,at,k,1,false,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,expected,precision,1,0,3,0,2,0,3,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double
RankEvalRequestIT -> public void testPrecisionAtRequest();1532434432;Test cases retrieves all six documents indexed above. The first part checks the Prec@10 calculation where_all unlabeled docs are treated as "unrelevant". We average Prec@ metric across two search use cases, the_first one that labels 4 out of the 6 documents as relevant, the second one with only one relevant document.;public void testPrecisionAtRequest() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), testQuery)__        amsterdamRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))___        specifications.add(amsterdamRequest)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("1"),_                testQuery)__        berlinRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))__        specifications.add(berlinRequest)___        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(),_                RankEvalAction.INSTANCE, new RankEvalRequest())__        builder.setRankEvalSpec(task)___        String indexToUse = randomBoolean() ? TEST_INDEX : INDEX_ALIAS__        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request().indices(indexToUse))_                .actionGet()__        _        _        double expectedPrecision = (1.0 / 6.0 + 4.0 / 6.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Set<Entry<String, EvalQueryQuality>> entrySet = response.getPartialResults().entrySet()__        assertEquals(2, entrySet.size())__        for (Entry<String, EvalQueryQuality> entry : entrySet) {_            EvalQueryQuality quality = entry.getValue()__            if (entry.getKey() == "amsterdam_query") {_                assertEquals(2, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1") || id.equals("6")) {_                        assertFalse(hit.getRating().isPresent())__                    } else {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().get().intValue())__                    }_                }_            }_            if (entry.getKey() == "berlin_query") {_                assertEquals(5, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1")) {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().get().intValue())__                    } else {_                        assertFalse(hit.getRating().isPresent())__                    }_                }_            }_        }__        _        metric = new PrecisionAtK(1, false, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        _        _        expectedPrecision = (1.0 / 3.0 + 2.0 / 3.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__    };test,cases,retrieves,all,six,documents,indexed,above,the,first,part,checks,the,prec,10,calculation,where,all,unlabeled,docs,are,treated,as,unrelevant,we,average,prec,metric,across,two,search,use,cases,the,first,one,that,labels,4,out,of,the,6,documents,as,relevant,the,second,one,with,only,one,relevant,document;public,void,test,precision,at,request,list,rated,request,specifications,new,array,list,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,test,query,amsterdam,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,amsterdam,request,rated,request,berlin,request,new,rated,request,create,relevant,1,test,query,berlin,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,builder,set,rank,eval,spec,task,string,index,to,use,random,boolean,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,indices,index,to,use,action,get,double,expected,precision,1,0,6,0,4,0,6,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,set,entry,string,eval,query,quality,entry,set,response,get,partial,results,entry,set,assert,equals,2,entry,set,size,for,entry,string,eval,query,quality,entry,entry,set,eval,query,quality,quality,entry,get,value,if,entry,get,key,assert,equals,2,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,hit,get,rating,get,int,value,if,entry,get,key,assert,equals,5,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,metric,new,precision,at,k,1,false,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,expected,precision,1,0,3,0,2,0,3,0,2,0,assert,equals,expected,precision,response,get,metric,score,double
RankEvalRequestIT -> public void testPrecisionAtRequest();1538509426;Test cases retrieves all six documents indexed above. The first part checks the Prec@10 calculation where_all unlabeled docs are treated as "unrelevant". We average Prec@ metric across two search use cases, the_first one that labels 4 out of the 6 documents as relevant, the second one with only one relevant document.;public void testPrecisionAtRequest() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), testQuery)__        amsterdamRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))___        specifications.add(amsterdamRequest)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("1"),_                testQuery)__        berlinRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))__        specifications.add(berlinRequest)___        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(),_                RankEvalAction.INSTANCE, new RankEvalRequest())__        builder.setRankEvalSpec(task)___        String indexToUse = randomBoolean() ? TEST_INDEX : INDEX_ALIAS__        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request().indices(indexToUse))_                .actionGet()__        _        _        double expectedPrecision = (1.0 / 6.0 + 4.0 / 6.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Set<Entry<String, EvalQueryQuality>> entrySet = response.getPartialResults().entrySet()__        assertEquals(2, entrySet.size())__        for (Entry<String, EvalQueryQuality> entry : entrySet) {_            EvalQueryQuality quality = entry.getValue()__            if (entry.getKey() == "amsterdam_query") {_                assertEquals(2, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1") || id.equals("6")) {_                        assertFalse(hit.getRating().isPresent())__                    } else {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().getAsInt())__                    }_                }_            }_            if (entry.getKey() == "berlin_query") {_                assertEquals(5, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1")) {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().getAsInt())__                    } else {_                        assertFalse(hit.getRating().isPresent())__                    }_                }_            }_        }__        _        metric = new PrecisionAtK(1, false, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        _        _        expectedPrecision = (1.0 / 3.0 + 2.0 / 3.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__    };test,cases,retrieves,all,six,documents,indexed,above,the,first,part,checks,the,prec,10,calculation,where,all,unlabeled,docs,are,treated,as,unrelevant,we,average,prec,metric,across,two,search,use,cases,the,first,one,that,labels,4,out,of,the,6,documents,as,relevant,the,second,one,with,only,one,relevant,document;public,void,test,precision,at,request,list,rated,request,specifications,new,array,list,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,test,query,amsterdam,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,amsterdam,request,rated,request,berlin,request,new,rated,request,create,relevant,1,test,query,berlin,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,builder,set,rank,eval,spec,task,string,index,to,use,random,boolean,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,indices,index,to,use,action,get,double,expected,precision,1,0,6,0,4,0,6,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,set,entry,string,eval,query,quality,entry,set,response,get,partial,results,entry,set,assert,equals,2,entry,set,size,for,entry,string,eval,query,quality,entry,entry,set,eval,query,quality,quality,entry,get,value,if,entry,get,key,assert,equals,2,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,hit,get,rating,get,as,int,if,entry,get,key,assert,equals,5,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,hit,get,rating,get,as,int,else,assert,false,hit,get,rating,is,present,metric,new,precision,at,k,1,false,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,expected,precision,1,0,3,0,2,0,3,0,2,0,assert,equals,expected,precision,response,get,metric,score,double
RankEvalRequestIT -> public void testPrecisionAtRequest();1541493930;Test cases retrieves all six documents indexed above. The first part checks the Prec@10 calculation where_all unlabeled docs are treated as "unrelevant". We average Prec@ metric across two search use cases, the_first one that labels 4 out of the 6 documents as relevant, the second one with only one relevant document.;public void testPrecisionAtRequest() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), testQuery)__        amsterdamRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))___        specifications.add(amsterdamRequest)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("1"),_                testQuery)__        berlinRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))__        specifications.add(berlinRequest)___        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(),_                RankEvalAction.INSTANCE, new RankEvalRequest())__        builder.setRankEvalSpec(task)___        String indexToUse = randomBoolean() ? TEST_INDEX : INDEX_ALIAS__        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request().indices(indexToUse))_                .actionGet()__        _        _        double expectedPrecision = (1.0 / 6.0 + 4.0 / 6.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Set<Entry<String, EvalQueryQuality>> entrySet = response.getPartialResults().entrySet()__        assertEquals(2, entrySet.size())__        for (Entry<String, EvalQueryQuality> entry : entrySet) {_            EvalQueryQuality quality = entry.getValue()__            if (entry.getKey() == "amsterdam_query") {_                assertEquals(2, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1") || id.equals("6")) {_                        assertFalse(hit.getRating().isPresent())__                    } else {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().getAsInt())__                    }_                }_            }_            if (entry.getKey() == "berlin_query") {_                assertEquals(5, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1")) {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().getAsInt())__                    } else {_                        assertFalse(hit.getRating().isPresent())__                    }_                }_            }_        }__        _        metric = new PrecisionAtK(1, false, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        _        _        expectedPrecision = (1.0 / 3.0 + 2.0 / 3.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__    };test,cases,retrieves,all,six,documents,indexed,above,the,first,part,checks,the,prec,10,calculation,where,all,unlabeled,docs,are,treated,as,unrelevant,we,average,prec,metric,across,two,search,use,cases,the,first,one,that,labels,4,out,of,the,6,documents,as,relevant,the,second,one,with,only,one,relevant,document;public,void,test,precision,at,request,list,rated,request,specifications,new,array,list,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,test,query,amsterdam,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,amsterdam,request,rated,request,berlin,request,new,rated,request,create,relevant,1,test,query,berlin,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,builder,set,rank,eval,spec,task,string,index,to,use,random,boolean,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,indices,index,to,use,action,get,double,expected,precision,1,0,6,0,4,0,6,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,set,entry,string,eval,query,quality,entry,set,response,get,partial,results,entry,set,assert,equals,2,entry,set,size,for,entry,string,eval,query,quality,entry,entry,set,eval,query,quality,quality,entry,get,value,if,entry,get,key,assert,equals,2,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,hit,get,rating,get,as,int,if,entry,get,key,assert,equals,5,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,hit,get,rating,get,as,int,else,assert,false,hit,get,rating,is,present,metric,new,precision,at,k,1,false,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,expected,precision,1,0,3,0,2,0,3,0,2,0,assert,equals,expected,precision,response,get,metric,score,double
RankEvalRequestIT -> public void testPrecisionAtRequest();1549860314;Test cases retrieves all six documents indexed above. The first part checks the Prec@10 calculation where_all unlabeled docs are treated as "unrelevant". We average Prec@ metric across two search use cases, the_first one that labels 4 out of the 6 documents as relevant, the second one with only one relevant document.;public void testPrecisionAtRequest() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), testQuery)__        amsterdamRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))___        specifications.add(amsterdamRequest)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("1"),_                testQuery)__        berlinRequest.addSummaryFields(Arrays.asList(new String[] { "text", "title" }))__        specifications.add(berlinRequest)___        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(),_                RankEvalAction.INSTANCE, new RankEvalRequest())__        builder.setRankEvalSpec(task)___        String indexToUse = randomBoolean() ? TEST_INDEX : INDEX_ALIAS__        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request().indices(indexToUse))_                .actionGet()__        _        _        double expectedPrecision = (1.0 / 6.0 + 4.0 / 6.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Set<Entry<String, EvalQueryQuality>> entrySet = response.getPartialResults().entrySet()__        assertEquals(2, entrySet.size())__        for (Entry<String, EvalQueryQuality> entry : entrySet) {_            EvalQueryQuality quality = entry.getValue()__            if (entry.getKey() == "amsterdam_query") {_                assertEquals(2, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1") || id.equals("6")) {_                        assertFalse(hit.getRating().isPresent())__                    } else {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().getAsInt())__                    }_                }_            }_            if (entry.getKey() == "berlin_query") {_                assertEquals(5, filterUnratedDocuments(quality.getHitsAndRatings()).size())__                List<RatedSearchHit> hitsAndRatings = quality.getHitsAndRatings()__                assertEquals(6, hitsAndRatings.size())__                for (RatedSearchHit hit : hitsAndRatings) {_                    String id = hit.getSearchHit().getId()__                    if (id.equals("1")) {_                        assertEquals(RELEVANT_RATING_1, hit.getRating().getAsInt())__                    } else {_                        assertFalse(hit.getRating().isPresent())__                    }_                }_            }_        }__        _        metric = new PrecisionAtK(1, false, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        _        _        expectedPrecision = (1.0 / 3.0 + 2.0 / 3.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__    };test,cases,retrieves,all,six,documents,indexed,above,the,first,part,checks,the,prec,10,calculation,where,all,unlabeled,docs,are,treated,as,unrelevant,we,average,prec,metric,across,two,search,use,cases,the,first,one,that,labels,4,out,of,the,6,documents,as,relevant,the,second,one,with,only,one,relevant,document;public,void,test,precision,at,request,list,rated,request,specifications,new,array,list,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,test,query,amsterdam,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,amsterdam,request,rated,request,berlin,request,new,rated,request,create,relevant,1,test,query,berlin,request,add,summary,fields,arrays,as,list,new,string,text,title,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,builder,set,rank,eval,spec,task,string,index,to,use,random,boolean,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,indices,index,to,use,action,get,double,expected,precision,1,0,6,0,4,0,6,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,set,entry,string,eval,query,quality,entry,set,response,get,partial,results,entry,set,assert,equals,2,entry,set,size,for,entry,string,eval,query,quality,entry,entry,set,eval,query,quality,quality,entry,get,value,if,entry,get,key,assert,equals,2,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,hit,get,rating,get,as,int,if,entry,get,key,assert,equals,5,filter,unrated,documents,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,quality,get,hits,and,ratings,assert,equals,6,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,hit,get,rating,get,as,int,else,assert,false,hit,get,rating,is,present,metric,new,precision,at,k,1,false,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,expected,precision,1,0,3,0,2,0,3,0,2,0,assert,equals,expected,precision,response,get,metric,score,double
RankEvalRequestIT -> public void testBadQuery();1524684173;test that running a bad query (e.g. one that will target a non existing_field) will produce an error in the response;public void testBadQuery() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder()__        amsterdamQuery.query(new MatchAllQueryBuilder())__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), amsterdamQuery)__        specifications.add(amsterdamRequest)___        SearchSourceBuilder brokenQuery = new SearchSourceBuilder()__        brokenQuery.query(QueryBuilders.termQuery("population", "noStringOnNumericFields"))__        RatedRequest brokenRequest = new RatedRequest("broken_query", createRelevant("1"),_                brokenQuery)__        specifications.add(brokenRequest)___        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))__        builder.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(1, response.getFailures().size())__        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(response.getFailures().get("broken_query"))__        assertEquals("java.lang.NumberFormatException: For input string: \"noStringOnNumericFields\"", rootCauses[0].getCause().toString())__    };test,that,running,a,bad,query,e,g,one,that,will,target,a,non,existing,field,will,produce,an,error,in,the,response;public,void,test,bad,query,list,rated,request,specifications,new,array,list,search,source,builder,amsterdam,query,new,search,source,builder,amsterdam,query,query,new,match,all,query,builder,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,amsterdam,query,specifications,add,amsterdam,request,search,source,builder,broken,query,new,search,source,builder,broken,query,query,query,builders,term,query,population,no,string,on,numeric,fields,rated,request,broken,request,new,rated,request,create,relevant,1,broken,query,specifications,add,broken,request,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,builder,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,1,response,get,failures,size,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,response,get,failures,get,assert,equals,java,lang,number,format,exception,for,input,string,no,string,on,numeric,fields,root,causes,0,get,cause,to,string
RankEvalRequestIT -> public void testBadQuery();1532353780;test that running a bad query (e.g. one that will target a non existing_field) will produce an error in the response;public void testBadQuery() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder()__        amsterdamQuery.query(new MatchAllQueryBuilder())__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), amsterdamQuery)__        specifications.add(amsterdamRequest)___        SearchSourceBuilder brokenQuery = new SearchSourceBuilder()__        brokenQuery.query(QueryBuilders.termQuery("population", "noStringOnNumericFields"))__        RatedRequest brokenRequest = new RatedRequest("broken_query", createRelevant("1"),_                brokenQuery)__        specifications.add(brokenRequest)___        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))__        builder.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(1, response.getFailures().size())__        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(response.getFailures().get("broken_query"))__        assertEquals("java.lang.NumberFormatException: For input string: \"noStringOnNumericFields\"", rootCauses[0].getCause().toString())__    };test,that,running,a,bad,query,e,g,one,that,will,target,a,non,existing,field,will,produce,an,error,in,the,response;public,void,test,bad,query,list,rated,request,specifications,new,array,list,search,source,builder,amsterdam,query,new,search,source,builder,amsterdam,query,query,new,match,all,query,builder,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,amsterdam,query,specifications,add,amsterdam,request,search,source,builder,broken,query,new,search,source,builder,broken,query,query,query,builders,term,query,population,no,string,on,numeric,fields,rated,request,broken,request,new,rated,request,create,relevant,1,broken,query,specifications,add,broken,request,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,builder,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,1,response,get,failures,size,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,response,get,failures,get,assert,equals,java,lang,number,format,exception,for,input,string,no,string,on,numeric,fields,root,causes,0,get,cause,to,string
RankEvalRequestIT -> public void testBadQuery();1532434432;test that running a bad query (e.g. one that will target a non existing_field) will produce an error in the response;public void testBadQuery() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder()__        amsterdamQuery.query(new MatchAllQueryBuilder())__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), amsterdamQuery)__        specifications.add(amsterdamRequest)___        SearchSourceBuilder brokenQuery = new SearchSourceBuilder()__        brokenQuery.query(QueryBuilders.termQuery("population", "noStringOnNumericFields"))__        RatedRequest brokenRequest = new RatedRequest("broken_query", createRelevant("1"),_                brokenQuery)__        specifications.add(brokenRequest)___        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))__        builder.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(1, response.getFailures().size())__        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(response.getFailures().get("broken_query"))__        assertEquals("java.lang.NumberFormatException: For input string: \"noStringOnNumericFields\"", rootCauses[0].getCause().toString())__    };test,that,running,a,bad,query,e,g,one,that,will,target,a,non,existing,field,will,produce,an,error,in,the,response;public,void,test,bad,query,list,rated,request,specifications,new,array,list,search,source,builder,amsterdam,query,new,search,source,builder,amsterdam,query,query,new,match,all,query,builder,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,amsterdam,query,specifications,add,amsterdam,request,search,source,builder,broken,query,new,search,source,builder,broken,query,query,query,builders,term,query,population,no,string,on,numeric,fields,rated,request,broken,request,new,rated,request,create,relevant,1,broken,query,specifications,add,broken,request,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,builder,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,1,response,get,failures,size,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,response,get,failures,get,assert,equals,java,lang,number,format,exception,for,input,string,no,string,on,numeric,fields,root,causes,0,get,cause,to,string
RankEvalRequestIT -> public void testBadQuery();1538509426;test that running a bad query (e.g. one that will target a non existing_field) will produce an error in the response;public void testBadQuery() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder()__        amsterdamQuery.query(new MatchAllQueryBuilder())__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), amsterdamQuery)__        specifications.add(amsterdamRequest)___        SearchSourceBuilder brokenQuery = new SearchSourceBuilder()__        brokenQuery.query(QueryBuilders.termQuery("population", "noStringOnNumericFields"))__        RatedRequest brokenRequest = new RatedRequest("broken_query", createRelevant("1"),_                brokenQuery)__        specifications.add(brokenRequest)___        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))__        builder.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(1, response.getFailures().size())__        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(response.getFailures().get("broken_query"))__        assertEquals("java.lang.NumberFormatException: For input string: \"noStringOnNumericFields\"", rootCauses[0].getCause().toString())__    };test,that,running,a,bad,query,e,g,one,that,will,target,a,non,existing,field,will,produce,an,error,in,the,response;public,void,test,bad,query,list,rated,request,specifications,new,array,list,search,source,builder,amsterdam,query,new,search,source,builder,amsterdam,query,query,new,match,all,query,builder,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,amsterdam,query,specifications,add,amsterdam,request,search,source,builder,broken,query,new,search,source,builder,broken,query,query,query,builders,term,query,population,no,string,on,numeric,fields,rated,request,broken,request,new,rated,request,create,relevant,1,broken,query,specifications,add,broken,request,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,builder,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,1,response,get,failures,size,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,response,get,failures,get,assert,equals,java,lang,number,format,exception,for,input,string,no,string,on,numeric,fields,root,causes,0,get,cause,to,string
RankEvalRequestIT -> public void testBadQuery();1541493930;test that running a bad query (e.g. one that will target a non existing_field) will produce an error in the response;public void testBadQuery() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder()__        amsterdamQuery.query(new MatchAllQueryBuilder())__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), amsterdamQuery)__        specifications.add(amsterdamRequest)___        SearchSourceBuilder brokenQuery = new SearchSourceBuilder()__        brokenQuery.query(QueryBuilders.termQuery("population", "noStringOnNumericFields"))__        RatedRequest brokenRequest = new RatedRequest("broken_query", createRelevant("1"),_                brokenQuery)__        specifications.add(brokenRequest)___        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))__        builder.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(1, response.getFailures().size())__        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(response.getFailures().get("broken_query"))__        assertEquals("java.lang.NumberFormatException: For input string: \"noStringOnNumericFields\"", rootCauses[0].getCause().toString())__    };test,that,running,a,bad,query,e,g,one,that,will,target,a,non,existing,field,will,produce,an,error,in,the,response;public,void,test,bad,query,list,rated,request,specifications,new,array,list,search,source,builder,amsterdam,query,new,search,source,builder,amsterdam,query,query,new,match,all,query,builder,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,amsterdam,query,specifications,add,amsterdam,request,search,source,builder,broken,query,new,search,source,builder,broken,query,query,query,builders,term,query,population,no,string,on,numeric,fields,rated,request,broken,request,new,rated,request,create,relevant,1,broken,query,specifications,add,broken,request,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,builder,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,1,response,get,failures,size,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,response,get,failures,get,assert,equals,java,lang,number,format,exception,for,input,string,no,string,on,numeric,fields,root,causes,0,get,cause,to,string
RankEvalRequestIT -> public void testBadQuery();1549860314;test that running a bad query (e.g. one that will target a non existing_field) will produce an error in the response;public void testBadQuery() {_        List<RatedRequest> specifications = new ArrayList<>()__        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder()__        amsterdamQuery.query(new MatchAllQueryBuilder())__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query",_                createRelevant("2", "3", "4", "5"), amsterdamQuery)__        specifications.add(amsterdamRequest)___        SearchSourceBuilder brokenQuery = new SearchSourceBuilder()__        brokenQuery.query(QueryBuilders.termQuery("population", "noStringOnNumericFields"))__        RatedRequest brokenRequest = new RatedRequest("broken_query", createRelevant("1"),_                brokenQuery)__        specifications.add(brokenRequest)___        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))__        builder.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(1, response.getFailures().size())__        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(response.getFailures().get("broken_query"))__        assertEquals("java.lang.NumberFormatException: For input string: \"noStringOnNumericFields\"", rootCauses[0].getCause().toString())__    };test,that,running,a,bad,query,e,g,one,that,will,target,a,non,existing,field,will,produce,an,error,in,the,response;public,void,test,bad,query,list,rated,request,specifications,new,array,list,search,source,builder,amsterdam,query,new,search,source,builder,amsterdam,query,query,new,match,all,query,builder,rated,request,amsterdam,request,new,rated,request,create,relevant,2,3,4,5,amsterdam,query,specifications,add,amsterdam,request,search,source,builder,broken,query,new,search,source,builder,broken,query,query,query,builders,term,query,population,no,string,on,numeric,fields,rated,request,broken,request,new,rated,request,create,relevant,1,broken,query,specifications,add,broken,request,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,builder,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,1,response,get,failures,size,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,response,get,failures,get,assert,equals,java,lang,number,format,exception,for,input,string,no,string,on,numeric,fields,root,causes,0,get,cause,to,string
RankEvalRequestIT -> public void testIndicesOptions();1524684173;test that multiple indices work, setting indices Options is possible and works as expected;public void testIndicesOptions() {_        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder().query(new MatchAllQueryBuilder())__        List<RatedDocument> relevantDocs = createRelevant("2", "3", "4", "5", "6")__        relevantDocs.add(new RatedDocument("test2", "7", RELEVANT_RATING_1))__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(new RatedRequest("amsterdam_query", relevantDocs, amsterdamQuery))__        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequest request = new RankEvalRequest(task, new String[] { TEST_INDEX, "test2" })__        request.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        Detail details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(7, details.getRetrieved())__        assertEquals(6, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())___        request.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())__        request.indicesOptions(IndicesOptions.fromParameters(null, "false", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "tes*" })__        request.indicesOptions(IndicesOptions.fromParameters("none", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("open", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("closed", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "bad*" })__        request.indicesOptions(IndicesOptions.fromParameters(null, null, "true", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters(null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexNotFoundException.class))__    };test,that,multiple,indices,work,setting,indices,options,is,possible,and,works,as,expected;public,void,test,indices,options,search,source,builder,amsterdam,query,new,search,source,builder,query,new,match,all,query,builder,list,rated,document,relevant,docs,create,relevant,2,3,4,5,6,relevant,docs,add,new,rated,document,test2,7,list,rated,request,specifications,new,array,list,specifications,add,new,rated,request,relevant,docs,amsterdam,query,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,request,new,rank,eval,request,task,new,string,test2,request,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,request,action,get,detail,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,7,details,get,retrieved,assert,equals,6,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,false,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,tes,request,indices,options,indices,options,from,parameters,none,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,open,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,request,indices,options,indices,options,from,parameters,closed,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,bad,request,indices,options,indices,options,from,parameters,null,null,true,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,not,found,exception,class
RankEvalRequestIT -> public void testIndicesOptions();1532353780;test that multiple indices work, setting indices Options is possible and works as expected;public void testIndicesOptions() {_        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder().query(new MatchAllQueryBuilder())__        List<RatedDocument> relevantDocs = createRelevant("2", "3", "4", "5", "6")__        relevantDocs.add(new RatedDocument("test2", "7", RELEVANT_RATING_1))__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(new RatedRequest("amsterdam_query", relevantDocs, amsterdamQuery))__        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequest request = new RankEvalRequest(task, new String[] { TEST_INDEX, "test2" })__        request.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        Detail details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(7, details.getRetrieved())__        assertEquals(6, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())___        request.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())__        request.indicesOptions(IndicesOptions.fromParameters(null, "false", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "tes*" })__        request.indicesOptions(IndicesOptions.fromParameters("none", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("open", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("closed", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "bad*" })__        request.indicesOptions(IndicesOptions.fromParameters(null, null, "true", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters(null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexNotFoundException.class))__    };test,that,multiple,indices,work,setting,indices,options,is,possible,and,works,as,expected;public,void,test,indices,options,search,source,builder,amsterdam,query,new,search,source,builder,query,new,match,all,query,builder,list,rated,document,relevant,docs,create,relevant,2,3,4,5,6,relevant,docs,add,new,rated,document,test2,7,list,rated,request,specifications,new,array,list,specifications,add,new,rated,request,relevant,docs,amsterdam,query,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,request,new,rank,eval,request,task,new,string,test2,request,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,request,action,get,detail,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,7,details,get,retrieved,assert,equals,6,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,false,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,tes,request,indices,options,indices,options,from,parameters,none,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,open,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,request,indices,options,indices,options,from,parameters,closed,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,bad,request,indices,options,indices,options,from,parameters,null,null,true,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,not,found,exception,class
RankEvalRequestIT -> public void testIndicesOptions();1532434432;test that multiple indices work, setting indices Options is possible and works as expected;public void testIndicesOptions() {_        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder().query(new MatchAllQueryBuilder())__        List<RatedDocument> relevantDocs = createRelevant("2", "3", "4", "5", "6")__        relevantDocs.add(new RatedDocument("test2", "7", RELEVANT_RATING_1))__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(new RatedRequest("amsterdam_query", relevantDocs, amsterdamQuery))__        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequest request = new RankEvalRequest(task, new String[] { TEST_INDEX, "test2" })__        request.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        Detail details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(7, details.getRetrieved())__        assertEquals(6, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())___        request.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())__        request.indicesOptions(IndicesOptions.fromParameters(null, "false", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "tes*" })__        request.indicesOptions(IndicesOptions.fromParameters("none", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("open", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("closed", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "bad*" })__        request.indicesOptions(IndicesOptions.fromParameters(null, null, "true", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters(null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexNotFoundException.class))__    };test,that,multiple,indices,work,setting,indices,options,is,possible,and,works,as,expected;public,void,test,indices,options,search,source,builder,amsterdam,query,new,search,source,builder,query,new,match,all,query,builder,list,rated,document,relevant,docs,create,relevant,2,3,4,5,6,relevant,docs,add,new,rated,document,test2,7,list,rated,request,specifications,new,array,list,specifications,add,new,rated,request,relevant,docs,amsterdam,query,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,request,new,rank,eval,request,task,new,string,test2,request,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,request,action,get,detail,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,7,details,get,retrieved,assert,equals,6,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,false,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,tes,request,indices,options,indices,options,from,parameters,none,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,open,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,request,indices,options,indices,options,from,parameters,closed,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,bad,request,indices,options,indices,options,from,parameters,null,null,true,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,not,found,exception,class
RankEvalRequestIT -> public void testIndicesOptions();1538509426;test that multiple indices work, setting indices Options is possible and works as expected;public void testIndicesOptions() {_        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder().query(new MatchAllQueryBuilder())__        List<RatedDocument> relevantDocs = createRelevant("2", "3", "4", "5", "6")__        relevantDocs.add(new RatedDocument("test2", "7", RELEVANT_RATING_1))__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(new RatedRequest("amsterdam_query", relevantDocs, amsterdamQuery))__        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequest request = new RankEvalRequest(task, new String[] { TEST_INDEX, "test2" })__        request.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        Detail details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(7, details.getRetrieved())__        assertEquals(6, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())___        request.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())__        request.indicesOptions(IndicesOptions.fromParameters(null, "false", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "tes*" })__        request.indicesOptions(IndicesOptions.fromParameters("none", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("open", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("closed", null, null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "bad*" })__        request.indicesOptions(IndicesOptions.fromParameters(null, null, "true", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters(null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexNotFoundException.class))__    };test,that,multiple,indices,work,setting,indices,options,is,possible,and,works,as,expected;public,void,test,indices,options,search,source,builder,amsterdam,query,new,search,source,builder,query,new,match,all,query,builder,list,rated,document,relevant,docs,create,relevant,2,3,4,5,6,relevant,docs,add,new,rated,document,test2,7,list,rated,request,specifications,new,array,list,specifications,add,new,rated,request,relevant,docs,amsterdam,query,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,request,new,rank,eval,request,task,new,string,test2,request,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,request,action,get,detail,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,7,details,get,retrieved,assert,equals,6,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,false,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,tes,request,indices,options,indices,options,from,parameters,none,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,open,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,request,indices,options,indices,options,from,parameters,closed,null,null,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,bad,request,indices,options,indices,options,from,parameters,null,null,true,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,not,found,exception,class
RankEvalRequestIT -> public void testIndicesOptions();1541493930;test that multiple indices work, setting indices Options is possible and works as expected;public void testIndicesOptions() {_        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder().query(new MatchAllQueryBuilder())__        List<RatedDocument> relevantDocs = createRelevant("2", "3", "4", "5", "6")__        relevantDocs.add(new RatedDocument("test2", "7", RELEVANT_RATING_1))__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(new RatedRequest("amsterdam_query", relevantDocs, amsterdamQuery))__        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequest request = new RankEvalRequest(task, new String[] { TEST_INDEX, "test2" })__        request.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        Detail details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(7, details.getRetrieved())__        assertEquals(6, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())___        request.indicesOptions(IndicesOptions.fromParameters(null, "true", null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())__        request.indicesOptions(IndicesOptions.fromParameters(null, "false", null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "tes*" })__        request.indicesOptions(IndicesOptions.fromParameters("none", null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("open", null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("closed", null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "bad*" })__        request.indicesOptions(IndicesOptions.fromParameters(null, null, "true", "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters(null, null, "false", "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexNotFoundException.class))__    };test,that,multiple,indices,work,setting,indices,options,is,possible,and,works,as,expected;public,void,test,indices,options,search,source,builder,amsterdam,query,new,search,source,builder,query,new,match,all,query,builder,list,rated,document,relevant,docs,create,relevant,2,3,4,5,6,relevant,docs,add,new,rated,document,test2,7,list,rated,request,specifications,new,array,list,specifications,add,new,rated,request,relevant,docs,amsterdam,query,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,request,new,rank,eval,request,task,new,string,test2,request,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,request,action,get,detail,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,7,details,get,retrieved,assert,equals,6,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,true,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,false,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,tes,request,indices,options,indices,options,from,parameters,none,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,open,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,request,indices,options,indices,options,from,parameters,closed,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,bad,request,indices,options,indices,options,from,parameters,null,null,true,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,null,null,false,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,not,found,exception,class
RankEvalRequestIT -> public void testIndicesOptions();1549860314;test that multiple indices work, setting indices Options is possible and works as expected;public void testIndicesOptions() {_        SearchSourceBuilder amsterdamQuery = new SearchSourceBuilder().query(new MatchAllQueryBuilder())__        List<RatedDocument> relevantDocs = createRelevant("2", "3", "4", "5", "6")__        relevantDocs.add(new RatedDocument("test2", "7", RELEVANT_RATING_1))__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(new RatedRequest("amsterdam_query", relevantDocs, amsterdamQuery))__        RankEvalSpec task = new RankEvalSpec(specifications, new PrecisionAtK())___        RankEvalRequest request = new RankEvalRequest(task, new String[] { TEST_INDEX, "test2" })__        request.setRankEvalSpec(task)___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        Detail details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(7, details.getRetrieved())__        assertEquals(6, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())___        request.indicesOptions(IndicesOptions.fromParameters(null, "true", null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        _        assertTrue(client().admin().indices().prepareClose("test2").get().isAcknowledged())__        request.indicesOptions(IndicesOptions.fromParameters(null, "false", null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "tes*" })__        request.indicesOptions(IndicesOptions.fromParameters("none", null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("open", null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(6, details.getRetrieved())__        assertEquals(5, details.getRelevantRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters("closed", null, null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexClosedException.class))___        _        request = new RankEvalRequest(task, new String[] { "bad*" })__        request.indicesOptions(IndicesOptions.fromParameters(null, null, "true", "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        details = (PrecisionAtK.Detail) response.getPartialResults().get("amsterdam_query").getMetricDetails()__        assertEquals(0, details.getRetrieved())___        request.indicesOptions(IndicesOptions.fromParameters(null, null, "false", "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = client().execute(RankEvalAction.INSTANCE, request).actionGet()__        assertEquals(1, response.getFailures().size())__        assertThat(response.getFailures().get("amsterdam_query"), instanceOf(IndexNotFoundException.class))__    };test,that,multiple,indices,work,setting,indices,options,is,possible,and,works,as,expected;public,void,test,indices,options,search,source,builder,amsterdam,query,new,search,source,builder,query,new,match,all,query,builder,list,rated,document,relevant,docs,create,relevant,2,3,4,5,6,relevant,docs,add,new,rated,document,test2,7,list,rated,request,specifications,new,array,list,specifications,add,new,rated,request,relevant,docs,amsterdam,query,rank,eval,spec,task,new,rank,eval,spec,specifications,new,precision,at,k,rank,eval,request,request,new,rank,eval,request,task,new,string,test2,request,set,rank,eval,spec,task,rank,eval,response,response,client,execute,rank,eval,action,instance,request,action,get,detail,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,7,details,get,retrieved,assert,equals,6,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,true,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,assert,true,client,admin,indices,prepare,close,test2,get,is,acknowledged,request,indices,options,indices,options,from,parameters,null,false,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,tes,request,indices,options,indices,options,from,parameters,none,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,open,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,6,details,get,retrieved,assert,equals,5,details,get,relevant,retrieved,request,indices,options,indices,options,from,parameters,closed,null,null,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,closed,exception,class,request,new,rank,eval,request,task,new,string,bad,request,indices,options,indices,options,from,parameters,null,null,true,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,details,precision,at,k,detail,response,get,partial,results,get,get,metric,details,assert,equals,0,details,get,retrieved,request,indices,options,indices,options,from,parameters,null,null,false,false,search,request,response,client,execute,rank,eval,action,instance,request,action,get,assert,equals,1,response,get,failures,size,assert,that,response,get,failures,get,instance,of,index,not,found,exception,class
RankEvalRequestIT -> public void testDCGRequest();1524684173;This test assumes we are using the same ratings as in {@link DiscountedCumulativeGainTests#testDCGAt()}._See details in that test case for how the expected values are calculated;public void testDCGRequest() {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")___        List<RatedRequest> specifications = new ArrayList<>()__        List<RatedDocument> ratedDocs = Arrays.asList(_                new RatedDocument(TEST_INDEX, "1", 3),_                new RatedDocument(TEST_INDEX, "2", 2),_                new RatedDocument(TEST_INDEX, "3", 3),_                new RatedDocument(TEST_INDEX, "4", 0),_                new RatedDocument(TEST_INDEX, "5", 1),_                new RatedDocument(TEST_INDEX, "6", 2))__        specifications.add(new RatedRequest("amsterdam_query", ratedDocs, testQuery))___        DiscountedCumulativeGain metric = new DiscountedCumulativeGain(false, null, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(DiscountedCumulativeGainTests.EXPECTED_DCG, response.getEvaluationResult(), 10E-14)___        _        metric = new DiscountedCumulativeGain(false, null, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(12.39278926071437, response.getEvaluationResult(), 10E-14)__    };this,test,assumes,we,are,using,the,same,ratings,as,in,link,discounted,cumulative,gain,tests,test,dcgat,see,details,in,that,test,case,for,how,the,expected,values,are,calculated;public,void,test,dcgrequest,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,list,rated,request,specifications,new,array,list,list,rated,document,rated,docs,arrays,as,list,new,rated,document,1,3,new,rated,document,2,2,new,rated,document,3,3,new,rated,document,4,0,new,rated,document,5,1,new,rated,document,6,2,specifications,add,new,rated,request,rated,docs,test,query,discounted,cumulative,gain,metric,new,discounted,cumulative,gain,false,null,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,discounted,cumulative,gain,tests,response,get,evaluation,result,10e,14,metric,new,discounted,cumulative,gain,false,null,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,12,39278926071437,response,get,evaluation,result,10e,14
RankEvalRequestIT -> public void testDCGRequest();1532353780;This test assumes we are using the same ratings as in {@link DiscountedCumulativeGainTests#testDCGAt()}._See details in that test case for how the expected values are calculated;public void testDCGRequest() {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")___        List<RatedRequest> specifications = new ArrayList<>()__        List<RatedDocument> ratedDocs = Arrays.asList(_                new RatedDocument(TEST_INDEX, "1", 3),_                new RatedDocument(TEST_INDEX, "2", 2),_                new RatedDocument(TEST_INDEX, "3", 3),_                new RatedDocument(TEST_INDEX, "4", 0),_                new RatedDocument(TEST_INDEX, "5", 1),_                new RatedDocument(TEST_INDEX, "6", 2))__        specifications.add(new RatedRequest("amsterdam_query", ratedDocs, testQuery))___        DiscountedCumulativeGain metric = new DiscountedCumulativeGain(false, null, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(DiscountedCumulativeGainTests.EXPECTED_DCG, response.getEvaluationResult(), 10E-14)___        _        metric = new DiscountedCumulativeGain(false, null, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(12.39278926071437, response.getEvaluationResult(), 10E-14)__    };this,test,assumes,we,are,using,the,same,ratings,as,in,link,discounted,cumulative,gain,tests,test,dcgat,see,details,in,that,test,case,for,how,the,expected,values,are,calculated;public,void,test,dcgrequest,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,list,rated,request,specifications,new,array,list,list,rated,document,rated,docs,arrays,as,list,new,rated,document,1,3,new,rated,document,2,2,new,rated,document,3,3,new,rated,document,4,0,new,rated,document,5,1,new,rated,document,6,2,specifications,add,new,rated,request,rated,docs,test,query,discounted,cumulative,gain,metric,new,discounted,cumulative,gain,false,null,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,discounted,cumulative,gain,tests,response,get,evaluation,result,10e,14,metric,new,discounted,cumulative,gain,false,null,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,12,39278926071437,response,get,evaluation,result,10e,14
RankEvalRequestIT -> public void testDCGRequest();1532434432;This test assumes we are using the same ratings as in {@link DiscountedCumulativeGainTests#testDCGAt()}._See details in that test case for how the expected values are calculated;public void testDCGRequest() {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")___        List<RatedRequest> specifications = new ArrayList<>()__        List<RatedDocument> ratedDocs = Arrays.asList(_                new RatedDocument(TEST_INDEX, "1", 3),_                new RatedDocument(TEST_INDEX, "2", 2),_                new RatedDocument(TEST_INDEX, "3", 3),_                new RatedDocument(TEST_INDEX, "4", 0),_                new RatedDocument(TEST_INDEX, "5", 1),_                new RatedDocument(TEST_INDEX, "6", 2))__        specifications.add(new RatedRequest("amsterdam_query", ratedDocs, testQuery))___        DiscountedCumulativeGain metric = new DiscountedCumulativeGain(false, null, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(DiscountedCumulativeGainTests.EXPECTED_DCG, response.getMetricScore(), 10E-14)___        _        metric = new DiscountedCumulativeGain(false, null, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(12.39278926071437, response.getMetricScore(), 10E-14)__    };this,test,assumes,we,are,using,the,same,ratings,as,in,link,discounted,cumulative,gain,tests,test,dcgat,see,details,in,that,test,case,for,how,the,expected,values,are,calculated;public,void,test,dcgrequest,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,list,rated,request,specifications,new,array,list,list,rated,document,rated,docs,arrays,as,list,new,rated,document,1,3,new,rated,document,2,2,new,rated,document,3,3,new,rated,document,4,0,new,rated,document,5,1,new,rated,document,6,2,specifications,add,new,rated,request,rated,docs,test,query,discounted,cumulative,gain,metric,new,discounted,cumulative,gain,false,null,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,discounted,cumulative,gain,tests,response,get,metric,score,10e,14,metric,new,discounted,cumulative,gain,false,null,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,12,39278926071437,response,get,metric,score,10e,14
RankEvalRequestIT -> public void testDCGRequest();1538509426;This test assumes we are using the same ratings as in {@link DiscountedCumulativeGainTests#testDCGAt()}._See details in that test case for how the expected values are calculated;public void testDCGRequest() {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")___        List<RatedRequest> specifications = new ArrayList<>()__        List<RatedDocument> ratedDocs = Arrays.asList(_                new RatedDocument(TEST_INDEX, "1", 3),_                new RatedDocument(TEST_INDEX, "2", 2),_                new RatedDocument(TEST_INDEX, "3", 3),_                new RatedDocument(TEST_INDEX, "4", 0),_                new RatedDocument(TEST_INDEX, "5", 1),_                new RatedDocument(TEST_INDEX, "6", 2))__        specifications.add(new RatedRequest("amsterdam_query", ratedDocs, testQuery))___        DiscountedCumulativeGain metric = new DiscountedCumulativeGain(false, null, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(DiscountedCumulativeGainTests.EXPECTED_DCG, response.getMetricScore(), 10E-14)___        _        metric = new DiscountedCumulativeGain(false, null, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(12.39278926071437, response.getMetricScore(), 10E-14)__    };this,test,assumes,we,are,using,the,same,ratings,as,in,link,discounted,cumulative,gain,tests,test,dcgat,see,details,in,that,test,case,for,how,the,expected,values,are,calculated;public,void,test,dcgrequest,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,list,rated,request,specifications,new,array,list,list,rated,document,rated,docs,arrays,as,list,new,rated,document,1,3,new,rated,document,2,2,new,rated,document,3,3,new,rated,document,4,0,new,rated,document,5,1,new,rated,document,6,2,specifications,add,new,rated,request,rated,docs,test,query,discounted,cumulative,gain,metric,new,discounted,cumulative,gain,false,null,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,discounted,cumulative,gain,tests,response,get,metric,score,10e,14,metric,new,discounted,cumulative,gain,false,null,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,12,39278926071437,response,get,metric,score,10e,14
RankEvalRequestIT -> public void testDCGRequest();1541493930;This test assumes we are using the same ratings as in {@link DiscountedCumulativeGainTests#testDCGAt()}._See details in that test case for how the expected values are calculated;public void testDCGRequest() {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")___        List<RatedRequest> specifications = new ArrayList<>()__        List<RatedDocument> ratedDocs = Arrays.asList(_                new RatedDocument(TEST_INDEX, "1", 3),_                new RatedDocument(TEST_INDEX, "2", 2),_                new RatedDocument(TEST_INDEX, "3", 3),_                new RatedDocument(TEST_INDEX, "4", 0),_                new RatedDocument(TEST_INDEX, "5", 1),_                new RatedDocument(TEST_INDEX, "6", 2))__        specifications.add(new RatedRequest("amsterdam_query", ratedDocs, testQuery))___        DiscountedCumulativeGain metric = new DiscountedCumulativeGain(false, null, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(DiscountedCumulativeGainTests.EXPECTED_DCG, response.getMetricScore(), 10E-14)___        _        metric = new DiscountedCumulativeGain(false, null, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(12.39278926071437, response.getMetricScore(), 10E-14)__    };this,test,assumes,we,are,using,the,same,ratings,as,in,link,discounted,cumulative,gain,tests,test,dcgat,see,details,in,that,test,case,for,how,the,expected,values,are,calculated;public,void,test,dcgrequest,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,list,rated,request,specifications,new,array,list,list,rated,document,rated,docs,arrays,as,list,new,rated,document,1,3,new,rated,document,2,2,new,rated,document,3,3,new,rated,document,4,0,new,rated,document,5,1,new,rated,document,6,2,specifications,add,new,rated,request,rated,docs,test,query,discounted,cumulative,gain,metric,new,discounted,cumulative,gain,false,null,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,discounted,cumulative,gain,tests,response,get,metric,score,10e,14,metric,new,discounted,cumulative,gain,false,null,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,12,39278926071437,response,get,metric,score,10e,14
RankEvalRequestIT -> public void testDCGRequest();1549860314;This test assumes we are using the same ratings as in {@link DiscountedCumulativeGainTests#testDCGAt()}._See details in that test case for how the expected values are calculated;public void testDCGRequest() {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        testQuery.sort("_id")___        List<RatedRequest> specifications = new ArrayList<>()__        List<RatedDocument> ratedDocs = Arrays.asList(_                new RatedDocument(TEST_INDEX, "1", 3),_                new RatedDocument(TEST_INDEX, "2", 2),_                new RatedDocument(TEST_INDEX, "3", 3),_                new RatedDocument(TEST_INDEX, "4", 0),_                new RatedDocument(TEST_INDEX, "5", 1),_                new RatedDocument(TEST_INDEX, "6", 2))__        specifications.add(new RatedRequest("amsterdam_query", ratedDocs, testQuery))___        DiscountedCumulativeGain metric = new DiscountedCumulativeGain(false, null, 10)__        RankEvalSpec task = new RankEvalSpec(specifications, metric)___        RankEvalRequestBuilder builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE,_                new RankEvalRequest(task, new String[] { TEST_INDEX }))___        RankEvalResponse response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(DiscountedCumulativeGainTests.EXPECTED_DCG, response.getMetricScore(), 10E-14)___        _        metric = new DiscountedCumulativeGain(false, null, 3)__        task = new RankEvalSpec(specifications, metric)___        builder = new RankEvalRequestBuilder(client(), RankEvalAction.INSTANCE, new RankEvalRequest(task, new String[] { TEST_INDEX }))___        response = client().execute(RankEvalAction.INSTANCE, builder.request()).actionGet()__        assertEquals(12.39278926071437, response.getMetricScore(), 10E-14)__    };this,test,assumes,we,are,using,the,same,ratings,as,in,link,discounted,cumulative,gain,tests,test,dcgat,see,details,in,that,test,case,for,how,the,expected,values,are,calculated;public,void,test,dcgrequest,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,test,query,sort,list,rated,request,specifications,new,array,list,list,rated,document,rated,docs,arrays,as,list,new,rated,document,1,3,new,rated,document,2,2,new,rated,document,3,3,new,rated,document,4,0,new,rated,document,5,1,new,rated,document,6,2,specifications,add,new,rated,request,rated,docs,test,query,discounted,cumulative,gain,metric,new,discounted,cumulative,gain,false,null,10,rank,eval,spec,task,new,rank,eval,spec,specifications,metric,rank,eval,request,builder,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,rank,eval,response,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,discounted,cumulative,gain,tests,response,get,metric,score,10e,14,metric,new,discounted,cumulative,gain,false,null,3,task,new,rank,eval,spec,specifications,metric,builder,new,rank,eval,request,builder,client,rank,eval,action,instance,new,rank,eval,request,task,new,string,response,client,execute,rank,eval,action,instance,builder,request,action,get,assert,equals,12,39278926071437,response,get,metric,score,10e,14
