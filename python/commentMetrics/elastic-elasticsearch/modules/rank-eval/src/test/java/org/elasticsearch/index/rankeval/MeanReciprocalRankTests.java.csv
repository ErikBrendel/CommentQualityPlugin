# id;timestamp;commentText;codeText;commentWords;codeWords
MeanReciprocalRankTests -> public void testPrecisionAtFiveRelevanceThreshold();1524684173;test that the relevant rating threshold can be set to something larger than_1. e.g. we set it to 2 here and expect dics 0-2 to be not relevant, so first_relevant doc has third ranking position, so RR should be 1/3;public void testPrecisionAtFiveRelevanceThreshold() {_        List<RatedDocument> rated = new ArrayList<>()__        rated.add(new RatedDocument("test",  "0", 0))__        rated.add(new RatedDocument("test",  "1", 1))__        rated.add(new RatedDocument("test",  "2", 2))__        rated.add(new RatedDocument("test",  "3", 3))__        rated.add(new RatedDocument("test",  "4", 4))__        SearchHit[] hits = createSearchHits(0, 5, "test")___        MeanReciprocalRank reciprocalRank = new MeanReciprocalRank(2, 10)__        EvalQueryQuality evaluation = reciprocalRank.evaluate("id", hits, rated)__        assertEquals((double) 1 / 3, evaluation.getQualityLevel(), 0.00001)__        assertEquals(3, ((MeanReciprocalRank.Detail) evaluation.getMetricDetails()).getFirstRelevantRank())__    };test,that,the,relevant,rating,threshold,can,be,set,to,something,larger,than,1,e,g,we,set,it,to,2,here,and,expect,dics,0,2,to,be,not,relevant,so,first,relevant,doc,has,third,ranking,position,so,rr,should,be,1,3;public,void,test,precision,at,five,relevance,threshold,list,rated,document,rated,new,array,list,rated,add,new,rated,document,test,0,0,rated,add,new,rated,document,test,1,1,rated,add,new,rated,document,test,2,2,rated,add,new,rated,document,test,3,3,rated,add,new,rated,document,test,4,4,search,hit,hits,create,search,hits,0,5,test,mean,reciprocal,rank,reciprocal,rank,new,mean,reciprocal,rank,2,10,eval,query,quality,evaluation,reciprocal,rank,evaluate,id,hits,rated,assert,equals,double,1,3,evaluation,get,quality,level,0,00001,assert,equals,3,mean,reciprocal,rank,detail,evaluation,get,metric,details,get,first,relevant,rank
MeanReciprocalRankTests -> public void testPrecisionAtFiveRelevanceThreshold();1527773340;test that the relevant rating threshold can be set to something larger than_1. e.g. we set it to 2 here and expect dics 0-2 to be not relevant, so first_relevant doc has third ranking position, so RR should be 1/3;public void testPrecisionAtFiveRelevanceThreshold() {_        List<RatedDocument> rated = new ArrayList<>()__        rated.add(new RatedDocument("test",  "0", 0))__        rated.add(new RatedDocument("test",  "1", 1))__        rated.add(new RatedDocument("test",  "2", 2))__        rated.add(new RatedDocument("test",  "3", 3))__        rated.add(new RatedDocument("test",  "4", 4))__        SearchHit[] hits = createSearchHits(0, 5, "test")___        MeanReciprocalRank reciprocalRank = new MeanReciprocalRank(2, 10)__        EvalQueryQuality evaluation = reciprocalRank.evaluate("id", hits, rated)__        assertEquals((double) 1 / 3, evaluation.getQualityLevel(), 0.00001)__        assertEquals(3, ((MeanReciprocalRank.Detail) evaluation.getMetricDetails()).getFirstRelevantRank())__    };test,that,the,relevant,rating,threshold,can,be,set,to,something,larger,than,1,e,g,we,set,it,to,2,here,and,expect,dics,0,2,to,be,not,relevant,so,first,relevant,doc,has,third,ranking,position,so,rr,should,be,1,3;public,void,test,precision,at,five,relevance,threshold,list,rated,document,rated,new,array,list,rated,add,new,rated,document,test,0,0,rated,add,new,rated,document,test,1,1,rated,add,new,rated,document,test,2,2,rated,add,new,rated,document,test,3,3,rated,add,new,rated,document,test,4,4,search,hit,hits,create,search,hits,0,5,test,mean,reciprocal,rank,reciprocal,rank,new,mean,reciprocal,rank,2,10,eval,query,quality,evaluation,reciprocal,rank,evaluate,id,hits,rated,assert,equals,double,1,3,evaluation,get,quality,level,0,00001,assert,equals,3,mean,reciprocal,rank,detail,evaluation,get,metric,details,get,first,relevant,rank
MeanReciprocalRankTests -> public void testPrecisionAtFiveRelevanceThreshold();1528167589;test that the relevant rating threshold can be set to something larger than_1. e.g. we set it to 2 here and expect dics 0-2 to be not relevant, so first_relevant doc has third ranking position, so RR should be 1/3;public void testPrecisionAtFiveRelevanceThreshold() {_        List<RatedDocument> rated = new ArrayList<>()__        rated.add(new RatedDocument("test",  "0", 0))__        rated.add(new RatedDocument("test",  "1", 1))__        rated.add(new RatedDocument("test",  "2", 2))__        rated.add(new RatedDocument("test",  "3", 3))__        rated.add(new RatedDocument("test",  "4", 4))__        SearchHit[] hits = createSearchHits(0, 5, "test")___        MeanReciprocalRank reciprocalRank = new MeanReciprocalRank(2, 10)__        EvalQueryQuality evaluation = reciprocalRank.evaluate("id", hits, rated)__        assertEquals((double) 1 / 3, evaluation.getQualityLevel(), 0.00001)__        assertEquals(3, ((MeanReciprocalRank.Detail) evaluation.getMetricDetails()).getFirstRelevantRank())__    };test,that,the,relevant,rating,threshold,can,be,set,to,something,larger,than,1,e,g,we,set,it,to,2,here,and,expect,dics,0,2,to,be,not,relevant,so,first,relevant,doc,has,third,ranking,position,so,rr,should,be,1,3;public,void,test,precision,at,five,relevance,threshold,list,rated,document,rated,new,array,list,rated,add,new,rated,document,test,0,0,rated,add,new,rated,document,test,1,1,rated,add,new,rated,document,test,2,2,rated,add,new,rated,document,test,3,3,rated,add,new,rated,document,test,4,4,search,hit,hits,create,search,hits,0,5,test,mean,reciprocal,rank,reciprocal,rank,new,mean,reciprocal,rank,2,10,eval,query,quality,evaluation,reciprocal,rank,evaluate,id,hits,rated,assert,equals,double,1,3,evaluation,get,quality,level,0,00001,assert,equals,3,mean,reciprocal,rank,detail,evaluation,get,metric,details,get,first,relevant,rank
MeanReciprocalRankTests -> public void testPrecisionAtFiveRelevanceThreshold();1532434432;test that the relevant rating threshold can be set to something larger than_1. e.g. we set it to 2 here and expect dics 0-2 to be not relevant, so first_relevant doc has third ranking position, so RR should be 1/3;public void testPrecisionAtFiveRelevanceThreshold() {_        List<RatedDocument> rated = new ArrayList<>()__        rated.add(new RatedDocument("test",  "0", 0))__        rated.add(new RatedDocument("test",  "1", 1))__        rated.add(new RatedDocument("test",  "2", 2))__        rated.add(new RatedDocument("test",  "3", 3))__        rated.add(new RatedDocument("test",  "4", 4))__        SearchHit[] hits = createSearchHits(0, 5, "test")___        MeanReciprocalRank reciprocalRank = new MeanReciprocalRank(2, 10)__        EvalQueryQuality evaluation = reciprocalRank.evaluate("id", hits, rated)__        assertEquals((double) 1 / 3, evaluation.metricScore(), 0.00001)__        assertEquals(3, ((MeanReciprocalRank.Detail) evaluation.getMetricDetails()).getFirstRelevantRank())__    };test,that,the,relevant,rating,threshold,can,be,set,to,something,larger,than,1,e,g,we,set,it,to,2,here,and,expect,dics,0,2,to,be,not,relevant,so,first,relevant,doc,has,third,ranking,position,so,rr,should,be,1,3;public,void,test,precision,at,five,relevance,threshold,list,rated,document,rated,new,array,list,rated,add,new,rated,document,test,0,0,rated,add,new,rated,document,test,1,1,rated,add,new,rated,document,test,2,2,rated,add,new,rated,document,test,3,3,rated,add,new,rated,document,test,4,4,search,hit,hits,create,search,hits,0,5,test,mean,reciprocal,rank,reciprocal,rank,new,mean,reciprocal,rank,2,10,eval,query,quality,evaluation,reciprocal,rank,evaluate,id,hits,rated,assert,equals,double,1,3,evaluation,metric,score,0,00001,assert,equals,3,mean,reciprocal,rank,detail,evaluation,get,metric,details,get,first,relevant,rank
MeanReciprocalRankTests -> public void testPrecisionAtFiveRelevanceThreshold();1548770291;test that the relevant rating threshold can be set to something larger than_1. e.g. we set it to 2 here and expect dics 0-2 to be not relevant, so first_relevant doc has third ranking position, so RR should be 1/3;public void testPrecisionAtFiveRelevanceThreshold() {_        List<RatedDocument> rated = new ArrayList<>()__        rated.add(new RatedDocument("test",  "0", 0))__        rated.add(new RatedDocument("test",  "1", 1))__        rated.add(new RatedDocument("test",  "2", 2))__        rated.add(new RatedDocument("test",  "3", 3))__        rated.add(new RatedDocument("test",  "4", 4))__        SearchHit[] hits = createSearchHits(0, 5, "test")___        MeanReciprocalRank reciprocalRank = new MeanReciprocalRank(2, 10)__        EvalQueryQuality evaluation = reciprocalRank.evaluate("id", hits, rated)__        assertEquals((double) 1 / 3, evaluation.metricScore(), 0.00001)__        assertEquals(3, ((MeanReciprocalRank.Detail) evaluation.getMetricDetails()).getFirstRelevantRank())__    };test,that,the,relevant,rating,threshold,can,be,set,to,something,larger,than,1,e,g,we,set,it,to,2,here,and,expect,dics,0,2,to,be,not,relevant,so,first,relevant,doc,has,third,ranking,position,so,rr,should,be,1,3;public,void,test,precision,at,five,relevance,threshold,list,rated,document,rated,new,array,list,rated,add,new,rated,document,test,0,0,rated,add,new,rated,document,test,1,1,rated,add,new,rated,document,test,2,2,rated,add,new,rated,document,test,3,3,rated,add,new,rated,document,test,4,4,search,hit,hits,create,search,hits,0,5,test,mean,reciprocal,rank,reciprocal,rank,new,mean,reciprocal,rank,2,10,eval,query,quality,evaluation,reciprocal,rank,evaluate,id,hits,rated,assert,equals,double,1,3,evaluation,metric,score,0,00001,assert,equals,3,mean,reciprocal,rank,detail,evaluation,get,metric,details,get,first,relevant,rank
MeanReciprocalRankTests -> private static SearchHit[] createSearchHits(int from, int to, String index);1524684173;Create SearchHits for testing, starting from dociId 'from' up to docId 'to'._The search hits index also need to be provided;private static SearchHit[] createSearchHits(int from, int to, String index) {_        SearchHit[] hits = new SearchHit[to + 1 - from]__        for (int i = from_ i <= to_ i++) {_            hits[i] = new SearchHit(i, i + "", new Text(""), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index(index, "uuid"), 0, null))__        }_        return hits__    };create,search,hits,for,testing,starting,from,doci,id,from,up,to,doc,id,to,the,search,hits,index,also,need,to,be,provided;private,static,search,hit,create,search,hits,int,from,int,to,string,index,search,hit,hits,new,search,hit,to,1,from,for,int,i,from,i,to,i,hits,i,new,search,hit,i,i,new,text,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,return,hits
MeanReciprocalRankTests -> private static SearchHit[] createSearchHits(int from, int to, String index);1527773340;Create SearchHits for testing, starting from dociId 'from' up to docId 'to'._The search hits index also need to be provided;private static SearchHit[] createSearchHits(int from, int to, String index) {_        SearchHit[] hits = new SearchHit[to + 1 - from]__        for (int i = from_ i <= to_ i++) {_            hits[i] = new SearchHit(i, i + "", new Text(""), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index(index, "uuid"), 0, null))__        }_        return hits__    };create,search,hits,for,testing,starting,from,doci,id,from,up,to,doc,id,to,the,search,hits,index,also,need,to,be,provided;private,static,search,hit,create,search,hits,int,from,int,to,string,index,search,hit,hits,new,search,hit,to,1,from,for,int,i,from,i,to,i,hits,i,new,search,hit,i,i,new,text,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,return,hits
MeanReciprocalRankTests -> private static SearchHit[] createSearchHits(int from, int to, String index);1528167589;Create SearchHits for testing, starting from dociId 'from' up to docId 'to'._The search hits index also need to be provided;private static SearchHit[] createSearchHits(int from, int to, String index) {_        SearchHit[] hits = new SearchHit[to + 1 - from]__        for (int i = from_ i <= to_ i++) {_            hits[i] = new SearchHit(i, i + "", new Text(""), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index(index, "uuid"), 0, null))__        }_        return hits__    };create,search,hits,for,testing,starting,from,doci,id,from,up,to,doc,id,to,the,search,hits,index,also,need,to,be,provided;private,static,search,hit,create,search,hits,int,from,int,to,string,index,search,hit,hits,new,search,hit,to,1,from,for,int,i,from,i,to,i,hits,i,new,search,hit,i,i,new,text,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,return,hits
MeanReciprocalRankTests -> private static SearchHit[] createSearchHits(int from, int to, String index);1532434432;Create SearchHits for testing, starting from dociId 'from' up to docId 'to'._The search hits index also need to be provided;private static SearchHit[] createSearchHits(int from, int to, String index) {_        SearchHit[] hits = new SearchHit[to + 1 - from]__        for (int i = from_ i <= to_ i++) {_            hits[i] = new SearchHit(i, i + "", new Text(""), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index(index, "uuid"), 0, null))__        }_        return hits__    };create,search,hits,for,testing,starting,from,doci,id,from,up,to,doc,id,to,the,search,hits,index,also,need,to,be,provided;private,static,search,hit,create,search,hits,int,from,int,to,string,index,search,hit,hits,new,search,hit,to,1,from,for,int,i,from,i,to,i,hits,i,new,search,hit,i,i,new,text,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,return,hits
MeanReciprocalRankTests -> private static SearchHit[] createSearchHits(int from, int to, String index);1548770291;Create SearchHits for testing, starting from dociId 'from' up to docId 'to'._The search hits index also need to be provided;private static SearchHit[] createSearchHits(int from, int to, String index) {_        SearchHit[] hits = new SearchHit[to + 1 - from]__        for (int i = from_ i <= to_ i++) {_            hits[i] = new SearchHit(i, i + "", new Text(""), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new ShardId(index, "uuid", 0), null, OriginalIndices.NONE))__        }_        return hits__    };create,search,hits,for,testing,starting,from,doci,id,from,up,to,doc,id,to,the,search,hits,index,also,need,to,be,provided;private,static,search,hit,create,search,hits,int,from,int,to,string,index,search,hit,hits,new,search,hit,to,1,from,for,int,i,from,i,to,i,hits,i,new,search,hit,i,i,new,text,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,shard,id,index,uuid,0,null,original,indices,none,return,hits
