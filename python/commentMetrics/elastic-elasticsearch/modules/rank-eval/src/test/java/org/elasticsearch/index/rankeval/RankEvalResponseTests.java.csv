commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;22;;private static RankEvalResponse createRandomResponse() {     int numberOfRequests = randomIntBetween(0, 5).     Map<String, EvalQueryQuality> partials = new HashMap<>(numberOfRequests).     for (int i = 0. i < numberOfRequests. i++) {         String id = randomAlphaOfLengthBetween(3, 10).         EvalQueryQuality evalQuality = new EvalQueryQuality(id, randomDoubleBetween(0.0, 1.0, true)).         int numberOfDocs = randomIntBetween(0, 5).         List<RatedSearchHit> ratedHits = new ArrayList<>(numberOfDocs).         for (int d = 0. d < numberOfDocs. d++) {             ratedHits.add(searchHit(randomAlphaOfLength(10), randomIntBetween(0, 1000), randomIntBetween(0, 10))).         }         evalQuality.addHitsAndRatings(ratedHits).         partials.put(id, evalQuality).     }     int numberOfErrors = randomIntBetween(0, 2).     Map<String, Exception> errors = new HashMap<>(numberOfRequests).     for (int i = 0. i < numberOfErrors. i++) {         errors.put(randomAlphaOfLengthBetween(3, 10), randomFrom(RANDOM_EXCEPTIONS)).     }     return new RankEvalResponse(randomDouble(), partials, errors). }
false;public;0;15;;public void testSerialization() throws IOException {     RankEvalResponse randomResponse = createRandomResponse().     try (BytesStreamOutput output = new BytesStreamOutput()) {         randomResponse.writeTo(output).         try (StreamInput in = output.bytes().streamInput()) {             RankEvalResponse deserializedResponse = new RankEvalResponse().             deserializedResponse.readFrom(in).             assertEquals(randomResponse.getMetricScore(), deserializedResponse.getMetricScore(), Double.MIN_VALUE).             assertEquals(randomResponse.getPartialResults(), deserializedResponse.getPartialResults()).             assertEquals(randomResponse.getFailures().keySet(), deserializedResponse.getFailures().keySet()).             assertNotSame(randomResponse, deserializedResponse).             assertEquals(-1, in.read()).         }     } }
false;public;0;34;;public void testXContentParsing() throws IOException {     RankEvalResponse testItem = createRandomResponse().     boolean humanReadable = randomBoolean().     XContentType xContentType = randomFrom(XContentType.values()).     BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, humanReadable).     // skip inserting random fields for:     // - the `details` section, which can contain arbitrary queryIds     // - everything under `failures` (exceptions parsing is quiet lenient)     // - everything under `hits` (we test lenient SearchHit parsing elsewhere)     Predicate<String> pathsToExclude = path -> (path.endsWith("details") || path.contains("failures") || path.contains("hits")).     BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, pathsToExclude, random()).     RankEvalResponse parsedItem.     try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {         parsedItem = RankEvalResponse.fromXContent(parser).         assertNull(parser.nextToken()).     }     assertNotSame(testItem, parsedItem).     // We cannot check equality of object here because some information (e.g.     // SearchHit#shard)  cannot fully be parsed back.     assertEquals(testItem.getMetricScore(), parsedItem.getMetricScore(), 0.0).     assertEquals(testItem.getPartialResults().keySet(), parsedItem.getPartialResults().keySet()).     for (EvalQueryQuality metricDetail : testItem.getPartialResults().values()) {         EvalQueryQuality parsedEvalQueryQuality = parsedItem.getPartialResults().get(metricDetail.getId()).         assertToXContentEquivalent(toXContent(metricDetail, xContentType, humanReadable), toXContent(parsedEvalQueryQuality, xContentType, humanReadable), xContentType).     }     // Also exceptions that are parsed back will be different since they are re-wrapped during parsing.     // However, we can check that there is the expected number     assertEquals(testItem.getFailures().keySet(), parsedItem.getFailures().keySet()).     for (String queryId : testItem.getFailures().keySet()) {         Exception ex = parsedItem.getFailures().get(queryId).         assertThat(ex, instanceOf(ElasticsearchException.class)).     } }
false;public;0;31;;public void testToXContent() throws IOException {     EvalQueryQuality coffeeQueryQuality = new EvalQueryQuality("coffee_query", 0.1).     coffeeQueryQuality.addHitsAndRatings(Arrays.asList(searchHit("index", 123, 5), searchHit("index", 456, null))).     RankEvalResponse response = new RankEvalResponse(0.123, Collections.singletonMap("coffee_query", coffeeQueryQuality), Collections.singletonMap("beer_query", new ParsingException(new XContentLocation(0, 0), "someMsg"))).     XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).     String xContent = BytesReference.bytes(response.toXContent(builder, ToXContent.EMPTY_PARAMS)).utf8ToString().     assertEquals(("{" + "    \"metric_score\": 0.123," + "    \"details\": {" + "        \"coffee_query\": {" + "            \"metric_score\": 0.1," + "            \"unrated_docs\": [{\"_index\":\"index\",\"_id\":\"456\"}]," + "            \"hits\":[{\"hit\":{\"_index\":\"index\",\"_type\":\"_doc\",\"_id\":\"123\",\"_score\":1.0}," + "                       \"rating\":5}," + "                      {\"hit\":{\"_index\":\"index\",\"_type\":\"_doc\",\"_id\":\"456\",\"_score\":1.0}," + "                       \"rating\":null}" + "                     ]" + "        }" + "    }," + "    \"failures\": {" + "        \"beer_query\": {" + "          \"error\" : {\"root_cause\": [{\"type\":\"parsing_exception\", \"reason\":\"someMsg\",\"line\":0,\"col\":0}]," + "                       \"type\":\"parsing_exception\"," + "                       \"reason\":\"someMsg\"," + "                       \"line\":0,\"col\":0" + "                      }" + "        }" + "    }" + "}").replaceAll("\\s+", ""), xContent). }
false;private,static;3;6;;private static RatedSearchHit searchHit(String index, int docId, Integer rating) {     SearchHit hit = new SearchHit(docId, docId + "", new Text(MapperService.SINGLE_MAPPING_NAME), Collections.emptyMap()).     hit.shard(new SearchShardTarget("testnode", new ShardId(index, "uuid", 0), null, OriginalIndices.NONE)).     hit.score(1.0f).     return new RatedSearchHit(hit, rating != null ? OptionalInt.of(rating) : OptionalInt.empty()). }
