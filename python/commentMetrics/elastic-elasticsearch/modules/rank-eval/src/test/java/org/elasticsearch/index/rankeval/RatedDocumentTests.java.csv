commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static RatedDocument createRatedDocument() {     return new RatedDocument(randomAlphaOfLength(10), randomAlphaOfLength(10), randomInt()). }
false;public;0;11;;public void testXContentParsing() throws IOException {     RatedDocument testItem = createRatedDocument().     XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values())).     XContentBuilder shuffled = shuffleXContent(testItem.toXContent(builder, ToXContent.EMPTY_PARAMS)).     try (XContentParser itemParser = createParser(shuffled)) {         RatedDocument parsedItem = RatedDocument.fromXContent(itemParser).         assertNotSame(testItem, parsedItem).         assertEquals(testItem, parsedItem).         assertEquals(testItem.hashCode(), parsedItem.hashCode()).     } }
false;public;0;10;;public void testXContentParsingIsNotLenient() throws IOException {     RatedDocument testItem = createRatedDocument().     XContentType xContentType = randomFrom(XContentType.values()).     BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean()).     BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random()).     try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {         XContentParseException exception = expectThrows(XContentParseException.class, () -> RatedDocument.fromXContent(parser)).         assertThat(exception.getMessage(), containsString("[rated_document] unknown field")).     } }
false;public;0;8;;public void testSerialization() throws IOException {     RatedDocument original = createRatedDocument().     RatedDocument deserialized = ESTestCase.copyWriteable(original, new NamedWriteableRegistry(Collections.emptyList()), RatedDocument::new).     assertEquals(deserialized, original).     assertEquals(deserialized.hashCode(), original.hashCode()).     assertNotSame(deserialized, original). }
false;public;0;5;;public void testEqualsAndHash() throws IOException {     checkEqualsAndHashCode(createRatedDocument(), original -> {         return new RatedDocument(original.getIndex(), original.getDocID(), original.getRating()).     }, RatedDocumentTests::mutateTestItem). }
false;private,static;1;20;;private static RatedDocument mutateTestItem(RatedDocument original) {     int rating = original.getRating().     String index = original.getIndex().     String docId = original.getDocID().     switch(randomIntBetween(0, 2)) {         case 0:             rating = randomValueOtherThan(rating, () -> randomInt()).             break.         case 1:             index = randomValueOtherThan(index, () -> randomAlphaOfLength(10)).             break.         case 2:             docId = randomValueOtherThan(docId, () -> randomAlphaOfLength(10)).             break.         default:             throw new IllegalStateException("The test should only allow two parameters mutated").     }     return new RatedDocument(index, docId, rating). }
