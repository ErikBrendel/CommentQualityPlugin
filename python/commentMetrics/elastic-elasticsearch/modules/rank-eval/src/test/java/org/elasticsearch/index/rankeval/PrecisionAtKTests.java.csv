commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testPrecisionAtFiveCalculation() {     List<RatedDocument> rated = new ArrayList<>().     rated.add(createRatedDoc("test", "0", RELEVANT_RATING_1)).     EvalQueryQuality evaluated = (new PrecisionAtK()).evaluate("id", toSearchHits(rated, "test"), rated).     assertEquals(1, evaluated.metricScore(), 0.00001).     assertEquals(1, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(1, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()). }
false;public;0;12;;public void testPrecisionAtFiveIgnoreOneResult() {     List<RatedDocument> rated = new ArrayList<>().     rated.add(createRatedDoc("test", "0", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test", "1", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test", "2", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test", "3", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test", "4", IRRELEVANT_RATING_0)).     EvalQueryQuality evaluated = (new PrecisionAtK()).evaluate("id", toSearchHits(rated, "test"), rated).     assertEquals((double) 4 / 5, evaluated.metricScore(), 0.00001).     assertEquals(4, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(5, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()). }
true;public;0;13;/**  * test that the relevant rating threshold can be set to something larger than  * 1. e.g. we set it to 2 here and expect dics 0-2 to be not relevant, doc 3 and  * 4 to be relevant  */ ;/**  * test that the relevant rating threshold can be set to something larger than  * 1. e.g. we set it to 2 here and expect dics 0-2 to be not relevant, doc 3 and  * 4 to be relevant  */ public void testPrecisionAtFiveRelevanceThreshold() {     List<RatedDocument> rated = new ArrayList<>().     rated.add(createRatedDoc("test", "0", 0)).     rated.add(createRatedDoc("test", "1", 1)).     rated.add(createRatedDoc("test", "2", 2)).     rated.add(createRatedDoc("test", "3", 3)).     rated.add(createRatedDoc("test", "4", 4)).     PrecisionAtK precisionAtN = new PrecisionAtK(2, false, 5).     EvalQueryQuality evaluated = precisionAtN.evaluate("id", toSearchHits(rated, "test"), rated).     assertEquals((double) 3 / 5, evaluated.metricScore(), 0.00001).     assertEquals(3, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(5, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()). }
false;public;0;13;;public void testPrecisionAtFiveCorrectIndex() {     List<RatedDocument> rated = new ArrayList<>().     rated.add(createRatedDoc("test_other", "0", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test_other", "1", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test", "0", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test", "1", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test", "2", IRRELEVANT_RATING_0)).     // the following search hits contain only the last three documents     EvalQueryQuality evaluated = (new PrecisionAtK()).evaluate("id", toSearchHits(rated.subList(2, 5), "test"), rated).     assertEquals((double) 2 / 3, evaluated.metricScore(), 0.00001).     assertEquals(2, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(3, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()). }
false;public;0;21;;public void testIgnoreUnlabeled() {     List<RatedDocument> rated = new ArrayList<>().     rated.add(createRatedDoc("test", "0", RELEVANT_RATING_1)).     rated.add(createRatedDoc("test", "1", RELEVANT_RATING_1)).     // add an unlabeled search hit     SearchHit[] searchHits = Arrays.copyOf(toSearchHits(rated, "test"), 3).     searchHits[2] = new SearchHit(2, "2", new Text(MapperService.SINGLE_MAPPING_NAME), Collections.emptyMap()).     searchHits[2].shard(new SearchShardTarget("testnode", new ShardId("index", "uuid", 0), null, OriginalIndices.NONE)).     EvalQueryQuality evaluated = (new PrecisionAtK()).evaluate("id", searchHits, rated).     assertEquals((double) 2 / 3, evaluated.metricScore(), 0.00001).     assertEquals(2, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(3, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()).     // also try with setting `ignore_unlabeled`     PrecisionAtK prec = new PrecisionAtK(1, true, 10).     evaluated = prec.evaluate("id", searchHits, rated).     assertEquals((double) 2 / 2, evaluated.metricScore(), 0.00001).     assertEquals(2, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(2, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()). }
false;public;0;18;;public void testNoRatedDocs() throws Exception {     SearchHit[] hits = new SearchHit[5].     for (int i = 0. i < 5. i++) {         hits[i] = new SearchHit(i, i + "", new Text(MapperService.SINGLE_MAPPING_NAME), Collections.emptyMap()).         hits[i].shard(new SearchShardTarget("testnode", new ShardId("index", "uuid", 0), null, OriginalIndices.NONE)).     }     EvalQueryQuality evaluated = (new PrecisionAtK()).evaluate("id", hits, Collections.emptyList()).     assertEquals(0.0d, evaluated.metricScore(), 0.00001).     assertEquals(0, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(5, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()).     // also try with setting `ignore_unlabeled`     PrecisionAtK prec = new PrecisionAtK(1, true, 10).     evaluated = prec.evaluate("id", hits, Collections.emptyList()).     assertEquals(0.0d, evaluated.metricScore(), 0.00001).     assertEquals(0, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(0, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()). }
false;public;0;7;;public void testNoResults() throws Exception {     SearchHit[] hits = new SearchHit[0].     EvalQueryQuality evaluated = (new PrecisionAtK()).evaluate("id", hits, Collections.emptyList()).     assertEquals(0.0d, evaluated.metricScore(), 0.00001).     assertEquals(0, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRelevantRetrieved()).     assertEquals(0, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved()). }
false;public;0;7;;public void testParseFromXContent() throws IOException {     String xContent = " {\n" + "   \"relevant_rating_threshold\" : 2" + "}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, xContent)) {         PrecisionAtK precicionAt = PrecisionAtK.fromXContent(parser).         assertEquals(2, precicionAt.getRelevantRatingThreshold()).     } }
false;public;0;8;;public void testCombine() {     PrecisionAtK metric = new PrecisionAtK().     List<EvalQueryQuality> partialResults = new ArrayList<>(3).     partialResults.add(new EvalQueryQuality("a", 0.1)).     partialResults.add(new EvalQueryQuality("b", 0.2)).     partialResults.add(new EvalQueryQuality("c", 0.6)).     assertEquals(0.3, metric.combine(partialResults), Double.MIN_VALUE). }
false;public;0;3;;public void testInvalidRelevantThreshold() {     expectThrows(IllegalArgumentException.class, () -> new PrecisionAtK(-1, false, 10)). }
false;public;0;3;;public void testInvalidK() {     expectThrows(IllegalArgumentException.class, () -> new PrecisionAtK(1, false, -10)). }
false;public,static;0;3;;public static PrecisionAtK createTestItem() {     return new PrecisionAtK(randomIntBetween(0, 10), randomBoolean(), randomIntBetween(1, 50)). }
false;public;0;13;;public void testXContentRoundtrip() throws IOException {     PrecisionAtK testItem = createTestItem().     XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values())).     XContentBuilder shuffled = shuffleXContent(testItem.toXContent(builder, ToXContent.EMPTY_PARAMS)).     try (XContentParser itemParser = createParser(shuffled)) {         itemParser.nextToken().         itemParser.nextToken().         PrecisionAtK parsedItem = PrecisionAtK.fromXContent(itemParser).         assertNotSame(testItem, parsedItem).         assertEquals(testItem, parsedItem).         assertEquals(testItem.hashCode(), parsedItem.hashCode()).     } }
false;public;0;12;;public void testXContentParsingIsNotLenient() throws IOException {     PrecisionAtK testItem = createTestItem().     XContentType xContentType = randomFrom(XContentType.values()).     BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean()).     BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random()).     try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {         parser.nextToken().         parser.nextToken().         XContentParseException exception = expectThrows(XContentParseException.class, () -> PrecisionAtK.fromXContent(parser)).         assertThat(exception.getMessage(), containsString("[precision] unknown field")).     } }
false;public;0;8;;public void testSerialization() throws IOException {     PrecisionAtK original = createTestItem().     PrecisionAtK deserialized = ESTestCase.copyWriteable(original, new NamedWriteableRegistry(Collections.emptyList()), PrecisionAtK::new).     assertEquals(deserialized, original).     assertEquals(deserialized.hashCode(), original.hashCode()).     assertNotSame(deserialized, original). }
false;public;0;3;;public void testEqualsAndHash() throws IOException {     checkEqualsAndHashCode(createTestItem(), PrecisionAtKTests::copy, PrecisionAtKTests::mutate). }
false;private,static;1;4;;private static PrecisionAtK copy(PrecisionAtK original) {     return new PrecisionAtK(original.getRelevantRatingThreshold(), original.getIgnoreUnlabeled(), original.forcedSearchSize().getAsInt()). }
false;private,static;1;20;;private static PrecisionAtK mutate(PrecisionAtK original) {     PrecisionAtK pAtK.     switch(randomIntBetween(0, 2)) {         case 0:             pAtK = new PrecisionAtK(original.getRelevantRatingThreshold(), !original.getIgnoreUnlabeled(), original.forcedSearchSize().getAsInt()).             break.         case 1:             pAtK = new PrecisionAtK(randomValueOtherThan(original.getRelevantRatingThreshold(), () -> randomIntBetween(0, 10)), original.getIgnoreUnlabeled(), original.forcedSearchSize().getAsInt()).             break.         case 2:             pAtK = new PrecisionAtK(original.getRelevantRatingThreshold(), original.getIgnoreUnlabeled(), original.forcedSearchSize().getAsInt() + 1).             break.         default:             throw new IllegalStateException("The test should only allow three parameters mutated").     }     return pAtK. }
false;private,static;2;8;;private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {     SearchHit[] hits = new SearchHit[rated.size()].     for (int i = 0. i < rated.size(). i++) {         hits[i] = new SearchHit(i, i + "", new Text(""), Collections.emptyMap()).         hits[i].shard(new SearchShardTarget("testnode", new ShardId(index, "uuid", 0), null, OriginalIndices.NONE)).     }     return hits. }
false;private,static;3;3;;private static RatedDocument createRatedDoc(String index, String id, int rating) {     return new RatedDocument(index, id, rating). }
