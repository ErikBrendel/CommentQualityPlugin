commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@AfterClass public static void releasePluginResources() throws IOException {     rankEvalPlugin.close(). }
false;protected;0;4;;@Override protected NamedXContentRegistry xContentRegistry() {     return new NamedXContentRegistry(rankEvalPlugin.getNamedXContent()). }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(rankEvalPlugin.getNamedWriteables()). }
false;protected;0;14;;@Override protected RankEvalRequest createTestInstance() {     int numberOfIndices = randomInt(3).     String[] indices = new String[numberOfIndices].     for (int i = 0. i < numberOfIndices. i++) {         indices[i] = randomAlphaOfLengthBetween(5, 10).     }     RankEvalRequest rankEvalRequest = new RankEvalRequest(RankEvalSpecTests.createTestItem(), indices).     IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).     rankEvalRequest.indicesOptions(indicesOptions).     return rankEvalRequest. }
false;protected;0;4;;@Override protected Reader<RankEvalRequest> instanceReader() {     return RankEvalRequest::new. }
false;protected;1;11;;@Override protected RankEvalRequest mutateInstance(RankEvalRequest instance) throws IOException {     RankEvalRequest mutation = copyInstance(instance).     List<Runnable> mutators = new ArrayList<>().     mutators.add(() -> mutation.indices(ArrayUtils.concat(instance.indices(), new String[] { randomAlphaOfLength(10) }))).     mutators.add(() -> mutation.indicesOptions(randomValueOtherThan(instance.indicesOptions(), () -> IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())))).     mutators.add(() -> mutation.setRankEvalSpec(RankEvalSpecTests.mutateTestItem(instance.getRankEvalSpec()))).     randomFrom(mutators).run().     return mutation. }
