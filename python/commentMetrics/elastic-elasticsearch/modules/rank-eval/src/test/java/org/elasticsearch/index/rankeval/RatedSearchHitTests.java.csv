commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;public static RatedSearchHit randomRatedSearchHit() {     OptionalInt rating = randomBoolean() ? OptionalInt.empty() : OptionalInt.of(randomIntBetween(0, 5)).     SearchHit searchHit = new SearchHit(randomIntBetween(0, 10), randomAlphaOfLength(10), new Text(MapperService.SINGLE_MAPPING_NAME), Collections.emptyMap()).     RatedSearchHit ratedSearchHit = new RatedSearchHit(searchHit, rating).     return ratedSearchHit. }
false;private,static;1;16;;private static RatedSearchHit mutateTestItem(RatedSearchHit original) {     OptionalInt rating = original.getRating().     SearchHit hit = original.getSearchHit().     switch(randomIntBetween(0, 1)) {         case 0:             rating = rating.isPresent() ? OptionalInt.of(rating.getAsInt() + 1) : OptionalInt.of(randomInt(5)).             break.         case 1:             hit = new SearchHit(hit.docId(), hit.getId() + randomAlphaOfLength(10), new Text(MapperService.SINGLE_MAPPING_NAME), Collections.emptyMap()).             break.         default:             throw new IllegalStateException("The test should only allow two parameters mutated").     }     return new RatedSearchHit(hit, rating). }
false;public;0;7;;public void testSerialization() throws IOException {     RatedSearchHit original = randomRatedSearchHit().     RatedSearchHit deserialized = copy(original).     assertEquals(deserialized, original).     assertEquals(deserialized.hashCode(), original.hashCode()).     assertNotSame(deserialized, original). }
false;public;0;12;;public void testXContentRoundtrip() throws IOException {     RatedSearchHit testItem = randomRatedSearchHit().     XContentType xContentType = randomFrom(XContentType.values()).     BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean()).     BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random()).     try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {         RatedSearchHit parsedItem = RatedSearchHit.parse(parser).         assertNotSame(testItem, parsedItem).         assertEquals(testItem, parsedItem).         assertEquals(testItem.hashCode(), parsedItem.hashCode()).     } }
false;public;0;3;;public void testEqualsAndHash() throws IOException {     checkEqualsAndHashCode(randomRatedSearchHit(), RatedSearchHitTests::copy, RatedSearchHitTests::mutateTestItem). }
false;private,static;1;3;;private static RatedSearchHit copy(RatedSearchHit original) throws IOException {     return ESTestCase.copyWriteable(original, new NamedWriteableRegistry(Collections.emptyList()), RatedSearchHit::new). }
