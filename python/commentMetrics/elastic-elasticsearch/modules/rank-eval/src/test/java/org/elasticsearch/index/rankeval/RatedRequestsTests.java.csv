# id;timestamp;commentText;codeText;commentWords;codeWords
RatedRequestsTests -> public void testParseFromXContent() throws IOException;1524684173;test that modifying the order of index/docId to make sure it doesn't_matter for parsing xContent;public void testParseFromXContent() throws IOException {_        String querySpecString = " {\n"_                + "   \"id\": \"my_qa_query\",\n"_                + "   \"request\": {\n"_                + "           \"query\": {\n"_                + "               \"bool\": {\n"_                + "                   \"must\": [\n"_                + "                       {\"match\": {\"beverage\": \"coffee\"}},\n"_                + "                       {\"term\": {\"browser\": {\"value\": \"safari\"}}},\n"_                + "                       {\"term\": {\"time_of_day\": "_                + "                                  {\"value\": \"morning\",\"boost\": 2}}},\n"_                + "                       {\"term\": {\"ip_location\": "_                + "                                  {\"value\": \"ams\",\"boost\": 10}}}]}\n"_                + "           },\n"_                + "           \"size\": 10\n"_                + "   },\n"_                + "   \"summary_fields\" : [\"title\"],\n"_                + "   \"ratings\": [\n"_                + "        {\"_index\": \"test\" , \"_id\": \"1\", \"rating\" : 1 },\n"_                + "        {\"_index\": \"test\", \"rating\" : 0, \"_id\": \"2\"},\n"_                + "        {\"_id\": \"3\", \"_index\": \"test\", \"rating\" : 1} ]"_                + "}\n"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, querySpecString)) {_            RatedRequest specification = RatedRequest.fromXContent(parser)__            assertEquals("my_qa_query", specification.getId())__            assertNotNull(specification.getTestRequest())__            List<RatedDocument> ratedDocs = specification.getRatedDocs()__            assertEquals(3, ratedDocs.size())__            for (int i = 0_ i < 3_ i++) {_                assertEquals("" + (i + 1), ratedDocs.get(i).getDocID())__                assertEquals("test", ratedDocs.get(i).getIndex())__                if (i == 1) {_                    assertEquals(0, ratedDocs.get(i).getRating())__                } else {_                    assertEquals(1, ratedDocs.get(i).getRating())__                }_            }_        }_    };test,that,modifying,the,order,of,index,doc,id,to,make,sure,it,doesn,t,matter,for,parsing,x,content;public,void,test,parse,from,xcontent,throws,ioexception,string,query,spec,string,n,id,n,request,n,query,n,bool,n,must,n,match,beverage,coffee,n,term,browser,value,safari,n,term,value,morning,boost,2,n,term,value,ams,boost,10,n,n,size,10,n,n,title,n,ratings,n,test,1,rating,1,n,test,rating,0,2,n,3,test,rating,1,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,query,spec,string,rated,request,specification,rated,request,from,xcontent,parser,assert,equals,specification,get,id,assert,not,null,specification,get,test,request,list,rated,document,rated,docs,specification,get,rated,docs,assert,equals,3,rated,docs,size,for,int,i,0,i,3,i,assert,equals,i,1,rated,docs,get,i,get,doc,id,assert,equals,test,rated,docs,get,i,get,index,if,i,1,assert,equals,0,rated,docs,get,i,get,rating,else,assert,equals,1,rated,docs,get,i,get,rating
RatedRequestsTests -> public void testParseFromXContent() throws IOException;1526374795;test that modifying the order of index/docId to make sure it doesn't_matter for parsing xContent;public void testParseFromXContent() throws IOException {_        String querySpecString = " {\n"_                + "   \"id\": \"my_qa_query\",\n"_                + "   \"request\": {\n"_                + "           \"query\": {\n"_                + "               \"bool\": {\n"_                + "                   \"must\": [\n"_                + "                       {\"match\": {\"beverage\": \"coffee\"}},\n"_                + "                       {\"term\": {\"browser\": {\"value\": \"safari\"}}},\n"_                + "                       {\"term\": {\"time_of_day\": "_                + "                                  {\"value\": \"morning\",\"boost\": 2}}},\n"_                + "                       {\"term\": {\"ip_location\": "_                + "                                  {\"value\": \"ams\",\"boost\": 10}}}]}\n"_                + "           },\n"_                + "           \"size\": 10\n"_                + "   },\n"_                + "   \"summary_fields\" : [\"title\"],\n"_                + "   \"ratings\": [\n"_                + "        {\"_index\": \"test\" , \"_id\": \"1\", \"rating\" : 1 },\n"_                + "        {\"_index\": \"test\", \"rating\" : 0, \"_id\": \"2\"},\n"_                + "        {\"_id\": \"3\", \"_index\": \"test\", \"rating\" : 1} ]"_                + "}\n"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, querySpecString)) {_            RatedRequest specification = RatedRequest.fromXContent(parser)__            assertEquals("my_qa_query", specification.getId())__            assertNotNull(specification.getEvaluationRequest())__            List<RatedDocument> ratedDocs = specification.getRatedDocs()__            assertEquals(3, ratedDocs.size())__            for (int i = 0_ i < 3_ i++) {_                assertEquals("" + (i + 1), ratedDocs.get(i).getDocID())__                assertEquals("test", ratedDocs.get(i).getIndex())__                if (i == 1) {_                    assertEquals(0, ratedDocs.get(i).getRating())__                } else {_                    assertEquals(1, ratedDocs.get(i).getRating())__                }_            }_        }_    };test,that,modifying,the,order,of,index,doc,id,to,make,sure,it,doesn,t,matter,for,parsing,x,content;public,void,test,parse,from,xcontent,throws,ioexception,string,query,spec,string,n,id,n,request,n,query,n,bool,n,must,n,match,beverage,coffee,n,term,browser,value,safari,n,term,value,morning,boost,2,n,term,value,ams,boost,10,n,n,size,10,n,n,title,n,ratings,n,test,1,rating,1,n,test,rating,0,2,n,3,test,rating,1,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,query,spec,string,rated,request,specification,rated,request,from,xcontent,parser,assert,equals,specification,get,id,assert,not,null,specification,get,evaluation,request,list,rated,document,rated,docs,specification,get,rated,docs,assert,equals,3,rated,docs,size,for,int,i,0,i,3,i,assert,equals,i,1,rated,docs,get,i,get,doc,id,assert,equals,test,rated,docs,get,i,get,index,if,i,1,assert,equals,0,rated,docs,get,i,get,rating,else,assert,equals,1,rated,docs,get,i,get,rating
RatedRequestsTests -> public void testParseFromXContent() throws IOException;1528211342;test that modifying the order of index/docId to make sure it doesn't_matter for parsing xContent;public void testParseFromXContent() throws IOException {_        String querySpecString = " {\n"_                + "   \"id\": \"my_qa_query\",\n"_                + "   \"request\": {\n"_                + "           \"query\": {\n"_                + "               \"bool\": {\n"_                + "                   \"must\": [\n"_                + "                       {\"match\": {\"beverage\": \"coffee\"}},\n"_                + "                       {\"term\": {\"browser\": {\"value\": \"safari\"}}},\n"_                + "                       {\"term\": {\"time_of_day\": "_                + "                                  {\"value\": \"morning\",\"boost\": 2}}},\n"_                + "                       {\"term\": {\"ip_location\": "_                + "                                  {\"value\": \"ams\",\"boost\": 10}}}]}\n"_                + "           },\n"_                + "           \"size\": 10\n"_                + "   },\n"_                + "   \"summary_fields\" : [\"title\"],\n"_                + "   \"ratings\": [\n"_                + "        {\"_index\": \"test\" , \"_id\": \"1\", \"rating\" : 1 },\n"_                + "        {\"_index\": \"test\", \"rating\" : 0, \"_id\": \"2\"},\n"_                + "        {\"_id\": \"3\", \"_index\": \"test\", \"rating\" : 1} ]"_                + "}\n"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, querySpecString)) {_            RatedRequest specification = RatedRequest.fromXContent(parser)__            assertEquals("my_qa_query", specification.getId())__            assertNotNull(specification.getEvaluationRequest())__            List<RatedDocument> ratedDocs = specification.getRatedDocs()__            assertEquals(3, ratedDocs.size())__            for (int i = 0_ i < 3_ i++) {_                assertEquals("" + (i + 1), ratedDocs.get(i).getDocID())__                assertEquals("test", ratedDocs.get(i).getIndex())__                if (i == 1) {_                    assertEquals(0, ratedDocs.get(i).getRating())__                } else {_                    assertEquals(1, ratedDocs.get(i).getRating())__                }_            }_        }_    };test,that,modifying,the,order,of,index,doc,id,to,make,sure,it,doesn,t,matter,for,parsing,x,content;public,void,test,parse,from,xcontent,throws,ioexception,string,query,spec,string,n,id,n,request,n,query,n,bool,n,must,n,match,beverage,coffee,n,term,browser,value,safari,n,term,value,morning,boost,2,n,term,value,ams,boost,10,n,n,size,10,n,n,title,n,ratings,n,test,1,rating,1,n,test,rating,0,2,n,3,test,rating,1,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,query,spec,string,rated,request,specification,rated,request,from,xcontent,parser,assert,equals,specification,get,id,assert,not,null,specification,get,evaluation,request,list,rated,document,rated,docs,specification,get,rated,docs,assert,equals,3,rated,docs,size,for,int,i,0,i,3,i,assert,equals,i,1,rated,docs,get,i,get,doc,id,assert,equals,test,rated,docs,get,i,get,index,if,i,1,assert,equals,0,rated,docs,get,i,get,rating,else,assert,equals,1,rated,docs,get,i,get,rating
RatedRequestsTests -> public void testParseFromXContent() throws IOException;1528304883;test that modifying the order of index/docId to make sure it doesn't_matter for parsing xContent;public void testParseFromXContent() throws IOException {_        String querySpecString = " {\n"_                + "   \"id\": \"my_qa_query\",\n"_                + "   \"request\": {\n"_                + "           \"query\": {\n"_                + "               \"bool\": {\n"_                + "                   \"must\": [\n"_                + "                       {\"match\": {\"beverage\": \"coffee\"}},\n"_                + "                       {\"term\": {\"browser\": {\"value\": \"safari\"}}},\n"_                + "                       {\"term\": {\"time_of_day\": "_                + "                                  {\"value\": \"morning\",\"boost\": 2}}},\n"_                + "                       {\"term\": {\"ip_location\": "_                + "                                  {\"value\": \"ams\",\"boost\": 10}}}]}\n"_                + "           },\n"_                + "           \"size\": 10\n"_                + "   },\n"_                + "   \"summary_fields\" : [\"title\"],\n"_                + "   \"ratings\": [\n"_                + "        {\"_index\": \"test\" , \"_id\": \"1\", \"rating\" : 1 },\n"_                + "        {\"_index\": \"test\", \"rating\" : 0, \"_id\": \"2\"},\n"_                + "        {\"_id\": \"3\", \"_index\": \"test\", \"rating\" : 1} ]"_                + "}\n"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, querySpecString)) {_            RatedRequest specification = RatedRequest.fromXContent(parser)__            assertEquals("my_qa_query", specification.getId())__            assertNotNull(specification.getEvaluationRequest())__            List<RatedDocument> ratedDocs = specification.getRatedDocs()__            assertEquals(3, ratedDocs.size())__            for (int i = 0_ i < 3_ i++) {_                assertEquals("" + (i + 1), ratedDocs.get(i).getDocID())__                assertEquals("test", ratedDocs.get(i).getIndex())__                if (i == 1) {_                    assertEquals(0, ratedDocs.get(i).getRating())__                } else {_                    assertEquals(1, ratedDocs.get(i).getRating())__                }_            }_        }_    };test,that,modifying,the,order,of,index,doc,id,to,make,sure,it,doesn,t,matter,for,parsing,x,content;public,void,test,parse,from,xcontent,throws,ioexception,string,query,spec,string,n,id,n,request,n,query,n,bool,n,must,n,match,beverage,coffee,n,term,browser,value,safari,n,term,value,morning,boost,2,n,term,value,ams,boost,10,n,n,size,10,n,n,title,n,ratings,n,test,1,rating,1,n,test,rating,0,2,n,3,test,rating,1,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,query,spec,string,rated,request,specification,rated,request,from,xcontent,parser,assert,equals,specification,get,id,assert,not,null,specification,get,evaluation,request,list,rated,document,rated,docs,specification,get,rated,docs,assert,equals,3,rated,docs,size,for,int,i,0,i,3,i,assert,equals,i,1,rated,docs,get,i,get,doc,id,assert,equals,test,rated,docs,get,i,get,index,if,i,1,assert,equals,0,rated,docs,get,i,get,rating,else,assert,equals,1,rated,docs,get,i,get,rating
