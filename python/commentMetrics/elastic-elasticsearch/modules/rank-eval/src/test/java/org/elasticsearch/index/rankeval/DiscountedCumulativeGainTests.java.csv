# id;timestamp;commentText;codeText;commentWords;codeWords
DiscountedCumulativeGainTests -> public void testDCGAt();1524684173;Assuming the docs are ranked in the following order:__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 | 7.0 | _2 | 2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | 0 | 0.0 | 2.321928094887362 | 0.0_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | 2 | 3.0 | 2.807354922057604 | 1.0686215613240666__dcg = 13.84826362927298 (sum of last column);public void testDCGAt() {_        List<RatedDocument> rated = new ArrayList<>()__        int[] relevanceRatings = new int[] { 3, 2, 3, 0, 1, 2 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        assertEquals(EXPECTED_DCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(EXPECTED_NDCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };assuming,the,docs,are,ranked,in,the,following,order,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,0,0,0,2,321928094887362,0,0,5,1,1,0,2,584962500721156,0,38685280723454163,6,2,3,0,2,807354922057604,1,0686215613240666,dcg,13,84826362927298,sum,of,last,column;public,void,test,dcgat,list,rated,document,rated,new,array,list,int,relevance,ratings,new,int,3,2,3,0,1,2,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAt();1528167589;Assuming the docs are ranked in the following order:__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 | 7.0 | _2 | 2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | 0 | 0.0 | 2.321928094887362 | 0.0_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | 2 | 3.0 | 2.807354922057604 | 1.0686215613240666__dcg = 13.84826362927298 (sum of last column);public void testDCGAt() {_        List<RatedDocument> rated = new ArrayList<>()__        int[] relevanceRatings = new int[] { 3, 2, 3, 0, 1, 2 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        assertEquals(EXPECTED_DCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(EXPECTED_NDCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };assuming,the,docs,are,ranked,in,the,following,order,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,0,0,0,2,321928094887362,0,0,5,1,1,0,2,584962500721156,0,38685280723454163,6,2,3,0,2,807354922057604,1,0686215613240666,dcg,13,84826362927298,sum,of,last,column;public,void,test,dcgat,list,rated,document,rated,new,array,list,int,relevance,ratings,new,int,3,2,3,0,1,2,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAt();1529076503;Assuming the docs are ranked in the following order:__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 | 7.0 | _2 | 2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | 0 | 0.0 | 2.321928094887362 | 0.0_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | 2 | 3.0 | 2.807354922057604 | 1.0686215613240666__dcg = 13.84826362927298 (sum of last column);public void testDCGAt() {_        List<RatedDocument> rated = new ArrayList<>()__        int[] relevanceRatings = new int[] { 3, 2, 3, 0, 1, 2 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        assertEquals(EXPECTED_DCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(EXPECTED_NDCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };assuming,the,docs,are,ranked,in,the,following,order,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,0,0,0,2,321928094887362,0,0,5,1,1,0,2,584962500721156,0,38685280723454163,6,2,3,0,2,807354922057604,1,0686215613240666,dcg,13,84826362927298,sum,of,last,column;public,void,test,dcgat,list,rated,document,rated,new,array,list,int,relevance,ratings,new,int,3,2,3,0,1,2,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAt();1531729807;Assuming the docs are ranked in the following order:__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 | 7.0 | _2 | 2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | 0 | 0.0 | 2.321928094887362 | 0.0_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | 2 | 3.0 | 2.807354922057604 | 1.0686215613240666__dcg = 13.84826362927298 (sum of last column);public void testDCGAt() {_        List<RatedDocument> rated = new ArrayList<>()__        int[] relevanceRatings = new int[] { 3, 2, 3, 0, 1, 2 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        assertEquals(EXPECTED_DCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(EXPECTED_NDCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };assuming,the,docs,are,ranked,in,the,following,order,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,0,0,0,2,321928094887362,0,0,5,1,1,0,2,584962500721156,0,38685280723454163,6,2,3,0,2,807354922057604,1,0686215613240666,dcg,13,84826362927298,sum,of,last,column;public,void,test,dcgat,list,rated,document,rated,new,array,list,int,relevance,ratings,new,int,3,2,3,0,1,2,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAt();1532353780;Assuming the docs are ranked in the following order:__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 | 7.0 | _2 | 2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | 0 | 0.0 | 2.321928094887362 | 0.0_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | 2 | 3.0 | 2.807354922057604 | 1.0686215613240666__dcg = 13.84826362927298 (sum of last column);public void testDCGAt() {_        List<RatedDocument> rated = new ArrayList<>()__        int[] relevanceRatings = new int[] { 3, 2, 3, 0, 1, 2 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        assertEquals(EXPECTED_DCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(EXPECTED_NDCG, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };assuming,the,docs,are,ranked,in,the,following,order,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,0,0,0,2,321928094887362,0,0,5,1,1,0,2,584962500721156,0,38685280723454163,6,2,3,0,2,807354922057604,1,0686215613240666,dcg,13,84826362927298,sum,of,last,column;public,void,test,dcgat,list,rated,document,rated,new,array,list,int,relevance,ratings,new,int,3,2,3,0,1,2,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAt();1532434432;Assuming the docs are ranked in the following order:__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 | 7.0 | _2 | 2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | 0 | 0.0 | 2.321928094887362 | 0.0_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | 2 | 3.0 | 2.807354922057604 | 1.0686215613240666__dcg = 13.84826362927298 (sum of last column);public void testDCGAt() {_        List<RatedDocument> rated = new ArrayList<>()__        int[] relevanceRatings = new int[] { 3, 2, 3, 0, 1, 2 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        assertEquals(EXPECTED_DCG, dcg.evaluate("id", hits, rated).metricScore(), DELTA)___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(EXPECTED_NDCG, dcg.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,docs,are,ranked,in,the,following,order,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,0,0,0,2,321928094887362,0,0,5,1,1,0,2,584962500721156,0,38685280723454163,6,2,3,0,2,807354922057604,1,0686215613240666,dcg,13,84826362927298,sum,of,last,column;public,void,test,dcgat,list,rated,document,rated,new,array,list,int,relevance,ratings,new,int,3,2,3,0,1,2,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,assert,equals,dcg,evaluate,id,hits,rated,metric,score,delta,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,dcg,evaluate,id,hits,rated,metric,score,delta
DiscountedCumulativeGainTests -> public void testDCGAt();1548770291;Assuming the docs are ranked in the following order:__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 | 7.0 | _2 | 2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | 0 | 0.0 | 2.321928094887362 | 0.0_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | 2 | 3.0 | 2.807354922057604 | 1.0686215613240666__dcg = 13.84826362927298 (sum of last column);public void testDCGAt() {_        List<RatedDocument> rated = new ArrayList<>()__        int[] relevanceRatings = new int[] { 3, 2, 3, 0, 1, 2 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new ShardId("index", "uuid", 0), null, OriginalIndices.NONE))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        assertEquals(EXPECTED_DCG, dcg.evaluate("id", hits, rated).metricScore(), DELTA)___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(EXPECTED_NDCG, dcg.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,docs,are,ranked,in,the,following,order,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,0,0,0,2,321928094887362,0,0,5,1,1,0,2,584962500721156,0,38685280723454163,6,2,3,0,2,807354922057604,1,0686215613240666,dcg,13,84826362927298,sum,of,last,column;public,void,test,dcgat,list,rated,document,rated,new,array,list,int,relevance,ratings,new,int,3,2,3,0,1,2,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,shard,id,index,uuid,0,null,original,indices,none,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,assert,equals,dcg,evaluate,id,hits,rated,metric,score,delta,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,dcg,evaluate,id,hits,rated,metric,score,delta
DiscountedCumulativeGainTests -> public void testDCGAt();1549860314;Assuming the docs are ranked in the following order:__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 | 7.0 | _2 | 2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | 0 | 0.0 | 2.321928094887362 | 0.0_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | 2 | 3.0 | 2.807354922057604 | 1.0686215613240666__dcg = 13.84826362927298 (sum of last column);public void testDCGAt() {_        List<RatedDocument> rated = new ArrayList<>()__        int[] relevanceRatings = new int[] { 3, 2, 3, 0, 1, 2 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__            hits[i] = new SearchHit(i, Integer.toString(i), new Text(MapperService.SINGLE_MAPPING_NAME), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new ShardId("index", "uuid", 0), null, OriginalIndices.NONE))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        assertEquals(EXPECTED_DCG, dcg.evaluate("id", hits, rated).metricScore(), DELTA)___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(EXPECTED_NDCG, dcg.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,docs,are,ranked,in,the,following,order,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,0,0,0,2,321928094887362,0,0,5,1,1,0,2,584962500721156,0,38685280723454163,6,2,3,0,2,807354922057604,1,0686215613240666,dcg,13,84826362927298,sum,of,last,column;public,void,test,dcgat,list,rated,document,rated,new,array,list,int,relevance,ratings,new,int,3,2,3,0,1,2,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,mapper,service,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,shard,id,index,uuid,0,null,original,indices,none,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,assert,equals,dcg,evaluate,id,hits,rated,metric,score,delta,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,dcg,evaluate,id,hits,rated,metric,score,delta
DiscountedCumulativeGainTests -> public void testDCGAtFourMoreRatings();1524684173;This tests that normalization works as expected when there are more rated_documents than search hits because we restrict DCG to be calculated at the_fourth position__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_-----------------------------------------------------------------_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.392789260714371 (sum of last column until position 4);public void testDCGAtFourMoreRatings() {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        _        SearchHit[] hits = new SearchHit[4]__        for (int i = 0_ i < 4_ i++) {_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(12.392789260714371, result.getQualityLevel(), DELTA)__        assertEquals(1, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.392789260714371 / 13.347184833073591, dcg.evaluate("id", hits, ratedDocs).getQualityLevel(), DELTA)__    };this,tests,that,normalization,works,as,expected,when,there,are,more,rated,documents,than,search,hits,because,we,restrict,dcg,to,be,calculated,at,the,fourth,position,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,392789260714371,sum,of,last,column,until,position,4;public,void,test,dcgat,four,more,ratings,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,4,for,int,i,0,i,4,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,12,392789260714371,result,get,quality,level,delta,assert,equals,1,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,392789260714371,13,347184833073591,dcg,evaluate,id,hits,rated,docs,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtFourMoreRatings();1528167589;This tests that normalization works as expected when there are more rated_documents than search hits because we restrict DCG to be calculated at the_fourth position__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_-----------------------------------------------------------------_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.392789260714371 (sum of last column until position 4);public void testDCGAtFourMoreRatings() {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        _        SearchHit[] hits = new SearchHit[4]__        for (int i = 0_ i < 4_ i++) {_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(12.392789260714371, result.getQualityLevel(), DELTA)__        assertEquals(1, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.392789260714371 / 13.347184833073591, dcg.evaluate("id", hits, ratedDocs).getQualityLevel(), DELTA)__    };this,tests,that,normalization,works,as,expected,when,there,are,more,rated,documents,than,search,hits,because,we,restrict,dcg,to,be,calculated,at,the,fourth,position,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,392789260714371,sum,of,last,column,until,position,4;public,void,test,dcgat,four,more,ratings,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,4,for,int,i,0,i,4,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,12,392789260714371,result,get,quality,level,delta,assert,equals,1,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,392789260714371,13,347184833073591,dcg,evaluate,id,hits,rated,docs,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtFourMoreRatings();1529076503;This tests that normalization works as expected when there are more rated_documents than search hits because we restrict DCG to be calculated at the_fourth position__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_-----------------------------------------------------------------_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.392789260714371 (sum of last column until position 4);public void testDCGAtFourMoreRatings() {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        _        SearchHit[] hits = new SearchHit[4]__        for (int i = 0_ i < 4_ i++) {_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(12.392789260714371, result.getQualityLevel(), DELTA)__        assertEquals(1, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.392789260714371 / 13.347184833073591, dcg.evaluate("id", hits, ratedDocs).getQualityLevel(), DELTA)__    };this,tests,that,normalization,works,as,expected,when,there,are,more,rated,documents,than,search,hits,because,we,restrict,dcg,to,be,calculated,at,the,fourth,position,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,392789260714371,sum,of,last,column,until,position,4;public,void,test,dcgat,four,more,ratings,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,4,for,int,i,0,i,4,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,12,392789260714371,result,get,quality,level,delta,assert,equals,1,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,392789260714371,13,347184833073591,dcg,evaluate,id,hits,rated,docs,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtFourMoreRatings();1531729807;This tests that normalization works as expected when there are more rated_documents than search hits because we restrict DCG to be calculated at the_fourth position__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_-----------------------------------------------------------------_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.392789260714371 (sum of last column until position 4);public void testDCGAtFourMoreRatings() {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        _        SearchHit[] hits = new SearchHit[4]__        for (int i = 0_ i < 4_ i++) {_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(12.392789260714371, result.getQualityLevel(), DELTA)__        assertEquals(1, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.392789260714371 / 13.347184833073591, dcg.evaluate("id", hits, ratedDocs).getQualityLevel(), DELTA)__    };this,tests,that,normalization,works,as,expected,when,there,are,more,rated,documents,than,search,hits,because,we,restrict,dcg,to,be,calculated,at,the,fourth,position,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,392789260714371,sum,of,last,column,until,position,4;public,void,test,dcgat,four,more,ratings,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,4,for,int,i,0,i,4,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,12,392789260714371,result,get,quality,level,delta,assert,equals,1,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,392789260714371,13,347184833073591,dcg,evaluate,id,hits,rated,docs,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtFourMoreRatings();1532353780;This tests that normalization works as expected when there are more rated_documents than search hits because we restrict DCG to be calculated at the_fourth position__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_-----------------------------------------------------------------_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.392789260714371 (sum of last column until position 4);public void testDCGAtFourMoreRatings() {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        _        SearchHit[] hits = new SearchHit[4]__        for (int i = 0_ i < 4_ i++) {_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(12.392789260714371, result.getQualityLevel(), DELTA)__        assertEquals(1, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.392789260714371 / 13.347184833073591, dcg.evaluate("id", hits, ratedDocs).getQualityLevel(), DELTA)__    };this,tests,that,normalization,works,as,expected,when,there,are,more,rated,documents,than,search,hits,because,we,restrict,dcg,to,be,calculated,at,the,fourth,position,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,392789260714371,sum,of,last,column,until,position,4;public,void,test,dcgat,four,more,ratings,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,4,for,int,i,0,i,4,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,12,392789260714371,result,get,quality,level,delta,assert,equals,1,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,392789260714371,13,347184833073591,dcg,evaluate,id,hits,rated,docs,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtFourMoreRatings();1532434432;This tests that normalization works as expected when there are more rated_documents than search hits because we restrict DCG to be calculated at the_fourth position__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_-----------------------------------------------------------------_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.392789260714371 (sum of last column until position 4);public void testDCGAtFourMoreRatings() {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        _        SearchHit[] hits = new SearchHit[4]__        for (int i = 0_ i < 4_ i++) {_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(12.392789260714371, result.metricScore(), DELTA)__        assertEquals(1, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.392789260714371 / 13.347184833073591, dcg.evaluate("id", hits, ratedDocs).metricScore(), DELTA)__    };this,tests,that,normalization,works,as,expected,when,there,are,more,rated,documents,than,search,hits,because,we,restrict,dcg,to,be,calculated,at,the,fourth,position,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,392789260714371,sum,of,last,column,until,position,4;public,void,test,dcgat,four,more,ratings,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,4,for,int,i,0,i,4,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,12,392789260714371,result,metric,score,delta,assert,equals,1,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,392789260714371,13,347184833073591,dcg,evaluate,id,hits,rated,docs,metric,score,delta
DiscountedCumulativeGainTests -> public void testDCGAtFourMoreRatings();1548770291;This tests that normalization works as expected when there are more rated_documents than search hits because we restrict DCG to be calculated at the_fourth position__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_-----------------------------------------------------------------_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.392789260714371 (sum of last column until position 4);public void testDCGAtFourMoreRatings() {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        _        SearchHit[] hits = new SearchHit[4]__        for (int i = 0_ i < 4_ i++) {_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new ShardId("index", "uuid", 0), null, OriginalIndices.NONE))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(12.392789260714371, result.metricScore(), DELTA)__        assertEquals(1, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.392789260714371 / 13.347184833073591, dcg.evaluate("id", hits, ratedDocs).metricScore(), DELTA)__    };this,tests,that,normalization,works,as,expected,when,there,are,more,rated,documents,than,search,hits,because,we,restrict,dcg,to,be,calculated,at,the,fourth,position,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,392789260714371,sum,of,last,column,until,position,4;public,void,test,dcgat,four,more,ratings,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,4,for,int,i,0,i,4,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,shard,id,index,uuid,0,null,original,indices,none,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,12,392789260714371,result,metric,score,delta,assert,equals,1,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,392789260714371,13,347184833073591,dcg,evaluate,id,hits,rated,docs,metric,score,delta
DiscountedCumulativeGainTests -> public void testDCGAtFourMoreRatings();1549860314;This tests that normalization works as expected when there are more rated_documents than search hits because we restrict DCG to be calculated at the_fourth position__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_-----------------------------------------------------------------_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.392789260714371 (sum of last column until position 4);public void testDCGAtFourMoreRatings() {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        _        SearchHit[] hits = new SearchHit[4]__        for (int i = 0_ i < 4_ i++) {_            hits[i] = new SearchHit(i, Integer.toString(i), new Text(MapperService.SINGLE_MAPPING_NAME), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new ShardId("index", "uuid", 0), null, OriginalIndices.NONE))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(12.392789260714371, result.metricScore(), DELTA)__        assertEquals(1, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.392789260714371 / 13.347184833073591, dcg.evaluate("id", hits, ratedDocs).metricScore(), DELTA)__    };this,tests,that,normalization,works,as,expected,when,there,are,more,rated,documents,than,search,hits,because,we,restrict,dcg,to,be,calculated,at,the,fourth,position,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,392789260714371,sum,of,last,column,until,position,4;public,void,test,dcgat,four,more,ratings,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,4,for,int,i,0,i,4,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,mapper,service,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,shard,id,index,uuid,0,null,original,indices,none,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,12,392789260714371,result,metric,score,delta,assert,equals,1,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,392789260714371,13,347184833073591,dcg,evaluate,id,hits,rated,docs,metric,score,delta
DiscountedCumulativeGainTests -> public void testDCGAtSixMissingRatings();1524684173;This tests metric when some documents in the search result don't have a_rating provided by the user.__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.779642067948913 (sum of last column);public void testDCGAtSixMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, rated)__        assertEquals(12.779642067948913, result.getQualityLevel(), DELTA)__        assertEquals(2, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.779642067948913 / 13.347184833073591, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };this,tests,metric,when,some,documents,in,the,search,result,don,t,have,a,rating,provided,by,the,user,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,779642067948913,sum,of,last,column;public,void,test,dcgat,six,missing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,3,null,1,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,assert,equals,12,779642067948913,result,get,quality,level,delta,assert,equals,2,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,779642067948913,13,347184833073591,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtSixMissingRatings();1528167589;This tests metric when some documents in the search result don't have a_rating provided by the user.__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.779642067948913 (sum of last column);public void testDCGAtSixMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, rated)__        assertEquals(12.779642067948913, result.getQualityLevel(), DELTA)__        assertEquals(2, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.779642067948913 / 13.347184833073591, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };this,tests,metric,when,some,documents,in,the,search,result,don,t,have,a,rating,provided,by,the,user,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,779642067948913,sum,of,last,column;public,void,test,dcgat,six,missing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,3,null,1,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,assert,equals,12,779642067948913,result,get,quality,level,delta,assert,equals,2,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,779642067948913,13,347184833073591,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtSixMissingRatings();1529076503;This tests metric when some documents in the search result don't have a_rating provided by the user.__rank | rel_rank | 2^(rel_rank) - 1 | log_2(rank + 1) | (2^(rel_rank) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.779642067948913 (sum of last column);public void testDCGAtSixMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, rated)__        assertEquals(12.779642067948913, result.getQualityLevel(), DELTA)__        assertEquals(2, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.779642067948913 / 13.347184833073591, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };this,tests,metric,when,some,documents,in,the,search,result,don,t,have,a,rating,provided,by,the,user,rank,2,1,rank,1,2,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,779642067948913,sum,of,last,column;public,void,test,dcgat,six,missing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,3,null,1,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,assert,equals,12,779642067948913,result,get,quality,level,delta,assert,equals,2,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,779642067948913,13,347184833073591,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtSixMissingRatings();1531729807;This tests metric when some documents in the search result don't have a_rating provided by the user.__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.779642067948913 (sum of last column);public void testDCGAtSixMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, rated)__        assertEquals(12.779642067948913, result.getQualityLevel(), DELTA)__        assertEquals(2, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.779642067948913 / 13.347184833073591, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };this,tests,metric,when,some,documents,in,the,search,result,don,t,have,a,rating,provided,by,the,user,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,779642067948913,sum,of,last,column;public,void,test,dcgat,six,missing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,3,null,1,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,assert,equals,12,779642067948913,result,get,quality,level,delta,assert,equals,2,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,779642067948913,13,347184833073591,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtSixMissingRatings();1532353780;This tests metric when some documents in the search result don't have a_rating provided by the user.__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.779642067948913 (sum of last column);public void testDCGAtSixMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, rated)__        assertEquals(12.779642067948913, result.getQualityLevel(), DELTA)__        assertEquals(2, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.779642067948913 / 13.347184833073591, dcg.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };this,tests,metric,when,some,documents,in,the,search,result,don,t,have,a,rating,provided,by,the,user,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,779642067948913,sum,of,last,column;public,void,test,dcgat,six,missing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,3,null,1,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,assert,equals,12,779642067948913,result,get,quality,level,delta,assert,equals,2,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,779642067948913,13,347184833073591,dcg,evaluate,id,hits,rated,get,quality,level,delta
DiscountedCumulativeGainTests -> public void testDCGAtSixMissingRatings();1532434432;This tests metric when some documents in the search result don't have a_rating provided by the user.__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.779642067948913 (sum of last column);public void testDCGAtSixMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new Index("index", "uuid"), 0, null))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, rated)__        assertEquals(12.779642067948913, result.metricScore(), DELTA)__        assertEquals(2, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.779642067948913 / 13.347184833073591, dcg.evaluate("id", hits, rated).metricScore(), DELTA)__    };this,tests,metric,when,some,documents,in,the,search,result,don,t,have,a,rating,provided,by,the,user,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,779642067948913,sum,of,last,column;public,void,test,dcgat,six,missing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,3,null,1,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,index,index,uuid,0,null,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,assert,equals,12,779642067948913,result,metric,score,delta,assert,equals,2,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,779642067948913,13,347184833073591,dcg,evaluate,id,hits,rated,metric,score,delta
DiscountedCumulativeGainTests -> public void testDCGAtSixMissingRatings();1548770291;This tests metric when some documents in the search result don't have a_rating provided by the user.__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.779642067948913 (sum of last column);public void testDCGAtSixMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_            hits[i] = new SearchHit(i, Integer.toString(i), new Text("type"), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new ShardId("index", "uuid", 0), null, OriginalIndices.NONE))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, rated)__        assertEquals(12.779642067948913, result.metricScore(), DELTA)__        assertEquals(2, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.779642067948913 / 13.347184833073591, dcg.evaluate("id", hits, rated).metricScore(), DELTA)__    };this,tests,metric,when,some,documents,in,the,search,result,don,t,have,a,rating,provided,by,the,user,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,779642067948913,sum,of,last,column;public,void,test,dcgat,six,missing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,3,null,1,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,type,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,shard,id,index,uuid,0,null,original,indices,none,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,assert,equals,12,779642067948913,result,metric,score,delta,assert,equals,2,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,779642067948913,13,347184833073591,dcg,evaluate,id,hits,rated,metric,score,delta
DiscountedCumulativeGainTests -> public void testDCGAtSixMissingRatings();1549860314;This tests metric when some documents in the search result don't have a_rating provided by the user.__rank | relevance | 2^(relevance) - 1 | log_2(rank + 1) | (2^(relevance) - 1) / log_2(rank + 1)_-------------------------------------------------------------------------------------------_1 | 3 | 7.0 | 1.0 | 7.0 2 | _2 | 3.0 | 1.5849625007211563 | 1.8927892607143721_3 | 3 | 7.0 | 2.0 | 3.5_4 | n/a | n/a | n/a | n/a_5 | 1 | 1.0 | 2.584962500721156 | 0.38685280723454163_6 | n/a | n/a | n/a | n/a__dcg = 12.779642067948913 (sum of last column);public void testDCGAtSixMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1 }__        SearchHit[] hits = new SearchHit[6]__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    rated.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_            hits[i] = new SearchHit(i, Integer.toString(i), new Text(MapperService.SINGLE_MAPPING_NAME), Collections.emptyMap())__            hits[i].shard(new SearchShardTarget("testnode", new ShardId("index", "uuid", 0), null, OriginalIndices.NONE))__        }_        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, rated)__        assertEquals(12.779642067948913, result.metricScore(), DELTA)__        assertEquals(2, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        assertEquals(12.779642067948913 / 13.347184833073591, dcg.evaluate("id", hits, rated).metricScore(), DELTA)__    };this,tests,metric,when,some,documents,in,the,search,result,don,t,have,a,rating,provided,by,the,user,rank,relevance,2,relevance,1,rank,1,2,relevance,1,rank,1,1,3,7,0,1,0,7,0,2,2,3,0,1,5849625007211563,1,8927892607143721,3,3,7,0,2,0,3,5,4,n,a,n,a,n,a,n,a,5,1,1,0,2,584962500721156,0,38685280723454163,6,n,a,n,a,n,a,n,a,dcg,12,779642067948913,sum,of,last,column;public,void,test,dcgat,six,missing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,3,null,1,search,hit,hits,new,search,hit,6,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,hits,i,new,search,hit,i,integer,to,string,i,new,text,mapper,service,collections,empty,map,hits,i,shard,new,search,shard,target,testnode,new,shard,id,index,uuid,0,null,original,indices,none,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,assert,equals,12,779642067948913,result,metric,score,delta,assert,equals,2,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,assert,equals,12,779642067948913,13,347184833073591,dcg,evaluate,id,hits,rated,metric,score,delta
DiscountedCumulativeGainTests -> public void testNoResults() throws Exception;1524684173;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        SearchHit[] hits = new SearchHit[0]__        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnknownDocuments(result.getHitsAndRatings()).size())__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,0,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unknown,documents,result,get,hits,and,ratings,size
DiscountedCumulativeGainTests -> public void testNoResults() throws Exception;1528167589;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        SearchHit[] hits = new SearchHit[0]__        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnknownDocuments(result.getHitsAndRatings()).size())__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,0,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unknown,documents,result,get,hits,and,ratings,size
DiscountedCumulativeGainTests -> public void testNoResults() throws Exception;1529076503;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        SearchHit[] hits = new SearchHit[0]__        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnknownDocuments(result.getHitsAndRatings()).size())__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,0,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unknown,documents,result,get,hits,and,ratings,size
DiscountedCumulativeGainTests -> public void testNoResults() throws Exception;1531729807;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        SearchHit[] hits = new SearchHit[0]__        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnknownDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnknownDocuments(result.getHitsAndRatings()).size())__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,0,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unknown,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unknown,documents,result,get,hits,and,ratings,size
DiscountedCumulativeGainTests -> public void testNoResults() throws Exception;1532353780;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        SearchHit[] hits = new SearchHit[0]__        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.getQualityLevel(), DELTA)__        assertEquals(0, filterUnratedDocuments(result.getHitsAndRatings()).size())__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,0,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,get,quality,level,delta,assert,equals,0,filter,unrated,documents,result,get,hits,and,ratings,size
DiscountedCumulativeGainTests -> public void testNoResults() throws Exception;1532434432;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        SearchHit[] hits = new SearchHit[0]__        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.metricScore(), DELTA)__        assertEquals(0, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.metricScore(), DELTA)__        assertEquals(0, filterUnratedDocuments(result.getHitsAndRatings()).size())__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,0,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,metric,score,delta,assert,equals,0,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,metric,score,delta,assert,equals,0,filter,unrated,documents,result,get,hits,and,ratings,size
DiscountedCumulativeGainTests -> public void testNoResults() throws Exception;1548770291;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        SearchHit[] hits = new SearchHit[0]__        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.metricScore(), DELTA)__        assertEquals(0, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.metricScore(), DELTA)__        assertEquals(0, filterUnratedDocuments(result.getHitsAndRatings()).size())__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,0,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,metric,score,delta,assert,equals,0,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,metric,score,delta,assert,equals,0,filter,unrated,documents,result,get,hits,and,ratings,size
DiscountedCumulativeGainTests -> public void testNoResults() throws Exception;1549860314;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null }__        List<RatedDocument> ratedDocs = new ArrayList<>()__        for (int i = 0_ i < 6_ i++) {_            if (i < relevanceRatings.length) {_                if (relevanceRatings[i] != null) {_                    ratedDocs.add(new RatedDocument("index", Integer.toString(i), relevanceRatings[i]))__                }_            }_        }_        SearchHit[] hits = new SearchHit[0]__        DiscountedCumulativeGain dcg = new DiscountedCumulativeGain()__        EvalQueryQuality result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.metricScore(), DELTA)__        assertEquals(0, filterUnratedDocuments(result.getHitsAndRatings()).size())___        _        dcg = new DiscountedCumulativeGain(true, null, 10)__        result = dcg.evaluate("id", hits, ratedDocs)__        assertEquals(0.0d, result.metricScore(), DELTA)__        assertEquals(0, filterUnratedDocuments(result.getHitsAndRatings()).size())__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,integer,relevance,ratings,new,integer,3,2,3,null,1,null,list,rated,document,rated,docs,new,array,list,for,int,i,0,i,6,i,if,i,relevance,ratings,length,if,relevance,ratings,i,null,rated,docs,add,new,rated,document,index,integer,to,string,i,relevance,ratings,i,search,hit,hits,new,search,hit,0,discounted,cumulative,gain,dcg,new,discounted,cumulative,gain,eval,query,quality,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,metric,score,delta,assert,equals,0,filter,unrated,documents,result,get,hits,and,ratings,size,dcg,new,discounted,cumulative,gain,true,null,10,result,dcg,evaluate,id,hits,rated,docs,assert,equals,0,0d,result,metric,score,delta,assert,equals,0,filter,unrated,documents,result,get,hits,and,ratings,size
