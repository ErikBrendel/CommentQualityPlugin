# id;timestamp;commentText;codeText;commentWords;codeWords
ExpectedReciprocalRankTests -> public void testERRAt();1531729807;Assuming the result ranking is__<pre>{@code_rank | relevance | probR / r | p        | p * probR / r_-------------------------------------------------------_1    | 3         | 0.875     | 1        | 0.875       |_2    | 2         | 0.1875    | 0.125    | 0.0234375   |_3    | 0         | 0         | 0.078125 | 0           |_4    | 1         | 0.03125   | 0.078125 | 0.00244140625 |_}</pre>__err = sum of last column;public void testERRAt() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 0, 1}__        SearchHit[] hits = createSearchHits(rated, relevanceRatings)__        ExpectedReciprocalRank err = new ExpectedReciprocalRank(3, 0, 3)__        assertEquals(0.8984375, err.evaluate("id", hits, rated).getQualityLevel(), DELTA)__        _        err = new ExpectedReciprocalRank(3, 0, 4)__        assertEquals(0.8984375 + 0.00244140625, err.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };assuming,the,result,ranking,is,pre,code,rank,relevance,prob,r,r,p,p,prob,r,r,1,3,0,875,1,0,875,2,2,0,1875,0,125,0,0234375,3,0,0,0,078125,0,4,1,0,03125,0,078125,0,00244140625,pre,err,sum,of,last,column;public,void,test,errat,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,0,1,search,hit,hits,create,search,hits,rated,relevance,ratings,expected,reciprocal,rank,err,new,expected,reciprocal,rank,3,0,3,assert,equals,0,8984375,err,evaluate,id,hits,rated,get,quality,level,delta,err,new,expected,reciprocal,rank,3,0,4,assert,equals,0,8984375,0,00244140625,err,evaluate,id,hits,rated,get,quality,level,delta
ExpectedReciprocalRankTests -> public void testERRAt();1532434432;Assuming the result ranking is__<pre>{@code_rank | relevance | probR / r | p        | p * probR / r_-------------------------------------------------------_1    | 3         | 0.875     | 1        | 0.875       |_2    | 2         | 0.1875    | 0.125    | 0.0234375   |_3    | 0         | 0         | 0.078125 | 0           |_4    | 1         | 0.03125   | 0.078125 | 0.00244140625 |_}</pre>__err = sum of last column;public void testERRAt() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 0, 1}__        SearchHit[] hits = createSearchHits(rated, relevanceRatings)__        ExpectedReciprocalRank err = new ExpectedReciprocalRank(3, 0, 3)__        assertEquals(0.8984375, err.evaluate("id", hits, rated).metricScore(), DELTA)__        _        err = new ExpectedReciprocalRank(3, 0, 4)__        assertEquals(0.8984375 + 0.00244140625, err.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,result,ranking,is,pre,code,rank,relevance,prob,r,r,p,p,prob,r,r,1,3,0,875,1,0,875,2,2,0,1875,0,125,0,0234375,3,0,0,0,078125,0,4,1,0,03125,0,078125,0,00244140625,pre,err,sum,of,last,column;public,void,test,errat,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,0,1,search,hit,hits,create,search,hits,rated,relevance,ratings,expected,reciprocal,rank,err,new,expected,reciprocal,rank,3,0,3,assert,equals,0,8984375,err,evaluate,id,hits,rated,metric,score,delta,err,new,expected,reciprocal,rank,3,0,4,assert,equals,0,8984375,0,00244140625,err,evaluate,id,hits,rated,metric,score,delta
ExpectedReciprocalRankTests -> public void testERRAt();1548770291;Assuming the result ranking is__<pre>{@code_rank | relevance | probR / r | p        | p * probR / r_-------------------------------------------------------_1    | 3         | 0.875     | 1        | 0.875       |_2    | 2         | 0.1875    | 0.125    | 0.0234375   |_3    | 0         | 0         | 0.078125 | 0           |_4    | 1         | 0.03125   | 0.078125 | 0.00244140625 |_}</pre>__err = sum of last column;public void testERRAt() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 0, 1}__        SearchHit[] hits = createSearchHits(rated, relevanceRatings)__        ExpectedReciprocalRank err = new ExpectedReciprocalRank(3, 0, 3)__        assertEquals(0.8984375, err.evaluate("id", hits, rated).metricScore(), DELTA)__        _        err = new ExpectedReciprocalRank(3, 0, 4)__        assertEquals(0.8984375 + 0.00244140625, err.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,result,ranking,is,pre,code,rank,relevance,prob,r,r,p,p,prob,r,r,1,3,0,875,1,0,875,2,2,0,1875,0,125,0,0234375,3,0,0,0,078125,0,4,1,0,03125,0,078125,0,00244140625,pre,err,sum,of,last,column;public,void,test,errat,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,0,1,search,hit,hits,create,search,hits,rated,relevance,ratings,expected,reciprocal,rank,err,new,expected,reciprocal,rank,3,0,3,assert,equals,0,8984375,err,evaluate,id,hits,rated,metric,score,delta,err,new,expected,reciprocal,rank,3,0,4,assert,equals,0,8984375,0,00244140625,err,evaluate,id,hits,rated,metric,score,delta
ExpectedReciprocalRankTests -> public void testERRAt();1549860314;Assuming the result ranking is__<pre>{@code_rank | relevance | probR / r | p        | p * probR / r_-------------------------------------------------------_1    | 3         | 0.875     | 1        | 0.875       |_2    | 2         | 0.1875    | 0.125    | 0.0234375   |_3    | 0         | 0         | 0.078125 | 0           |_4    | 1         | 0.03125   | 0.078125 | 0.00244140625 |_}</pre>__err = sum of last column;public void testERRAt() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, 2, 0, 1}__        SearchHit[] hits = createSearchHits(rated, relevanceRatings)__        ExpectedReciprocalRank err = new ExpectedReciprocalRank(3, 0, 3)__        assertEquals(0.8984375, err.evaluate("id", hits, rated).metricScore(), DELTA)__        _        err = new ExpectedReciprocalRank(3, 0, 4)__        assertEquals(0.8984375 + 0.00244140625, err.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,result,ranking,is,pre,code,rank,relevance,prob,r,r,p,p,prob,r,r,1,3,0,875,1,0,875,2,2,0,1875,0,125,0,0234375,3,0,0,0,078125,0,4,1,0,03125,0,078125,0,00244140625,pre,err,sum,of,last,column;public,void,test,errat,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,2,0,1,search,hit,hits,create,search,hits,rated,relevance,ratings,expected,reciprocal,rank,err,new,expected,reciprocal,rank,3,0,3,assert,equals,0,8984375,err,evaluate,id,hits,rated,metric,score,delta,err,new,expected,reciprocal,rank,3,0,4,assert,equals,0,8984375,0,00244140625,err,evaluate,id,hits,rated,metric,score,delta
ExpectedReciprocalRankTests -> public void testNoResults() throws Exception;1531729807;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        ExpectedReciprocalRank err = new ExpectedReciprocalRank(5, 0, 10)__        assertEquals(0.0, err.evaluate("id", new SearchHit[0], Collections.emptyList()).getQualityLevel(), DELTA)__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,expected,reciprocal,rank,err,new,expected,reciprocal,rank,5,0,10,assert,equals,0,0,err,evaluate,id,new,search,hit,0,collections,empty,list,get,quality,level,delta
ExpectedReciprocalRankTests -> public void testNoResults() throws Exception;1532434432;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        ExpectedReciprocalRank err = new ExpectedReciprocalRank(5, 0, 10)__        assertEquals(0.0, err.evaluate("id", new SearchHit[0], Collections.emptyList()).metricScore(), DELTA)__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,expected,reciprocal,rank,err,new,expected,reciprocal,rank,5,0,10,assert,equals,0,0,err,evaluate,id,new,search,hit,0,collections,empty,list,metric,score,delta
ExpectedReciprocalRankTests -> public void testNoResults() throws Exception;1548770291;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        ExpectedReciprocalRank err = new ExpectedReciprocalRank(5, 0, 10)__        assertEquals(0.0, err.evaluate("id", new SearchHit[0], Collections.emptyList()).metricScore(), DELTA)__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,expected,reciprocal,rank,err,new,expected,reciprocal,rank,5,0,10,assert,equals,0,0,err,evaluate,id,new,search,hit,0,collections,empty,list,metric,score,delta
ExpectedReciprocalRankTests -> public void testNoResults() throws Exception;1549860314;test that metric returns 0.0 when there are no search results;public void testNoResults() throws Exception {_        ExpectedReciprocalRank err = new ExpectedReciprocalRank(5, 0, 10)__        assertEquals(0.0, err.evaluate("id", new SearchHit[0], Collections.emptyList()).metricScore(), DELTA)__    };test,that,metric,returns,0,0,when,there,are,no,search,results;public,void,test,no,results,throws,exception,expected,reciprocal,rank,err,new,expected,reciprocal,rank,5,0,10,assert,equals,0,0,err,evaluate,id,new,search,hit,0,collections,empty,list,metric,score,delta
ExpectedReciprocalRankTests -> public void testERRMissingRatings();1531729807;Assuming the result ranking is__<pre>{@code_rank | relevance | probR / r | p        | p * probR / r_-------------------------------------------------------_1    | 3         | 0.875     | 1        | 0.875       |_2    | n/a       | n/a       | 0.125    | n/a   |_3    | 0         | 0         | 0.125    | 0           |_4    | 1         | 0.03125   | 0.125    | 0.00390625 |_}</pre>__err = sum of last column;public void testERRMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, null, 0, 1}__        SearchHit[] hits = createSearchHits(rated, relevanceRatings)__        ExpectedReciprocalRank err = new ExpectedReciprocalRank(3, null, 4)__        EvalQueryQuality evaluation = err.evaluate("id", hits, rated)__        assertEquals(0.875 + 0.00390625, evaluation.getQualityLevel(), DELTA)__        assertEquals(1, ((ExpectedReciprocalRank.Detail) evaluation.getMetricDetails()).getUnratedDocs())__        _        err = new ExpectedReciprocalRank(3, 2, 4)__        assertEquals(0.8984375 + 0.00244140625, err.evaluate("id", hits, rated).getQualityLevel(), DELTA)__    };assuming,the,result,ranking,is,pre,code,rank,relevance,prob,r,r,p,p,prob,r,r,1,3,0,875,1,0,875,2,n,a,n,a,0,125,n,a,3,0,0,0,125,0,4,1,0,03125,0,125,0,00390625,pre,err,sum,of,last,column;public,void,test,errmissing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,null,0,1,search,hit,hits,create,search,hits,rated,relevance,ratings,expected,reciprocal,rank,err,new,expected,reciprocal,rank,3,null,4,eval,query,quality,evaluation,err,evaluate,id,hits,rated,assert,equals,0,875,0,00390625,evaluation,get,quality,level,delta,assert,equals,1,expected,reciprocal,rank,detail,evaluation,get,metric,details,get,unrated,docs,err,new,expected,reciprocal,rank,3,2,4,assert,equals,0,8984375,0,00244140625,err,evaluate,id,hits,rated,get,quality,level,delta
ExpectedReciprocalRankTests -> public void testERRMissingRatings();1532434432;Assuming the result ranking is__<pre>{@code_rank | relevance | probR / r | p        | p * probR / r_-------------------------------------------------------_1    | 3         | 0.875     | 1        | 0.875       |_2    | n/a       | n/a       | 0.125    | n/a   |_3    | 0         | 0         | 0.125    | 0           |_4    | 1         | 0.03125   | 0.125    | 0.00390625 |_}</pre>__err = sum of last column;public void testERRMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, null, 0, 1}__        SearchHit[] hits = createSearchHits(rated, relevanceRatings)__        ExpectedReciprocalRank err = new ExpectedReciprocalRank(3, null, 4)__        EvalQueryQuality evaluation = err.evaluate("id", hits, rated)__        assertEquals(0.875 + 0.00390625, evaluation.metricScore(), DELTA)__        assertEquals(1, ((ExpectedReciprocalRank.Detail) evaluation.getMetricDetails()).getUnratedDocs())__        _        err = new ExpectedReciprocalRank(3, 2, 4)__        assertEquals(0.8984375 + 0.00244140625, err.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,result,ranking,is,pre,code,rank,relevance,prob,r,r,p,p,prob,r,r,1,3,0,875,1,0,875,2,n,a,n,a,0,125,n,a,3,0,0,0,125,0,4,1,0,03125,0,125,0,00390625,pre,err,sum,of,last,column;public,void,test,errmissing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,null,0,1,search,hit,hits,create,search,hits,rated,relevance,ratings,expected,reciprocal,rank,err,new,expected,reciprocal,rank,3,null,4,eval,query,quality,evaluation,err,evaluate,id,hits,rated,assert,equals,0,875,0,00390625,evaluation,metric,score,delta,assert,equals,1,expected,reciprocal,rank,detail,evaluation,get,metric,details,get,unrated,docs,err,new,expected,reciprocal,rank,3,2,4,assert,equals,0,8984375,0,00244140625,err,evaluate,id,hits,rated,metric,score,delta
ExpectedReciprocalRankTests -> public void testERRMissingRatings();1548770291;Assuming the result ranking is__<pre>{@code_rank | relevance | probR / r | p        | p * probR / r_-------------------------------------------------------_1    | 3         | 0.875     | 1        | 0.875       |_2    | n/a       | n/a       | 0.125    | n/a   |_3    | 0         | 0         | 0.125    | 0           |_4    | 1         | 0.03125   | 0.125    | 0.00390625 |_}</pre>__err = sum of last column;public void testERRMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, null, 0, 1}__        SearchHit[] hits = createSearchHits(rated, relevanceRatings)__        ExpectedReciprocalRank err = new ExpectedReciprocalRank(3, null, 4)__        EvalQueryQuality evaluation = err.evaluate("id", hits, rated)__        assertEquals(0.875 + 0.00390625, evaluation.metricScore(), DELTA)__        assertEquals(1, ((ExpectedReciprocalRank.Detail) evaluation.getMetricDetails()).getUnratedDocs())__        _        err = new ExpectedReciprocalRank(3, 2, 4)__        assertEquals(0.8984375 + 0.00244140625, err.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,result,ranking,is,pre,code,rank,relevance,prob,r,r,p,p,prob,r,r,1,3,0,875,1,0,875,2,n,a,n,a,0,125,n,a,3,0,0,0,125,0,4,1,0,03125,0,125,0,00390625,pre,err,sum,of,last,column;public,void,test,errmissing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,null,0,1,search,hit,hits,create,search,hits,rated,relevance,ratings,expected,reciprocal,rank,err,new,expected,reciprocal,rank,3,null,4,eval,query,quality,evaluation,err,evaluate,id,hits,rated,assert,equals,0,875,0,00390625,evaluation,metric,score,delta,assert,equals,1,expected,reciprocal,rank,detail,evaluation,get,metric,details,get,unrated,docs,err,new,expected,reciprocal,rank,3,2,4,assert,equals,0,8984375,0,00244140625,err,evaluate,id,hits,rated,metric,score,delta
ExpectedReciprocalRankTests -> public void testERRMissingRatings();1549860314;Assuming the result ranking is__<pre>{@code_rank | relevance | probR / r | p        | p * probR / r_-------------------------------------------------------_1    | 3         | 0.875     | 1        | 0.875       |_2    | n/a       | n/a       | 0.125    | n/a   |_3    | 0         | 0         | 0.125    | 0           |_4    | 1         | 0.03125   | 0.125    | 0.00390625 |_}</pre>__err = sum of last column;public void testERRMissingRatings() {_        List<RatedDocument> rated = new ArrayList<>()__        Integer[] relevanceRatings = new Integer[] { 3, null, 0, 1}__        SearchHit[] hits = createSearchHits(rated, relevanceRatings)__        ExpectedReciprocalRank err = new ExpectedReciprocalRank(3, null, 4)__        EvalQueryQuality evaluation = err.evaluate("id", hits, rated)__        assertEquals(0.875 + 0.00390625, evaluation.metricScore(), DELTA)__        assertEquals(1, ((ExpectedReciprocalRank.Detail) evaluation.getMetricDetails()).getUnratedDocs())__        _        err = new ExpectedReciprocalRank(3, 2, 4)__        assertEquals(0.8984375 + 0.00244140625, err.evaluate("id", hits, rated).metricScore(), DELTA)__    };assuming,the,result,ranking,is,pre,code,rank,relevance,prob,r,r,p,p,prob,r,r,1,3,0,875,1,0,875,2,n,a,n,a,0,125,n,a,3,0,0,0,125,0,4,1,0,03125,0,125,0,00390625,pre,err,sum,of,last,column;public,void,test,errmissing,ratings,list,rated,document,rated,new,array,list,integer,relevance,ratings,new,integer,3,null,0,1,search,hit,hits,create,search,hits,rated,relevance,ratings,expected,reciprocal,rank,err,new,expected,reciprocal,rank,3,null,4,eval,query,quality,evaluation,err,evaluate,id,hits,rated,assert,equals,0,875,0,00390625,evaluation,metric,score,delta,assert,equals,1,expected,reciprocal,rank,detail,evaluation,get,metric,details,get,unrated,docs,err,new,expected,reciprocal,rank,3,2,4,assert,equals,0,8984375,0,00244140625,err,evaluate,id,hits,rated,metric,score,delta
