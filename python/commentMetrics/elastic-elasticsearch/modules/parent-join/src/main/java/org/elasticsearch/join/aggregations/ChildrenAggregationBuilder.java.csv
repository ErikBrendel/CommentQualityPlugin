commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected AggregationBuilder shallowCopy(Builder factoriesBuilder, Map<String, Object> metaData) {     return new ChildrenAggregationBuilder(this, factoriesBuilder, metaData). }
false;protected;1;4;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeString(childType). }
false;protected;4;8;;@Override protected ValuesSourceAggregatorFactory<WithOrdinals, ?> innerBuild(SearchContext context, ValuesSourceConfig<WithOrdinals> config, AggregatorFactory<?> parent, Builder subFactoriesBuilder) throws IOException {     return new ChildrenAggregatorFactory(name, config, childFilter, parentFilter, context, parent, subFactoriesBuilder, metaData). }
false;protected;1;6;;@Override protected ValuesSourceConfig<WithOrdinals> resolveConfig(SearchContext context) {     ValuesSourceConfig<WithOrdinals> config = new ValuesSourceConfig<>(ValuesSourceType.BYTES).     joinFieldResolveConfig(context, config).     return config. }
false;private;2;13;;private void joinFieldResolveConfig(SearchContext context, ValuesSourceConfig<WithOrdinals> config) {     ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(context.mapperService()).     ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false).     if (parentIdFieldMapper != null) {         parentFilter = parentIdFieldMapper.getParentFilter().         childFilter = parentIdFieldMapper.getChildFilter(childType).         MappedFieldType fieldType = parentIdFieldMapper.fieldType().         final SortedSetDVOrdinalsIndexFieldData fieldData = context.getForField(fieldType).         config.fieldContext(new FieldContext(fieldType.name(), fieldData, fieldType)).     } else {         config.unmapped(true).     } }
false;protected;2;5;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(ParentToChildrenAggregator.TYPE_FIELD.getPreferredName(), childType).     return builder. }
false;public,static;2;27;;public static ChildrenAggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {     String childType = null.     XContentParser.Token token.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.VALUE_STRING) {             if ("type".equals(currentFieldName)) {                 childType = parser.text().             } else {                 throw new ParsingException(parser.getTokenLocation(), "Unknown key for a " + token + " in [" + aggregationName + "]: [" + currentFieldName + "].").             }         } else {             throw new ParsingException(parser.getTokenLocation(), "Unexpected token " + token + " in [" + aggregationName + "].").         }     }     if (childType == null) {         throw new ParsingException(parser.getTokenLocation(), "Missing [child_type] field for children aggregation [" + aggregationName + "]").     }     return new ChildrenAggregationBuilder(aggregationName, childType). }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(childType). }
false;protected;1;5;;@Override protected boolean innerEquals(Object obj) {     ChildrenAggregationBuilder other = (ChildrenAggregationBuilder) obj.     return Objects.equals(childType, other.childType). }
false;public;0;4;;@Override public String getType() {     return NAME. }
