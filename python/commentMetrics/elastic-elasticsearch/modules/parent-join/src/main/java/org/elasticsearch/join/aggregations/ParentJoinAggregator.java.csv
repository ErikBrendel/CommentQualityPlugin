commented;modifiers;parameterAmount;loc;comment;code
false;private;1;7;;private void addGlobalOrdinal(int globalOrdinal) {     if (singleAggregator) {         ordsBit.set(globalOrdinal).     } else {         ordsHash.add(globalOrdinal).     } }
false;private;1;3;;private boolean existsGlobalOrdinal(int globalOrdinal) {     return singleAggregator ? ordsBit.get(globalOrdinal) : ordsHash.find(globalOrdinal) >= 0. }
false;public;2;9;;@Override public void collect(int docId, long bucket) throws IOException {     assert bucket == 0.     if (parentDocs.get(docId) && globalOrdinals.advanceExact(docId)) {         int globalOrdinal = (int) globalOrdinals.nextOrd().         assert globalOrdinal != -1 && globalOrdinals.nextOrd() == SortedSetDocValues.NO_MORE_ORDS.         addGlobalOrdinal(globalOrdinal).     } }
false;public,final;2;20;;@Override public final LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {     if (valuesSource == null) {         return LeafBucketCollector.NO_OP_COLLECTOR.     }     final SortedSetDocValues globalOrdinals = valuesSource.globalOrdinalsValues(ctx).     final Bits parentDocs = Lucene.asSequentialAccessBits(ctx.reader().maxDoc(), inFilter.scorerSupplier(ctx)).     return new LeafBucketCollector() {          @Override         public void collect(int docId, long bucket) throws IOException {             assert bucket == 0.             if (parentDocs.get(docId) && globalOrdinals.advanceExact(docId)) {                 int globalOrdinal = (int) globalOrdinals.nextOrd().                 assert globalOrdinal != -1 && globalOrdinals.nextOrd() == SortedSetDocValues.NO_MORE_ORDS.                 addGlobalOrdinal(globalOrdinal).             }         }     }. }
false;public;0;4;;@Override public float score() {     return 1f. }
false;public;0;4;;@Override public int docID() {     return childDocsIter.docID(). }
false;protected,final;0;41;;@Override protected final void doPostCollection() throws IOException {     IndexReader indexReader = context().searcher().getIndexReader().     for (LeafReaderContext ctx : indexReader.leaves()) {         Scorer childDocsScorer = outFilter.scorer(ctx).         if (childDocsScorer == null) {             continue.         }         DocIdSetIterator childDocsIter = childDocsScorer.iterator().         final LeafBucketCollector sub = collectableSubAggregators.getLeafCollector(ctx).         final SortedSetDocValues globalOrdinals = valuesSource.globalOrdinalsValues(ctx).         // Set the scorer, since we now replay only the child docIds         sub.setScorer(new Scorable() {              @Override             public float score() {                 return 1f.             }              @Override             public int docID() {                 return childDocsIter.docID().             }         }).         final Bits liveDocs = ctx.reader().getLiveDocs().         for (int docId = childDocsIter.nextDoc(). docId != DocIdSetIterator.NO_MORE_DOCS. docId = childDocsIter.nextDoc()) {             if (liveDocs != null && liveDocs.get(docId) == false) {                 continue.             }             if (globalOrdinals.advanceExact(docId)) {                 int globalOrdinal = (int) globalOrdinals.nextOrd().                 assert globalOrdinal != -1 && globalOrdinals.nextOrd() == SortedSetDocValues.NO_MORE_ORDS.                 if (existsGlobalOrdinal(globalOrdinal)) {                     collectBucket(sub, docId, 0).                 }             }         }     } }
false;protected;0;4;;@Override protected void doClose() {     Releasables.close(ordsBit, ordsHash). }
