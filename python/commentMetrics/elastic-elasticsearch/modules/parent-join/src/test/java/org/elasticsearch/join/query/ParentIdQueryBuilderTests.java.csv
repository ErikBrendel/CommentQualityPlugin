commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.singletonList(ParentJoinPlugin.class). }
false;protected;0;7;;@Override protected Settings createTestIndexSettings() {     return Settings.builder().put(super.createTestIndexSettings()).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build(). }
false;protected;1;35;;@Override protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {     XContentBuilder mapping = jsonBuilder().startObject().startObject("_doc").startObject("properties").startObject("join_field").field("type", "join").startObject("relations").field("parent", "child").endObject().endObject().startObject(STRING_FIELD_NAME).field("type", "text").endObject().startObject(STRING_FIELD_NAME_2).field("type", "keyword").endObject().startObject(INT_FIELD_NAME).field("type", "integer").endObject().startObject(DOUBLE_FIELD_NAME).field("type", "double").endObject().startObject(BOOLEAN_FIELD_NAME).field("type", "boolean").endObject().startObject(DATE_FIELD_NAME).field("type", "date").endObject().startObject(OBJECT_FIELD_NAME).field("type", "object").endObject().endObject().endObject().endObject().     mapperService.merge(TYPE, new CompressedXContent(Strings.toString(mapping)), MapperService.MergeReason.MAPPING_UPDATE). }
false;protected;0;4;;@Override protected ParentIdQueryBuilder doCreateTestQueryBuilder() {     return new ParentIdQueryBuilder(CHILD_NAME, randomAlphaOfLength(4)).ignoreUnmapped(randomBoolean()). }
false;protected;3;11;;@Override protected void doAssertLuceneQuery(ParentIdQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     assertThat(query, Matchers.instanceOf(BooleanQuery.class)).     BooleanQuery booleanQuery = (BooleanQuery) query.     assertThat(booleanQuery.clauses().size(), Matchers.equalTo(2)).     BooleanQuery expected = new BooleanQuery.Builder().add(new TermQuery(new Term(JOIN_FIELD_NAME + "#" + PARENT_NAME, queryBuilder.getId())), BooleanClause.Occur.MUST).add(new TermQuery(new Term(JOIN_FIELD_NAME, queryBuilder.getType())), BooleanClause.Occur.FILTER).build().     assertThat(expected, equalTo(query)). }
false;public;0;18;;public void testFromJson() throws IOException {     String query = "{\n" + "  \"parent_id\" : {\n" + "    \"type\" : \"child\",\n" + "    \"id\" : \"123\",\n" + "    \"ignore_unmapped\" : false,\n" + "    \"boost\" : 3.0,\n" + "    \"_name\" : \"name\"" + "  }\n" + "}".     ParentIdQueryBuilder queryBuilder = (ParentIdQueryBuilder) parseQuery(query).     checkGeneratedJson(query, queryBuilder).     assertThat(queryBuilder.getType(), Matchers.equalTo("child")).     assertThat(queryBuilder.getId(), Matchers.equalTo("123")).     assertThat(queryBuilder.boost(), Matchers.equalTo(3f)).     assertThat(queryBuilder.queryName(), Matchers.equalTo("name")). }
false;public;0;12;;public void testIgnoreUnmapped() throws IOException {     final ParentIdQueryBuilder queryBuilder = new ParentIdQueryBuilder("unmapped", "foo").     queryBuilder.ignoreUnmapped(true).     Query query = queryBuilder.toQuery(createShardContext()).     assertThat(query, notNullValue()).     assertThat(query, instanceOf(MatchNoDocsQuery.class)).     final ParentIdQueryBuilder failingQueryBuilder = new ParentIdQueryBuilder("unmapped", "foo").     failingQueryBuilder.ignoreUnmapped(false).     QueryShardException e = expectThrows(QueryShardException.class, () -> failingQueryBuilder.toQuery(createShardContext())).     assertThat(e.getMessage(), containsString("[" + ParentIdQueryBuilder.NAME + "] no relation found for child [unmapped]")). }
