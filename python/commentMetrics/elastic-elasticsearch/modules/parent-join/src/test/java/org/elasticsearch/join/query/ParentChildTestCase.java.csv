commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean ignoreExternalCluster() {     return true. }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(InternalSettingsPlugin.class, ParentJoinPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return nodePlugins(). }
false;public;0;9;;@Override public Settings indexSettings() {     Settings.Builder builder = Settings.builder().put(super.indexSettings()).put(IndexModule.INDEX_QUERY_CACHE_ENABLED_SETTING.getKey(), true).put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true).     return builder.build(). }
false;protected;5;7;;protected IndexRequestBuilder createIndexRequest(String index, String type, String id, String parentId, Object... fields) {     Map<String, Object> source = new HashMap<>().     for (int i = 0. i < fields.length. i += 2) {         source.put((String) fields[i], fields[i + 1]).     }     return createIndexRequest(index, type, id, parentId, source). }
false;protected;5;5;;protected IndexRequestBuilder createIndexRequest(String index, String type, String id, String parentId, XContentBuilder builder) throws IOException {     Map<String, Object> source = XContentHelper.convertToMap(JsonXContent.jsonXContent, Strings.toString(builder), false).     return createIndexRequest(index, type, id, parentId, source). }
false;public,static;3;21;;public static Map<String, Object> buildParentJoinFieldMappingFromSimplifiedDef(String joinFieldName, boolean eagerGlobalOrdinals, String... relations) {     Map<String, Object> fields = new HashMap<>().     Map<String, Object> joinField = new HashMap<>().     joinField.put("type", "join").     joinField.put("eager_global_ordinals", eagerGlobalOrdinals).     Map<String, Object> relationMap = new HashMap<>().     for (int i = 0. i < relations.length. i += 2) {         String[] children = relations[i + 1].split(",").         if (children.length > 1) {             relationMap.put(relations[i], children).         } else {             relationMap.put(relations[i], children[0]).         }     }     joinField.put("relations", relationMap).     fields.put(joinFieldName, joinField).     return Collections.singletonMap("properties", fields). }
false;public,static;2;10;;@SuppressWarnings("unchecked") public static Map<String, Object> addFieldMappings(Map<String, Object> map, String... fields) {     Map<String, Object> propsMap = (Map<String, Object>) map.get("properties").     for (int i = 0. i < fields.length. i += 2) {         String field = fields[i].         String type = fields[i + 1].         propsMap.put(field, Collections.singletonMap("type", type)).     }     return map. }
false;private;5;17;;private IndexRequestBuilder createIndexRequest(String index, String type, String id, String parentId, Map<String, Object> source) {     String name = type.     type = "doc".     IndexRequestBuilder indexRequestBuilder = client().prepareIndex(index, type, id).     Map<String, Object> joinField = new HashMap<>().     if (parentId != null) {         joinField.put("name", name).         joinField.put("parent", parentId).         indexRequestBuilder.setRouting(parentId).     } else {         joinField.put("name", name).     }     source.put("join_field", joinField).     indexRequestBuilder.setSource(source).     return indexRequestBuilder. }
