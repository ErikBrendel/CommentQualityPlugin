commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testCreate() throws Exception {     Processor processor = new TestProcessor(ingestDocument -> {     }).     Map<String, Processor.Factory> registry = new HashMap<>().     registry.put("_name", (r, t, c) -> processor).     ForEachProcessor.Factory forEachFactory = new ForEachProcessor.Factory(scriptService).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("processor", Collections.singletonMap("_name", Collections.emptyMap())).     ForEachProcessor forEachProcessor = forEachFactory.create(registry, null, config).     assertThat(forEachProcessor, Matchers.notNullValue()).     assertThat(forEachProcessor.getField(), equalTo("_field")).     assertThat(forEachProcessor.getProcessor(), Matchers.sameInstance(processor)).     assertFalse(forEachProcessor.isIgnoreMissing()). }
false;public;0;16;;public void testSetIgnoreMissing() throws Exception {     Processor processor = new TestProcessor(ingestDocument -> {     }).     Map<String, Processor.Factory> registry = new HashMap<>().     registry.put("_name", (r, t, c) -> processor).     ForEachProcessor.Factory forEachFactory = new ForEachProcessor.Factory(scriptService).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("processor", Collections.singletonMap("_name", Collections.emptyMap())).     config.put("ignore_missing", true).     ForEachProcessor forEachProcessor = forEachFactory.create(registry, null, config).     assertThat(forEachProcessor, Matchers.notNullValue()).     assertThat(forEachProcessor.getField(), equalTo("_field")).     assertThat(forEachProcessor.getProcessor(), Matchers.sameInstance(processor)).     assertTrue(forEachProcessor.isIgnoreMissing()). }
false;public;0;16;;public void testCreateWithTooManyProcessorTypes() throws Exception {     Processor processor = new TestProcessor(ingestDocument -> {     }).     Map<String, Processor.Factory> registry = new HashMap<>().     registry.put("_first", (r, t, c) -> processor).     registry.put("_second", (r, t, c) -> processor).     ForEachProcessor.Factory forEachFactory = new ForEachProcessor.Factory(scriptService).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     Map<String, Object> processorTypes = new HashMap<>().     processorTypes.put("_first", Collections.emptyMap()).     processorTypes.put("_second", Collections.emptyMap()).     config.put("processor", processorTypes).     Exception exception = expectThrows(ElasticsearchParseException.class, () -> forEachFactory.create(registry, null, config)).     assertThat(exception.getMessage(), equalTo("[processor] Must specify exactly one processor type")). }
false;public;0;9;;public void testCreateWithNonExistingProcessorType() throws Exception {     ForEachProcessor.Factory forEachFactory = new ForEachProcessor.Factory(scriptService).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("processor", Collections.singletonMap("_name", Collections.emptyMap())).     Exception expectedException = expectThrows(ElasticsearchParseException.class, () -> forEachFactory.create(Collections.emptyMap(), null, config)).     assertThat(expectedException.getMessage(), equalTo("No processor type exists with name [_name]")). }
false;public;0;10;;public void testCreateWithMissingField() throws Exception {     Processor processor = new TestProcessor(ingestDocument -> {     }).     Map<String, Processor.Factory> registry = new HashMap<>().     registry.put("_name", (r, t, c) -> processor).     ForEachProcessor.Factory forEachFactory = new ForEachProcessor.Factory(scriptService).     Map<String, Object> config = new HashMap<>().     config.put("processor", Collections.singletonList(Collections.singletonMap("_name", Collections.emptyMap()))).     Exception exception = expectThrows(Exception.class, () -> forEachFactory.create(registry, null, config)).     assertThat(exception.getMessage(), equalTo("[field] required property is missing")). }
false;public;0;7;;public void testCreateWithMissingProcessor() {     ForEachProcessor.Factory forEachFactory = new ForEachProcessor.Factory(scriptService).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     Exception exception = expectThrows(Exception.class, () -> forEachFactory.create(Collections.emptyMap(), null, config)).     assertThat(exception.getMessage(), equalTo("[processor] required property is missing")). }
