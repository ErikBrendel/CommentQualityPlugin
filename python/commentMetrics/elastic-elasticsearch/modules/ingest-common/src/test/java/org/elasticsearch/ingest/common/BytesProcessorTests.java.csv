commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;4;;@Override protected AbstractStringProcessor newProcessor(String field, boolean ignoreMissing, String targetField) {     return new BytesProcessor(randomAlphaOfLength(10), field, ignoreMissing, targetField). }
false;protected;1;8;;@Override protected String modifyInput(String input) {     // largest value that allows all results < Long.MAX_VALUE bytes     long randomNumber = randomLongBetween(1, Long.MAX_VALUE / ByteSizeUnit.PB.toBytes(1)).     ByteSizeUnit randomUnit = randomFrom(ByteSizeUnit.values()).     modifiedInput = randomNumber + randomUnit.getSuffix().     return modifiedInput. }
false;protected;1;4;;@Override protected Long expectedResult(String input) {     return ByteSizeValue.parseBytesSizeValue(modifiedInput, null, "").getBytes(). }
false;protected;0;4;;@Override protected Class<Long> expectedResultType() {     return Long.class. }
false;public;0;10;;public void testTooLarge() {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, "8912pb").     Processor processor = newProcessor(fieldName, randomBoolean(), fieldName).     ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> processor.execute(ingestDocument)).     assertThat(exception.getMessage(), CoreMatchers.equalTo("failed to parse setting [Ingest Field] with value [8912pb] as a size in bytes")).     assertThat(exception.getCause().getMessage(), CoreMatchers.containsString("Values greater than 9223372036854775807 bytes are not supported")). }
false;public;0;8;;public void testNotBytes() {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, "junk").     Processor processor = newProcessor(fieldName, randomBoolean(), fieldName).     ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> processor.execute(ingestDocument)).     assertThat(exception.getMessage(), CoreMatchers.equalTo("failed to parse [junk]")). }
false;public;0;8;;public void testMissingUnits() {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, "1").     Processor processor = newProcessor(fieldName, randomBoolean(), fieldName).     ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> processor.execute(ingestDocument)).     assertThat(exception.getMessage(), CoreMatchers.containsString("unit is missing or unrecognized")). }
false;public;0;9;;public void testFractional() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, "1.1kb").     Processor processor = newProcessor(fieldName, randomBoolean(), fieldName).     processor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue(fieldName, expectedResultType()), equalTo(1126L)).     assertWarnings("Fractional bytes values are deprecated. Use non-fractional bytes values instead: [1.1kb] found for setting " + "[Ingest Field]"). }
