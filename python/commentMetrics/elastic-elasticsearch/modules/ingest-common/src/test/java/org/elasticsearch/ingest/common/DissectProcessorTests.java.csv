commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testMatch() {     IngestDocument ingestDocument = new IngestDocument("_index", "_type", "_id", null, null, null, Collections.singletonMap("message", "foo,bar,baz")).     DissectProcessor dissectProcessor = new DissectProcessor("", "message", "%{a},%{b},%{c}", "", true).     dissectProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("a", String.class), equalTo("foo")).     assertThat(ingestDocument.getFieldValue("b", String.class), equalTo("bar")).     assertThat(ingestDocument.getFieldValue("c", String.class), equalTo("baz")). }
false;public;0;13;;public void testMatchOverwrite() {     IngestDocument ingestDocument = new IngestDocument("_index", "_type", "_id", null, null, null, MapBuilder.<String, Object>newMapBuilder().put("message", "foo,bar,baz").put("a", "willgetstompped").map()).     assertThat(ingestDocument.getFieldValue("a", String.class), equalTo("willgetstompped")).     DissectProcessor dissectProcessor = new DissectProcessor("", "message", "%{a},%{b},%{c}", "", true).     dissectProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("a", String.class), equalTo("foo")).     assertThat(ingestDocument.getFieldValue("b", String.class), equalTo("bar")).     assertThat(ingestDocument.getFieldValue("c", String.class), equalTo("baz")). }
false;public;0;12;;public void testAdvancedMatch() {     IngestDocument ingestDocument = new IngestDocument("_index", "_type", "_id", null, null, null, Collections.singletonMap("message", "foo       bar,,,,,,,baz nope:notagain 😊 🐇 🙃")).     DissectProcessor dissectProcessor = new DissectProcessor("", "message", "%{a->} %{*b->},%{&b} %{}:%{?skipme} %{+smile/2} 🐇 %{+smile/1}", "::::", true).     dissectProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("a", String.class), equalTo("foo")).     assertThat(ingestDocument.getFieldValue("bar", String.class), equalTo("baz")).     expectThrows(IllegalArgumentException.class, () -> ingestDocument.getFieldValue("nope", String.class)).     expectThrows(IllegalArgumentException.class, () -> ingestDocument.getFieldValue("notagain", String.class)).     assertThat(ingestDocument.getFieldValue("smile", String.class), equalTo("🙃::::😊")). }
false;public;0;7;;public void testMiss() {     IngestDocument ingestDocument = new IngestDocument("_index", "_type", "_id", null, null, null, Collections.singletonMap("message", "foo:bar,baz")).     DissectProcessor dissectProcessor = new DissectProcessor("", "message", "%{a},%{b},%{c}", "", true).     DissectException e = expectThrows(DissectException.class, () -> dissectProcessor.execute(ingestDocument)).     assertThat(e.getMessage(), CoreMatchers.containsString("Unable to find match for dissect pattern")). }
false;public;0;8;;public void testNonStringValueWithIgnoreMissing() {     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = new DissectProcessor("", fieldName, "%{a},%{b},%{c}", "", true).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     ingestDocument.setFieldValue(fieldName, randomInt()).     Exception e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument)).     assertThat(e.getMessage(), equalTo("field [" + fieldName + "] of type [java.lang.Integer] cannot be cast to [java.lang.String]")). }
false;public;0;9;;public void testNullValueWithIgnoreMissing() throws Exception {     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = new DissectProcessor("", fieldName, "%{a},%{b},%{c}", "", true).     IngestDocument originalIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.singletonMap(fieldName, null)).     IngestDocument ingestDocument = new IngestDocument(originalIngestDocument).     processor.execute(ingestDocument).     assertIngestDocument(originalIngestDocument, ingestDocument). }
false;public;0;8;;public void testNullValueWithOutIgnoreMissing() {     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = new DissectProcessor("", fieldName, "%{a},%{b},%{c}", "", false).     IngestDocument originalIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.singletonMap(fieldName, null)).     IngestDocument ingestDocument = new IngestDocument(originalIngestDocument).     expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument)). }
