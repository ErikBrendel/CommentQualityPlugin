commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() {     factory = new RemoveProcessor.Factory(TestTemplateService.instance()). }
false;public;0;8;;public void testCreate() throws Exception {     Map<String, Object> config = new HashMap<>().     config.put("field", "field1").     String processorTag = randomAlphaOfLength(10).     RemoveProcessor removeProcessor = factory.create(null, processorTag, config).     assertThat(removeProcessor.getTag(), equalTo(processorTag)).     assertThat(removeProcessor.getFields().get(0).newInstance(Collections.emptyMap()).execute(), equalTo("field1")). }
false;public;0;10;;public void testCreateMultipleFields() throws Exception {     Map<String, Object> config = new HashMap<>().     config.put("field", Arrays.asList("field1", "field2")).     String processorTag = randomAlphaOfLength(10).     RemoveProcessor removeProcessor = factory.create(null, processorTag, config).     assertThat(removeProcessor.getTag(), equalTo(processorTag)).     assertThat(removeProcessor.getFields().stream().map(template -> template.newInstance(Collections.emptyMap()).execute()).collect(Collectors.toList()), equalTo(Arrays.asList("field1", "field2"))). }
false;public;0;9;;public void testCreateMissingField() throws Exception {     Map<String, Object> config = new HashMap<>().     try {         factory.create(null, null, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[field] required property is missing")).     } }
false;public;0;9;;public void testInvalidMustacheTemplate() throws Exception {     RemoveProcessor.Factory factory = new RemoveProcessor.Factory(TestTemplateService.instance(true)).     Map<String, Object> config = new HashMap<>().     config.put("field", "{{field1}}").     String processorTag = randomAlphaOfLength(10).     ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> factory.create(null, processorTag, config)).     assertThat(exception.getMessage(), equalTo("java.lang.RuntimeException: could not compile script")).     assertThat(exception.getMetadata("es.processor_tag").get(0), equalTo(processorTag)). }
