commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() {     factory = new ScriptProcessor.Factory(mock(ScriptService.class)). }
false;public;0;9;;public void testFactoryValidationWithDefaultLang() throws Exception {     Map<String, Object> configMap = new HashMap<>().     String randomType = randomFrom("id", "source").     configMap.put(randomType, "foo").     ScriptProcessor processor = factory.create(null, randomAlphaOfLength(10), configMap).     assertThat(processor.getScript().getLang(), equalTo(randomType.equals("id") ? null : Script.DEFAULT_SCRIPT_LANG)).     assertThat(processor.getScript().getType().toString(), equalTo(ingestScriptParamToType.get(randomType))).     assertThat(processor.getScript().getParams(), equalTo(Collections.emptyMap())). }
false;public;0;11;;public void testFactoryValidationWithParams() throws Exception {     Map<String, Object> configMap = new HashMap<>().     String randomType = randomFrom("id", "source").     Map<String, Object> randomParams = Collections.singletonMap(randomAlphaOfLength(10), randomAlphaOfLength(10)).     configMap.put(randomType, "foo").     configMap.put("params", randomParams).     ScriptProcessor processor = factory.create(null, randomAlphaOfLength(10), configMap).     assertThat(processor.getScript().getLang(), equalTo(randomType.equals("id") ? null : Script.DEFAULT_SCRIPT_LANG)).     assertThat(processor.getScript().getType().toString(), equalTo(ingestScriptParamToType.get(randomType))).     assertThat(processor.getScript().getParams(), equalTo(randomParams)). }
false;public;0;10;;public void testFactoryValidationForMultipleScriptingTypes() throws Exception {     Map<String, Object> configMap = new HashMap<>().     configMap.put("id", "foo").     configMap.put("source", "bar").     configMap.put("lang", "mockscript").     XContentParseException exception = expectThrows(XContentParseException.class, () -> factory.create(null, randomAlphaOfLength(10), configMap)).     assertThat(exception.getMessage(), containsString("[script] failed to parse field [source]")). }
false;public;0;9;;public void testFactoryValidationAtLeastOneScriptingType() throws Exception {     Map<String, Object> configMap = new HashMap<>().     configMap.put("lang", "mockscript").     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> factory.create(null, randomAlphaOfLength(10), configMap)).     assertThat(exception.getMessage(), is("must specify either [source] for an inline script or [id] for a stored script")). }
false;public;0;7;;public void testInlineBackcompat() throws Exception {     Map<String, Object> configMap = new HashMap<>().     configMap.put("inline", "code").     factory.create(null, randomAlphaOfLength(10), configMap).     assertWarnings("Deprecated field [inline] used, expected [source] instead"). }
false;public;0;16;;public void testFactoryInvalidateWithInvalidCompiledScript() throws Exception {     String randomType = randomFrom("source", "id").     ScriptService mockedScriptService = mock(ScriptService.class).     ScriptException thrownException = new ScriptException("compile-time exception", new RuntimeException(), Collections.emptyList(), "script", "mockscript").     when(mockedScriptService.compile(any(), any())).thenThrow(thrownException).     factory = new ScriptProcessor.Factory(mockedScriptService).     Map<String, Object> configMap = new HashMap<>().     configMap.put(randomType, "my_script").     ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> factory.create(null, randomAlphaOfLength(10), configMap)).     assertThat(exception.getMessage(), is("compile-time exception")). }
