commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testSplit() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, "127.0.0.1").     Processor processor = new SplitProcessor(randomAlphaOfLength(10), fieldName, "\\.", false, fieldName).     processor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue(fieldName, List.class), equalTo(Arrays.asList("127", "0", "0", "1"))). }
false;public;0;11;;public void testSplitFieldNotFound() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = new SplitProcessor(randomAlphaOfLength(10), fieldName, "\\.", false, fieldName).     try {         processor.execute(ingestDocument).         fail("split processor should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("not present as part of path [" + fieldName + "]")).     } }
false;public;0;11;;public void testSplitNullValue() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.singletonMap("field", null)).     Processor processor = new SplitProcessor(randomAlphaOfLength(10), "field", "\\.", false, "field").     try {         processor.execute(ingestDocument).         fail("split processor should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("field [field] is null, cannot split.")).     } }
false;public;0;9;;public void testSplitNullValueWithIgnoreMissing() throws Exception {     String fieldName = RandomDocumentPicks.randomFieldName(random()).     IngestDocument originalIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.singletonMap(fieldName, null)).     IngestDocument ingestDocument = new IngestDocument(originalIngestDocument).     Processor processor = new SplitProcessor(randomAlphaOfLength(10), fieldName, "\\.", true, fieldName).     processor.execute(ingestDocument).     assertIngestDocument(originalIngestDocument, ingestDocument). }
false;public;0;7;;public void testSplitNonExistentWithIgnoreMissing() throws Exception {     IngestDocument originalIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.emptyMap()).     IngestDocument ingestDocument = new IngestDocument(originalIngestDocument).     Processor processor = new SplitProcessor(randomAlphaOfLength(10), "field", "\\.", true, "field").     processor.execute(ingestDocument).     assertIngestDocument(originalIngestDocument, ingestDocument). }
false;public;0;13;;public void testSplitNonStringValue() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     ingestDocument.setFieldValue(fieldName, randomInt()).     Processor processor = new SplitProcessor(randomAlphaOfLength(10), fieldName, "\\.", false, fieldName).     try {         processor.execute(ingestDocument).         fail("split processor should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("field [" + fieldName + "] of type [java.lang.Integer] cannot be cast " + "to [java.lang.String]")).     } }
false;public;0;16;;public void testSplitAppendable() throws Exception {     Map<String, Object> splitConfig = new HashMap<>().     splitConfig.put("field", "flags").     splitConfig.put("separator", "\\|").     Processor splitProcessor = (new SplitProcessor.Factory()).create(null, null, splitConfig).     Map<String, Object> source = new HashMap<>().     source.put("flags", "new|hot|super|fun|interesting").     IngestDocument ingestDocument = new IngestDocument(source, new HashMap<>()).     splitProcessor.execute(ingestDocument).     @SuppressWarnings("unchecked")     List<String> flags = (List<String>) ingestDocument.getFieldValue("flags", List.class).     assertThat(flags, equalTo(Arrays.asList("new", "hot", "super", "fun", "interesting"))).     ingestDocument.appendFieldValue("flags", "additional_flag").     assertThat(ingestDocument.getFieldValue("flags", List.class), equalTo(Arrays.asList("new", "hot", "super", "fun", "interesting", "additional_flag"))). }
false;public;0;8;;public void testSplitWithTargetField() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, "127.0.0.1").     String targetFieldName = fieldName + randomAlphaOfLength(5).     Processor processor = new SplitProcessor(randomAlphaOfLength(10), fieldName, "\\.", false, targetFieldName).     processor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue(targetFieldName, List.class), equalTo(Arrays.asList("127", "0", "0", "1"))). }
