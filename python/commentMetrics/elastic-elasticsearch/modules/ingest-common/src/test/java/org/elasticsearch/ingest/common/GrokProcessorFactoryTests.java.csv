commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testBuild() throws Exception {     GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(), ThreadWatchdog.noop()).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("patterns", Collections.singletonList("(?<foo>\\w+)")).     String processorTag = randomAlphaOfLength(10).     GrokProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getMatchField(), equalTo("_field")).     assertThat(processor.getGrok(), notNullValue()).     assertThat(processor.isIgnoreMissing(), is(false)). }
false;public;0;14;;public void testBuildWithIgnoreMissing() throws Exception {     GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(), ThreadWatchdog.noop()).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("patterns", Collections.singletonList("(?<foo>\\w+)")).     config.put("ignore_missing", true).     String processorTag = randomAlphaOfLength(10).     GrokProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getMatchField(), equalTo("_field")).     assertThat(processor.getGrok(), notNullValue()).     assertThat(processor.isIgnoreMissing(), is(true)). }
false;public;0;7;;public void testBuildMissingField() throws Exception {     GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(), ThreadWatchdog.noop()).     Map<String, Object> config = new HashMap<>().     config.put("patterns", Collections.singletonList("(?<foo>\\w+)")).     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), equalTo("[field] required property is missing")). }
false;public;0;7;;public void testBuildMissingPatterns() throws Exception {     GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(), ThreadWatchdog.noop()).     Map<String, Object> config = new HashMap<>().     config.put("field", "foo").     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), equalTo("[patterns] required property is missing")). }
false;public;0;8;;public void testBuildEmptyPatternsList() throws Exception {     GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(), ThreadWatchdog.noop()).     Map<String, Object> config = new HashMap<>().     config.put("field", "foo").     config.put("patterns", Collections.emptyList()).     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), equalTo("[patterns] List of patterns must not be empty")). }
false;public;0;12;;public void testCreateWithCustomPatterns() throws Exception {     GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(), ThreadWatchdog.noop()).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("patterns", Collections.singletonList("%{MY_PATTERN:name}!")).     config.put("pattern_definitions", Collections.singletonMap("MY_PATTERN", "foo")).     GrokProcessor processor = factory.create(null, null, config).     assertThat(processor.getMatchField(), equalTo("_field")).     assertThat(processor.getGrok(), notNullValue()).     assertThat(processor.getGrok().match("foo!"), equalTo(true)). }
false;public;0;8;;public void testCreateWithInvalidPattern() throws Exception {     GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(), ThreadWatchdog.noop()).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("patterns", Collections.singletonList("[")).     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), equalTo("[patterns] Invalid regex pattern found in: [[]. premature end of char-class")). }
false;public;0;10;;public void testCreateWithInvalidPatternDefinition() throws Exception {     GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(), ThreadWatchdog.noop()).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("patterns", Collections.singletonList("%{MY_PATTERN:name}!")).     config.put("pattern_definitions", Collections.singletonMap("MY_PATTERN", "[")).     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), equalTo("[patterns] Invalid regex pattern found in: [%{MY_PATTERN:name}!]. premature end of char-class")). }
