commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractStringProcessor.Factory newFactory() {     return new GsubProcessor.Factory(). }
false;protected;1;6;;@Override protected Map<String, Object> modifyConfig(Map<String, Object> config) {     config.put("pattern", "\\.").     config.put("replacement", "-").     return config. }
false;protected;1;6;;@Override protected void assertProcessor(AbstractStringProcessor processor) {     GsubProcessor gsubProcessor = (GsubProcessor) processor.     assertThat(gsubProcessor.getPattern().toString(), equalTo("\\.")).     assertThat(gsubProcessor.getReplacement(), equalTo("-")). }
false;public;0;12;;public void testCreateNoPatternPresent() throws Exception {     GsubProcessor.Factory factory = new GsubProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("field", "field1").     config.put("replacement", "-").     try {         factory.create(null, null, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[pattern] required property is missing")).     } }
false;public;0;12;;public void testCreateNoReplacementPresent() throws Exception {     GsubProcessor.Factory factory = new GsubProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("field", "field1").     config.put("pattern", "\\.").     try {         factory.create(null, null, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[replacement] required property is missing")).     } }
false;public;0;13;;public void testCreateInvalidPattern() throws Exception {     GsubProcessor.Factory factory = new GsubProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("field", "field1").     config.put("pattern", "[").     config.put("replacement", "-").     try {         factory.create(null, null, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), containsString("[pattern] Invalid regex pattern. Unclosed character class")).     } }
