commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testCreate() throws Exception {     JoinProcessor.Factory factory = new JoinProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("field", "field1").     config.put("separator", "-").     String processorTag = randomAlphaOfLength(10).     JoinProcessor joinProcessor = factory.create(null, processorTag, config).     assertThat(joinProcessor.getTag(), equalTo(processorTag)).     assertThat(joinProcessor.getField(), equalTo("field1")).     assertThat(joinProcessor.getSeparator(), equalTo("-")).     assertThat(joinProcessor.getTargetField(), equalTo("field1")). }
false;public;0;11;;public void testCreateNoFieldPresent() throws Exception {     JoinProcessor.Factory factory = new JoinProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("separator", "-").     try {         factory.create(null, null, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[field] required property is missing")).     } }
false;public;0;11;;public void testCreateNoSeparatorPresent() throws Exception {     JoinProcessor.Factory factory = new JoinProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("field", "field1").     try {         factory.create(null, null, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[separator] required property is missing")).     } }
false;public;0;13;;public void testCreateWithTargetField() throws Exception {     JoinProcessor.Factory factory = new JoinProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("field", "field1").     config.put("separator", "-").     config.put("target_field", "target").     String processorTag = randomAlphaOfLength(10).     JoinProcessor joinProcessor = factory.create(null, processorTag, config).     assertThat(joinProcessor.getTag(), equalTo(processorTag)).     assertThat(joinProcessor.getField(), equalTo("field1")).     assertThat(joinProcessor.getSeparator(), equalTo("-")).     assertThat(joinProcessor.getTargetField(), equalTo("target")). }
