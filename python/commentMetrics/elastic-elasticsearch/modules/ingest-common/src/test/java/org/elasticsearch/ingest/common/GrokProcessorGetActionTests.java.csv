commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testRequest() throws Exception {     GrokProcessorGetAction.Request request = new GrokProcessorGetAction.Request().     BytesStreamOutput out = new BytesStreamOutput().     request.writeTo(out).     StreamInput streamInput = out.bytes().streamInput().     GrokProcessorGetAction.Request otherRequest = new GrokProcessorGetAction.Request().     otherRequest.readFrom(streamInput).     assertThat(otherRequest.validate(), nullValue()). }
false;public;0;10;;public void testResponseSerialization() throws Exception {     GrokProcessorGetAction.Response response = new GrokProcessorGetAction.Response(TEST_PATTERNS).     BytesStreamOutput out = new BytesStreamOutput().     response.writeTo(out).     StreamInput streamInput = out.bytes().streamInput().     GrokProcessorGetAction.Response otherResponse = new GrokProcessorGetAction.Response(null).     otherResponse.readFrom(streamInput).     assertThat(response.getGrokPatterns(), equalTo(TEST_PATTERNS)).     assertThat(response.getGrokPatterns(), equalTo(otherResponse.getGrokPatterns())). }
false;public;0;11;;@SuppressWarnings("unchecked") public void testResponseToXContent() throws Exception {     GrokProcessorGetAction.Response response = new GrokProcessorGetAction.Response(TEST_PATTERNS).     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         response.toXContent(builder, ToXContent.EMPTY_PARAMS).         Map<String, Object> converted = XContentHelper.convertToMap(BytesReference.bytes(builder), false, builder.contentType()).v2().         Map<String, String> patterns = (Map<String, String>) converted.get("patterns").         assertThat(patterns.size(), equalTo(1)).         assertThat(patterns.get("PATTERN"), equalTo("foo")).     } }
