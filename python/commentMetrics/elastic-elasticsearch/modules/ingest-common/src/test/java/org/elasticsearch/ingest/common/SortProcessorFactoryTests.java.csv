commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testCreate() throws Exception {     String processorTag = randomAlphaOfLength(10).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     SortProcessor.Factory factory = new SortProcessor.Factory().     SortProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo(fieldName)).     assertThat(processor.getOrder(), equalTo(SortProcessor.SortOrder.ASCENDING)).     assertThat(processor.getTargetField(), equalTo(fieldName)). }
false;public;0;15;;public void testCreateWithOrder() throws Exception {     String processorTag = randomAlphaOfLength(10).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     config.put("order", "desc").     SortProcessor.Factory factory = new SortProcessor.Factory().     SortProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo(fieldName)).     assertThat(processor.getOrder(), equalTo(SortProcessor.SortOrder.DESCENDING)).     assertThat(processor.getTargetField(), equalTo(fieldName)). }
false;public;0;16;;public void testCreateWithTargetField() throws Exception {     String processorTag = randomAlphaOfLength(10).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     String targetFieldName = RandomDocumentPicks.randomFieldName(random()).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     config.put("target_field", targetFieldName).     SortProcessor.Factory factory = new SortProcessor.Factory().     SortProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo(fieldName)).     assertThat(processor.getOrder(), equalTo(SortProcessor.SortOrder.ASCENDING)).     assertThat(processor.getTargetField(), equalTo(targetFieldName)). }
false;public;0;16;;public void testCreateWithInvalidOrder() throws Exception {     String processorTag = randomAlphaOfLength(10).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     config.put("order", "invalid").     SortProcessor.Factory factory = new SortProcessor.Factory().     try {         factory.create(null, processorTag, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[order] Sort direction [invalid] not recognized. Valid values are: [asc, desc]")).     } }
false;public;0;10;;public void testCreateMissingField() throws Exception {     SortProcessor.Factory factory = new SortProcessor.Factory().     Map<String, Object> config = new HashMap<>().     try {         factory.create(null, null, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[field] required property is missing")).     } }
