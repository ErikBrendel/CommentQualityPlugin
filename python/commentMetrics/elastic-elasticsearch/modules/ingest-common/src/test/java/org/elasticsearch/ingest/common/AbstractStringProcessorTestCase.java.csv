commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;3;1;;protected abstract AbstractStringProcessor newProcessor(String field, boolean ignoreMissing, String targetField).
false;protected;1;3;;protected String modifyInput(String input) {     return input. }
false;protected,abstract;1;1;;protected abstract T expectedResult(String input).
false;protected;0;3;;protected Class<T> expectedResultType() {     // most results types are Strings     return (Class<T>) String.class. }
false;public;0;8;;public void testProcessor() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     String fieldValue = RandomDocumentPicks.randomString(random()).     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, modifyInput(fieldValue)).     Processor processor = newProcessor(fieldName, randomBoolean(), fieldName).     processor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue(fieldName, expectedResultType()), equalTo(expectedResult(fieldValue))). }
false;public;0;7;;public void testFieldNotFound() throws Exception {     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = newProcessor(fieldName, false, fieldName).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     Exception e = expectThrows(Exception.class, () -> processor.execute(ingestDocument)).     assertThat(e.getMessage(), containsString("not present as part of path [" + fieldName + "]")). }
false;public;0;8;;public void testFieldNotFoundWithIgnoreMissing() throws Exception {     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = newProcessor(fieldName, true, fieldName).     IngestDocument originalIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     IngestDocument ingestDocument = new IngestDocument(originalIngestDocument).     processor.execute(ingestDocument).     assertIngestDocument(originalIngestDocument, ingestDocument). }
false;public;0;6;;public void testNullValue() throws Exception {     Processor processor = newProcessor("field", false, "field").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.singletonMap("field", null)).     Exception e = expectThrows(Exception.class, () -> processor.execute(ingestDocument)).     assertThat(e.getMessage(), equalTo("field [field] is null, cannot process it.")). }
false;public;0;7;;public void testNullValueWithIgnoreMissing() throws Exception {     Processor processor = newProcessor("field", true, "field").     IngestDocument originalIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.singletonMap("field", null)).     IngestDocument ingestDocument = new IngestDocument(originalIngestDocument).     processor.execute(ingestDocument).     assertIngestDocument(originalIngestDocument, ingestDocument). }
false;public;0;9;;public void testNonStringValue() throws Exception {     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = newProcessor(fieldName, false, fieldName).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     ingestDocument.setFieldValue(fieldName, randomInt()).     Exception e = expectThrows(Exception.class, () -> processor.execute(ingestDocument)).     assertThat(e.getMessage(), equalTo("field [" + fieldName + "] of type [java.lang.Integer] cannot be cast to [java.lang.String]")). }
false;public;0;9;;public void testNonStringValueWithIgnoreMissing() throws Exception {     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = newProcessor(fieldName, true, fieldName).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     ingestDocument.setFieldValue(fieldName, randomInt()).     Exception e = expectThrows(Exception.class, () -> processor.execute(ingestDocument)).     assertThat(e.getMessage(), equalTo("field [" + fieldName + "] of type [java.lang.Integer] cannot be cast to [java.lang.String]")). }
false;public;0;9;;public void testTargetField() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.emptyMap()).     String fieldValue = RandomDocumentPicks.randomString(random()).     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, modifyInput(fieldValue)).     String targetFieldName = fieldName + "foo".     Processor processor = newProcessor(fieldName, randomBoolean(), targetFieldName).     processor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue(targetFieldName, expectedResultType()), equalTo(expectedResult(fieldValue))). }
