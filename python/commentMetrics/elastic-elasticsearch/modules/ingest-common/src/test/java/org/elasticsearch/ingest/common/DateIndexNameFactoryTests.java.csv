commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testDefaults() throws Exception {     DateIndexNameProcessor.Factory factory = new DateIndexNameProcessor.Factory(TestTemplateService.instance()).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("date_rounding", "y").     DateIndexNameProcessor processor = factory.create(null, null, config).     assertThat(processor.getDateFormats().size(), Matchers.equalTo(1)).     assertThat(processor.getField(), Matchers.equalTo("_field")).     assertThat(processor.getIndexNamePrefixTemplate().newInstance(Collections.emptyMap()).execute(), Matchers.equalTo("")).     assertThat(processor.getDateRoundingTemplate().newInstance(Collections.emptyMap()).execute(), Matchers.equalTo("y")).     assertThat(processor.getIndexNameFormatTemplate().newInstance(Collections.emptyMap()).execute(), Matchers.equalTo("yyyy-MM-dd")).     assertThat(processor.getTimezone(), Matchers.equalTo(ZoneOffset.UTC)). }
false;public;0;37;;public void testSpecifyOptionalSettings() throws Exception {     DateIndexNameProcessor.Factory factory = new DateIndexNameProcessor.Factory(TestTemplateService.instance()).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("index_name_prefix", "_prefix").     config.put("date_rounding", "y").     config.put("date_formats", Arrays.asList("UNIX", "UNIX_MS")).     DateIndexNameProcessor processor = factory.create(null, null, config).     assertThat(processor.getDateFormats().size(), Matchers.equalTo(2)).     config = new HashMap<>().     config.put("field", "_field").     config.put("index_name_prefix", "_prefix").     config.put("date_rounding", "y").     config.put("index_name_format", "yyyyMMdd").     processor = factory.create(null, null, config).     assertThat(processor.getIndexNameFormatTemplate().newInstance(Collections.emptyMap()).execute(), Matchers.equalTo("yyyyMMdd")).     config = new HashMap<>().     config.put("field", "_field").     config.put("index_name_prefix", "_prefix").     config.put("date_rounding", "y").     config.put("timezone", "+02:00").     processor = factory.create(null, null, config).     assertThat(processor.getTimezone(), Matchers.equalTo(ZoneOffset.ofHours(2))).     config = new HashMap<>().     config.put("field", "_field").     config.put("index_name_prefix", "_prefix").     config.put("date_rounding", "y").     processor = factory.create(null, null, config).     assertThat(processor.getIndexNamePrefixTemplate().newInstance(Collections.emptyMap()).execute(), Matchers.equalTo("_prefix")). }
false;public;0;12;;public void testRequiredFields() throws Exception {     DateIndexNameProcessor.Factory factory = new DateIndexNameProcessor.Factory(TestTemplateService.instance()).     Map<String, Object> config = new HashMap<>().     config.put("date_rounding", "y").     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), Matchers.equalTo("[field] required property is missing")).     config.clear().     config.put("field", "_field").     e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), Matchers.equalTo("[date_rounding] required property is missing")). }
