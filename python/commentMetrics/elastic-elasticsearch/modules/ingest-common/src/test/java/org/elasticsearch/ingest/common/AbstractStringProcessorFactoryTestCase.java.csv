commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract AbstractStringProcessor.Factory newFactory().
false;protected;1;3;;protected Map<String, Object> modifyConfig(Map<String, Object> config) {     return config. }
false;protected;1;1;;protected void assertProcessor(AbstractStringProcessor processor) { }
false;public;0;15;;public void testCreate() throws Exception {     AbstractStringProcessor.Factory factory = newFactory().     String fieldName = RandomDocumentPicks.randomFieldName(random()).     String processorTag = randomAlphaOfLength(10).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     AbstractStringProcessor processor = factory.create(null, processorTag, modifyConfig(config)).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo(fieldName)).     assertThat(processor.isIgnoreMissing(), is(false)).     assertThat(processor.getTargetField(), equalTo(fieldName)).     assertProcessor(processor). }
false;public;0;16;;public void testCreateWithIgnoreMissing() throws Exception {     AbstractStringProcessor.Factory factory = newFactory().     String fieldName = RandomDocumentPicks.randomFieldName(random()).     String processorTag = randomAlphaOfLength(10).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     config.put("ignore_missing", true).     AbstractStringProcessor processor = factory.create(null, processorTag, modifyConfig(config)).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo(fieldName)).     assertThat(processor.isIgnoreMissing(), is(true)).     assertThat(processor.getTargetField(), equalTo(fieldName)).     assertProcessor(processor). }
false;public;0;17;;public void testCreateWithTargetField() throws Exception {     AbstractStringProcessor.Factory factory = newFactory().     String fieldName = RandomDocumentPicks.randomFieldName(random()).     String targetFieldName = RandomDocumentPicks.randomFieldName(random()).     String processorTag = randomAlphaOfLength(10).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     config.put("target_field", targetFieldName).     AbstractStringProcessor processor = factory.create(null, processorTag, modifyConfig(config)).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo(fieldName)).     assertThat(processor.isIgnoreMissing(), is(false)).     assertThat(processor.getTargetField(), equalTo(targetFieldName)).     assertProcessor(processor). }
false;public;0;10;;public void testCreateMissingField() throws Exception {     AbstractStringProcessor.Factory factory = newFactory().     Map<String, Object> config = new HashMap<>().     try {         factory.create(null, null, config).         fail("factory create should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[field] required property is missing")).     } }
