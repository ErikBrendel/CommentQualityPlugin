commented;modifiers;parameterAmount;loc;comment;code
false;public;0;34;;public void testAppendValuesToExistingList() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     Scalar scalar = randomFrom(Scalar.values()).     List<Object> list = new ArrayList<>().     int size = randomIntBetween(0, 10).     for (int i = 0. i < size. i++) {         list.add(scalar.randomValue()).     }     List<Object> checkList = new ArrayList<>(list).     String field = RandomDocumentPicks.addRandomField(random(), ingestDocument, list).     List<Object> values = new ArrayList<>().     Processor appendProcessor.     if (randomBoolean()) {         Object value = scalar.randomValue().         values.add(value).         appendProcessor = createAppendProcessor(field, value).     } else {         int valuesSize = randomIntBetween(0, 10).         for (int i = 0. i < valuesSize. i++) {             values.add(scalar.randomValue()).         }         appendProcessor = createAppendProcessor(field, values).     }     appendProcessor.execute(ingestDocument).     Object fieldValue = ingestDocument.getFieldValue(field, Object.class).     assertThat(fieldValue, sameInstance(list)).     assertThat(list.size(), equalTo(size + values.size())).     for (int i = 0. i < size. i++) {         assertThat(list.get(i), equalTo(checkList.get(i))).     }     for (int i = size. i < size + values.size(). i++) {         assertThat(list.get(i), equalTo(values.get(i - size))).     } }
false;public;0;22;;public void testAppendValuesToNonExistingList() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     String field = RandomDocumentPicks.randomFieldName(random()).     Scalar scalar = randomFrom(Scalar.values()).     List<Object> values = new ArrayList<>().     Processor appendProcessor.     if (randomBoolean()) {         Object value = scalar.randomValue().         values.add(value).         appendProcessor = createAppendProcessor(field, value).     } else {         int valuesSize = randomIntBetween(0, 10).         for (int i = 0. i < valuesSize. i++) {             values.add(scalar.randomValue()).         }         appendProcessor = createAppendProcessor(field, values).     }     appendProcessor.execute(ingestDocument).     List<?> list = ingestDocument.getFieldValue(field, List.class).     assertThat(list, not(sameInstance(values))).     assertThat(list, equalTo(values)). }
false;public;0;26;;public void testConvertScalarToList() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     Scalar scalar = randomFrom(Scalar.values()).     Object initialValue = scalar.randomValue().     String field = RandomDocumentPicks.addRandomField(random(), ingestDocument, initialValue).     List<Object> values = new ArrayList<>().     Processor appendProcessor.     if (randomBoolean()) {         Object value = scalar.randomValue().         values.add(value).         appendProcessor = createAppendProcessor(field, value).     } else {         int valuesSize = randomIntBetween(0, 10).         for (int i = 0. i < valuesSize. i++) {             values.add(scalar.randomValue()).         }         appendProcessor = createAppendProcessor(field, values).     }     appendProcessor.execute(ingestDocument).     List<?> fieldValue = ingestDocument.getFieldValue(field, List.class).     assertThat(fieldValue.size(), equalTo(values.size() + 1)).     assertThat(fieldValue.get(0), equalTo(initialValue)).     for (int i = 1. i < values.size() + 1. i++) {         assertThat(fieldValue.get(i), equalTo(values.get(i - 1))).     } }
false;public;0;32;;public void testAppendMetadataExceptVersion() throws Exception {     // here any metadata field value becomes a list, which won't make sense in most of the cases,     // but support for append is streamlined like for set so we test it     MetaData randomMetaData = randomFrom(MetaData.INDEX, MetaData.TYPE, MetaData.ID, MetaData.ROUTING).     List<String> values = new ArrayList<>().     Processor appendProcessor.     if (randomBoolean()) {         String value = randomAlphaOfLengthBetween(1, 10).         values.add(value).         appendProcessor = createAppendProcessor(randomMetaData.getFieldName(), value).     } else {         int valuesSize = randomIntBetween(0, 10).         for (int i = 0. i < valuesSize. i++) {             values.add(randomAlphaOfLengthBetween(1, 10)).         }         appendProcessor = createAppendProcessor(randomMetaData.getFieldName(), values).     }     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     Object initialValue = ingestDocument.getSourceAndMetadata().get(randomMetaData.getFieldName()).     appendProcessor.execute(ingestDocument).     List<?> list = ingestDocument.getFieldValue(randomMetaData.getFieldName(), List.class).     if (initialValue == null) {         assertThat(list, equalTo(values)).     } else {         assertThat(list.size(), equalTo(values.size() + 1)).         assertThat(list.get(0), equalTo(initialValue)).         for (int i = 1. i < list.size(). i++) {             assertThat(list.get(i), equalTo(values.get(i - 1))).         }     } }
false;private,static;2;5;;private static Processor createAppendProcessor(String fieldName, Object fieldValue) {     return new AppendProcessor(randomAlphaOfLength(10), new TestTemplateService.MockTemplateScript.Factory(fieldName), ValueSource.wrap(fieldValue, TestTemplateService.instance())). }
false;;0;4;;@Override Object randomValue() {     return randomInt(). }
false;;0;4;;@Override Object randomValue() {     return randomDouble(). }
false;;0;4;;@Override Object randomValue() {     return randomFloat(). }
false;;0;4;;@Override Object randomValue() {     return randomBoolean(). }
false;;0;4;;@Override Object randomValue() {     return randomAlphaOfLengthBetween(1, 10). }
false;;0;9;;@Override Object randomValue() {     int numItems = randomIntBetween(1, 10).     Map<String, Object> map = new HashMap<>(numItems).     for (int i = 0. i < numItems. i++) {         map.put(randomAlphaOfLengthBetween(1, 10), randomFrom(Scalar.values()).randomValue()).     }     return map. }
false;;0;4;;@Override Object randomValue() {     return null. }
false;abstract;0;1;;abstract Object randomValue().
