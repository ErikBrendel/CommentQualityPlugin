commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private TemplateScript.Factory templatize(Locale locale) {     return new TestTemplateService.MockTemplateScript.Factory(locale.getLanguage()). }
false;private;1;3;;private TemplateScript.Factory templatize(ZoneId timezone) {     return new TestTemplateService.MockTemplateScript.Factory(timezone.getId()). }
false;public;0;10;;public void testJavaPattern() {     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH), "date_as_string", Collections.singletonList("yyyy dd MM HH:mm:ss"), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "2010 12 06 11:05:15").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("2010-06-12T11:05:15.000+02:00")). }
false;public;0;37;;public void testJavaPatternMultipleFormats() {     List<String> matchFormats = new ArrayList<>().     matchFormats.add("yyyy dd MM").     matchFormats.add("dd/MM/yyyy").     matchFormats.add("dd-MM-yyyy").     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH), "date_as_string", matchFormats, "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "2010 12 06").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("2010-06-12T00:00:00.000+02:00")).     document = new HashMap<>().     document.put("date_as_string", "12/06/2010").     ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("2010-06-12T00:00:00.000+02:00")).     document = new HashMap<>().     document.put("date_as_string", "12-06-2010").     ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("2010-06-12T00:00:00.000+02:00")).     document = new HashMap<>().     document.put("date_as_string", "2010").     ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     try {         dateProcessor.execute(ingestDocument).         fail("processor should have failed due to not supported date format").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("unable to parse date [2010]")).     } }
false;public;0;11;;public void testJavaPatternNoTimezone() {     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), null, null, "date_as_string", Arrays.asList("yyyy dd MM HH:mm:ss XXX"), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "2010 12 06 00:00:00 -02:00").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("2010-06-12T02:00:00.000Z")). }
false;public;0;14;;public void testInvalidJavaPattern() {     try {         DateProcessor processor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC), templatize(randomLocale(random())), "date_as_string", Collections.singletonList("invalid pattern"), "date_as_date").         Map<String, Object> document = new HashMap<>().         document.put("date_as_string", "2010").         processor.execute(RandomDocumentPicks.randomIngestDocument(random(), document)).         fail("date processor execution should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("unable to parse date [2010]")).         assertThat(e.getCause().getMessage(), equalTo("Invalid format: [invalid pattern]: Unknown pattern letter: i")).     } }
false;public;0;11;;public void testJavaPatternLocale() {     assumeFalse("Can't run in a FIPS JVM, Joda parse date error", inFipsJvm()).     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ITALIAN), "date_as_string", Collections.singletonList("yyyy dd MMMM"), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "2010 12 giugno").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("2010-06-12T00:00:00.000+02:00")). }
false;public;0;11;;public void testJavaPatternEnglishLocale() {     // Since testJavaPatternLocale is muted in FIPS mode, test that we can correctly parse dates in english     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH), "date_as_string", Collections.singletonList("yyyy dd MMMM"), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "2010 12 June").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("2010-06-12T00:00:00.000+02:00")). }
false;public;0;12;;public void testJavaPatternDefaultYear() {     String format = randomFrom("dd/MM", "8dd/MM").     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH), "date_as_string", Collections.singletonList(format), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "12/06").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo(ZonedDateTime.now().getYear() + "-06-12T00:00:00.000+02:00")). }
false;public;0;11;;public void testTAI64N() {     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.ofHours(2)), templatize(randomLocale(random())), "date_as_string", Collections.singletonList("TAI64N"), "date_as_date").     Map<String, Object> document = new HashMap<>().     String dateAsString = (randomBoolean() ? "@" : "") + "4000000050d506482dbdf024".     document.put("date_as_string", dateAsString).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("2012-12-22T03:00:46.767+02:00")). }
false;public;0;15;;public void testUnixMs() {     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC), templatize(randomLocale(random())), "date_as_string", Collections.singletonList("UNIX_MS"), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "1000500").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("1970-01-01T00:16:40.500Z")).     document = new HashMap<>().     document.put("date_as_string", 1000500L).     ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("1970-01-01T00:16:40.500Z")). }
false;public;0;10;;public void testUnix() {     DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC), templatize(randomLocale(random())), "date_as_string", Collections.singletonList("UNIX"), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "1000.5").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     dateProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("date_as_date", String.class), equalTo("1970-01-01T00:16:40.500Z")). }
false;public;0;11;;public void testInvalidTimezone() {     DateProcessor processor = new DateProcessor(randomAlphaOfLength(10), new TestTemplateService.MockTemplateScript.Factory("invalid_timezone"), templatize(randomLocale(random())), "date_as_string", Collections.singletonList("yyyy"), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "2010").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(RandomDocumentPicks.randomIngestDocument(random(), document))).     assertThat(e.getMessage(), equalTo("unable to parse date [2010]")).     assertThat(e.getCause().getMessage(), equalTo("Unknown time-zone ID: invalid_timezone")). }
false;public;0;11;;public void testInvalidLocale() {     DateProcessor processor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC), new TestTemplateService.MockTemplateScript.Factory("invalid_locale"), "date_as_string", Collections.singletonList("yyyy"), "date_as_date").     Map<String, Object> document = new HashMap<>().     document.put("date_as_string", "2010").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(RandomDocumentPicks.randomIngestDocument(random(), document))).     assertThat(e.getMessage(), equalTo("unable to parse date [2010]")).     assertThat(e.getCause().getMessage(), equalTo("Unknown language: invalid")). }
