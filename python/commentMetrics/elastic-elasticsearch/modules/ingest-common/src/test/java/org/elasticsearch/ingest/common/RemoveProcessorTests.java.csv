commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testRemoveFields() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     String field = RandomDocumentPicks.randomExistingFieldName(random(), ingestDocument).     Processor processor = new RemoveProcessor(randomAlphaOfLength(10), Collections.singletonList(new TestTemplateService.MockTemplateScript.Factory(field)), false).     processor.execute(ingestDocument).     assertThat(ingestDocument.hasField(field), equalTo(false)). }
false;public;0;14;;public void testRemoveNonExistingField() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     String processorTag = randomAlphaOfLength(10).     Processor processor = new RemoveProcessor.Factory(TestTemplateService.instance()).create(null, processorTag, config).     try {         processor.execute(ingestDocument).         fail("remove field should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("not present as part of path [" + fieldName + "]")).     } }
false;public;0;10;;public void testIgnoreMissing() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     config.put("ignore_missing", true).     String processorTag = randomAlphaOfLength(10).     Processor processor = new RemoveProcessor.Factory(TestTemplateService.instance()).create(null, processorTag, config).     processor.execute(ingestDocument). }
