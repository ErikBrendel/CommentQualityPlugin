commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testJoinStrings() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     int numItems = randomIntBetween(1, 10).     String separator = randomFrom(SEPARATORS).     List<String> fieldValue = new ArrayList<>(numItems).     String expectedResult = "".     for (int j = 0. j < numItems. j++) {         String value = randomAlphaOfLengthBetween(1, 10).         fieldValue.add(value).         expectedResult += value.         if (j < numItems - 1) {             expectedResult += separator.         }     }     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, fieldValue).     Processor processor = new JoinProcessor(randomAlphaOfLength(10), fieldName, separator, fieldName).     processor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue(fieldName, String.class), equalTo(expectedResult)). }
false;public;0;19;;public void testJoinIntegers() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     int numItems = randomIntBetween(1, 10).     String separator = randomFrom(SEPARATORS).     List<Integer> fieldValue = new ArrayList<>(numItems).     String expectedResult = "".     for (int j = 0. j < numItems. j++) {         int value = randomInt().         fieldValue.add(value).         expectedResult += value.         if (j < numItems - 1) {             expectedResult += separator.         }     }     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, fieldValue).     Processor processor = new JoinProcessor(randomAlphaOfLength(10), fieldName, separator, fieldName).     processor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue(fieldName, String.class), equalTo(expectedResult)). }
false;public;0;11;;public void testJoinNonListField() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     ingestDocument.setFieldValue(fieldName, randomAlphaOfLengthBetween(1, 10)).     Processor processor = new JoinProcessor(randomAlphaOfLength(10), fieldName, "-", fieldName).     try {         processor.execute(ingestDocument).     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("field [" + fieldName + "] of type [java.lang.String] cannot be cast to [java.util.List]")).     } }
false;public;0;10;;public void testJoinNonExistingField() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>()).     String fieldName = RandomDocumentPicks.randomFieldName(random()).     Processor processor = new JoinProcessor(randomAlphaOfLength(10), fieldName, "-", fieldName).     try {         processor.execute(ingestDocument).     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("not present as part of path [" + fieldName + "]")).     } }
false;public;0;9;;public void testJoinNullValue() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), Collections.singletonMap("field", null)).     Processor processor = new JoinProcessor(randomAlphaOfLength(10), "field", "-", "field").     try {         processor.execute(ingestDocument).     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("field [field] is null, cannot join.")).     } }
false;public;0;20;;public void testJoinWithTargetField() throws Exception {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     int numItems = randomIntBetween(1, 10).     String separator = randomFrom(SEPARATORS).     List<String> fieldValue = new ArrayList<>(numItems).     String expectedResult = "".     for (int j = 0. j < numItems. j++) {         String value = randomAlphaOfLengthBetween(1, 10).         fieldValue.add(value).         expectedResult += value.         if (j < numItems - 1) {             expectedResult += separator.         }     }     String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, fieldValue).     String targetFieldName = fieldName + randomAlphaOfLength(5).     Processor processor = new JoinProcessor(randomAlphaOfLength(10), fieldName, separator, targetFieldName).     processor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue(targetFieldName, String.class), equalTo(expectedResult)). }
