commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@SuppressWarnings("unchecked") public void testExecute() throws Exception {     String processorTag = randomAlphaOfLength(3).     String randomField = randomAlphaOfLength(3).     String randomTargetField = randomAlphaOfLength(2).     JsonProcessor jsonProcessor = new JsonProcessor(processorTag, randomField, randomTargetField, false).     Map<String, Object> document = new HashMap<>().     Map<String, Object> randomJsonMap = RandomDocumentPicks.randomSource(random()).     XContentBuilder builder = JsonXContent.contentBuilder().map(randomJsonMap).     String randomJson = XContentHelper.convertToJson(BytesReference.bytes(builder), false, XContentType.JSON).     document.put(randomField, randomJson).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     jsonProcessor.execute(ingestDocument).     Map<String, Object> jsonified = ingestDocument.getFieldValue(randomTargetField, Map.class).     assertEquals(ingestDocument.getFieldValue(randomTargetField, Object.class), jsonified). }
false;public;0;10;;public void testInvalidValue() {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     document.put("field", "blah blah").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     Exception exception = expectThrows(IllegalArgumentException.class, () -> jsonProcessor.execute(ingestDocument)).     assertThat(exception.getCause().getMessage(), containsString("Unrecognized token 'blah': " + "was expecting ('true', 'false' or 'null')")). }
false;public;0;9;;public void testByteArray() {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     document.put("field", new byte[] { 0, 1 }).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     Exception exception = expectThrows(IllegalArgumentException.class, () -> jsonProcessor.execute(ingestDocument)).     assertThat(exception.getCause().getMessage(), containsString("Unrecognized token 'B': was expecting ('true', 'false' or 'null')")). }
false;public;0;8;;public void testNull() throws Exception {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     document.put("field", null).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     jsonProcessor.execute(ingestDocument).     assertNull(ingestDocument.getFieldValue("target_field", Object.class)). }
false;public;0;9;;public void testBoolean() throws Exception {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     boolean value = true.     document.put("field", value).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     jsonProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("target_field", Object.class), equalTo(value)). }
false;public;0;9;;public void testInteger() throws Exception {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     int value = 3.     document.put("field", value).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     jsonProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("target_field", Object.class), equalTo(value)). }
false;public;0;9;;public void testDouble() throws Exception {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     double value = 3.0.     document.put("field", value).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     jsonProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("target_field", Object.class), equalTo(value)). }
false;public;0;9;;public void testString() throws Exception {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     String value = "hello world".     document.put("field", "\"" + value + "\"").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     jsonProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("target_field", Object.class), equalTo(value)). }
false;public;0;9;;public void testArray() throws Exception {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     List<Boolean> value = Arrays.asList(true, true, false).     document.put("field", value.toString()).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     jsonProcessor.execute(ingestDocument).     assertThat(ingestDocument.getFieldValue("target_field", Object.class), equalTo(value)). }
false;public;0;8;;public void testFieldMissing() {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", false).     Map<String, Object> document = new HashMap<>().     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     Exception exception = expectThrows(IllegalArgumentException.class, () -> jsonProcessor.execute(ingestDocument)).     assertThat(exception.getMessage(), equalTo("field [field] not present as part of path [field]")). }
false;public;0;18;;public void testAddToRoot() throws Exception {     String processorTag = randomAlphaOfLength(3).     String randomTargetField = randomAlphaOfLength(2).     JsonProcessor jsonProcessor = new JsonProcessor(processorTag, "a", randomTargetField, true).     Map<String, Object> document = new HashMap<>().     String json = "{\"a\": 1, \"b\": 2}".     document.put("a", json).     document.put("c", "see").     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     jsonProcessor.execute(ingestDocument).     Map<String, Object> sourceAndMetadata = ingestDocument.getSourceAndMetadata().     assertEquals(1, sourceAndMetadata.get("a")).     assertEquals(2, sourceAndMetadata.get("b")).     assertEquals("see", sourceAndMetadata.get("c")). }
false;public;0;8;;public void testAddBoolToRoot() {     JsonProcessor jsonProcessor = new JsonProcessor("tag", "field", "target_field", true).     Map<String, Object> document = new HashMap<>().     document.put("field", true).     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document).     Exception exception = expectThrows(IllegalArgumentException.class, () -> jsonProcessor.execute(ingestDocument)).     assertThat(exception.getMessage(), containsString("cannot add non-map fields to root of document")). }
