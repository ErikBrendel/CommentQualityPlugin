commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testCreate() {     DissectProcessor.Factory factory = new DissectProcessor.Factory().     String fieldName = RandomDocumentPicks.randomFieldName(random()).     String processorTag = randomAlphaOfLength(10).     String pattern = "%{a},%{b},%{c}".     String appendSeparator = ":".     Map<String, Object> config = new HashMap<>().     config.put("field", fieldName).     config.put("pattern", pattern).     config.put("append_separator", appendSeparator).     config.put("ignore_missing", true).     DissectProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.field, equalTo(fieldName)).     assertThat(processor.pattern, equalTo(pattern)).     assertThat(processor.appendSeparator, equalTo(appendSeparator)).     assertThat(processor.dissectParser, is(notNullValue())).     assertThat(processor.ignoreMissing, is(true)). }
false;public;0;7;;public void testCreateMissingField() {     DissectProcessor.Factory factory = new DissectProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("pattern", "%{a},%{b},%{c}").     Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, "_tag", config)).     assertThat(e.getMessage(), Matchers.equalTo("[field] required property is missing")). }
false;public;0;7;;public void testCreateMissingPattern() {     DissectProcessor.Factory factory = new DissectProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("field", randomAlphaOfLength(10)).     Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, "_tag", config)).     assertThat(e.getMessage(), Matchers.equalTo("[pattern] required property is missing")). }
false;public;0;9;;public void testCreateMissingOptionals() {     DissectProcessor.Factory factory = new DissectProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("pattern", "%{a},%{b},%{c}").     config.put("field", randomAlphaOfLength(10)).     DissectProcessor processor = factory.create(null, "_tag", config).     assertThat(processor.appendSeparator, equalTo("")).     assertThat(processor.ignoreMissing, is(false)). }
false;public;0;7;;public void testCreateBadPattern() {     DissectProcessor.Factory factory = new DissectProcessor.Factory().     Map<String, Object> config = new HashMap<>().     config.put("pattern", "no keys defined").     config.put("field", randomAlphaOfLength(10)).     expectThrows(DissectException.class, () -> factory.create(null, "_tag", config)). }
