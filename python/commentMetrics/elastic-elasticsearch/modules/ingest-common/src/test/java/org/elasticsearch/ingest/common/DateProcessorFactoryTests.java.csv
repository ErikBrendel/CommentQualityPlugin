commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() {     factory = new DateProcessor.Factory(TestTemplateService.instance()). }
false;public;0;14;;public void testBuildDefaults() throws Exception {     Map<String, Object> config = new HashMap<>().     String sourceField = randomAlphaOfLengthBetween(1, 10).     config.put("field", sourceField).     config.put("formats", Collections.singletonList("dd/MM/yyyyy")).     String processorTag = randomAlphaOfLength(10).     DateProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo(sourceField)).     assertThat(processor.getTargetField(), equalTo(DateProcessor.DEFAULT_TARGET_FIELD)).     assertThat(processor.getFormats(), equalTo(Collections.singletonList("dd/MM/yyyyy"))).     assertNull(processor.getLocale()).     assertNull(processor.getTimezone()). }
false;public;0;13;;public void testMatchFieldIsMandatory() throws Exception {     Map<String, Object> config = new HashMap<>().     String targetField = randomAlphaOfLengthBetween(1, 10).     config.put("target_field", targetField).     config.put("formats", Collections.singletonList("dd/MM/yyyyy")).     try {         factory.create(null, null, config).         fail("processor creation should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), containsString("[field] required property is missing")).     } }
false;public;0;14;;public void testMatchFormatsIsMandatory() throws Exception {     Map<String, Object> config = new HashMap<>().     String sourceField = randomAlphaOfLengthBetween(1, 10).     String targetField = randomAlphaOfLengthBetween(1, 10).     config.put("field", sourceField).     config.put("target_field", targetField).     try {         factory.create(null, null, config).         fail("processor creation should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), containsString("[formats] required property is missing")).     } }
false;public;0;11;;public void testParseLocale() throws Exception {     Map<String, Object> config = new HashMap<>().     String sourceField = randomAlphaOfLengthBetween(1, 10).     config.put("field", sourceField).     config.put("formats", Collections.singletonList("dd/MM/yyyyy")).     Locale locale = randomFrom(Locale.GERMANY, Locale.FRENCH, Locale.ROOT).     config.put("locale", locale.toLanguageTag()).     DateProcessor processor = factory.create(null, null, config).     assertThat(processor.getLocale().newInstance(Collections.emptyMap()).execute(), equalTo(locale.toLanguageTag())). }
false;public;0;11;;public void testParseTimezone() throws Exception {     Map<String, Object> config = new HashMap<>().     String sourceField = randomAlphaOfLengthBetween(1, 10).     config.put("field", sourceField).     config.put("formats", Collections.singletonList("dd/MM/yyyyy")).     ZoneId timezone = randomZone().     config.put("timezone", timezone.getId()).     DateProcessor processor = factory.create(null, null, config).     assertThat(processor.getTimezone().newInstance(Collections.emptyMap()).execute(), equalTo(timezone.getId())). }
false;public;0;9;;public void testParseMatchFormats() throws Exception {     Map<String, Object> config = new HashMap<>().     String sourceField = randomAlphaOfLengthBetween(1, 10).     config.put("field", sourceField).     config.put("formats", Arrays.asList("dd/MM/yyyy", "dd-MM-yyyy")).     DateProcessor processor = factory.create(null, null, config).     assertThat(processor.getFormats(), equalTo(Arrays.asList("dd/MM/yyyy", "dd-MM-yyyy"))). }
false;public;0;13;;public void testParseMatchFormatsFailure() throws Exception {     Map<String, Object> config = new HashMap<>().     String sourceField = randomAlphaOfLengthBetween(1, 10).     config.put("field", sourceField).     config.put("formats", "dd/MM/yyyy").     try {         factory.create(null, null, config).         fail("processor creation should have failed").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), containsString("[formats] property isn't a list, but of type [java.lang.String]")).     } }
false;public;0;11;;public void testParseTargetField() throws Exception {     Map<String, Object> config = new HashMap<>().     String sourceField = randomAlphaOfLengthBetween(1, 10).     String targetField = randomAlphaOfLengthBetween(1, 10).     config.put("field", sourceField).     config.put("target_field", targetField).     config.put("formats", Arrays.asList("dd/MM/yyyy", "dd-MM-yyyy")).     DateProcessor processor = factory.create(null, null, config).     assertThat(processor.getTargetField(), equalTo(targetField)). }
