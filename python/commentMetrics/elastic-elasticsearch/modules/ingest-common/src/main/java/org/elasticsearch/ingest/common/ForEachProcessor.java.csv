commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;boolean isIgnoreMissing() {     return ignoreMissing. }
false;public;1;25;;@Override public IngestDocument execute(IngestDocument ingestDocument) throws Exception {     List<?> values = ingestDocument.getFieldValue(field, List.class, ignoreMissing).     if (values == null) {         if (ignoreMissing) {             return ingestDocument.         }         throw new IllegalArgumentException("field [" + field + "] is null, cannot loop over its elements.").     }     List<Object> newValues = new ArrayList<>(values.size()).     IngestDocument document = ingestDocument.     for (Object value : values) {         Object previousValue = ingestDocument.getIngestMetadata().put("_value", value).         try {             document = processor.execute(document).             if (document == null) {                 return null.             }         } finally {             newValues.add(ingestDocument.getIngestMetadata().put("_value", previousValue)).         }     }     document.setFieldValue(field, newValues).     return document. }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;;0;3;;String getField() {     return field. }
false;;0;3;;Processor getProcessor() {     return processor. }
false;public;3;15;;@Override public ForEachProcessor create(Map<String, Processor.Factory> factories, String tag, Map<String, Object> config) throws Exception {     String field = readStringProperty(TYPE, tag, config, "field").     boolean ignoreMissing = readBooleanProperty(TYPE, tag, config, "ignore_missing", false).     Map<String, Map<String, Object>> processorConfig = readMap(TYPE, tag, config, "processor").     Set<Map.Entry<String, Map<String, Object>>> entries = processorConfig.entrySet().     if (entries.size() != 1) {         throw newConfigurationException(TYPE, tag, "processor", "Must specify exactly one processor type").     }     Map.Entry<String, Map<String, Object>> entry = entries.iterator().next().     Processor processor = ConfigurationUtils.readProcessor(factories, scriptService, entry.getKey(), entry.getValue()).     return new ForEachProcessor(tag, field, processor, ignoreMissing). }
