commented;modifiers;parameterAmount;loc;comment;code
false;public;1;40;;@Override @SuppressWarnings("unchecked") public IngestDocument execute(IngestDocument ingestDocument) throws Exception {     String path.     Map<String, Object> map.     if (this.path != null) {         path = this.path + "." + field.         map = ingestDocument.getFieldValue(this.path, Map.class).     } else {         path = field.         map = ingestDocument.getSourceAndMetadata().     }     if (map.containsKey(field)) {         if (ingestDocument.hasField(path)) {             Object value = map.remove(field).             ingestDocument.appendFieldValue(path, value).         } else {             // IngestDocument#setFieldValue(...) would fail too, but the error isn't very understandable             for (int index = path.indexOf('.'). index != -1. index = path.indexOf('.', index + 1)) {                 String partialPath = path.substring(0, index).                 if (ingestDocument.hasField(partialPath)) {                     Object val = ingestDocument.getFieldValue(partialPath, Object.class).                     if ((val instanceof Map) == false) {                         throw new IllegalArgumentException("cannot expend [" + path + "], because [" + partialPath + "] is not an object field, but a value field").                     }                 } else {                     break.                 }             }             Object value = map.remove(field).             ingestDocument.setFieldValue(path, value).         }     }     return ingestDocument. }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;;0;3;;String getPath() {     return path. }
false;;0;3;;String getField() {     return field. }
false;public;3;24;;@Override public Processor create(Map<String, Processor.Factory> processorFactories, String tag, Map<String, Object> config) throws Exception {     String field = ConfigurationUtils.readStringProperty(TYPE, tag, config, "field").     if (field.contains(".") == false) {         throw ConfigurationUtils.newConfigurationException(ConfigurationUtils.TAG_KEY, tag, "field", "field does not contain a dot").     }     if (field.indexOf('.') == 0 || field.lastIndexOf('.') == field.length() - 1) {         throw ConfigurationUtils.newConfigurationException(ConfigurationUtils.TAG_KEY, tag, "field", "Field can't start or end with a dot").     }     int firstIndex = -1.     for (int index = field.indexOf('.'). index != -1. index = field.indexOf('.', index + 1)) {         if (index - firstIndex == 1) {             throw ConfigurationUtils.newConfigurationException(ConfigurationUtils.TAG_KEY, tag, "field", "No space between dots").         }         firstIndex = index.     }     String path = ConfigurationUtils.readOptionalStringProperty(TYPE, tag, config, "path").     return new DotExpanderProcessor(tag, path, field). }
