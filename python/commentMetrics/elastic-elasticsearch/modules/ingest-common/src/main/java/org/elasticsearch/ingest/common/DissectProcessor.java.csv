commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public IngestDocument execute(IngestDocument ingestDocument) {     String input = ingestDocument.getFieldValue(field, String.class, ignoreMissing).     if (input == null && ignoreMissing) {         return ingestDocument.     } else if (input == null) {         throw new IllegalArgumentException("field [" + field + "] is null, cannot process it.").     }     dissectParser.parse(input).forEach(ingestDocument::setFieldValue).     return ingestDocument. }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;public;3;8;;@Override public DissectProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) {     String field = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "field").     String pattern = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "pattern").     String appendSeparator = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "append_separator", "").     boolean ignoreMissing = ConfigurationUtils.readBooleanProperty(TYPE, processorTag, config, "ignore_missing", false).     return new DissectProcessor(processorTag, field, pattern, appendSeparator, ignoreMissing). }
