commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private ZoneId newDateTimeZone(Map<String, Object> params) {     return timezone == null ? ZoneOffset.UTC : ZoneId.of(timezone.newInstance(params).execute()). }
false;private;1;3;;private Locale newLocale(Map<String, Object> params) {     return (locale == null) ? Locale.ROOT : LocaleUtils.parse(locale.newInstance(params).execute()). }
false;public;1;27;;@Override public IngestDocument execute(IngestDocument ingestDocument) {     Object obj = ingestDocument.getFieldValue(field, Object.class).     String value = null.     if (obj != null) {         // Not use Objects.toString(...) here, because null gets changed to "null" which may confuse some date parsers         value = obj.toString().     }     ZonedDateTime dateTime = null.     Exception lastException = null.     for (Function<Map<String, Object>, Function<String, ZonedDateTime>> dateParser : dateParsers) {         try {             dateTime = dateParser.apply(ingestDocument.getSourceAndMetadata()).apply(value).         } catch (Exception e) {             // try the next parser and keep track of the exceptions             lastException = ExceptionsHelper.useOrSuppress(lastException, e).         }     }     if (dateTime == null) {         throw new IllegalArgumentException("unable to parse date [" + value + "]", lastException).     }     ingestDocument.setFieldValue(targetField, FORMATTER.format(dateTime)).     return ingestDocument. }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;;0;3;;TemplateScript.Factory getTimezone() {     return timezone. }
false;;0;3;;TemplateScript.Factory getLocale() {     return locale. }
false;;0;3;;String getField() {     return field. }
false;;0;3;;String getTargetField() {     return targetField. }
false;;0;3;;List<String> getFormats() {     return formats. }
false;public;3;19;;public DateProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {     String field = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "field").     String targetField = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "target_field", DEFAULT_TARGET_FIELD).     String timezoneString = ConfigurationUtils.readOptionalStringProperty(TYPE, processorTag, config, "timezone").     TemplateScript.Factory compiledTimezoneTemplate = null.     if (timezoneString != null) {         compiledTimezoneTemplate = ConfigurationUtils.compileTemplate(TYPE, processorTag, "timezone", timezoneString, scriptService).     }     String localeString = ConfigurationUtils.readOptionalStringProperty(TYPE, processorTag, config, "locale").     TemplateScript.Factory compiledLocaleTemplate = null.     if (localeString != null) {         compiledLocaleTemplate = ConfigurationUtils.compileTemplate(TYPE, processorTag, "locale", localeString, scriptService).     }     List<String> formats = ConfigurationUtils.readList(TYPE, processorTag, config, "formats").     return new DateProcessor(processorTag, compiledTimezoneTemplate, compiledLocaleTemplate, field, formats, targetField). }
