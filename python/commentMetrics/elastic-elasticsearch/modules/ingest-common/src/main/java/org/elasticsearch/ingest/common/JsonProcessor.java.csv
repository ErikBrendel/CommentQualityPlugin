commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getField() {     return field. }
false;public;0;3;;public String getTargetField() {     return targetField. }
false;;0;3;;boolean isAddToRoot() {     return addToRoot. }
false;public,static;1;27;;public static Object apply(Object fieldValue) {     BytesReference bytesRef = fieldValue == null ? new BytesArray("null") : new BytesArray(fieldValue.toString()).     try (InputStream stream = bytesRef.streamInput().         XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {         XContentParser.Token token = parser.nextToken().         Object value = null.         if (token == XContentParser.Token.VALUE_NULL) {             value = null.         } else if (token == XContentParser.Token.VALUE_STRING) {             value = parser.text().         } else if (token == XContentParser.Token.VALUE_NUMBER) {             value = parser.numberValue().         } else if (token == XContentParser.Token.VALUE_BOOLEAN) {             value = parser.booleanValue().         } else if (token == XContentParser.Token.START_OBJECT) {             value = parser.map().         } else if (token == XContentParser.Token.START_ARRAY) {             value = parser.list().         } else if (token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {             throw new IllegalArgumentException("cannot read binary value").         }         return value.     } catch (IOException e) {         throw new IllegalArgumentException(e).     } }
false;public,static;2;10;;public static void apply(Map<String, Object> ctx, String fieldName) {     Object value = apply(ctx.get(fieldName)).     if (value instanceof Map) {         @SuppressWarnings("unchecked")         Map<String, Object> map = (Map<String, Object>) value.         ctx.putAll(map).     } else {         throw new IllegalArgumentException("cannot add non-map fields to root of document").     } }
false;public;1;9;;@Override public IngestDocument execute(IngestDocument document) throws Exception {     if (addToRoot) {         apply(document.getSourceAndMetadata(), field).     } else {         document.setFieldValue(targetField, apply(document.getFieldValue(field, Object.class))).     }     return document. }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;public;3;18;;@Override public JsonProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {     String field = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "field").     String targetField = ConfigurationUtils.readOptionalStringProperty(TYPE, processorTag, config, "target_field").     boolean addToRoot = ConfigurationUtils.readBooleanProperty(TYPE, processorTag, config, "add_to_root", false).     if (addToRoot && targetField != null) {         throw newConfigurationException(TYPE, processorTag, "target_field", "Cannot set a target field while also setting `add_to_root` to true").     }     if (targetField == null) {         targetField = field.     }     return new JsonProcessor(processorTag, field, targetField, addToRoot). }
