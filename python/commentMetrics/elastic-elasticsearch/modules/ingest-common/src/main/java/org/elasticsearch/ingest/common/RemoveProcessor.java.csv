commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<TemplateScript.Factory> getFields() {     return fields. }
false;public;1;14;;@Override public IngestDocument execute(IngestDocument document) {     if (ignoreMissing) {         fields.forEach(field -> {             String path = document.renderTemplate(field).             if (document.hasField(path)) {                 document.removeField(path).             }         }).     } else {         fields.forEach(document::removeField).     }     return document. }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;public;3;19;;@Override public RemoveProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {     final List<String> fields = new ArrayList<>().     final Object field = ConfigurationUtils.readObject(TYPE, processorTag, config, "field").     if (field instanceof List) {         @SuppressWarnings("unchecked")         List<String> stringList = (List<String>) field.         fields.addAll(stringList).     } else {         fields.add((String) field).     }     final List<TemplateScript.Factory> compiledTemplates = fields.stream().map(f -> ConfigurationUtils.compileTemplate(TYPE, processorTag, "field", f, scriptService)).collect(Collectors.toList()).     boolean ignoreMissing = ConfigurationUtils.readBooleanProperty(TYPE, processorTag, config, "ignore_missing", false).     return new RemoveProcessor(processorTag, compiledTemplates, ignoreMissing). }
