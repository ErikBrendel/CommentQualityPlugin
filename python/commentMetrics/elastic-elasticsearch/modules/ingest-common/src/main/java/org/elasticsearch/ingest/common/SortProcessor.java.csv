commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return this.direction. }
false;public,static;1;13;;public static SortOrder fromString(String value) {     if (value == null) {         throw new IllegalArgumentException("Sort direction cannot be null").     }     if (value.equals(ASCENDING.toString())) {         return ASCENDING.     } else if (value.equals(DESCENDING.toString())) {         return DESCENDING.     }     throw new IllegalArgumentException("Sort direction [" + value + "] not recognized." + " Valid values are: [asc, desc]"). }
false;;0;3;;String getField() {     return field. }
false;;0;3;;SortOrder getOrder() {     return order. }
false;;0;3;;String getTargetField() {     return targetField. }
false;public;1;20;;@Override @SuppressWarnings("unchecked") public IngestDocument execute(IngestDocument document) {     List<? extends Comparable<Object>> list = document.getFieldValue(field, List.class).     if (list == null) {         throw new IllegalArgumentException("field [" + field + "] is null, cannot sort.").     }     List<? extends Comparable<Object>> copy = new ArrayList<>(list).     if (order.equals(SortOrder.ASCENDING)) {         Collections.sort(copy).     } else {         Collections.sort(copy, Collections.reverseOrder()).     }     document.setFieldValue(targetField, copy).     return document. }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;public;3;18;;@Override public SortProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {     String field = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, FIELD).     String targetField = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "target_field", field).     try {         SortOrder direction = SortOrder.fromString(ConfigurationUtils.readStringProperty(TYPE, processorTag, config, ORDER, DEFAULT_ORDER)).         return new SortProcessor(processorTag, field, direction, targetField).     } catch (IllegalArgumentException e) {         throw ConfigurationUtils.newConfigurationException(TYPE, processorTag, ORDER, e.getMessage()).     } }
