commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;@Override public Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {     Path userAgentConfigDirectory = parameters.env.configFile().resolve("ingest-user-agent").     if (Files.exists(userAgentConfigDirectory) == false && Files.isDirectory(userAgentConfigDirectory)) {         throw new IllegalStateException("the user agent directory [" + userAgentConfigDirectory + "] containing the regex file doesn't exist").     }     long cacheSize = CACHE_SIZE_SETTING.get(parameters.env.settings()).     Map<String, UserAgentParser> userAgentParsers.     try {         userAgentParsers = createUserAgentParsers(userAgentConfigDirectory, new UserAgentCache(cacheSize)).     } catch (IOException e) {         throw new RuntimeException(e).     }     return Collections.singletonMap(UserAgentProcessor.TYPE, new UserAgentProcessor.Factory(userAgentParsers)). }
false;static;2;24;;static Map<String, UserAgentParser> createUserAgentParsers(Path userAgentConfigDirectory, UserAgentCache cache) throws IOException {     Map<String, UserAgentParser> userAgentParsers = new HashMap<>().     UserAgentParser defaultParser = new UserAgentParser(DEFAULT_PARSER_NAME, IngestUserAgentPlugin.class.getResourceAsStream("/regexes.yml"), cache).     userAgentParsers.put(DEFAULT_PARSER_NAME, defaultParser).     if (Files.exists(userAgentConfigDirectory) && Files.isDirectory(userAgentConfigDirectory)) {         PathMatcher pathMatcher = userAgentConfigDirectory.getFileSystem().getPathMatcher("glob:**.yml").         try (Stream<Path> regexFiles = Files.find(userAgentConfigDirectory, 1, (path, attr) -> attr.isRegularFile() && pathMatcher.matches(path))) {             Iterable<Path> iterable = regexFiles::iterator.             for (Path path : iterable) {                 String parserName = path.getFileName().toString().                 try (InputStream regexStream = Files.newInputStream(path, StandardOpenOption.READ)) {                     userAgentParsers.put(parserName, new UserAgentParser(parserName, regexStream, cache)).                 }             }         }     }     return Collections.unmodifiableMap(userAgentParsers). }
