commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;boolean isIgnoreMissing() {     return ignoreMissing. }
false;public;1;82;;@Override public IngestDocument execute(IngestDocument ingestDocument) {     String userAgent = ingestDocument.getFieldValue(field, String.class, ignoreMissing).     if (userAgent == null && ignoreMissing) {         return ingestDocument.     } else if (userAgent == null) {         throw new IllegalArgumentException("field [" + field + "] is null, cannot parse user-agent.").     }     Details uaClient = parser.parse(userAgent).     Map<String, Object> uaDetails = new HashMap<>().     // Parse the user agent in the ECS (Elastic Common Schema) format     for (Property property : this.properties) {         switch(property) {             case ORIGINAL:                 uaDetails.put("original", userAgent).                 break.             case NAME:                 if (uaClient.userAgent != null && uaClient.userAgent.name != null) {                     uaDetails.put("name", uaClient.userAgent.name).                 } else {                     uaDetails.put("name", "Other").                 }                 break.             case VERSION:                 StringBuilder version = new StringBuilder().                 if (uaClient.userAgent != null && uaClient.userAgent.major != null) {                     version.append(uaClient.userAgent.major).                     if (uaClient.userAgent.minor != null) {                         version.append(".").append(uaClient.userAgent.minor).                         if (uaClient.userAgent.patch != null) {                             version.append(".").append(uaClient.userAgent.patch).                             if (uaClient.userAgent.build != null) {                                 version.append(".").append(uaClient.userAgent.build).                             }                         }                     }                     uaDetails.put("version", version.toString()).                 }                 break.             case OS:                 if (uaClient.operatingSystem != null) {                     Map<String, String> osDetails = new HashMap<>(3).                     if (uaClient.operatingSystem.name != null) {                         osDetails.put("name", uaClient.operatingSystem.name).                         StringBuilder sb = new StringBuilder().                         if (uaClient.operatingSystem.major != null) {                             sb.append(uaClient.operatingSystem.major).                             if (uaClient.operatingSystem.minor != null) {                                 sb.append(".").append(uaClient.operatingSystem.minor).                                 if (uaClient.operatingSystem.patch != null) {                                     sb.append(".").append(uaClient.operatingSystem.patch).                                     if (uaClient.operatingSystem.build != null) {                                         sb.append(".").append(uaClient.operatingSystem.build).                                     }                                 }                             }                             osDetails.put("version", sb.toString()).                             osDetails.put("full", uaClient.operatingSystem.name + " " + sb.toString()).                         }                         uaDetails.put("os", osDetails).                     }                 }                 break.             case DEVICE:                 Map<String, String> deviceDetails = new HashMap<>(1).                 if (uaClient.device != null && uaClient.device.name != null) {                     deviceDetails.put("name", uaClient.device.name).                 } else {                     deviceDetails.put("name", "Other").                 }                 uaDetails.put("device", deviceDetails).                 break.         }     }     ingestDocument.setFieldValue(targetField, uaDetails).     return ingestDocument. }
true;private;1;29;/**  * To maintain compatibility with logstash-filter-useragent  */ ;/**  * To maintain compatibility with logstash-filter-useragent  */ private String buildFullOSName(VersionedName operatingSystem) {     if (operatingSystem == null || operatingSystem.name == null) {         return null.     }     StringBuilder sb = new StringBuilder(operatingSystem.name).     if (operatingSystem.major != null) {         sb.append(" ").         sb.append(operatingSystem.major).         if (operatingSystem.minor != null) {             sb.append(".").             sb.append(operatingSystem.minor).             if (operatingSystem.patch != null) {                 sb.append(".").                 sb.append(operatingSystem.patch).                 if (operatingSystem.build != null) {                     sb.append(".").                     sb.append(operatingSystem.build).                 }             }         }     }     return sb.toString(). }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;;0;3;;String getField() {     return field. }
false;;0;3;;String getTargetField() {     return targetField. }
false;;0;3;;Set<Property> getProperties() {     return properties. }
false;;0;3;;UserAgentParser getUaParser() {     return parser. }
false;public;3;35;;@Override public UserAgentProcessor create(Map<String, Processor.Factory> factories, String processorTag, Map<String, Object> config) throws Exception {     String field = readStringProperty(TYPE, processorTag, config, "field").     String targetField = readStringProperty(TYPE, processorTag, config, "target_field", "user_agent").     String regexFilename = readStringProperty(TYPE, processorTag, config, "regex_file", IngestUserAgentPlugin.DEFAULT_PARSER_NAME).     List<String> propertyNames = readOptionalList(TYPE, processorTag, config, "properties").     boolean ignoreMissing = readBooleanProperty(TYPE, processorTag, config, "ignore_missing", false).     Object ecsValue = config.remove("ecs").     if (ecsValue != null) {         deprecationLogger.deprecated("setting [ecs] is deprecated as ECS format is the default and only option").     }     UserAgentParser parser = userAgentParsers.get(regexFilename).     if (parser == null) {         throw newConfigurationException(TYPE, processorTag, "regex_file", "regex file [" + regexFilename + "] doesn't exist (has to exist at node startup)").     }     final Set<Property> properties.     if (propertyNames != null) {         properties = EnumSet.noneOf(Property.class).         for (String fieldName : propertyNames) {             try {                 properties.add(Property.parseProperty(fieldName)).             } catch (IllegalArgumentException e) {                 throw newConfigurationException(TYPE, processorTag, "properties", e.getMessage()).             }         }     } else {         properties = EnumSet.allOf(Property.class).     }     return new UserAgentProcessor(processorTag, field, targetField, parser, properties, ignoreMissing). }
false;public,static;1;8;;public static Property parseProperty(String propertyName) {     try {         return valueOf(propertyName.toUpperCase(Locale.ROOT)).     } catch (IllegalArgumentException e) {         throw new IllegalArgumentException("illegal property value [" + propertyName + "]. valid values are " + Arrays.toString(EnumSet.allOf(Property.class).toArray())).     } }
