commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;23;;@BeforeClass public static void createUserAgentParsers() throws IOException {     Path configDir = createTempDir().     userAgentConfigDir = configDir.resolve("ingest-user-agent").     Files.createDirectories(userAgentConfigDir).     // Copy file, leaving out the device parsers at the end     try (BufferedReader reader = new BufferedReader(new InputStreamReader(UserAgentProcessor.class.getResourceAsStream("/regexes.yml"), StandardCharsets.UTF_8)).         BufferedWriter writer = Files.newBufferedWriter(userAgentConfigDir.resolve(regexWithoutDevicesFilename))) {         String line.         while ((line = reader.readLine()) != null) {             if (line.startsWith("device_parsers:")) {                 break.             }             writer.write(line).             writer.newLine().         }     }     userAgentParsers = IngestUserAgentPlugin.createUserAgentParsers(userAgentConfigDir, new UserAgentCache(1000)). }
false;public;0;18;;public void testBuildDefaults() throws Exception {     UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     String processorTag = randomAlphaOfLength(10).     UserAgentProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getTargetField(), equalTo("user_agent")).     assertThat(processor.getUaParser().getUaPatterns().size(), greaterThan(0)).     assertThat(processor.getUaParser().getOsPatterns().size(), greaterThan(0)).     assertThat(processor.getUaParser().getDevicePatterns().size(), greaterThan(0)).     assertThat(processor.getProperties(), equalTo(EnumSet.allOf(UserAgentProcessor.Property.class))).     assertFalse(processor.isIgnoreMissing()). }
false;public;0;19;;public void testBuildWithIgnoreMissing() throws Exception {     UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("ignore_missing", true).     String processorTag = randomAlphaOfLength(10).     UserAgentProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getTargetField(), equalTo("user_agent")).     assertThat(processor.getUaParser().getUaPatterns().size(), greaterThan(0)).     assertThat(processor.getUaParser().getOsPatterns().size(), greaterThan(0)).     assertThat(processor.getUaParser().getDevicePatterns().size(), greaterThan(0)).     assertThat(processor.getProperties(), equalTo(EnumSet.allOf(UserAgentProcessor.Property.class))).     assertTrue(processor.isIgnoreMissing()). }
false;public;0;11;;public void testBuildTargetField() throws Exception {     UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("target_field", "_target_field").     UserAgentProcessor processor = factory.create(null, null, config).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getTargetField(), equalTo("_target_field")). }
false;public;0;13;;public void testBuildRegexFile() throws Exception {     UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("regex_file", regexWithoutDevicesFilename).     UserAgentProcessor processor = factory.create(null, null, config).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getUaParser().getUaPatterns().size(), greaterThan(0)).     assertThat(processor.getUaParser().getOsPatterns().size(), greaterThan(0)).     assertThat(processor.getUaParser().getDevicePatterns().size(), equalTo(0)). }
false;public;0;10;;public void testBuildNonExistingRegexFile() throws Exception {     UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("regex_file", "does-not-exist.yml").     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), equalTo("[regex_file] regex file [does-not-exist.yml] doesn't exist (has to exist at node startup)")). }
false;public;0;20;;public void testBuildFields() throws Exception {     UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers).     Set<UserAgentProcessor.Property> properties = EnumSet.noneOf(UserAgentProcessor.Property.class).     List<String> fieldNames = new ArrayList<>().     int numFields = scaledRandomIntBetween(1, UserAgentProcessor.Property.values().length).     for (int i = 0. i < numFields. i++) {         UserAgentProcessor.Property property = UserAgentProcessor.Property.values()[i].         properties.add(property).         fieldNames.add(property.name().toLowerCase(Locale.ROOT)).     }     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("properties", fieldNames).     UserAgentProcessor processor = factory.create(null, null, config).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getProperties(), equalTo(properties)). }
false;public;0;11;;public void testInvalidProperty() throws Exception {     UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("properties", Collections.singletonList("invalid")).     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), equalTo("[properties] illegal property value [invalid]. valid values are [NAME, OS, DEVICE, " + "ORIGINAL, VERSION]")). }
false;public;0;10;;public void testInvalidPropertiesType() throws Exception {     UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("properties", "invalid").     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config)).     assertThat(e.getMessage(), equalTo("[properties] property isn't a list, but of type [java.lang.String]")). }
