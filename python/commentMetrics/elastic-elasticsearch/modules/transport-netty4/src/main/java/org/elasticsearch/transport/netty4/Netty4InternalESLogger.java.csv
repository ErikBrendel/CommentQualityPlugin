commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isTraceEnabled() {     return logger.isTraceEnabled(). }
false;public;1;4;;@Override public void trace(String msg) {     logger.trace(msg). }
false;public;2;4;;@Override public void trace(String format, Object arg) {     logger.trace(format, arg). }
false;public;3;4;;@Override public void trace(String format, Object argA, Object argB) {     logger.trace(format, argA, argB). }
false;public;2;4;;@Override public void trace(String format, Object... arguments) {     logger.trace(format, arguments). }
false;public;2;4;;@Override public void trace(String msg, Throwable t) {     logger.trace(msg, t). }
false;public;0;4;;@Override public boolean isDebugEnabled() {     return logger.isDebugEnabled(). }
false;public;1;4;;@Override public void debug(String msg) {     logger.debug(msg). }
false;public;2;4;;@Override public void debug(String format, Object arg) {     logger.debug(format, arg). }
false;public;3;4;;@Override public void debug(String format, Object argA, Object argB) {     logger.debug(format, argA, argB). }
false;public;2;4;;@Override public void debug(String format, Object... arguments) {     logger.debug(format, arguments). }
false;public;2;4;;@Override public void debug(String msg, Throwable t) {     logger.debug(msg, t). }
false;public;0;4;;@Override public boolean isInfoEnabled() {     return logger.isInfoEnabled(). }
false;public;1;4;;@Override public void info(String msg) {     logger.info(msg). }
false;public;2;4;;@Override public void info(String format, Object arg) {     logger.info(format, arg). }
false;public;3;4;;@Override public void info(String format, Object argA, Object argB) {     logger.info(format, argA, argB). }
false;public;2;4;;@Override public void info(String format, Object... arguments) {     logger.info(format, arguments). }
false;public;2;4;;@Override public void info(String msg, Throwable t) {     logger.info(msg, t). }
false;public;0;4;;@Override public boolean isWarnEnabled() {     return logger.isWarnEnabled(). }
false;public;1;4;;@Override public void warn(String msg) {     logger.warn(msg). }
false;public;2;4;;@Override public void warn(String format, Object arg) {     logger.warn(format, arg). }
false;public;2;4;;@Override public void warn(String format, Object... arguments) {     logger.warn(format, arguments). }
false;public;3;4;;@Override public void warn(String format, Object argA, Object argB) {     logger.warn(format, argA, argB). }
false;public;2;4;;@Override public void warn(String msg, Throwable t) {     logger.warn(msg, t). }
false;public;0;4;;@Override public boolean isErrorEnabled() {     return logger.isErrorEnabled(). }
false;public;1;4;;@Override public void error(String msg) {     logger.error(msg). }
false;public;2;4;;@Override public void error(String format, Object arg) {     logger.error(format, arg). }
false;public;3;4;;@Override public void error(String format, Object argA, Object argB) {     logger.error(format, argA, argB). }
false;public;2;4;;@Override public void error(String format, Object... arguments) {     logger.error(format, arguments). }
false;public;2;4;;@Override public void error(String msg, Throwable t) {     logger.error(msg, t). }
