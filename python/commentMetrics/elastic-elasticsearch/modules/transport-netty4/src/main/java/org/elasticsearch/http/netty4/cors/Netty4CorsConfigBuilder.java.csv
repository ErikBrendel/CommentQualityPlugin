commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Creates a Builder instance with it's origin set to '*'.  *  * @return Builder to support method chaining.  */ ;/**  * Creates a Builder instance with it's origin set to '*'.  *  * @return Builder to support method chaining.  */ public static Netty4CorsConfigBuilder forAnyOrigin() {     return new Netty4CorsConfigBuilder(). }
true;public,static;1;6;/**  * Create a {@link Netty4CorsConfigBuilder} instance with the specified pattern origin.  *  * @param pattern the regular expression pattern to match incoming origins on.  * @return {@link Netty4CorsConfigBuilder} with the configured origin pattern.  */ ;/**  * Create a {@link Netty4CorsConfigBuilder} instance with the specified pattern origin.  *  * @param pattern the regular expression pattern to match incoming origins on.  * @return {@link Netty4CorsConfigBuilder} with the configured origin pattern.  */ public static Netty4CorsConfigBuilder forPattern(final Pattern pattern) {     if (pattern == null) {         throw new IllegalArgumentException("CORS pattern cannot be null").     }     return new Netty4CorsConfigBuilder(pattern). }
true;public,static;1;3;/**  * Creates a {@link Netty4CorsConfigBuilder} instance with the specified origins.  *  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ ;/**  * Creates a {@link Netty4CorsConfigBuilder} instance with the specified origins.  *  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ public static Netty4CorsConfigBuilder forOrigins(final String... origins) {     return new Netty4CorsConfigBuilder(origins). }
true;public;0;4;/**  * Disables CORS support.  *  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ ;/**  * Disables CORS support.  *  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ public Netty4CorsConfigBuilder disable() {     enabled = false.     return this. }
true;public;0;4;/**  * By default cookies are not included in CORS requests, but this method will enable cookies to  * be added to CORS requests. Calling this method will set the CORS 'Access-Control-Allow-Credentials'  * response header to true.  *  * Please note, that cookie support needs to be enabled on the client side as well.  * The client needs to opt-in to send cookies by calling:  * <pre>  * xhr.withCredentials = true.  * </pre>  * The default value for 'withCredentials' is false in which case no cookies are sent.  * Setting this to true will included cookies in cross origin requests.  *  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ ;/**  * By default cookies are not included in CORS requests, but this method will enable cookies to  * be added to CORS requests. Calling this method will set the CORS 'Access-Control-Allow-Credentials'  * response header to true.  *  * Please note, that cookie support needs to be enabled on the client side as well.  * The client needs to opt-in to send cookies by calling:  * <pre>  * xhr.withCredentials = true.  * </pre>  * The default value for 'withCredentials' is false in which case no cookies are sent.  * Setting this to true will included cookies in cross origin requests.  *  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ public Netty4CorsConfigBuilder allowCredentials() {     allowCredentials = true.     return this. }
true;public;1;4;/**  * When making a preflight request the client has to perform two request with can be inefficient.  * This setting will set the CORS 'Access-Control-Max-Age' response header and enables the  * caching of the preflight response for the specified time. During this time no preflight  * request will be made.  *  * @param max the maximum time, in seconds, that the preflight response may be cached.  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ ;/**  * When making a preflight request the client has to perform two request with can be inefficient.  * This setting will set the CORS 'Access-Control-Max-Age' response header and enables the  * caching of the preflight response for the specified time. During this time no preflight  * request will be made.  *  * @param max the maximum time, in seconds, that the preflight response may be cached.  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ public Netty4CorsConfigBuilder maxAge(final long max) {     maxAge = max.     return this. }
true;public;1;4;/**  * Specifies the allowed set of HTTP Request Methods that should be returned in the  * CORS 'Access-Control-Request-Method' response header.  *  * @param methods the {@link HttpMethod}s that should be allowed.  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ ;/**  * Specifies the allowed set of HTTP Request Methods that should be returned in the  * CORS 'Access-Control-Request-Method' response header.  *  * @param methods the {@link HttpMethod}s that should be allowed.  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ public Netty4CorsConfigBuilder allowedRequestMethods(final HttpMethod... methods) {     requestMethods.addAll(Arrays.asList(methods)).     return this. }
true;public;1;4;/**  * Specifies the if headers that should be returned in the CORS 'Access-Control-Allow-Headers'  * response header.  *  * If a client specifies headers on the request, for example by calling:  * <pre>  * xhr.setRequestHeader('My-Custom-Header', "SomeValue").  * </pre>  * the server will receive the above header name in the 'Access-Control-Request-Headers' of the  * preflight request. The server will then decide if it allows this header to be sent for the  * real request (remember that a preflight is not the real request but a request asking the server  * if it allow a request).  *  * @param headers the headers to be added to the preflight 'Access-Control-Allow-Headers' response header.  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ ;/**  * Specifies the if headers that should be returned in the CORS 'Access-Control-Allow-Headers'  * response header.  *  * If a client specifies headers on the request, for example by calling:  * <pre>  * xhr.setRequestHeader('My-Custom-Header', "SomeValue").  * </pre>  * the server will receive the above header name in the 'Access-Control-Request-Headers' of the  * preflight request. The server will then decide if it allows this header to be sent for the  * real request (remember that a preflight is not the real request but a request asking the server  * if it allow a request).  *  * @param headers the headers to be added to the preflight 'Access-Control-Allow-Headers' response header.  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ public Netty4CorsConfigBuilder allowedRequestHeaders(final String... headers) {     requestHeaders.addAll(Arrays.asList(headers)).     return this. }
true;public;0;4;/**  * Specifies that a CORS request should be rejected if it's invalid before being  * further processing.  *  * CORS headers are set after a request is processed. This may not always be desired  * and this setting will check that the Origin is valid and if it is not valid no  * further processing will take place, and a error will be returned to the calling client.  *  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ ;/**  * Specifies that a CORS request should be rejected if it's invalid before being  * further processing.  *  * CORS headers are set after a request is processed. This may not always be desired  * and this setting will check that the Origin is valid and if it is not valid no  * further processing will take place, and a error will be returned to the calling client.  *  * @return {@link Netty4CorsConfigBuilder} to support method chaining.  */ public Netty4CorsConfigBuilder shortCircuit() {     shortCircuit = true.     return this. }
true;public;0;7;/**  * Builds a {@link Netty4CorsConfig} with settings specified by previous method calls.  *  * @return {@link Netty4CorsConfig} the configured CorsConfig instance.  */ ;/**  * Builds a {@link Netty4CorsConfig} with settings specified by previous method calls.  *  * @return {@link Netty4CorsConfig} the configured CorsConfig instance.  */ public Netty4CorsConfig build() {     if (preflightHeaders.isEmpty()) {         preflightHeaders.put("date", DateValueGenerator.INSTANCE).         preflightHeaders.put("content-length", new ConstantValueGenerator("0")).     }     return new Netty4CorsConfig(this). }
false;public;0;4;;@Override public Object call() {     return value. }
false;public;0;4;;@Override public Date call() throws Exception {     return new Date(). }
