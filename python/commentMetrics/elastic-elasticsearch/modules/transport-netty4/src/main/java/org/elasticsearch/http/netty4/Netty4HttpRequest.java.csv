# id;timestamp;commentText;codeText;commentWords;codeWords
Netty4HttpRequest -> Netty4HttpRequest(             final NamedXContentRegistry xContentRegistry,             final Map<String, String> params,             final String uri,             final FullHttpRequest request,             final Channel channel);1524684173;Construct a new request. In contrast to_{@link Netty4HttpRequest#Netty4HttpRequest(NamedXContentRegistry, Map, String, FullHttpRequest, Channel)}, the URI is not decoded so_this constructor will not throw a {@link BadParameterException}.__@param xContentRegistry the content registry_@param params           the parameters for the request_@param uri              the path for the request_@param request          the underlying request_@param channel          the channel for the request_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;Netty4HttpRequest(_            final NamedXContentRegistry xContentRegistry,_            final Map<String, String> params,_            final String uri,_            final FullHttpRequest request,_            final Channel channel) {_        super(xContentRegistry, params, uri, new HttpHeadersMap(request.headers()))__        this.request = request__        this.channel = channel__        if (request.content().isReadable()) {_            this.content = Netty4Utils.toBytesReference(request.content())__        } else {_            this.content = BytesArray.EMPTY__        }_    };construct,a,new,request,in,contrast,to,link,netty4http,request,netty4http,request,named,xcontent,registry,map,string,full,http,request,channel,the,uri,is,not,decoded,so,this,constructor,will,not,throw,a,link,bad,parameter,exception,param,x,content,registry,the,content,registry,param,params,the,parameters,for,the,request,param,uri,the,path,for,the,request,param,request,the,underlying,request,param,channel,the,channel,for,the,request,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;netty4http,request,final,named,xcontent,registry,x,content,registry,final,map,string,string,params,final,string,uri,final,full,http,request,request,final,channel,channel,super,x,content,registry,params,uri,new,http,headers,map,request,headers,this,request,request,this,channel,channel,if,request,content,is,readable,this,content,netty4utils,to,bytes,reference,request,content,else,this,content,bytes,array,empty
Netty4HttpRequest -> Netty4HttpRequest(             final NamedXContentRegistry xContentRegistry,             final Map<String, String> params,             final String uri,             final FullHttpRequest request,             final Channel channel);1528103657;Construct a new request. In contrast to_{@link Netty4HttpRequest#Netty4HttpRequest(NamedXContentRegistry, Map, String, FullHttpRequest, Channel)}, the URI is not decoded so_this constructor will not throw a {@link BadParameterException}.__@param xContentRegistry the content registry_@param params           the parameters for the request_@param uri              the path for the request_@param request          the underlying request_@param channel          the channel for the request_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;Netty4HttpRequest(_            final NamedXContentRegistry xContentRegistry,_            final Map<String, String> params,_            final String uri,_            final FullHttpRequest request,_            final Channel channel) {_        super(xContentRegistry, params, uri, new HttpHeadersMap(request.headers()))__        this.request = request__        this.channel = channel__        if (request.content().isReadable()) {_            this.content = Netty4Utils.toBytesReference(request.content())__        } else {_            this.content = BytesArray.EMPTY__        }_    };construct,a,new,request,in,contrast,to,link,netty4http,request,netty4http,request,named,xcontent,registry,map,string,full,http,request,channel,the,uri,is,not,decoded,so,this,constructor,will,not,throw,a,link,bad,parameter,exception,param,x,content,registry,the,content,registry,param,params,the,parameters,for,the,request,param,uri,the,path,for,the,request,param,request,the,underlying,request,param,channel,the,channel,for,the,request,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;netty4http,request,final,named,xcontent,registry,x,content,registry,final,map,string,string,params,final,string,uri,final,full,http,request,request,final,channel,channel,super,x,content,registry,params,uri,new,http,headers,map,request,headers,this,request,request,this,channel,channel,if,request,content,is,readable,this,content,netty4utils,to,bytes,reference,request,content,else,this,content,bytes,array,empty
Netty4HttpRequest -> Netty4HttpRequest(NamedXContentRegistry xContentRegistry, FullHttpRequest request, Channel channel);1524684173;Construct a new request.__@param xContentRegistry the content registry_@param request          the underlying request_@param channel          the channel for the request_@throws BadParameterException      if the parameters can not be decoded_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;Netty4HttpRequest(NamedXContentRegistry xContentRegistry, FullHttpRequest request, Channel channel) {_        super(xContentRegistry, request.uri(), new HttpHeadersMap(request.headers()))__        this.request = request__        this.channel = channel__        if (request.content().isReadable()) {_            this.content = Netty4Utils.toBytesReference(request.content())__        } else {_            this.content = BytesArray.EMPTY__        }_    };construct,a,new,request,param,x,content,registry,the,content,registry,param,request,the,underlying,request,param,channel,the,channel,for,the,request,throws,bad,parameter,exception,if,the,parameters,can,not,be,decoded,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;netty4http,request,named,xcontent,registry,x,content,registry,full,http,request,request,channel,channel,super,x,content,registry,request,uri,new,http,headers,map,request,headers,this,request,request,this,channel,channel,if,request,content,is,readable,this,content,netty4utils,to,bytes,reference,request,content,else,this,content,bytes,array,empty
Netty4HttpRequest -> Netty4HttpRequest(NamedXContentRegistry xContentRegistry, FullHttpRequest request, Channel channel);1528103657;Construct a new request.__@param xContentRegistry the content registry_@param request          the underlying request_@param channel          the channel for the request_@throws BadParameterException      if the parameters can not be decoded_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;Netty4HttpRequest(NamedXContentRegistry xContentRegistry, FullHttpRequest request, Channel channel) {_        super(xContentRegistry, request.uri(), new HttpHeadersMap(request.headers()))__        this.request = request__        this.channel = channel__        if (request.content().isReadable()) {_            this.content = Netty4Utils.toBytesReference(request.content())__        } else {_            this.content = BytesArray.EMPTY__        }_    };construct,a,new,request,param,x,content,registry,the,content,registry,param,request,the,underlying,request,param,channel,the,channel,for,the,request,throws,bad,parameter,exception,if,the,parameters,can,not,be,decoded,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;netty4http,request,named,xcontent,registry,x,content,registry,full,http,request,request,channel,channel,super,x,content,registry,request,uri,new,http,headers,map,request,headers,this,request,request,this,channel,channel,if,request,content,is,readable,this,content,netty4utils,to,bytes,reference,request,content,else,this,content,bytes,array,empty
Netty4HttpRequest -> @Override     public SocketAddress getRemoteAddress();1524684173;Returns the remote address where this rest request channel is "connected to".  The_returned {@link SocketAddress} is supposed to be down-cast into more_concrete type such as {@link java.net.InetSocketAddress} to retrieve_the detailed information.;@Override_    public SocketAddress getRemoteAddress() {_        return channel.remoteAddress()__    };returns,the,remote,address,where,this,rest,request,channel,is,connected,to,the,returned,link,socket,address,is,supposed,to,be,down,cast,into,more,concrete,type,such,as,link,java,net,inet,socket,address,to,retrieve,the,detailed,information;override,public,socket,address,get,remote,address,return,channel,remote,address
Netty4HttpRequest -> @Override     public SocketAddress getRemoteAddress();1528103657;Returns the remote address where this rest request channel is "connected to".  The_returned {@link SocketAddress} is supposed to be down-cast into more_concrete type such as {@link java.net.InetSocketAddress} to retrieve_the detailed information.;@Override_    public SocketAddress getRemoteAddress() {_        return channel.remoteAddress()__    };returns,the,remote,address,where,this,rest,request,channel,is,connected,to,the,returned,link,socket,address,is,supposed,to,be,down,cast,into,more,concrete,type,such,as,link,java,net,inet,socket,address,to,retrieve,the,detailed,information;override,public,socket,address,get,remote,address,return,channel,remote,address
Netty4HttpRequest -> @Override     public SocketAddress getLocalAddress();1524684173;Returns the local address where this request channel is bound to.  The returned_{@link SocketAddress} is supposed to be down-cast into more concrete_type such as {@link java.net.InetSocketAddress} to retrieve the detailed_information.;@Override_    public SocketAddress getLocalAddress() {_        return channel.localAddress()__    };returns,the,local,address,where,this,request,channel,is,bound,to,the,returned,link,socket,address,is,supposed,to,be,down,cast,into,more,concrete,type,such,as,link,java,net,inet,socket,address,to,retrieve,the,detailed,information;override,public,socket,address,get,local,address,return,channel,local,address
Netty4HttpRequest -> @Override     public SocketAddress getLocalAddress();1528103657;Returns the local address where this request channel is bound to.  The returned_{@link SocketAddress} is supposed to be down-cast into more concrete_type such as {@link java.net.InetSocketAddress} to retrieve the detailed_information.;@Override_    public SocketAddress getLocalAddress() {_        return channel.localAddress()__    };returns,the,local,address,where,this,request,channel,is,bound,to,the,returned,link,socket,address,is,supposed,to,be,down,cast,into,more,concrete,type,such,as,link,java,net,inet,socket,address,to,retrieve,the,detailed,information;override,public,socket,address,get,local,address,return,channel,local,address
