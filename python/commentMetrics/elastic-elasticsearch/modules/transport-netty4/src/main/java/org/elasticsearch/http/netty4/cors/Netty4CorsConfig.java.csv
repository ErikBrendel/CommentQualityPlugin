commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Determines if support for CORS is enabled.  *  * @return {@code true} if support for CORS is enabled, false otherwise.  */ ;/**  * Determines if support for CORS is enabled.  *  * @return {@code true} if support for CORS is enabled, false otherwise.  */ public boolean isCorsSupportEnabled() {     return enabled. }
true;public;0;3;/**  * Determines whether a wildcard origin, '*', is supported. This also means that null origins are  * supported.  *  * @return {@code boolean} true if any origin is allowed.  */ ;/**  * Determines whether a wildcard origin, '*', is supported. This also means that null origins are  * supported.  *  * @return {@code boolean} true if any origin is allowed.  */ public boolean isAnyOriginSupported() {     return anyOrigin. }
true;public;0;3;/**  * Returns the set of allowed origins.  *  * @return {@code Set} the allowed origins.  */ ;/**  * Returns the set of allowed origins.  *  * @return {@code Set} the allowed origins.  */ public Optional<Set<String>> origins() {     return origins. }
true;public;1;8;/**  * Returns whether the input origin is allowed by this configuration.  *  * @return {@code true} if the origin is allowed, otherwise {@code false}  */ ;/**  * Returns whether the input origin is allowed by this configuration.  *  * @return {@code true} if the origin is allowed, otherwise {@code false}  */ public boolean isOriginAllowed(final String origin) {     if (origins.isPresent()) {         return origins.get().contains(origin).     } else if (pattern.isPresent()) {         return pattern.get().matcher(origin).matches().     }     return false. }
true;public;0;3;/**  * Determines if credentials are supported for CORS requests.  *  * By default credentials are not included in CORS requests but if isCredentialsAllowed returns  * true credentials will be added to CORS requests. Setting this value to true will set the  * CORS 'Access-Control-Allow-Credentials' response header to true.  *  * Please note that credentials support needs to be enabled on the client side as well.  * The client needs to opt-in to send credentials by calling:  * <pre>  * xhr.withCredentials = true.  * </pre>  * The default value for 'withCredentials' is false in which case no credentials are sent.  * Setting this to true will included credentials in cross origin requests.  *  * @return {@code true} if credentials are supported.  */ ;/**  * Determines if credentials are supported for CORS requests.  *  * By default credentials are not included in CORS requests but if isCredentialsAllowed returns  * true credentials will be added to CORS requests. Setting this value to true will set the  * CORS 'Access-Control-Allow-Credentials' response header to true.  *  * Please note that credentials support needs to be enabled on the client side as well.  * The client needs to opt-in to send credentials by calling:  * <pre>  * xhr.withCredentials = true.  * </pre>  * The default value for 'withCredentials' is false in which case no credentials are sent.  * Setting this to true will included credentials in cross origin requests.  *  * @return {@code true} if credentials are supported.  */ public boolean isCredentialsAllowed() {     return allowCredentials. }
true;public;0;3;/**  * Gets the maxAge setting.  *  * When making a preflight request the client has to perform two request with can be inefficient.  * This setting will set the CORS 'Access-Control-Max-Age' response header and enables the  * caching of the preflight response for the specified time. During this time no preflight  * request will be made.  *  * @return {@code long} the time in seconds that a preflight request may be cached.  */ ;/**  * Gets the maxAge setting.  *  * When making a preflight request the client has to perform two request with can be inefficient.  * This setting will set the CORS 'Access-Control-Max-Age' response header and enables the  * caching of the preflight response for the specified time. During this time no preflight  * request will be made.  *  * @return {@code long} the time in seconds that a preflight request may be cached.  */ public long maxAge() {     return maxAge. }
true;public;0;3;/**  * Returns the allowed set of Request Methods. The Http methods that should be returned in the  * CORS 'Access-Control-Request-Method' response header.  *  * @return {@code Set} of {@link HttpMethod}s that represent the allowed Request Methods.  */ ;/**  * Returns the allowed set of Request Methods. The Http methods that should be returned in the  * CORS 'Access-Control-Request-Method' response header.  *  * @return {@code Set} of {@link HttpMethod}s that represent the allowed Request Methods.  */ public Set<HttpMethod> allowedRequestMethods() {     return Collections.unmodifiableSet(allowedRequestMethods). }
true;public;0;3;/**  * Returns the allowed set of Request Headers.  *  * The header names returned from this method will be used to set the CORS  * 'Access-Control-Allow-Headers' response header.  *  * @return {@code Set<String>} of strings that represent the allowed Request Headers.  */ ;/**  * Returns the allowed set of Request Headers.  *  * The header names returned from this method will be used to set the CORS  * 'Access-Control-Allow-Headers' response header.  *  * @return {@code Set<String>} of strings that represent the allowed Request Headers.  */ public Set<String> allowedRequestHeaders() {     return Collections.unmodifiableSet(allowedRequestHeaders). }
true;public;0;15;/**  * Returns HTTP response headers that should be added to a CORS preflight response.  *  * @return {@link HttpHeaders} the HTTP response headers to be added.  */ ;/**  * Returns HTTP response headers that should be added to a CORS preflight response.  *  * @return {@link HttpHeaders} the HTTP response headers to be added.  */ public HttpHeaders preflightResponseHeaders() {     if (preflightHeaders.isEmpty()) {         return EmptyHttpHeaders.INSTANCE.     }     final HttpHeaders preflightHeaders = new DefaultHttpHeaders().     for (Map.Entry<CharSequence, Callable<?>> entry : this.preflightHeaders.entrySet()) {         final Object value = getValue(entry.getValue()).         if (value instanceof Iterable) {             preflightHeaders.add(entry.getKey().toString(), (Iterable<?>) value).         } else {             preflightHeaders.add(entry.getKey().toString(), value).         }     }     return preflightHeaders. }
true;public;0;3;/**  * Determines whether a CORS request should be rejected if it's invalid before being  * further processing.  *  * CORS headers are set after a request is processed. This may not always be desired  * and this setting will check that the Origin is valid and if it is not valid no  * further processing will take place, and a error will be returned to the calling client.  *  * @return {@code true} if a CORS request should short-circuit upon receiving an invalid Origin header.  */ ;/**  * Determines whether a CORS request should be rejected if it's invalid before being  * further processing.  *  * CORS headers are set after a request is processed. This may not always be desired  * and this setting will check that the Origin is valid and if it is not valid no  * further processing will take place, and a error will be returned to the calling client.  *  * @return {@code true} if a CORS request should short-circuit upon receiving an invalid Origin header.  */ public boolean isShortCircuit() {     return shortCircuit. }
false;private,static;1;7;;private static <T> T getValue(final Callable<T> callable) {     try {         return callable.call().     } catch (final Exception e) {         throw new IllegalStateException("Could not generate value for callable [" + callable + ']', e).     } }
false;public;0;11;;@Override public String toString() {     return "CorsConfig[enabled=" + enabled + ", origins=" + origins + ", anyOrigin=" + anyOrigin + ", isCredentialsAllowed=" + allowCredentials + ", maxAge=" + maxAge + ", allowedRequestMethods=" + allowedRequestMethods + ", allowedRequestHeaders=" + allowedRequestHeaders + ", preflightHeaders=" + preflightHeaders + ']'. }
