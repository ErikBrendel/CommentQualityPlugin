# id;timestamp;commentText;codeText;commentWords;codeWords
Netty4Utils -> public static void setAvailableProcessors(final int availableProcessors);1524684173;Set the number of available processors that Netty uses for sizing various resources (e.g., thread pools).__@param availableProcessors the number of available processors_@throws IllegalStateException if available processors was set previously and the specified value does not match the already-set value;public static void setAvailableProcessors(final int availableProcessors) {_        _        final boolean set = Booleans.parseBoolean(System.getProperty("es.set.netty.runtime.available.processors", "true"))__        if (!set) {_            return__        }__        _        if (isAvailableProcessorsSet.compareAndSet(false, true)) {_            NettyRuntime.setAvailableProcessors(availableProcessors)__        } else if (availableProcessors != NettyRuntime.availableProcessors()) {_            _            final String message = String.format(_                    Locale.ROOT,_                    "available processors value [%d] did not match current value [%d]",_                    availableProcessors,_                    NettyRuntime.availableProcessors())__            throw new IllegalStateException(message)__        }_    };set,the,number,of,available,processors,that,netty,uses,for,sizing,various,resources,e,g,thread,pools,param,available,processors,the,number,of,available,processors,throws,illegal,state,exception,if,available,processors,was,set,previously,and,the,specified,value,does,not,match,the,already,set,value;public,static,void,set,available,processors,final,int,available,processors,final,boolean,set,booleans,parse,boolean,system,get,property,es,set,netty,runtime,available,processors,true,if,set,return,if,is,available,processors,set,compare,and,set,false,true,netty,runtime,set,available,processors,available,processors,else,if,available,processors,netty,runtime,available,processors,final,string,message,string,format,locale,root,available,processors,value,d,did,not,match,current,value,d,available,processors,netty,runtime,available,processors,throw,new,illegal,state,exception,message
Netty4Utils -> public static void setAvailableProcessors(final int availableProcessors);1535046779;Set the number of available processors that Netty uses for sizing various resources (e.g., thread pools).__@param availableProcessors the number of available processors_@throws IllegalStateException if available processors was set previously and the specified value does not match the already-set value;public static void setAvailableProcessors(final int availableProcessors) {_        _        final boolean set = Booleans.parseBoolean(System.getProperty("es.set.netty.runtime.available.processors", "true"))__        if (!set) {_            return__        }__        _        if (isAvailableProcessorsSet.compareAndSet(false, true)) {_            NettyRuntime.setAvailableProcessors(availableProcessors)__        } else if (availableProcessors != NettyRuntime.availableProcessors()) {_            _            final String message = String.format(_                    Locale.ROOT,_                    "available processors value [%d] did not match current value [%d]",_                    availableProcessors,_                    NettyRuntime.availableProcessors())__            throw new IllegalStateException(message)__        }_    };set,the,number,of,available,processors,that,netty,uses,for,sizing,various,resources,e,g,thread,pools,param,available,processors,the,number,of,available,processors,throws,illegal,state,exception,if,available,processors,was,set,previously,and,the,specified,value,does,not,match,the,already,set,value;public,static,void,set,available,processors,final,int,available,processors,final,boolean,set,booleans,parse,boolean,system,get,property,es,set,netty,runtime,available,processors,true,if,set,return,if,is,available,processors,set,compare,and,set,false,true,netty,runtime,set,available,processors,available,processors,else,if,available,processors,netty,runtime,available,processors,final,string,message,string,format,locale,root,available,processors,value,d,did,not,match,current,value,d,available,processors,netty,runtime,available,processors,throw,new,illegal,state,exception,message
Netty4Utils -> public static void setAvailableProcessors(final int availableProcessors);1536218260;Set the number of available processors that Netty uses for sizing various resources (e.g., thread pools).__@param availableProcessors the number of available processors_@throws IllegalStateException if available processors was set previously and the specified value does not match the already-set value;public static void setAvailableProcessors(final int availableProcessors) {_        _        final boolean set = Booleans.parseBoolean(System.getProperty("es.set.netty.runtime.available.processors", "true"))__        if (!set) {_            return__        }__        _        if (isAvailableProcessorsSet.compareAndSet(false, true)) {_            NettyRuntime.setAvailableProcessors(availableProcessors)__        } else if (availableProcessors != NettyRuntime.availableProcessors()) {_            _            final String message = String.format(_                    Locale.ROOT,_                    "available processors value [%d] did not match current value [%d]",_                    availableProcessors,_                    NettyRuntime.availableProcessors())__            throw new IllegalStateException(message)__        }_    };set,the,number,of,available,processors,that,netty,uses,for,sizing,various,resources,e,g,thread,pools,param,available,processors,the,number,of,available,processors,throws,illegal,state,exception,if,available,processors,was,set,previously,and,the,specified,value,does,not,match,the,already,set,value;public,static,void,set,available,processors,final,int,available,processors,final,boolean,set,booleans,parse,boolean,system,get,property,es,set,netty,runtime,available,processors,true,if,set,return,if,is,available,processors,set,compare,and,set,false,true,netty,runtime,set,available,processors,available,processors,else,if,available,processors,netty,runtime,available,processors,final,string,message,string,format,locale,root,available,processors,value,d,did,not,match,current,value,d,available,processors,netty,runtime,available,processors,throw,new,illegal,state,exception,message
Netty4Utils -> public static void setAvailableProcessors(final int availableProcessors);1539615817;Set the number of available processors that Netty uses for sizing various resources (e.g., thread pools).__@param availableProcessors the number of available processors_@throws IllegalStateException if available processors was set previously and the specified value does not match the already-set value;public static void setAvailableProcessors(final int availableProcessors) {_        _        final boolean set = Booleans.parseBoolean(System.getProperty("es.set.netty.runtime.available.processors", "true"))__        if (!set) {_            return__        }__        _        if (isAvailableProcessorsSet.compareAndSet(false, true)) {_            NettyRuntime.setAvailableProcessors(availableProcessors)__        } else if (availableProcessors != NettyRuntime.availableProcessors()) {_            _            final String message = String.format(_                    Locale.ROOT,_                    "available processors value [%d] did not match current value [%d]",_                    availableProcessors,_                    NettyRuntime.availableProcessors())__            throw new IllegalStateException(message)__        }_    };set,the,number,of,available,processors,that,netty,uses,for,sizing,various,resources,e,g,thread,pools,param,available,processors,the,number,of,available,processors,throws,illegal,state,exception,if,available,processors,was,set,previously,and,the,specified,value,does,not,match,the,already,set,value;public,static,void,set,available,processors,final,int,available,processors,final,boolean,set,booleans,parse,boolean,system,get,property,es,set,netty,runtime,available,processors,true,if,set,return,if,is,available,processors,set,compare,and,set,false,true,netty,runtime,set,available,processors,available,processors,else,if,available,processors,netty,runtime,available,processors,final,string,message,string,format,locale,root,available,processors,value,d,did,not,match,current,value,d,available,processors,netty,runtime,available,processors,throw,new,illegal,state,exception,message
Netty4Utils -> public static void setAvailableProcessors(final int availableProcessors);1543593730;Set the number of available processors that Netty uses for sizing various resources (e.g., thread pools).__@param availableProcessors the number of available processors_@throws IllegalStateException if available processors was set previously and the specified value does not match the already-set value;public static void setAvailableProcessors(final int availableProcessors) {_        _        final boolean set = Booleans.parseBoolean(System.getProperty("es.set.netty.runtime.available.processors", "true"))__        if (!set) {_            return__        }__        _        if (isAvailableProcessorsSet.compareAndSet(false, true)) {_            NettyRuntime.setAvailableProcessors(availableProcessors)__        } else if (availableProcessors != NettyRuntime.availableProcessors()) {_            _            final String message = String.format(_                    Locale.ROOT,_                    "available processors value [%d] did not match current value [%d]",_                    availableProcessors,_                    NettyRuntime.availableProcessors())__            throw new IllegalStateException(message)__        }_    };set,the,number,of,available,processors,that,netty,uses,for,sizing,various,resources,e,g,thread,pools,param,available,processors,the,number,of,available,processors,throws,illegal,state,exception,if,available,processors,was,set,previously,and,the,specified,value,does,not,match,the,already,set,value;public,static,void,set,available,processors,final,int,available,processors,final,boolean,set,booleans,parse,boolean,system,get,property,es,set,netty,runtime,available,processors,true,if,set,return,if,is,available,processors,set,compare,and,set,false,true,netty,runtime,set,available,processors,available,processors,else,if,available,processors,netty,runtime,available,processors,final,string,message,string,format,locale,root,available,processors,value,d,did,not,match,current,value,d,available,processors,netty,runtime,available,processors,throw,new,illegal,state,exception,message
Netty4Utils -> static BytesReference toBytesReference(final ByteBuf buffer, final int size);1524684173;Wraps the given ChannelBuffer with a BytesReference of a given size;static BytesReference toBytesReference(final ByteBuf buffer, final int size) {_        return new ByteBufBytesReference(buffer, size)__    };wraps,the,given,channel,buffer,with,a,bytes,reference,of,a,given,size;static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,final,int,size,return,new,byte,buf,bytes,reference,buffer,size
Netty4Utils -> static BytesReference toBytesReference(final ByteBuf buffer, final int size);1535046779;Wraps the given ChannelBuffer with a BytesReference of a given size;static BytesReference toBytesReference(final ByteBuf buffer, final int size) {_        return new ByteBufBytesReference(buffer, size)__    };wraps,the,given,channel,buffer,with,a,bytes,reference,of,a,given,size;static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,final,int,size,return,new,byte,buf,bytes,reference,buffer,size
Netty4Utils -> static BytesReference toBytesReference(final ByteBuf buffer, final int size);1536218260;Wraps the given ChannelBuffer with a BytesReference of a given size;static BytesReference toBytesReference(final ByteBuf buffer, final int size) {_        return new ByteBufBytesReference(buffer, size)__    };wraps,the,given,channel,buffer,with,a,bytes,reference,of,a,given,size;static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,final,int,size,return,new,byte,buf,bytes,reference,buffer,size
Netty4Utils -> static BytesReference toBytesReference(final ByteBuf buffer, final int size);1539615817;Wraps the given ChannelBuffer with a BytesReference of a given size;static BytesReference toBytesReference(final ByteBuf buffer, final int size) {_        return new ByteBufBytesReference(buffer, size)__    };wraps,the,given,channel,buffer,with,a,bytes,reference,of,a,given,size;static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,final,int,size,return,new,byte,buf,bytes,reference,buffer,size
Netty4Utils -> static BytesReference toBytesReference(final ByteBuf buffer, final int size);1543593730;Wraps the given ChannelBuffer with a BytesReference of a given size;static BytesReference toBytesReference(final ByteBuf buffer, final int size) {_        return new ByteBufBytesReference(buffer, size)__    };wraps,the,given,channel,buffer,with,a,bytes,reference,of,a,given,size;static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,final,int,size,return,new,byte,buf,bytes,reference,buffer,size
Netty4Utils -> public static ByteBuf toByteBuf(final BytesReference reference);1524684173;Turns the given BytesReference into a ByteBuf. Note: the returned ByteBuf will reference the internal_pages of the BytesReference. Don't free the bytes of reference before the ByteBuf goes out of scope.;public static ByteBuf toByteBuf(final BytesReference reference) {_        if (reference.length() == 0) {_            return Unpooled.EMPTY_BUFFER__        }_        if (reference instanceof ByteBufBytesReference) {_            return ((ByteBufBytesReference) reference).toByteBuf()__        } else {_            final BytesRefIterator iterator = reference.iterator()__            _            final List<ByteBuf> buffers = new ArrayList<>(3)__            try {_                BytesRef slice__                while ((slice = iterator.next()) != null) {_                    buffers.add(Unpooled.wrappedBuffer(slice.bytes, slice.offset, slice.length))__                }_                final CompositeByteBuf composite = Unpooled.compositeBuffer(buffers.size())__                composite.addComponents(true, buffers)__                return composite__            } catch (IOException ex) {_                throw new AssertionError("no IO happens here", ex)__            }_        }_    };turns,the,given,bytes,reference,into,a,byte,buf,note,the,returned,byte,buf,will,reference,the,internal,pages,of,the,bytes,reference,don,t,free,the,bytes,of,reference,before,the,byte,buf,goes,out,of,scope;public,static,byte,buf,to,byte,buf,final,bytes,reference,reference,if,reference,length,0,return,unpooled,if,reference,instanceof,byte,buf,bytes,reference,return,byte,buf,bytes,reference,reference,to,byte,buf,else,final,bytes,ref,iterator,iterator,reference,iterator,final,list,byte,buf,buffers,new,array,list,3,try,bytes,ref,slice,while,slice,iterator,next,null,buffers,add,unpooled,wrapped,buffer,slice,bytes,slice,offset,slice,length,final,composite,byte,buf,composite,unpooled,composite,buffer,buffers,size,composite,add,components,true,buffers,return,composite,catch,ioexception,ex,throw,new,assertion,error,no,io,happens,here,ex
Netty4Utils -> public static ByteBuf toByteBuf(final BytesReference reference);1535046779;Turns the given BytesReference into a ByteBuf. Note: the returned ByteBuf will reference the internal_pages of the BytesReference. Don't free the bytes of reference before the ByteBuf goes out of scope.;public static ByteBuf toByteBuf(final BytesReference reference) {_        if (reference.length() == 0) {_            return Unpooled.EMPTY_BUFFER__        }_        if (reference instanceof ByteBufBytesReference) {_            return ((ByteBufBytesReference) reference).toByteBuf()__        } else {_            final BytesRefIterator iterator = reference.iterator()__            _            final List<ByteBuf> buffers = new ArrayList<>(3)__            try {_                BytesRef slice__                while ((slice = iterator.next()) != null) {_                    buffers.add(Unpooled.wrappedBuffer(slice.bytes, slice.offset, slice.length))__                }_                final CompositeByteBuf composite = Unpooled.compositeBuffer(buffers.size())__                composite.addComponents(true, buffers)__                return composite__            } catch (IOException ex) {_                throw new AssertionError("no IO happens here", ex)__            }_        }_    };turns,the,given,bytes,reference,into,a,byte,buf,note,the,returned,byte,buf,will,reference,the,internal,pages,of,the,bytes,reference,don,t,free,the,bytes,of,reference,before,the,byte,buf,goes,out,of,scope;public,static,byte,buf,to,byte,buf,final,bytes,reference,reference,if,reference,length,0,return,unpooled,if,reference,instanceof,byte,buf,bytes,reference,return,byte,buf,bytes,reference,reference,to,byte,buf,else,final,bytes,ref,iterator,iterator,reference,iterator,final,list,byte,buf,buffers,new,array,list,3,try,bytes,ref,slice,while,slice,iterator,next,null,buffers,add,unpooled,wrapped,buffer,slice,bytes,slice,offset,slice,length,final,composite,byte,buf,composite,unpooled,composite,buffer,buffers,size,composite,add,components,true,buffers,return,composite,catch,ioexception,ex,throw,new,assertion,error,no,io,happens,here,ex
Netty4Utils -> public static ByteBuf toByteBuf(final BytesReference reference);1536218260;Turns the given BytesReference into a ByteBuf. Note: the returned ByteBuf will reference the internal_pages of the BytesReference. Don't free the bytes of reference before the ByteBuf goes out of scope.;public static ByteBuf toByteBuf(final BytesReference reference) {_        if (reference.length() == 0) {_            return Unpooled.EMPTY_BUFFER__        }_        if (reference instanceof ByteBufBytesReference) {_            return ((ByteBufBytesReference) reference).toByteBuf()__        } else {_            final BytesRefIterator iterator = reference.iterator()__            _            final List<ByteBuf> buffers = new ArrayList<>(3)__            try {_                BytesRef slice__                while ((slice = iterator.next()) != null) {_                    buffers.add(Unpooled.wrappedBuffer(slice.bytes, slice.offset, slice.length))__                }_                final CompositeByteBuf composite = Unpooled.compositeBuffer(buffers.size())__                composite.addComponents(true, buffers)__                return composite__            } catch (IOException ex) {_                throw new AssertionError("no IO happens here", ex)__            }_        }_    };turns,the,given,bytes,reference,into,a,byte,buf,note,the,returned,byte,buf,will,reference,the,internal,pages,of,the,bytes,reference,don,t,free,the,bytes,of,reference,before,the,byte,buf,goes,out,of,scope;public,static,byte,buf,to,byte,buf,final,bytes,reference,reference,if,reference,length,0,return,unpooled,if,reference,instanceof,byte,buf,bytes,reference,return,byte,buf,bytes,reference,reference,to,byte,buf,else,final,bytes,ref,iterator,iterator,reference,iterator,final,list,byte,buf,buffers,new,array,list,3,try,bytes,ref,slice,while,slice,iterator,next,null,buffers,add,unpooled,wrapped,buffer,slice,bytes,slice,offset,slice,length,final,composite,byte,buf,composite,unpooled,composite,buffer,buffers,size,composite,add,components,true,buffers,return,composite,catch,ioexception,ex,throw,new,assertion,error,no,io,happens,here,ex
Netty4Utils -> public static ByteBuf toByteBuf(final BytesReference reference);1539615817;Turns the given BytesReference into a ByteBuf. Note: the returned ByteBuf will reference the internal_pages of the BytesReference. Don't free the bytes of reference before the ByteBuf goes out of scope.;public static ByteBuf toByteBuf(final BytesReference reference) {_        if (reference.length() == 0) {_            return Unpooled.EMPTY_BUFFER__        }_        if (reference instanceof ByteBufBytesReference) {_            return ((ByteBufBytesReference) reference).toByteBuf()__        } else {_            final BytesRefIterator iterator = reference.iterator()__            _            final List<ByteBuf> buffers = new ArrayList<>(3)__            try {_                BytesRef slice__                while ((slice = iterator.next()) != null) {_                    buffers.add(Unpooled.wrappedBuffer(slice.bytes, slice.offset, slice.length))__                }_                final CompositeByteBuf composite = Unpooled.compositeBuffer(buffers.size())__                composite.addComponents(true, buffers)__                return composite__            } catch (IOException ex) {_                throw new AssertionError("no IO happens here", ex)__            }_        }_    };turns,the,given,bytes,reference,into,a,byte,buf,note,the,returned,byte,buf,will,reference,the,internal,pages,of,the,bytes,reference,don,t,free,the,bytes,of,reference,before,the,byte,buf,goes,out,of,scope;public,static,byte,buf,to,byte,buf,final,bytes,reference,reference,if,reference,length,0,return,unpooled,if,reference,instanceof,byte,buf,bytes,reference,return,byte,buf,bytes,reference,reference,to,byte,buf,else,final,bytes,ref,iterator,iterator,reference,iterator,final,list,byte,buf,buffers,new,array,list,3,try,bytes,ref,slice,while,slice,iterator,next,null,buffers,add,unpooled,wrapped,buffer,slice,bytes,slice,offset,slice,length,final,composite,byte,buf,composite,unpooled,composite,buffer,buffers,size,composite,add,components,true,buffers,return,composite,catch,ioexception,ex,throw,new,assertion,error,no,io,happens,here,ex
Netty4Utils -> public static ByteBuf toByteBuf(final BytesReference reference);1543593730;Turns the given BytesReference into a ByteBuf. Note: the returned ByteBuf will reference the internal_pages of the BytesReference. Don't free the bytes of reference before the ByteBuf goes out of scope.;public static ByteBuf toByteBuf(final BytesReference reference) {_        if (reference.length() == 0) {_            return Unpooled.EMPTY_BUFFER__        }_        if (reference instanceof ByteBufBytesReference) {_            return ((ByteBufBytesReference) reference).toByteBuf()__        } else {_            final BytesRefIterator iterator = reference.iterator()__            _            final List<ByteBuf> buffers = new ArrayList<>(3)__            try {_                BytesRef slice__                while ((slice = iterator.next()) != null) {_                    buffers.add(Unpooled.wrappedBuffer(slice.bytes, slice.offset, slice.length))__                }__                if (buffers.size() == 1) {_                    return buffers.get(0)__                } else {_                    CompositeByteBuf composite = Unpooled.compositeBuffer(buffers.size())__                    composite.addComponents(true, buffers)__                    return composite__                }_            } catch (IOException ex) {_                throw new AssertionError("no IO happens here", ex)__            }_        }_    };turns,the,given,bytes,reference,into,a,byte,buf,note,the,returned,byte,buf,will,reference,the,internal,pages,of,the,bytes,reference,don,t,free,the,bytes,of,reference,before,the,byte,buf,goes,out,of,scope;public,static,byte,buf,to,byte,buf,final,bytes,reference,reference,if,reference,length,0,return,unpooled,if,reference,instanceof,byte,buf,bytes,reference,return,byte,buf,bytes,reference,reference,to,byte,buf,else,final,bytes,ref,iterator,iterator,reference,iterator,final,list,byte,buf,buffers,new,array,list,3,try,bytes,ref,slice,while,slice,iterator,next,null,buffers,add,unpooled,wrapped,buffer,slice,bytes,slice,offset,slice,length,if,buffers,size,1,return,buffers,get,0,else,composite,byte,buf,composite,unpooled,composite,buffer,buffers,size,composite,add,components,true,buffers,return,composite,catch,ioexception,ex,throw,new,assertion,error,no,io,happens,here,ex
Netty4Utils -> public static BytesReference toBytesReference(final ByteBuf buffer);1524684173;Wraps the given ChannelBuffer with a BytesReference;public static BytesReference toBytesReference(final ByteBuf buffer) {_        return toBytesReference(buffer, buffer.readableBytes())__    };wraps,the,given,channel,buffer,with,a,bytes,reference;public,static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,return,to,bytes,reference,buffer,buffer,readable,bytes
Netty4Utils -> public static BytesReference toBytesReference(final ByteBuf buffer);1535046779;Wraps the given ChannelBuffer with a BytesReference;public static BytesReference toBytesReference(final ByteBuf buffer) {_        return toBytesReference(buffer, buffer.readableBytes())__    };wraps,the,given,channel,buffer,with,a,bytes,reference;public,static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,return,to,bytes,reference,buffer,buffer,readable,bytes
Netty4Utils -> public static BytesReference toBytesReference(final ByteBuf buffer);1536218260;Wraps the given ChannelBuffer with a BytesReference;public static BytesReference toBytesReference(final ByteBuf buffer) {_        return toBytesReference(buffer, buffer.readableBytes())__    };wraps,the,given,channel,buffer,with,a,bytes,reference;public,static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,return,to,bytes,reference,buffer,buffer,readable,bytes
Netty4Utils -> public static BytesReference toBytesReference(final ByteBuf buffer);1539615817;Wraps the given ChannelBuffer with a BytesReference;public static BytesReference toBytesReference(final ByteBuf buffer) {_        return toBytesReference(buffer, buffer.readableBytes())__    };wraps,the,given,channel,buffer,with,a,bytes,reference;public,static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,return,to,bytes,reference,buffer,buffer,readable,bytes
Netty4Utils -> public static BytesReference toBytesReference(final ByteBuf buffer);1543593730;Wraps the given ChannelBuffer with a BytesReference;public static BytesReference toBytesReference(final ByteBuf buffer) {_        return toBytesReference(buffer, buffer.readableBytes())__    };wraps,the,given,channel,buffer,with,a,bytes,reference;public,static,bytes,reference,to,bytes,reference,final,byte,buf,buffer,return,to,bytes,reference,buffer,buffer,readable,bytes
