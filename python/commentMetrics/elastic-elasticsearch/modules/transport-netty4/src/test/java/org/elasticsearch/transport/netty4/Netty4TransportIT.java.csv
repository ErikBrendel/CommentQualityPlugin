commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(NetworkModule.TRANSPORT_TYPE_KEY, "exception-throwing").build(). }
false;protected;0;7;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     List<Class<? extends Plugin>> list = new ArrayList<>().     list.add(ExceptionThrowingNetty4Transport.TestPlugin.class).     list.addAll(super.nodePlugins()).     return Collections.unmodifiableCollection(list). }
false;public;0;12;;public void testThatConnectionFailsAsIntended() throws Exception {     Client transportClient = internalCluster().transportClient().     ClusterHealthResponse clusterIndexHealths = transportClient.admin().cluster().prepareHealth().get().     assertThat(clusterIndexHealths.getStatus(), is(ClusterHealthStatus.GREEN)).     try {         transportClient.filterWithHeader(Collections.singletonMap("ERROR", "MY MESSAGE")).admin().cluster().prepareHealth().get().         fail("Expected exception, but didn't happen").     } catch (ElasticsearchException e) {         assertThat(e.getMessage(), containsString("MY MESSAGE")).         assertThat(channelProfileName, is(TransportSettings.DEFAULT_PROFILE)).     } }
false;public;6;10;;@Override public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {     return Collections.singletonMap("exception-throwing", () -> new ExceptionThrowingNetty4Transport(settings, threadPool, networkService, pageCacheRecycler, namedWriteableRegistry, circuitBreakerService)). }
false;protected;3;5;;@Override protected void handleRequest(TcpChannel channel, InboundMessage.RequestMessage request, int messageLengthBytes) throws IOException {     super.handleRequest(channel, request, messageLengthBytes).     channelProfileName = TransportSettings.DEFAULT_PROFILE. }
false;protected;3;9;;@Override protected void validateRequest(StreamInput buffer, long requestId, String action) throws IOException {     super.validateRequest(buffer, requestId, action).     String error = threadPool.getThreadContext().getHeader("ERROR").     if (error != null) {         throw new ElasticsearchException(error).     } }
