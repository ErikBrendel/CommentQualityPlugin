commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testCorsEnabledWithoutAllowOrigins() {     // Set up an HTTP transport with only the CORS enabled setting     Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_CORS_ENABLED.getKey(), true).build().     HttpResponse response = executeRequest(settings, "remote-host", "request-host").     // inspect response and validate     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), nullValue()). }
false;public;0;13;;public void testCorsEnabledWithAllowOrigins() {     final String originValue = "remote-host".     // create an HTTP transport with CORS enabled and allow origin configured     Settings settings = Settings.builder().put(SETTING_CORS_ENABLED.getKey(), true).put(SETTING_CORS_ALLOW_ORIGIN.getKey(), originValue).build().     HttpResponse response = executeRequest(settings, originValue, "request-host").     // inspect response and validate     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue()).     String allowedOrigins = response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN).     assertThat(allowedOrigins, is(originValue)). }
false;public;0;32;;public void testCorsAllowOriginWithSameHost() {     String originValue = "remote-host".     String host = "remote-host".     // create an HTTP transport with CORS enabled     Settings settings = Settings.builder().put(SETTING_CORS_ENABLED.getKey(), true).build().     HttpResponse response = executeRequest(settings, originValue, host).     // inspect response and validate     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue()).     String allowedOrigins = response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN).     assertThat(allowedOrigins, is(originValue)).     originValue = "http://" + originValue.     response = executeRequest(settings, originValue, host).     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue()).     allowedOrigins = response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN).     assertThat(allowedOrigins, is(originValue)).     originValue = originValue + ":5555".     host = host + ":5555".     response = executeRequest(settings, originValue, host).     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue()).     allowedOrigins = response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN).     assertThat(allowedOrigins, is(originValue)).     originValue = originValue.replace("http", "https").     response = executeRequest(settings, originValue, host).     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue()).     allowedOrigins = response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN).     assertThat(allowedOrigins, is(originValue)). }
false;public;0;15;;public void testThatStringLiteralWorksOnMatch() {     final String originValue = "remote-host".     Settings settings = Settings.builder().put(SETTING_CORS_ENABLED.getKey(), true).put(SETTING_CORS_ALLOW_ORIGIN.getKey(), originValue).put(SETTING_CORS_ALLOW_METHODS.getKey(), "get, options, post").put(SETTING_CORS_ALLOW_CREDENTIALS.getKey(), true).build().     HttpResponse response = executeRequest(settings, originValue, "request-host").     // inspect response and validate     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue()).     String allowedOrigins = response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN).     assertThat(allowedOrigins, is(originValue)).     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_CREDENTIALS), equalTo("true")). }
false;public;0;13;;public void testThatAnyOriginWorks() {     final String originValue = Netty4CorsHandler.ANY_ORIGIN.     Settings settings = Settings.builder().put(SETTING_CORS_ENABLED.getKey(), true).put(SETTING_CORS_ALLOW_ORIGIN.getKey(), originValue).build().     HttpResponse response = executeRequest(settings, originValue, "request-host").     // inspect response and validate     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue()).     String allowedOrigins = response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN).     assertThat(allowedOrigins, is(originValue)).     assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_CREDENTIALS), nullValue()). }
false;private;3;13;;private FullHttpResponse executeRequest(final Settings settings, final String originValue, final String host) {     // construct request and send it over the transport layer     final FullHttpRequest httpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/").     if (originValue != null) {         httpRequest.headers().add(HttpHeaderNames.ORIGIN, originValue).     }     httpRequest.headers().add(HttpHeaderNames.HOST, host).     EmbeddedChannel embeddedChannel = new EmbeddedChannel().     embeddedChannel.pipeline().addLast(new Netty4CorsHandler(Netty4HttpServerTransport.buildCorsConfig(settings))).     Netty4HttpRequest nettyRequest = new Netty4HttpRequest(httpRequest, 0).     embeddedChannel.writeOutbound(nettyRequest.createResponse(RestStatus.OK, new BytesArray("content"))).     return embeddedChannel.readOutbound(). }
