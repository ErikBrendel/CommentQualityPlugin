commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;15;;@Override protected Settings nodeSettings(int nodeOrdinal) {     if (randomPort == -1) {         randomPort = randomIntBetween(49152, 65525).         randomPortRange = String.format(Locale.ROOT, "%s-%s", randomPort, randomPort + 10).     }     Settings.Builder builder = Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("network.host", "127.0.0.1").put("transport.profiles.client1.port", randomPortRange).put("transport.profiles.client1.publish_host", "127.0.0.7").put("transport.profiles.client1.publish_port", "4321").put("transport.profiles.client1.reuse_address", true).     return builder.build(). }
false;public;0;15;;public void testThatTransportClientCanConnect() throws Exception {     Settings settings = Settings.builder().put("cluster.name", internalCluster().getClusterName()).put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     // we have to test all the ports that the data node might be bound to     try (TransportClient transportClient = new MockTransportClient(settings, Netty4Plugin.class)) {         for (int i = 0. i <= 10. i++) {             transportClient.addTransportAddress(new TransportAddress(InetAddress.getByName("127.0.0.1"), randomPort + i)).         }         ClusterHealthResponse response = transportClient.admin().cluster().prepareHealth().get().         assertThat(response.getStatus(), is(ClusterHealthStatus.GREEN)).     } }
false;public;0;25;;@Network public void testThatInfosAreExposed() throws Exception {     NodesInfoResponse response = client().admin().cluster().prepareNodesInfo().clear().setTransport(true).get().     for (NodeInfo nodeInfo : response.getNodes()) {         assertThat(nodeInfo.getTransport().getProfileAddresses().keySet(), hasSize(1)).         assertThat(nodeInfo.getTransport().getProfileAddresses(), hasKey("client1")).         BoundTransportAddress boundTransportAddress = nodeInfo.getTransport().getProfileAddresses().get("client1").         for (TransportAddress transportAddress : boundTransportAddress.boundAddresses()) {             assertThat(transportAddress, instanceOf(TransportAddress.class)).         }         // bound addresses         for (TransportAddress transportAddress : boundTransportAddress.boundAddresses()) {             assertThat(transportAddress, instanceOf(TransportAddress.class)).             assertThat(transportAddress.address().getPort(), is(allOf(greaterThanOrEqualTo(randomPort), lessThanOrEqualTo(randomPort + 10)))).         }         // publish address         assertThat(boundTransportAddress.publishAddress(), instanceOf(TransportAddress.class)).         TransportAddress publishAddress = boundTransportAddress.publishAddress().         assertThat(NetworkAddress.format(publishAddress.address().getAddress()), is("127.0.0.7")).         assertThat(publishAddress.address().getPort(), is(4321)).     } }
