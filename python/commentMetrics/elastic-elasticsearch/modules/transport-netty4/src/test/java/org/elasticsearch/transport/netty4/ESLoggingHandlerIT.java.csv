commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void setUp() throws Exception {     super.setUp().     appender = new MockLogAppender().     Loggers.addAppender(LogManager.getLogger(ESLoggingHandler.class), appender).     Loggers.addAppender(LogManager.getLogger(TransportLogger.class), appender).     appender.start(). }
false;public;0;6;;public void tearDown() throws Exception {     Loggers.removeAppender(LogManager.getLogger(ESLoggingHandler.class), appender).     Loggers.removeAppender(LogManager.getLogger(TransportLogger.class), appender).     appender.stop().     super.tearDown(). }
false;public;0;33;;public void testLoggingHandler() throws IllegalAccessException {     final String writePattern = ".*\\[length: \\d+" + ", request id: \\d+" + ", type: request" + ", version: .*" + ", action: cluster:monitor/nodes/hot_threads\\[n\\]\\]" + " WRITE: \\d+B".     final MockLogAppender.LoggingExpectation writeExpectation = new MockLogAppender.PatternSeenEventExcpectation("hot threads request", TransportLogger.class.getCanonicalName(), Level.TRACE, writePattern).     final MockLogAppender.LoggingExpectation flushExpectation = new MockLogAppender.SeenEventExpectation("flush", ESLoggingHandler.class.getCanonicalName(), Level.TRACE, "*FLUSH*").     final String readPattern = ".*\\[length: \\d+" + ", request id: \\d+" + ", type: request" + ", version: .*" + ", action: cluster:monitor/nodes/hot_threads\\[n\\]\\]" + " READ: \\d+B".     final MockLogAppender.LoggingExpectation readExpectation = new MockLogAppender.PatternSeenEventExcpectation("hot threads request", TransportLogger.class.getCanonicalName(), Level.TRACE, readPattern).     appender.addExpectation(writeExpectation).     appender.addExpectation(flushExpectation).     appender.addExpectation(readExpectation).     client().admin().cluster().nodesHotThreads(new NodesHotThreadsRequest()).actionGet().     appender.assertAllExpectationsMatched(). }
