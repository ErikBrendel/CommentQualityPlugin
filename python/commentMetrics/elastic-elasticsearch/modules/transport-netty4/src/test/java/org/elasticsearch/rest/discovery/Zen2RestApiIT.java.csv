commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;public;2;8;;@Override public void doAfterNodes(int n, Client client) throws IOException {     ensureGreen("test").     Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + internalCluster().getNodeNames()[n])).     assertThat(response.getStatusLine().getStatusCode(), is(200)). }
false;public;1;31;;@Override public Settings onNodeStopped(String nodeName) throws IOException {     String viaNode = randomValueOtherThan(nodeName, () -> randomFrom(nodes)).     List<Node> allNodes = restClient.getNodes().     try {         restClient.setNodes(Collections.singletonList(new Node(HttpHost.create(internalCluster().getInstance(HttpServerTransport.class, viaNode).boundAddress().publishAddress().toString())))).         Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions")).         assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200)).         ClusterHealthResponse clusterHealthResponse = client(viaNode).admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(Integer.toString(1)).setTimeout(TimeValue.timeValueSeconds(30L)).setWaitForYellowStatus().get().         assertFalse(nodeName, clusterHealthResponse.isTimedOut()).         return Settings.EMPTY.     } finally {         restClient.setNodes(allNodes).     } }
false;public;0;59;;public void testRollingRestartOfTwoNodeCluster() throws Exception {     internalCluster().setBootstrapMasterNodeIndex(1).     final List<String> nodes = internalCluster().startNodes(2).     createIndex("test", Settings.builder().put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), // assign shards     TimeValue.ZERO).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, // causes rebalancing     2).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).build()).     ensureGreen("test").     RestClient restClient = getRestClient().     internalCluster().rollingRestart(new InternalTestCluster.RestartCallback() {          @Override         public void doAfterNodes(int n, Client client) throws IOException {             ensureGreen("test").             Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + internalCluster().getNodeNames()[n])).             assertThat(response.getStatusLine().getStatusCode(), is(200)).         }          @Override         public Settings onNodeStopped(String nodeName) throws IOException {             String viaNode = randomValueOtherThan(nodeName, () -> randomFrom(nodes)).             List<Node> allNodes = restClient.getNodes().             try {                 restClient.setNodes(Collections.singletonList(new Node(HttpHost.create(internalCluster().getInstance(HttpServerTransport.class, viaNode).boundAddress().publishAddress().toString())))).                 Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions")).                 assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200)).                 ClusterHealthResponse clusterHealthResponse = client(viaNode).admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(Integer.toString(1)).setTimeout(TimeValue.timeValueSeconds(30L)).setWaitForYellowStatus().get().                 assertFalse(nodeName, clusterHealthResponse.isTimedOut()).                 return Settings.EMPTY.             } finally {                 restClient.setNodes(allNodes).             }         }     }).     ensureStableCluster(2).     ensureGreen("test").     assertThat(internalCluster().size(), is(2)). }
false;public;0;13;;public void testClearVotingTombstonesNotWaitingForRemoval() throws Exception {     internalCluster().setBootstrapMasterNodeIndex(2).     List<String> nodes = internalCluster().startNodes(3).     ensureStableCluster(3).     RestClient restClient = getRestClient().     Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + nodes.get(2))).     assertThat(response.getStatusLine().getStatusCode(), is(200)).     assertThat(response.getEntity().getContentLength(), is(0L)).     Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions/?wait_for_removal=false")).     assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200)).     assertThat(deleteResponse.getEntity().getContentLength(), is(0L)). }
false;public;0;14;;public void testClearVotingTombstonesWaitingForRemoval() throws Exception {     internalCluster().setBootstrapMasterNodeIndex(2).     List<String> nodes = internalCluster().startNodes(3).     ensureStableCluster(3).     RestClient restClient = getRestClient().     String nodeToWithdraw = nodes.get(randomIntBetween(0, 2)).     Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + nodeToWithdraw)).     assertThat(response.getStatusLine().getStatusCode(), is(200)).     assertThat(response.getEntity().getContentLength(), is(0L)).     internalCluster().stopRandomNode(InternalTestCluster.nameFilter(nodeToWithdraw)).     Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions")).     assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200)).     assertThat(deleteResponse.getEntity().getContentLength(), is(0L)). }
false;public;0;16;;public void testFailsOnUnknownNode() throws Exception {     internalCluster().setBootstrapMasterNodeIndex(2).     internalCluster().startNodes(3).     ensureStableCluster(3).     RestClient restClient = getRestClient().     try {         restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/invalid")).         fail("Invalid node name should throw.").     } catch (ResponseException e) {         assertThat(e.getResponse().getStatusLine().getStatusCode(), is(400)).         assertThat(e.getMessage(), Matchers.containsString("add voting config exclusions request for [invalid] matched no master-eligible nodes")).     } }
