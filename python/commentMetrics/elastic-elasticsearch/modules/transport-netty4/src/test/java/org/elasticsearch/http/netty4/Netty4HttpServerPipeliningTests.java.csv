commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     networkService = new NetworkService(Collections.emptyList()).     threadPool = new TestThreadPool("test").     bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService()). }
false;public;0;6;;@After public void shutdown() throws Exception {     if (threadPool != null) {         threadPool.shutdownNow().     } }
false;public;0;29;;public void testThatHttpPipeliningWorks() throws Exception {     final Settings settings = Settings.builder().put("http.port", "0").build().     try (HttpServerTransport httpServerTransport = new CustomNettyHttpServerTransport(settings)) {         httpServerTransport.start().         final TransportAddress transportAddress = randomFrom(httpServerTransport.boundAddress().boundAddresses()).         final int numberOfRequests = randomIntBetween(4, 16).         final List<String> requests = new ArrayList<>(numberOfRequests).         for (int i = 0. i < numberOfRequests. i++) {             if (rarely()) {                 requests.add("/slow/" + i).             } else {                 requests.add("/" + i).             }         }         try (Netty4HttpClient nettyHttpClient = new Netty4HttpClient()) {             Collection<FullHttpResponse> responses = nettyHttpClient.get(transportAddress.address(), requests.toArray(new String[] {})).             try {                 Collection<String> responseBodies = Netty4HttpClient.returnHttpResponseBodies(responses).                 assertThat(responseBodies, contains(requests.toArray())).             } finally {                 responses.forEach(ReferenceCounted::release).             }         }     } }
false;public;0;4;;@Override public ChannelHandler configureServerChannelHandler() {     return new CustomHttpChannelHandler(this, executorService). }
false;protected;0;5;;@Override protected void doClose() {     executorService.shutdown().     super.doClose(). }
false;protected;1;5;;@Override protected void initChannel(Channel ch) throws Exception {     super.initChannel(ch).     ch.pipeline().replace("handler", "handler", new PossiblySlowUpstreamHandler(executorService)). }
false;protected;2;4;;@Override protected void channelRead0(ChannelHandlerContext ctx, HttpPipelinedRequest<FullHttpRequest> msg) throws Exception {     executorService.submit(new PossiblySlowRunnable(ctx, msg)). }
false;public;2;5;;@Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {     logger.info("Caught exception", cause).     ctx.channel().close().sync(). }
false;public;0;29;;@Override public void run() {     try {         final String uri = fullHttpRequest.uri().         final ByteBuf buffer = Unpooled.copiedBuffer(uri, StandardCharsets.UTF_8).         Netty4HttpRequest httpRequest = new Netty4HttpRequest(fullHttpRequest, pipelinedRequest.getSequence()).         Netty4HttpResponse response = httpRequest.createResponse(RestStatus.OK, new BytesArray(uri.getBytes(StandardCharsets.UTF_8))).         response.headers().add(HttpHeaderNames.CONTENT_LENGTH, buffer.readableBytes()).         final boolean slow = uri.matches("/slow/\\d+").         if (slow) {             try {                 Thread.sleep(scaledRandomIntBetween(500, 1000)).             } catch (InterruptedException e) {                 throw new RuntimeException(e).             }         } else {             assert uri.matches("/\\d+").         }         final ChannelPromise promise = ctx.newPromise().         ctx.writeAndFlush(response, promise).     } finally {         fullHttpRequest.release().     } }
