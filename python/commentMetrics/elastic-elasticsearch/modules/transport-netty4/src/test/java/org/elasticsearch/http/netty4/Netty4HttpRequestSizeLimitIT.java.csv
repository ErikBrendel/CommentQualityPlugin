commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;protected;1;7;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), LIMIT).build(). }
false;public;0;42;;public void testLimitsInFlightRequests() throws Exception {     ensureGreen().     // we use the limit size as a (very) rough indication on how many requests we should sent to hit the limit     int numRequests = LIMIT.bytesAsInt() / 100.     StringBuilder bulkRequest = new StringBuilder().     for (int i = 0. i < numRequests. i++) {         bulkRequest.append("{\"index\": {}}").         bulkRequest.append(System.lineSeparator()).         bulkRequest.append("{ \"field\" : \"value\" }").         bulkRequest.append(System.lineSeparator()).     }     @SuppressWarnings("unchecked")     Tuple<String, CharSequence>[] requests = new Tuple[150].     for (int i = 0. i < requests.length. i++) {         requests[i] = Tuple.tuple("/index/type/_bulk", bulkRequest).     }     HttpServerTransport httpServerTransport = internalCluster().getInstance(HttpServerTransport.class).     TransportAddress transportAddress = (TransportAddress) randomFrom(httpServerTransport.boundAddress().boundAddresses()).     try (Netty4HttpClient nettyHttpClient = new Netty4HttpClient()) {         Collection<FullHttpResponse> singleResponse = nettyHttpClient.post(transportAddress.address(), requests[0]).         try {             assertThat(singleResponse, hasSize(1)).             assertAtLeastOnceExpectedStatus(singleResponse, HttpResponseStatus.OK).             Collection<FullHttpResponse> multipleResponses = nettyHttpClient.post(transportAddress.address(), requests).             try {                 assertThat(multipleResponses, hasSize(requests.length)).                 assertAtLeastOnceExpectedStatus(multipleResponses, HttpResponseStatus.TOO_MANY_REQUESTS).             } finally {                 multipleResponses.forEach(ReferenceCounted::release).             }         } finally {             singleResponse.forEach(ReferenceCounted::release).         }     } }
false;public;0;24;;public void testDoesNotLimitExcludedRequests() throws Exception {     ensureGreen().     @SuppressWarnings("unchecked")     Tuple<String, CharSequence>[] requestUris = new Tuple[1500].     for (int i = 0. i < requestUris.length. i++) {         requestUris[i] = Tuple.tuple("/_cluster/settings", "{ \"transient\": {\"search.default_search_timeout\": \"40s\" } }").     }     HttpServerTransport httpServerTransport = internalCluster().getInstance(HttpServerTransport.class).     TransportAddress transportAddress = (TransportAddress) randomFrom(httpServerTransport.boundAddress().boundAddresses()).     try (Netty4HttpClient nettyHttpClient = new Netty4HttpClient()) {         Collection<FullHttpResponse> responses = nettyHttpClient.put(transportAddress.address(), requestUris).         try {             assertThat(responses, hasSize(requestUris.length)).             assertAllInExpectedStatus(responses, HttpResponseStatus.OK).         } finally {             responses.forEach(ReferenceCounted::release).         }     } }
false;private;2;4;;private void assertAtLeastOnceExpectedStatus(Collection<FullHttpResponse> responses, HttpResponseStatus expectedStatus) {     long countExpectedStatus = responses.stream().filter(r -> r.status().equals(expectedStatus)).count().     assertThat("Expected at least one request with status [" + expectedStatus + "]", countExpectedStatus, greaterThan(0L)). }
false;private;2;5;;private void assertAllInExpectedStatus(Collection<FullHttpResponse> responses, HttpResponseStatus expectedStatus) {     long countUnexpectedStatus = responses.stream().filter(r -> r.status().equals(expectedStatus) == false).count().     assertThat("Expected all requests with status [" + expectedStatus + "] but [" + countUnexpectedStatus + "] requests had a different one", countUnexpectedStatus, equalTo(0L)). }
