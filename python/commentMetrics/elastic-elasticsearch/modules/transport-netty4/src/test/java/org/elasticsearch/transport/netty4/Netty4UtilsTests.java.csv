commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testToChannelBufferWithEmptyRef() throws IOException {     ByteBuf buffer = Netty4Utils.toByteBuf(getRandomizedBytesReference(0)).     assertSame(Unpooled.EMPTY_BUFFER, buffer). }
false;public;0;9;;public void testToChannelBufferWithSlice() throws IOException {     BytesReference ref = getRandomizedBytesReference(randomIntBetween(1, 3 * PAGE_SIZE)).     int sliceOffset = randomIntBetween(0, ref.length()).     int sliceLength = randomIntBetween(ref.length() - sliceOffset, ref.length() - sliceOffset).     BytesReference slice = ref.slice(sliceOffset, sliceLength).     ByteBuf buffer = Netty4Utils.toByteBuf(slice).     BytesReference bytesReference = Netty4Utils.toBytesReference(buffer).     assertArrayEquals(BytesReference.toBytes(slice), BytesReference.toBytes(bytesReference)). }
false;public;0;9;;public void testToChannelBufferWithSliceAfter() throws IOException {     BytesReference ref = getRandomizedBytesReference(randomIntBetween(1, 3 * PAGE_SIZE)).     int sliceOffset = randomIntBetween(0, ref.length()).     int sliceLength = randomIntBetween(ref.length() - sliceOffset, ref.length() - sliceOffset).     ByteBuf buffer = Netty4Utils.toByteBuf(ref).     BytesReference bytesReference = Netty4Utils.toBytesReference(buffer).     assertArrayEquals(BytesReference.toBytes(ref.slice(sliceOffset, sliceLength)), BytesReference.toBytes(bytesReference.slice(sliceOffset, sliceLength))). }
false;public;0;11;;public void testToChannelBuffer() throws IOException {     BytesReference ref = getRandomizedBytesReference(randomIntBetween(1, 3 * PAGE_SIZE)).     ByteBuf buffer = Netty4Utils.toByteBuf(ref).     BytesReference bytesReference = Netty4Utils.toBytesReference(buffer).     if (ref instanceof ByteBufBytesReference) {         assertEquals(buffer, ((ByteBufBytesReference) ref).toByteBuf()).     } else if (AbstractBytesReferenceTestCase.getNumPages(ref) > 1) {         // we gather the buffers into a channel buffer         assertTrue(buffer instanceof CompositeByteBuf).     }     assertArrayEquals(BytesReference.toBytes(ref), BytesReference.toBytes(bytesReference)). }
false;private;1;19;;private BytesReference getRandomizedBytesReference(int length) throws IOException {     // we know bytes stream output always creates a paged bytes reference, we use it to create randomized content     ReleasableBytesStreamOutput out = new ReleasableBytesStreamOutput(length, bigarrays).     for (int i = 0. i < length. i++) {         out.writeByte((byte) random().nextInt(1 << 8)).     }     assertEquals(out.size(), length).     BytesReference ref = out.bytes().     assertEquals(ref.length(), length).     if (randomBoolean()) {         return new BytesArray(ref.toBytesRef()).     } else if (randomBoolean()) {         BytesRef bytesRef = ref.toBytesRef().         return Netty4Utils.toBytesReference(Unpooled.wrappedBuffer(bytesRef.bytes, bytesRef.offset, bytesRef.length)).     } else {         return ref.     } }
