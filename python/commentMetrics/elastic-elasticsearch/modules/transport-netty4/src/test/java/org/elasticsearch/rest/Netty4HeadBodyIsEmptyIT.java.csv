commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testHeadRoot() throws IOException {     headTestCase("/", emptyMap(), greaterThan(0)).     headTestCase("/", singletonMap("pretty", ""), greaterThan(0)).     headTestCase("/", singletonMap("pretty", "true"), greaterThan(0)). }
false;private;0;3;;private void createTestDoc() throws IOException {     createTestDoc("test"). }
false;private;1;12;;private void createTestDoc(final String indexName) throws IOException {     try (XContentBuilder builder = jsonBuilder()) {         builder.startObject().         {             builder.field("test", "test").         }         builder.endObject().         Request request = new Request("PUT", "/" + indexName + "/_doc/" + "1").         request.setJsonEntity(Strings.toString(builder)).         client().performRequest(request).     } }
false;public;0;6;;public void testDocumentExists() throws IOException {     createTestDoc().     headTestCase("/test/_doc/1", emptyMap(), greaterThan(0)).     headTestCase("/test/_doc/1", singletonMap("pretty", "true"), greaterThan(0)).     headTestCase("/test/_doc/2", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0)). }
false;public;0;5;;public void testIndexExists() throws IOException {     createTestDoc().     headTestCase("/test", emptyMap(), greaterThan(0)).     headTestCase("/test", singletonMap("pretty", "true"), greaterThan(0)). }
false;public;0;7;;public void testTypeExists() throws IOException {     createTestDoc().     headTestCase("/test/_mapping/_doc", emptyMap(), OK.getStatus(), greaterThan(0), "Type exists requests are deprecated, as types have been deprecated.").     headTestCase("/test/_mapping/_doc", singletonMap("pretty", "true"), OK.getStatus(), greaterThan(0), "Type exists requests are deprecated, as types have been deprecated."). }
false;public;0;7;;public void testTypeDoesNotExist() throws IOException {     createTestDoc().     headTestCase("/test/_mapping/does-not-exist", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0), "Type exists requests are deprecated, as types have been deprecated.").     headTestCase("/text/_mapping/test,does-not-exist", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0), "Type exists requests are deprecated, as types have been deprecated."). }
false;public;0;29;;public void testAliasExists() throws IOException {     createTestDoc().     try (XContentBuilder builder = jsonBuilder()) {         builder.startObject().         {             builder.startArray("actions").             {                 builder.startObject().                 {                     builder.startObject("add").                     {                         builder.field("index", "test").                         builder.field("alias", "test_alias").                     }                     builder.endObject().                 }                 builder.endObject().             }             builder.endArray().         }         builder.endObject().         Request request = new Request("POST", "/_aliases").         request.setJsonEntity(Strings.toString(builder)).         client().performRequest(request).         headTestCase("/_alias/test_alias", emptyMap(), greaterThan(0)).         headTestCase("/test/_alias/test_alias", emptyMap(), greaterThan(0)).     } }
false;public;0;5;;public void testAliasDoesNotExist() throws IOException {     createTestDoc().     headTestCase("/_alias/test_alias", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0)).     headTestCase("/test/_alias/test_alias", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0)). }
false;public;0;19;;public void testTemplateExists() throws IOException {     try (XContentBuilder builder = jsonBuilder()) {         builder.startObject().         {             builder.array("index_patterns", "*").             builder.startObject("settings").             {                 builder.field("number_of_replicas", 0).             }             builder.endObject().         }         builder.endObject().         Request request = new Request("PUT", "/_template/template").         request.setJsonEntity(Strings.toString(builder)).         client().performRequest(request).         headTestCase("/_template/template", emptyMap(), greaterThan(0)).     } }
false;public;0;27;;public void testGetSourceAction() throws IOException {     createTestDoc().     headTestCase("/test/_source/1", emptyMap(), greaterThan(0)).     headTestCase("/test/_source/2", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0)).     try (XContentBuilder builder = jsonBuilder()) {         builder.startObject().         {             builder.startObject("mappings").             {                 builder.startObject("_source").                 {                     builder.field("enabled", false).                 }                 builder.endObject().             }             builder.endObject().         }         builder.endObject().         Request request = new Request("PUT", "/test-no-source").         request.setJsonEntity(Strings.toString(builder)).         client().performRequest(request).         createTestDoc("test-no-source").         headTestCase("/test-no-source/_source/1", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0)).     } }
false;public;0;9;;public void testException() throws IOException {     /*          * This will throw an index not found exception which will be sent on the channel. previously when handling HEAD requests that would          * throw an exception, the content was swallowed and a content length header of zero was returned. Instead of swallowing the content          * we now let it rise up to the upstream channel so that it can compute the content length that would be returned. This test case is          * a test for this situation.          */     headTestCase("/index-not-found-exception", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0)). }
false;private;3;3;;private void headTestCase(final String url, final Map<String, String> params, final Matcher<Integer> matcher) throws IOException {     headTestCase(url, params, OK.getStatus(), matcher). }
false;private;5;16;;private void headTestCase(final String url, final Map<String, String> params, final int expectedStatusCode, final Matcher<Integer> matcher, final String... expectedWarnings) throws IOException {     Request request = new Request("HEAD", url).     for (Map.Entry<String, String> param : params.entrySet()) {         request.addParameter(param.getKey(), param.getValue()).     }     request.setOptions(expectWarnings(expectedWarnings)).     Response response = client().performRequest(request).     assertEquals(expectedStatusCode, response.getStatusLine().getStatusCode()).     assertThat(Integer.valueOf(response.getHeader("Content-Length")), matcher).     assertNull("HEAD requests shouldn't have a response body but " + url + " did", response.getEntity()). }
