commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testCreateEncoder() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> CustomMustacheFactory.createEncoder(null)).     assertThat(e.getMessage(), equalTo("No encoder found for MIME type [null]")).     e = expectThrows(IllegalArgumentException.class, () -> CustomMustacheFactory.createEncoder("")).     assertThat(e.getMessage(), equalTo("No encoder found for MIME type []")).     e = expectThrows(IllegalArgumentException.class, () -> CustomMustacheFactory.createEncoder("test")).     assertThat(e.getMessage(), equalTo("No encoder found for MIME type [test]")).     assertThat(CustomMustacheFactory.createEncoder(CustomMustacheFactory.JSON_MIME_TYPE_WITH_CHARSET), instanceOf(CustomMustacheFactory.JsonEscapeEncoder.class)).     assertThat(CustomMustacheFactory.createEncoder(CustomMustacheFactory.JSON_MIME_TYPE), instanceOf(CustomMustacheFactory.JsonEscapeEncoder.class)).     assertThat(CustomMustacheFactory.createEncoder(CustomMustacheFactory.PLAIN_TEXT_MIME_TYPE), instanceOf(CustomMustacheFactory.DefaultEncoder.class)).     assertThat(CustomMustacheFactory.createEncoder(CustomMustacheFactory.X_WWW_FORM_URLENCODED_MIME_TYPE), instanceOf(CustomMustacheFactory.UrlEncoder.class)). }
false;public;0;9;;public void testJsonEscapeEncoder() {     final ScriptEngine engine = new MustacheScriptEngine().     final Map<String, String> params = randomBoolean() ? singletonMap(Script.CONTENT_TYPE_OPTION, JSON_MIME_TYPE) : emptyMap().     TemplateScript.Factory compiled = engine.compile(null, "{\"field\": \"{{value}}\"}", TemplateScript.CONTEXT, params).     TemplateScript executable = compiled.newInstance(singletonMap("value", "a \"value\"")).     assertThat(executable.execute(), equalTo("{\"field\": \"a \\\"value\\\"\"}")). }
false;public;0;9;;public void testDefaultEncoder() {     final ScriptEngine engine = new MustacheScriptEngine().     final Map<String, String> params = singletonMap(Script.CONTENT_TYPE_OPTION, PLAIN_TEXT_MIME_TYPE).     TemplateScript.Factory compiled = engine.compile(null, "{\"field\": \"{{value}}\"}", TemplateScript.CONTEXT, params).     TemplateScript executable = compiled.newInstance(singletonMap("value", "a \"value\"")).     assertThat(executable.execute(), equalTo("{\"field\": \"a \"value\"\"}")). }
false;public;0;9;;public void testUrlEncoder() {     final ScriptEngine engine = new MustacheScriptEngine().     final Map<String, String> params = singletonMap(Script.CONTENT_TYPE_OPTION, X_WWW_FORM_URLENCODED_MIME_TYPE).     TemplateScript.Factory compiled = engine.compile(null, "{\"field\": \"{{value}}\"}", TemplateScript.CONTEXT, params).     TemplateScript executable = compiled.newInstance(singletonMap("value", "tilde~ AND date:[2016 FROM*]")).     assertThat(executable.execute(), equalTo("{\"field\": \"tilde%7E+AND+date%3A%5B2016+FROM*%5D\"}")). }
