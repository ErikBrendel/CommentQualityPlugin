commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public SearchTemplateRequest createTestInstance() {     return SearchTemplateRequestTests.createRandomRequest(). }
false;protected;1;4;;@Override protected SearchTemplateRequest doParseInstance(XContentParser parser) throws IOException {     return SearchTemplateRequest.fromXContent(parser). }
true;protected;2;9;/**  * Note that when checking equality for xContent parsing, we omit two parts of the request:  * - The 'simulate' option, since this parameter is not included in the  *   request's xContent (it's instead used to determine the request endpoint).  * - The random SearchRequest, since this component only affects the request  *   parameters and also isn't captured in the request's xContent.  */ ;/**  * Note that when checking equality for xContent parsing, we omit two parts of the request:  * - The 'simulate' option, since this parameter is not included in the  *   request's xContent (it's instead used to determine the request endpoint).  * - The random SearchRequest, since this component only affects the request  *   parameters and also isn't captured in the request's xContent.  */ @Override protected void assertEqualInstances(SearchTemplateRequest expectedInstance, SearchTemplateRequest newInstance) {     assertTrue(expectedInstance.isExplain() == newInstance.isExplain() && expectedInstance.isProfile() == newInstance.isProfile() && expectedInstance.getScriptType() == newInstance.getScriptType() && Objects.equals(expectedInstance.getScript(), newInstance.getScript()) && Objects.equals(expectedInstance.getScriptParams(), newInstance.getScriptParams())). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;public;0;31;;public void testToXContentWithInlineTemplate() throws IOException {     SearchTemplateRequest request = new SearchTemplateRequest().     request.setScriptType(ScriptType.INLINE).     request.setScript("{\"query\": { \"match\" : { \"{{my_field}}\" : \"{{my_value}}\" } } }").     request.setProfile(true).     Map<String, Object> scriptParams = new HashMap<>().     scriptParams.put("my_field", "foo").     scriptParams.put("my_value", "bar").     request.setScriptParams(scriptParams).     XContentType contentType = randomFrom(XContentType.values()).     XContentBuilder expectedRequest = XContentFactory.contentBuilder(contentType).startObject().field("source", "{\"query\": { \"match\" : { \"{{my_field}}\" : \"{{my_value}}\" } } }").startObject("params").field("my_field", "foo").field("my_value", "bar").endObject().field("explain", false).field("profile", true).endObject().     XContentBuilder actualRequest = XContentFactory.contentBuilder(contentType).     request.toXContent(actualRequest, ToXContent.EMPTY_PARAMS).     assertToXContentEquivalent(BytesReference.bytes(expectedRequest), BytesReference.bytes(actualRequest), contentType). }
false;public;0;32;;public void testToXContentWithStoredTemplate() throws IOException {     SearchTemplateRequest request = new SearchTemplateRequest().     request.setScriptType(ScriptType.STORED).     request.setScript("match_template").     request.setExplain(true).     Map<String, Object> params = new HashMap<>().     params.put("my_field", "foo").     params.put("my_value", "bar").     request.setScriptParams(params).     XContentType contentType = randomFrom(XContentType.values()).     XContentBuilder expectedRequest = XContentFactory.contentBuilder(contentType).startObject().field("id", "match_template").startObject("params").field("my_field", "foo").field("my_value", "bar").endObject().field("explain", true).field("profile", false).endObject().     XContentBuilder actualRequest = XContentFactory.contentBuilder(contentType).     request.toXContent(actualRequest, ToXContent.EMPTY_PARAMS).     assertToXContentEquivalent(BytesReference.bytes(expectedRequest), BytesReference.bytes(actualRequest), contentType). }
false;public;0;20;;public void testFromXContentWithEmbeddedTemplate() throws Exception {     String source = "{" + "    'source' : {\n" + "    'query': {\n" + "      'terms': {\n" + "        'status': [\n" + "          '{{#status}}',\n" + "          '{{.}}',\n" + "          '{{/status}}'\n" + "        ]\n" + "      }\n" + "    }\n" + "  }" + "}".     SearchTemplateRequest request = SearchTemplateRequest.fromXContent(newParser(source)).     assertThat(request.getScript(), equalTo("{\"query\":{\"terms\":{\"status\":[\"{{#status}}\",\"{{.}}\",\"{{/status}}\"]}}}")).     assertThat(request.getScriptType(), equalTo(ScriptType.INLINE)).     assertThat(request.getScriptParams(), nullValue()). }
false;public;0;21;;public void testFromXContentWithEmbeddedTemplateAndParams() throws Exception {     String source = "{" + "    'source' : {" + "      'query': { 'match' : { '{{my_field}}' : '{{my_value}}' } }," + "      'size' : '{{my_size}}'" + "    }," + "    'params' : {" + "        'my_field' : 'foo'," + "        'my_value' : 'bar'," + "        'my_size' : 5" + "    }" + "}".     SearchTemplateRequest request = SearchTemplateRequest.fromXContent(newParser(source)).     assertThat(request.getScript(), equalTo("{\"query\":{\"match\":{\"{{my_field}}\":\"{{my_value}}\"}},\"size\":\"{{my_size}}\"}")).     assertThat(request.getScriptType(), equalTo(ScriptType.INLINE)).     assertThat(request.getScriptParams().size(), equalTo(3)).     assertThat(request.getScriptParams(), hasEntry("my_field", "foo")).     assertThat(request.getScriptParams(), hasEntry("my_value", "bar")).     assertThat(request.getScriptParams(), hasEntry("my_size", 5)). }
false;public;0;4;;public void testFromXContentWithMalformedRequest() {     // Unclosed template id     expectThrows(XContentParseException.class, () -> SearchTemplateRequest.fromXContent(newParser("{'id' : 'another_temp }"))). }
true;private;1;4;/**  * Creates a {@link XContentParser} with the given String while replacing single quote to double quotes.  */ ;/**  * Creates a {@link XContentParser} with the given String while replacing single quote to double quotes.  */ private XContentParser newParser(String s) throws IOException {     assertNotNull(s).     return createParser(JsonXContent.jsonXContent, s.replace("'", "\"")). }
