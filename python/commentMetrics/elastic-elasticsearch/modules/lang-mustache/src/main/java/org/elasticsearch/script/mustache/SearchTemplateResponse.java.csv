commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public BytesReference getSource() {     return source. }
false;public;1;3;;public void setSource(BytesReference source) {     this.source = source. }
false;public;0;3;;public SearchResponse getResponse() {     return response. }
false;public;1;3;;public void setResponse(SearchResponse searchResponse) {     this.response = searchResponse. }
false;public;0;3;;public boolean hasResponse() {     return response != null. }
false;public;0;4;;@Override public String toString() {     return "SearchTemplateResponse [source=" + source + ", response=" + response + "]". }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalBytesReference(source).     out.writeOptionalStreamable(response). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     source = in.readOptionalBytesReference().     response = in.readOptionalStreamable(SearchResponse::new). }
false;public,static;1;23;;public static SearchTemplateResponse fromXContent(XContentParser parser) throws IOException {     SearchTemplateResponse searchTemplateResponse = new SearchTemplateResponse().     Map<String, Object> contentAsMap = parser.map().     if (contentAsMap.containsKey(TEMPLATE_OUTPUT_FIELD.getPreferredName())) {         Object source = contentAsMap.get(TEMPLATE_OUTPUT_FIELD.getPreferredName()).         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).value(source).         searchTemplateResponse.setSource(BytesReference.bytes(builder)).     } else {         XContentType contentType = parser.contentType().         XContentBuilder builder = XContentFactory.contentBuilder(contentType).map(contentAsMap).         XContentParser searchResponseParser = contentType.xContent().createParser(parser.getXContentRegistry(), parser.getDeprecationHandler(), BytesReference.bytes(builder).streamInput()).         SearchResponse searchResponse = SearchResponse.fromXContent(searchResponseParser).         searchTemplateResponse.setResponse(searchResponse).     }     return searchTemplateResponse. }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (hasResponse()) {         response.toXContent(builder, params).     } else {         builder.startObject().         // we can assume the template is always json as we convert it before compiling it         try (InputStream stream = source.streamInput()) {             builder.rawField(TEMPLATE_OUTPUT_FIELD.getPreferredName(), stream, XContentType.JSON).         }         builder.endObject().     }     return builder. }
false;public;0;8;;@Override public RestStatus status() {     if (hasResponse()) {         return response.status().     } else {         return RestStatus.OK.     } }
