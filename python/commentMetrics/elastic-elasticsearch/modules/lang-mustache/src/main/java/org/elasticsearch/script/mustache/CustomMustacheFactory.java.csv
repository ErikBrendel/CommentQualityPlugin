commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public void encode(String value, Writer writer) {     try {         encoder.encode(value, writer).     } catch (IOException e) {         throw new MustacheException("Unable to encode value", e).     } }
false;static;1;7;;static Encoder createEncoder(String mimeType) {     Supplier<Encoder> supplier = ENCODERS.get(mimeType).     if (supplier == null) {         throw new IllegalArgumentException("No encoder found for MIME type [" + mimeType + "]").     }     return supplier.get(). }
false;public;0;4;;@Override public MustacheVisitor createMustacheVisitor() {     return new CustomMustacheVisitor(this). }
false;public;3;14;;@Override public void iterable(TemplateContext templateContext, String variable, Mustache mustache) {     if (ToJsonCode.match(variable)) {         list.add(new ToJsonCode(templateContext, df, mustache, variable)).     } else if (JoinerCode.match(variable)) {         list.add(new JoinerCode(templateContext, df, mustache)).     } else if (CustomJoinerCode.match(variable)) {         list.add(new CustomJoinerCode(templateContext, df, mustache, variable)).     } else if (UrlEncoderCode.match(variable)) {         list.add(new UrlEncoderCode(templateContext, df, mustache, variable)).     } else {         list.add(new IterableCode(templateContext, df, mustache, variable)).     } }
false;public;2;7;;@Override public Writer execute(Writer writer, final List<Object> scopes) {     Object resolved = get(scopes).     writer = handle(writer, createFunction(resolved), scopes).     appendText(writer).     return writer. }
false;protected;2;7;;@Override protected void tag(Writer writer, String tag) throws IOException {     writer.write(tc.startChars()).     writer.write(tag).     writer.write(code).     writer.write(tc.endChars()). }
false;protected,abstract;1;1;;protected abstract Function<String, String> createFunction(Object resolved).
true;protected,static;3;19;/**  * At compile time, this function extracts the name of the variable:  * {{#toJson}}variable_name{{/toJson}}  */ ;/**  * At compile time, this function extracts the name of the variable:  * {{#toJson}}variable_name{{/toJson}}  */ protected static String extractVariableName(String fn, Mustache mustache, TemplateContext tc) {     Code[] codes = mustache.getCodes().     if (codes == null || codes.length != 1) {         throw new MustacheException("Mustache function [" + fn + "] must contain one and only one identifier").     }     try (StringWriter capture = new StringWriter()) {         // Variable name is in plain text and has type WriteCode         if (codes[0] instanceof WriteCode) {             codes[0].execute(capture, Collections.emptyList()).             return capture.toString().         } else {             codes[0].identity(capture).             return capture.toString().         }     } catch (IOException e) {         throw new MustacheException("Exception while parsing mustache function [" + fn + "] at line " + tc.line(), e).     } }
false;protected;1;26;;@Override @SuppressWarnings("unchecked") protected Function<String, String> createFunction(Object resolved) {     return s -> {         if (resolved == null) {             return null.         }         try (XContentBuilder builder = XContentBuilder.builder(XContentType.JSON.xContent())) {             if (resolved instanceof Iterable) {                 builder.startArray().                 for (Object o : (Iterable<?>) resolved) {                     builder.value(o).                 }                 builder.endArray().             } else if (resolved instanceof Map) {                 builder.map((Map<String, ?>) resolved).             } else {                 // Do not handle as JSON                 return oh.stringify(resolved).             }             return Strings.toString(builder).         } catch (IOException e) {             throw new MustacheException("Failed to convert object to JSON", e).         }     }. }
false;static;1;3;;static boolean match(String variable) {     return CODE.equalsIgnoreCase(variable). }
false;protected;1;15;;@Override protected Function<String, String> createFunction(Object resolved) {     return s -> {         if (s == null) {             return null.         } else if (resolved instanceof Iterable) {             StringJoiner joiner = new StringJoiner(delimiter).             for (Object o : (Iterable<?>) resolved) {                 joiner.add(oh.stringify(o)).             }             return joiner.toString().         }         return s.     }. }
false;static;1;3;;static boolean match(String variable) {     return CODE.equalsIgnoreCase(variable). }
false;private,static;1;7;;private static String extractDelimiter(String variable) {     Matcher matcher = PATTERN.matcher(variable).     if (matcher.find()) {         return matcher.group(1).     }     throw new MustacheException("Failed to extract delimiter for join function"). }
false;static;1;3;;static boolean match(String variable) {     return PATTERN.matcher(variable).matches(). }
false;public;2;18;;@Override public Writer run(Writer writer, List<Object> scopes) {     if (getCodes() != null) {         for (Code code : getCodes()) {             try (StringWriter capture = new StringWriter()) {                 code.execute(capture, scopes).                 String s = capture.toString().                 if (s != null) {                     encoder.encode(s, writer).                 }             } catch (IOException e) {                 throw new MustacheException("Exception while parsing mustache function at line " + tc.line(), e).             }         }     }     return writer. }
false;static;1;3;;static boolean match(String variable) {     return CODE.equalsIgnoreCase(variable). }
true;;2;1;/**  * Encodes the {@code s} string and writes it to the {@code writer} {@link Writer}.  *  * @param s      The string to encode  * @param writer The {@link Writer} to which the encoded string will be written to  */ ;/**  * Encodes the {@code s} string and writes it to the {@code writer} {@link Writer}.  *  * @param s      The string to encode  * @param writer The {@link Writer} to which the encoded string will be written to  */ void encode(String s, Writer writer) throws IOException.
false;public;2;4;;@Override public void encode(String s, Writer writer) throws IOException {     writer.write(s). }
false;public;2;4;;@Override public void encode(String s, Writer writer) throws IOException {     writer.write(JsonStringEncoder.getInstance().quoteAsString(s)). }
false;public;2;4;;@Override public void encode(String s, Writer writer) throws IOException {     writer.write(URLEncoder.encode(s, StandardCharsets.UTF_8.name())). }
