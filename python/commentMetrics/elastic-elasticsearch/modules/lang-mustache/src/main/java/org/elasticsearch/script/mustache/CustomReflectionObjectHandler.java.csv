commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public Object coerce(Object object) {     if (object == null) {         return null.     }     if (object.getClass().isArray()) {         return new ArrayMap(object).     } else if (object instanceof Collection) {         @SuppressWarnings("unchecked")         Collection<Object> collection = (Collection<Object>) object.         return new CollectionMap(collection).     } else {         return super.coerce(object).     } }
false;public;1;15;;@Override public Object get(Object key) {     if ("size".equals(key)) {         return size().     } else if (key instanceof Number) {         return Array.get(array, ((Number) key).intValue()).     }     try {         int index = Integer.parseInt(key.toString()).         return Array.get(array, index).     } catch (NumberFormatException nfe) {         // if it's not a number it is as if the key doesn't exist         return null.     } }
false;public;1;4;;@Override public boolean containsKey(Object key) {     return get(key) != null. }
false;public;0;8;;@Override public Set<Entry<Object, Object>> entrySet() {     Map<Object, Object> map = new HashMap<>(length).     for (int i = 0. i < length. i++) {         map.put(i, Array.get(array, i)).     }     return map.entrySet(). }
false;public;0;4;;@Override public boolean hasNext() {     return index < length. }
false;public;0;4;;@Override public Object next() {     return Array.get(array, index++). }
false;public;0;17;;@Override public Iterator<Object> iterator() {     return new Iterator<Object>() {          int index = 0.          @Override         public boolean hasNext() {             return index < length.         }          @Override         public Object next() {             return Array.get(array, index++).         }     }. }
false;public;1;15;;@Override public Object get(Object key) {     if ("size".equals(key)) {         return col.size().     } else if (key instanceof Number) {         return Iterables.get(col, ((Number) key).intValue()).     }     try {         int index = Integer.parseInt(key.toString()).         return Iterables.get(col, index).     } catch (NumberFormatException nfe) {         // if it's not a number it is as if the key doesn't exist         return null.     } }
false;public;1;4;;@Override public boolean containsKey(Object key) {     return get(key) != null. }
false;public;0;9;;@Override public Set<Entry<Object, Object>> entrySet() {     Map<Object, Object> map = new HashMap<>(col.size()).     int i = 0.     for (Object item : col) {         map.put(i++, item).     }     return map.entrySet(). }
false;public;0;4;;@Override public Iterator<Object> iterator() {     return col.iterator(). }
false;public;1;5;;@Override public String stringify(Object object) {     CollectionUtils.ensureNoSelfReferences(object, "CustomReflectionObjectHandler stringify").     return super.stringify(object). }
