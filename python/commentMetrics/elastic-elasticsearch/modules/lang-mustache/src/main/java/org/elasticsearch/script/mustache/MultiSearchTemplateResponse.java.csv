commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Is it a failed search?  */ ;/**  * Is it a failed search?  */ public boolean isFailure() {     return exception != null. }
true;public;0;4;/**  * The actual failure message, null if its not a failure.  */ ;/**  * The actual failure message, null if its not a failure.  */ @Nullable public String getFailureMessage() {     return exception == null ? null : exception.getMessage(). }
true;public;0;4;/**  * The actual search response, null if its a failure.  */ ;/**  * The actual search response, null if its a failure.  */ @Nullable public SearchTemplateResponse getResponse() {     return this.response. }
false;public,static;1;5;;public static Item readItem(StreamInput in) throws IOException {     Item item = new Item().     item.readFrom(in).     return item. }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     if (in.readBoolean()) {         this.response = new SearchTemplateResponse().         response.readFrom(in).     } else {         exception = in.readException().     } }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     if (response != null) {         out.writeBoolean(true).         response.writeTo(out).     } else {         out.writeBoolean(false).         out.writeException(exception).     } }
false;public;0;3;;public Exception getFailure() {     return exception. }
false;public;0;4;;@Override public String toString() {     return "Item [response=" + response + ", exception=" + exception + "]". }
false;public;0;4;;@Override public Iterator<Item> iterator() {     return Arrays.stream(items).iterator(). }
true;public;0;3;/**  * The list of responses, the order is the same as the one provided in the request.  */ ;/**  * The list of responses, the order is the same as the one provided in the request.  */ public Item[] getResponses() {     return this.items. }
true;public;0;3;/**  * How long the msearch_template took.  */ ;/**  * How long the msearch_template took.  */ public TimeValue getTook() {     return new TimeValue(tookInMillis). }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     items = new Item[in.readVInt()].     for (int i = 0. i < items.length. i++) {         items[i] = Item.readItem(in).     }     if (in.getVersion().onOrAfter(Version.V_7_0_0)) {         tookInMillis = in.readVLong().     } }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(items.length).     for (Item item : items) {         item.writeTo(out).     }     if (out.getVersion().onOrAfter(Version.V_7_0_0)) {         out.writeVLong(tookInMillis).     } }
false;public;2;18;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field("took", tookInMillis).     builder.startArray(Fields.RESPONSES).     for (Item item : items) {         if (item.isFailure()) {             builder.startObject().             ElasticsearchException.generateFailureXContent(builder, params, item.getFailure(), true).             builder.endObject().         } else {             item.getResponse().toXContent(builder, params).         }     }     builder.endArray().     builder.endObject().     return builder. }
false;public,static;1;16;;public static MultiSearchTemplateResponse fromXContext(XContentParser parser) {     // The MultiSearchTemplateResponse is identical to the multi search response so we reuse the parsing logic in multi search response     MultiSearchResponse mSearchResponse = MultiSearchResponse.fromXContext(parser).     org.elasticsearch.action.search.MultiSearchResponse.Item[] responses = mSearchResponse.getResponses().     Item[] templateResponses = new Item[responses.length].     int i = 0.     for (org.elasticsearch.action.search.MultiSearchResponse.Item item : responses) {         SearchTemplateResponse stResponse = null.         if (item.getResponse() != null) {             stResponse = new SearchTemplateResponse().             stResponse.setResponse(item.getResponse()).         }         templateResponses[i++] = new Item(stResponse, item.getFailure()).     }     return new MultiSearchTemplateResponse(templateResponses, mSearchResponse.getTook().millis()). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
