commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;40;;@Override protected void doExecute(Task task, MultiSearchTemplateRequest request, ActionListener<MultiSearchTemplateResponse> listener) {     List<Integer> originalSlots = new ArrayList<>().     MultiSearchRequest multiSearchRequest = new MultiSearchRequest().     multiSearchRequest.indicesOptions(request.indicesOptions()).     if (request.maxConcurrentSearchRequests() != 0) {         multiSearchRequest.maxConcurrentSearchRequests(request.maxConcurrentSearchRequests()).     }     MultiSearchTemplateResponse.Item[] items = new MultiSearchTemplateResponse.Item[request.requests().size()].     for (int i = 0. i < items.length. i++) {         SearchTemplateRequest searchTemplateRequest = request.requests().get(i).         SearchTemplateResponse searchTemplateResponse = new SearchTemplateResponse().         SearchRequest searchRequest.         try {             searchRequest = convert(searchTemplateRequest, searchTemplateResponse, scriptService, xContentRegistry).         } catch (Exception e) {             items[i] = new MultiSearchTemplateResponse.Item(null, e).             continue.         }         items[i] = new MultiSearchTemplateResponse.Item(searchTemplateResponse, null).         if (searchRequest != null) {             multiSearchRequest.add(searchRequest).             originalSlots.add(i).         }     }     client.multiSearch(multiSearchRequest, ActionListener.wrap(r -> {         for (int i = 0. i < r.getResponses().length. i++) {             MultiSearchResponse.Item item = r.getResponses()[i].             int originalSlot = originalSlots.get(i).             if (item.isFailure()) {                 items[originalSlot] = new MultiSearchTemplateResponse.Item(null, item.getFailure()).             } else {                 items[originalSlot].getResponse().setResponse(item.getResponse()).             }         }         listener.onResponse(new MultiSearchTemplateResponse(items, r.getTook().millis())).     }, listener::onFailure)). }
