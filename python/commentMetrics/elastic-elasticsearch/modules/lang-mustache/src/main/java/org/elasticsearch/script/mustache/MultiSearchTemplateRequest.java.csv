commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Add a search template request to execute. Note, the order is important, the search response will be returned in the  * same order as the search requests.  */ ;/**  * Add a search template request to execute. Note, the order is important, the search response will be returned in the  * same order as the search requests.  */ public MultiSearchTemplateRequest add(SearchTemplateRequestBuilder request) {     requests.add(request.request()).     return this. }
true;public;1;4;/**  * Add a search template request to execute. Note, the order is important, the search response will be returned in the  * same order as the search requests.  */ ;/**  * Add a search template request to execute. Note, the order is important, the search response will be returned in the  * same order as the search requests.  */ public MultiSearchTemplateRequest add(SearchTemplateRequest request) {     requests.add(request).     return this. }
true;public;0;3;/**  * Returns the amount of search requests specified in this multi search requests are allowed to be ran concurrently.  */ ;/**  * Returns the amount of search requests specified in this multi search requests are allowed to be ran concurrently.  */ public int maxConcurrentSearchRequests() {     return maxConcurrentSearchRequests. }
true;public;1;8;/**  * Sets how many search requests specified in this multi search requests are allowed to be ran concurrently.  */ ;/**  * Sets how many search requests specified in this multi search requests are allowed to be ran concurrently.  */ public MultiSearchTemplateRequest maxConcurrentSearchRequests(int maxConcurrentSearchRequests) {     if (maxConcurrentSearchRequests < 1) {         throw new IllegalArgumentException("maxConcurrentSearchRequests must be positive").     }     this.maxConcurrentSearchRequests = maxConcurrentSearchRequests.     return this. }
false;public;0;3;;public List<SearchTemplateRequest> requests() {     return this.requests. }
false;public;0;17;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (requests.isEmpty()) {         validationException = addValidationError("no requests added", validationException).     }     for (SearchTemplateRequest request : requests) {         ActionRequestValidationException ex = request.validate().         if (ex != null) {             if (validationException == null) {                 validationException = new ActionRequestValidationException().             }             validationException.addValidationErrors(ex.validationErrors()).         }     }     return validationException. }
false;public;0;3;;public IndicesOptions indicesOptions() {     return indicesOptions. }
false;public;1;4;;public MultiSearchTemplateRequest indicesOptions(IndicesOptions indicesOptions) {     this.indicesOptions = indicesOptions.     return this. }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     maxConcurrentSearchRequests = in.readVInt().     requests = in.readStreamableList(SearchTemplateRequest::new). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(maxConcurrentSearchRequests).     out.writeStreamableList(requests). }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     MultiSearchTemplateRequest that = (MultiSearchTemplateRequest) o.     return maxConcurrentSearchRequests == that.maxConcurrentSearchRequests && Objects.equals(requests, that.requests) && Objects.equals(indicesOptions, that.indicesOptions). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(maxConcurrentSearchRequests, requests, indicesOptions). }
false;public,static;2;18;;public static byte[] writeMultiLineFormat(MultiSearchTemplateRequest multiSearchTemplateRequest, XContent xContent) throws IOException {     ByteArrayOutputStream output = new ByteArrayOutputStream().     for (SearchTemplateRequest templateRequest : multiSearchTemplateRequest.requests()) {         final SearchRequest searchRequest = templateRequest.getRequest().         try (XContentBuilder xContentBuilder = XContentBuilder.builder(xContent)) {             MultiSearchRequest.writeSearchRequestParams(searchRequest, xContentBuilder).             BytesReference.bytes(xContentBuilder).writeTo(output).         }         output.write(xContent.streamSeparator()).         try (XContentBuilder xContentBuilder = XContentBuilder.builder(xContent)) {             templateRequest.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS).             BytesReference.bytes(xContentBuilder).writeTo(output).         }         output.write(xContent.streamSeparator()).     }     return output.toByteArray(). }
