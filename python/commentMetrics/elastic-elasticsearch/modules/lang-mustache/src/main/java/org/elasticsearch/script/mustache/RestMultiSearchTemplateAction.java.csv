commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "multi_search_template_action". }
false;public;2;13;;@Override public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {     MultiSearchTemplateRequest multiRequest = parseRequest(request, allowExplicitIndex).     // Emit a single deprecation message if any search template contains types.     for (SearchTemplateRequest searchTemplateRequest : multiRequest.requests()) {         if (searchTemplateRequest.getRequest().types().length > 0) {             deprecationLogger.deprecatedAndMaybeLog("msearch_with_types", TYPES_DEPRECATION_MESSAGE).             break.         }     }     return channel -> client.execute(MultiSearchTemplateAction.INSTANCE, multiRequest, new RestToXContentListener<>(channel)). }
true;public,static;2;19;/**  * Parses a {@link RestRequest} body and returns a {@link MultiSearchTemplateRequest}  */ ;/**  * Parses a {@link RestRequest} body and returns a {@link MultiSearchTemplateRequest}  */ public static MultiSearchTemplateRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {     MultiSearchTemplateRequest multiRequest = new MultiSearchTemplateRequest().     if (restRequest.hasParam("max_concurrent_searches")) {         multiRequest.maxConcurrentSearchRequests(restRequest.paramAsInt("max_concurrent_searches", 0)).     }     RestMultiSearchAction.parseMultiLineRequest(restRequest, multiRequest.indicesOptions(), allowExplicitIndex, (searchRequest, bytes) -> {         SearchTemplateRequest searchTemplateRequest = SearchTemplateRequest.fromXContent(bytes).         if (searchTemplateRequest.getScript() != null) {             searchTemplateRequest.setRequest(searchRequest).             multiRequest.add(searchTemplateRequest).         } else {             throw new IllegalArgumentException("Malformed search template").         }         RestSearchAction.checkRestTotalHits(restRequest, searchRequest).     }).     return multiRequest. }
false;public;0;4;;@Override public boolean supportsContentStream() {     return true. }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return RESPONSE_PARAMS. }
