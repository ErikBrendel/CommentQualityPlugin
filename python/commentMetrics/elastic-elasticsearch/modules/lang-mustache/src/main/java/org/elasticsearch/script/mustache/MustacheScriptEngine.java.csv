# id;timestamp;commentText;codeText;commentWords;codeWords
MustacheScriptEngine -> @Override     public <T> T compile(String templateName, String templateSource, ScriptContext<T> context, Map<String, String> options);1524684173;Compile a template string to (in this case) a Mustache object than can_later be re-used for execution to fill in missing parameter values.__@param templateSource a string representing the template to compile._@return a compiled template object for later execution.;@Override_    public <T> T compile(String templateName, String templateSource, ScriptContext<T> context, Map<String, String> options) {_        if (context.instanceClazz.equals(TemplateScript.class) == false) {_            throw new IllegalArgumentException("mustache engine does not know how to handle context [" + context.name + "]")__        }_        final MustacheFactory factory = createMustacheFactory(options)__        Reader reader = new StringReader(templateSource)__        Mustache template = factory.compile(reader, "query-template")__        TemplateScript.Factory compiled = params -> new MustacheExecutableScript(template, params)__        return context.factoryClazz.cast(compiled)__    };compile,a,template,string,to,in,this,case,a,mustache,object,than,can,later,be,re,used,for,execution,to,fill,in,missing,parameter,values,param,template,source,a,string,representing,the,template,to,compile,return,a,compiled,template,object,for,later,execution;override,public,t,t,compile,string,template,name,string,template,source,script,context,t,context,map,string,string,options,if,context,instance,clazz,equals,template,script,class,false,throw,new,illegal,argument,exception,mustache,engine,does,not,know,how,to,handle,context,context,name,final,mustache,factory,factory,create,mustache,factory,options,reader,reader,new,string,reader,template,source,mustache,template,factory,compile,reader,query,template,template,script,factory,compiled,params,new,mustache,executable,script,template,params,return,context,factory,clazz,cast,compiled
MustacheScriptEngine -> @Override     public <T> T compile(String templateName, String templateSource, ScriptContext<T> context, Map<String, String> options);1527773340;Compile a template string to (in this case) a Mustache object than can_later be re-used for execution to fill in missing parameter values.__@param templateSource a string representing the template to compile._@return a compiled template object for later execution.;@Override_    public <T> T compile(String templateName, String templateSource, ScriptContext<T> context, Map<String, String> options) {_        if (context.instanceClazz.equals(TemplateScript.class) == false) {_            throw new IllegalArgumentException("mustache engine does not know how to handle context [" + context.name + "]")__        }_        final MustacheFactory factory = createMustacheFactory(options)__        Reader reader = new StringReader(templateSource)__        try {_            Mustache template = factory.compile(reader, "query-template")__            TemplateScript.Factory compiled = params -> new MustacheExecutableScript(template, params)__            return context.factoryClazz.cast(compiled)__        } catch (MustacheException ex) {_            throw new ScriptException(ex.getMessage(), ex, Collections.emptyList(), templateSource, NAME)__        }__    };compile,a,template,string,to,in,this,case,a,mustache,object,than,can,later,be,re,used,for,execution,to,fill,in,missing,parameter,values,param,template,source,a,string,representing,the,template,to,compile,return,a,compiled,template,object,for,later,execution;override,public,t,t,compile,string,template,name,string,template,source,script,context,t,context,map,string,string,options,if,context,instance,clazz,equals,template,script,class,false,throw,new,illegal,argument,exception,mustache,engine,does,not,know,how,to,handle,context,context,name,final,mustache,factory,factory,create,mustache,factory,options,reader,reader,new,string,reader,template,source,try,mustache,template,factory,compile,reader,query,template,template,script,factory,compiled,params,new,mustache,executable,script,template,params,return,context,factory,clazz,cast,compiled,catch,mustache,exception,ex,throw,new,script,exception,ex,get,message,ex,collections,empty,list,template,source,name
MustacheScriptEngine -> @Override     public <T> T compile(String templateName, String templateSource, ScriptContext<T> context, Map<String, String> options);1539615817;Compile a template string to (in this case) a Mustache object than can_later be re-used for execution to fill in missing parameter values.__@param templateSource a string representing the template to compile._@return a compiled template object for later execution.;@Override_    public <T> T compile(String templateName, String templateSource, ScriptContext<T> context, Map<String, String> options) {_        if (context.instanceClazz.equals(TemplateScript.class) == false) {_            throw new IllegalArgumentException("mustache engine does not know how to handle context [" + context.name + "]")__        }_        final MustacheFactory factory = createMustacheFactory(options)__        Reader reader = new StringReader(templateSource)__        try {_            Mustache template = factory.compile(reader, "query-template")__            TemplateScript.Factory compiled = params -> new MustacheExecutableScript(template, params)__            return context.factoryClazz.cast(compiled)__        } catch (MustacheException ex) {_            throw new ScriptException(ex.getMessage(), ex, Collections.emptyList(), templateSource, NAME)__        }__    };compile,a,template,string,to,in,this,case,a,mustache,object,than,can,later,be,re,used,for,execution,to,fill,in,missing,parameter,values,param,template,source,a,string,representing,the,template,to,compile,return,a,compiled,template,object,for,later,execution;override,public,t,t,compile,string,template,name,string,template,source,script,context,t,context,map,string,string,options,if,context,instance,clazz,equals,template,script,class,false,throw,new,illegal,argument,exception,mustache,engine,does,not,know,how,to,handle,context,context,name,final,mustache,factory,factory,create,mustache,factory,options,reader,reader,new,string,reader,template,source,try,mustache,template,factory,compile,reader,query,template,template,script,factory,compiled,params,new,mustache,executable,script,template,params,return,context,factory,clazz,cast,compiled,catch,mustache,exception,ex,throw,new,script,exception,ex,get,message,ex,collections,empty,list,template,source,name
MustacheScriptEngine -> MustacheExecutableScript -> MustacheExecutableScript(Mustache template, Map<String, Object> params);1524684173;@param template the compiled template object wrapper;MustacheExecutableScript(Mustache template, Map<String, Object> params) {_            super(params)__            this.template = template__            this.params = params__        };param,template,the,compiled,template,object,wrapper;mustache,executable,script,mustache,template,map,string,object,params,super,params,this,template,template,this,params,params
MustacheScriptEngine -> MustacheExecutableScript -> MustacheExecutableScript(Mustache template, Map<String, Object> params);1527773340;@param template the compiled template object wrapper;MustacheExecutableScript(Mustache template, Map<String, Object> params) {_            super(params)__            this.template = template__            this.params = params__        };param,template,the,compiled,template,object,wrapper;mustache,executable,script,mustache,template,map,string,object,params,super,params,this,template,template,this,params,params
MustacheScriptEngine -> MustacheExecutableScript -> MustacheExecutableScript(Mustache template, Map<String, Object> params);1539615817;@param template the compiled template object wrapper;MustacheExecutableScript(Mustache template, Map<String, Object> params) {_            super(params)__            this.template = template__            this.params = params__        };param,template,the,compiled,template,object,wrapper;mustache,executable,script,mustache,template,map,string,object,params,super,params,this,template,template,this,params,params
