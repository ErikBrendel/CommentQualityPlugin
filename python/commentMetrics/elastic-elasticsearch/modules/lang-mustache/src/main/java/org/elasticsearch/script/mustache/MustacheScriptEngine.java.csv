commented;modifiers;parameterAmount;loc;comment;code
true;public;4;16;/**  * Compile a template string to (in this case) a Mustache object than can  * later be re-used for execution to fill in missing parameter values.  *  * @param templateSource a string representing the template to compile.  * @return a compiled template object for later execution.  */ ;/**  * Compile a template string to (in this case) a Mustache object than can  * later be re-used for execution to fill in missing parameter values.  *  * @param templateSource a string representing the template to compile.  * @return a compiled template object for later execution.  */ @Override public <T> T compile(String templateName, String templateSource, ScriptContext<T> context, Map<String, String> options) {     if (context.instanceClazz.equals(TemplateScript.class) == false) {         throw new IllegalArgumentException("mustache engine does not know how to handle context [" + context.name + "]").     }     final MustacheFactory factory = createMustacheFactory(options).     Reader reader = new StringReader(templateSource).     try {         Mustache template = factory.compile(reader, "query-template").         TemplateScript.Factory compiled = params -> new MustacheExecutableScript(template, params).         return context.factoryClazz.cast(compiled).     } catch (MustacheException ex) {         throw new ScriptException(ex.getMessage(), ex, Collections.emptyList(), templateSource, NAME).     } }
false;private;1;6;;private CustomMustacheFactory createMustacheFactory(Map<String, String> options) {     if (options == null || options.isEmpty() || options.containsKey(Script.CONTENT_TYPE_OPTION) == false) {         return new CustomMustacheFactory().     }     return new CustomMustacheFactory(options.get(Script.CONTENT_TYPE_OPTION)). }
false;public;0;4;;@Override public String getType() {     return NAME. }
false;public;0;16;;@Override public String execute() {     final StringWriter writer = new StringWriter().     try {         // crazy reflection here         SpecialPermission.check().         AccessController.doPrivileged((PrivilegedAction<Void>) () -> {             template.execute(writer, params).             return null.         }).     } catch (Exception e) {         logger.error((Supplier<?>) () -> new ParameterizedMessage("Error running {}", template), e).         throw new GeneralScriptException("Error running " + template, e).     }     return writer.toString(). }
