commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;public void testExplain() {     // Debug.explain can explain an object     Object dummy = new Object().     PainlessExplainError e = expectScriptThrows(PainlessExplainError.class, () -> exec("Debug.explain(params.a)", singletonMap("a", dummy), true)).     assertSame(dummy, e.getObjectToExplain()).     assertThat(e.getHeaders(painlessLookup), hasEntry("es.to_string", singletonList(dummy.toString()))).     assertThat(e.getHeaders(painlessLookup), hasEntry("es.java_class", singletonList("java.lang.Object"))).     assertThat(e.getHeaders(painlessLookup), hasEntry("es.painless_class", singletonList("java.lang.Object"))).     // Null should be ok     e = expectScriptThrows(PainlessExplainError.class, () -> exec("Debug.explain(null)")).     assertNull(e.getObjectToExplain()).     assertThat(e.getHeaders(painlessLookup), hasEntry("es.to_string", singletonList("null"))).     assertThat(e.getHeaders(painlessLookup), not(hasKey("es.java_class"))).     assertThat(e.getHeaders(painlessLookup), not(hasKey("es.painless_class"))).     // You can't catch the explain exception     e = expectScriptThrows(PainlessExplainError.class, () -> exec("try {\n" + "  Debug.explain(params.a)\n" + "} catch (Exception e) {\n" + "  return 1\n" + "}", singletonMap("a", dummy), true)).     assertSame(dummy, e.getObjectToExplain()). }
true;public;0;17;/**  * {@link PainlessExplainError} doesn't serialize but the headers still make it.  */ ;/**  * {@link PainlessExplainError} doesn't serialize but the headers still make it.  */ public void testPainlessExplainErrorSerialization() throws IOException {     Map<String, Object> params = singletonMap("a", "jumped over the moon").     ScriptException e = expectThrows(ScriptException.class, () -> exec("Debug.explain(params.a)", params, true)).     assertEquals(singletonList("jumped over the moon"), e.getMetadata("es.to_string")).     assertEquals(singletonList("java.lang.String"), e.getMetadata("es.java_class")).     assertEquals(singletonList("java.lang.String"), e.getMetadata("es.painless_class")).     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeException(e).         try (StreamInput in = out.bytes().streamInput()) {             ElasticsearchException read = (ScriptException) in.readException().             assertEquals(singletonList("jumped over the moon"), read.getMetadata("es.to_string")).             assertEquals(singletonList("java.lang.String"), read.getMetadata("es.java_class")).             assertEquals(singletonList("java.lang.String"), read.getMetadata("es.painless_class")).         }     } }
