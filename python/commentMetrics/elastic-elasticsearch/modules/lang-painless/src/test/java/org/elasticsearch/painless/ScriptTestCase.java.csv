# id;timestamp;commentText;codeText;commentWords;codeWords
ScriptTestCase -> protected Settings scriptEngineSettings();1524684173;Settings used to build the script engine. Override to customize settings like {@link RegexTests} does to enable regexes.;protected Settings scriptEngineSettings() {_        return Settings.EMPTY__    };settings,used,to,build,the,script,engine,override,to,customize,settings,like,link,regex,tests,does,to,enable,regexes;protected,settings,script,engine,settings,return,settings,empty
ScriptTestCase -> protected Settings scriptEngineSettings();1531179852;Settings used to build the script engine. Override to customize settings like {@link RegexTests} does to enable regexes.;protected Settings scriptEngineSettings() {_        return Settings.EMPTY__    };settings,used,to,build,the,script,engine,override,to,customize,settings,like,link,regex,tests,does,to,enable,regexes;protected,settings,script,engine,settings,return,settings,empty
ScriptTestCase -> protected Settings scriptEngineSettings();1531910483;Settings used to build the script engine. Override to customize settings like {@link RegexTests} does to enable regexes.;protected Settings scriptEngineSettings() {_        return Settings.EMPTY__    };settings,used,to,build,the,script,engine,override,to,customize,settings,like,link,regex,tests,does,to,enable,regexes;protected,settings,script,engine,settings,return,settings,empty
ScriptTestCase -> protected Settings scriptEngineSettings();1532598597;Settings used to build the script engine. Override to customize settings like {@link RegexTests} does to enable regexes.;protected Settings scriptEngineSettings() {_        return Settings.EMPTY__    };settings,used,to,build,the,script,engine,override,to,customize,settings,like,link,regex,tests,does,to,enable,regexes;protected,settings,script,engine,settings,return,settings,empty
ScriptTestCase -> protected Settings scriptEngineSettings();1536611444;Settings used to build the script engine. Override to customize settings like {@link RegexTests} does to enable regexes.;protected Settings scriptEngineSettings() {_        return Settings.EMPTY__    };settings,used,to,build,the,script,engine,override,to,customize,settings,like,link,regex,tests,does,to,enable,regexes;protected,settings,script,engine,settings,return,settings,empty
ScriptTestCase -> protected Settings scriptEngineSettings();1538424609;Settings used to build the script engine. Override to customize settings like {@link RegexTests} does to enable regexes.;protected Settings scriptEngineSettings() {_        return Settings.EMPTY__    };settings,used,to,build,the,script,engine,override,to,customize,settings,like,link,regex,tests,does,to,enable,regexes;protected,settings,script,engine,settings,return,settings,empty
ScriptTestCase -> protected Settings scriptEngineSettings();1540238977;Settings used to build the script engine. Override to customize settings like {@link RegexTests} does to enable regexes.;protected Settings scriptEngineSettings() {_        return Settings.EMPTY__    };settings,used,to,build,the,script,engine,override,to,customize,settings,like,link,regex,tests,does,to,enable,regexes;protected,settings,script,engine,settings,return,settings,empty
ScriptTestCase -> protected Settings scriptEngineSettings();1540486836;Settings used to build the script engine. Override to customize settings like {@link RegexTests} does to enable regexes.;protected Settings scriptEngineSettings() {_        return Settings.EMPTY__    };settings,used,to,build,the,script,engine,override,to,customize,settings,like,link,regex,tests,does,to,enable,regexes;protected,settings,script,engine,settings,return,settings,empty
ScriptTestCase -> public void assertBytecodeHasPattern(String script, String pattern);1524684173;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode pattern as a regular expression (please try to avoid!);public void assertBytecodeHasPattern(String script, String pattern) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.matches(pattern))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,pattern,as,a,regular,expression,please,try,to,avoid;public,void,assert,bytecode,has,pattern,string,script,string,pattern,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,matches,pattern
ScriptTestCase -> public void assertBytecodeHasPattern(String script, String pattern);1531179852;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode pattern as a regular expression (please try to avoid!);public void assertBytecodeHasPattern(String script, String pattern) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.matches(pattern))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,pattern,as,a,regular,expression,please,try,to,avoid;public,void,assert,bytecode,has,pattern,string,script,string,pattern,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,matches,pattern
ScriptTestCase -> public void assertBytecodeHasPattern(String script, String pattern);1531910483;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode pattern as a regular expression (please try to avoid!);public void assertBytecodeHasPattern(String script, String pattern) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.matches(pattern))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,pattern,as,a,regular,expression,please,try,to,avoid;public,void,assert,bytecode,has,pattern,string,script,string,pattern,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,matches,pattern
ScriptTestCase -> public void assertBytecodeHasPattern(String script, String pattern);1532598597;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode pattern as a regular expression (please try to avoid!);public void assertBytecodeHasPattern(String script, String pattern) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.matches(pattern))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,pattern,as,a,regular,expression,please,try,to,avoid;public,void,assert,bytecode,has,pattern,string,script,string,pattern,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,matches,pattern
ScriptTestCase -> public void assertBytecodeHasPattern(String script, String pattern);1536611444;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode pattern as a regular expression (please try to avoid!);public void assertBytecodeHasPattern(String script, String pattern) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.matches(pattern))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,pattern,as,a,regular,expression,please,try,to,avoid;public,void,assert,bytecode,has,pattern,string,script,string,pattern,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,matches,pattern
ScriptTestCase -> public void assertBytecodeHasPattern(String script, String pattern);1538424609;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode pattern as a regular expression (please try to avoid!);public void assertBytecodeHasPattern(String script, String pattern) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.matches(pattern))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,pattern,as,a,regular,expression,please,try,to,avoid;public,void,assert,bytecode,has,pattern,string,script,string,pattern,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,matches,pattern
ScriptTestCase -> public void assertBytecodeHasPattern(String script, String pattern);1540238977;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode pattern as a regular expression (please try to avoid!);public void assertBytecodeHasPattern(String script, String pattern) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.matches(pattern))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,pattern,as,a,regular,expression,please,try,to,avoid;public,void,assert,bytecode,has,pattern,string,script,string,pattern,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,matches,pattern
ScriptTestCase -> public void assertBytecodeHasPattern(String script, String pattern);1540486836;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode pattern as a regular expression (please try to avoid!);public void assertBytecodeHasPattern(String script, String pattern) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.matches(pattern))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,pattern,as,a,regular,expression,please,try,to,avoid;public,void,assert,bytecode,has,pattern,string,script,string,pattern,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,matches,pattern
ScriptTestCase -> public static void assertScriptStack(ScriptException e, String... stack);1524684173;Asserts that the script_stack looks right.;public static void assertScriptStack(ScriptException e, String... stack) {_        _        try {_            assertThat(e.getScriptStack(), hasSize(stack.length))__            for (int i = 0_ i < stack.length_ i++) {_                assertEquals(stack[i], e.getScriptStack().get(i))__            }_        } catch (AssertionError assertion) {_            assertion.initCause(e)__            throw assertion__        }_    };asserts,that,the,looks,right;public,static,void,assert,script,stack,script,exception,e,string,stack,try,assert,that,e,get,script,stack,has,size,stack,length,for,int,i,0,i,stack,length,i,assert,equals,stack,i,e,get,script,stack,get,i,catch,assertion,error,assertion,assertion,init,cause,e,throw,assertion
ScriptTestCase -> public static void assertScriptStack(ScriptException e, String... stack);1531179852;Asserts that the script_stack looks right.;public static void assertScriptStack(ScriptException e, String... stack) {_        _        try {_            assertThat(e.getScriptStack(), hasSize(stack.length))__            for (int i = 0_ i < stack.length_ i++) {_                assertEquals(stack[i], e.getScriptStack().get(i))__            }_        } catch (AssertionError assertion) {_            assertion.initCause(e)__            throw assertion__        }_    };asserts,that,the,looks,right;public,static,void,assert,script,stack,script,exception,e,string,stack,try,assert,that,e,get,script,stack,has,size,stack,length,for,int,i,0,i,stack,length,i,assert,equals,stack,i,e,get,script,stack,get,i,catch,assertion,error,assertion,assertion,init,cause,e,throw,assertion
ScriptTestCase -> public static void assertScriptStack(ScriptException e, String... stack);1531910483;Asserts that the script_stack looks right.;public static void assertScriptStack(ScriptException e, String... stack) {_        _        try {_            assertThat(e.getScriptStack(), hasSize(stack.length))__            for (int i = 0_ i < stack.length_ i++) {_                assertEquals(stack[i], e.getScriptStack().get(i))__            }_        } catch (AssertionError assertion) {_            assertion.initCause(e)__            throw assertion__        }_    };asserts,that,the,looks,right;public,static,void,assert,script,stack,script,exception,e,string,stack,try,assert,that,e,get,script,stack,has,size,stack,length,for,int,i,0,i,stack,length,i,assert,equals,stack,i,e,get,script,stack,get,i,catch,assertion,error,assertion,assertion,init,cause,e,throw,assertion
ScriptTestCase -> public static void assertScriptStack(ScriptException e, String... stack);1532598597;Asserts that the script_stack looks right.;public static void assertScriptStack(ScriptException e, String... stack) {_        _        try {_            assertThat(e.getScriptStack(), hasSize(stack.length))__            for (int i = 0_ i < stack.length_ i++) {_                assertEquals(stack[i], e.getScriptStack().get(i))__            }_        } catch (AssertionError assertion) {_            assertion.initCause(e)__            throw assertion__        }_    };asserts,that,the,looks,right;public,static,void,assert,script,stack,script,exception,e,string,stack,try,assert,that,e,get,script,stack,has,size,stack,length,for,int,i,0,i,stack,length,i,assert,equals,stack,i,e,get,script,stack,get,i,catch,assertion,error,assertion,assertion,init,cause,e,throw,assertion
ScriptTestCase -> public static void assertScriptStack(ScriptException e, String... stack);1536611444;Asserts that the script_stack looks right.;public static void assertScriptStack(ScriptException e, String... stack) {_        _        try {_            assertThat(e.getScriptStack(), hasSize(stack.length))__            for (int i = 0_ i < stack.length_ i++) {_                assertEquals(stack[i], e.getScriptStack().get(i))__            }_        } catch (AssertionError assertion) {_            assertion.initCause(e)__            throw assertion__        }_    };asserts,that,the,looks,right;public,static,void,assert,script,stack,script,exception,e,string,stack,try,assert,that,e,get,script,stack,has,size,stack,length,for,int,i,0,i,stack,length,i,assert,equals,stack,i,e,get,script,stack,get,i,catch,assertion,error,assertion,assertion,init,cause,e,throw,assertion
ScriptTestCase -> public static void assertScriptStack(ScriptException e, String... stack);1538424609;Asserts that the script_stack looks right.;public static void assertScriptStack(ScriptException e, String... stack) {_        _        try {_            assertThat(e.getScriptStack(), hasSize(stack.length))__            for (int i = 0_ i < stack.length_ i++) {_                assertEquals(stack[i], e.getScriptStack().get(i))__            }_        } catch (AssertionError assertion) {_            assertion.initCause(e)__            throw assertion__        }_    };asserts,that,the,looks,right;public,static,void,assert,script,stack,script,exception,e,string,stack,try,assert,that,e,get,script,stack,has,size,stack,length,for,int,i,0,i,stack,length,i,assert,equals,stack,i,e,get,script,stack,get,i,catch,assertion,error,assertion,assertion,init,cause,e,throw,assertion
ScriptTestCase -> public static void assertScriptStack(ScriptException e, String... stack);1540238977;Asserts that the script_stack looks right.;public static void assertScriptStack(ScriptException e, String... stack) {_        _        try {_            assertThat(e.getScriptStack(), hasSize(stack.length))__            for (int i = 0_ i < stack.length_ i++) {_                assertEquals(stack[i], e.getScriptStack().get(i))__            }_        } catch (AssertionError assertion) {_            assertion.initCause(e)__            throw assertion__        }_    };asserts,that,the,looks,right;public,static,void,assert,script,stack,script,exception,e,string,stack,try,assert,that,e,get,script,stack,has,size,stack,length,for,int,i,0,i,stack,length,i,assert,equals,stack,i,e,get,script,stack,get,i,catch,assertion,error,assertion,assertion,init,cause,e,throw,assertion
ScriptTestCase -> public static void assertScriptStack(ScriptException e, String... stack);1540486836;Asserts that the script_stack looks right.;public static void assertScriptStack(ScriptException e, String... stack) {_        _        try {_            assertThat(e.getScriptStack(), hasSize(stack.length))__            for (int i = 0_ i < stack.length_ i++) {_                assertEquals(stack[i], e.getScriptStack().get(i))__            }_        } catch (AssertionError assertion) {_            assertion.initCause(e)__            throw assertion__        }_    };asserts,that,the,looks,right;public,static,void,assert,script,stack,script,exception,e,string,stack,try,assert,that,e,get,script,stack,has,size,stack,length,for,int,i,0,i,stack,length,i,assert,equals,stack,i,e,get,script,stack,get,i,catch,assertion,error,assertion,assertion,init,cause,e,throw,assertion
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,             ThrowingRunnable runnable);1524684173;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,_            ThrowingRunnable runnable) {_        try {_            runnable.run()__        } catch (Throwable e) {_            if (e instanceof ScriptException) {_                boolean hasEmptyScriptStack = ((ScriptException) e).getScriptStack().isEmpty()__                if (shouldHaveScriptStack && hasEmptyScriptStack) {_                    _                    AssertionFailedError assertion = new AssertionFailedError("ScriptException should have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                } else if (false == shouldHaveScriptStack && false == hasEmptyScriptStack) {_                    AssertionFailedError assertion = new AssertionFailedError("ScriptException shouldn't have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                }_                e = e.getCause()__                if (expectedType.isInstance(e)) {_                    return expectedType.cast(e)__                }_            } else {_                AssertionFailedError assertion = new AssertionFailedError("Expected boxed ScriptException")__                assertion.initCause(e)__                throw assertion__            }_            AssertionFailedError assertion = new AssertionFailedError("Unexpected exception type, expected "_                                                                      + expectedType.getSimpleName())__            assertion.initCause(e)__            throw assertion__        }_        throw new AssertionFailedError("Expected exception " + expectedType.getSimpleName())__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,boolean,should,have,script,stack,throwing,runnable,runnable,try,runnable,run,catch,throwable,e,if,e,instanceof,script,exception,boolean,has,empty,script,stack,script,exception,e,get,script,stack,is,empty,if,should,have,script,stack,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,should,have,a,script,stack,assertion,init,cause,e,throw,assertion,else,if,false,should,have,script,stack,false,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,shouldn,t,have,a,script,stack,assertion,init,cause,e,throw,assertion,e,e,get,cause,if,expected,type,is,instance,e,return,expected,type,cast,e,else,assertion,failed,error,assertion,new,assertion,failed,error,expected,boxed,script,exception,assertion,init,cause,e,throw,assertion,assertion,failed,error,assertion,new,assertion,failed,error,unexpected,exception,type,expected,expected,type,get,simple,name,assertion,init,cause,e,throw,assertion,throw,new,assertion,failed,error,expected,exception,expected,type,get,simple,name
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,             ThrowingRunnable runnable);1531179852;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,_            ThrowingRunnable runnable) {_        try {_            runnable.run()__        } catch (Throwable e) {_            if (e instanceof ScriptException) {_                boolean hasEmptyScriptStack = ((ScriptException) e).getScriptStack().isEmpty()__                if (shouldHaveScriptStack && hasEmptyScriptStack) {_                    _                    AssertionFailedError assertion = new AssertionFailedError("ScriptException should have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                } else if (false == shouldHaveScriptStack && false == hasEmptyScriptStack) {_                    AssertionFailedError assertion = new AssertionFailedError("ScriptException shouldn't have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                }_                e = e.getCause()__                if (expectedType.isInstance(e)) {_                    return expectedType.cast(e)__                }_            } else {_                AssertionFailedError assertion = new AssertionFailedError("Expected boxed ScriptException")__                assertion.initCause(e)__                throw assertion__            }_            AssertionFailedError assertion = new AssertionFailedError("Unexpected exception type, expected "_                                                                      + expectedType.getSimpleName())__            assertion.initCause(e)__            throw assertion__        }_        throw new AssertionFailedError("Expected exception " + expectedType.getSimpleName())__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,boolean,should,have,script,stack,throwing,runnable,runnable,try,runnable,run,catch,throwable,e,if,e,instanceof,script,exception,boolean,has,empty,script,stack,script,exception,e,get,script,stack,is,empty,if,should,have,script,stack,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,should,have,a,script,stack,assertion,init,cause,e,throw,assertion,else,if,false,should,have,script,stack,false,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,shouldn,t,have,a,script,stack,assertion,init,cause,e,throw,assertion,e,e,get,cause,if,expected,type,is,instance,e,return,expected,type,cast,e,else,assertion,failed,error,assertion,new,assertion,failed,error,expected,boxed,script,exception,assertion,init,cause,e,throw,assertion,assertion,failed,error,assertion,new,assertion,failed,error,unexpected,exception,type,expected,expected,type,get,simple,name,assertion,init,cause,e,throw,assertion,throw,new,assertion,failed,error,expected,exception,expected,type,get,simple,name
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,             ThrowingRunnable runnable);1531910483;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,_            ThrowingRunnable runnable) {_        try {_            runnable.run()__        } catch (Throwable e) {_            if (e instanceof ScriptException) {_                boolean hasEmptyScriptStack = ((ScriptException) e).getScriptStack().isEmpty()__                if (shouldHaveScriptStack && hasEmptyScriptStack) {_                    _                    AssertionFailedError assertion = new AssertionFailedError("ScriptException should have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                } else if (false == shouldHaveScriptStack && false == hasEmptyScriptStack) {_                    AssertionFailedError assertion = new AssertionFailedError("ScriptException shouldn't have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                }_                e = e.getCause()__                if (expectedType.isInstance(e)) {_                    return expectedType.cast(e)__                }_            } else {_                AssertionFailedError assertion = new AssertionFailedError("Expected boxed ScriptException")__                assertion.initCause(e)__                throw assertion__            }_            AssertionFailedError assertion = new AssertionFailedError("Unexpected exception type, expected "_                                                                      + expectedType.getSimpleName())__            assertion.initCause(e)__            throw assertion__        }_        throw new AssertionFailedError("Expected exception " + expectedType.getSimpleName())__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,boolean,should,have,script,stack,throwing,runnable,runnable,try,runnable,run,catch,throwable,e,if,e,instanceof,script,exception,boolean,has,empty,script,stack,script,exception,e,get,script,stack,is,empty,if,should,have,script,stack,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,should,have,a,script,stack,assertion,init,cause,e,throw,assertion,else,if,false,should,have,script,stack,false,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,shouldn,t,have,a,script,stack,assertion,init,cause,e,throw,assertion,e,e,get,cause,if,expected,type,is,instance,e,return,expected,type,cast,e,else,assertion,failed,error,assertion,new,assertion,failed,error,expected,boxed,script,exception,assertion,init,cause,e,throw,assertion,assertion,failed,error,assertion,new,assertion,failed,error,unexpected,exception,type,expected,expected,type,get,simple,name,assertion,init,cause,e,throw,assertion,throw,new,assertion,failed,error,expected,exception,expected,type,get,simple,name
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,             ThrowingRunnable runnable);1532598597;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,_            ThrowingRunnable runnable) {_        try {_            runnable.run()__        } catch (Throwable e) {_            if (e instanceof ScriptException) {_                boolean hasEmptyScriptStack = ((ScriptException) e).getScriptStack().isEmpty()__                if (shouldHaveScriptStack && hasEmptyScriptStack) {_                    _                    AssertionFailedError assertion = new AssertionFailedError("ScriptException should have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                } else if (false == shouldHaveScriptStack && false == hasEmptyScriptStack) {_                    AssertionFailedError assertion = new AssertionFailedError("ScriptException shouldn't have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                }_                e = e.getCause()__                if (expectedType.isInstance(e)) {_                    return expectedType.cast(e)__                }_            } else {_                AssertionFailedError assertion = new AssertionFailedError("Expected boxed ScriptException")__                assertion.initCause(e)__                throw assertion__            }_            AssertionFailedError assertion = new AssertionFailedError("Unexpected exception type, expected "_                                                                      + expectedType.getSimpleName())__            assertion.initCause(e)__            throw assertion__        }_        throw new AssertionFailedError("Expected exception " + expectedType.getSimpleName())__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,boolean,should,have,script,stack,throwing,runnable,runnable,try,runnable,run,catch,throwable,e,if,e,instanceof,script,exception,boolean,has,empty,script,stack,script,exception,e,get,script,stack,is,empty,if,should,have,script,stack,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,should,have,a,script,stack,assertion,init,cause,e,throw,assertion,else,if,false,should,have,script,stack,false,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,shouldn,t,have,a,script,stack,assertion,init,cause,e,throw,assertion,e,e,get,cause,if,expected,type,is,instance,e,return,expected,type,cast,e,else,assertion,failed,error,assertion,new,assertion,failed,error,expected,boxed,script,exception,assertion,init,cause,e,throw,assertion,assertion,failed,error,assertion,new,assertion,failed,error,unexpected,exception,type,expected,expected,type,get,simple,name,assertion,init,cause,e,throw,assertion,throw,new,assertion,failed,error,expected,exception,expected,type,get,simple,name
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,             ThrowingRunnable runnable);1536611444;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,_            ThrowingRunnable runnable) {_        try {_            runnable.run()__        } catch (Throwable e) {_            if (e instanceof ScriptException) {_                boolean hasEmptyScriptStack = ((ScriptException) e).getScriptStack().isEmpty()__                if (shouldHaveScriptStack && hasEmptyScriptStack) {_                    _                    AssertionFailedError assertion = new AssertionFailedError("ScriptException should have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                } else if (false == shouldHaveScriptStack && false == hasEmptyScriptStack) {_                    AssertionFailedError assertion = new AssertionFailedError("ScriptException shouldn't have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                }_                e = e.getCause()__                if (expectedType.isInstance(e)) {_                    return expectedType.cast(e)__                }_            } else {_                AssertionFailedError assertion = new AssertionFailedError("Expected boxed ScriptException")__                assertion.initCause(e)__                throw assertion__            }_            AssertionFailedError assertion = new AssertionFailedError("Unexpected exception type, expected "_                                                                      + expectedType.getSimpleName())__            assertion.initCause(e)__            throw assertion__        }_        throw new AssertionFailedError("Expected exception " + expectedType.getSimpleName())__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,boolean,should,have,script,stack,throwing,runnable,runnable,try,runnable,run,catch,throwable,e,if,e,instanceof,script,exception,boolean,has,empty,script,stack,script,exception,e,get,script,stack,is,empty,if,should,have,script,stack,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,should,have,a,script,stack,assertion,init,cause,e,throw,assertion,else,if,false,should,have,script,stack,false,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,shouldn,t,have,a,script,stack,assertion,init,cause,e,throw,assertion,e,e,get,cause,if,expected,type,is,instance,e,return,expected,type,cast,e,else,assertion,failed,error,assertion,new,assertion,failed,error,expected,boxed,script,exception,assertion,init,cause,e,throw,assertion,assertion,failed,error,assertion,new,assertion,failed,error,unexpected,exception,type,expected,expected,type,get,simple,name,assertion,init,cause,e,throw,assertion,throw,new,assertion,failed,error,expected,exception,expected,type,get,simple,name
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,             ThrowingRunnable runnable);1538424609;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,_            ThrowingRunnable runnable) {_        try {_            runnable.run()__        } catch (Throwable e) {_            if (e instanceof ScriptException) {_                boolean hasEmptyScriptStack = ((ScriptException) e).getScriptStack().isEmpty()__                if (shouldHaveScriptStack && hasEmptyScriptStack) {_                    _                    AssertionFailedError assertion = new AssertionFailedError("ScriptException should have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                } else if (false == shouldHaveScriptStack && false == hasEmptyScriptStack) {_                    AssertionFailedError assertion = new AssertionFailedError("ScriptException shouldn't have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                }_                e = e.getCause()__                if (expectedType.isInstance(e)) {_                    return expectedType.cast(e)__                }_            } else {_                AssertionFailedError assertion = new AssertionFailedError("Expected boxed ScriptException")__                assertion.initCause(e)__                throw assertion__            }_            AssertionFailedError assertion = new AssertionFailedError("Unexpected exception type, expected "_                                                                      + expectedType.getSimpleName())__            assertion.initCause(e)__            throw assertion__        }_        throw new AssertionFailedError("Expected exception " + expectedType.getSimpleName())__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,boolean,should,have,script,stack,throwing,runnable,runnable,try,runnable,run,catch,throwable,e,if,e,instanceof,script,exception,boolean,has,empty,script,stack,script,exception,e,get,script,stack,is,empty,if,should,have,script,stack,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,should,have,a,script,stack,assertion,init,cause,e,throw,assertion,else,if,false,should,have,script,stack,false,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,shouldn,t,have,a,script,stack,assertion,init,cause,e,throw,assertion,e,e,get,cause,if,expected,type,is,instance,e,return,expected,type,cast,e,else,assertion,failed,error,assertion,new,assertion,failed,error,expected,boxed,script,exception,assertion,init,cause,e,throw,assertion,assertion,failed,error,assertion,new,assertion,failed,error,unexpected,exception,type,expected,expected,type,get,simple,name,assertion,init,cause,e,throw,assertion,throw,new,assertion,failed,error,expected,exception,expected,type,get,simple,name
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,             ThrowingRunnable runnable);1540238977;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,_            ThrowingRunnable runnable) {_        try {_            runnable.run()__        } catch (Throwable e) {_            if (e instanceof ScriptException) {_                boolean hasEmptyScriptStack = ((ScriptException) e).getScriptStack().isEmpty()__                if (shouldHaveScriptStack && hasEmptyScriptStack) {_                    _                    AssertionFailedError assertion = new AssertionFailedError("ScriptException should have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                } else if (false == shouldHaveScriptStack && false == hasEmptyScriptStack) {_                    AssertionFailedError assertion = new AssertionFailedError("ScriptException shouldn't have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                }_                e = e.getCause()__                if (expectedType.isInstance(e)) {_                    return expectedType.cast(e)__                }_            } else {_                AssertionFailedError assertion = new AssertionFailedError("Expected boxed ScriptException")__                assertion.initCause(e)__                throw assertion__            }_            AssertionFailedError assertion = new AssertionFailedError("Unexpected exception type, expected "_                                                                      + expectedType.getSimpleName())__            assertion.initCause(e)__            throw assertion__        }_        throw new AssertionFailedError("Expected exception " + expectedType.getSimpleName())__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,boolean,should,have,script,stack,throwing,runnable,runnable,try,runnable,run,catch,throwable,e,if,e,instanceof,script,exception,boolean,has,empty,script,stack,script,exception,e,get,script,stack,is,empty,if,should,have,script,stack,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,should,have,a,script,stack,assertion,init,cause,e,throw,assertion,else,if,false,should,have,script,stack,false,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,shouldn,t,have,a,script,stack,assertion,init,cause,e,throw,assertion,e,e,get,cause,if,expected,type,is,instance,e,return,expected,type,cast,e,else,assertion,failed,error,assertion,new,assertion,failed,error,expected,boxed,script,exception,assertion,init,cause,e,throw,assertion,assertion,failed,error,assertion,new,assertion,failed,error,unexpected,exception,type,expected,expected,type,get,simple,name,assertion,init,cause,e,throw,assertion,throw,new,assertion,failed,error,expected,exception,expected,type,get,simple,name
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,             ThrowingRunnable runnable);1540486836;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, boolean shouldHaveScriptStack,_            ThrowingRunnable runnable) {_        try {_            runnable.run()__        } catch (Throwable e) {_            if (e instanceof ScriptException) {_                boolean hasEmptyScriptStack = ((ScriptException) e).getScriptStack().isEmpty()__                if (shouldHaveScriptStack && hasEmptyScriptStack) {_                    _                    AssertionFailedError assertion = new AssertionFailedError("ScriptException should have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                } else if (false == shouldHaveScriptStack && false == hasEmptyScriptStack) {_                    AssertionFailedError assertion = new AssertionFailedError("ScriptException shouldn't have a scriptStack")__                    assertion.initCause(e)__                    throw assertion__                }_                e = e.getCause()__                if (expectedType.isInstance(e)) {_                    return expectedType.cast(e)__                }_            } else {_                AssertionFailedError assertion = new AssertionFailedError("Expected boxed ScriptException")__                assertion.initCause(e)__                throw assertion__            }_            AssertionFailedError assertion = new AssertionFailedError("Unexpected exception type, expected "_                                                                      + expectedType.getSimpleName())__            assertion.initCause(e)__            throw assertion__        }_        throw new AssertionFailedError("Expected exception " + expectedType.getSimpleName())__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,boolean,should,have,script,stack,throwing,runnable,runnable,try,runnable,run,catch,throwable,e,if,e,instanceof,script,exception,boolean,has,empty,script,stack,script,exception,e,get,script,stack,is,empty,if,should,have,script,stack,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,should,have,a,script,stack,assertion,init,cause,e,throw,assertion,else,if,false,should,have,script,stack,false,has,empty,script,stack,assertion,failed,error,assertion,new,assertion,failed,error,script,exception,shouldn,t,have,a,script,stack,assertion,init,cause,e,throw,assertion,e,e,get,cause,if,expected,type,is,instance,e,return,expected,type,cast,e,else,assertion,failed,error,assertion,new,assertion,failed,error,expected,boxed,script,exception,assertion,init,cause,e,throw,assertion,assertion,failed,error,assertion,new,assertion,failed,error,unexpected,exception,type,expected,expected,type,get,simple,name,assertion,init,cause,e,throw,assertion,throw,new,assertion,failed,error,expected,exception,expected,type,get,simple,name
ScriptTestCase -> public Object exec(String script, boolean picky);1524684173;Compiles and returns the result of {@code script} with access to {@code picky};public Object exec(String script, boolean picky) {_        return exec(script, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,picky;public,object,exec,string,script,boolean,picky,return,exec,script,null,picky
ScriptTestCase -> public Object exec(String script, boolean picky);1531179852;Compiles and returns the result of {@code script} with access to {@code picky};public Object exec(String script, boolean picky) {_        return exec(script, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,picky;public,object,exec,string,script,boolean,picky,return,exec,script,null,picky
ScriptTestCase -> public Object exec(String script, boolean picky);1531910483;Compiles and returns the result of {@code script} with access to {@code picky};public Object exec(String script, boolean picky) {_        return exec(script, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,picky;public,object,exec,string,script,boolean,picky,return,exec,script,null,picky
ScriptTestCase -> public Object exec(String script, boolean picky);1532598597;Compiles and returns the result of {@code script} with access to {@code picky};public Object exec(String script, boolean picky) {_        return exec(script, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,picky;public,object,exec,string,script,boolean,picky,return,exec,script,null,picky
ScriptTestCase -> public Object exec(String script, boolean picky);1536611444;Compiles and returns the result of {@code script} with access to {@code picky};public Object exec(String script, boolean picky) {_        return exec(script, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,picky;public,object,exec,string,script,boolean,picky,return,exec,script,null,picky
ScriptTestCase -> public Object exec(String script, boolean picky);1538424609;Compiles and returns the result of {@code script} with access to {@code picky};public Object exec(String script, boolean picky) {_        return exec(script, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,picky;public,object,exec,string,script,boolean,picky,return,exec,script,null,picky
ScriptTestCase -> public Object exec(String script, boolean picky);1540238977;Compiles and returns the result of {@code script} with access to {@code picky};public Object exec(String script, boolean picky) {_        return exec(script, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,picky;public,object,exec,string,script,boolean,picky,return,exec,script,null,picky
ScriptTestCase -> public Object exec(String script, boolean picky);1540486836;Compiles and returns the result of {@code script} with access to {@code picky};public Object exec(String script, boolean picky) {_        return exec(script, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,picky;public,object,exec,string,script,boolean,picky,return,exec,script,null,picky
ScriptTestCase -> public Object exec(String script);1524684173;Compiles and returns the result of {@code script};public Object exec(String script) {_        return exec(script, null, true)__    };compiles,and,returns,the,result,of,code,script;public,object,exec,string,script,return,exec,script,null,true
ScriptTestCase -> public Object exec(String script);1531179852;Compiles and returns the result of {@code script};public Object exec(String script) {_        return exec(script, null, true)__    };compiles,and,returns,the,result,of,code,script;public,object,exec,string,script,return,exec,script,null,true
ScriptTestCase -> public Object exec(String script);1531910483;Compiles and returns the result of {@code script};public Object exec(String script) {_        return exec(script, null, true)__    };compiles,and,returns,the,result,of,code,script;public,object,exec,string,script,return,exec,script,null,true
ScriptTestCase -> public Object exec(String script);1532598597;Compiles and returns the result of {@code script};public Object exec(String script) {_        return exec(script, null, true)__    };compiles,and,returns,the,result,of,code,script;public,object,exec,string,script,return,exec,script,null,true
ScriptTestCase -> public Object exec(String script);1536611444;Compiles and returns the result of {@code script};public Object exec(String script) {_        return exec(script, null, true)__    };compiles,and,returns,the,result,of,code,script;public,object,exec,string,script,return,exec,script,null,true
ScriptTestCase -> public Object exec(String script);1538424609;Compiles and returns the result of {@code script};public Object exec(String script) {_        return exec(script, null, true)__    };compiles,and,returns,the,result,of,code,script;public,object,exec,string,script,return,exec,script,null,true
ScriptTestCase -> public Object exec(String script);1540238977;Compiles and returns the result of {@code script};public Object exec(String script) {_        return exec(script, null, true)__    };compiles,and,returns,the,result,of,code,script;public,object,exec,string,script,return,exec,script,null,true
ScriptTestCase -> public Object exec(String script);1540486836;Compiles and returns the result of {@code script};public Object exec(String script) {_        return exec(script, null, true)__    };compiles,and,returns,the,result,of,code,script;public,object,exec,string,script,return,exec,script,null,true
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable);1524684173;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable) {_        return expectScriptThrows(expectedType, true, runnable)__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,throwing,runnable,runnable,return,expect,script,throws,expected,type,true,runnable
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable);1531179852;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable) {_        return expectScriptThrows(expectedType, true, runnable)__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,throwing,runnable,runnable,return,expect,script,throws,expected,type,true,runnable
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable);1531910483;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable) {_        return expectScriptThrows(expectedType, true, runnable)__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,throwing,runnable,runnable,return,expect,script,throws,expected,type,true,runnable
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable);1532598597;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable) {_        return expectScriptThrows(expectedType, true, runnable)__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,throwing,runnable,runnable,return,expect,script,throws,expected,type,true,runnable
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable);1536611444;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable) {_        return expectScriptThrows(expectedType, true, runnable)__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,throwing,runnable,runnable,return,expect,script,throws,expected,type,true,runnable
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable);1538424609;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable) {_        return expectScriptThrows(expectedType, true, runnable)__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,throwing,runnable,runnable,return,expect,script,throws,expected,type,true,runnable
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable);1540238977;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable) {_        return expectScriptThrows(expectedType, true, runnable)__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,throwing,runnable,runnable,return,expect,script,throws,expected,type,true,runnable
ScriptTestCase -> public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable);1540486836;Checks a specific exception class is thrown (boxed inside ScriptException) and returns it.;public static <T extends Throwable> T expectScriptThrows(Class<T> expectedType, ThrowingRunnable runnable) {_        return expectScriptThrows(expectedType, true, runnable)__    };checks,a,specific,exception,class,is,thrown,boxed,inside,script,exception,and,returns,it;public,static,t,extends,throwable,t,expect,script,throws,class,t,expected,type,throwing,runnable,runnable,return,expect,script,throws,expected,type,true,runnable
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, boolean picky);1538424609;Compiles and returns the result of {@code script} with access to {@code vars} and compile-time parameters;public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, boolean picky) {_        _        if (picky) {_            ScriptClassInfo scriptClassInfo = new ScriptClassInfo(PAINLESS_LOOKUP, GenericElasticsearchScript.class)__            CompilerSettings pickySettings = new CompilerSettings()__            pickySettings.setPicky(true)__            pickySettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(scriptEngineSettings()))__            Walker.buildPainlessTree(_                scriptClassInfo, new MainMethodReserved(), getTestName(), script, pickySettings, PAINLESS_LOOKUP, null)__        }_        _        PainlessTestScript.Factory factory = scriptEngine.compile(null, script, PainlessTestScript.CONTEXT, compileParams)__        PainlessTestScript testScript = factory.newInstance(vars == null ? Collections.emptyMap() : vars)__        return testScript.execute()__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars,and,compile,time,parameters;public,object,exec,string,script,map,string,object,vars,map,string,string,compile,params,boolean,picky,if,picky,script,class,info,script,class,info,new,script,class,info,generic,elasticsearch,script,class,compiler,settings,picky,settings,new,compiler,settings,picky,settings,set,picky,true,picky,settings,set,regexes,enabled,compiler,settings,get,script,engine,settings,walker,build,painless,tree,script,class,info,new,main,method,reserved,get,test,name,script,picky,settings,null,painless,test,script,factory,factory,script,engine,compile,null,script,painless,test,script,context,compile,params,painless,test,script,test,script,factory,new,instance,vars,null,collections,empty,map,vars,return,test,script,execute
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, boolean picky);1540238977;Compiles and returns the result of {@code script} with access to {@code vars} and compile-time parameters;public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, boolean picky) {_        _        if (picky) {_            ScriptClassInfo scriptClassInfo = new ScriptClassInfo(PAINLESS_LOOKUP, GenericElasticsearchScript.class)__            CompilerSettings pickySettings = new CompilerSettings()__            pickySettings.setPicky(true)__            pickySettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(scriptEngineSettings()))__            Walker.buildPainlessTree(_                scriptClassInfo, new MainMethodReserved(), getTestName(), script, pickySettings, PAINLESS_LOOKUP, null)__        }_        _        PainlessTestScript.Factory factory = scriptEngine.compile(null, script, PainlessTestScript.CONTEXT, compileParams)__        PainlessTestScript testScript = factory.newInstance(vars == null ? Collections.emptyMap() : vars)__        return testScript.execute()__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars,and,compile,time,parameters;public,object,exec,string,script,map,string,object,vars,map,string,string,compile,params,boolean,picky,if,picky,script,class,info,script,class,info,new,script,class,info,generic,elasticsearch,script,class,compiler,settings,picky,settings,new,compiler,settings,picky,settings,set,picky,true,picky,settings,set,regexes,enabled,compiler,settings,get,script,engine,settings,walker,build,painless,tree,script,class,info,new,main,method,reserved,get,test,name,script,picky,settings,null,painless,test,script,factory,factory,script,engine,compile,null,script,painless,test,script,context,compile,params,painless,test,script,test,script,factory,new,instance,vars,null,collections,empty,map,vars,return,test,script,execute
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, boolean picky);1540486836;Compiles and returns the result of {@code script} with access to {@code vars} and compile-time parameters;public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, boolean picky) {_        _        if (picky) {_            ScriptClassInfo scriptClassInfo = new ScriptClassInfo(PAINLESS_LOOKUP, PainlessTestScript.class)__            CompilerSettings pickySettings = new CompilerSettings()__            pickySettings.setPicky(true)__            pickySettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(scriptEngineSettings()))__            Walker.buildPainlessTree(_                scriptClassInfo, new MainMethodReserved(), getTestName(), script, pickySettings, PAINLESS_LOOKUP, null)__        }_        _        PainlessTestScript.Factory factory = scriptEngine.compile(null, script, PainlessTestScript.CONTEXT, compileParams)__        PainlessTestScript testScript = factory.newInstance(vars == null ? Collections.emptyMap() : vars)__        return testScript.execute()__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars,and,compile,time,parameters;public,object,exec,string,script,map,string,object,vars,map,string,string,compile,params,boolean,picky,if,picky,script,class,info,script,class,info,new,script,class,info,painless,test,script,class,compiler,settings,picky,settings,new,compiler,settings,picky,settings,set,picky,true,picky,settings,set,regexes,enabled,compiler,settings,get,script,engine,settings,walker,build,painless,tree,script,class,info,new,main,method,reserved,get,test,name,script,picky,settings,null,painless,test,script,factory,factory,script,engine,compile,null,script,painless,test,script,context,compile,params,painless,test,script,test,script,factory,new,instance,vars,null,collections,empty,map,vars,return,test,script,execute
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, boolean picky);1524684173;Compiles and returns the result of {@code script} with access to {@code vars};public Object exec(String script, Map<String, Object> vars, boolean picky) {_        Map<String,String> compilerSettings = new HashMap<>()__        compilerSettings.put(CompilerSettings.INITIAL_CALL_SITE_DEPTH, random().nextBoolean() ? "0" : "10")__        return exec(script, vars, compilerSettings, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars;public,object,exec,string,script,map,string,object,vars,boolean,picky,map,string,string,compiler,settings,new,hash,map,compiler,settings,put,compiler,settings,random,next,boolean,0,10,return,exec,script,vars,compiler,settings,null,picky
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, boolean picky);1531179852;Compiles and returns the result of {@code script} with access to {@code vars};public Object exec(String script, Map<String, Object> vars, boolean picky) {_        Map<String,String> compilerSettings = new HashMap<>()__        compilerSettings.put(CompilerSettings.INITIAL_CALL_SITE_DEPTH, random().nextBoolean() ? "0" : "10")__        return exec(script, vars, compilerSettings, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars;public,object,exec,string,script,map,string,object,vars,boolean,picky,map,string,string,compiler,settings,new,hash,map,compiler,settings,put,compiler,settings,random,next,boolean,0,10,return,exec,script,vars,compiler,settings,null,picky
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, boolean picky);1531910483;Compiles and returns the result of {@code script} with access to {@code vars};public Object exec(String script, Map<String, Object> vars, boolean picky) {_        Map<String,String> compilerSettings = new HashMap<>()__        compilerSettings.put(CompilerSettings.INITIAL_CALL_SITE_DEPTH, random().nextBoolean() ? "0" : "10")__        return exec(script, vars, compilerSettings, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars;public,object,exec,string,script,map,string,object,vars,boolean,picky,map,string,string,compiler,settings,new,hash,map,compiler,settings,put,compiler,settings,random,next,boolean,0,10,return,exec,script,vars,compiler,settings,null,picky
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, boolean picky);1532598597;Compiles and returns the result of {@code script} with access to {@code vars};public Object exec(String script, Map<String, Object> vars, boolean picky) {_        Map<String,String> compilerSettings = new HashMap<>()__        compilerSettings.put(CompilerSettings.INITIAL_CALL_SITE_DEPTH, random().nextBoolean() ? "0" : "10")__        return exec(script, vars, compilerSettings, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars;public,object,exec,string,script,map,string,object,vars,boolean,picky,map,string,string,compiler,settings,new,hash,map,compiler,settings,put,compiler,settings,random,next,boolean,0,10,return,exec,script,vars,compiler,settings,null,picky
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, boolean picky);1536611444;Compiles and returns the result of {@code script} with access to {@code vars};public Object exec(String script, Map<String, Object> vars, boolean picky) {_        Map<String,String> compilerSettings = new HashMap<>()__        compilerSettings.put(CompilerSettings.INITIAL_CALL_SITE_DEPTH, random().nextBoolean() ? "0" : "10")__        return exec(script, vars, compilerSettings, null, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars;public,object,exec,string,script,map,string,object,vars,boolean,picky,map,string,string,compiler,settings,new,hash,map,compiler,settings,put,compiler,settings,random,next,boolean,0,10,return,exec,script,vars,compiler,settings,null,picky
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, boolean picky);1538424609;Compiles and returns the result of {@code script} with access to {@code vars};public Object exec(String script, Map<String, Object> vars, boolean picky) {_        Map<String,String> compilerSettings = new HashMap<>()__        compilerSettings.put(CompilerSettings.INITIAL_CALL_SITE_DEPTH, random().nextBoolean() ? "0" : "10")__        return exec(script, vars, compilerSettings, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars;public,object,exec,string,script,map,string,object,vars,boolean,picky,map,string,string,compiler,settings,new,hash,map,compiler,settings,put,compiler,settings,random,next,boolean,0,10,return,exec,script,vars,compiler,settings,picky
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, boolean picky);1540238977;Compiles and returns the result of {@code script} with access to {@code vars};public Object exec(String script, Map<String, Object> vars, boolean picky) {_        Map<String,String> compilerSettings = new HashMap<>()__        compilerSettings.put(CompilerSettings.INITIAL_CALL_SITE_DEPTH, random().nextBoolean() ? "0" : "10")__        return exec(script, vars, compilerSettings, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars;public,object,exec,string,script,map,string,object,vars,boolean,picky,map,string,string,compiler,settings,new,hash,map,compiler,settings,put,compiler,settings,random,next,boolean,0,10,return,exec,script,vars,compiler,settings,picky
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, boolean picky);1540486836;Compiles and returns the result of {@code script} with access to {@code vars};public Object exec(String script, Map<String, Object> vars, boolean picky) {_        Map<String,String> compilerSettings = new HashMap<>()__        compilerSettings.put(CompilerSettings.INITIAL_CALL_SITE_DEPTH, random().nextBoolean() ? "0" : "10")__        return exec(script, vars, compilerSettings, picky)__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars;public,object,exec,string,script,map,string,object,vars,boolean,picky,map,string,string,compiler,settings,new,hash,map,compiler,settings,put,compiler,settings,random,next,boolean,0,10,return,exec,script,vars,compiler,settings,picky
ScriptTestCase -> protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts();1524684173;Script contexts used to build the script engine. Override to customize which script contexts are available.;protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {_        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>()__        contexts.put(SearchScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        contexts.put(ExecutableScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        return contexts__    };script,contexts,used,to,build,the,script,engine,override,to,customize,which,script,contexts,are,available;protected,map,script,context,list,whitelist,script,contexts,map,script,context,list,whitelist,contexts,new,hash,map,contexts,put,search,script,context,whitelist,contexts,put,executable,script,context,whitelist,return,contexts
ScriptTestCase -> protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts();1531179852;Script contexts used to build the script engine. Override to customize which script contexts are available.;protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {_        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>()__        contexts.put(SearchScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        contexts.put(ExecutableScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        return contexts__    };script,contexts,used,to,build,the,script,engine,override,to,customize,which,script,contexts,are,available;protected,map,script,context,list,whitelist,script,contexts,map,script,context,list,whitelist,contexts,new,hash,map,contexts,put,search,script,context,whitelist,contexts,put,executable,script,context,whitelist,return,contexts
ScriptTestCase -> protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts();1531910483;Script contexts used to build the script engine. Override to customize which script contexts are available.;protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {_        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>()__        contexts.put(SearchScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        contexts.put(ExecutableScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        return contexts__    };script,contexts,used,to,build,the,script,engine,override,to,customize,which,script,contexts,are,available;protected,map,script,context,list,whitelist,script,contexts,map,script,context,list,whitelist,contexts,new,hash,map,contexts,put,search,script,context,whitelist,contexts,put,executable,script,context,whitelist,return,contexts
ScriptTestCase -> protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts();1532598597;Script contexts used to build the script engine. Override to customize which script contexts are available.;protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {_        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>()__        contexts.put(SearchScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        contexts.put(ExecutableScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        return contexts__    };script,contexts,used,to,build,the,script,engine,override,to,customize,which,script,contexts,are,available;protected,map,script,context,list,whitelist,script,contexts,map,script,context,list,whitelist,contexts,new,hash,map,contexts,put,search,script,context,whitelist,contexts,put,executable,script,context,whitelist,return,contexts
ScriptTestCase -> protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts();1536611444;Script contexts used to build the script engine. Override to customize which script contexts are available.;protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {_        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>()__        contexts.put(SearchScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        contexts.put(ExecutableScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        return contexts__    };script,contexts,used,to,build,the,script,engine,override,to,customize,which,script,contexts,are,available;protected,map,script,context,list,whitelist,script,contexts,map,script,context,list,whitelist,contexts,new,hash,map,contexts,put,search,script,context,whitelist,contexts,put,executable,script,context,whitelist,return,contexts
ScriptTestCase -> protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts();1538424609;Script contexts used to build the script engine. Override to customize which script contexts are available.;protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {_        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>()__        contexts.put(SearchScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        contexts.put(PainlessTestScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        return contexts__    };script,contexts,used,to,build,the,script,engine,override,to,customize,which,script,contexts,are,available;protected,map,script,context,list,whitelist,script,contexts,map,script,context,list,whitelist,contexts,new,hash,map,contexts,put,search,script,context,whitelist,contexts,put,painless,test,script,context,whitelist,return,contexts
ScriptTestCase -> protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts();1540238977;Script contexts used to build the script engine. Override to customize which script contexts are available.;protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {_        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>()__        contexts.put(PainlessTestScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        return contexts__    };script,contexts,used,to,build,the,script,engine,override,to,customize,which,script,contexts,are,available;protected,map,script,context,list,whitelist,script,contexts,map,script,context,list,whitelist,contexts,new,hash,map,contexts,put,painless,test,script,context,whitelist,return,contexts
ScriptTestCase -> protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts();1540486836;Script contexts used to build the script engine. Override to customize which script contexts are available.;protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {_        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>()__        contexts.put(PainlessTestScript.CONTEXT, Whitelist.BASE_WHITELISTS)__        return contexts__    };script,contexts,used,to,build,the,script,engine,override,to,customize,which,script,contexts,are,available;protected,map,script,context,list,whitelist,script,contexts,map,script,context,list,whitelist,contexts,new,hash,map,contexts,put,painless,test,script,context,whitelist,return,contexts
ScriptTestCase -> public void assertBytecodeExists(String script, String bytecode);1524684173;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode passed in as a String.;public void assertBytecodeExists(String script, String bytecode) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.contains(bytecode))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,passed,in,as,a,string;public,void,assert,bytecode,exists,string,script,string,bytecode,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,contains,bytecode
ScriptTestCase -> public void assertBytecodeExists(String script, String bytecode);1531179852;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode passed in as a String.;public void assertBytecodeExists(String script, String bytecode) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.contains(bytecode))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,passed,in,as,a,string;public,void,assert,bytecode,exists,string,script,string,bytecode,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,contains,bytecode
ScriptTestCase -> public void assertBytecodeExists(String script, String bytecode);1531910483;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode passed in as a String.;public void assertBytecodeExists(String script, String bytecode) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.contains(bytecode))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,passed,in,as,a,string;public,void,assert,bytecode,exists,string,script,string,bytecode,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,contains,bytecode
ScriptTestCase -> public void assertBytecodeExists(String script, String bytecode);1532598597;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode passed in as a String.;public void assertBytecodeExists(String script, String bytecode) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.contains(bytecode))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,passed,in,as,a,string;public,void,assert,bytecode,exists,string,script,string,bytecode,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,contains,bytecode
ScriptTestCase -> public void assertBytecodeExists(String script, String bytecode);1536611444;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode passed in as a String.;public void assertBytecodeExists(String script, String bytecode) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.contains(bytecode))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,passed,in,as,a,string;public,void,assert,bytecode,exists,string,script,string,bytecode,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,contains,bytecode
ScriptTestCase -> public void assertBytecodeExists(String script, String bytecode);1538424609;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode passed in as a String.;public void assertBytecodeExists(String script, String bytecode) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.contains(bytecode))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,passed,in,as,a,string;public,void,assert,bytecode,exists,string,script,string,bytecode,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,contains,bytecode
ScriptTestCase -> public void assertBytecodeExists(String script, String bytecode);1540238977;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode passed in as a String.;public void assertBytecodeExists(String script, String bytecode) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.contains(bytecode))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,passed,in,as,a,string;public,void,assert,bytecode,exists,string,script,string,bytecode,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,contains,bytecode
ScriptTestCase -> public void assertBytecodeExists(String script, String bytecode);1540486836;Uses the {@link Debugger} to get the bytecode output for a script and compare_it against an expected bytecode passed in as a String.;public void assertBytecodeExists(String script, String bytecode) {_        final String asm = Debugger.toString(script)__        assertTrue("bytecode not found, got: \n" + asm , asm.contains(bytecode))__    };uses,the,link,debugger,to,get,the,bytecode,output,for,a,script,and,compare,it,against,an,expected,bytecode,passed,in,as,a,string;public,void,assert,bytecode,exists,string,script,string,bytecode,final,string,asm,debugger,to,string,script,assert,true,bytecode,not,found,got,n,asm,asm,contains,bytecode
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, Scorer scorer, boolean picky);1524684173;Compiles and returns the result of {@code script} with access to {@code vars} and compile-time parameters;public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, Scorer scorer, boolean picky) {_        _        if (picky) {_            Definition definition = new Definition(Whitelist.BASE_WHITELISTS)__            ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, GenericElasticsearchScript.class)__            CompilerSettings pickySettings = new CompilerSettings()__            pickySettings.setPicky(true)__            pickySettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(scriptEngineSettings()))__            Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), getTestName(), script, pickySettings, definition, null)__        }_        _        ExecutableScript.Factory factory = scriptEngine.compile(null, script, ExecutableScript.CONTEXT, compileParams)__        ExecutableScript executableScript = factory.newInstance(vars)__        if (scorer != null) {_            ((ScorerAware)executableScript).setScorer(scorer)__        }_        return executableScript.run()__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars,and,compile,time,parameters;public,object,exec,string,script,map,string,object,vars,map,string,string,compile,params,scorer,scorer,boolean,picky,if,picky,definition,definition,new,definition,whitelist,script,class,info,script,class,info,new,script,class,info,definition,generic,elasticsearch,script,class,compiler,settings,picky,settings,new,compiler,settings,picky,settings,set,picky,true,picky,settings,set,regexes,enabled,compiler,settings,get,script,engine,settings,walker,build,painless,tree,script,class,info,new,main,method,reserved,get,test,name,script,picky,settings,definition,null,executable,script,factory,factory,script,engine,compile,null,script,executable,script,context,compile,params,executable,script,executable,script,factory,new,instance,vars,if,scorer,null,scorer,aware,executable,script,set,scorer,scorer,return,executable,script,run
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, Scorer scorer, boolean picky);1531179852;Compiles and returns the result of {@code script} with access to {@code vars} and compile-time parameters;public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, Scorer scorer, boolean picky) {_        _        if (picky) {_            PainlessLookup painlessLookup = new PainlessLookup(Whitelist.BASE_WHITELISTS)__            ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, GenericElasticsearchScript.class)__            CompilerSettings pickySettings = new CompilerSettings()__            pickySettings.setPicky(true)__            pickySettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(scriptEngineSettings()))__            Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), getTestName(), script, pickySettings, painlessLookup, null)__        }_        _        ExecutableScript.Factory factory = scriptEngine.compile(null, script, ExecutableScript.CONTEXT, compileParams)__        ExecutableScript executableScript = factory.newInstance(vars)__        if (scorer != null) {_            ((ScorerAware)executableScript).setScorer(scorer)__        }_        return executableScript.run()__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars,and,compile,time,parameters;public,object,exec,string,script,map,string,object,vars,map,string,string,compile,params,scorer,scorer,boolean,picky,if,picky,painless,lookup,painless,lookup,new,painless,lookup,whitelist,script,class,info,script,class,info,new,script,class,info,painless,lookup,generic,elasticsearch,script,class,compiler,settings,picky,settings,new,compiler,settings,picky,settings,set,picky,true,picky,settings,set,regexes,enabled,compiler,settings,get,script,engine,settings,walker,build,painless,tree,script,class,info,new,main,method,reserved,get,test,name,script,picky,settings,painless,lookup,null,executable,script,factory,factory,script,engine,compile,null,script,executable,script,context,compile,params,executable,script,executable,script,factory,new,instance,vars,if,scorer,null,scorer,aware,executable,script,set,scorer,scorer,return,executable,script,run
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, Scorer scorer, boolean picky);1531910483;Compiles and returns the result of {@code script} with access to {@code vars} and compile-time parameters;public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, Scorer scorer, boolean picky) {_        _        if (picky) {_            PainlessLookup painlessLookup = new PainlessLookupBuilder(Whitelist.BASE_WHITELISTS).build()__            ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, GenericElasticsearchScript.class)__            CompilerSettings pickySettings = new CompilerSettings()__            pickySettings.setPicky(true)__            pickySettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(scriptEngineSettings()))__            Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), getTestName(), script, pickySettings, painlessLookup, null)__        }_        _        ExecutableScript.Factory factory = scriptEngine.compile(null, script, ExecutableScript.CONTEXT, compileParams)__        ExecutableScript executableScript = factory.newInstance(vars)__        if (scorer != null) {_            ((ScorerAware)executableScript).setScorer(scorer)__        }_        return executableScript.run()__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars,and,compile,time,parameters;public,object,exec,string,script,map,string,object,vars,map,string,string,compile,params,scorer,scorer,boolean,picky,if,picky,painless,lookup,painless,lookup,new,painless,lookup,builder,whitelist,build,script,class,info,script,class,info,new,script,class,info,painless,lookup,generic,elasticsearch,script,class,compiler,settings,picky,settings,new,compiler,settings,picky,settings,set,picky,true,picky,settings,set,regexes,enabled,compiler,settings,get,script,engine,settings,walker,build,painless,tree,script,class,info,new,main,method,reserved,get,test,name,script,picky,settings,painless,lookup,null,executable,script,factory,factory,script,engine,compile,null,script,executable,script,context,compile,params,executable,script,executable,script,factory,new,instance,vars,if,scorer,null,scorer,aware,executable,script,set,scorer,scorer,return,executable,script,run
ScriptTestCase -> public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, Scorer scorer, boolean picky);1532598597;Compiles and returns the result of {@code script} with access to {@code vars} and compile-time parameters;public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams, Scorer scorer, boolean picky) {_        _        if (picky) {_            PainlessLookup painlessLookup = PainlessLookupBuilder.buildFromWhitelists(Whitelist.BASE_WHITELISTS)__            ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, GenericElasticsearchScript.class)__            CompilerSettings pickySettings = new CompilerSettings()__            pickySettings.setPicky(true)__            pickySettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(scriptEngineSettings()))__            Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), getTestName(), script, pickySettings, painlessLookup, null)__        }_        _        ExecutableScript.Factory factory = scriptEngine.compile(null, script, ExecutableScript.CONTEXT, compileParams)__        ExecutableScript executableScript = factory.newInstance(vars)__        if (scorer != null) {_            ((ScorerAware)executableScript).setScorer(scorer)__        }_        return executableScript.run()__    };compiles,and,returns,the,result,of,code,script,with,access,to,code,vars,and,compile,time,parameters;public,object,exec,string,script,map,string,object,vars,map,string,string,compile,params,scorer,scorer,boolean,picky,if,picky,painless,lookup,painless,lookup,painless,lookup,builder,build,from,whitelists,whitelist,script,class,info,script,class,info,new,script,class,info,painless,lookup,generic,elasticsearch,script,class,compiler,settings,picky,settings,new,compiler,settings,picky,settings,set,picky,true,picky,settings,set,regexes,enabled,compiler,settings,get,script,engine,settings,walker,build,painless,tree,script,class,info,new,main,method,reserved,get,test,name,script,picky,settings,painless,lookup,null,executable,script,factory,factory,script,engine,compile,null,script,executable,script,context,compile,params,executable,script,executable,script,factory,new,instance,vars,if,scorer,null,scorer,aware,executable,script,set,scorer,scorer,return,executable,script,run
