commented;modifiers;parameterAmount;loc;comment;code
true;public;0;10;/**  * basic tests  */ ;/**  * basic tests  */ public void testBasics() {     assertEquals(false, exec("return !true.")).     assertEquals(true, exec("boolean x = false. return !x.")).     assertEquals(-2, exec("return ~1.")).     assertEquals(-2, exec("byte x = 1. return ~x.")).     assertEquals(1, exec("return +1.")).     assertEquals(1.0, exec("double x = 1. return +x.")).     assertEquals(-1, exec("return -1.")).     assertEquals(-2, exec("short x = 2. return -x.")). }
false;public;0;5;;public void testNegationInt() throws Exception {     assertEquals(-1, exec("return -1.")).     assertEquals(1, exec("return -(-1).")).     assertEquals(0, exec("return -0.")). }
false;public;0;9;;public void testPlus() {     assertEquals(-1, exec("byte x = (byte)-1. return +x")).     assertEquals(-1, exec("short x = (short)-1. return +x")).     assertEquals(65535, exec("char x = (char)-1. return +x")).     assertEquals(-1, exec("int x = -1. return +x")).     assertEquals(-1L, exec("long x = -1L. return +x")).     assertEquals(-1.0F, exec("float x = -1F. return +x")).     assertEquals(-1.0, exec("double x = -1.0. return +x")). }
false;public;0;7;;public void testDefNot() {     assertEquals(~1, exec("def x = (byte)1. return ~x")).     assertEquals(~1, exec("def x = (short)1. return ~x")).     assertEquals(~1, exec("def x = (char)1. return ~x")).     assertEquals(~1, exec("def x = 1. return ~x")).     assertEquals(~1L, exec("def x = 1L. return ~x")). }
false;public;0;6;;public void testDefNotTypedRet() {     assertEquals((double) ~1, exec("def x = (byte)1. double y = ~x. return y.")).     assertEquals((float) ~1, exec("def x = (short)1. float y = ~x. return y.")).     assertEquals((long) ~1, exec("def x = (char)1. long y = ~x. return y.")).     assertEquals(~1, exec("def x = 1. int y = ~x. return y.")). }
false;public;0;9;;public void testDefNeg() {     assertEquals(-1, exec("def x = (byte)1. return -x")).     assertEquals(-1, exec("def x = (short)1. return -x")).     assertEquals(-1, exec("def x = (char)1. return -x")).     assertEquals(-1, exec("def x = 1. return -x")).     assertEquals(-1L, exec("def x = 1L. return -x")).     assertEquals(-1.0F, exec("def x = 1F. return -x")).     assertEquals(-1.0, exec("def x = 1.0. return -x")). }
false;public;0;6;;public void testDefNegTypedRet() {     assertEquals((double) -1, exec("def x = (byte)1. double y = -x. return y.")).     assertEquals((float) -1, exec("def x = (short)1. float y = -x. return y.")).     assertEquals((long) -1, exec("def x = (char)1. long y = -x. return y.")).     assertEquals(-1, exec("def x = 1. int y = -x. return y.")). }
false;public;0;9;;public void testDefPlus() {     assertEquals(-1, exec("def x = (byte)-1. return +x")).     assertEquals(-1, exec("def x = (short)-1. return +x")).     assertEquals(65535, exec("def x = (char)-1. return +x")).     assertEquals(-1, exec("def x = -1. return +x")).     assertEquals(-1L, exec("def x = -1L. return +x")).     assertEquals(-1.0F, exec("def x = -1F. return +x")).     assertEquals(-1.0D, exec("def x = -1.0. return +x")). }
false;public;0;6;;public void testDefPlusTypedRet() {     assertEquals((double) -1, exec("def x = (byte)-1. double y = +x. return y.")).     assertEquals((float) -1, exec("def x = (short)-1. float y = +x. return y.")).     assertEquals((long) 65535, exec("def x = (char)-1. long y = +x. return y.")).     assertEquals(-1, exec("def x = -1. int y = +x. return y.")). }
