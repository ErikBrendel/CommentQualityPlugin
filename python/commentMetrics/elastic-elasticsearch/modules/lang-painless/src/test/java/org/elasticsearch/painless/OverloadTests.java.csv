commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testMethod() {     // assertEquals(2, exec("return 'abc123abc'.indexOf('c').")).     // assertEquals(8, exec("return 'abc123abc'.indexOf('c', 3).")).     IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {         exec("return 'abc123abc'.indexOf('c', 3, 'bogus').").     }).     assertTrue(expected.getMessage().contains("[java.lang.String, indexOf/3]")). }
false;public;0;8;;public void testMethodDynamic() {     assertEquals(2, exec("def x = 'abc123abc'. return x.indexOf('c').")).     assertEquals(8, exec("def x = 'abc123abc'. return x.indexOf('c', 3).")).     IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {         exec("def x = 'abc123abc'. return x.indexOf('c', 3, 'bogus').").     }).     assertTrue(expected.getMessage().contains("dynamic method [java.lang.String, indexOf/3] not found")). }
false;public;0;6;;public void testConstructor() {     assertEquals(true, exec("org.elasticsearch.painless.FeatureTest f = new org.elasticsearch.painless.FeatureTest()." + "return f.x == 0 && f.y == 0.")).     assertEquals(true, exec("org.elasticsearch.painless.FeatureTest f = new org.elasticsearch.painless.FeatureTest(1, 2)." + "return f.x == 1 && f.y == 2.")). }
false;public;0;4;;public void testStatic() {     assertEquals(true, exec("return org.elasticsearch.painless.FeatureTest.overloadedStatic().")).     assertEquals(false, exec("return org.elasticsearch.painless.FeatureTest.overloadedStatic(false).")). }
