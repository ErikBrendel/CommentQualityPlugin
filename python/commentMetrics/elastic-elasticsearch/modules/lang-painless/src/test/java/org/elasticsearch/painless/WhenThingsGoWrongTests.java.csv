# id;timestamp;commentText;codeText;commentWords;codeWords
WhenThingsGoWrongTests -> public void testScriptStack();1524684173;Test that the scriptStack looks good. By implication this tests that we build proper "line numbers" in stack trace. These line_numbers are really 1 based character numbers.;public void testScriptStack() {_        for (String type : new String[] {"String", "def   "}) {_            _            ScriptException exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_ boolean y = x.isEmpty()_\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(30, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "return x.isEmpty()_")__            })__            _            assertScriptElementColumn(25, exception)__            assertScriptStack(exception,_                    "return x.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     type + " y = x_\n" +_                     "return y.isEmpty()_")__            })__            _            assertScriptElementColumn(39, exception)__            assertScriptStack(exception,_                    "return y.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "boolean y = false_\n" +_                     "if (!y) {\n" +_                     "  y = x.isEmpty()_\n" +_                     "}\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(53, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n}\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))__        }_    };test,that,the,script,stack,looks,good,by,implication,this,tests,that,we,build,proper,line,numbers,in,stack,trace,these,line,numbers,are,really,1,based,character,numbers;public,void,test,script,stack,for,string,type,new,string,string,def,script,exception,exception,expect,throws,script,exception,class,exec,type,x,null,boolean,y,x,is,empty,n,return,y,assert,script,element,column,30,exception,assert,script,stack,exception,y,x,is,empty,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,return,x,is,empty,assert,script,element,column,25,exception,assert,script,stack,exception,return,x,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,type,y,x,n,return,y,is,empty,assert,script,element,column,39,exception,assert,script,stack,exception,return,y,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,boolean,y,false,n,if,y,n,y,x,is,empty,n,n,return,y,assert,script,element,column,53,exception,assert,script,stack,exception,y,x,is,empty,n,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class
WhenThingsGoWrongTests -> public void testScriptStack();1532598597;Test that the scriptStack looks good. By implication this tests that we build proper "line numbers" in stack trace. These line_numbers are really 1 based character numbers.;public void testScriptStack() {_        for (String type : new String[] {"String", "def   "}) {_            _            ScriptException exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_ boolean y = x.isEmpty()_\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(30, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "return x.isEmpty()_")__            })__            _            assertScriptElementColumn(25, exception)__            assertScriptStack(exception,_                    "return x.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     type + " y = x_\n" +_                     "return y.isEmpty()_")__            })__            _            assertScriptElementColumn(39, exception)__            assertScriptStack(exception,_                    "return y.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "boolean y = false_\n" +_                     "if (!y) {\n" +_                     "  y = x.isEmpty()_\n" +_                     "}\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(53, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n}\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))__        }_    };test,that,the,script,stack,looks,good,by,implication,this,tests,that,we,build,proper,line,numbers,in,stack,trace,these,line,numbers,are,really,1,based,character,numbers;public,void,test,script,stack,for,string,type,new,string,string,def,script,exception,exception,expect,throws,script,exception,class,exec,type,x,null,boolean,y,x,is,empty,n,return,y,assert,script,element,column,30,exception,assert,script,stack,exception,y,x,is,empty,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,return,x,is,empty,assert,script,element,column,25,exception,assert,script,stack,exception,return,x,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,type,y,x,n,return,y,is,empty,assert,script,element,column,39,exception,assert,script,stack,exception,return,y,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,boolean,y,false,n,if,y,n,y,x,is,empty,n,n,return,y,assert,script,element,column,53,exception,assert,script,stack,exception,y,x,is,empty,n,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class
WhenThingsGoWrongTests -> public void testScriptStack();1533815246;Test that the scriptStack looks good. By implication this tests that we build proper "line numbers" in stack trace. These line_numbers are really 1 based character numbers.;public void testScriptStack() {_        for (String type : new String[] {"String", "def   "}) {_            _            ScriptException exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_ boolean y = x.isEmpty()_\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(30, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "return x.isEmpty()_")__            })__            _            assertScriptElementColumn(25, exception)__            assertScriptStack(exception,_                    "return x.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     type + " y = x_\n" +_                     "return y.isEmpty()_")__            })__            _            assertScriptElementColumn(39, exception)__            assertScriptStack(exception,_                    "return y.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "boolean y = false_\n" +_                     "if (!y) {\n" +_                     "  y = x.isEmpty()_\n" +_                     "}\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(53, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n}\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))__        }_    };test,that,the,script,stack,looks,good,by,implication,this,tests,that,we,build,proper,line,numbers,in,stack,trace,these,line,numbers,are,really,1,based,character,numbers;public,void,test,script,stack,for,string,type,new,string,string,def,script,exception,exception,expect,throws,script,exception,class,exec,type,x,null,boolean,y,x,is,empty,n,return,y,assert,script,element,column,30,exception,assert,script,stack,exception,y,x,is,empty,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,return,x,is,empty,assert,script,element,column,25,exception,assert,script,stack,exception,return,x,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,type,y,x,n,return,y,is,empty,assert,script,element,column,39,exception,assert,script,stack,exception,return,y,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,boolean,y,false,n,if,y,n,y,x,is,empty,n,n,return,y,assert,script,element,column,53,exception,assert,script,stack,exception,y,x,is,empty,n,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class
WhenThingsGoWrongTests -> public void testScriptStack();1535552903;Test that the scriptStack looks good. By implication this tests that we build proper "line numbers" in stack trace. These line_numbers are really 1 based character numbers.;public void testScriptStack() {_        for (String type : new String[] {"String", "def   "}) {_            _            ScriptException exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_ boolean y = x.isEmpty()_\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(30, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "return x.isEmpty()_")__            })__            _            assertScriptElementColumn(25, exception)__            assertScriptStack(exception,_                    "return x.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     type + " y = x_\n" +_                     "return y.isEmpty()_")__            })__            _            assertScriptElementColumn(39, exception)__            assertScriptStack(exception,_                    "return y.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "boolean y = false_\n" +_                     "if (!y) {\n" +_                     "  y = x.isEmpty()_\n" +_                     "}\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(53, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n}\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))__        }_    };test,that,the,script,stack,looks,good,by,implication,this,tests,that,we,build,proper,line,numbers,in,stack,trace,these,line,numbers,are,really,1,based,character,numbers;public,void,test,script,stack,for,string,type,new,string,string,def,script,exception,exception,expect,throws,script,exception,class,exec,type,x,null,boolean,y,x,is,empty,n,return,y,assert,script,element,column,30,exception,assert,script,stack,exception,y,x,is,empty,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,return,x,is,empty,assert,script,element,column,25,exception,assert,script,stack,exception,return,x,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,type,y,x,n,return,y,is,empty,assert,script,element,column,39,exception,assert,script,stack,exception,return,y,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,boolean,y,false,n,if,y,n,y,x,is,empty,n,n,return,y,assert,script,element,column,53,exception,assert,script,stack,exception,y,x,is,empty,n,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class
WhenThingsGoWrongTests -> public void testScriptStack();1538424609;Test that the scriptStack looks good. By implication this tests that we build proper "line numbers" in stack trace. These line_numbers are really 1 based character numbers.;public void testScriptStack() {_        for (String type : new String[] {"String", "def   "}) {_            _            ScriptException exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_ boolean y = x.isEmpty()_\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(30, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "return x.isEmpty()_")__            })__            _            assertScriptElementColumn(25, exception)__            assertScriptStack(exception,_                    "return x.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     type + " y = x_\n" +_                     "return y.isEmpty()_")__            })__            _            assertScriptElementColumn(39, exception)__            assertScriptStack(exception,_                    "return y.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "boolean y = false_\n" +_                     "if (!y) {\n" +_                     "  y = x.isEmpty()_\n" +_                     "}\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(53, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n}\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))__        }_    };test,that,the,script,stack,looks,good,by,implication,this,tests,that,we,build,proper,line,numbers,in,stack,trace,these,line,numbers,are,really,1,based,character,numbers;public,void,test,script,stack,for,string,type,new,string,string,def,script,exception,exception,expect,throws,script,exception,class,exec,type,x,null,boolean,y,x,is,empty,n,return,y,assert,script,element,column,30,exception,assert,script,stack,exception,y,x,is,empty,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,return,x,is,empty,assert,script,element,column,25,exception,assert,script,stack,exception,return,x,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,type,y,x,n,return,y,is,empty,assert,script,element,column,39,exception,assert,script,stack,exception,return,y,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,boolean,y,false,n,if,y,n,y,x,is,empty,n,n,return,y,assert,script,element,column,53,exception,assert,script,stack,exception,y,x,is,empty,n,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class
WhenThingsGoWrongTests -> public void testScriptStack();1541200074;Test that the scriptStack looks good. By implication this tests that we build proper "line numbers" in stack trace. These line_numbers are really 1 based character numbers.;public void testScriptStack() {_        for (String type : new String[] {"String", "def   "}) {_            _            ScriptException exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_ boolean y = x.isEmpty()_\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(30, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "return x.isEmpty()_")__            })__            _            assertScriptElementColumn(25, exception)__            assertScriptStack(exception,_                    "return x.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     type + " y = x_\n" +_                     "return y.isEmpty()_")__            })__            _            assertScriptElementColumn(39, exception)__            assertScriptStack(exception,_                    "return y.isEmpty()_",_                    "        ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))___            _            exception = expectThrows(ScriptException.class, () -> {_                exec(type + " x = null_\n" +_                     "boolean y = false_\n" +_                     "if (!y) {\n" +_                     "  y = x.isEmpty()_\n" +_                     "}\n" +_                     "return y_")__            })__            _            assertScriptElementColumn(53, exception)__            assertScriptStack(exception,_                    "y = x.isEmpty()_\n}\n",_                    "     ^---- HERE")__            assertThat(exception.getCause(), instanceOf(NullPointerException.class))__        }_    };test,that,the,script,stack,looks,good,by,implication,this,tests,that,we,build,proper,line,numbers,in,stack,trace,these,line,numbers,are,really,1,based,character,numbers;public,void,test,script,stack,for,string,type,new,string,string,def,script,exception,exception,expect,throws,script,exception,class,exec,type,x,null,boolean,y,x,is,empty,n,return,y,assert,script,element,column,30,exception,assert,script,stack,exception,y,x,is,empty,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,return,x,is,empty,assert,script,element,column,25,exception,assert,script,stack,exception,return,x,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,type,y,x,n,return,y,is,empty,assert,script,element,column,39,exception,assert,script,stack,exception,return,y,is,empty,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class,exception,expect,throws,script,exception,class,exec,type,x,null,n,boolean,y,false,n,if,y,n,y,x,is,empty,n,n,return,y,assert,script,element,column,53,exception,assert,script,stack,exception,y,x,is,empty,n,n,here,assert,that,exception,get,cause,instance,of,null,pointer,exception,class
WhenThingsGoWrongTests -> public void testRCurlyNotDelim();1524684173;Makes sure that we present a useful error message with a misplaced right-curly. This is important because we do some funky things in_the parser with right-curly brackets to allow statements to be delimited by them at the end of blocks.;public void testRCurlyNotDelim() {_        IllegalArgumentException e = expectScriptThrows(IllegalArgumentException.class, () -> {_            _            exec("def i = 1} return 1", emptyMap(), emptyMap(), null, false)__        })__        assertEquals("invalid sequence of tokens near ['}'].", e.getMessage())__    };makes,sure,that,we,present,a,useful,error,message,with,a,misplaced,right,curly,this,is,important,because,we,do,some,funky,things,in,the,parser,with,right,curly,brackets,to,allow,statements,to,be,delimited,by,them,at,the,end,of,blocks;public,void,test,rcurly,not,delim,illegal,argument,exception,e,expect,script,throws,illegal,argument,exception,class,exec,def,i,1,return,1,empty,map,empty,map,null,false,assert,equals,invalid,sequence,of,tokens,near,e,get,message
WhenThingsGoWrongTests -> public void testRCurlyNotDelim();1532598597;Makes sure that we present a useful error message with a misplaced right-curly. This is important because we do some funky things in_the parser with right-curly brackets to allow statements to be delimited by them at the end of blocks.;public void testRCurlyNotDelim() {_        IllegalArgumentException e = expectScriptThrows(IllegalArgumentException.class, () -> {_            _            exec("def i = 1} return 1", emptyMap(), emptyMap(), null, false)__        })__        assertEquals("invalid sequence of tokens near ['}'].", e.getMessage())__    };makes,sure,that,we,present,a,useful,error,message,with,a,misplaced,right,curly,this,is,important,because,we,do,some,funky,things,in,the,parser,with,right,curly,brackets,to,allow,statements,to,be,delimited,by,them,at,the,end,of,blocks;public,void,test,rcurly,not,delim,illegal,argument,exception,e,expect,script,throws,illegal,argument,exception,class,exec,def,i,1,return,1,empty,map,empty,map,null,false,assert,equals,invalid,sequence,of,tokens,near,e,get,message
WhenThingsGoWrongTests -> public void testRCurlyNotDelim();1533815246;Makes sure that we present a useful error message with a misplaced right-curly. This is important because we do some funky things in_the parser with right-curly brackets to allow statements to be delimited by them at the end of blocks.;public void testRCurlyNotDelim() {_        IllegalArgumentException e = expectScriptThrows(IllegalArgumentException.class, () -> {_            _            exec("def i = 1} return 1", emptyMap(), emptyMap(), null, false)__        })__        assertEquals("invalid sequence of tokens near ['}'].", e.getMessage())__    };makes,sure,that,we,present,a,useful,error,message,with,a,misplaced,right,curly,this,is,important,because,we,do,some,funky,things,in,the,parser,with,right,curly,brackets,to,allow,statements,to,be,delimited,by,them,at,the,end,of,blocks;public,void,test,rcurly,not,delim,illegal,argument,exception,e,expect,script,throws,illegal,argument,exception,class,exec,def,i,1,return,1,empty,map,empty,map,null,false,assert,equals,invalid,sequence,of,tokens,near,e,get,message
WhenThingsGoWrongTests -> public void testRCurlyNotDelim();1535552903;Makes sure that we present a useful error message with a misplaced right-curly. This is important because we do some funky things in_the parser with right-curly brackets to allow statements to be delimited by them at the end of blocks.;public void testRCurlyNotDelim() {_        IllegalArgumentException e = expectScriptThrows(IllegalArgumentException.class, () -> {_            _            exec("def i = 1} return 1", emptyMap(), emptyMap(), null, false)__        })__        assertEquals("unexpected token ['}'] was expecting one of [{<EOF>, '_'}].", e.getMessage())__    };makes,sure,that,we,present,a,useful,error,message,with,a,misplaced,right,curly,this,is,important,because,we,do,some,funky,things,in,the,parser,with,right,curly,brackets,to,allow,statements,to,be,delimited,by,them,at,the,end,of,blocks;public,void,test,rcurly,not,delim,illegal,argument,exception,e,expect,script,throws,illegal,argument,exception,class,exec,def,i,1,return,1,empty,map,empty,map,null,false,assert,equals,unexpected,token,was,expecting,one,of,eof,e,get,message
WhenThingsGoWrongTests -> public void testRCurlyNotDelim();1538424609;Makes sure that we present a useful error message with a misplaced right-curly. This is important because we do some funky things in_the parser with right-curly brackets to allow statements to be delimited by them at the end of blocks.;public void testRCurlyNotDelim() {_        IllegalArgumentException e = expectScriptThrows(IllegalArgumentException.class, () -> {_            _            exec("def i = 1} return 1", emptyMap(), emptyMap(), false)__        })__        assertEquals("unexpected token ['}'] was expecting one of [{<EOF>, '_'}].", e.getMessage())__    };makes,sure,that,we,present,a,useful,error,message,with,a,misplaced,right,curly,this,is,important,because,we,do,some,funky,things,in,the,parser,with,right,curly,brackets,to,allow,statements,to,be,delimited,by,them,at,the,end,of,blocks;public,void,test,rcurly,not,delim,illegal,argument,exception,e,expect,script,throws,illegal,argument,exception,class,exec,def,i,1,return,1,empty,map,empty,map,false,assert,equals,unexpected,token,was,expecting,one,of,eof,e,get,message
WhenThingsGoWrongTests -> public void testRCurlyNotDelim();1541200074;Makes sure that we present a useful error message with a misplaced right-curly. This is important because we do some funky things in_the parser with right-curly brackets to allow statements to be delimited by them at the end of blocks.;public void testRCurlyNotDelim() {_        IllegalArgumentException e = expectScriptThrows(IllegalArgumentException.class, () -> {_            _            exec("def i = 1} return 1", emptyMap(), emptyMap(), false)__        })__        assertEquals("unexpected token ['}'] was expecting one of [{<EOF>, '_'}].", e.getMessage())__    };makes,sure,that,we,present,a,useful,error,message,with,a,misplaced,right,curly,this,is,important,because,we,do,some,funky,things,in,the,parser,with,right,curly,brackets,to,allow,statements,to,be,delimited,by,them,at,the,end,of,blocks;public,void,test,rcurly,not,delim,illegal,argument,exception,e,expect,script,throws,illegal,argument,exception,class,exec,def,i,1,return,1,empty,map,empty,map,false,assert,equals,unexpected,token,was,expecting,one,of,eof,e,get,message
