# id;timestamp;commentText;codeText;commentWords;codeWords
LambdaTests -> public void testVoidReturnDef();1524684173;interface ignores return value;public void testVoidReturnDef() {_        assertEquals(2, exec("def list = new ArrayList()_ "_                           + "list.add(2)_ "_                           + "List list2 = new ArrayList()_ "_                           + "list.forEach(x -> list2.add(x))_"_                           + "return list[0]"))__    };interface,ignores,return,value;public,void,test,void,return,def,assert,equals,2,exec,def,list,new,array,list,list,add,2,list,list2,new,array,list,list,for,each,x,list2,add,x,return,list,0
LambdaTests -> public void testVoidReturnDef();1533738061;interface ignores return value;public void testVoidReturnDef() {_        assertEquals(2, exec("def list = new ArrayList()_ "_                           + "list.add(2)_ "_                           + "List list2 = new ArrayList()_ "_                           + "list.forEach(x -> list2.add(x))_"_                           + "return list[0]"))__    };interface,ignores,return,value;public,void,test,void,return,def,assert,equals,2,exec,def,list,new,array,list,list,add,2,list,list2,new,array,list,list,for,each,x,list2,add,x,return,list,0
LambdaTests -> public void testVoidReturnDef();1549062659;interface ignores return value;public void testVoidReturnDef() {_        assertEquals(2, exec("def list = new ArrayList()_ "_                           + "list.add(2)_ "_                           + "List list2 = new ArrayList()_ "_                           + "list.forEach(x -> list2.add(x))_"_                           + "return list[0]"))__    };interface,ignores,return,value;public,void,test,void,return,def,assert,equals,2,exec,def,list,new,array,list,list,add,2,list,list2,new,array,list,list,for,each,x,list2,add,x,return,list,0
LambdaTests -> public void testNoParamMasking();1524684173;Lambda parameters shouldn't be able to mask a variable already in scope;public void testNoParamMasking() {_        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {_            exec("int x = 0_ List l = new ArrayList()_ l.add(1)_ l.add(1)_ "_                    + "return l.stream().mapToInt(x -> { x += 1_ return x }).sum()_")__        })__        assertTrue(expected.getMessage().contains("already defined"))__    };lambda,parameters,shouldn,t,be,able,to,mask,a,variable,already,in,scope;public,void,test,no,param,masking,illegal,argument,exception,expected,expect,script,throws,illegal,argument,exception,class,exec,int,x,0,list,l,new,array,list,l,add,1,l,add,1,return,l,stream,map,to,int,x,x,1,return,x,sum,assert,true,expected,get,message,contains,already,defined
LambdaTests -> public void testNoParamMasking();1533738061;Lambda parameters shouldn't be able to mask a variable already in scope;public void testNoParamMasking() {_        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {_            exec("int x = 0_ List l = new ArrayList()_ l.add(1)_ l.add(1)_ "_                    + "return l.stream().mapToInt(x -> { x += 1_ return x }).sum()_")__        })__        assertTrue(expected.getMessage().contains("already defined"))__    };lambda,parameters,shouldn,t,be,able,to,mask,a,variable,already,in,scope;public,void,test,no,param,masking,illegal,argument,exception,expected,expect,script,throws,illegal,argument,exception,class,exec,int,x,0,list,l,new,array,list,l,add,1,l,add,1,return,l,stream,map,to,int,x,x,1,return,x,sum,assert,true,expected,get,message,contains,already,defined
LambdaTests -> public void testNoParamMasking();1549062659;Lambda parameters shouldn't be able to mask a variable already in scope;public void testNoParamMasking() {_        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {_            exec("int x = 0_ List l = new ArrayList()_ l.add(1)_ l.add(1)_ "_                    + "return l.stream().mapToInt(x -> { x += 1_ return x }).sum()_")__        })__        assertTrue(expected.getMessage().contains("already defined"))__    };lambda,parameters,shouldn,t,be,able,to,mask,a,variable,already,in,scope;public,void,test,no,param,masking,illegal,argument,exception,expected,expect,script,throws,illegal,argument,exception,class,exec,int,x,0,list,l,new,array,list,l,add,1,l,add,1,return,l,stream,map,to,int,x,x,1,return,x,sum,assert,true,expected,get,message,contains,already,defined
LambdaTests -> public void testVoidReturn();1524684173;interface ignores return value;public void testVoidReturn() {_        assertEquals(2, exec("List list = new ArrayList()_ "_                           + "list.add(2)_ "_                           + "List list2 = new ArrayList()_ "_                           + "list.forEach(x -> list2.add(x))_"_                           + "return list[0]"))__    };interface,ignores,return,value;public,void,test,void,return,assert,equals,2,exec,list,list,new,array,list,list,add,2,list,list2,new,array,list,list,for,each,x,list2,add,x,return,list,0
LambdaTests -> public void testVoidReturn();1533738061;interface ignores return value;public void testVoidReturn() {_        assertEquals(2, exec("List list = new ArrayList()_ "_                           + "list.add(2)_ "_                           + "List list2 = new ArrayList()_ "_                           + "list.forEach(x -> list2.add(x))_"_                           + "return list[0]"))__    };interface,ignores,return,value;public,void,test,void,return,assert,equals,2,exec,list,list,new,array,list,list,add,2,list,list2,new,array,list,list,for,each,x,list2,add,x,return,list,0
LambdaTests -> public void testVoidReturn();1549062659;interface ignores return value;public void testVoidReturn() {_        assertEquals(2, exec("List list = new ArrayList()_ "_                           + "list.add(2)_ "_                           + "List list2 = new ArrayList()_ "_                           + "list.forEach(x -> list2.add(x))_"_                           + "return list[0]"))__    };interface,ignores,return,value;public,void,test,void,return,assert,equals,2,exec,list,list,new,array,list,list,add,2,list,list2,new,array,list,list,for,each,x,list2,add,x,return,list,0
