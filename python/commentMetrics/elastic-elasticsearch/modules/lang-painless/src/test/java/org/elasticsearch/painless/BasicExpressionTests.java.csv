# id;timestamp;commentText;codeText;commentWords;codeWords
BasicExpressionTests -> public void testDeclareVariable();1524684173;declaring variables for primitive types;public void testDeclareVariable() {_        assertEquals(5, exec("int i = 5_ return i_"))__        assertEquals(7L, exec("long l = 7_ return l_"))__        assertEquals(7.0, exec("double d = 7_ return d_"))__        assertEquals(32.0F, exec("float f = 32F_ return f_"))__        assertEquals((byte)255, exec("byte b = (byte)255_ return b_"))__        assertEquals((short)5, exec("short s = (short)5_ return s_"))__        assertEquals("string", exec("String s = \"string\"_ return s_"))__        assertEquals(true, exec("boolean v = true_ return v_"))__        assertEquals(false, exec("boolean v = false_ return v_"))__    };declaring,variables,for,primitive,types;public,void,test,declare,variable,assert,equals,5,exec,int,i,5,return,i,assert,equals,7l,exec,long,l,7,return,l,assert,equals,7,0,exec,double,d,7,return,d,assert,equals,32,0f,exec,float,f,32f,return,f,assert,equals,byte,255,exec,byte,b,byte,255,return,b,assert,equals,short,5,exec,short,s,short,5,return,s,assert,equals,string,exec,string,s,string,return,s,assert,equals,true,exec,boolean,v,true,return,v,assert,equals,false,exec,boolean,v,false,return,v
BasicExpressionTests -> public void testDeclareVariable();1529076503;declaring variables for primitive types;public void testDeclareVariable() {_        assertEquals(5, exec("int i = 5_ return i_"))__        assertEquals(7L, exec("long l = 7_ return l_"))__        assertEquals(7.0, exec("double d = 7_ return d_"))__        assertEquals(32.0F, exec("float f = 32F_ return f_"))__        assertEquals((byte)255, exec("byte b = (byte)255_ return b_"))__        assertEquals((short)5, exec("short s = (short)5_ return s_"))__        assertEquals("string", exec("String s = \"string\"_ return s_"))__        assertEquals(true, exec("boolean v = true_ return v_"))__        assertEquals(false, exec("boolean v = false_ return v_"))__    };declaring,variables,for,primitive,types;public,void,test,declare,variable,assert,equals,5,exec,int,i,5,return,i,assert,equals,7l,exec,long,l,7,return,l,assert,equals,7,0,exec,double,d,7,return,d,assert,equals,32,0f,exec,float,f,32f,return,f,assert,equals,byte,255,exec,byte,b,byte,255,return,b,assert,equals,short,5,exec,short,s,short,5,return,s,assert,equals,string,exec,string,s,string,return,s,assert,equals,true,exec,boolean,v,true,return,v,assert,equals,false,exec,boolean,v,false,return,v
BasicExpressionTests -> public void testDeclareVariable();1544544188;declaring variables for primitive types;public void testDeclareVariable() {_        assertEquals(5, exec("int i = 5_ return i_"))__        assertEquals(7L, exec("long l = 7_ return l_"))__        assertEquals(7.0, exec("double d = 7_ return d_"))__        assertEquals(32.0F, exec("float f = 32F_ return f_"))__        assertEquals((byte)255, exec("byte b = (byte)255_ return b_"))__        assertEquals((short)5, exec("short s = (short)5_ return s_"))__        assertEquals("string", exec("String s = \"string\"_ return s_"))__        assertEquals(true, exec("boolean v = true_ return v_"))__        assertEquals(false, exec("boolean v = false_ return v_"))__    };declaring,variables,for,primitive,types;public,void,test,declare,variable,assert,equals,5,exec,int,i,5,return,i,assert,equals,7l,exec,long,l,7,return,l,assert,equals,7,0,exec,double,d,7,return,d,assert,equals,32,0f,exec,float,f,32f,return,f,assert,equals,byte,255,exec,byte,b,byte,255,return,b,assert,equals,short,5,exec,short,s,short,5,return,s,assert,equals,string,exec,string,s,string,return,s,assert,equals,true,exec,boolean,v,true,return,v,assert,equals,false,exec,boolean,v,false,return,v
BasicExpressionTests -> public void testReturnConstant();1524684173;simple tests returning a constant value;public void testReturnConstant() {_        assertEquals(5, exec("return 5"))__        assertEquals(6L, exec("return 6l"))__        assertEquals(7L, exec("return 7L"))__        assertEquals(7.0d, exec("return 7.0"))__        assertEquals(18.0d, exec("return 18d"))__        assertEquals(19.0d, exec("return 19.0d"))__        assertEquals(20.0d, exec("return 20D"))__        assertEquals(21.0d, exec("return 21.0D"))__        assertEquals(32.0F, exec("return 32.0f"))__        assertEquals(33.0F, exec("return 33f"))__        assertEquals(34.0F, exec("return 34.0F"))__        assertEquals(35.0F, exec("return 35F"))__        assertEquals((byte)255, exec("return (byte)255"))__        assertEquals((short)5, exec("return (short)5"))__        assertEquals("string", exec("return \"string\""))__        assertEquals("string", exec("return 'string'"))__        assertEquals(true, exec("return true"))__        assertEquals(false, exec("return false"))__        assertNull(exec("return null"))__    };simple,tests,returning,a,constant,value;public,void,test,return,constant,assert,equals,5,exec,return,5,assert,equals,6l,exec,return,6l,assert,equals,7l,exec,return,7l,assert,equals,7,0d,exec,return,7,0,assert,equals,18,0d,exec,return,18d,assert,equals,19,0d,exec,return,19,0d,assert,equals,20,0d,exec,return,20d,assert,equals,21,0d,exec,return,21,0d,assert,equals,32,0f,exec,return,32,0f,assert,equals,33,0f,exec,return,33f,assert,equals,34,0f,exec,return,34,0f,assert,equals,35,0f,exec,return,35f,assert,equals,byte,255,exec,return,byte,255,assert,equals,short,5,exec,return,short,5,assert,equals,string,exec,return,string,assert,equals,string,exec,return,string,assert,equals,true,exec,return,true,assert,equals,false,exec,return,false,assert,null,exec,return,null
BasicExpressionTests -> public void testReturnConstant();1529076503;simple tests returning a constant value;public void testReturnConstant() {_        assertEquals(5, exec("return 5"))__        assertEquals(6L, exec("return 6l"))__        assertEquals(7L, exec("return 7L"))__        assertEquals(7.0d, exec("return 7.0"))__        assertEquals(18.0d, exec("return 18d"))__        assertEquals(19.0d, exec("return 19.0d"))__        assertEquals(20.0d, exec("return 20D"))__        assertEquals(21.0d, exec("return 21.0D"))__        assertEquals(32.0F, exec("return 32.0f"))__        assertEquals(33.0F, exec("return 33f"))__        assertEquals(34.0F, exec("return 34.0F"))__        assertEquals(35.0F, exec("return 35F"))__        assertEquals((byte)255, exec("return (byte)255"))__        assertEquals((short)5, exec("return (short)5"))__        assertEquals("string", exec("return \"string\""))__        assertEquals("string", exec("return 'string'"))__        assertEquals(true, exec("return true"))__        assertEquals(false, exec("return false"))__        assertNull(exec("return null"))__    };simple,tests,returning,a,constant,value;public,void,test,return,constant,assert,equals,5,exec,return,5,assert,equals,6l,exec,return,6l,assert,equals,7l,exec,return,7l,assert,equals,7,0d,exec,return,7,0,assert,equals,18,0d,exec,return,18d,assert,equals,19,0d,exec,return,19,0d,assert,equals,20,0d,exec,return,20d,assert,equals,21,0d,exec,return,21,0d,assert,equals,32,0f,exec,return,32,0f,assert,equals,33,0f,exec,return,33f,assert,equals,34,0f,exec,return,34,0f,assert,equals,35,0f,exec,return,35f,assert,equals,byte,255,exec,return,byte,255,assert,equals,short,5,exec,return,short,5,assert,equals,string,exec,return,string,assert,equals,string,exec,return,string,assert,equals,true,exec,return,true,assert,equals,false,exec,return,false,assert,null,exec,return,null
BasicExpressionTests -> public void testReturnConstant();1544544188;simple tests returning a constant value;public void testReturnConstant() {_        assertEquals(5, exec("return 5"))__        assertEquals(6L, exec("return 6l"))__        assertEquals(7L, exec("return 7L"))__        assertEquals(7.0d, exec("return 7.0"))__        assertEquals(18.0d, exec("return 18d"))__        assertEquals(19.0d, exec("return 19.0d"))__        assertEquals(20.0d, exec("return 20D"))__        assertEquals(21.0d, exec("return 21.0D"))__        assertEquals(32.0F, exec("return 32.0f"))__        assertEquals(33.0F, exec("return 33f"))__        assertEquals(34.0F, exec("return 34.0F"))__        assertEquals(35.0F, exec("return 35F"))__        assertEquals((byte)255, exec("return (byte)255"))__        assertEquals((short)5, exec("return (short)5"))__        assertEquals("string", exec("return \"string\""))__        assertEquals("string", exec("return 'string'"))__        assertEquals(true, exec("return true"))__        assertEquals(false, exec("return false"))__        assertNull(exec("return null"))__    };simple,tests,returning,a,constant,value;public,void,test,return,constant,assert,equals,5,exec,return,5,assert,equals,6l,exec,return,6l,assert,equals,7l,exec,return,7l,assert,equals,7,0d,exec,return,7,0,assert,equals,18,0d,exec,return,18d,assert,equals,19,0d,exec,return,19,0d,assert,equals,20,0d,exec,return,20d,assert,equals,21,0d,exec,return,21,0d,assert,equals,32,0f,exec,return,32,0f,assert,equals,33,0f,exec,return,33f,assert,equals,34,0f,exec,return,34,0f,assert,equals,35,0f,exec,return,35f,assert,equals,byte,255,exec,return,byte,255,assert,equals,short,5,exec,return,short,5,assert,equals,string,exec,return,string,assert,equals,string,exec,return,string,assert,equals,true,exec,return,true,assert,equals,false,exec,return,false,assert,null,exec,return,null
BasicExpressionTests -> public void testBoxing();1524684173;Test boxed def objects in various places;public void testBoxing() {_        _        assertEquals(4, exec("return params.get(\"x\")_", Collections.singletonMap("x", 4), true))__        _        assertEquals(4, exec("int y = params.get(\"x\")_ return y_", Collections.singletonMap("x", 4), true))__        _        assertEquals(true, exec("return 5 > params.get(\"x\")_", Collections.singletonMap("x", 4), true))__    };test,boxed,def,objects,in,various,places;public,void,test,boxing,assert,equals,4,exec,return,params,get,x,collections,singleton,map,x,4,true,assert,equals,4,exec,int,y,params,get,x,return,y,collections,singleton,map,x,4,true,assert,equals,true,exec,return,5,params,get,x,collections,singleton,map,x,4,true
BasicExpressionTests -> public void testBoxing();1529076503;Test boxed def objects in various places;public void testBoxing() {_        _        assertEquals(4, exec("return params.get(\"x\")_", Collections.singletonMap("x", 4), true))__        _        assertEquals(4, exec("int y = params.get(\"x\")_ return y_", Collections.singletonMap("x", 4), true))__        _        assertEquals(true, exec("return 5 > params.get(\"x\")_", Collections.singletonMap("x", 4), true))__    };test,boxed,def,objects,in,various,places;public,void,test,boxing,assert,equals,4,exec,return,params,get,x,collections,singleton,map,x,4,true,assert,equals,4,exec,int,y,params,get,x,return,y,collections,singleton,map,x,4,true,assert,equals,true,exec,return,5,params,get,x,collections,singleton,map,x,4,true
BasicExpressionTests -> public void testBoxing();1544544188;Test boxed def objects in various places;public void testBoxing() {_        _        assertEquals(4, exec("return params.get(\"x\")_", Collections.singletonMap("x", 4), true))__        _        assertEquals(4, exec("int y = params.get(\"x\")_ return y_", Collections.singletonMap("x", 4), true))__        _        assertEquals(true, exec("return 5 > params.get(\"x\")_", Collections.singletonMap("x", 4), true))__    };test,boxed,def,objects,in,various,places;public,void,test,boxing,assert,equals,4,exec,return,params,get,x,collections,singleton,map,x,4,true,assert,equals,4,exec,int,y,params,get,x,return,y,collections,singleton,map,x,4,true,assert,equals,true,exec,return,5,params,get,x,collections,singleton,map,x,4,true
