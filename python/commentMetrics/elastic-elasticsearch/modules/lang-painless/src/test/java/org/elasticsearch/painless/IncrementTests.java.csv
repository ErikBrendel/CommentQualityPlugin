commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;/**  * incrementing byte values  */ ;/**  * incrementing byte values  */ public void testIncrementByte() {     assertEquals((byte) 0, exec("byte x = (byte)0. return x++.")).     assertEquals((byte) 0, exec("byte x = (byte)0. return x--.")).     assertEquals((byte) 1, exec("byte x = (byte)0. return ++x.")).     assertEquals((byte) -1, exec("byte x = (byte)0. return --x.")). }
true;public;0;5;/**  * incrementing char values  */ ;/**  * incrementing char values  */ public void testIncrementChar() {     assertEquals((char) 0, exec("char x = (char)0. return x++.")).     assertEquals((char) 1, exec("char x = (char)1. return x--.")).     assertEquals((char) 1, exec("char x = (char)0. return ++x.")). }
true;public;0;6;/**  * incrementing short values  */ ;/**  * incrementing short values  */ public void testIncrementShort() {     assertEquals((short) 0, exec("short x = (short)0. return x++.")).     assertEquals((short) 0, exec("short x = (short)0. return x--.")).     assertEquals((short) 1, exec("short x = (short)0. return ++x.")).     assertEquals((short) -1, exec("short x = (short)0. return --x.")). }
true;public;0;6;/**  * incrementing integer values  */ ;/**  * incrementing integer values  */ public void testIncrementInt() {     assertEquals(0, exec("int x = 0. return x++.")).     assertEquals(0, exec("int x = 0. return x--.")).     assertEquals(1, exec("int x = 0. return ++x.")).     assertEquals(-1, exec("int x = 0. return --x.")). }
true;public;0;6;/**  * incrementing long values  */ ;/**  * incrementing long values  */ public void testIncrementLong() {     assertEquals(0L, exec("long x = 0. return x++.")).     assertEquals(0L, exec("long x = 0. return x--.")).     assertEquals(1L, exec("long x = 0. return ++x.")).     assertEquals(-1L, exec("long x = 0. return --x.")). }
true;public;0;6;/**  * incrementing float values  */ ;/**  * incrementing float values  */ public void testIncrementFloat() {     assertEquals(0F, exec("float x = 0F. return x++.")).     assertEquals(0F, exec("float x = 0F. return x--.")).     assertEquals(1F, exec("float x = 0F. return ++x.")).     assertEquals(-1F, exec("float x = 0F. return --x.")). }
true;public;0;6;/**  * incrementing double values  */ ;/**  * incrementing double values  */ public void testIncrementDouble() {     assertEquals(0D, exec("double x = 0.0. return x++.")).     assertEquals(0D, exec("double x = 0.0. return x--.")).     assertEquals(1D, exec("double x = 0.0. return ++x.")).     assertEquals(-1D, exec("double x = 0.0. return --x.")). }
true;public;0;29;/**  * incrementing def values  */ ;/**  * incrementing def values  */ public void testIncrementDef() {     assertEquals((byte) 0, exec("def x = (byte)0. return x++.")).     assertEquals((byte) 0, exec("def x = (byte)0. return x--.")).     assertEquals((byte) 1, exec("def x = (byte)0. return ++x.")).     assertEquals((byte) -1, exec("def x = (byte)0. return --x.")).     assertEquals((char) 0, exec("def x = (char)0. return x++.")).     assertEquals((char) 1, exec("def x = (char)1. return x--.")).     assertEquals((char) 1, exec("def x = (char)0. return ++x.")).     assertEquals((short) 0, exec("def x = (short)0. return x++.")).     assertEquals((short) 0, exec("def x = (short)0. return x--.")).     assertEquals((short) 1, exec("def x = (short)0. return ++x.")).     assertEquals((short) -1, exec("def x = (short)0. return --x.")).     assertEquals(0, exec("def x = 0. return x++.")).     assertEquals(0, exec("def x = 0. return x--.")).     assertEquals(1, exec("def x = 0. return ++x.")).     assertEquals(-1, exec("def x = 0. return --x.")).     assertEquals(0L, exec("def x = 0L. return x++.")).     assertEquals(0L, exec("def x = 0L. return x--.")).     assertEquals(1L, exec("def x = 0L. return ++x.")).     assertEquals(-1L, exec("def x = 0L. return --x.")).     assertEquals(0F, exec("def x = 0F. return x++.")).     assertEquals(0F, exec("def x = 0F. return x--.")).     assertEquals(1F, exec("def x = 0F. return ++x.")).     assertEquals(-1F, exec("def x = 0F. return --x.")).     assertEquals(0D, exec("def x = 0.0. return x++.")).     assertEquals(0D, exec("def x = 0.0. return x--.")).     assertEquals(1D, exec("def x = 0.0. return ++x.")).     assertEquals(-1D, exec("def x = 0.0. return --x.")). }
