commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {     Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>().     contexts.put(ScriptedMetricAggContexts.InitScript.CONTEXT, Whitelist.BASE_WHITELISTS).     contexts.put(ScriptedMetricAggContexts.MapScript.CONTEXT, Whitelist.BASE_WHITELISTS).     contexts.put(ScriptedMetricAggContexts.CombineScript.CONTEXT, Whitelist.BASE_WHITELISTS).     contexts.put(ScriptedMetricAggContexts.ReduceScript.CONTEXT, Whitelist.BASE_WHITELISTS).     return contexts. }
false;public;0;15;;public void testInitBasic() {     ScriptedMetricAggContexts.InitScript.Factory factory = scriptEngine.compile("test", "state.testField = params.initialVal", ScriptedMetricAggContexts.InitScript.CONTEXT, Collections.emptyMap()).     Map<String, Object> params = new HashMap<>().     Map<String, Object> state = new HashMap<>().     params.put("initialVal", 10).     ScriptedMetricAggContexts.InitScript script = factory.newInstance(params, state).     script.execute().     assert (state.containsKey("testField")).     assertEquals(10, state.get("testField")). }
false;public;0;2;;@Override public int docID() {     return 0. }
false;public;0;2;;@Override public float score() {     return 0.5f. }
false;public;0;24;;public void testMapBasic() throws IOException {     ScriptedMetricAggContexts.MapScript.Factory factory = scriptEngine.compile("test", "state.testField = 2*_score", ScriptedMetricAggContexts.MapScript.CONTEXT, Collections.emptyMap()).     Map<String, Object> params = new HashMap<>().     Map<String, Object> state = new HashMap<>().     Scorable scorer = new Scorable() {          @Override         public int docID() {             return 0.         }          @Override         public float score() {             return 0.5f.         }     }.     ScriptedMetricAggContexts.MapScript.LeafFactory leafFactory = factory.newFactory(params, state, null).     ScriptedMetricAggContexts.MapScript script = leafFactory.newInstance(null).     script.setScorer(scorer).     script.execute().     assert (state.containsKey("testField")).     assertEquals(1.0, state.get("testField")). }
false;public;0;25;;public void testMapSourceAccess() throws IOException {     ScriptedMetricAggContexts.MapScript.Factory factory = scriptEngine.compile("test", "state.testField = params._source.three", ScriptedMetricAggContexts.MapScript.CONTEXT, Collections.emptyMap()).     Map<String, Object> params = new HashMap<>().     Map<String, Object> state = new HashMap<>().     MemoryIndex index = new MemoryIndex().     // we don't need a real index, just need to construct a LeafReaderContext which cannot be mocked     LeafReaderContext leafReaderContext = index.createSearcher().getIndexReader().leaves().get(0).     SearchLookup lookup = mock(SearchLookup.class).     LeafSearchLookup leafLookup = mock(LeafSearchLookup.class).     when(lookup.getLeafSearchLookup(leafReaderContext)).thenReturn(leafLookup).     SourceLookup sourceLookup = mock(SourceLookup.class).     when(leafLookup.asMap()).thenReturn(Collections.singletonMap("_source", sourceLookup)).     when(sourceLookup.get("three")).thenReturn(3).     ScriptedMetricAggContexts.MapScript.LeafFactory leafFactory = factory.newFactory(params, state, lookup).     ScriptedMetricAggContexts.MapScript script = leafFactory.newInstance(leafReaderContext).     script.execute().     assert (state.containsKey("testField")).     assertEquals(3, state.get("testField")). }
false;public;0;18;;public void testCombineBasic() {     ScriptedMetricAggContexts.CombineScript.Factory factory = scriptEngine.compile("test", "state.testField = params.initialVal. return state.testField + params.inc", ScriptedMetricAggContexts.CombineScript.CONTEXT, Collections.emptyMap()).     Map<String, Object> params = new HashMap<>().     Map<String, Object> state = new HashMap<>().     params.put("initialVal", 10).     params.put("inc", 2).     ScriptedMetricAggContexts.CombineScript script = factory.newInstance(params, state).     Object res = script.execute().     assert (state.containsKey("testField")).     assertEquals(10, state.get("testField")).     assertEquals(12, res). }
false;public;0;18;;public void testReduceBasic() {     ScriptedMetricAggContexts.ReduceScript.Factory factory = scriptEngine.compile("test", "states[0].testField + states[1].testField", ScriptedMetricAggContexts.ReduceScript.CONTEXT, Collections.emptyMap()).     Map<String, Object> params = new HashMap<>().     List<Object> states = new ArrayList<>().     Map<String, Object> state1 = new HashMap<>(), state2 = new HashMap<>().     state1.put("testField", 1).     state2.put("testField", 2).     states.add(state1).     states.add(state2).     ScriptedMetricAggContexts.ReduceScript script = factory.newInstance(params, states).     Object res = script.execute().     assertEquals(3, res). }
