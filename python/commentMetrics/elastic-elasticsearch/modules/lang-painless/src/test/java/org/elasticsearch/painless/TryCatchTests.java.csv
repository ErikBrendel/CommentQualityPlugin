commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;/**  * throws an exception  */ ;/**  * throws an exception  */ public void testThrow() {     RuntimeException exception = expectScriptThrows(RuntimeException.class, () -> {         exec("throw new RuntimeException('test')").     }).     assertEquals("test", exception.getMessage()). }
true;public;0;5;/**  * catches the exact exception  */ ;/**  * catches the exact exception  */ public void testCatch() {     assertEquals(1, exec("try { if (params.param == 'true') throw new RuntimeException('test'). } " + "catch (RuntimeException e) { return 1. } return 2.", Collections.singletonMap("param", "true"), true)). }
true;public;0;5;/**  * catches superclass of the exception  */ ;/**  * catches superclass of the exception  */ public void testCatchSuperclass() {     assertEquals(1, exec("try { if (params.param == 'true') throw new RuntimeException('test'). } " + "catch (Exception e) { return 1. } return 2.", Collections.singletonMap("param", "true"), true)). }
true;public;0;8;/**  * tries to catch a different type of exception  */ ;/**  * tries to catch a different type of exception  */ public void testNoCatch() {     RuntimeException exception = expectScriptThrows(RuntimeException.class, () -> {         exec("try { if (params.param == 'true') throw new RuntimeException('test'). } " + "catch (ArithmeticException e) { return 1. } return 2.", Collections.singletonMap("param", "true"), true).     }).     assertEquals("test", exception.getMessage()). }
