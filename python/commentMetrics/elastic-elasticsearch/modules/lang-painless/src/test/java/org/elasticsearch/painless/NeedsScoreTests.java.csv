commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;public void testNeedsScores() {     IndexService index = createIndex("test", Settings.EMPTY, "type", "d", "type=double").     Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>().     contexts.put(NumberSortScript.CONTEXT, Whitelist.BASE_WHITELISTS).     PainlessScriptEngine service = new PainlessScriptEngine(Settings.EMPTY, contexts).     QueryShardContext shardContext = index.newQueryShardContext(0, null, () -> 0, null).     SearchLookup lookup = new SearchLookup(index.mapperService(), shardContext::getForField, null).     NumberSortScript.Factory factory = service.compile(null, "1.2", NumberSortScript.CONTEXT, Collections.emptyMap()).     NumberSortScript.LeafFactory ss = factory.newFactory(Collections.emptyMap(), lookup).     assertFalse(ss.needs_score()).     factory = service.compile(null, "doc['d'].value", NumberSortScript.CONTEXT, Collections.emptyMap()).     ss = factory.newFactory(Collections.emptyMap(), lookup).     assertFalse(ss.needs_score()).     factory = service.compile(null, "1/_score", NumberSortScript.CONTEXT, Collections.emptyMap()).     ss = factory.newFactory(Collections.emptyMap(), lookup).     assertTrue(ss.needs_score()).     factory = service.compile(null, "doc['d'].value * _score", NumberSortScript.CONTEXT, Collections.emptyMap()).     ss = factory.newFactory(Collections.emptyMap(), lookup).     assertTrue(ss.needs_score()). }
