# id;timestamp;commentText;codeText;commentWords;codeWords
LambdaBootstrap -> Capture -> private Capture(int count, Class<?> type);1524684173;Converts incoming parameters into the name, type, and_descriptor for the captured argument._@param count The captured argument count_@param type The class type of the captured argument;private Capture(int count, Class<?> type) {_            this.name = "arg$" + count__            this.type = Type.getType(type)__            this.desc = this.type.getDescriptor()__        };converts,incoming,parameters,into,the,name,type,and,descriptor,for,the,captured,argument,param,count,the,captured,argument,count,param,type,the,class,type,of,the,captured,argument;private,capture,int,count,class,type,this,name,arg,count,this,type,type,get,type,type,this,desc,this,type,get,descriptor
LambdaBootstrap -> Capture -> private Capture(int count, Class<?> type);1529076503;Converts incoming parameters into the name, type, and_descriptor for the captured argument._@param count The captured argument count_@param type The class type of the captured argument;private Capture(int count, Class<?> type) {_            this.name = "arg$" + count__            this.type = Type.getType(type)__            this.desc = this.type.getDescriptor()__        };converts,incoming,parameters,into,the,name,type,and,descriptor,for,the,captured,argument,param,count,the,captured,argument,count,param,type,the,class,type,of,the,captured,argument;private,capture,int,count,class,type,this,name,arg,count,this,type,type,get,type,type,this,desc,this,type,get,descriptor
LambdaBootstrap -> Capture -> private Capture(int count, Class<?> type);1533063033;Converts incoming parameters into the name, type, and_descriptor for the captured argument._@param count The captured argument count_@param type The class type of the captured argument;private Capture(int count, Class<?> type) {_            this.name = "arg$" + count__            this.type = Type.getType(type)__            this.desc = this.type.getDescriptor()__        };converts,incoming,parameters,into,the,name,type,and,descriptor,for,the,captured,argument,param,count,the,captured,argument,count,param,type,the,class,type,of,the,captured,argument;private,capture,int,count,class,type,this,name,arg,count,this,type,type,get,type,type,this,desc,this,type,get,descriptor
LambdaBootstrap -> public static CallSite lambdaBootstrap(             Lookup lookup,             String interfaceMethodName,             MethodType factoryMethodType,             MethodType interfaceMethodType,             String delegateClassName,             int delegateInvokeType,             String delegateMethodName,             MethodType delegateMethodType,             int isDelegateInterface)             throws LambdaConversionException;1529076503;Generates a lambda class for a lambda function/method reference_within a Painless script.  Variables with the prefix interface are considered_to represent values for code generated for the lambda class. Variables with_the prefix delegate are considered to represent values for code generated_within the Painless script.  The interface method delegates (calls) to the_delegate method._@param lookup Standard {@link MethodHandles#lookup}_@param interfaceMethodName Name of functional interface method that is called_@param factoryMethodType The type of method to be linked to this CallSite_ note that_captured types are based on the parameters for this method_@param interfaceMethodType The type of method representing the functional interface method_@param delegateClassName The name of the class to delegate method call to_@param delegateInvokeType The type of method call to be made_(static, virtual, interface, or constructor)_@param delegateMethodName The name of the method to be called in the Painless script class_@param delegateMethodType The type of method call in the Painless script class without_the captured types_@param isDelegateInterface If the method to be called is owned by an interface where_if the value is '1' if the delegate is an interface and '0'_otherwise_ note this is an int because the bootstrap method_cannot convert constants to boolean_@return A {@link CallSite} linked to a factory method for creating a lambda class_that implements the expected functional interface_@throws LambdaConversionException Thrown when an illegal type conversion occurs at link time;public static CallSite lambdaBootstrap(_            Lookup lookup,_            String interfaceMethodName,_            MethodType factoryMethodType,_            MethodType interfaceMethodType,_            String delegateClassName,_            int delegateInvokeType,_            String delegateMethodName,_            MethodType delegateMethodType,_            int isDelegateInterface)_            throws LambdaConversionException {_        Loader loader = (Loader)lookup.lookupClass().getClassLoader()__        String lambdaClassName = Type.getInternalName(lookup.lookupClass()) + "$$Lambda" + loader.newLambdaIdentifier()__        Type lambdaClassType = Type.getObjectType(lambdaClassName)__        Type delegateClassType = Type.getObjectType(delegateClassName.replace('.', '/'))___        validateTypes(interfaceMethodType, delegateMethodType)___        ClassWriter cw = beginLambdaClass(lambdaClassName, factoryMethodType.returnType())__        Capture[] captures = generateCaptureFields(cw, factoryMethodType)__        generateLambdaConstructor(cw, lambdaClassType, factoryMethodType, captures)___        _        if (delegateInvokeType == H_NEWINVOKESPECIAL) {_            assert CTOR_METHOD_NAME.equals(delegateMethodName)__            generateStaticCtorDelegator(cw, ACC_PRIVATE, DELEGATED_CTOR_WRAPPER_NAME, delegateClassType, delegateMethodType)__            _            delegateMethodName = DELEGATED_CTOR_WRAPPER_NAME__            delegateClassType = lambdaClassType__            delegateInvokeType = H_INVOKESTATIC__        }__        generateInterfaceMethod(cw, factoryMethodType, lambdaClassType, interfaceMethodName,_            interfaceMethodType, delegateClassType, delegateInvokeType,_            delegateMethodName, delegateMethodType, isDelegateInterface == 1, captures)___        endLambdaClass(cw)___        Class<?> lambdaClass = createLambdaClass(loader, cw, lambdaClassType)__        if (captures.length > 0) {_            return createCaptureCallSite(lookup, factoryMethodType, lambdaClass)__        } else {_            return createNoCaptureCallSite(factoryMethodType, lambdaClass)__        }_    };generates,a,lambda,class,for,a,lambda,function,method,reference,within,a,painless,script,variables,with,the,prefix,interface,are,considered,to,represent,values,for,code,generated,for,the,lambda,class,variables,with,the,prefix,delegate,are,considered,to,represent,values,for,code,generated,within,the,painless,script,the,interface,method,delegates,calls,to,the,delegate,method,param,lookup,standard,link,method,handles,lookup,param,interface,method,name,name,of,functional,interface,method,that,is,called,param,factory,method,type,the,type,of,method,to,be,linked,to,this,call,site,note,that,captured,types,are,based,on,the,parameters,for,this,method,param,interface,method,type,the,type,of,method,representing,the,functional,interface,method,param,delegate,class,name,the,name,of,the,class,to,delegate,method,call,to,param,delegate,invoke,type,the,type,of,method,call,to,be,made,static,virtual,interface,or,constructor,param,delegate,method,name,the,name,of,the,method,to,be,called,in,the,painless,script,class,param,delegate,method,type,the,type,of,method,call,in,the,painless,script,class,without,the,captured,types,param,is,delegate,interface,if,the,method,to,be,called,is,owned,by,an,interface,where,if,the,value,is,1,if,the,delegate,is,an,interface,and,0,otherwise,note,this,is,an,int,because,the,bootstrap,method,cannot,convert,constants,to,boolean,return,a,link,call,site,linked,to,a,factory,method,for,creating,a,lambda,class,that,implements,the,expected,functional,interface,throws,lambda,conversion,exception,thrown,when,an,illegal,type,conversion,occurs,at,link,time;public,static,call,site,lambda,bootstrap,lookup,lookup,string,interface,method,name,method,type,factory,method,type,method,type,interface,method,type,string,delegate,class,name,int,delegate,invoke,type,string,delegate,method,name,method,type,delegate,method,type,int,is,delegate,interface,throws,lambda,conversion,exception,loader,loader,loader,lookup,lookup,class,get,class,loader,string,lambda,class,name,type,get,internal,name,lookup,lookup,class,lambda,loader,new,lambda,identifier,type,lambda,class,type,type,get,object,type,lambda,class,name,type,delegate,class,type,type,get,object,type,delegate,class,name,replace,validate,types,interface,method,type,delegate,method,type,class,writer,cw,begin,lambda,class,lambda,class,name,factory,method,type,return,type,capture,captures,generate,capture,fields,cw,factory,method,type,generate,lambda,constructor,cw,lambda,class,type,factory,method,type,captures,if,delegate,invoke,type,assert,equals,delegate,method,name,generate,static,ctor,delegator,cw,delegate,class,type,delegate,method,type,delegate,method,name,delegate,class,type,lambda,class,type,delegate,invoke,type,generate,interface,method,cw,factory,method,type,lambda,class,type,interface,method,name,interface,method,type,delegate,class,type,delegate,invoke,type,delegate,method,name,delegate,method,type,is,delegate,interface,1,captures,end,lambda,class,cw,class,lambda,class,create,lambda,class,loader,cw,lambda,class,type,if,captures,length,0,return,create,capture,call,site,lookup,factory,method,type,lambda,class,else,return,create,no,capture,call,site,factory,method,type,lambda,class
LambdaBootstrap -> public static CallSite lambdaBootstrap(             Lookup lookup,             String interfaceMethodName,             MethodType factoryMethodType,             MethodType interfaceMethodType,             String delegateClassName,             int delegateInvokeType,             String delegateMethodName,             MethodType delegateMethodType,             int isDelegateInterface)             throws LambdaConversionException;1533063033;Generates a lambda class for a lambda function/method reference_within a Painless script.  Variables with the prefix interface are considered_to represent values for code generated for the lambda class. Variables with_the prefix delegate are considered to represent values for code generated_within the Painless script.  The interface method delegates (calls) to the_delegate method._@param lookup Standard {@link MethodHandles#lookup}_@param interfaceMethodName Name of functional interface method that is called_@param factoryMethodType The type of method to be linked to this CallSite_ note that_captured types are based on the parameters for this method_@param interfaceMethodType The type of method representing the functional interface method_@param delegateClassName The name of the class to delegate method call to_@param delegateInvokeType The type of method call to be made_(static, virtual, interface, or constructor)_@param delegateMethodName The name of the method to be called in the Painless script class_@param delegateMethodType The type of method call in the Painless script class without_the captured types_@param isDelegateInterface If the method to be called is owned by an interface where_if the value is '1' if the delegate is an interface and '0'_otherwise_ note this is an int because the bootstrap method_cannot convert constants to boolean_@return A {@link CallSite} linked to a factory method for creating a lambda class_that implements the expected functional interface_@throws LambdaConversionException Thrown when an illegal type conversion occurs at link time;public static CallSite lambdaBootstrap(_            Lookup lookup,_            String interfaceMethodName,_            MethodType factoryMethodType,_            MethodType interfaceMethodType,_            String delegateClassName,_            int delegateInvokeType,_            String delegateMethodName,_            MethodType delegateMethodType,_            int isDelegateInterface)_            throws LambdaConversionException {_        Compiler.Loader loader = (Compiler.Loader)lookup.lookupClass().getClassLoader()__        String lambdaClassName = Type.getInternalName(lookup.lookupClass()) + "$$Lambda" + loader.newLambdaIdentifier()__        Type lambdaClassType = Type.getObjectType(lambdaClassName)__        Type delegateClassType = Type.getObjectType(delegateClassName.replace('.', '/'))___        validateTypes(interfaceMethodType, delegateMethodType)___        ClassWriter cw = beginLambdaClass(lambdaClassName, factoryMethodType.returnType())__        Capture[] captures = generateCaptureFields(cw, factoryMethodType)__        generateLambdaConstructor(cw, lambdaClassType, factoryMethodType, captures)___        _        if (delegateInvokeType == H_NEWINVOKESPECIAL) {_            assert CTOR_METHOD_NAME.equals(delegateMethodName)__            generateStaticCtorDelegator(cw, ACC_PRIVATE, DELEGATED_CTOR_WRAPPER_NAME, delegateClassType, delegateMethodType)__            _            delegateMethodName = DELEGATED_CTOR_WRAPPER_NAME__            delegateClassType = lambdaClassType__            delegateInvokeType = H_INVOKESTATIC__        }__        generateInterfaceMethod(cw, factoryMethodType, lambdaClassType, interfaceMethodName,_            interfaceMethodType, delegateClassType, delegateInvokeType,_            delegateMethodName, delegateMethodType, isDelegateInterface == 1, captures)___        endLambdaClass(cw)___        Class<?> lambdaClass = createLambdaClass(loader, cw, lambdaClassType)__        if (captures.length > 0) {_            return createCaptureCallSite(lookup, factoryMethodType, lambdaClass)__        } else {_            return createNoCaptureCallSite(factoryMethodType, lambdaClass)__        }_    };generates,a,lambda,class,for,a,lambda,function,method,reference,within,a,painless,script,variables,with,the,prefix,interface,are,considered,to,represent,values,for,code,generated,for,the,lambda,class,variables,with,the,prefix,delegate,are,considered,to,represent,values,for,code,generated,within,the,painless,script,the,interface,method,delegates,calls,to,the,delegate,method,param,lookup,standard,link,method,handles,lookup,param,interface,method,name,name,of,functional,interface,method,that,is,called,param,factory,method,type,the,type,of,method,to,be,linked,to,this,call,site,note,that,captured,types,are,based,on,the,parameters,for,this,method,param,interface,method,type,the,type,of,method,representing,the,functional,interface,method,param,delegate,class,name,the,name,of,the,class,to,delegate,method,call,to,param,delegate,invoke,type,the,type,of,method,call,to,be,made,static,virtual,interface,or,constructor,param,delegate,method,name,the,name,of,the,method,to,be,called,in,the,painless,script,class,param,delegate,method,type,the,type,of,method,call,in,the,painless,script,class,without,the,captured,types,param,is,delegate,interface,if,the,method,to,be,called,is,owned,by,an,interface,where,if,the,value,is,1,if,the,delegate,is,an,interface,and,0,otherwise,note,this,is,an,int,because,the,bootstrap,method,cannot,convert,constants,to,boolean,return,a,link,call,site,linked,to,a,factory,method,for,creating,a,lambda,class,that,implements,the,expected,functional,interface,throws,lambda,conversion,exception,thrown,when,an,illegal,type,conversion,occurs,at,link,time;public,static,call,site,lambda,bootstrap,lookup,lookup,string,interface,method,name,method,type,factory,method,type,method,type,interface,method,type,string,delegate,class,name,int,delegate,invoke,type,string,delegate,method,name,method,type,delegate,method,type,int,is,delegate,interface,throws,lambda,conversion,exception,compiler,loader,loader,compiler,loader,lookup,lookup,class,get,class,loader,string,lambda,class,name,type,get,internal,name,lookup,lookup,class,lambda,loader,new,lambda,identifier,type,lambda,class,type,type,get,object,type,lambda,class,name,type,delegate,class,type,type,get,object,type,delegate,class,name,replace,validate,types,interface,method,type,delegate,method,type,class,writer,cw,begin,lambda,class,lambda,class,name,factory,method,type,return,type,capture,captures,generate,capture,fields,cw,factory,method,type,generate,lambda,constructor,cw,lambda,class,type,factory,method,type,captures,if,delegate,invoke,type,assert,equals,delegate,method,name,generate,static,ctor,delegator,cw,delegate,class,type,delegate,method,type,delegate,method,name,delegate,class,type,lambda,class,type,delegate,invoke,type,generate,interface,method,cw,factory,method,type,lambda,class,type,interface,method,name,interface,method,type,delegate,class,type,delegate,invoke,type,delegate,method,name,delegate,method,type,is,delegate,interface,1,captures,end,lambda,class,cw,class,lambda,class,create,lambda,class,loader,cw,lambda,class,type,if,captures,length,0,return,create,capture,call,site,lookup,factory,method,type,lambda,class,else,return,create,no,capture,call,site,factory,method,type,lambda,class
LambdaBootstrap -> private static void endLambdaClass(ClassWriter cw);1524684173;Closes the {@link ClassWriter}.;private static void endLambdaClass(ClassWriter cw) {_        cw.visitEnd()__    };closes,the,link,class,writer;private,static,void,end,lambda,class,class,writer,cw,cw,visit,end
LambdaBootstrap -> private static void endLambdaClass(ClassWriter cw);1529076503;Closes the {@link ClassWriter}.;private static void endLambdaClass(ClassWriter cw) {_        cw.visitEnd()__    };closes,the,link,class,writer;private,static,void,end,lambda,class,class,writer,cw,cw,visit,end
LambdaBootstrap -> private static void endLambdaClass(ClassWriter cw);1533063033;Closes the {@link ClassWriter}.;private static void endLambdaClass(ClassWriter cw) {_        cw.visitEnd()__    };closes,the,link,class,writer;private,static,void,end,lambda,class,class,writer,cw,cw,visit,end
LambdaBootstrap -> private static Class<?> createLambdaClass(             Loader loader,             ClassWriter cw,             Type lambdaClassType);1524684173;Defines the {@link Class} for the lambda class using the same {@link Loader}_that originally defined the class for the Painless script.;private static Class<?> createLambdaClass(_            Loader loader,_            ClassWriter cw,_            Type lambdaClassType) {__        byte[] classBytes = cw.toByteArray()__        _        _        return AccessController.doPrivileged((PrivilegedAction<Class<?>>)() ->_            loader.defineLambda(lambdaClassType.getClassName(), classBytes))__    };defines,the,link,class,for,the,lambda,class,using,the,same,link,loader,that,originally,defined,the,class,for,the,painless,script;private,static,class,create,lambda,class,loader,loader,class,writer,cw,type,lambda,class,type,byte,class,bytes,cw,to,byte,array,return,access,controller,do,privileged,privileged,action,class,loader,define,lambda,lambda,class,type,get,class,name,class,bytes
LambdaBootstrap -> private static Class<?> createLambdaClass(             Loader loader,             ClassWriter cw,             Type lambdaClassType);1529076503;Defines the {@link Class} for the lambda class using the same {@link Loader}_that originally defined the class for the Painless script.;private static Class<?> createLambdaClass(_            Loader loader,_            ClassWriter cw,_            Type lambdaClassType) {__        byte[] classBytes = cw.toByteArray()__        _        _        return AccessController.doPrivileged((PrivilegedAction<Class<?>>)() ->_            loader.defineLambda(lambdaClassType.getClassName(), classBytes))__    };defines,the,link,class,for,the,lambda,class,using,the,same,link,loader,that,originally,defined,the,class,for,the,painless,script;private,static,class,create,lambda,class,loader,loader,class,writer,cw,type,lambda,class,type,byte,class,bytes,cw,to,byte,array,return,access,controller,do,privileged,privileged,action,class,loader,define,lambda,lambda,class,type,get,class,name,class,bytes
LambdaBootstrap -> private static void generateStaticCtorDelegator(ClassWriter cw, int access, String delegatorMethodName,             Type delegateClassType, MethodType delegateMethodType);1524684173;Generates a factory method to delegate to constructors.;private static void generateStaticCtorDelegator(ClassWriter cw, int access, String delegatorMethodName,_            Type delegateClassType, MethodType delegateMethodType) {_        Method wrapperMethod = new Method(delegatorMethodName, delegateMethodType.toMethodDescriptorString())__        Method constructorMethod =_            new Method(CTOR_METHOD_NAME, delegateMethodType.changeReturnType(void.class).toMethodDescriptorString())__        int modifiers = access | ACC_STATIC___        GeneratorAdapter factory = new GeneratorAdapter(modifiers, wrapperMethod,_            cw.visitMethod(modifiers, delegatorMethodName, delegateMethodType.toMethodDescriptorString(), null, null))__        factory.visitCode()__        factory.newInstance(delegateClassType)__        factory.dup()__        factory.loadArgs()__        factory.invokeConstructor(delegateClassType, constructorMethod)__        factory.returnValue()__        factory.endMethod()__    };generates,a,factory,method,to,delegate,to,constructors;private,static,void,generate,static,ctor,delegator,class,writer,cw,int,access,string,delegator,method,name,type,delegate,class,type,method,type,delegate,method,type,method,wrapper,method,new,method,delegator,method,name,delegate,method,type,to,method,descriptor,string,method,constructor,method,new,method,delegate,method,type,change,return,type,void,class,to,method,descriptor,string,int,modifiers,access,generator,adapter,factory,new,generator,adapter,modifiers,wrapper,method,cw,visit,method,modifiers,delegator,method,name,delegate,method,type,to,method,descriptor,string,null,null,factory,visit,code,factory,new,instance,delegate,class,type,factory,dup,factory,load,args,factory,invoke,constructor,delegate,class,type,constructor,method,factory,return,value,factory,end,method
LambdaBootstrap -> private static void generateStaticCtorDelegator(ClassWriter cw, int access, String delegatorMethodName,             Type delegateClassType, MethodType delegateMethodType);1529076503;Generates a factory method to delegate to constructors.;private static void generateStaticCtorDelegator(ClassWriter cw, int access, String delegatorMethodName,_            Type delegateClassType, MethodType delegateMethodType) {_        Method wrapperMethod = new Method(delegatorMethodName, delegateMethodType.toMethodDescriptorString())__        Method constructorMethod =_            new Method(CTOR_METHOD_NAME, delegateMethodType.changeReturnType(void.class).toMethodDescriptorString())__        int modifiers = access | ACC_STATIC___        GeneratorAdapter factory = new GeneratorAdapter(modifiers, wrapperMethod,_            cw.visitMethod(modifiers, delegatorMethodName, delegateMethodType.toMethodDescriptorString(), null, null))__        factory.visitCode()__        factory.newInstance(delegateClassType)__        factory.dup()__        factory.loadArgs()__        factory.invokeConstructor(delegateClassType, constructorMethod)__        factory.returnValue()__        factory.endMethod()__    };generates,a,factory,method,to,delegate,to,constructors;private,static,void,generate,static,ctor,delegator,class,writer,cw,int,access,string,delegator,method,name,type,delegate,class,type,method,type,delegate,method,type,method,wrapper,method,new,method,delegator,method,name,delegate,method,type,to,method,descriptor,string,method,constructor,method,new,method,delegate,method,type,change,return,type,void,class,to,method,descriptor,string,int,modifiers,access,generator,adapter,factory,new,generator,adapter,modifiers,wrapper,method,cw,visit,method,modifiers,delegator,method,name,delegate,method,type,to,method,descriptor,string,null,null,factory,visit,code,factory,new,instance,delegate,class,type,factory,dup,factory,load,args,factory,invoke,constructor,delegate,class,type,constructor,method,factory,return,value,factory,end,method
LambdaBootstrap -> private static void generateStaticCtorDelegator(ClassWriter cw, int access, String delegatorMethodName,             Type delegateClassType, MethodType delegateMethodType);1533063033;Generates a factory method to delegate to constructors.;private static void generateStaticCtorDelegator(ClassWriter cw, int access, String delegatorMethodName,_            Type delegateClassType, MethodType delegateMethodType) {_        Method wrapperMethod = new Method(delegatorMethodName, delegateMethodType.toMethodDescriptorString())__        Method constructorMethod =_            new Method(CTOR_METHOD_NAME, delegateMethodType.changeReturnType(void.class).toMethodDescriptorString())__        int modifiers = access | ACC_STATIC___        GeneratorAdapter factory = new GeneratorAdapter(modifiers, wrapperMethod,_            cw.visitMethod(modifiers, delegatorMethodName, delegateMethodType.toMethodDescriptorString(), null, null))__        factory.visitCode()__        factory.newInstance(delegateClassType)__        factory.dup()__        factory.loadArgs()__        factory.invokeConstructor(delegateClassType, constructorMethod)__        factory.returnValue()__        factory.endMethod()__    };generates,a,factory,method,to,delegate,to,constructors;private,static,void,generate,static,ctor,delegator,class,writer,cw,int,access,string,delegator,method,name,type,delegate,class,type,method,type,delegate,method,type,method,wrapper,method,new,method,delegator,method,name,delegate,method,type,to,method,descriptor,string,method,constructor,method,new,method,delegate,method,type,change,return,type,void,class,to,method,descriptor,string,int,modifiers,access,generator,adapter,factory,new,generator,adapter,modifiers,wrapper,method,cw,visit,method,modifiers,delegator,method,name,delegate,method,type,to,method,descriptor,string,null,null,factory,visit,code,factory,new,instance,delegate,class,type,factory,dup,factory,load,args,factory,invoke,constructor,delegate,class,type,constructor,method,factory,return,value,factory,end,method
LambdaBootstrap -> public static CallSite delegateBootstrap(Lookup lookup,                                              String delegateMethodName,                                              MethodType interfaceMethodType,                                              MethodHandle delegateMethodHandle);1524684173;Links the delegate method to the returned {@link CallSite}.  The linked_delegate method will use converted types from the interface method.  Using_invokedynamic to make the delegate method call allows_{@link MethodHandle#asType} to be used to do the type conversion instead_of either a lot more code or requiring many {@link Class}es to be looked_up at link-time.;public static CallSite delegateBootstrap(Lookup lookup,_                                             String delegateMethodName,_                                             MethodType interfaceMethodType,_                                             MethodHandle delegateMethodHandle) {_        return new ConstantCallSite(delegateMethodHandle.asType(interfaceMethodType))__    };links,the,delegate,method,to,the,returned,link,call,site,the,linked,delegate,method,will,use,converted,types,from,the,interface,method,using,invokedynamic,to,make,the,delegate,method,call,allows,link,method,handle,as,type,to,be,used,to,do,the,type,conversion,instead,of,either,a,lot,more,code,or,requiring,many,link,class,es,to,be,looked,up,at,link,time;public,static,call,site,delegate,bootstrap,lookup,lookup,string,delegate,method,name,method,type,interface,method,type,method,handle,delegate,method,handle,return,new,constant,call,site,delegate,method,handle,as,type,interface,method,type
LambdaBootstrap -> public static CallSite delegateBootstrap(Lookup lookup,                                              String delegateMethodName,                                              MethodType interfaceMethodType,                                              MethodHandle delegateMethodHandle);1529076503;Links the delegate method to the returned {@link CallSite}.  The linked_delegate method will use converted types from the interface method.  Using_invokedynamic to make the delegate method call allows_{@link MethodHandle#asType} to be used to do the type conversion instead_of either a lot more code or requiring many {@link Class}es to be looked_up at link-time.;public static CallSite delegateBootstrap(Lookup lookup,_                                             String delegateMethodName,_                                             MethodType interfaceMethodType,_                                             MethodHandle delegateMethodHandle) {_        return new ConstantCallSite(delegateMethodHandle.asType(interfaceMethodType))__    };links,the,delegate,method,to,the,returned,link,call,site,the,linked,delegate,method,will,use,converted,types,from,the,interface,method,using,invokedynamic,to,make,the,delegate,method,call,allows,link,method,handle,as,type,to,be,used,to,do,the,type,conversion,instead,of,either,a,lot,more,code,or,requiring,many,link,class,es,to,be,looked,up,at,link,time;public,static,call,site,delegate,bootstrap,lookup,lookup,string,delegate,method,name,method,type,interface,method,type,method,handle,delegate,method,handle,return,new,constant,call,site,delegate,method,handle,as,type,interface,method,type
LambdaBootstrap -> public static CallSite delegateBootstrap(Lookup lookup,                                              String delegateMethodName,                                              MethodType interfaceMethodType,                                              MethodHandle delegateMethodHandle);1533063033;Links the delegate method to the returned {@link CallSite}.  The linked_delegate method will use converted types from the interface method.  Using_invokedynamic to make the delegate method call allows_{@link MethodHandle#asType} to be used to do the type conversion instead_of either a lot more code or requiring many {@link Class}es to be looked_up at link-time.;public static CallSite delegateBootstrap(Lookup lookup,_                                             String delegateMethodName,_                                             MethodType interfaceMethodType,_                                             MethodHandle delegateMethodHandle) {_        return new ConstantCallSite(delegateMethodHandle.asType(interfaceMethodType))__    };links,the,delegate,method,to,the,returned,link,call,site,the,linked,delegate,method,will,use,converted,types,from,the,interface,method,using,invokedynamic,to,make,the,delegate,method,call,allows,link,method,handle,as,type,to,be,used,to,do,the,type,conversion,instead,of,either,a,lot,more,code,or,requiring,many,link,class,es,to,be,looked,up,at,link,time;public,static,call,site,delegate,bootstrap,lookup,lookup,string,delegate,method,name,method,type,interface,method,type,method,handle,delegate,method,handle,return,new,constant,call,site,delegate,method,handle,as,type,interface,method,type
LambdaBootstrap -> private static void generateLambdaConstructor(             ClassWriter cw,             Type lambdaClassType,             MethodType factoryMethodType,             Capture[] captures);1524684173;Generates a constructor that will take in captured_arguments if any and store them in their respective_member fields.;private static void generateLambdaConstructor(_            ClassWriter cw,_            Type lambdaClassType,_            MethodType factoryMethodType,_            Capture[] captures) {__        String conDesc = factoryMethodType.changeReturnType(void.class).toMethodDescriptorString()__        Method conMeth = new Method(CTOR_METHOD_NAME, conDesc)__        Type baseConType = Type.getType(Object.class)__        Method baseConMeth = new Method(CTOR_METHOD_NAME,_            MethodType.methodType(void.class).toMethodDescriptorString())__        int modifiers = (captures.length > 0) ? ACC_PRIVATE : ACC_PUBLIC___        GeneratorAdapter constructor = new GeneratorAdapter(modifiers, conMeth,_            cw.visitMethod(modifiers, CTOR_METHOD_NAME, conDesc, null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(baseConType, baseConMeth)___        for (int captureCount = 0_ captureCount < captures.length_ ++captureCount) {_            constructor.loadThis()__            constructor.loadArg(captureCount)__            constructor.putField(_                lambdaClassType, captures[captureCount].name, captures[captureCount].type)__        }__        constructor.returnValue()__        constructor.endMethod()___        _        _        _        _        _        _        _        if (captures.length > 0) {_            generateStaticCtorDelegator(cw, ACC_PUBLIC, LAMBDA_FACTORY_METHOD_NAME, lambdaClassType, factoryMethodType)__        }_    };generates,a,constructor,that,will,take,in,captured,arguments,if,any,and,store,them,in,their,respective,member,fields;private,static,void,generate,lambda,constructor,class,writer,cw,type,lambda,class,type,method,type,factory,method,type,capture,captures,string,con,desc,factory,method,type,change,return,type,void,class,to,method,descriptor,string,method,con,meth,new,method,con,desc,type,base,con,type,type,get,type,object,class,method,base,con,meth,new,method,method,type,method,type,void,class,to,method,descriptor,string,int,modifiers,captures,length,0,generator,adapter,constructor,new,generator,adapter,modifiers,con,meth,cw,visit,method,modifiers,con,desc,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,con,type,base,con,meth,for,int,capture,count,0,capture,count,captures,length,capture,count,constructor,load,this,constructor,load,arg,capture,count,constructor,put,field,lambda,class,type,captures,capture,count,name,captures,capture,count,type,constructor,return,value,constructor,end,method,if,captures,length,0,generate,static,ctor,delegator,cw,lambda,class,type,factory,method,type
LambdaBootstrap -> private static void generateLambdaConstructor(             ClassWriter cw,             Type lambdaClassType,             MethodType factoryMethodType,             Capture[] captures);1529076503;Generates a constructor that will take in captured_arguments if any and store them in their respective_member fields.;private static void generateLambdaConstructor(_            ClassWriter cw,_            Type lambdaClassType,_            MethodType factoryMethodType,_            Capture[] captures) {__        String conDesc = factoryMethodType.changeReturnType(void.class).toMethodDescriptorString()__        Method conMeth = new Method(CTOR_METHOD_NAME, conDesc)__        Type baseConType = Type.getType(Object.class)__        Method baseConMeth = new Method(CTOR_METHOD_NAME,_            MethodType.methodType(void.class).toMethodDescriptorString())__        int modifiers = (captures.length > 0) ? ACC_PRIVATE : ACC_PUBLIC___        GeneratorAdapter constructor = new GeneratorAdapter(modifiers, conMeth,_            cw.visitMethod(modifiers, CTOR_METHOD_NAME, conDesc, null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(baseConType, baseConMeth)___        for (int captureCount = 0_ captureCount < captures.length_ ++captureCount) {_            constructor.loadThis()__            constructor.loadArg(captureCount)__            constructor.putField(_                lambdaClassType, captures[captureCount].name, captures[captureCount].type)__        }__        constructor.returnValue()__        constructor.endMethod()___        _        _        _        _        _        _        _        if (captures.length > 0) {_            generateStaticCtorDelegator(cw, ACC_PUBLIC, LAMBDA_FACTORY_METHOD_NAME, lambdaClassType, factoryMethodType)__        }_    };generates,a,constructor,that,will,take,in,captured,arguments,if,any,and,store,them,in,their,respective,member,fields;private,static,void,generate,lambda,constructor,class,writer,cw,type,lambda,class,type,method,type,factory,method,type,capture,captures,string,con,desc,factory,method,type,change,return,type,void,class,to,method,descriptor,string,method,con,meth,new,method,con,desc,type,base,con,type,type,get,type,object,class,method,base,con,meth,new,method,method,type,method,type,void,class,to,method,descriptor,string,int,modifiers,captures,length,0,generator,adapter,constructor,new,generator,adapter,modifiers,con,meth,cw,visit,method,modifiers,con,desc,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,con,type,base,con,meth,for,int,capture,count,0,capture,count,captures,length,capture,count,constructor,load,this,constructor,load,arg,capture,count,constructor,put,field,lambda,class,type,captures,capture,count,name,captures,capture,count,type,constructor,return,value,constructor,end,method,if,captures,length,0,generate,static,ctor,delegator,cw,lambda,class,type,factory,method,type
LambdaBootstrap -> private static void generateLambdaConstructor(             ClassWriter cw,             Type lambdaClassType,             MethodType factoryMethodType,             Capture[] captures);1533063033;Generates a constructor that will take in captured_arguments if any and store them in their respective_member fields.;private static void generateLambdaConstructor(_            ClassWriter cw,_            Type lambdaClassType,_            MethodType factoryMethodType,_            Capture[] captures) {__        String conDesc = factoryMethodType.changeReturnType(void.class).toMethodDescriptorString()__        Method conMeth = new Method(CTOR_METHOD_NAME, conDesc)__        Type baseConType = Type.getType(Object.class)__        Method baseConMeth = new Method(CTOR_METHOD_NAME,_            MethodType.methodType(void.class).toMethodDescriptorString())__        int modifiers = (captures.length > 0) ? ACC_PRIVATE : ACC_PUBLIC___        GeneratorAdapter constructor = new GeneratorAdapter(modifiers, conMeth,_            cw.visitMethod(modifiers, CTOR_METHOD_NAME, conDesc, null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(baseConType, baseConMeth)___        for (int captureCount = 0_ captureCount < captures.length_ ++captureCount) {_            constructor.loadThis()__            constructor.loadArg(captureCount)__            constructor.putField(_                lambdaClassType, captures[captureCount].name, captures[captureCount].type)__        }__        constructor.returnValue()__        constructor.endMethod()___        _        _        _        _        _        _        _        if (captures.length > 0) {_            generateStaticCtorDelegator(cw, ACC_PUBLIC, LAMBDA_FACTORY_METHOD_NAME, lambdaClassType, factoryMethodType)__        }_    };generates,a,constructor,that,will,take,in,captured,arguments,if,any,and,store,them,in,their,respective,member,fields;private,static,void,generate,lambda,constructor,class,writer,cw,type,lambda,class,type,method,type,factory,method,type,capture,captures,string,con,desc,factory,method,type,change,return,type,void,class,to,method,descriptor,string,method,con,meth,new,method,con,desc,type,base,con,type,type,get,type,object,class,method,base,con,meth,new,method,method,type,method,type,void,class,to,method,descriptor,string,int,modifiers,captures,length,0,generator,adapter,constructor,new,generator,adapter,modifiers,con,meth,cw,visit,method,modifiers,con,desc,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,con,type,base,con,meth,for,int,capture,count,0,capture,count,captures,length,capture,count,constructor,load,this,constructor,load,arg,capture,count,constructor,put,field,lambda,class,type,captures,capture,count,name,captures,capture,count,type,constructor,return,value,constructor,end,method,if,captures,length,0,generate,static,ctor,delegator,cw,lambda,class,type,factory,method,type
LambdaBootstrap -> private static Capture[] generateCaptureFields(ClassWriter cw, MethodType factoryMethodType);1524684173;Generates member fields for captured variables_based on the parameters for the factory method._@return An array of captured variable metadata_for generating method arguments later on;private static Capture[] generateCaptureFields(ClassWriter cw, MethodType factoryMethodType) {_        int captureTotal = factoryMethodType.parameterCount()__        Capture[] captures = new Capture[captureTotal]___        for (int captureCount = 0_ captureCount < captureTotal_ ++captureCount) {_            captures[captureCount] =_                new Capture(captureCount, factoryMethodType.parameterType(captureCount))__            int modifiers = ACC_PRIVATE | ACC_FINAL___            FieldVisitor fv = cw.visitField(_                modifiers, captures[captureCount].name, captures[captureCount].desc, null, null)__            fv.visitEnd()__        }__        return captures__    };generates,member,fields,for,captured,variables,based,on,the,parameters,for,the,factory,method,return,an,array,of,captured,variable,metadata,for,generating,method,arguments,later,on;private,static,capture,generate,capture,fields,class,writer,cw,method,type,factory,method,type,int,capture,total,factory,method,type,parameter,count,capture,captures,new,capture,capture,total,for,int,capture,count,0,capture,count,capture,total,capture,count,captures,capture,count,new,capture,capture,count,factory,method,type,parameter,type,capture,count,int,modifiers,field,visitor,fv,cw,visit,field,modifiers,captures,capture,count,name,captures,capture,count,desc,null,null,fv,visit,end,return,captures
LambdaBootstrap -> private static Capture[] generateCaptureFields(ClassWriter cw, MethodType factoryMethodType);1529076503;Generates member fields for captured variables_based on the parameters for the factory method._@return An array of captured variable metadata_for generating method arguments later on;private static Capture[] generateCaptureFields(ClassWriter cw, MethodType factoryMethodType) {_        int captureTotal = factoryMethodType.parameterCount()__        Capture[] captures = new Capture[captureTotal]___        for (int captureCount = 0_ captureCount < captureTotal_ ++captureCount) {_            captures[captureCount] =_                new Capture(captureCount, factoryMethodType.parameterType(captureCount))__            int modifiers = ACC_PRIVATE | ACC_FINAL___            FieldVisitor fv = cw.visitField(_                modifiers, captures[captureCount].name, captures[captureCount].desc, null, null)__            fv.visitEnd()__        }__        return captures__    };generates,member,fields,for,captured,variables,based,on,the,parameters,for,the,factory,method,return,an,array,of,captured,variable,metadata,for,generating,method,arguments,later,on;private,static,capture,generate,capture,fields,class,writer,cw,method,type,factory,method,type,int,capture,total,factory,method,type,parameter,count,capture,captures,new,capture,capture,total,for,int,capture,count,0,capture,count,capture,total,capture,count,captures,capture,count,new,capture,capture,count,factory,method,type,parameter,type,capture,count,int,modifiers,field,visitor,fv,cw,visit,field,modifiers,captures,capture,count,name,captures,capture,count,desc,null,null,fv,visit,end,return,captures
LambdaBootstrap -> private static Capture[] generateCaptureFields(ClassWriter cw, MethodType factoryMethodType);1533063033;Generates member fields for captured variables_based on the parameters for the factory method._@return An array of captured variable metadata_for generating method arguments later on;private static Capture[] generateCaptureFields(ClassWriter cw, MethodType factoryMethodType) {_        int captureTotal = factoryMethodType.parameterCount()__        Capture[] captures = new Capture[captureTotal]___        for (int captureCount = 0_ captureCount < captureTotal_ ++captureCount) {_            captures[captureCount] =_                new Capture(captureCount, factoryMethodType.parameterType(captureCount))__            int modifiers = ACC_PRIVATE | ACC_FINAL___            FieldVisitor fv = cw.visitField(_                modifiers, captures[captureCount].name, captures[captureCount].desc, null, null)__            fv.visitEnd()__        }__        return captures__    };generates,member,fields,for,captured,variables,based,on,the,parameters,for,the,factory,method,return,an,array,of,captured,variable,metadata,for,generating,method,arguments,later,on;private,static,capture,generate,capture,fields,class,writer,cw,method,type,factory,method,type,int,capture,total,factory,method,type,parameter,count,capture,captures,new,capture,capture,total,for,int,capture,count,0,capture,count,capture,total,capture,count,captures,capture,count,new,capture,capture,count,factory,method,type,parameter,type,capture,count,int,modifiers,field,visitor,fv,cw,visit,field,modifiers,captures,capture,count,name,captures,capture,count,desc,null,null,fv,visit,end,return,captures
LambdaBootstrap -> private static CallSite createCaptureCallSite(             Lookup lookup,             MethodType factoryMethodType,             Class<?> lambdaClass);1524684173;Creates an {@link ConstantCallSite};private static CallSite createCaptureCallSite(_            Lookup lookup,_            MethodType factoryMethodType,_            Class<?> lambdaClass) {__        try {_            return new ConstantCallSite(_                lookup.findStatic(lambdaClass, LAMBDA_FACTORY_METHOD_NAME, factoryMethodType))__        } catch (ReflectiveOperationException exception) {_            throw new IllegalStateException("unable to create lambda class", exception)__        }_    };creates,an,link,constant,call,site;private,static,call,site,create,capture,call,site,lookup,lookup,method,type,factory,method,type,class,lambda,class,try,return,new,constant,call,site,lookup,find,static,lambda,class,factory,method,type,catch,reflective,operation,exception,exception,throw,new,illegal,state,exception,unable,to,create,lambda,class,exception
LambdaBootstrap -> private static CallSite createCaptureCallSite(             Lookup lookup,             MethodType factoryMethodType,             Class<?> lambdaClass);1529076503;Creates an {@link ConstantCallSite};private static CallSite createCaptureCallSite(_            Lookup lookup,_            MethodType factoryMethodType,_            Class<?> lambdaClass) {__        try {_            return new ConstantCallSite(_                lookup.findStatic(lambdaClass, LAMBDA_FACTORY_METHOD_NAME, factoryMethodType))__        } catch (ReflectiveOperationException exception) {_            throw new IllegalStateException("unable to create lambda class", exception)__        }_    };creates,an,link,constant,call,site;private,static,call,site,create,capture,call,site,lookup,lookup,method,type,factory,method,type,class,lambda,class,try,return,new,constant,call,site,lookup,find,static,lambda,class,factory,method,type,catch,reflective,operation,exception,exception,throw,new,illegal,state,exception,unable,to,create,lambda,class,exception
LambdaBootstrap -> private static CallSite createCaptureCallSite(             Lookup lookup,             MethodType factoryMethodType,             Class<?> lambdaClass);1533063033;Creates an {@link ConstantCallSite};private static CallSite createCaptureCallSite(_            Lookup lookup,_            MethodType factoryMethodType,_            Class<?> lambdaClass) {__        try {_            return new ConstantCallSite(_                lookup.findStatic(lambdaClass, LAMBDA_FACTORY_METHOD_NAME, factoryMethodType))__        } catch (ReflectiveOperationException exception) {_            throw new IllegalStateException("unable to create lambda class", exception)__        }_    };creates,an,link,constant,call,site;private,static,call,site,create,capture,call,site,lookup,lookup,method,type,factory,method,type,class,lambda,class,try,return,new,constant,call,site,lookup,find,static,lambda,class,factory,method,type,catch,reflective,operation,exception,exception,throw,new,illegal,state,exception,unable,to,create,lambda,class,exception
LambdaBootstrap -> private static void generateInterfaceMethod(             ClassWriter cw,             MethodType factoryMethodType,             Type lambdaClassType,             String interfaceMethodName,             MethodType interfaceMethodType,             Type delegateClassType,             int delegateInvokeType,             String delegateMethodName,             MethodType delegateMethodType,             boolean isDelegateInterface,             Capture[] captures)             throws LambdaConversionException;1529076503;Generates the interface method that will delegate (call) to the delegate method_with {@code INVOKEDYNAMIC} using the {@link #delegateBootstrap} type converter.;private static void generateInterfaceMethod(_            ClassWriter cw,_            MethodType factoryMethodType,_            Type lambdaClassType,_            String interfaceMethodName,_            MethodType interfaceMethodType,_            Type delegateClassType,_            int delegateInvokeType,_            String delegateMethodName,_            MethodType delegateMethodType,_            boolean isDelegateInterface,_            Capture[] captures)_            throws LambdaConversionException {__        String lamDesc = interfaceMethodType.toMethodDescriptorString()__        Method lamMeth = new Method(lambdaClassType.getInternalName(), lamDesc)__        int modifiers = ACC_PUBLIC___        GeneratorAdapter iface = new GeneratorAdapter(modifiers, lamMeth,_            cw.visitMethod(modifiers, interfaceMethodName, lamDesc, null, null))__        iface.visitCode()___        _        for (int captureCount = 0_ captureCount < captures.length_ ++captureCount) {_            iface.loadThis()__            iface.getField(_                lambdaClassType, captures[captureCount].name, captures[captureCount].type)__        }__        _        iface.loadArgs()___        _        _        _        _        _        _        _        if (delegateInvokeType == H_INVOKESTATIC) {_            interfaceMethodType =_                interfaceMethodType.insertParameterTypes(0, factoryMethodType.parameterArray())__            delegateMethodType =_                delegateMethodType.insertParameterTypes(0, factoryMethodType.parameterArray())__        } else if (delegateInvokeType == H_INVOKEVIRTUAL ||_            delegateInvokeType == H_INVOKEINTERFACE) {_            _            _            _            _            if (captures.length == 0) {_                Class<?> clazz = delegateMethodType.parameterType(0)__                delegateClassType = Type.getType(clazz)__                delegateMethodType = delegateMethodType.dropParameterTypes(0, 1)__            _            _            _            _            _            _            } else if (captures.length == 1) {_                Class<?> clazz = factoryMethodType.parameterType(0)__                delegateClassType = Type.getType(clazz)__                interfaceMethodType = interfaceMethodType.insertParameterTypes(0, clazz)__            } else {_                throw new LambdaConversionException(_                    "unexpected number of captures [ " + captures.length + "]")__            }_        } else {_            throw new IllegalStateException(_                "unexpected invocation type [" + delegateInvokeType + "]")__        }__        Handle delegateHandle =_            new Handle(delegateInvokeType, delegateClassType.getInternalName(),_                delegateMethodName, delegateMethodType.toMethodDescriptorString(),_                isDelegateInterface)__        iface.invokeDynamic(delegateMethodName, Type.getMethodType(interfaceMethodType_                .toMethodDescriptorString()).getDescriptor(), DELEGATE_BOOTSTRAP_HANDLE,_                delegateHandle)___        iface.returnValue()__        iface.endMethod()__    };generates,the,interface,method,that,will,delegate,call,to,the,delegate,method,with,code,invokedynamic,using,the,link,delegate,bootstrap,type,converter;private,static,void,generate,interface,method,class,writer,cw,method,type,factory,method,type,type,lambda,class,type,string,interface,method,name,method,type,interface,method,type,type,delegate,class,type,int,delegate,invoke,type,string,delegate,method,name,method,type,delegate,method,type,boolean,is,delegate,interface,capture,captures,throws,lambda,conversion,exception,string,lam,desc,interface,method,type,to,method,descriptor,string,method,lam,meth,new,method,lambda,class,type,get,internal,name,lam,desc,int,modifiers,generator,adapter,iface,new,generator,adapter,modifiers,lam,meth,cw,visit,method,modifiers,interface,method,name,lam,desc,null,null,iface,visit,code,for,int,capture,count,0,capture,count,captures,length,capture,count,iface,load,this,iface,get,field,lambda,class,type,captures,capture,count,name,captures,capture,count,type,iface,load,args,if,delegate,invoke,type,interface,method,type,interface,method,type,insert,parameter,types,0,factory,method,type,parameter,array,delegate,method,type,delegate,method,type,insert,parameter,types,0,factory,method,type,parameter,array,else,if,delegate,invoke,type,delegate,invoke,type,if,captures,length,0,class,clazz,delegate,method,type,parameter,type,0,delegate,class,type,type,get,type,clazz,delegate,method,type,delegate,method,type,drop,parameter,types,0,1,else,if,captures,length,1,class,clazz,factory,method,type,parameter,type,0,delegate,class,type,type,get,type,clazz,interface,method,type,interface,method,type,insert,parameter,types,0,clazz,else,throw,new,lambda,conversion,exception,unexpected,number,of,captures,captures,length,else,throw,new,illegal,state,exception,unexpected,invocation,type,delegate,invoke,type,handle,delegate,handle,new,handle,delegate,invoke,type,delegate,class,type,get,internal,name,delegate,method,name,delegate,method,type,to,method,descriptor,string,is,delegate,interface,iface,invoke,dynamic,delegate,method,name,type,get,method,type,interface,method,type,to,method,descriptor,string,get,descriptor,delegate,handle,iface,return,value,iface,end,method
LambdaBootstrap -> private static void generateInterfaceMethod(             ClassWriter cw,             MethodType factoryMethodType,             Type lambdaClassType,             String interfaceMethodName,             MethodType interfaceMethodType,             Type delegateClassType,             int delegateInvokeType,             String delegateMethodName,             MethodType delegateMethodType,             boolean isDelegateInterface,             Capture[] captures)             throws LambdaConversionException;1533063033;Generates the interface method that will delegate (call) to the delegate method_with {@code INVOKEDYNAMIC} using the {@link #delegateBootstrap} type converter.;private static void generateInterfaceMethod(_            ClassWriter cw,_            MethodType factoryMethodType,_            Type lambdaClassType,_            String interfaceMethodName,_            MethodType interfaceMethodType,_            Type delegateClassType,_            int delegateInvokeType,_            String delegateMethodName,_            MethodType delegateMethodType,_            boolean isDelegateInterface,_            Capture[] captures)_            throws LambdaConversionException {__        String lamDesc = interfaceMethodType.toMethodDescriptorString()__        Method lamMeth = new Method(lambdaClassType.getInternalName(), lamDesc)__        int modifiers = ACC_PUBLIC___        GeneratorAdapter iface = new GeneratorAdapter(modifiers, lamMeth,_            cw.visitMethod(modifiers, interfaceMethodName, lamDesc, null, null))__        iface.visitCode()___        _        for (int captureCount = 0_ captureCount < captures.length_ ++captureCount) {_            iface.loadThis()__            iface.getField(_                lambdaClassType, captures[captureCount].name, captures[captureCount].type)__        }__        _        iface.loadArgs()___        _        _        _        _        _        _        _        if (delegateInvokeType == H_INVOKESTATIC) {_            interfaceMethodType =_                interfaceMethodType.insertParameterTypes(0, factoryMethodType.parameterArray())__            delegateMethodType =_                delegateMethodType.insertParameterTypes(0, factoryMethodType.parameterArray())__        } else if (delegateInvokeType == H_INVOKEVIRTUAL ||_            delegateInvokeType == H_INVOKEINTERFACE) {_            _            _            _            _            if (captures.length == 0) {_                Class<?> clazz = delegateMethodType.parameterType(0)__                delegateClassType = Type.getType(clazz)__                delegateMethodType = delegateMethodType.dropParameterTypes(0, 1)__            _            _            _            _            _            _            } else if (captures.length == 1) {_                Class<?> clazz = factoryMethodType.parameterType(0)__                delegateClassType = Type.getType(clazz)__                interfaceMethodType = interfaceMethodType.insertParameterTypes(0, clazz)__            } else {_                throw new LambdaConversionException(_                    "unexpected number of captures [ " + captures.length + "]")__            }_        } else {_            throw new IllegalStateException(_                "unexpected invocation type [" + delegateInvokeType + "]")__        }__        Handle delegateHandle =_            new Handle(delegateInvokeType, delegateClassType.getInternalName(),_                delegateMethodName, delegateMethodType.toMethodDescriptorString(),_                isDelegateInterface)__        iface.invokeDynamic(delegateMethodName, Type.getMethodType(interfaceMethodType_                .toMethodDescriptorString()).getDescriptor(), DELEGATE_BOOTSTRAP_HANDLE,_                delegateHandle)___        iface.returnValue()__        iface.endMethod()__    };generates,the,interface,method,that,will,delegate,call,to,the,delegate,method,with,code,invokedynamic,using,the,link,delegate,bootstrap,type,converter;private,static,void,generate,interface,method,class,writer,cw,method,type,factory,method,type,type,lambda,class,type,string,interface,method,name,method,type,interface,method,type,type,delegate,class,type,int,delegate,invoke,type,string,delegate,method,name,method,type,delegate,method,type,boolean,is,delegate,interface,capture,captures,throws,lambda,conversion,exception,string,lam,desc,interface,method,type,to,method,descriptor,string,method,lam,meth,new,method,lambda,class,type,get,internal,name,lam,desc,int,modifiers,generator,adapter,iface,new,generator,adapter,modifiers,lam,meth,cw,visit,method,modifiers,interface,method,name,lam,desc,null,null,iface,visit,code,for,int,capture,count,0,capture,count,captures,length,capture,count,iface,load,this,iface,get,field,lambda,class,type,captures,capture,count,name,captures,capture,count,type,iface,load,args,if,delegate,invoke,type,interface,method,type,interface,method,type,insert,parameter,types,0,factory,method,type,parameter,array,delegate,method,type,delegate,method,type,insert,parameter,types,0,factory,method,type,parameter,array,else,if,delegate,invoke,type,delegate,invoke,type,if,captures,length,0,class,clazz,delegate,method,type,parameter,type,0,delegate,class,type,type,get,type,clazz,delegate,method,type,delegate,method,type,drop,parameter,types,0,1,else,if,captures,length,1,class,clazz,factory,method,type,parameter,type,0,delegate,class,type,type,get,type,clazz,interface,method,type,interface,method,type,insert,parameter,types,0,clazz,else,throw,new,lambda,conversion,exception,unexpected,number,of,captures,captures,length,else,throw,new,illegal,state,exception,unexpected,invocation,type,delegate,invoke,type,handle,delegate,handle,new,handle,delegate,invoke,type,delegate,class,type,get,internal,name,delegate,method,name,delegate,method,type,to,method,descriptor,string,is,delegate,interface,iface,invoke,dynamic,delegate,method,name,type,get,method,type,interface,method,type,to,method,descriptor,string,get,descriptor,delegate,handle,iface,return,value,iface,end,method
LambdaBootstrap -> private static void validateTypes(MethodType interfaceMethodType, MethodType delegateMethodType)             throws LambdaConversionException;1524684173;Validates some conversions at link time.  Currently, only ensures that the lambda method_with a return value cannot delegate to a delegate method with no return type.;private static void validateTypes(MethodType interfaceMethodType, MethodType delegateMethodType)_            throws LambdaConversionException {__        if (interfaceMethodType.returnType() != void.class &&_            delegateMethodType.returnType() == void.class) {_            throw new LambdaConversionException("lambda expects return type ["_                + interfaceMethodType.returnType() + "], but found return type [void]")__        }_    };validates,some,conversions,at,link,time,currently,only,ensures,that,the,lambda,method,with,a,return,value,cannot,delegate,to,a,delegate,method,with,no,return,type;private,static,void,validate,types,method,type,interface,method,type,method,type,delegate,method,type,throws,lambda,conversion,exception,if,interface,method,type,return,type,void,class,delegate,method,type,return,type,void,class,throw,new,lambda,conversion,exception,lambda,expects,return,type,interface,method,type,return,type,but,found,return,type,void
LambdaBootstrap -> private static void validateTypes(MethodType interfaceMethodType, MethodType delegateMethodType)             throws LambdaConversionException;1529076503;Validates some conversions at link time.  Currently, only ensures that the lambda method_with a return value cannot delegate to a delegate method with no return type.;private static void validateTypes(MethodType interfaceMethodType, MethodType delegateMethodType)_            throws LambdaConversionException {__        if (interfaceMethodType.returnType() != void.class &&_            delegateMethodType.returnType() == void.class) {_            throw new LambdaConversionException("lambda expects return type ["_                + interfaceMethodType.returnType() + "], but found return type [void]")__        }_    };validates,some,conversions,at,link,time,currently,only,ensures,that,the,lambda,method,with,a,return,value,cannot,delegate,to,a,delegate,method,with,no,return,type;private,static,void,validate,types,method,type,interface,method,type,method,type,delegate,method,type,throws,lambda,conversion,exception,if,interface,method,type,return,type,void,class,delegate,method,type,return,type,void,class,throw,new,lambda,conversion,exception,lambda,expects,return,type,interface,method,type,return,type,but,found,return,type,void
LambdaBootstrap -> private static void validateTypes(MethodType interfaceMethodType, MethodType delegateMethodType)             throws LambdaConversionException;1533063033;Validates some conversions at link time.  Currently, only ensures that the lambda method_with a return value cannot delegate to a delegate method with no return type.;private static void validateTypes(MethodType interfaceMethodType, MethodType delegateMethodType)_            throws LambdaConversionException {__        if (interfaceMethodType.returnType() != void.class &&_            delegateMethodType.returnType() == void.class) {_            throw new LambdaConversionException("lambda expects return type ["_                + interfaceMethodType.returnType() + "], but found return type [void]")__        }_    };validates,some,conversions,at,link,time,currently,only,ensures,that,the,lambda,method,with,a,return,value,cannot,delegate,to,a,delegate,method,with,no,return,type;private,static,void,validate,types,method,type,interface,method,type,method,type,delegate,method,type,throws,lambda,conversion,exception,if,interface,method,type,return,type,void,class,delegate,method,type,return,type,void,class,throw,new,lambda,conversion,exception,lambda,expects,return,type,interface,method,type,return,type,but,found,return,type,void
LambdaBootstrap -> private static CallSite createNoCaptureCallSite(             MethodType factoryMethodType,             Class<?> lambdaClass);1524684173;Creates an {@link ConstantCallSite} that will return the same instance_of the generated lambda class every time this linked factory method is called.;private static CallSite createNoCaptureCallSite(_            MethodType factoryMethodType,_            Class<?> lambdaClass) {__        try {_            return new ConstantCallSite(MethodHandles.constant(_                factoryMethodType.returnType(), lambdaClass.getConstructor().newInstance()))__        } catch (ReflectiveOperationException exception) {_            throw new IllegalStateException("unable to instantiate lambda class", exception)__        }_    };creates,an,link,constant,call,site,that,will,return,the,same,instance,of,the,generated,lambda,class,every,time,this,linked,factory,method,is,called;private,static,call,site,create,no,capture,call,site,method,type,factory,method,type,class,lambda,class,try,return,new,constant,call,site,method,handles,constant,factory,method,type,return,type,lambda,class,get,constructor,new,instance,catch,reflective,operation,exception,exception,throw,new,illegal,state,exception,unable,to,instantiate,lambda,class,exception
LambdaBootstrap -> private static CallSite createNoCaptureCallSite(             MethodType factoryMethodType,             Class<?> lambdaClass);1529076503;Creates an {@link ConstantCallSite} that will return the same instance_of the generated lambda class every time this linked factory method is called.;private static CallSite createNoCaptureCallSite(_            MethodType factoryMethodType,_            Class<?> lambdaClass) {__        try {_            return new ConstantCallSite(MethodHandles.constant(_                factoryMethodType.returnType(), lambdaClass.getConstructor().newInstance()))__        } catch (ReflectiveOperationException exception) {_            throw new IllegalStateException("unable to instantiate lambda class", exception)__        }_    };creates,an,link,constant,call,site,that,will,return,the,same,instance,of,the,generated,lambda,class,every,time,this,linked,factory,method,is,called;private,static,call,site,create,no,capture,call,site,method,type,factory,method,type,class,lambda,class,try,return,new,constant,call,site,method,handles,constant,factory,method,type,return,type,lambda,class,get,constructor,new,instance,catch,reflective,operation,exception,exception,throw,new,illegal,state,exception,unable,to,instantiate,lambda,class,exception
LambdaBootstrap -> private static CallSite createNoCaptureCallSite(             MethodType factoryMethodType,             Class<?> lambdaClass);1533063033;Creates an {@link ConstantCallSite} that will return the same instance_of the generated lambda class every time this linked factory method is called.;private static CallSite createNoCaptureCallSite(_            MethodType factoryMethodType,_            Class<?> lambdaClass) {__        try {_            return new ConstantCallSite(MethodHandles.constant(_                factoryMethodType.returnType(), lambdaClass.getConstructor().newInstance()))__        } catch (ReflectiveOperationException exception) {_            throw new IllegalStateException("unable to instantiate lambda class", exception)__        }_    };creates,an,link,constant,call,site,that,will,return,the,same,instance,of,the,generated,lambda,class,every,time,this,linked,factory,method,is,called;private,static,call,site,create,no,capture,call,site,method,type,factory,method,type,class,lambda,class,try,return,new,constant,call,site,method,handles,constant,factory,method,type,return,type,lambda,class,get,constructor,new,instance,catch,reflective,operation,exception,exception,throw,new,illegal,state,exception,unable,to,instantiate,lambda,class,exception
LambdaBootstrap -> private static ClassWriter beginLambdaClass(String lambdaClassName, Class<?> lambdaInterface);1524684173;Creates the {@link ClassWriter} to be used for the lambda class generation.;private static ClassWriter beginLambdaClass(String lambdaClassName, Class<?> lambdaInterface) {_        String baseClass = Type.getInternalName(Object.class)__        int modifiers = ACC_PUBLIC | ACC_SUPER | ACC_FINAL | ACC_SYNTHETIC___        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS)__        cw.visit(CLASS_VERSION,_            modifiers, lambdaClassName, null, baseClass, new String[] { Type.getInternalName(lambdaInterface) })___        return cw__    };creates,the,link,class,writer,to,be,used,for,the,lambda,class,generation;private,static,class,writer,begin,lambda,class,string,lambda,class,name,class,lambda,interface,string,base,class,type,get,internal,name,object,class,int,modifiers,class,writer,cw,new,class,writer,class,writer,cw,visit,modifiers,lambda,class,name,null,base,class,new,string,type,get,internal,name,lambda,interface,return,cw
LambdaBootstrap -> private static ClassWriter beginLambdaClass(String lambdaClassName, Class<?> lambdaInterface);1529076503;Creates the {@link ClassWriter} to be used for the lambda class generation.;private static ClassWriter beginLambdaClass(String lambdaClassName, Class<?> lambdaInterface) {_        String baseClass = Type.getInternalName(Object.class)__        int modifiers = ACC_PUBLIC | ACC_SUPER | ACC_FINAL | ACC_SYNTHETIC___        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS)__        cw.visit(CLASS_VERSION,_            modifiers, lambdaClassName, null, baseClass, new String[] { Type.getInternalName(lambdaInterface) })___        return cw__    };creates,the,link,class,writer,to,be,used,for,the,lambda,class,generation;private,static,class,writer,begin,lambda,class,string,lambda,class,name,class,lambda,interface,string,base,class,type,get,internal,name,object,class,int,modifiers,class,writer,cw,new,class,writer,class,writer,cw,visit,modifiers,lambda,class,name,null,base,class,new,string,type,get,internal,name,lambda,interface,return,cw
LambdaBootstrap -> private static ClassWriter beginLambdaClass(String lambdaClassName, Class<?> lambdaInterface);1533063033;Creates the {@link ClassWriter} to be used for the lambda class generation.;private static ClassWriter beginLambdaClass(String lambdaClassName, Class<?> lambdaInterface) {_        String baseClass = Type.getInternalName(Object.class)__        int modifiers = ACC_PUBLIC | ACC_SUPER | ACC_FINAL | ACC_SYNTHETIC___        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS)__        cw.visit(CLASS_VERSION,_            modifiers, lambdaClassName, null, baseClass, new String[] { Type.getInternalName(lambdaInterface) })___        return cw__    };creates,the,link,class,writer,to,be,used,for,the,lambda,class,generation;private,static,class,writer,begin,lambda,class,string,lambda,class,name,class,lambda,interface,string,base,class,type,get,internal,name,object,class,int,modifiers,class,writer,cw,new,class,writer,class,writer,cw,visit,modifiers,lambda,class,name,null,base,class,new,string,type,get,internal,name,lambda,interface,return,cw
