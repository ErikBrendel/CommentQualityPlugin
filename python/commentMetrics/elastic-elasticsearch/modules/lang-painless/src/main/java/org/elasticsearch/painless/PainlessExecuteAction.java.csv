commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;static;1;7;;static ScriptContext<?> fromScriptContextName(String name) {     ScriptContext<?> scriptContext = SUPPORTED_CONTEXTS.get(name).     if (scriptContext == null) {         throw new UnsupportedOperationException("unsupported script context name [" + name + "]").     }     return scriptContext. }
false;static;2;5;;static ContextSetup parse(XContentParser parser, Void context) throws IOException {     ContextSetup contextSetup = PARSER.parse(parser, null).     contextSetup.setXContentType(parser.contentType()).     return contextSetup. }
false;public;0;3;;public String getIndex() {     return index. }
false;public;0;3;;public BytesReference getDocument() {     return document. }
false;public;0;3;;public QueryBuilder getQuery() {     return query. }
false;public;0;3;;public XContentType getXContentType() {     return xContentType. }
false;public;1;3;;public void setXContentType(XContentType xContentType) {     this.xContentType = xContentType. }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ContextSetup that = (ContextSetup) o.     return Objects.equals(index, that.index) && Objects.equals(document, that.document) && Objects.equals(query, that.query) && Objects.equals(xContentType, that.xContentType). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index, document, query, xContentType). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(index).     out.writeOptionalBytesReference(document).     out.writeOptionalString(xContentType != null ? xContentType.mediaTypeWithoutParameters() : null).     out.writeOptionalNamedWriteable(query). }
false;public;0;9;;@Override public String toString() {     return "ContextSetup{" + ", index='" + index + '\'' + ", document=" + document + ", query=" + query + ", xContentType=" + xContentType + '}'. }
false;public;2;21;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         if (index != null) {             builder.field(INDEX_FIELD.getPreferredName(), index).         }         if (document != null) {             builder.field(DOCUMENT_FIELD.getPreferredName()).             try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, document, xContentType)) {                 builder.generator().copyCurrentStructure(parser).             }         }         if (query != null) {             builder.field(QUERY_FIELD.getPreferredName(), query).         }     }     builder.endObject().     return builder. }
false;static;1;3;;static Request parse(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;0;3;;public Script getScript() {     return script. }
false;public;0;3;;public ScriptContext<?> getContext() {     return context. }
false;public;0;3;;public ContextSetup getContextSetup() {     return contextSetup. }
false;public;0;16;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (script.getType() != ScriptType.INLINE) {         validationException = addValidationError("only inline scripts are supported", validationException).     }     if (needDocumentAndIndex(context)) {         if (contextSetup.index == null) {             validationException = addValidationError("index is a required parameter for current context", validationException).         }         if (contextSetup.document == null) {             validationException = addValidationError("document is a required parameter for current context", validationException).         }     }     return validationException. }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     script = new Script(in).     if (in.getVersion().before(Version.V_6_4_0)) {         byte scriptContextId = in.readByte().         assert scriptContextId == 0.     } else {         context = fromScriptContextName(in.readString()).         contextSetup = in.readOptionalWriteable(ContextSetup::new).     } }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     script.writeTo(out).     if (out.getVersion().before(Version.V_6_4_0)) {         out.writeByte((byte) 0).     } else {         out.writeString(context.name).         out.writeOptionalWriteable(contextSetup).     } }
true;public;2;11;// For testing only: ;// For testing only: @Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(SCRIPT_FIELD.getPreferredName(), script).     builder.field(CONTEXT_FIELD.getPreferredName(), context.name).     if (contextSetup != null) {         builder.field(CONTEXT_SETUP_FIELD.getPreferredName(), contextSetup).     }     builder.endObject().     return builder. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Request request = (Request) o.     return Objects.equals(script, request.script) && Objects.equals(context, request.context) && Objects.equals(contextSetup, request.contextSetup). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(script, context, contextSetup). }
false;public;0;8;;@Override public String toString() {     return "Request{" + "script=" + script + "context=" + context + ", contextSetup=" + contextSetup + '}'. }
false;static;1;3;;static boolean needDocumentAndIndex(ScriptContext<?> scriptContext) {     return scriptContext == FilterScript.CONTEXT || scriptContext == ScoreScript.CONTEXT. }
false;public;0;3;;public Object getResult() {     return result. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     result = in.readGenericValue(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeGenericValue(result). }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("result", result).     return builder.endObject(). }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response response = (Response) o.     return Objects.equals(result, response.result). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(result). }
true;public;0;3;/**  * Return the parameters for this script.  */ ;/**  * Return the parameters for this script.  */ public Map<String, Object> getParams() {     return params. }
false;public,abstract;0;1;;public abstract Object execute().
false;;1;1;;PainlessTestScript newInstance(Map<String, Object> params).
false;protected;0;4;;@Override protected Response newResponse() {     return new Response(). }
false;protected;2;7;;@Override protected ClusterBlockException checkRequestBlock(ClusterState state, InternalRequest request) {     if (request.concreteIndex() != null) {         return super.checkRequestBlock(state, request).     }     return null. }
false;protected;1;4;;@Override protected boolean resolveIndex(Request request) {     return request.contextSetup != null && request.contextSetup.getIndex() != null. }
false;protected;2;7;;@Override protected ShardsIterator shards(ClusterState state, InternalRequest request) {     if (request.concreteIndex() == null) {         return null.     }     return state.routingTable().index(request.concreteIndex()).randomAllActiveShardsIt(). }
false;protected;2;19;;@Override protected Response shardOperation(Request request, ShardId shardId) throws IOException {     IndexService indexService.     if (request.contextSetup != null && request.contextSetup.getIndex() != null) {         ClusterState clusterState = clusterService.state().         IndicesOptions indicesOptions = IndicesOptions.strictSingleIndexNoExpandForbidClosed().         String indexExpression = request.contextSetup.index.         Index[] concreteIndices = indexNameExpressionResolver.concreteIndices(clusterState, indicesOptions, indexExpression).         if (concreteIndices.length != 1) {             throw new IllegalArgumentException("[" + indexExpression + "] does not resolve to a single index").         }         Index concreteIndex = concreteIndices[0].         indexService = indicesServices.indexServiceSafe(concreteIndex).     } else {         indexService = null.     }     return innerShardOperation(request, scriptService, indexService). }
false;static;3;44;;static Response innerShardOperation(Request request, ScriptService scriptService, IndexService indexService) throws IOException {     final ScriptContext<?> scriptContext = request.context.     if (scriptContext == PainlessTestScript.CONTEXT) {         PainlessTestScript.Factory factory = scriptService.compile(request.script, PainlessTestScript.CONTEXT).         PainlessTestScript painlessTestScript = factory.newInstance(request.script.getParams()).         String result = Objects.toString(painlessTestScript.execute()).         return new Response(result).     } else if (scriptContext == FilterScript.CONTEXT) {         return prepareRamIndex(request, (context, leafReaderContext) -> {             FilterScript.Factory factory = scriptService.compile(request.script, FilterScript.CONTEXT).             FilterScript.LeafFactory leafFactory = factory.newFactory(request.getScript().getParams(), context.lookup()).             FilterScript filterScript = leafFactory.newInstance(leafReaderContext).             filterScript.setDocument(0).             boolean result = filterScript.execute().             return new Response(result).         }, indexService).     } else if (scriptContext == ScoreScript.CONTEXT) {         return prepareRamIndex(request, (context, leafReaderContext) -> {             ScoreScript.Factory factory = scriptService.compile(request.script, ScoreScript.CONTEXT).             ScoreScript.LeafFactory leafFactory = factory.newFactory(request.getScript().getParams(), context.lookup()).             ScoreScript scoreScript = leafFactory.newInstance(leafReaderContext).             scoreScript.setDocument(0).             if (request.contextSetup.query != null) {                 Query luceneQuery = request.contextSetup.query.rewrite(context).toQuery(context).                 IndexSearcher indexSearcher = new IndexSearcher(leafReaderContext.reader()).                 luceneQuery = indexSearcher.rewrite(luceneQuery).                 Weight weight = indexSearcher.createWeight(luceneQuery, ScoreMode.COMPLETE, 1f).                 Scorer scorer = weight.scorer(indexSearcher.getIndexReader().leaves().get(0)).                 // Consume the first (and only) match.                 int docID = scorer.iterator().nextDoc().                 assert docID == scorer.docID().                 scoreScript.setScorer(scorer).             }             double result = scoreScript.execute().             return new Response(result).         }, indexService).     } else {         throw new UnsupportedOperationException("unsupported context [" + scriptContext.name + "]").     } }
false;private,static;3;24;;private static Response prepareRamIndex(Request request, CheckedBiFunction<QueryShardContext, LeafReaderContext, Response, IOException> handler, IndexService indexService) throws IOException {     Analyzer defaultAnalyzer = indexService.getIndexAnalyzers().getDefaultIndexAnalyzer().     try (RAMDirectory ramDirectory = new RAMDirectory()) {         try (IndexWriter indexWriter = new IndexWriter(ramDirectory, new IndexWriterConfig(defaultAnalyzer))) {             String index = indexService.index().getName().             String type = indexService.mapperService().documentMapper().type().             BytesReference document = request.contextSetup.document.             XContentType xContentType = request.contextSetup.xContentType.             SourceToParse sourceToParse = new SourceToParse(index, type, "_id", document, xContentType).             ParsedDocument parsedDocument = indexService.mapperService().documentMapper().parse(sourceToParse).             indexWriter.addDocuments(parsedDocument.docs()).             try (IndexReader indexReader = DirectoryReader.open(indexWriter)) {                 final long absoluteStartMillis = System.currentTimeMillis().                 QueryShardContext context = indexService.newQueryShardContext(0, indexReader, () -> absoluteStartMillis, null).                 return handler.apply(context, indexReader.leaves().get(0)).             }         }     } }
false;public;0;4;;@Override public String getName() {     return "_scripts_painless_execute". }
false;public;2;5;;@Override public RestResponse buildResponse(Response response, XContentBuilder builder) throws Exception {     response.toXContent(builder, ToXContent.EMPTY_PARAMS).     return new BytesRestResponse(OK, builder). }
false;protected;2;11;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     final Request request = Request.parse(restRequest.contentOrSourceParamParser()).     return channel -> client.executeLocally(INSTANCE, request, new RestBuilderListener<Response>(channel) {          @Override         public RestResponse buildResponse(Response response, XContentBuilder builder) throws Exception {             response.toXContent(builder, ToXContent.EMPTY_PARAMS).             return new BytesRestResponse(OK, builder).         }     }). }
