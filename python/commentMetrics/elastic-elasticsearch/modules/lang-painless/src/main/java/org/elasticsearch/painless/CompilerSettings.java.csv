commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the value for the cumulative total number of statements that can be made in all loops  * in a script before an exception is thrown.  This attempts to prevent infinite loops.  Note if  * the counter is set to 0, no loop counter will be written.  */ ;/**  * Returns the value for the cumulative total number of statements that can be made in all loops  * in a script before an exception is thrown.  This attempts to prevent infinite loops.  Note if  * the counter is set to 0, no loop counter will be written.  */ public int getMaxLoopCounter() {     return maxLoopCounter. }
true;public;1;3;/**  * Set the cumulative total number of statements that can be made in all loops.  * @see #getMaxLoopCounter  */ ;/**  * Set the cumulative total number of statements that can be made in all loops.  * @see #getMaxLoopCounter  */ public void setMaxLoopCounter(int max) {     this.maxLoopCounter = max. }
true;public;0;3;/**  * Returns true if the compiler should be picky. This means it runs slower and enables additional  * runtime checks, throwing an exception if there are ambiguities in the grammar or other low level  * parsing problems.  */ ;/**  * Returns true if the compiler should be picky. This means it runs slower and enables additional  * runtime checks, throwing an exception if there are ambiguities in the grammar or other low level  * parsing problems.  */ public boolean isPicky() {     return picky. }
true;public;1;3;/**  * Set to true if compilation should be picky.  * @see #isPicky  */ ;/**  * Set to true if compilation should be picky.  * @see #isPicky  */ public void setPicky(boolean picky) {     this.picky = picky. }
true;public;0;3;/**  * Returns initial call site depth. This means we pretend we've already seen N different types,  * to better exercise fallback code in tests.  */ ;/**  * Returns initial call site depth. This means we pretend we've already seen N different types,  * to better exercise fallback code in tests.  */ public int getInitialCallSiteDepth() {     return initialCallSiteDepth. }
true;public;1;3;/**  * For testing megamorphic fallbacks. Do not use.  * @see #getInitialCallSiteDepth()  */ ;/**  * For testing megamorphic fallbacks. Do not use.  * @see #getInitialCallSiteDepth()  */ public void setInitialCallSiteDepth(int depth) {     this.initialCallSiteDepth = depth. }
true;public;0;3;/**  * Are regexes enabled? They are currently disabled by default because they break out of the loop counter and even fairly simple  * <strong>looking</strong> regexes can cause stack overflows.  */ ;/**  * Are regexes enabled? They are currently disabled by default because they break out of the loop counter and even fairly simple  * <strong>looking</strong> regexes can cause stack overflows.  */ public boolean areRegexesEnabled() {     return regexesEnabled. }
true;public;1;3;/**  * Are regexes enabled? They are currently disabled by default because they break out of the loop counter and even fairly simple  * <strong>looking</strong> regexes can cause stack overflows.  */ ;/**  * Are regexes enabled? They are currently disabled by default because they break out of the loop counter and even fairly simple  * <strong>looking</strong> regexes can cause stack overflows.  */ public void setRegexesEnabled(boolean regexesEnabled) {     this.regexesEnabled = regexesEnabled. }
