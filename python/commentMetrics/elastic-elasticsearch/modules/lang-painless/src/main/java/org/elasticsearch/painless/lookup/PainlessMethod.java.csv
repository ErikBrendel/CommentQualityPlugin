# id;timestamp;commentText;codeText;commentWords;codeWords
PainlessMethod -> public MethodType getMethodType();1531179852;Returns MethodType for this method._<p>_This works even for user-defined Methods (where the MethodHandle is null).;public MethodType getMethodType() {_        _        _        if (handle != null) {_            return handle.type()__        }_        _        final Class<?> params[]__        final Class<?> returnValue__        if (augmentation != null) {_            _            params = new Class<?>[1 + arguments.size()]__            params[0] = augmentation__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i + 1] = PainlessLookup.defClassToObjectClass(arguments.get(i))__            }_            returnValue = PainlessLookup.defClassToObjectClass(rtn)__        } else if (Modifier.isStatic(modifiers)) {_            _            params = new Class<?>[arguments.size()]__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i] = PainlessLookup.defClassToObjectClass(arguments.get(i))__            }_            returnValue = PainlessLookup.defClassToObjectClass(rtn)__        } else if ("<init>".equals(name)) {_            _            params = new Class<?>[arguments.size()]__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i] = PainlessLookup.defClassToObjectClass(arguments.get(i))__            }_            returnValue = owner.clazz__        } else {_            _            params = new Class<?>[1 + arguments.size()]__            params[0] = owner.clazz__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i + 1] = PainlessLookup.defClassToObjectClass(arguments.get(i))__            }_            returnValue = PainlessLookup.defClassToObjectClass(rtn)__        }_        return MethodType.methodType(returnValue, params)__    };returns,method,type,for,this,method,p,this,works,even,for,user,defined,methods,where,the,method,handle,is,null;public,method,type,get,method,type,if,handle,null,return,handle,type,final,class,params,final,class,return,value,if,augmentation,null,params,new,class,1,arguments,size,params,0,augmentation,for,int,i,0,i,arguments,size,i,params,i,1,painless,lookup,def,class,to,object,class,arguments,get,i,return,value,painless,lookup,def,class,to,object,class,rtn,else,if,modifier,is,static,modifiers,params,new,class,arguments,size,for,int,i,0,i,arguments,size,i,params,i,painless,lookup,def,class,to,object,class,arguments,get,i,return,value,painless,lookup,def,class,to,object,class,rtn,else,if,init,equals,name,params,new,class,arguments,size,for,int,i,0,i,arguments,size,i,params,i,painless,lookup,def,class,to,object,class,arguments,get,i,return,value,owner,clazz,else,params,new,class,1,arguments,size,params,0,owner,clazz,for,int,i,0,i,arguments,size,i,params,i,1,painless,lookup,def,class,to,object,class,arguments,get,i,return,value,painless,lookup,def,class,to,object,class,rtn,return,method,type,method,type,return,value,params
PainlessMethod -> public MethodType getMethodType();1531910483;Returns MethodType for this method._<p>_This works even for user-defined Methods (where the MethodHandle is null).;public MethodType getMethodType() {_        _        _        if (handle != null) {_            return handle.type()__        }_        _        final Class<?> params[]__        final Class<?> returnValue__        if (augmentation != null) {_            _            params = new Class<?>[1 + arguments.size()]__            params[0] = augmentation__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i + 1] = PainlessLookupUtility.painlessDefTypeToJavaObjectType(arguments.get(i))__            }_            returnValue = PainlessLookupUtility.painlessDefTypeToJavaObjectType(rtn)__        } else if (Modifier.isStatic(modifiers)) {_            _            params = new Class<?>[arguments.size()]__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i] = PainlessLookupUtility.painlessDefTypeToJavaObjectType(arguments.get(i))__            }_            returnValue = PainlessLookupUtility.painlessDefTypeToJavaObjectType(rtn)__        } else if ("<init>".equals(name)) {_            _            params = new Class<?>[arguments.size()]__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i] = PainlessLookupUtility.painlessDefTypeToJavaObjectType(arguments.get(i))__            }_            returnValue = target__        } else {_            _            params = new Class<?>[1 + arguments.size()]__            params[0] = target__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i + 1] = PainlessLookupUtility.painlessDefTypeToJavaObjectType(arguments.get(i))__            }_            returnValue = PainlessLookupUtility.painlessDefTypeToJavaObjectType(rtn)__        }_        return MethodType.methodType(returnValue, params)__    };returns,method,type,for,this,method,p,this,works,even,for,user,defined,methods,where,the,method,handle,is,null;public,method,type,get,method,type,if,handle,null,return,handle,type,final,class,params,final,class,return,value,if,augmentation,null,params,new,class,1,arguments,size,params,0,augmentation,for,int,i,0,i,arguments,size,i,params,i,1,painless,lookup,utility,painless,def,type,to,java,object,type,arguments,get,i,return,value,painless,lookup,utility,painless,def,type,to,java,object,type,rtn,else,if,modifier,is,static,modifiers,params,new,class,arguments,size,for,int,i,0,i,arguments,size,i,params,i,painless,lookup,utility,painless,def,type,to,java,object,type,arguments,get,i,return,value,painless,lookup,utility,painless,def,type,to,java,object,type,rtn,else,if,init,equals,name,params,new,class,arguments,size,for,int,i,0,i,arguments,size,i,params,i,painless,lookup,utility,painless,def,type,to,java,object,type,arguments,get,i,return,value,target,else,params,new,class,1,arguments,size,params,0,target,for,int,i,0,i,arguments,size,i,params,i,1,painless,lookup,utility,painless,def,type,to,java,object,type,arguments,get,i,return,value,painless,lookup,utility,painless,def,type,to,java,object,type,rtn,return,method,type,method,type,return,value,params
PainlessMethod -> public MethodType getMethodType();1532069817;Returns MethodType for this method._<p>_This works even for user-defined Methods (where the MethodHandle is null).;public MethodType getMethodType() {_        _        _        if (handle != null) {_            return handle.type()__        }_        _        final Class<?> params[]__        final Class<?> returnValue__        if (augmentation != null) {_            _            params = new Class<?>[1 + arguments.size()]__            params[0] = augmentation__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i + 1] = PainlessLookupUtility.typeToJavaType(arguments.get(i))__            }_            returnValue = PainlessLookupUtility.typeToJavaType(rtn)__        } else if (Modifier.isStatic(modifiers)) {_            _            params = new Class<?>[arguments.size()]__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i] = PainlessLookupUtility.typeToJavaType(arguments.get(i))__            }_            returnValue = PainlessLookupUtility.typeToJavaType(rtn)__        } else if ("<init>".equals(name)) {_            _            params = new Class<?>[arguments.size()]__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i] = PainlessLookupUtility.typeToJavaType(arguments.get(i))__            }_            returnValue = target__        } else {_            _            params = new Class<?>[1 + arguments.size()]__            params[0] = target__            for (int i = 0_ i < arguments.size()_ i++) {_                params[i + 1] = PainlessLookupUtility.typeToJavaType(arguments.get(i))__            }_            returnValue = PainlessLookupUtility.typeToJavaType(rtn)__        }_        return MethodType.methodType(returnValue, params)__    };returns,method,type,for,this,method,p,this,works,even,for,user,defined,methods,where,the,method,handle,is,null;public,method,type,get,method,type,if,handle,null,return,handle,type,final,class,params,final,class,return,value,if,augmentation,null,params,new,class,1,arguments,size,params,0,augmentation,for,int,i,0,i,arguments,size,i,params,i,1,painless,lookup,utility,type,to,java,type,arguments,get,i,return,value,painless,lookup,utility,type,to,java,type,rtn,else,if,modifier,is,static,modifiers,params,new,class,arguments,size,for,int,i,0,i,arguments,size,i,params,i,painless,lookup,utility,type,to,java,type,arguments,get,i,return,value,painless,lookup,utility,type,to,java,type,rtn,else,if,init,equals,name,params,new,class,arguments,size,for,int,i,0,i,arguments,size,i,params,i,painless,lookup,utility,type,to,java,type,arguments,get,i,return,value,target,else,params,new,class,1,arguments,size,params,0,target,for,int,i,0,i,arguments,size,i,params,i,1,painless,lookup,utility,type,to,java,type,arguments,get,i,return,value,painless,lookup,utility,type,to,java,type,rtn,return,method,type,method,type,return,value,params
