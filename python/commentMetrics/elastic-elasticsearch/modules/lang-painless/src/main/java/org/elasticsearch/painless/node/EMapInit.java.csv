commented;modifiers;parameterAmount;loc;comment;code
false;;1;10;;@Override void extractVariables(Set<String> variables) {     for (AExpression key : keys) {         key.extractVariables(variables).     }     for (AExpression value : values) {         value.extractVariables(variables).     } }
false;;1;43;;@Override void analyze(Locals locals) {     if (!read) {         throw createError(new IllegalArgumentException("Must read from map initializer.")).     }     actual = HashMap.class.     constructor = locals.getPainlessLookup().lookupPainlessConstructor(actual, 0).     if (constructor == null) {         throw createError(new IllegalArgumentException("constructor [" + typeToCanonicalTypeName(actual) + ", <init>/0] not found")).     }     method = locals.getPainlessLookup().lookupPainlessMethod(actual, false, "put", 2).     if (method == null) {         throw createError(new IllegalArgumentException("method [" + typeToCanonicalTypeName(actual) + ", put/2] not found")).     }     if (keys.size() != values.size()) {         throw createError(new IllegalStateException("Illegal tree structure.")).     }     for (int index = 0. index < keys.size(). ++index) {         AExpression expression = keys.get(index).         expression.expected = def.class.         expression.internal = true.         expression.analyze(locals).         keys.set(index, expression.cast(locals)).     }     for (int index = 0. index < values.size(). ++index) {         AExpression expression = values.get(index).         expression.expected = def.class.         expression.internal = true.         expression.analyze(locals).         values.set(index, expression.cast(locals)).     } }
false;;2;20;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.newInstance(MethodWriter.getType(actual)).     writer.dup().     writer.invokeConstructor(Type.getType(constructor.javaConstructor.getDeclaringClass()), Method.getMethod(constructor.javaConstructor)).     for (int index = 0. index < keys.size(). ++index) {         AExpression key = keys.get(index).         AExpression value = values.get(index).         writer.dup().         key.write(writer, globals).         value.write(writer, globals).         writer.invokeMethodCall(method).         writer.pop().     } }
false;public;0;4;;@Override public String toString() {     return singleLineToString(pairwiseToString(keys, values)). }
