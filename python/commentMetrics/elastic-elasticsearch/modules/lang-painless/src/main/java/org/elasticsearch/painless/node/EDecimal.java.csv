commented;modifiers;parameterAmount;loc;comment;code
false;;1;2;;@Override void extractVariables(Set<String> variables) { }
false;;1;26;;@Override void analyze(Locals locals) {     if (!read) {         throw createError(new IllegalArgumentException("Must read from constant [" + value + "].")).     }     if (value.endsWith("f") || value.endsWith("F")) {         try {             constant = Float.parseFloat(value.substring(0, value.length() - 1)).             actual = float.class.         } catch (NumberFormatException exception) {             throw createError(new IllegalArgumentException("Invalid float constant [" + value + "].")).         }     } else {         String toParse = value.         if (toParse.endsWith("d") || value.endsWith("D")) {             toParse = toParse.substring(0, value.length() - 1).         }         try {             constant = Double.parseDouble(toParse).             actual = double.class.         } catch (NumberFormatException exception) {             throw createError(new IllegalArgumentException("Invalid double constant [" + value + "].")).         }     } }
false;;2;4;;@Override void write(MethodWriter writer, Globals globals) {     throw createError(new IllegalStateException("Illegal tree structure.")). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(value). }
