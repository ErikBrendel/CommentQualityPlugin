commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Override public ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {     Map<ScriptContext<?>, List<Whitelist>> contextsWithWhitelists = new HashMap<>().     for (ScriptContext<?> context : contexts) {         // we might have a context that only uses the base whitelists, so would not have been filled in by reloadSPI         List<Whitelist> contextWhitelists = whitelists.get(context).         if (contextWhitelists == null) {             contextWhitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS).         }         contextsWithWhitelists.put(context, contextWhitelists).     }     return new PainlessScriptEngine(settings, contextsWithWhitelists). }
false;public;0;4;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(CompilerSettings.REGEX_ENABLED). }
false;public;1;10;;@Override public void reloadSPI(ClassLoader loader) {     for (PainlessExtension extension : ServiceLoader.load(PainlessExtension.class, loader)) {         for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : extension.getContextWhitelists().entrySet()) {             List<Whitelist> existing = whitelists.computeIfAbsent(entry.getKey(), c -> new ArrayList<>(Whitelist.BASE_WHITELISTS)).             existing.addAll(entry.getValue()).         }     } }
false;public;0;4;;@Override public List<ScriptContext<?>> getContexts() {     return Collections.singletonList(PainlessExecuteAction.PainlessTestScript.CONTEXT). }
false;public;0;6;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     return Collections.singletonList(new ActionHandler<>(PainlessExecuteAction.INSTANCE, PainlessExecuteAction.TransportAction.class)). }
false;public;7;7;;@Override public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster) {     return Collections.singletonList(new PainlessExecuteAction.RestAction(settings, restController)). }
