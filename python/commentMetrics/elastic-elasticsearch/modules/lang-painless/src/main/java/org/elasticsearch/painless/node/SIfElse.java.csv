commented;modifiers;parameterAmount;loc;comment;code
false;;1;12;;@Override void extractVariables(Set<String> variables) {     condition.extractVariables(variables).     if (ifblock != null) {         ifblock.extractVariables(variables).     }     if (elseblock != null) {         elseblock.extractVariables(variables).     } }
false;;1;41;;@Override void analyze(Locals locals) {     condition.expected = boolean.class.     condition.analyze(locals).     condition = condition.cast(locals).     if (condition.constant != null) {         throw createError(new IllegalArgumentException("Extraneous if statement.")).     }     if (ifblock == null) {         throw createError(new IllegalArgumentException("Extraneous if statement.")).     }     ifblock.lastSource = lastSource.     ifblock.inLoop = inLoop.     ifblock.lastLoop = lastLoop.     ifblock.analyze(Locals.newLocalScope(locals)).     anyContinue = ifblock.anyContinue.     anyBreak = ifblock.anyBreak.     statementCount = ifblock.statementCount.     if (elseblock == null) {         throw createError(new IllegalArgumentException("Extraneous else statement.")).     }     elseblock.lastSource = lastSource.     elseblock.inLoop = inLoop.     elseblock.lastLoop = lastLoop.     elseblock.analyze(Locals.newLocalScope(locals)).     methodEscape = ifblock.methodEscape && elseblock.methodEscape.     loopEscape = ifblock.loopEscape && elseblock.loopEscape.     allEscape = ifblock.allEscape && elseblock.allEscape.     anyContinue |= elseblock.anyContinue.     anyBreak |= elseblock.anyBreak.     statementCount = Math.max(ifblock.statementCount, elseblock.statementCount). }
false;;2;26;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     Label fals = new Label().     Label end = new Label().     condition.write(writer, globals).     writer.ifZCmp(Opcodes.IFEQ, fals).     ifblock.continu = continu.     ifblock.brake = brake.     ifblock.write(writer, globals).     if (!ifblock.allEscape) {         writer.goTo(end).     }     writer.mark(fals).     elseblock.continu = continu.     elseblock.brake = brake.     elseblock.write(writer, globals).     writer.mark(end). }
false;public;0;4;;@Override public String toString() {     return multilineToString(singleton(condition), Arrays.asList(ifblock, elseblock)). }
