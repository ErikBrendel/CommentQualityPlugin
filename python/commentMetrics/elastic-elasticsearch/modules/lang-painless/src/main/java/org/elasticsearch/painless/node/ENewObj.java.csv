commented;modifiers;parameterAmount;loc;comment;code
false;;1;6;;@Override void extractVariables(Set<String> variables) {     for (AExpression argument : arguments) {         argument.extractVariables(variables).     } }
false;;1;35;;@Override void analyze(Locals locals) {     actual = locals.getPainlessLookup().canonicalTypeNameToType(this.type).     if (actual == null) {         throw createError(new IllegalArgumentException("Not a type [" + this.type + "].")).     }     constructor = locals.getPainlessLookup().lookupPainlessConstructor(actual, arguments.size()).     if (constructor == null) {         throw createError(new IllegalArgumentException("constructor [" + typeToCanonicalTypeName(actual) + ", <init>/" + arguments.size() + "] not found")).     }     Class<?>[] types = new Class<?>[constructor.typeParameters.size()].     constructor.typeParameters.toArray(types).     if (constructor.typeParameters.size() != arguments.size()) {         throw createError(new IllegalArgumentException("When calling constructor on type [" + PainlessLookupUtility.typeToCanonicalTypeName(actual) + "] " + "expected [" + constructor.typeParameters.size() + "] arguments, but found [" + arguments.size() + "].")).     }     for (int argument = 0. argument < arguments.size(). ++argument) {         AExpression expression = arguments.get(argument).         expression.expected = types[argument].         expression.internal = true.         expression.analyze(locals).         arguments.set(argument, expression.cast(locals)).     }     statement = true. }
false;;2;17;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.newInstance(MethodWriter.getType(actual)).     if (read) {         writer.dup().     }     for (AExpression argument : arguments) {         argument.write(writer, globals).     }     writer.invokeConstructor(Type.getType(constructor.javaConstructor.getDeclaringClass()), Method.getMethod(constructor.javaConstructor)). }
false;public;0;4;;@Override public String toString() {     return singleLineToStringWithOptionalArgs(arguments, type). }
