# id;timestamp;commentText;codeText;commentWords;codeWords
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1524684173;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            if (context.instanceClazz.equals(SearchScript.class) || context.instanceClazz.equals(ExecutableScript.class)) {_                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class, new Definition(entry.getValue())))__            } else {_                contextsToCompilers.put(context, new Compiler(context.instanceClazz, new Definition(entry.getValue())))__            }_        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,if,context,instance,clazz,equals,search,script,class,context,instance,clazz,equals,executable,script,class,contexts,to,compilers,put,context,new,compiler,generic,elasticsearch,script,class,new,definition,entry,get,value,else,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,new,definition,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1531179852;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            if (context.instanceClazz.equals(SearchScript.class) || context.instanceClazz.equals(ExecutableScript.class)) {_                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class, new PainlessLookup(entry.getValue())))__            } else {_                contextsToCompilers.put(context, new Compiler(context.instanceClazz, new PainlessLookup(entry.getValue())))__            }_        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,if,context,instance,clazz,equals,search,script,class,context,instance,clazz,equals,executable,script,class,contexts,to,compilers,put,context,new,compiler,generic,elasticsearch,script,class,new,painless,lookup,entry,get,value,else,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,new,painless,lookup,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1531729807;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            if (context.instanceClazz.equals(SearchScript.class) || context.instanceClazz.equals(ExecutableScript.class)) {_                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class, new PainlessLookup(entry.getValue())))__            } else {_                contextsToCompilers.put(context, new Compiler(context.instanceClazz, new PainlessLookup(entry.getValue())))__            }_        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,if,context,instance,clazz,equals,search,script,class,context,instance,clazz,equals,executable,script,class,contexts,to,compilers,put,context,new,compiler,generic,elasticsearch,script,class,new,painless,lookup,entry,get,value,else,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,new,painless,lookup,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1531910483;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            if (context.instanceClazz.equals(SearchScript.class) || context.instanceClazz.equals(ExecutableScript.class)) {_                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class,_                    new PainlessLookupBuilder(entry.getValue()).build()))__            } else {_                contextsToCompilers.put(context, new Compiler(context.instanceClazz,_                    new PainlessLookupBuilder(entry.getValue()).build()))__            }_        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,if,context,instance,clazz,equals,search,script,class,context,instance,clazz,equals,executable,script,class,contexts,to,compilers,put,context,new,compiler,generic,elasticsearch,script,class,new,painless,lookup,builder,entry,get,value,build,else,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,new,painless,lookup,builder,entry,get,value,build,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1532598597;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            if (context.instanceClazz.equals(SearchScript.class) || context.instanceClazz.equals(ExecutableScript.class)) {_                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class,_                        PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__            } else {_                contextsToCompilers.put(context, new Compiler(context.instanceClazz,_                        PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__            }_        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,if,context,instance,clazz,equals,search,script,class,context,instance,clazz,equals,executable,script,class,contexts,to,compilers,put,context,new,compiler,generic,elasticsearch,script,class,painless,lookup,builder,build,from,whitelists,entry,get,value,else,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,painless,lookup,builder,build,from,whitelists,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1533063033;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            if (context.instanceClazz.equals(SearchScript.class) || context.instanceClazz.equals(ExecutableScript.class)) {_                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class, null, null,_                        PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__            } else {_                contextsToCompilers.put(context, new Compiler(context.instanceClazz, context.factoryClazz, context.statefulFactoryClazz,_                        PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__            }_        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,if,context,instance,clazz,equals,search,script,class,context,instance,clazz,equals,executable,script,class,contexts,to,compilers,put,context,new,compiler,generic,elasticsearch,script,class,null,null,painless,lookup,builder,build,from,whitelists,entry,get,value,else,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,context,factory,clazz,context,stateful,factory,clazz,painless,lookup,builder,build,from,whitelists,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1538170812;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            if (context.instanceClazz.equals(SearchScript.class) || context.instanceClazz.equals(ExecutableScript.class)) {_                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class, null, null,_                        PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__            } else {_                contextsToCompilers.put(context, new Compiler(context.instanceClazz, context.factoryClazz, context.statefulFactoryClazz,_                        PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__            }_        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,if,context,instance,clazz,equals,search,script,class,context,instance,clazz,equals,executable,script,class,contexts,to,compilers,put,context,new,compiler,generic,elasticsearch,script,class,null,null,painless,lookup,builder,build,from,whitelists,entry,get,value,else,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,context,factory,clazz,context,stateful,factory,clazz,painless,lookup,builder,build,from,whitelists,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1538424609;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            if (context.instanceClazz.equals(SearchScript.class)) {_                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class, null, null,_                        PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__            } else {_                contextsToCompilers.put(context, new Compiler(context.instanceClazz, context.factoryClazz, context.statefulFactoryClazz,_                        PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__            }_        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,if,context,instance,clazz,equals,search,script,class,contexts,to,compilers,put,context,new,compiler,generic,elasticsearch,script,class,null,null,painless,lookup,builder,build,from,whitelists,entry,get,value,else,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,context,factory,clazz,context,stateful,factory,clazz,painless,lookup,builder,build,from,whitelists,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1540486836;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        super(settings)___        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            contextsToCompilers.put(context, new Compiler(context.instanceClazz, context.factoryClazz, context.statefulFactoryClazz,_                    PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,super,settings,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,context,factory,clazz,context,stateful,factory,clazz,painless,lookup,builder,build,from,whitelists,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1541092382;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            contextsToCompilers.put(context, new Compiler(context.instanceClazz, context.factoryClazz, context.statefulFactoryClazz,_                    PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,context,factory,clazz,context,stateful,factory,clazz,painless,lookup,builder,build,from,whitelists,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts);1541605932;Constructor._@param settings The settings to initialize the engine with.;public PainlessScriptEngine(Settings settings, Map<ScriptContext<?>, List<Whitelist>> contexts) {_        defaultCompilerSettings.setRegexesEnabled(CompilerSettings.REGEX_ENABLED.get(settings))___        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>()___        for (Map.Entry<ScriptContext<?>, List<Whitelist>> entry : contexts.entrySet()) {_            ScriptContext<?> context = entry.getKey()__            contextsToCompilers.put(context, new Compiler(context.instanceClazz, context.factoryClazz, context.statefulFactoryClazz,_                    PainlessLookupBuilder.buildFromWhitelists(entry.getValue())))__        }__        this.contextsToCompilers = Collections.unmodifiableMap(contextsToCompilers)__    };constructor,param,settings,the,settings,to,initialize,the,engine,with;public,painless,script,engine,settings,settings,map,script,context,list,whitelist,contexts,default,compiler,settings,set,regexes,enabled,compiler,settings,get,settings,map,script,context,compiler,contexts,to,compilers,new,hash,map,for,map,entry,script,context,list,whitelist,entry,contexts,entry,set,script,context,context,entry,get,key,contexts,to,compilers,put,context,new,compiler,context,instance,clazz,context,factory,clazz,context,stateful,factory,clazz,painless,lookup,builder,build,from,whitelists,entry,get,value,this,contexts,to,compilers,collections,unmodifiable,map,contexts,to,compilers
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1524684173;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1531179852;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1531729807;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1531910483;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1532598597;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1533063033;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1538170812;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1538424609;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1540486836;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1541092382;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved);1541605932;Generates a stateful factory class that will return script instances.  Acts as a middle man between_the {@link ScriptContext#factoryClazz} and the {@link ScriptContext#instanceClazz} when used so that_the stateless factory can be used for caching and the stateful factory can act as a cache for new_script instances.  Uses the newInstance method from a {@link ScriptContext#statefulFactoryClazz} to_define the factory method to create new instances of the {@link ScriptContext#instanceClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param <T> The factory class._@return A factory class that will return script instances.;private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName()__        String className = interfaceBase + "$StatefulFactory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        Method newFactory = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newFactory".equals(method.getName())) {_                newFactory = method___                break__            }_        }__        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, "$arg" + count,_                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd()__        }__        org.objectweb.asm.commons.Method base =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())__        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, base)___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            constructor.loadThis()__            constructor.loadArg(count)__            constructor.putField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        constructor.returnValue()__        constructor.endMethod()___        Method newInstance = null___        for (Method method : context.statefulFactoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                newInstance = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),_            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString())___        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()))__        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()))___        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(WriterConstants.CLASS_TYPE)__        adapter.dup()___        for (int count = 0_ count < newFactory.getParameterTypes().length_ ++count) {_            adapter.loadThis()__            adapter.getField(Type.getType(className), "$arg" + count, Type.getType(newFactory.getParameterTypes()[count]))__        }__        adapter.loadArgs()__        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved)__        writer.visitEnd()___        loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        return Type.getType(className)__    };generates,a,stateful,factory,class,that,will,return,script,instances,acts,as,a,middle,man,between,the,link,script,context,factory,clazz,and,the,link,script,context,instance,clazz,when,used,so,that,the,stateless,factory,can,be,used,for,caching,and,the,stateful,factory,can,act,as,a,cache,for,new,script,instances,uses,the,new,instance,method,from,a,link,script,context,stateful,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,type,generate,stateful,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,stateful,factory,clazz,get,internal,name,string,class,name,interface,base,stateful,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,method,new,factory,null,for,method,method,context,factory,clazz,get,methods,if,new,factory,equals,method,get,name,new,factory,method,break,for,int,count,0,count,new,factory,get,parameter,types,length,count,writer,visit,field,opcodes,opcodes,arg,count,type,get,type,new,factory,get,parameter,types,count,get,descriptor,null,null,visit,end,org,objectweb,asm,commons,method,base,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,new,factory,get,parameter,types,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,base,for,int,count,0,count,new,factory,get,parameter,types,length,count,constructor,load,this,constructor,load,arg,count,constructor,put,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,constructor,return,value,constructor,end,method,method,new,instance,null,for,method,method,context,stateful,factory,clazz,get,methods,if,new,instance,equals,method,get,name,new,instance,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,new,instance,get,name,method,type,method,type,new,instance,get,return,type,new,instance,get,parameter,types,to,method,descriptor,string,list,class,parameters,new,array,list,arrays,as,list,new,factory,get,parameter,types,parameters,add,all,arrays,as,list,new,instance,get,parameter,types,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,parameters,to,array,new,class,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,writer,constants,adapter,dup,for,int,count,0,count,new,factory,get,parameter,types,length,count,adapter,load,this,adapter,get,field,type,get,type,class,name,arg,count,type,get,type,new,factory,get,parameter,types,count,adapter,load,args,adapter,invoke,constructor,writer,constants,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,stateful,factory,clazz,writer,reserved,writer,visit,end,loader,define,factory,class,name,replace,writer,to,byte,array,return,type,get,type,class,name
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1524684173;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1531179852;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1531729807;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1531910483;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1532598597;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1533063033;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1538170812;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1538424609;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1540486836;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1541092382;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType);1541605932;Generates a factory class that will return script instances or stateful factories._Uses the newInstance method from a {@link ScriptContext#factoryClazz} to define the factory method_to create new instances of the {@link ScriptContext#instanceClazz} or uses the newFactory method_to create new factories of the {@link ScriptContext#statefulFactoryClazz}._@param loader The {@link ClassLoader} that is used to define the factory class and script class._@param context The {@link ScriptContext}'s semantics are used to define the factory class._@param classType The type to be instaniated in the newFactory or newInstance method.  Depends_on whether a {@link ScriptContext#statefulFactoryClazz} is specified._@param <T> The factory class._@return A factory class that will return script instances.;private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {_        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS__        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL__        String interfaceBase = Type.getType(context.factoryClazz).getInternalName()__        String className = interfaceBase + "$Factory"__        String classInterfaces[] = new String[] { interfaceBase }___        ClassWriter writer = new ClassWriter(classFrames)__        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces)___        org.objectweb.asm.commons.Method init =_            new org.objectweb.asm.commons.Method("<init>", MethodType.methodType(void.class).toMethodDescriptorString())___        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,_                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null))__        constructor.visitCode()__        constructor.loadThis()__        constructor.invokeConstructor(OBJECT_TYPE, init)__        constructor.returnValue()__        constructor.endMethod()___        Method reflect = null___        for (Method method : context.factoryClazz.getMethods()) {_            if ("newInstance".equals(method.getName())) {_                reflect = method___                break__            } else if ("newFactory".equals(method.getName())) {_                reflect = method___                break__            }_        }__        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),_            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString())__        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method("<init>",_            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString())___        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,_                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,_                                   instance.getName(), instance.getDescriptor(), null, null))__        adapter.visitCode()__        adapter.newInstance(classType)__        adapter.dup()__        adapter.loadArgs()__        adapter.invokeConstructor(classType, constru)__        adapter.returnValue()__        adapter.endMethod()___        writeNeedsMethods(context.factoryClazz, writer, reserved)__        writer.visitEnd()___        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray())___        try {_            return context.factoryClazz.cast(factory.getConstructor().newInstance())__        } catch (Exception exception) { _            throw new IllegalStateException(_                "An internal error occurred attempting to define the factory class [" + className + "].", exception)__        }_    };generates,a,factory,class,that,will,return,script,instances,or,stateful,factories,uses,the,new,instance,method,from,a,link,script,context,factory,clazz,to,define,the,factory,method,to,create,new,instances,of,the,link,script,context,instance,clazz,or,uses,the,new,factory,method,to,create,new,factories,of,the,link,script,context,stateful,factory,clazz,param,loader,the,link,class,loader,that,is,used,to,define,the,factory,class,and,script,class,param,context,the,link,script,context,s,semantics,are,used,to,define,the,factory,class,param,class,type,the,type,to,be,instaniated,in,the,new,factory,or,new,instance,method,depends,on,whether,a,link,script,context,stateful,factory,clazz,is,specified,param,t,the,factory,class,return,a,factory,class,that,will,return,script,instances;private,t,t,generate,factory,loader,loader,script,context,t,context,main,method,reserved,reserved,type,class,type,int,class,frames,class,writer,class,writer,int,class,access,opcodes,opcodes,opcodes,string,interface,base,type,get,type,context,factory,clazz,get,internal,name,string,class,name,interface,base,factory,string,class,interfaces,new,string,interface,base,class,writer,writer,new,class,writer,class,frames,writer,visit,writer,constants,class,access,class,name,null,get,internal,name,class,interfaces,org,objectweb,asm,commons,method,init,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,to,method,descriptor,string,generator,adapter,constructor,new,generator,adapter,opcodes,asm5,init,writer,visit,method,opcodes,init,get,name,init,get,descriptor,null,null,constructor,visit,code,constructor,load,this,constructor,invoke,constructor,init,constructor,return,value,constructor,end,method,method,reflect,null,for,method,method,context,factory,clazz,get,methods,if,new,instance,equals,method,get,name,reflect,method,break,else,if,new,factory,equals,method,get,name,reflect,method,break,org,objectweb,asm,commons,method,instance,new,org,objectweb,asm,commons,method,reflect,get,name,method,type,method,type,reflect,get,return,type,reflect,get,parameter,types,to,method,descriptor,string,org,objectweb,asm,commons,method,constru,new,org,objectweb,asm,commons,method,init,method,type,method,type,void,class,reflect,get,parameter,types,to,method,descriptor,string,generator,adapter,adapter,new,generator,adapter,opcodes,asm5,instance,writer,visit,method,opcodes,opcodes,instance,get,name,instance,get,descriptor,null,null,adapter,visit,code,adapter,new,instance,class,type,adapter,dup,adapter,load,args,adapter,invoke,constructor,class,type,constru,adapter,return,value,adapter,end,method,write,needs,methods,context,factory,clazz,writer,reserved,writer,visit,end,class,factory,loader,define,factory,class,name,replace,writer,to,byte,array,try,return,context,factory,clazz,cast,factory,get,constructor,new,instance,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,factory,class,class,name,exception
PainlessScriptEngine -> @Override     public String getType();1524684173;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1531179852;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1531729807;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1531910483;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1532598597;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1533063033;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1538170812;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1538424609;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1540486836;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1541092382;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
PainlessScriptEngine -> @Override     public String getType();1541605932;Get the type name(s) for the language._@return Always contains only the single name of the language.;@Override_    public String getType() {_        return NAME__    };get,the,type,name,s,for,the,language,return,always,contains,only,the,single,name,of,the,language;override,public,string,get,type,return,name
