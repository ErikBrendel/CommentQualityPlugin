commented;modifiers;parameterAmount;loc;comment;code
false;;1;6;;@Override void extractVariables(Set<String> variables) {     for (AStatement statement : statements) {         statement.extractVariables(variables).     } }
false;;1;29;;@Override void analyze(Locals locals) {     if (statements == null || statements.isEmpty()) {         throw createError(new IllegalArgumentException("A block must contain at least one statement.")).     }     AStatement last = statements.get(statements.size() - 1).     for (AStatement statement : statements) {         // there is no statement that can be unreachable after the last.         if (allEscape) {             throw createError(new IllegalArgumentException("Unreachable statement.")).         }         statement.inLoop = inLoop.         statement.lastSource = lastSource && statement == last.         statement.lastLoop = (beginLoop || lastLoop) && statement == last.         statement.analyze(locals).         methodEscape = statement.methodEscape.         loopEscape = statement.loopEscape.         allEscape = statement.allEscape.         anyContinue |= statement.anyContinue.         anyBreak |= statement.anyBreak.         statementCount += statement.statementCount.     } }
false;;2;8;;@Override void write(MethodWriter writer, Globals globals) {     for (AStatement statement : statements) {         statement.continu = continu.         statement.brake = brake.         statement.write(writer, globals).     } }
false;public;0;4;;@Override public String toString() {     return multilineToString(emptyList(), statements). }
