commented;modifiers;parameterAmount;loc;comment;code
false;;1;8;;@Override void extractVariables(Set<String> variables) {     variables.add(name).     if (block != null) {         block.extractVariables(variables).     } }
false;;1;29;;@Override void analyze(Locals locals) {     Class<?> clazz = locals.getPainlessLookup().canonicalTypeNameToType(this.type).     if (clazz == null) {         throw createError(new IllegalArgumentException("Not a type [" + this.type + "].")).     }     if (!Exception.class.isAssignableFrom(clazz)) {         throw createError(new ClassCastException("Not an exception type [" + this.type + "].")).     }     variable = locals.addVariable(location, clazz, name, true).     if (block != null) {         block.lastSource = lastSource.         block.inLoop = inLoop.         block.lastLoop = lastLoop.         block.analyze(locals).         methodEscape = block.methodEscape.         loopEscape = block.loopEscape.         allEscape = block.allEscape.         anyContinue = block.anyContinue.         anyBreak = block.anyBreak.         statementCount = block.statementCount.     } }
false;;2;21;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     Label jump = new Label().     writer.mark(jump).     writer.visitVarInsn(MethodWriter.getType(variable.clazz).getOpcode(Opcodes.ISTORE), variable.getSlot()).     if (block != null) {         block.continu = continu.         block.brake = brake.         block.write(writer, globals).     }     writer.visitTryCatchBlock(begin, end, jump, MethodWriter.getType(variable.clazz).getInternalName()).     if (exception != null && !block.allEscape) {         writer.goTo(exception).     } }
false;public;0;4;;@Override public String toString() {     return singleLineToString(type, name, block). }
