commented;modifiers;parameterAmount;loc;comment;code
false;;1;8;;@Override void extractVariables(Set<String> variables) {     condition.extractVariables(variables).     if (block != null) {         block.extractVariables(variables).     } }
false;;1;40;;@Override void analyze(Locals locals) {     locals = Locals.newLocalScope(locals).     if (block == null) {         throw createError(new IllegalArgumentException("Extraneous do while loop.")).     }     block.beginLoop = true.     block.inLoop = true.     block.analyze(locals).     if (block.loopEscape && !block.anyContinue) {         throw createError(new IllegalArgumentException("Extraneous do while loop.")).     }     condition.expected = boolean.class.     condition.analyze(locals).     condition = condition.cast(locals).     if (condition.constant != null) {         continuous = (boolean) condition.constant.         if (!continuous) {             throw createError(new IllegalArgumentException("Extraneous do while loop.")).         }         if (!block.anyBreak) {             methodEscape = true.             allEscape = true.         }     }     statementCount = 1.     if (locals.hasVariable(Locals.LOOP)) {         loopCounter = locals.getVariable(location, Locals.LOOP).     } }
false;;2;28;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     Label start = new Label().     Label begin = new Label().     Label end = new Label().     writer.mark(start).     block.continu = begin.     block.brake = end.     block.write(writer, globals).     writer.mark(begin).     if (!continuous) {         condition.write(writer, globals).         writer.ifZCmp(Opcodes.IFEQ, end).     }     if (loopCounter != null) {         writer.writeLoopCounter(loopCounter.getSlot(), Math.max(1, block.statementCount), location).     }     writer.goTo(start).     writer.mark(end). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(condition, block). }
