commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) { // Do nothing. }
false;;1;17;;@Override void analyze(Locals locals) {     if (!read) {         throw createError(new IllegalArgumentException("Regex constant may only be read [" + pattern + "].")).     }     try {         Pattern.compile(pattern, flags).     } catch (PatternSyntaxException e) {         throw new Location(location.getSourceName(), location.getOffset() + 1 + e.getIndex()).createError(new IllegalArgumentException("Error compiling regex: " + e.getDescription())).     }     constant = new Constant(location, MethodWriter.getType(Pattern.class), "regexAt$" + location.getOffset(), this::initializeConstant).     actual = Pattern.class. }
false;;2;7;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.getStatic(WriterConstants.CLASS_TYPE, constant.name, org.objectweb.asm.Type.getType(Pattern.class)).     globals.addConstantInitializer(constant). }
false;private;1;5;;private void initializeConstant(MethodWriter writer) {     writer.push(pattern).     writer.push(flags).     writer.invokeStatic(org.objectweb.asm.Type.getType(Pattern.class), WriterConstants.PATTERN_COMPILE). }
false;private;1;14;;private int flagForChar(char c) {     switch(c) {         case 'c':             return Pattern.CANON_EQ.         case 'i':             return Pattern.CASE_INSENSITIVE.         case 'l':             return Pattern.LITERAL.         case 'm':             return Pattern.MULTILINE.         case 's':             return Pattern.DOTALL.         case 'U':             return Pattern.UNICODE_CHARACTER_CLASS.         case 'u':             return Pattern.UNICODE_CASE.         case 'x':             return Pattern.COMMENTS.         default:             throw new IllegalArgumentException("Unknown flag [" + c + "]").     } }
false;public;0;18;;@Override public String toString() {     StringBuilder f = new StringBuilder().     if ((flags & Pattern.CANON_EQ) != 0)         f.append('c').     if ((flags & Pattern.CASE_INSENSITIVE) != 0)         f.append('i').     if ((flags & Pattern.LITERAL) != 0)         f.append('l').     if ((flags & Pattern.MULTILINE) != 0)         f.append('m').     if ((flags & Pattern.DOTALL) != 0)         f.append('s').     if ((flags & Pattern.UNICODE_CHARACTER_CLASS) != 0)         f.append('U').     if ((flags & Pattern.UNICODE_CASE) != 0)         f.append('u').     if ((flags & Pattern.COMMENTS) != 0)         f.append('x').     String p = "/" + pattern + "/".     if (f.length() == 0) {         return singleLineToString(p).     }     return singleLineToString(p, f). }
