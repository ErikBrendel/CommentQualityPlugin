commented;modifiers;parameterAmount;loc;comment;code
true;public;1;8;/**  * Adds a new synthetic method to be written. It must be analyzed!  */ ;/**  * Adds a new synthetic method to be written. It must be analyzed!  */ public void addSyntheticMethod(SFunction function) {     if (!function.synthetic) {         throw new IllegalStateException("method: " + function.name + " is not synthetic").     }     if (syntheticMethods.put(function.name, function) != null) {         throw new IllegalStateException("synthetic method: " + function.name + " already exists").     } }
true;public;1;5;/**  * Adds a new constant initializer to be written  */ ;/**  * Adds a new constant initializer to be written  */ public void addConstantInitializer(Constant constant) {     if (constantInitializers.put(constant.name, constant) != null) {         throw new IllegalStateException("constant initializer: " + constant.name + " already exists").     } }
true;public;1;6;/**  * Adds a new class binding to be written as a local variable  */ ;/**  * Adds a new class binding to be written as a local variable  */ public String addClassBinding(Class<?> type) {     String name = "$class_binding$" + classBindings.size().     classBindings.put(name, type).     return name. }
true;public;1;3;/**  * Adds a new binding to be written as a local variable  */ ;/**  * Adds a new binding to be written as a local variable  */ public String addInstanceBinding(Object instance) {     return instanceBindings.computeIfAbsent(instance, key -> "$instance_binding$" + instanceBindings.size()). }
true;public;0;3;/**  * Returns the current synthetic methods  */ ;/**  * Returns the current synthetic methods  */ public Map<String, SFunction> getSyntheticMethods() {     return syntheticMethods. }
true;public;0;3;/**  * Returns the current initializers  */ ;/**  * Returns the current initializers  */ public Map<String, Constant> getConstantInitializers() {     return constantInitializers. }
true;public;0;3;/**  * Returns the current bindings  */ ;/**  * Returns the current bindings  */ public Map<String, Class<?>> getClassBindings() {     return classBindings. }
true;public;0;3;/**  * Returns the current bindings  */ ;/**  * Returns the current bindings  */ public Map<Object, String> getInstanceBindings() {     return instanceBindings. }
true;public;0;3;/**  * Returns the set of statement boundaries  */ ;/**  * Returns the set of statement boundaries  */ public BitSet getStatements() {     return statements. }
