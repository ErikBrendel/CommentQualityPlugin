commented;modifiers;parameterAmount;loc;comment;code
false;;1;18;;@Override void extractVariables(Set<String> variables) {     if (initializer != null) {         initializer.extractVariables(variables).     }     if (condition != null) {         condition.extractVariables(variables).     }     if (afterthought != null) {         afterthought.extractVariables(variables).     }     if (block != null) {         block.extractVariables(variables).     } }
false;;1;80;;@Override void analyze(Locals locals) {     locals = Locals.newLocalScope(locals).     if (initializer != null) {         if (initializer instanceof SDeclBlock) {             initializer.analyze(locals).         } else if (initializer instanceof AExpression) {             AExpression initializer = (AExpression) this.initializer.             initializer.read = false.             initializer.analyze(locals).             if (!initializer.statement) {                 throw createError(new IllegalArgumentException("Not a statement.")).             }             initializer.expected = initializer.actual.             this.initializer = initializer.cast(locals).         } else {             throw createError(new IllegalStateException("Illegal tree structure.")).         }     }     if (condition != null) {         condition.expected = boolean.class.         condition.analyze(locals).         condition = condition.cast(locals).         if (condition.constant != null) {             continuous = (boolean) condition.constant.             if (!continuous) {                 throw createError(new IllegalArgumentException("Extraneous for loop.")).             }             if (block == null) {                 throw createError(new IllegalArgumentException("For loop has no escape.")).             }         }     } else {         continuous = true.     }     if (afterthought != null) {         afterthought.read = false.         afterthought.analyze(locals).         if (!afterthought.statement) {             throw createError(new IllegalArgumentException("Not a statement.")).         }         afterthought.expected = afterthought.actual.         afterthought = afterthought.cast(locals).     }     if (block != null) {         block.beginLoop = true.         block.inLoop = true.         block.analyze(locals).         if (block.loopEscape && !block.anyContinue) {             throw createError(new IllegalArgumentException("Extraneous for loop.")).         }         if (continuous && !block.anyBreak) {             methodEscape = true.             allEscape = true.         }         block.statementCount = Math.max(1, block.statementCount).     }     statementCount = 1.     if (locals.hasVariable(Locals.LOOP)) {         loopCounter = locals.getVariable(location, Locals.LOOP).     } }
false;;2;60;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     Label start = new Label().     Label begin = afterthought == null ? start : new Label().     Label end = new Label().     if (initializer instanceof SDeclBlock) {         initializer.write(writer, globals).     } else if (initializer instanceof AExpression) {         AExpression initializer = (AExpression) this.initializer.         initializer.write(writer, globals).         writer.writePop(MethodWriter.getType(initializer.expected).getSize()).     }     writer.mark(start).     if (condition != null && !continuous) {         condition.write(writer, globals).         writer.ifZCmp(Opcodes.IFEQ, end).     }     boolean allEscape = false.     if (block != null) {         allEscape = block.allEscape.         int statementCount = Math.max(1, block.statementCount).         if (afterthought != null) {             ++statementCount.         }         if (loopCounter != null) {             writer.writeLoopCounter(loopCounter.getSlot(), statementCount, location).         }         block.continu = begin.         block.brake = end.         block.write(writer, globals).     } else {         if (loopCounter != null) {             writer.writeLoopCounter(loopCounter.getSlot(), 1, location).         }     }     if (afterthought != null) {         writer.mark(begin).         afterthought.write(writer, globals).         writer.writePop(MethodWriter.getType(afterthought.expected).getSize()).     }     if (afterthought != null || !allEscape) {         writer.goTo(start).     }     writer.mark(end). }
false;public;0;4;;@Override public String toString() {     return multilineToString(emptyList(), Arrays.asList(initializer, condition, afterthought, block)). }
