commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     throw new IllegalStateException("Illegal tree structure."). }
false;;1;24;;@Override void analyze(Locals locals) {     if (constant instanceof String) {         actual = String.class.     } else if (constant instanceof Double) {         actual = double.class.     } else if (constant instanceof Float) {         actual = float.class.     } else if (constant instanceof Long) {         actual = long.class.     } else if (constant instanceof Integer) {         actual = int.class.     } else if (constant instanceof Character) {         actual = char.class.     } else if (constant instanceof Short) {         actual = short.class.     } else if (constant instanceof Byte) {         actual = byte.class.     } else if (constant instanceof Boolean) {         actual = boolean.class.     } else {         throw createError(new IllegalStateException("Illegal tree structure.")).     } }
false;;2;15;;@Override void write(MethodWriter writer, Globals globals) {     if (actual == String.class)         writer.push((String) constant).     else if (actual == double.class)         writer.push((double) constant).     else if (actual == float.class)         writer.push((float) constant).     else if (actual == long.class)         writer.push((long) constant).     else if (actual == int.class)         writer.push((int) constant).     else if (actual == char.class)         writer.push((char) constant).     else if (actual == short.class)         writer.push((short) constant).     else if (actual == byte.class)         writer.push((byte) constant).     else if (actual == boolean.class)         writer.push((boolean) constant).     else {         throw createError(new IllegalStateException("Illegal tree structure.")).     } }
false;public;0;8;;@Override public String toString() {     String c = constant.toString().     if (constant instanceof String) {         c = "'" + c + "'".     }     return singleLineToString(constant.getClass().getSimpleName(), c). }
