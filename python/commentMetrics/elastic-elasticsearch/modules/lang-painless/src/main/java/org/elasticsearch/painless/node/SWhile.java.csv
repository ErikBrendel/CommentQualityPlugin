commented;modifiers;parameterAmount;loc;comment;code
false;;1;7;;@Override void extractVariables(Set<String> variables) {     condition.extractVariables(variables).     if (block != null) {         block.extractVariables(variables).     } }
false;;1;44;;@Override void analyze(Locals locals) {     locals = Locals.newLocalScope(locals).     condition.expected = boolean.class.     condition.analyze(locals).     condition = condition.cast(locals).     if (condition.constant != null) {         continuous = (boolean) condition.constant.         if (!continuous) {             throw createError(new IllegalArgumentException("Extraneous while loop.")).         }         if (block == null) {             throw createError(new IllegalArgumentException("While loop has no escape.")).         }     }     if (block != null) {         block.beginLoop = true.         block.inLoop = true.         block.analyze(locals).         if (block.loopEscape && !block.anyContinue) {             throw createError(new IllegalArgumentException("Extraneous while loop.")).         }         if (continuous && !block.anyBreak) {             methodEscape = true.             allEscape = true.         }         block.statementCount = Math.max(1, block.statementCount).     }     statementCount = 1.     if (locals.hasVariable(Locals.LOOP)) {         loopCounter = locals.getVariable(location, Locals.LOOP).     } }
false;;2;34;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     Label begin = new Label().     Label end = new Label().     writer.mark(begin).     if (!continuous) {         condition.write(writer, globals).         writer.ifZCmp(Opcodes.IFEQ, end).     }     if (block != null) {         if (loopCounter != null) {             writer.writeLoopCounter(loopCounter.getSlot(), Math.max(1, block.statementCount), location).         }         block.continu = begin.         block.brake = end.         block.write(writer, globals).     } else {         if (loopCounter != null) {             writer.writeLoopCounter(loopCounter.getSlot(), 1, location).         }     }     if (block == null || !block.allEscape) {         writer.goTo(begin).     }     writer.mark(end). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(condition, block). }
