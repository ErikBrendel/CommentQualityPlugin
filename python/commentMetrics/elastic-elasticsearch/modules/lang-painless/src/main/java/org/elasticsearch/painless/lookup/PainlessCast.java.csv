commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;6;/**  * Create a standard cast with no boxing/unboxing.  */ ;/**  * Create a standard cast with no boxing/unboxing.  */ public static PainlessCast originalTypetoTargetType(Class<?> originalType, Class<?> targetType, boolean explicitCast) {     Objects.requireNonNull(originalType).     Objects.requireNonNull(targetType).     return new PainlessCast(originalType, targetType, explicitCast, null, null, null, null). }
true;public,static;4;9;/**  * Create a cast where the original type will be unboxed, and then the cast will be performed.  */ ;/**  * Create a cast where the original type will be unboxed, and then the cast will be performed.  */ public static PainlessCast unboxOriginalType(Class<?> originalType, Class<?> targetType, boolean explicitCast, Class<?> unboxOriginalType) {     Objects.requireNonNull(originalType).     Objects.requireNonNull(targetType).     Objects.requireNonNull(unboxOriginalType).     return new PainlessCast(originalType, targetType, explicitCast, unboxOriginalType, null, null, null). }
true;public,static;4;9;/**  * Create a cast where the target type will be unboxed, and then the cast will be performed.  */ ;/**  * Create a cast where the target type will be unboxed, and then the cast will be performed.  */ public static PainlessCast unboxTargetType(Class<?> originalType, Class<?> targetType, boolean explicitCast, Class<?> unboxTargetType) {     Objects.requireNonNull(originalType).     Objects.requireNonNull(targetType).     Objects.requireNonNull(unboxTargetType).     return new PainlessCast(originalType, targetType, explicitCast, null, unboxTargetType, null, null). }
true;public,static;4;9;/**  * Create a cast where the original type will be boxed, and then the cast will be performed.  */ ;/**  * Create a cast where the original type will be boxed, and then the cast will be performed.  */ public static PainlessCast boxOriginalType(Class<?> originalType, Class<?> targetType, boolean explicitCast, Class<?> boxOriginalType) {     Objects.requireNonNull(originalType).     Objects.requireNonNull(targetType).     Objects.requireNonNull(boxOriginalType).     return new PainlessCast(originalType, targetType, explicitCast, null, null, boxOriginalType, null). }
true;public,static;4;9;/**  * Create a cast where the target type will be boxed, and then the cast will be performed.  */ ;/**  * Create a cast where the target type will be boxed, and then the cast will be performed.  */ public static PainlessCast boxTargetType(Class<?> originalType, Class<?> targetType, boolean explicitCast, Class<?> boxTargetType) {     Objects.requireNonNull(originalType).     Objects.requireNonNull(targetType).     Objects.requireNonNull(boxTargetType).     return new PainlessCast(originalType, targetType, explicitCast, null, null, null, boxTargetType). }
true;public,static;3;7;/**  * Create a cast where the original type is unboxed, cast to a target type, and the target type is boxed.  */ ;/**  * Create a cast where the original type is unboxed, cast to a target type, and the target type is boxed.  */ public static PainlessCast unboxOriginalTypeToBoxTargetType(boolean explicitCast, Class<?> unboxOriginalType, Class<?> boxTargetType) {     Objects.requireNonNull(unboxOriginalType).     Objects.requireNonNull(boxTargetType).     return new PainlessCast(null, null, explicitCast, unboxOriginalType, null, null, boxTargetType). }
false;public;1;20;;@Override public boolean equals(Object object) {     if (this == object) {         return true.     }     if (object == null || getClass() != object.getClass()) {         return false.     }     PainlessCast that = (PainlessCast) object.     return explicitCast == that.explicitCast && Objects.equals(originalType, that.originalType) && Objects.equals(targetType, that.targetType) && Objects.equals(unboxOriginalType, that.unboxOriginalType) && Objects.equals(unboxTargetType, that.unboxTargetType) && Objects.equals(boxOriginalType, that.boxOriginalType) && Objects.equals(boxTargetType, that.boxTargetType). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(originalType, targetType, explicitCast, unboxOriginalType, unboxTargetType, boxOriginalType, boxTargetType). }
