commented;modifiers;parameterAmount;loc;comment;code
false;;1;8;;@Override void extractVariables(Set<String> variables) {     prefix.extractVariables(variables).     for (AExpression argument : arguments) {         argument.extractVariables(variables).     } }
false;;1;31;;@Override void analyze(Locals locals) {     prefix.analyze(locals).     prefix.expected = prefix.actual.     prefix = prefix.cast(locals).     if (prefix.actual == def.class) {         sub = new PSubDefCall(location, name, arguments).     } else {         PainlessMethod method = locals.getPainlessLookup().lookupPainlessMethod(prefix.actual, prefix instanceof EStatic, name, arguments.size()).         if (method == null) {             throw createError(new IllegalArgumentException("method [" + typeToCanonicalTypeName(prefix.actual) + ", " + name + "/" + arguments.size() + "] not found")).         }         sub = new PSubCallInvoke(location, method, prefix.actual, arguments).     }     if (nullSafe) {         sub = new PSubNullSafeCallInvoke(location, sub).     }     sub.expected = expected.     sub.explicit = explicit.     sub.analyze(locals).     actual = sub.actual.     statement = true. }
false;;2;5;;@Override void write(MethodWriter writer, Globals globals) {     prefix.write(writer, globals).     sub.write(writer, globals). }
false;public;0;4;;@Override public String toString() {     return singleLineToStringWithOptionalArgs(arguments, prefix, name). }
