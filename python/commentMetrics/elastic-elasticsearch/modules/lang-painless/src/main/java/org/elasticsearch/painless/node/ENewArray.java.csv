commented;modifiers;parameterAmount;loc;comment;code
false;;1;6;;@Override void extractVariables(Set<String> variables) {     for (AExpression argument : arguments) {         argument.extractVariables(variables).     } }
false;;1;23;;@Override void analyze(Locals locals) {     if (!read) {         throw createError(new IllegalArgumentException("A newly created array must be read from.")).     }     Class<?> clazz = locals.getPainlessLookup().canonicalTypeNameToType(this.type).     if (clazz == null) {         throw createError(new IllegalArgumentException("Not a type [" + this.type + "].")).     }     for (int argument = 0. argument < arguments.size(). ++argument) {         AExpression expression = arguments.get(argument).         expression.expected = initialize ? clazz.getComponentType() : int.class.         expression.internal = true.         expression.analyze(locals).         arguments.set(argument, expression.cast(locals)).     }     actual = clazz. }
false;;2;28;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     if (initialize) {         writer.push(arguments.size()).         writer.newArray(MethodWriter.getType(actual.getComponentType())).         for (int index = 0. index < arguments.size(). ++index) {             AExpression argument = arguments.get(index).             writer.dup().             writer.push(index).             argument.write(writer, globals).             writer.arrayStore(MethodWriter.getType(actual.getComponentType())).         }     } else {         for (AExpression argument : arguments) {             argument.write(writer, globals).         }         if (arguments.size() > 1) {             writer.visitMultiANewArrayInsn(MethodWriter.getType(actual).getDescriptor(), arguments.size()).         } else {             writer.newArray(MethodWriter.getType(actual.getComponentType())).         }     } }
false;public;0;4;;@Override public String toString() {     return singleLineToStringWithOptionalArgs(arguments, type, initialize ? "init" : "dims"). }
