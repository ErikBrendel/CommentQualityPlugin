commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override @Deprecated public String[] getTokenNames() {     return tokenNames. }
false;public;0;5;;@Override public Vocabulary getVocabulary() {     return VOCABULARY. }
false;public;0;2;;@Override public String getGrammarFileName() {     return "PainlessParser.g4". }
false;public;0;2;;@Override public String[] getRuleNames() {     return ruleNames. }
false;public;0;2;;@Override public String getSerializedATN() {     return _serializedATN. }
false;public;0;2;;@Override public ATN getATN() {     return _ATN. }
false;public;0;1;;public TerminalNode EOF() {     return getToken(PainlessParser.EOF, 0). }
false;public;0;3;;public List<FunctionContext> function() {     return getRuleContexts(FunctionContext.class). }
false;public;1;3;;public FunctionContext function(int i) {     return getRuleContext(FunctionContext.class, i). }
false;public;0;3;;public List<StatementContext> statement() {     return getRuleContexts(StatementContext.class). }
false;public;1;3;;public StatementContext statement(int i) {     return getRuleContext(StatementContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_source. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitSource(this).     else         return visitor.visitChildren(this). }
false;public,final;0;52;;public final SourceContext source() throws RecognitionException {     SourceContext _localctx = new SourceContext(_ctx, getState()).     enterRule(_localctx, 0, RULE_source).     int _la.     try {         int _alt.         enterOuterAlt(_localctx, 1).         {             setState(69).             _errHandler.sync(this).             _alt = getInterpreter().adaptivePredict(_input, 0, _ctx).             while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                 if (_alt == 1) {                     {                         {                             setState(66).                             function().                         }                     }                 }                 setState(71).                 _errHandler.sync(this).                 _alt = getInterpreter().adaptivePredict(_input, 0, _ctx).             }             setState(75).             _errHandler.sync(this).             _la = _input.LA(1).             while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << IF) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << NEW) | (1L << TRY) | (1L << THROW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {                 {                     {                         setState(72).                         statement().                     }                 }                 setState(77).                 _errHandler.sync(this).                 _la = _input.LA(1).             }             setState(78).             match(EOF).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public DecltypeContext decltype() {     return getRuleContext(DecltypeContext.class, 0). }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;0;3;;public ParametersContext parameters() {     return getRuleContext(ParametersContext.class, 0). }
false;public;0;3;;public BlockContext block() {     return getRuleContext(BlockContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_function. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitFunction(this).     else         return visitor.visitChildren(this). }
false;public,final;0;26;;public final FunctionContext function() throws RecognitionException {     FunctionContext _localctx = new FunctionContext(_ctx, getState()).     enterRule(_localctx, 2, RULE_function).     try {         enterOuterAlt(_localctx, 1).         {             setState(80).             decltype().             setState(81).             match(ID).             setState(82).             parameters().             setState(83).             block().         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public List<DecltypeContext> decltype() {     return getRuleContexts(DecltypeContext.class). }
false;public;1;3;;public DecltypeContext decltype(int i) {     return getRuleContext(DecltypeContext.class, i). }
false;public;0;1;;public List<TerminalNode> ID() {     return getTokens(PainlessParser.ID). }
false;public;1;3;;public TerminalNode ID(int i) {     return getToken(PainlessParser.ID, i). }
false;public;0;1;;public List<TerminalNode> COMMA() {     return getTokens(PainlessParser.COMMA). }
false;public;1;3;;public TerminalNode COMMA(int i) {     return getToken(PainlessParser.COMMA, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_parameters. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitParameters(this).     else         return visitor.visitChildren(this). }
false;public,final;0;52;;public final ParametersContext parameters() throws RecognitionException {     ParametersContext _localctx = new ParametersContext(_ctx, getState()).     enterRule(_localctx, 4, RULE_parameters).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(85).             match(LP).             setState(97).             _la = _input.LA(1).             if (_la == TYPE) {                 {                     setState(86).                     decltype().                     setState(87).                     match(ID).                     setState(94).                     _errHandler.sync(this).                     _la = _input.LA(1).                     while (_la == COMMA) {                         {                             {                                 setState(88).                                 match(COMMA).                                 setState(89).                                 decltype().                                 setState(90).                                 match(ID).                             }                         }                         setState(96).                         _errHandler.sync(this).                         _la = _input.LA(1).                     }                 }             }             setState(99).             match(RP).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public RstatementContext rstatement() {     return getRuleContext(RstatementContext.class, 0). }
false;public;0;3;;public DstatementContext dstatement() {     return getRuleContext(DstatementContext.class, 0). }
false;public;0;1;;public TerminalNode SEMICOLON() {     return getToken(PainlessParser.SEMICOLON, 0). }
false;public;0;1;;public TerminalNode EOF() {     return getToken(PainlessParser.EOF, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_statement. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitStatement(this).     else         return visitor.visitChildren(this). }
false;public,final;0;69;;public final StatementContext statement() throws RecognitionException {     StatementContext _localctx = new StatementContext(_ctx, getState()).     enterRule(_localctx, 6, RULE_statement).     int _la.     try {         setState(105).         switch(_input.LA(1)) {             case IF:             case WHILE:             case FOR:             case TRY:                 enterOuterAlt(_localctx, 1).                 {                     setState(101).                     rstatement().                 }                 break.             case LBRACE:             case LP:             case DO:             case CONTINUE:             case BREAK:             case RETURN:             case NEW:             case THROW:             case BOOLNOT:             case BWNOT:             case ADD:             case SUB:             case INCR:             case DECR:             case OCTAL:             case HEX:             case INTEGER:             case DECIMAL:             case STRING:             case REGEX:             case TRUE:             case FALSE:             case NULL:             case TYPE:             case ID:                 enterOuterAlt(_localctx, 2).                 {                     setState(102).                     dstatement().                     setState(103).                     _la = _input.LA(1).                     if (!(_la == EOF || _la == SEMICOLON)) {                         _errHandler.recoverInline(this).                     } else {                         consume().                     }                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_rstatement. }
false;public;1;3;;public void copyFrom(RstatementContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode FOR() {     return getToken(PainlessParser.FOR, 0). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;1;;public List<TerminalNode> SEMICOLON() {     return getTokens(PainlessParser.SEMICOLON). }
false;public;1;3;;public TerminalNode SEMICOLON(int i) {     return getToken(PainlessParser.SEMICOLON, i). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public TrailerContext trailer() {     return getRuleContext(TrailerContext.class, 0). }
false;public;0;3;;public EmptyContext empty() {     return getRuleContext(EmptyContext.class, 0). }
false;public;0;3;;public InitializerContext initializer() {     return getRuleContext(InitializerContext.class, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;3;;public AfterthoughtContext afterthought() {     return getRuleContext(AfterthoughtContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitFor(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode TRY() {     return getToken(PainlessParser.TRY, 0). }
false;public;0;3;;public BlockContext block() {     return getRuleContext(BlockContext.class, 0). }
false;public;0;3;;public List<TrapContext> trap() {     return getRuleContexts(TrapContext.class). }
false;public;1;3;;public TrapContext trap(int i) {     return getRuleContext(TrapContext.class, i). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitTry(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode WHILE() {     return getToken(PainlessParser.WHILE, 0). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public TrailerContext trailer() {     return getRuleContext(TrailerContext.class, 0). }
false;public;0;3;;public EmptyContext empty() {     return getRuleContext(EmptyContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitWhile(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode FOR() {     return getToken(PainlessParser.FOR, 0). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;0;1;;public TerminalNode IN() {     return getToken(PainlessParser.IN, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public TrailerContext trailer() {     return getRuleContext(TrailerContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitIneach(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode IF() {     return getToken(PainlessParser.IF, 0). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public List<TrailerContext> trailer() {     return getRuleContexts(TrailerContext.class). }
false;public;1;3;;public TrailerContext trailer(int i) {     return getRuleContext(TrailerContext.class, i). }
false;public;0;1;;public TerminalNode ELSE() {     return getToken(PainlessParser.ELSE, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitIf(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode FOR() {     return getToken(PainlessParser.FOR, 0). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;3;;public DecltypeContext decltype() {     return getRuleContext(DecltypeContext.class, 0). }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;0;1;;public TerminalNode COLON() {     return getToken(PainlessParser.COLON, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public TrailerContext trailer() {     return getRuleContext(TrailerContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitEach(this).     else         return visitor.visitChildren(this). }
false;public,final;0;276;;public final RstatementContext rstatement() throws RecognitionException {     RstatementContext _localctx = new RstatementContext(_ctx, getState()).     enterRule(_localctx, 8, RULE_rstatement).     int _la.     try {         int _alt.         setState(167).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 12, _ctx)) {             case 1:                 _localctx = new IfContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(107).                     match(IF).                     setState(108).                     match(LP).                     setState(109).                     expression(0).                     setState(110).                     match(RP).                     setState(111).                     trailer().                     setState(115).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 5, _ctx)) {                         case 1:                             {                                 setState(112).                                 match(ELSE).                                 setState(113).                                 trailer().                             }                             break.                         case 2:                             {                                 setState(114).                                 if (!(_input.LA(1) != ELSE))                                     throw new FailedPredicateException(this, " _input.LA(1) != ELSE ").                             }                             break.                     }                 }                 break.             case 2:                 _localctx = new WhileContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(117).                     match(WHILE).                     setState(118).                     match(LP).                     setState(119).                     expression(0).                     setState(120).                     match(RP).                     setState(123).                     switch(_input.LA(1)) {                         case LBRACK:                         case LBRACE:                         case LP:                         case IF:                         case WHILE:                         case DO:                         case FOR:                         case CONTINUE:                         case BREAK:                         case RETURN:                         case NEW:                         case TRY:                         case THROW:                         case BOOLNOT:                         case BWNOT:                         case ADD:                         case SUB:                         case INCR:                         case DECR:                         case OCTAL:                         case HEX:                         case INTEGER:                         case DECIMAL:                         case STRING:                         case REGEX:                         case TRUE:                         case FALSE:                         case NULL:                         case TYPE:                         case ID:                             {                                 setState(121).                                 trailer().                             }                             break.                         case SEMICOLON:                             {                                 setState(122).                                 empty().                             }                             break.                         default:                             throw new NoViableAltException(this).                     }                 }                 break.             case 3:                 _localctx = new ForContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(125).                     match(FOR).                     setState(126).                     match(LP).                     setState(128).                     _la = _input.LA(1).                     if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {                         {                             setState(127).                             initializer().                         }                     }                     setState(130).                     match(SEMICOLON).                     setState(132).                     _la = _input.LA(1).                     if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {                         {                             setState(131).                             expression(0).                         }                     }                     setState(134).                     match(SEMICOLON).                     setState(136).                     _la = _input.LA(1).                     if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {                         {                             setState(135).                             afterthought().                         }                     }                     setState(138).                     match(RP).                     setState(141).                     switch(_input.LA(1)) {                         case LBRACK:                         case LBRACE:                         case LP:                         case IF:                         case WHILE:                         case DO:                         case FOR:                         case CONTINUE:                         case BREAK:                         case RETURN:                         case NEW:                         case TRY:                         case THROW:                         case BOOLNOT:                         case BWNOT:                         case ADD:                         case SUB:                         case INCR:                         case DECR:                         case OCTAL:                         case HEX:                         case INTEGER:                         case DECIMAL:                         case STRING:                         case REGEX:                         case TRUE:                         case FALSE:                         case NULL:                         case TYPE:                         case ID:                             {                                 setState(139).                                 trailer().                             }                             break.                         case SEMICOLON:                             {                                 setState(140).                                 empty().                             }                             break.                         default:                             throw new NoViableAltException(this).                     }                 }                 break.             case 4:                 _localctx = new EachContext(_localctx).                 enterOuterAlt(_localctx, 4).                 {                     setState(143).                     match(FOR).                     setState(144).                     match(LP).                     setState(145).                     decltype().                     setState(146).                     match(ID).                     setState(147).                     match(COLON).                     setState(148).                     expression(0).                     setState(149).                     match(RP).                     setState(150).                     trailer().                 }                 break.             case 5:                 _localctx = new IneachContext(_localctx).                 enterOuterAlt(_localctx, 5).                 {                     setState(152).                     match(FOR).                     setState(153).                     match(LP).                     setState(154).                     match(ID).                     setState(155).                     match(IN).                     setState(156).                     expression(0).                     setState(157).                     match(RP).                     setState(158).                     trailer().                 }                 break.             case 6:                 _localctx = new TryContext(_localctx).                 enterOuterAlt(_localctx, 6).                 {                     setState(160).                     match(TRY).                     setState(161).                     block().                     setState(163).                     _errHandler.sync(this).                     _alt = 1.                     do {                         switch(_alt) {                             case 1:                                 {                                     {                                         setState(162).                                         trap().                                     }                                 }                                 break.                             default:                                 throw new NoViableAltException(this).                         }                         setState(165).                         _errHandler.sync(this).                         _alt = getInterpreter().adaptivePredict(_input, 11, _ctx).                     } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_dstatement. }
false;public;1;3;;public void copyFrom(DstatementContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public DeclarationContext declaration() {     return getRuleContext(DeclarationContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitDecl(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode BREAK() {     return getToken(PainlessParser.BREAK, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitBreak(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode THROW() {     return getToken(PainlessParser.THROW, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitThrow(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode CONTINUE() {     return getToken(PainlessParser.CONTINUE, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitContinue(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitExpr(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode DO() {     return getToken(PainlessParser.DO, 0). }
false;public;0;3;;public BlockContext block() {     return getRuleContext(BlockContext.class, 0). }
false;public;0;1;;public TerminalNode WHILE() {     return getToken(PainlessParser.WHILE, 0). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitDo(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode RETURN() {     return getToken(PainlessParser.RETURN, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitReturn(this).     else         return visitor.visitChildren(this). }
false;public,final;0;97;;public final DstatementContext dstatement() throws RecognitionException {     DstatementContext _localctx = new DstatementContext(_ctx, getState()).     enterRule(_localctx, 10, RULE_dstatement).     int _la.     try {         setState(186).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 14, _ctx)) {             case 1:                 _localctx = new DoContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(169).                     match(DO).                     setState(170).                     block().                     setState(171).                     match(WHILE).                     setState(172).                     match(LP).                     setState(173).                     expression(0).                     setState(174).                     match(RP).                 }                 break.             case 2:                 _localctx = new DeclContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(176).                     declaration().                 }                 break.             case 3:                 _localctx = new ContinueContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(177).                     match(CONTINUE).                 }                 break.             case 4:                 _localctx = new BreakContext(_localctx).                 enterOuterAlt(_localctx, 4).                 {                     setState(178).                     match(BREAK).                 }                 break.             case 5:                 _localctx = new ReturnContext(_localctx).                 enterOuterAlt(_localctx, 5).                 {                     setState(179).                     match(RETURN).                     setState(181).                     _la = _input.LA(1).                     if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {                         {                             setState(180).                             expression(0).                         }                     }                 }                 break.             case 6:                 _localctx = new ThrowContext(_localctx).                 enterOuterAlt(_localctx, 6).                 {                     setState(183).                     match(THROW).                     setState(184).                     expression(0).                 }                 break.             case 7:                 _localctx = new ExprContext(_localctx).                 enterOuterAlt(_localctx, 7).                 {                     setState(185).                     expression(0).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public BlockContext block() {     return getRuleContext(BlockContext.class, 0). }
false;public;0;3;;public StatementContext statement() {     return getRuleContext(StatementContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_trailer. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitTrailer(this).     else         return visitor.visitChildren(this). }
false;public,final;0;62;;public final TrailerContext trailer() throws RecognitionException {     TrailerContext _localctx = new TrailerContext(_ctx, getState()).     enterRule(_localctx, 12, RULE_trailer).     try {         setState(190).         switch(_input.LA(1)) {             case LBRACK:                 enterOuterAlt(_localctx, 1).                 {                     setState(188).                     block().                 }                 break.             case LBRACE:             case LP:             case IF:             case WHILE:             case DO:             case FOR:             case CONTINUE:             case BREAK:             case RETURN:             case NEW:             case TRY:             case THROW:             case BOOLNOT:             case BWNOT:             case ADD:             case SUB:             case INCR:             case DECR:             case OCTAL:             case HEX:             case INTEGER:             case DECIMAL:             case STRING:             case REGEX:             case TRUE:             case FALSE:             case NULL:             case TYPE:             case ID:                 enterOuterAlt(_localctx, 2).                 {                     setState(189).                     statement().                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LBRACK() {     return getToken(PainlessParser.LBRACK, 0). }
false;public;0;1;;public TerminalNode RBRACK() {     return getToken(PainlessParser.RBRACK, 0). }
false;public;0;3;;public List<StatementContext> statement() {     return getRuleContexts(StatementContext.class). }
false;public;1;3;;public StatementContext statement(int i) {     return getRuleContext(StatementContext.class, i). }
false;public;0;3;;public DstatementContext dstatement() {     return getRuleContext(DstatementContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_block. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitBlock(this).     else         return visitor.visitChildren(this). }
false;public,final;0;49;;public final BlockContext block() throws RecognitionException {     BlockContext _localctx = new BlockContext(_ctx, getState()).     enterRule(_localctx, 14, RULE_block).     int _la.     try {         int _alt.         enterOuterAlt(_localctx, 1).         {             setState(192).             match(LBRACK).             setState(196).             _errHandler.sync(this).             _alt = getInterpreter().adaptivePredict(_input, 16, _ctx).             while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                 if (_alt == 1) {                     {                         {                             setState(193).                             statement().                         }                     }                 }                 setState(198).                 _errHandler.sync(this).                 _alt = getInterpreter().adaptivePredict(_input, 16, _ctx).             }             setState(200).             _la = _input.LA(1).             if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << DO) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << NEW) | (1L << THROW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {                 {                     setState(199).                     dstatement().                 }             }             setState(202).             match(RBRACK).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode SEMICOLON() {     return getToken(PainlessParser.SEMICOLON, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_empty. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitEmpty(this).     else         return visitor.visitChildren(this). }
false;public,final;0;20;;public final EmptyContext empty() throws RecognitionException {     EmptyContext _localctx = new EmptyContext(_ctx, getState()).     enterRule(_localctx, 16, RULE_empty).     try {         enterOuterAlt(_localctx, 1).         {             setState(204).             match(SEMICOLON).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public DeclarationContext declaration() {     return getRuleContext(DeclarationContext.class, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_initializer. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitInitializer(this).     else         return visitor.visitChildren(this). }
false;public,final;0;33;;public final InitializerContext initializer() throws RecognitionException {     InitializerContext _localctx = new InitializerContext(_ctx, getState()).     enterRule(_localctx, 18, RULE_initializer).     try {         setState(208).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 18, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(206).                     declaration().                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(207).                     expression(0).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_afterthought. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitAfterthought(this).     else         return visitor.visitChildren(this). }
false;public,final;0;20;;public final AfterthoughtContext afterthought() throws RecognitionException {     AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState()).     enterRule(_localctx, 20, RULE_afterthought).     try {         enterOuterAlt(_localctx, 1).         {             setState(210).             expression(0).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public DecltypeContext decltype() {     return getRuleContext(DecltypeContext.class, 0). }
false;public;0;3;;public List<DeclvarContext> declvar() {     return getRuleContexts(DeclvarContext.class). }
false;public;1;3;;public DeclvarContext declvar(int i) {     return getRuleContext(DeclvarContext.class, i). }
false;public;0;1;;public List<TerminalNode> COMMA() {     return getTokens(PainlessParser.COMMA). }
false;public;1;3;;public TerminalNode COMMA(int i) {     return getToken(PainlessParser.COMMA, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_declaration. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitDeclaration(this).     else         return visitor.visitChildren(this). }
false;public,final;0;39;;public final DeclarationContext declaration() throws RecognitionException {     DeclarationContext _localctx = new DeclarationContext(_ctx, getState()).     enterRule(_localctx, 22, RULE_declaration).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(212).             decltype().             setState(213).             declvar().             setState(218).             _errHandler.sync(this).             _la = _input.LA(1).             while (_la == COMMA) {                 {                     {                         setState(214).                         match(COMMA).                         setState(215).                         declvar().                     }                 }                 setState(220).                 _errHandler.sync(this).                 _la = _input.LA(1).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode TYPE() {     return getToken(PainlessParser.TYPE, 0). }
false;public;0;1;;public List<TerminalNode> LBRACE() {     return getTokens(PainlessParser.LBRACE). }
false;public;1;3;;public TerminalNode LBRACE(int i) {     return getToken(PainlessParser.LBRACE, i). }
false;public;0;1;;public List<TerminalNode> RBRACE() {     return getTokens(PainlessParser.RBRACE). }
false;public;1;3;;public TerminalNode RBRACE(int i) {     return getToken(PainlessParser.RBRACE, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_decltype. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitDecltype(this).     else         return visitor.visitChildren(this). }
false;public,final;0;39;;public final DecltypeContext decltype() throws RecognitionException {     DecltypeContext _localctx = new DecltypeContext(_ctx, getState()).     enterRule(_localctx, 24, RULE_decltype).     try {         int _alt.         enterOuterAlt(_localctx, 1).         {             setState(221).             match(TYPE).             setState(226).             _errHandler.sync(this).             _alt = getInterpreter().adaptivePredict(_input, 20, _ctx).             while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                 if (_alt == 1) {                     {                         {                             setState(222).                             match(LBRACE).                             setState(223).                             match(RBRACE).                         }                     }                 }                 setState(228).                 _errHandler.sync(this).                 _alt = getInterpreter().adaptivePredict(_input, 20, _ctx).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;0;1;;public TerminalNode ASSIGN() {     return getToken(PainlessParser.ASSIGN, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_declvar. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitDeclvar(this).     else         return visitor.visitChildren(this). }
false;public,final;0;32;;public final DeclvarContext declvar() throws RecognitionException {     DeclvarContext _localctx = new DeclvarContext(_ctx, getState()).     enterRule(_localctx, 26, RULE_declvar).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(229).             match(ID).             setState(232).             _la = _input.LA(1).             if (_la == ASSIGN) {                 {                     setState(230).                     match(ASSIGN).                     setState(231).                     expression(0).                 }             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode CATCH() {     return getToken(PainlessParser.CATCH, 0). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;1;;public TerminalNode TYPE() {     return getToken(PainlessParser.TYPE, 0). }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public BlockContext block() {     return getRuleContext(BlockContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_trap. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitTrap(this).     else         return visitor.visitChildren(this). }
false;public,final;0;30;;public final TrapContext trap() throws RecognitionException {     TrapContext _localctx = new TrapContext(_ctx, getState()).     enterRule(_localctx, 28, RULE_trap).     try {         enterOuterAlt(_localctx, 1).         {             setState(234).             match(CATCH).             setState(235).             match(LP).             setState(236).             match(TYPE).             setState(237).             match(ID).             setState(238).             match(RP).             setState(239).             block().         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_expression. }
false;public;1;3;;public void copyFrom(ExpressionContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public UnaryContext unary() {     return getRuleContext(UnaryContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitSingle(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public TerminalNode LT() {     return getToken(PainlessParser.LT, 0). }
false;public;0;1;;public TerminalNode LTE() {     return getToken(PainlessParser.LTE, 0). }
false;public;0;1;;public TerminalNode GT() {     return getToken(PainlessParser.GT, 0). }
false;public;0;1;;public TerminalNode GTE() {     return getToken(PainlessParser.GTE, 0). }
false;public;0;1;;public TerminalNode EQ() {     return getToken(PainlessParser.EQ, 0). }
false;public;0;1;;public TerminalNode EQR() {     return getToken(PainlessParser.EQR, 0). }
false;public;0;1;;public TerminalNode NE() {     return getToken(PainlessParser.NE, 0). }
false;public;0;1;;public TerminalNode NER() {     return getToken(PainlessParser.NER, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitComp(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public TerminalNode BOOLAND() {     return getToken(PainlessParser.BOOLAND, 0). }
false;public;0;1;;public TerminalNode BOOLOR() {     return getToken(PainlessParser.BOOLOR, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitBool(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public TerminalNode COND() {     return getToken(PainlessParser.COND, 0). }
false;public;0;1;;public TerminalNode COLON() {     return getToken(PainlessParser.COLON, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitConditional(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public TerminalNode ASSIGN() {     return getToken(PainlessParser.ASSIGN, 0). }
false;public;0;1;;public TerminalNode AADD() {     return getToken(PainlessParser.AADD, 0). }
false;public;0;1;;public TerminalNode ASUB() {     return getToken(PainlessParser.ASUB, 0). }
false;public;0;1;;public TerminalNode AMUL() {     return getToken(PainlessParser.AMUL, 0). }
false;public;0;1;;public TerminalNode ADIV() {     return getToken(PainlessParser.ADIV, 0). }
false;public;0;1;;public TerminalNode AREM() {     return getToken(PainlessParser.AREM, 0). }
false;public;0;1;;public TerminalNode AAND() {     return getToken(PainlessParser.AAND, 0). }
false;public;0;1;;public TerminalNode AXOR() {     return getToken(PainlessParser.AXOR, 0). }
false;public;0;1;;public TerminalNode AOR() {     return getToken(PainlessParser.AOR, 0). }
false;public;0;1;;public TerminalNode ALSH() {     return getToken(PainlessParser.ALSH, 0). }
false;public;0;1;;public TerminalNode ARSH() {     return getToken(PainlessParser.ARSH, 0). }
false;public;0;1;;public TerminalNode AUSH() {     return getToken(PainlessParser.AUSH, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitAssignment(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public TerminalNode MUL() {     return getToken(PainlessParser.MUL, 0). }
false;public;0;1;;public TerminalNode DIV() {     return getToken(PainlessParser.DIV, 0). }
false;public;0;1;;public TerminalNode REM() {     return getToken(PainlessParser.REM, 0). }
false;public;0;1;;public TerminalNode ADD() {     return getToken(PainlessParser.ADD, 0). }
false;public;0;1;;public TerminalNode SUB() {     return getToken(PainlessParser.SUB, 0). }
false;public;0;1;;public TerminalNode FIND() {     return getToken(PainlessParser.FIND, 0). }
false;public;0;1;;public TerminalNode MATCH() {     return getToken(PainlessParser.MATCH, 0). }
false;public;0;1;;public TerminalNode LSH() {     return getToken(PainlessParser.LSH, 0). }
false;public;0;1;;public TerminalNode RSH() {     return getToken(PainlessParser.RSH, 0). }
false;public;0;1;;public TerminalNode USH() {     return getToken(PainlessParser.USH, 0). }
false;public;0;1;;public TerminalNode BWAND() {     return getToken(PainlessParser.BWAND, 0). }
false;public;0;1;;public TerminalNode XOR() {     return getToken(PainlessParser.XOR, 0). }
false;public;0;1;;public TerminalNode BWOR() {     return getToken(PainlessParser.BWOR, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitBinary(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public TerminalNode ELVIS() {     return getToken(PainlessParser.ELVIS, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitElvis(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode INSTANCEOF() {     return getToken(PainlessParser.INSTANCEOF, 0). }
false;public;0;3;;public DecltypeContext decltype() {     return getRuleContext(DecltypeContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitInstanceof(this).     else         return visitor.visitChildren(this). }
false;public,final;0;3;;public final ExpressionContext expression() throws RecognitionException {     return expression(0). }
false;private;1;270;;private ExpressionContext expression(int _p) throws RecognitionException {     ParserRuleContext _parentctx = _ctx.     int _parentState = getState().     ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState).     ExpressionContext _prevctx = _localctx.     int _startState = 30.     enterRecursionRule(_localctx, 30, RULE_expression, _p).     int _la.     try {         int _alt.         enterOuterAlt(_localctx, 1).         {             {                 _localctx = new SingleContext(_localctx).                 _ctx = _localctx.                 _prevctx = _localctx.                 setState(242).                 unary().             }             _ctx.stop = _input.LT(-1).             setState(294).             _errHandler.sync(this).             _alt = getInterpreter().adaptivePredict(_input, 23, _ctx).             while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                 if (_alt == 1) {                     if (_parseListeners != null)                         triggerExitRuleEvent().                     _prevctx = _localctx.                     {                         setState(292).                         _errHandler.sync(this).                         switch(getInterpreter().adaptivePredict(_input, 22, _ctx)) {                             case 1:                                 {                                     _localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(244).                                     if (!(precpred(_ctx, 15)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 15)").                                     setState(245).                                     _la = _input.LA(1).                                     if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << REM))) != 0))) {                                         _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(246).                                     expression(16).                                 }                                 break.                             case 2:                                 {                                     _localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(247).                                     if (!(precpred(_ctx, 14)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 14)").                                     setState(248).                                     _la = _input.LA(1).                                     if (!(_la == ADD || _la == SUB)) {                                         _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(249).                                     expression(15).                                 }                                 break.                             case 3:                                 {                                     _localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(250).                                     if (!(precpred(_ctx, 13)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 13)").                                     setState(251).                                     _la = _input.LA(1).                                     if (!(_la == FIND || _la == MATCH)) {                                         _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(252).                                     expression(14).                                 }                                 break.                             case 4:                                 {                                     _localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(253).                                     if (!(precpred(_ctx, 12)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 12)").                                     setState(254).                                     _la = _input.LA(1).                                     if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LSH) | (1L << RSH) | (1L << USH))) != 0))) {                                         _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(255).                                     expression(13).                                 }                                 break.                             case 5:                                 {                                     _localctx = new CompContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(256).                                     if (!(precpred(_ctx, 11)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 11)").                                     setState(257).                                     _la = _input.LA(1).                                     if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LTE) | (1L << GT) | (1L << GTE))) != 0))) {                                         _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(258).                                     expression(12).                                 }                                 break.                             case 6:                                 {                                     _localctx = new CompContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(259).                                     if (!(precpred(_ctx, 9)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 9)").                                     setState(260).                                     _la = _input.LA(1).                                     if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << EQR) | (1L << NE) | (1L << NER))) != 0))) {                                         _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(261).                                     expression(10).                                 }                                 break.                             case 7:                                 {                                     _localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(262).                                     if (!(precpred(_ctx, 8)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 8)").                                     setState(263).                                     match(BWAND).                                     setState(264).                                     expression(9).                                 }                                 break.                             case 8:                                 {                                     _localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(265).                                     if (!(precpred(_ctx, 7)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 7)").                                     setState(266).                                     match(XOR).                                     setState(267).                                     expression(8).                                 }                                 break.                             case 9:                                 {                                     _localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(268).                                     if (!(precpred(_ctx, 6)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 6)").                                     setState(269).                                     match(BWOR).                                     setState(270).                                     expression(7).                                 }                                 break.                             case 10:                                 {                                     _localctx = new BoolContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(271).                                     if (!(precpred(_ctx, 5)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 5)").                                     setState(272).                                     match(BOOLAND).                                     setState(273).                                     expression(6).                                 }                                 break.                             case 11:                                 {                                     _localctx = new BoolContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(274).                                     if (!(precpred(_ctx, 4)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 4)").                                     setState(275).                                     match(BOOLOR).                                     setState(276).                                     expression(5).                                 }                                 break.                             case 12:                                 {                                     _localctx = new ConditionalContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(277).                                     if (!(precpred(_ctx, 3)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 3)").                                     setState(278).                                     match(COND).                                     setState(279).                                     expression(0).                                     setState(280).                                     match(COLON).                                     setState(281).                                     expression(3).                                 }                                 break.                             case 13:                                 {                                     _localctx = new ElvisContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(283).                                     if (!(precpred(_ctx, 2)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 2)").                                     setState(284).                                     match(ELVIS).                                     setState(285).                                     expression(2).                                 }                                 break.                             case 14:                                 {                                     _localctx = new AssignmentContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(286).                                     if (!(precpred(_ctx, 1)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 1)").                                     setState(287).                                     _la = _input.LA(1).                                     if (!(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (ASSIGN - 60)) | (1L << (AADD - 60)) | (1L << (ASUB - 60)) | (1L << (AMUL - 60)) | (1L << (ADIV - 60)) | (1L << (AREM - 60)) | (1L << (AAND - 60)) | (1L << (AXOR - 60)) | (1L << (AOR - 60)) | (1L << (ALSH - 60)) | (1L << (ARSH - 60)) | (1L << (AUSH - 60)))) != 0))) {                                         _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(288).                                     expression(1).                                 }                                 break.                             case 15:                                 {                                     _localctx = new InstanceofContext(new ExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_expression).                                     setState(289).                                     if (!(precpred(_ctx, 10)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 10)").                                     setState(290).                                     match(INSTANCEOF).                                     setState(291).                                     decltype().                                 }                                 break.                         }                     }                 }                 setState(296).                 _errHandler.sync(this).                 _alt = getInterpreter().adaptivePredict(_input, 23, _ctx).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         unrollRecursionContexts(_parentctx).     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_unary. }
false;public;1;3;;public void copyFrom(UnaryContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;3;;public DecltypeContext decltype() {     return getRuleContext(DecltypeContext.class, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public UnaryContext unary() {     return getRuleContext(UnaryContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitCast(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ChainContext chain() {     return getRuleContext(ChainContext.class, 0). }
false;public;0;1;;public TerminalNode INCR() {     return getToken(PainlessParser.INCR, 0). }
false;public;0;1;;public TerminalNode DECR() {     return getToken(PainlessParser.DECR, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitPre(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ChainContext chain() {     return getRuleContext(ChainContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitRead(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ChainContext chain() {     return getRuleContext(ChainContext.class, 0). }
false;public;0;1;;public TerminalNode INCR() {     return getToken(PainlessParser.INCR, 0). }
false;public;0;1;;public TerminalNode DECR() {     return getToken(PainlessParser.DECR, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitPost(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public UnaryContext unary() {     return getRuleContext(UnaryContext.class, 0). }
false;public;0;1;;public TerminalNode BOOLNOT() {     return getToken(PainlessParser.BOOLNOT, 0). }
false;public;0;1;;public TerminalNode BWNOT() {     return getToken(PainlessParser.BWNOT, 0). }
false;public;0;1;;public TerminalNode ADD() {     return getToken(PainlessParser.ADD, 0). }
false;public;0;1;;public TerminalNode SUB() {     return getToken(PainlessParser.SUB, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitOperator(this).     else         return visitor.visitChildren(this). }
false;public,final;0;87;;public final UnaryContext unary() throws RecognitionException {     UnaryContext _localctx = new UnaryContext(_ctx, getState()).     enterRule(_localctx, 32, RULE_unary).     int _la.     try {         setState(310).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 24, _ctx)) {             case 1:                 _localctx = new PreContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(297).                     _la = _input.LA(1).                     if (!(_la == INCR || _la == DECR)) {                         _errHandler.recoverInline(this).                     } else {                         consume().                     }                     setState(298).                     chain().                 }                 break.             case 2:                 _localctx = new PostContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(299).                     chain().                     setState(300).                     _la = _input.LA(1).                     if (!(_la == INCR || _la == DECR)) {                         _errHandler.recoverInline(this).                     } else {                         consume().                     }                 }                 break.             case 3:                 _localctx = new ReadContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(302).                     chain().                 }                 break.             case 4:                 _localctx = new OperatorContext(_localctx).                 enterOuterAlt(_localctx, 4).                 {                     setState(303).                     _la = _input.LA(1).                     if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB))) != 0))) {                         _errHandler.recoverInline(this).                     } else {                         consume().                     }                     setState(304).                     unary().                 }                 break.             case 5:                 _localctx = new CastContext(_localctx).                 enterOuterAlt(_localctx, 5).                 {                     setState(305).                     match(LP).                     setState(306).                     decltype().                     setState(307).                     match(RP).                     setState(308).                     unary().                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_chain. }
false;public;1;3;;public void copyFrom(ChainContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public DecltypeContext decltype() {     return getRuleContext(DecltypeContext.class, 0). }
false;public;0;3;;public PostdotContext postdot() {     return getRuleContext(PostdotContext.class, 0). }
false;public;0;3;;public List<PostfixContext> postfix() {     return getRuleContexts(PostfixContext.class). }
false;public;1;3;;public PostfixContext postfix(int i) {     return getRuleContext(PostfixContext.class, i). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitStatic(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public PrimaryContext primary() {     return getRuleContext(PrimaryContext.class, 0). }
false;public;0;3;;public List<PostfixContext> postfix() {     return getRuleContexts(PostfixContext.class). }
false;public;1;3;;public PostfixContext postfix(int i) {     return getRuleContext(PostfixContext.class, i). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitDynamic(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ArrayinitializerContext arrayinitializer() {     return getRuleContext(ArrayinitializerContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitNewarray(this).     else         return visitor.visitChildren(this). }
false;public,final;0;78;;public final ChainContext chain() throws RecognitionException {     ChainContext _localctx = new ChainContext(_ctx, getState()).     enterRule(_localctx, 34, RULE_chain).     try {         int _alt.         setState(328).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 27, _ctx)) {             case 1:                 _localctx = new DynamicContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(312).                     primary().                     setState(316).                     _errHandler.sync(this).                     _alt = getInterpreter().adaptivePredict(_input, 25, _ctx).                     while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                         if (_alt == 1) {                             {                                 {                                     setState(313).                                     postfix().                                 }                             }                         }                         setState(318).                         _errHandler.sync(this).                         _alt = getInterpreter().adaptivePredict(_input, 25, _ctx).                     }                 }                 break.             case 2:                 _localctx = new StaticContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(319).                     decltype().                     setState(320).                     postdot().                     setState(324).                     _errHandler.sync(this).                     _alt = getInterpreter().adaptivePredict(_input, 26, _ctx).                     while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                         if (_alt == 1) {                             {                                 {                                     setState(321).                                     postfix().                                 }                             }                         }                         setState(326).                         _errHandler.sync(this).                         _alt = getInterpreter().adaptivePredict(_input, 26, _ctx).                     }                 }                 break.             case 3:                 _localctx = new NewarrayContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(327).                     arrayinitializer().                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_primary. }
false;public;1;3;;public void copyFrom(PrimaryContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public ListinitializerContext listinitializer() {     return getRuleContext(ListinitializerContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitListinit(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode REGEX() {     return getToken(PainlessParser.REGEX, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitRegex(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode NULL() {     return getToken(PainlessParser.NULL, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitNull(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode STRING() {     return getToken(PainlessParser.STRING, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitString(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public MapinitializerContext mapinitializer() {     return getRuleContext(MapinitializerContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitMapinit(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;0;3;;public ArgumentsContext arguments() {     return getRuleContext(ArgumentsContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitCalllocal(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode TRUE() {     return getToken(PainlessParser.TRUE, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitTrue(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode FALSE() {     return getToken(PainlessParser.FALSE, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitFalse(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitVariable(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode OCTAL() {     return getToken(PainlessParser.OCTAL, 0). }
false;public;0;1;;public TerminalNode HEX() {     return getToken(PainlessParser.HEX, 0). }
false;public;0;1;;public TerminalNode INTEGER() {     return getToken(PainlessParser.INTEGER, 0). }
false;public;0;1;;public TerminalNode DECIMAL() {     return getToken(PainlessParser.DECIMAL, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitNumeric(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode NEW() {     return getToken(PainlessParser.NEW, 0). }
false;public;0;1;;public TerminalNode TYPE() {     return getToken(PainlessParser.TYPE, 0). }
false;public;0;3;;public ArgumentsContext arguments() {     return getRuleContext(ArgumentsContext.class, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitNewobject(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitPrecedence(this).     else         return visitor.visitChildren(this). }
false;public,final;0;131;;public final PrimaryContext primary() throws RecognitionException {     PrimaryContext _localctx = new PrimaryContext(_ctx, getState()).     enterRule(_localctx, 36, RULE_primary).     int _la.     try {         setState(348).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 28, _ctx)) {             case 1:                 _localctx = new PrecedenceContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(330).                     match(LP).                     setState(331).                     expression(0).                     setState(332).                     match(RP).                 }                 break.             case 2:                 _localctx = new NumericContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(334).                     _la = _input.LA(1).                     if (!(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)))) != 0))) {                         _errHandler.recoverInline(this).                     } else {                         consume().                     }                 }                 break.             case 3:                 _localctx = new TrueContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(335).                     match(TRUE).                 }                 break.             case 4:                 _localctx = new FalseContext(_localctx).                 enterOuterAlt(_localctx, 4).                 {                     setState(336).                     match(FALSE).                 }                 break.             case 5:                 _localctx = new NullContext(_localctx).                 enterOuterAlt(_localctx, 5).                 {                     setState(337).                     match(NULL).                 }                 break.             case 6:                 _localctx = new StringContext(_localctx).                 enterOuterAlt(_localctx, 6).                 {                     setState(338).                     match(STRING).                 }                 break.             case 7:                 _localctx = new RegexContext(_localctx).                 enterOuterAlt(_localctx, 7).                 {                     setState(339).                     match(REGEX).                 }                 break.             case 8:                 _localctx = new ListinitContext(_localctx).                 enterOuterAlt(_localctx, 8).                 {                     setState(340).                     listinitializer().                 }                 break.             case 9:                 _localctx = new MapinitContext(_localctx).                 enterOuterAlt(_localctx, 9).                 {                     setState(341).                     mapinitializer().                 }                 break.             case 10:                 _localctx = new VariableContext(_localctx).                 enterOuterAlt(_localctx, 10).                 {                     setState(342).                     match(ID).                 }                 break.             case 11:                 _localctx = new CalllocalContext(_localctx).                 enterOuterAlt(_localctx, 11).                 {                     setState(343).                     match(ID).                     setState(344).                     arguments().                 }                 break.             case 12:                 _localctx = new NewobjectContext(_localctx).                 enterOuterAlt(_localctx, 12).                 {                     setState(345).                     match(NEW).                     setState(346).                     match(TYPE).                     setState(347).                     arguments().                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public CallinvokeContext callinvoke() {     return getRuleContext(CallinvokeContext.class, 0). }
false;public;0;3;;public FieldaccessContext fieldaccess() {     return getRuleContext(FieldaccessContext.class, 0). }
false;public;0;3;;public BraceaccessContext braceaccess() {     return getRuleContext(BraceaccessContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_postfix. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitPostfix(this).     else         return visitor.visitChildren(this). }
false;public,final;0;40;;public final PostfixContext postfix() throws RecognitionException {     PostfixContext _localctx = new PostfixContext(_ctx, getState()).     enterRule(_localctx, 38, RULE_postfix).     try {         setState(353).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 29, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(350).                     callinvoke().                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(351).                     fieldaccess().                 }                 break.             case 3:                 enterOuterAlt(_localctx, 3).                 {                     setState(352).                     braceaccess().                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public CallinvokeContext callinvoke() {     return getRuleContext(CallinvokeContext.class, 0). }
false;public;0;3;;public FieldaccessContext fieldaccess() {     return getRuleContext(FieldaccessContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_postdot. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitPostdot(this).     else         return visitor.visitChildren(this). }
false;public,final;0;33;;public final PostdotContext postdot() throws RecognitionException {     PostdotContext _localctx = new PostdotContext(_ctx, getState()).     enterRule(_localctx, 40, RULE_postdot).     try {         setState(357).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 30, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(355).                     callinvoke().                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(356).                     fieldaccess().                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode DOTID() {     return getToken(PainlessParser.DOTID, 0). }
false;public;0;3;;public ArgumentsContext arguments() {     return getRuleContext(ArgumentsContext.class, 0). }
false;public;0;1;;public TerminalNode DOT() {     return getToken(PainlessParser.DOT, 0). }
false;public;0;1;;public TerminalNode NSDOT() {     return getToken(PainlessParser.NSDOT, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_callinvoke. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitCallinvoke(this).     else         return visitor.visitChildren(this). }
false;public,final;0;30;;public final CallinvokeContext callinvoke() throws RecognitionException {     CallinvokeContext _localctx = new CallinvokeContext(_ctx, getState()).     enterRule(_localctx, 42, RULE_callinvoke).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(359).             _la = _input.LA(1).             if (!(_la == DOT || _la == NSDOT)) {                 _errHandler.recoverInline(this).             } else {                 consume().             }             setState(360).             match(DOTID).             setState(361).             arguments().         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode DOT() {     return getToken(PainlessParser.DOT, 0). }
false;public;0;1;;public TerminalNode NSDOT() {     return getToken(PainlessParser.NSDOT, 0). }
false;public;0;1;;public TerminalNode DOTID() {     return getToken(PainlessParser.DOTID, 0). }
false;public;0;1;;public TerminalNode DOTINTEGER() {     return getToken(PainlessParser.DOTINTEGER, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_fieldaccess. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitFieldaccess(this).     else         return visitor.visitChildren(this). }
false;public,final;0;33;;public final FieldaccessContext fieldaccess() throws RecognitionException {     FieldaccessContext _localctx = new FieldaccessContext(_ctx, getState()).     enterRule(_localctx, 44, RULE_fieldaccess).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(363).             _la = _input.LA(1).             if (!(_la == DOT || _la == NSDOT)) {                 _errHandler.recoverInline(this).             } else {                 consume().             }             setState(364).             _la = _input.LA(1).             if (!(_la == DOTINTEGER || _la == DOTID)) {                 _errHandler.recoverInline(this).             } else {                 consume().             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LBRACE() {     return getToken(PainlessParser.LBRACE, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode RBRACE() {     return getToken(PainlessParser.RBRACE, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_braceaccess. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitBraceaccess(this).     else         return visitor.visitChildren(this). }
false;public,final;0;24;;public final BraceaccessContext braceaccess() throws RecognitionException {     BraceaccessContext _localctx = new BraceaccessContext(_ctx, getState()).     enterRule(_localctx, 46, RULE_braceaccess).     try {         enterOuterAlt(_localctx, 1).         {             setState(366).             match(LBRACE).             setState(367).             expression(0).             setState(368).             match(RBRACE).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_arrayinitializer. }
false;public;1;3;;public void copyFrom(ArrayinitializerContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode NEW() {     return getToken(PainlessParser.NEW, 0). }
false;public;0;1;;public TerminalNode TYPE() {     return getToken(PainlessParser.TYPE, 0). }
false;public;0;1;;public List<TerminalNode> LBRACE() {     return getTokens(PainlessParser.LBRACE). }
false;public;1;3;;public TerminalNode LBRACE(int i) {     return getToken(PainlessParser.LBRACE, i). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public List<TerminalNode> RBRACE() {     return getTokens(PainlessParser.RBRACE). }
false;public;1;3;;public TerminalNode RBRACE(int i) {     return getToken(PainlessParser.RBRACE, i). }
false;public;0;3;;public PostdotContext postdot() {     return getRuleContext(PostdotContext.class, 0). }
false;public;0;3;;public List<PostfixContext> postfix() {     return getRuleContexts(PostfixContext.class). }
false;public;1;3;;public PostfixContext postfix(int i) {     return getRuleContext(PostfixContext.class, i). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitNewstandardarray(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode NEW() {     return getToken(PainlessParser.NEW, 0). }
false;public;0;1;;public TerminalNode TYPE() {     return getToken(PainlessParser.TYPE, 0). }
false;public;0;1;;public TerminalNode LBRACE() {     return getToken(PainlessParser.LBRACE, 0). }
false;public;0;1;;public TerminalNode RBRACE() {     return getToken(PainlessParser.RBRACE, 0). }
false;public;0;1;;public TerminalNode LBRACK() {     return getToken(PainlessParser.LBRACK, 0). }
false;public;0;1;;public TerminalNode RBRACK() {     return getToken(PainlessParser.RBRACK, 0). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;3;;public List<PostfixContext> postfix() {     return getRuleContexts(PostfixContext.class). }
false;public;1;3;;public PostfixContext postfix(int i) {     return getRuleContext(PostfixContext.class, i). }
false;public;0;1;;public List<TerminalNode> COMMA() {     return getTokens(PainlessParser.COMMA). }
false;public;1;3;;public TerminalNode COMMA(int i) {     return getToken(PainlessParser.COMMA, i). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitNewinitializedarray(this).     else         return visitor.visitChildren(this). }
false;public,final;0;140;;public final ArrayinitializerContext arrayinitializer() throws RecognitionException {     ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState()).     enterRule(_localctx, 48, RULE_arrayinitializer).     int _la.     try {         int _alt.         setState(411).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 37, _ctx)) {             case 1:                 _localctx = new NewstandardarrayContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(370).                     match(NEW).                     setState(371).                     match(TYPE).                     setState(376).                     _errHandler.sync(this).                     _alt = 1.                     do {                         switch(_alt) {                             case 1:                                 {                                     {                                         setState(372).                                         match(LBRACE).                                         setState(373).                                         expression(0).                                         setState(374).                                         match(RBRACE).                                     }                                 }                                 break.                             default:                                 throw new NoViableAltException(this).                         }                         setState(378).                         _errHandler.sync(this).                         _alt = getInterpreter().adaptivePredict(_input, 31, _ctx).                     } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER).                     setState(387).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 33, _ctx)) {                         case 1:                             {                                 setState(380).                                 postdot().                                 setState(384).                                 _errHandler.sync(this).                                 _alt = getInterpreter().adaptivePredict(_input, 32, _ctx).                                 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                                     if (_alt == 1) {                                         {                                             {                                                 setState(381).                                                 postfix().                                             }                                         }                                     }                                     setState(386).                                     _errHandler.sync(this).                                     _alt = getInterpreter().adaptivePredict(_input, 32, _ctx).                                 }                             }                             break.                     }                 }                 break.             case 2:                 _localctx = new NewinitializedarrayContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(389).                     match(NEW).                     setState(390).                     match(TYPE).                     setState(391).                     match(LBRACE).                     setState(392).                     match(RBRACE).                     setState(393).                     match(LBRACK).                     setState(402).                     _la = _input.LA(1).                     if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {                         {                             setState(394).                             expression(0).                             setState(399).                             _errHandler.sync(this).                             _la = _input.LA(1).                             while (_la == COMMA) {                                 {                                     {                                         setState(395).                                         match(COMMA).                                         setState(396).                                         expression(0).                                     }                                 }                                 setState(401).                                 _errHandler.sync(this).                                 _la = _input.LA(1).                             }                         }                     }                     setState(404).                     match(RBRACK).                     setState(408).                     _errHandler.sync(this).                     _alt = getInterpreter().adaptivePredict(_input, 36, _ctx).                     while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                         if (_alt == 1) {                             {                                 {                                     setState(405).                                     postfix().                                 }                             }                         }                         setState(410).                         _errHandler.sync(this).                         _alt = getInterpreter().adaptivePredict(_input, 36, _ctx).                     }                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LBRACE() {     return getToken(PainlessParser.LBRACE, 0). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public TerminalNode RBRACE() {     return getToken(PainlessParser.RBRACE, 0). }
false;public;0;1;;public List<TerminalNode> COMMA() {     return getTokens(PainlessParser.COMMA). }
false;public;1;3;;public TerminalNode COMMA(int i) {     return getToken(PainlessParser.COMMA, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_listinitializer. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitListinitializer(this).     else         return visitor.visitChildren(this). }
false;public,final;0;56;;public final ListinitializerContext listinitializer() throws RecognitionException {     ListinitializerContext _localctx = new ListinitializerContext(_ctx, getState()).     enterRule(_localctx, 50, RULE_listinitializer).     int _la.     try {         setState(426).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 39, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(413).                     match(LBRACE).                     setState(414).                     expression(0).                     setState(419).                     _errHandler.sync(this).                     _la = _input.LA(1).                     while (_la == COMMA) {                         {                             {                                 setState(415).                                 match(COMMA).                                 setState(416).                                 expression(0).                             }                         }                         setState(421).                         _errHandler.sync(this).                         _la = _input.LA(1).                     }                     setState(422).                     match(RBRACE).                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(424).                     match(LBRACE).                     setState(425).                     match(RBRACE).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LBRACE() {     return getToken(PainlessParser.LBRACE, 0). }
false;public;0;3;;public List<MaptokenContext> maptoken() {     return getRuleContexts(MaptokenContext.class). }
false;public;1;3;;public MaptokenContext maptoken(int i) {     return getRuleContext(MaptokenContext.class, i). }
false;public;0;1;;public TerminalNode RBRACE() {     return getToken(PainlessParser.RBRACE, 0). }
false;public;0;1;;public List<TerminalNode> COMMA() {     return getTokens(PainlessParser.COMMA). }
false;public;1;3;;public TerminalNode COMMA(int i) {     return getToken(PainlessParser.COMMA, i). }
false;public;0;1;;public TerminalNode COLON() {     return getToken(PainlessParser.COLON, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_mapinitializer. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitMapinitializer(this).     else         return visitor.visitChildren(this). }
false;public,final;0;58;;public final MapinitializerContext mapinitializer() throws RecognitionException {     MapinitializerContext _localctx = new MapinitializerContext(_ctx, getState()).     enterRule(_localctx, 52, RULE_mapinitializer).     int _la.     try {         setState(442).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 41, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(428).                     match(LBRACE).                     setState(429).                     maptoken().                     setState(434).                     _errHandler.sync(this).                     _la = _input.LA(1).                     while (_la == COMMA) {                         {                             {                                 setState(430).                                 match(COMMA).                                 setState(431).                                 maptoken().                             }                         }                         setState(436).                         _errHandler.sync(this).                         _la = _input.LA(1).                     }                     setState(437).                     match(RBRACE).                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(439).                     match(LBRACE).                     setState(440).                     match(COLON).                     setState(441).                     match(RBRACE).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;public TerminalNode COLON() {     return getToken(PainlessParser.COLON, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_maptoken. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitMaptoken(this).     else         return visitor.visitChildren(this). }
false;public,final;0;24;;public final MaptokenContext maptoken() throws RecognitionException {     MaptokenContext _localctx = new MaptokenContext(_ctx, getState()).     enterRule(_localctx, 54, RULE_maptoken).     try {         enterOuterAlt(_localctx, 1).         {             setState(444).             expression(0).             setState(445).             match(COLON).             setState(446).             expression(0).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public List<ArgumentContext> argument() {     return getRuleContexts(ArgumentContext.class). }
false;public;1;3;;public ArgumentContext argument(int i) {     return getRuleContext(ArgumentContext.class, i). }
false;public;0;1;;public List<TerminalNode> COMMA() {     return getTokens(PainlessParser.COMMA). }
false;public;1;3;;public TerminalNode COMMA(int i) {     return getToken(PainlessParser.COMMA, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_arguments. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitArguments(this).     else         return visitor.visitChildren(this). }
false;public,final;0;50;;public final ArgumentsContext arguments() throws RecognitionException {     ArgumentsContext _localctx = new ArgumentsContext(_ctx, getState()).     enterRule(_localctx, 56, RULE_arguments).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             {                 setState(448).                 match(LP).                 setState(457).                 _la = _input.LA(1).                 if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << THIS) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {                     {                         setState(449).                         argument().                         setState(454).                         _errHandler.sync(this).                         _la = _input.LA(1).                         while (_la == COMMA) {                             {                                 {                                     setState(450).                                     match(COMMA).                                     setState(451).                                     argument().                                 }                             }                             setState(456).                             _errHandler.sync(this).                             _la = _input.LA(1).                         }                     }                 }                 setState(459).                 match(RP).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;3;;public LambdaContext lambda() {     return getRuleContext(LambdaContext.class, 0). }
false;public;0;3;;public FuncrefContext funcref() {     return getRuleContext(FuncrefContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_argument. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitArgument(this).     else         return visitor.visitChildren(this). }
false;public,final;0;40;;public final ArgumentContext argument() throws RecognitionException {     ArgumentContext _localctx = new ArgumentContext(_ctx, getState()).     enterRule(_localctx, 58, RULE_argument).     try {         setState(464).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 44, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(461).                     expression(0).                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(462).                     lambda().                 }                 break.             case 3:                 enterOuterAlt(_localctx, 3).                 {                     setState(463).                     funcref().                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode ARROW() {     return getToken(PainlessParser.ARROW, 0). }
false;public;0;3;;public List<LamtypeContext> lamtype() {     return getRuleContexts(LamtypeContext.class). }
false;public;1;3;;public LamtypeContext lamtype(int i) {     return getRuleContext(LamtypeContext.class, i). }
false;public;0;1;;public TerminalNode LP() {     return getToken(PainlessParser.LP, 0). }
false;public;0;1;;public TerminalNode RP() {     return getToken(PainlessParser.RP, 0). }
false;public;0;3;;public BlockContext block() {     return getRuleContext(BlockContext.class, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public List<TerminalNode> COMMA() {     return getTokens(PainlessParser.COMMA). }
false;public;1;3;;public TerminalNode COMMA(int i) {     return getToken(PainlessParser.COMMA, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_lambda. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitLambda(this).     else         return visitor.visitChildren(this). }
false;public,final;0;102;;public final LambdaContext lambda() throws RecognitionException {     LambdaContext _localctx = new LambdaContext(_ctx, getState()).     enterRule(_localctx, 60, RULE_lambda).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(479).             switch(_input.LA(1)) {                 case TYPE:                 case ID:                     {                         setState(466).                         lamtype().                     }                     break.                 case LP:                     {                         setState(467).                         match(LP).                         setState(476).                         _la = _input.LA(1).                         if (_la == TYPE || _la == ID) {                             {                                 setState(468).                                 lamtype().                                 setState(473).                                 _errHandler.sync(this).                                 _la = _input.LA(1).                                 while (_la == COMMA) {                                     {                                         {                                             setState(469).                                             match(COMMA).                                             setState(470).                                             lamtype().                                         }                                     }                                     setState(475).                                     _errHandler.sync(this).                                     _la = _input.LA(1).                                 }                             }                         }                         setState(478).                         match(RP).                     }                     break.                 default:                     throw new NoViableAltException(this).             }             setState(481).             match(ARROW).             setState(484).             switch(_input.LA(1)) {                 case LBRACK:                     {                         setState(482).                         block().                     }                     break.                 case LBRACE:                 case LP:                 case NEW:                 case BOOLNOT:                 case BWNOT:                 case ADD:                 case SUB:                 case INCR:                 case DECR:                 case OCTAL:                 case HEX:                 case INTEGER:                 case DECIMAL:                 case STRING:                 case REGEX:                 case TRUE:                 case FALSE:                 case NULL:                 case TYPE:                 case ID:                     {                         setState(483).                         expression(0).                     }                     break.                 default:                     throw new NoViableAltException(this).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;0;3;;public DecltypeContext decltype() {     return getRuleContext(DecltypeContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_lamtype. }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitLamtype(this).     else         return visitor.visitChildren(this). }
false;public,final;0;30;;public final LamtypeContext lamtype() throws RecognitionException {     LamtypeContext _localctx = new LamtypeContext(_ctx, getState()).     enterRule(_localctx, 62, RULE_lamtype).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(487).             _la = _input.LA(1).             if (_la == TYPE) {                 {                     setState(486).                     decltype().                 }             }             setState(489).             match(ID).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_funcref. }
false;public;1;3;;public void copyFrom(FuncrefContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode TYPE() {     return getToken(PainlessParser.TYPE, 0). }
false;public;0;1;;public TerminalNode REF() {     return getToken(PainlessParser.REF, 0). }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitClassfuncref(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public List<TerminalNode> ID() {     return getTokens(PainlessParser.ID). }
false;public;1;3;;public TerminalNode ID(int i) {     return getToken(PainlessParser.ID, i). }
false;public;0;1;;public TerminalNode REF() {     return getToken(PainlessParser.REF, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitCapturingfuncref(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public DecltypeContext decltype() {     return getRuleContext(DecltypeContext.class, 0). }
false;public;0;1;;public TerminalNode REF() {     return getToken(PainlessParser.REF, 0). }
false;public;0;1;;public TerminalNode NEW() {     return getToken(PainlessParser.NEW, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitConstructorfuncref(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode THIS() {     return getToken(PainlessParser.THIS, 0). }
false;public;0;1;;public TerminalNode REF() {     return getToken(PainlessParser.REF, 0). }
false;public;0;1;;public TerminalNode ID() {     return getToken(PainlessParser.ID, 0). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof PainlessParserVisitor)         return ((PainlessParserVisitor<? extends T>) visitor).visitLocalfuncref(this).     else         return visitor.visitChildren(this). }
false;public,final;0;67;;public final FuncrefContext funcref() throws RecognitionException {     FuncrefContext _localctx = new FuncrefContext(_ctx, getState()).     enterRule(_localctx, 64, RULE_funcref).     try {         setState(504).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 50, _ctx)) {             case 1:                 _localctx = new ClassfuncrefContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(491).                     match(TYPE).                     setState(492).                     match(REF).                     setState(493).                     match(ID).                 }                 break.             case 2:                 _localctx = new ConstructorfuncrefContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(494).                     decltype().                     setState(495).                     match(REF).                     setState(496).                     match(NEW).                 }                 break.             case 3:                 _localctx = new CapturingfuncrefContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(498).                     match(ID).                     setState(499).                     match(REF).                     setState(500).                     match(ID).                 }                 break.             case 4:                 _localctx = new LocalfuncrefContext(_localctx).                 enterOuterAlt(_localctx, 4).                 {                     setState(501).                     match(THIS).                     setState(502).                     match(REF).                     setState(503).                     match(ID).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;3;9;;public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {     switch(ruleIndex) {         case 4:             return rstatement_sempred((RstatementContext) _localctx, predIndex).         case 15:             return expression_sempred((ExpressionContext) _localctx, predIndex).     }     return true. }
false;private;2;7;;private boolean rstatement_sempred(RstatementContext _localctx, int predIndex) {     switch(predIndex) {         case 0:             return _input.LA(1) != ELSE.     }     return true. }
false;private;2;35;;private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {     switch(predIndex) {         case 1:             return precpred(_ctx, 15).         case 2:             return precpred(_ctx, 14).         case 3:             return precpred(_ctx, 13).         case 4:             return precpred(_ctx, 12).         case 5:             return precpred(_ctx, 11).         case 6:             return precpred(_ctx, 9).         case 7:             return precpred(_ctx, 8).         case 8:             return precpred(_ctx, 7).         case 9:             return precpred(_ctx, 6).         case 10:             return precpred(_ctx, 5).         case 11:             return precpred(_ctx, 4).         case 12:             return precpred(_ctx, 3).         case 13:             return precpred(_ctx, 2).         case 14:             return precpred(_ctx, 1).         case 15:             return precpred(_ctx, 10).     }     return true. }
