commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     throw createError(new IllegalStateException("Illegal tree structure.")). }
false;;1;30;;@Override void analyze(Locals locals) {     String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass).     getter = locals.getPainlessLookup().lookupPainlessMethod(targetClass, false, "get", 1).     setter = locals.getPainlessLookup().lookupPainlessMethod(targetClass, false, "put", 2).     if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {         throw createError(new IllegalArgumentException("Illegal map get shortcut for type [" + canonicalClassName + "].")).     }     if (setter != null && setter.typeParameters.size() != 2) {         throw createError(new IllegalArgumentException("Illegal map set shortcut for type [" + canonicalClassName + "].")).     }     if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) || !getter.returnType.equals(setter.typeParameters.get(1)))) {         throw createError(new IllegalArgumentException("Shortcut argument types must match.")).     }     if ((read || write) && (!read || getter != null) && (!write || setter != null)) {         index.expected = setter != null ? setter.typeParameters.get(0) : getter.typeParameters.get(0).         index.analyze(locals).         index = index.cast(locals).         actual = setter != null ? setter.typeParameters.get(1) : getter.returnType.     } else {         throw createError(new IllegalArgumentException("Illegal map shortcut for type [" + canonicalClassName + "].")).     } }
false;;2;11;;@Override void write(MethodWriter writer, Globals globals) {     index.write(writer, globals).     writer.writeDebugInfo(location).     writer.invokeMethodCall(getter).     if (getter.returnType != getter.javaMethod.getReturnType()) {         writer.checkCast(MethodWriter.getType(getter.returnType)).     } }
false;;0;4;;@Override int accessElementCount() {     return 2. }
false;;0;4;;@Override boolean isDefOptimized() {     return false. }
false;;1;4;;@Override void updateActual(Class<?> actual) {     throw new IllegalArgumentException("Illegal tree structure."). }
false;;2;4;;@Override void setup(MethodWriter writer, Globals globals) {     index.write(writer, globals). }
false;;2;9;;@Override void load(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.invokeMethodCall(getter).     if (getter.returnType != getter.javaMethod.getReturnType()) {         writer.checkCast(MethodWriter.getType(getter.returnType)).     } }
false;;2;6;;@Override void store(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.invokeMethodCall(setter).     writer.writePop(MethodWriter.getType(setter.returnType).getSize()). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(prefix, index). }
