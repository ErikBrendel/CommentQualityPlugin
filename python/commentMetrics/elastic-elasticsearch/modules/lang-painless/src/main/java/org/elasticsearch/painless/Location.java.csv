commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the script's name  */ ;/**  * Return the script's name  */ public String getSourceName() {     return sourceName. }
true;public;0;3;/**  * Return the character offset  */ ;/**  * Return the character offset  */ public int getOffset() {     return offset. }
true;public;1;10;/**  * Augments an exception with this location's information.  */ ;/**  * Augments an exception with this location's information.  */ public RuntimeException createError(RuntimeException exception) {     StackTraceElement element = new StackTraceElement(WriterConstants.CLASS_NAME, "compile", sourceName, offset + 1).     StackTraceElement[] oldStack = exception.getStackTrace().     StackTraceElement[] newStack = new StackTraceElement[oldStack.length + 1].     System.arraycopy(oldStack, 0, newStack, 1, oldStack.length).     newStack[0] = element.     exception.setStackTrace(newStack).     assert exception.getStackTrace().length == newStack.length : "non-writeable stacktrace for exception: " + exception.getClass().     return exception. }
true;public,static;1;26;/**  * Computes the file name (mostly important for stacktraces)  */ ;/**  * Computes the file name (mostly important for stacktraces)  */ public static String computeSourceName(String scriptName) {     StringBuilder fileName = new StringBuilder().     // its an anonymous script, include at least a portion of the source to help identify which one it is     // but don't create stacktraces with filenames that contain newlines or huge names.     // truncate to the first newline     int limit = scriptName.indexOf('\n').     if (limit >= 0) {         int limit2 = scriptName.indexOf('\r').         if (limit2 >= 0) {             limit = Math.min(limit, limit2).         }     } else {         limit = scriptName.length().     }     // truncate to our limit     limit = Math.min(limit, MAX_NAME_LENGTH).     fileName.append(scriptName, 0, limit).     // if we truncated, make it obvious     if (limit != scriptName.length()) {         fileName.append(" ...").     }     return fileName.toString(). }
