commented;modifiers;parameterAmount;loc;comment;code
true;abstract;0;1;/**  * Returns a value based on the number of elements previously placed on the  * stack to load/store a certain piece of a variable/method chain.  This is  * used during the writing phase to dup stack values from this storeable as  * necessary during certain store operations.  * <p>  * Examples:  * {@link EVariable} returns 0 because it requires nothing extra to perform  *                   a load/store  * {@link PSubField} returns 1 because it requires the name of the field as  *                   an index on the stack to perform a load/store  * {@link PSubBrace} returns 2 because it requires both the variable slot and  *                   an index into the array on the stack to perform a  *                   load/store  */ ;/**  * Returns a value based on the number of elements previously placed on the  * stack to load/store a certain piece of a variable/method chain.  This is  * used during the writing phase to dup stack values from this storeable as  * necessary during certain store operations.  * <p>  * Examples:  * {@link EVariable} returns 0 because it requires nothing extra to perform  *                   a load/store  * {@link PSubField} returns 1 because it requires the name of the field as  *                   an index on the stack to perform a load/store  * {@link PSubBrace} returns 2 because it requires both the variable slot and  *                   an index into the array on the stack to perform a  *                   load/store  */ abstract int accessElementCount().
true;abstract;0;1;/**  * Returns true if this node or a sub-node of this node can be optimized with  * rhs actual type to avoid an unnecessary cast.  */ ;/**  * Returns true if this node or a sub-node of this node can be optimized with  * rhs actual type to avoid an unnecessary cast.  */ abstract boolean isDefOptimized().
true;abstract;1;1;/**  * If this node or a sub-node of this node uses dynamic calls then  * actual will be set to this value. This is used for an optimization  * during assignment to def type targets.  */ ;/**  * If this node or a sub-node of this node uses dynamic calls then  * actual will be set to this value. This is used for an optimization  * during assignment to def type targets.  */ abstract void updateActual(Class<?> actual).
true;abstract;2;1;/**  * Called before a storeable node is loaded or stored.  Used to load prefixes and  * push load/store constants onto the stack if necessary.  */ ;/**  * Called before a storeable node is loaded or stored.  Used to load prefixes and  * push load/store constants onto the stack if necessary.  */ abstract void setup(MethodWriter writer, Globals globals).
true;abstract;2;1;/**  * Called to load a storable used for compound assignments.  */ ;/**  * Called to load a storable used for compound assignments.  */ abstract void load(MethodWriter writer, Globals globals).
true;abstract;2;1;/**  * Called to store a storabable to local memory.  */ ;/**  * Called to store a storabable to local memory.  */ abstract void store(MethodWriter writer, Globals globals).
true;static;2;12;/**  * Writes the opcodes to flip a negative array index (meaning slots from the end of the array) into a 0-based one (meaning slots from  * the start of the array).  */ ;/**  * Writes the opcodes to flip a negative array index (meaning slots from the end of the array) into a 0-based one (meaning slots from  * the start of the array).  */ static void writeIndexFlip(MethodWriter writer, Consumer<MethodWriter> writeGetLength) {     Label noFlip = new Label().     // Everywhere when it says 'array' below that could also be a list     // The stack after each instruction:       array, unnormalized_index     // array, unnormalized_index, unnormalized_index     writer.dup().     // array, unnormalized_index     writer.ifZCmp(Opcodes.IFGE, noFlip).     // negative_index, array     writer.swap().     // array, negative_index, array     writer.dupX1().     // array, negative_index, length     writeGetLength.accept(writer).     // array, noralized_index     writer.visitInsn(Opcodes.IADD).     // array, noralized_index     writer.mark(noFlip). }
