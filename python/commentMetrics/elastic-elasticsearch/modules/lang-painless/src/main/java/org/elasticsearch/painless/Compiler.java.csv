# id;timestamp;commentText;codeText;commentWords;codeWords
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1524684173;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, definition,_                debugStream)__        root.analyze(definition)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,definition,base,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,definition,debug,stream,root,analyze,definition,root,write,return,root,get,bytes
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1531179852;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, base)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, painlessLookup,_                debugStream)__        root.analyze(painlessLookup)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,base,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,painless,lookup,debug,stream,root,analyze,painless,lookup,root,write,return,root,get,bytes
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1533063033;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, painlessLookup,_                debugStream)__        root.analyze(painlessLookup)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,painless,lookup,debug,stream,root,analyze,painless,lookup,root,write,return,root,get,bytes
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1533295538;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, painlessLookup,_                debugStream)__        root.analyze(painlessLookup)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,painless,lookup,debug,stream,root,analyze,painless,lookup,root,write,return,root,get,bytes
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1533547893;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, painlessLookup,_                debugStream)__        root.analyze(painlessLookup)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,painless,lookup,debug,stream,root,analyze,painless,lookup,root,write,return,root,get,bytes
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1538067637;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, painlessLookup,_                debugStream)__        root.analyze(painlessLookup)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,painless,lookup,debug,stream,root,analyze,painless,lookup,root,write,return,root,get,bytes
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1539615817;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, painlessLookup,_                debugStream)__        root.analyze(painlessLookup)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,painless,lookup,debug,stream,root,analyze,painless,lookup,root,write,return,root,get,bytes
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1540486836;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, painlessLookup,_                debugStream)__        root.analyze(painlessLookup)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,painless,lookup,debug,stream,root,analyze,painless,lookup,root,write,return,root,get,bytes
Compiler -> byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream);1541200074;Runs the two-pass compiler to generate a Painless script.  (Used by the debugger.)_@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return The bytes for compilation.;byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {_        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, new MainMethodReserved(), name, source, settings, painlessLookup,_                debugStream)__        root.analyze(painlessLookup)__        root.write()___        return root.getBytes()__    };runs,the,two,pass,compiler,to,generate,a,painless,script,used,by,the,debugger,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,the,bytes,for,compilation;byte,compile,string,name,string,source,compiler,settings,settings,printer,debug,stream,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,new,main,method,reserved,name,source,settings,painless,lookup,debug,stream,root,analyze,painless,lookup,root,write,return,root,get,bytes
Compiler -> Loader -> Loader(ClassLoader parent);1533063033;@param parent The parent ClassLoader.;Loader(ClassLoader parent) {_            super(parent)__        };param,parent,the,parent,class,loader;loader,class,loader,parent,super,parent
Compiler -> Loader -> Loader(ClassLoader parent);1533295538;@param parent The parent ClassLoader.;Loader(ClassLoader parent) {_            super(parent)__        };param,parent,the,parent,class,loader;loader,class,loader,parent,super,parent
Compiler -> Loader -> Loader(ClassLoader parent);1533547893;@param parent The parent ClassLoader.;Loader(ClassLoader parent) {_            super(parent)__        };param,parent,the,parent,class,loader;loader,class,loader,parent,super,parent
Compiler -> Loader -> Loader(ClassLoader parent);1538067637;@param parent The parent ClassLoader.;Loader(ClassLoader parent) {_            super(parent)__        };param,parent,the,parent,class,loader;loader,class,loader,parent,super,parent
Compiler -> Loader -> Loader(ClassLoader parent);1539615817;@param parent The parent ClassLoader.;Loader(ClassLoader parent) {_            super(parent)__        };param,parent,the,parent,class,loader;loader,class,loader,parent,super,parent
Compiler -> Loader -> Loader(ClassLoader parent);1540486836;@param parent The parent ClassLoader.;Loader(ClassLoader parent) {_            super(parent)__        };param,parent,the,parent,class,loader;loader,class,loader,parent,super,parent
Compiler -> Loader -> Loader(ClassLoader parent);1541200074;@param parent The parent ClassLoader.;Loader(ClassLoader parent) {_            super(parent)__        };param,parent,the,parent,class,loader;loader,class,loader,parent,super,parent
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1524684173;Will check to see if the {@link Class} has already been loaded when_the {@link Definition} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            Class<?> found = definition.getClassFromBinaryName(name)___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,definition,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,class,found,definition,get,class,from,binary,name,name,return,found,null,found,super,find,class,name
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1531179852;Will check to see if the {@link Class} has already been loaded when_the {@link PainlessLookup} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            Class<?> found = painlessLookup.getClassFromBinaryName(name)___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,painless,lookup,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,class,found,painless,lookup,get,class,from,binary,name,name,return,found,null,found,super,find,class,name
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1533063033;Will check to see if the {@link Class} has already been loaded when_the {@link PainlessLookup} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            if (scriptClass.getName().equals(name)) {_                return scriptClass__            }_            if (factoryClass != null && factoryClass.getName().equals(name)) {_                return factoryClass__            }_            if (statefulFactoryClass != null && statefulFactoryClass.getName().equals(name)) {_                return statefulFactoryClass__            }_            Class<?> found = painlessLookup.getClassFromBinaryName(name)___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,painless,lookup,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,if,script,class,get,name,equals,name,return,script,class,if,factory,class,null,factory,class,get,name,equals,name,return,factory,class,if,stateful,factory,class,null,stateful,factory,class,get,name,equals,name,return,stateful,factory,class,class,found,painless,lookup,get,class,from,binary,name,name,return,found,null,found,super,find,class,name
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1533295538;Will check to see if the {@link Class} has already been loaded when_the {@link PainlessLookup} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            if (scriptClass.getName().equals(name)) {_                return scriptClass__            }_            if (factoryClass != null && factoryClass.getName().equals(name)) {_                return factoryClass__            }_            if (statefulFactoryClass != null && statefulFactoryClass.getName().equals(name)) {_                return statefulFactoryClass__            }_            Class<?> found = painlessLookup.canonicalTypeNameToType(name.replace('$', '.'))___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,painless,lookup,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,if,script,class,get,name,equals,name,return,script,class,if,factory,class,null,factory,class,get,name,equals,name,return,factory,class,if,stateful,factory,class,null,stateful,factory,class,get,name,equals,name,return,stateful,factory,class,class,found,painless,lookup,canonical,type,name,to,type,name,replace,return,found,null,found,super,find,class,name
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1533547893;Will check to see if the {@link Class} has already been loaded when_the {@link PainlessLookup} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            if (scriptClass.getName().equals(name)) {_                return scriptClass__            }_            if (factoryClass != null && factoryClass.getName().equals(name)) {_                return factoryClass__            }_            if (statefulFactoryClass != null && statefulFactoryClass.getName().equals(name)) {_                return statefulFactoryClass__            }_            Class<?> found = painlessLookup.canonicalTypeNameToType(name.replace('$', '.'))___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,painless,lookup,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,if,script,class,get,name,equals,name,return,script,class,if,factory,class,null,factory,class,get,name,equals,name,return,factory,class,if,stateful,factory,class,null,stateful,factory,class,get,name,equals,name,return,stateful,factory,class,class,found,painless,lookup,canonical,type,name,to,type,name,replace,return,found,null,found,super,find,class,name
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1538067637;Will check to see if the {@link Class} has already been loaded when_the {@link PainlessLookup} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            Class<?> found = additionalClasses.get(name)__            if (found != null) {_                return found__            }_            found = painlessLookup.canonicalTypeNameToType(name.replace('$', '.'))___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,painless,lookup,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,class,found,additional,classes,get,name,if,found,null,return,found,found,painless,lookup,canonical,type,name,to,type,name,replace,return,found,null,found,super,find,class,name
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1539615817;Will check to see if the {@link Class} has already been loaded when_the {@link PainlessLookup} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            Class<?> found = additionalClasses.get(name)__            if (found != null) {_                return found__            }_            found = painlessLookup.javaClassNameToClass(name)___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,painless,lookup,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,class,found,additional,classes,get,name,if,found,null,return,found,found,painless,lookup,java,class,name,to,class,name,return,found,null,found,super,find,class,name
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1540486836;Will check to see if the {@link Class} has already been loaded when_the {@link PainlessLookup} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            Class<?> found = additionalClasses.get(name)__            if (found != null) {_                return found__            }_            found = painlessLookup.javaClassNameToClass(name)___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,painless,lookup,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,class,found,additional,classes,get,name,if,found,null,return,found,found,painless,lookup,java,class,name,to,class,name,return,found,null,found,super,find,class,name
Compiler -> Loader -> @Override         public Class<?> findClass(String name) throws ClassNotFoundException;1541200074;Will check to see if the {@link Class} has already been loaded when_the {@link PainlessLookup} was initially created.  Allows for {@link Whitelist}ed_classes to be loaded from other modules/plugins without a direct relationship_to the module's/plugin's {@link ClassLoader}.;@Override_        public Class<?> findClass(String name) throws ClassNotFoundException {_            Class<?> found = additionalClasses.get(name)__            if (found != null) {_                return found__            }_            found = painlessLookup.javaClassNameToClass(name)___            return found != null ? found : super.findClass(name)__        };will,check,to,see,if,the,link,class,has,already,been,loaded,when,the,link,painless,lookup,was,initially,created,allows,for,link,whitelist,ed,classes,to,be,loaded,from,other,modules,plugins,without,a,direct,relationship,to,the,module,s,plugin,s,link,class,loader;override,public,class,find,class,string,name,throws,class,not,found,exception,class,found,additional,classes,get,name,if,found,null,return,found,found,painless,lookup,java,class,name,to,class,name,return,found,null,found,super,find,class,name
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1524684173;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1531179852;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1533063033;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1533295538;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1533547893;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1538067637;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1539615817;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1540486836;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineFactory(String name, byte[] bytes);1541200074;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object defining a factory.;Class<?> defineFactory(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,defining,a,factory;class,define,factory,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> public Loader createLoader(ClassLoader parent);1524684173;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link Definition}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent, definition)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,definition;public,loader,create,loader,class,loader,parent,return,new,loader,parent,definition
Compiler -> public Loader createLoader(ClassLoader parent);1531179852;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link PainlessLookup}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent, painlessLookup)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,painless,lookup;public,loader,create,loader,class,loader,parent,return,new,loader,parent,painless,lookup
Compiler -> public Loader createLoader(ClassLoader parent);1533063033;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link PainlessLookup}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,painless,lookup;public,loader,create,loader,class,loader,parent,return,new,loader,parent
Compiler -> public Loader createLoader(ClassLoader parent);1533295538;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link PainlessLookup}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,painless,lookup;public,loader,create,loader,class,loader,parent,return,new,loader,parent
Compiler -> public Loader createLoader(ClassLoader parent);1533547893;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link PainlessLookup}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,painless,lookup;public,loader,create,loader,class,loader,parent,return,new,loader,parent
Compiler -> public Loader createLoader(ClassLoader parent);1538067637;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link PainlessLookup}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,painless,lookup;public,loader,create,loader,class,loader,parent,return,new,loader,parent
Compiler -> public Loader createLoader(ClassLoader parent);1539615817;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link PainlessLookup}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,painless,lookup;public,loader,create,loader,class,loader,parent,return,new,loader,parent
Compiler -> public Loader createLoader(ClassLoader parent);1540486836;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link PainlessLookup}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,painless,lookup;public,loader,create,loader,class,loader,parent,return,new,loader,parent
Compiler -> public Loader createLoader(ClassLoader parent);1541200074;Return a new {@link Loader} for a script using the_{@link Compiler}'s specified {@link PainlessLookup}.;public Loader createLoader(ClassLoader parent) {_        return new Loader(parent)__    };return,a,new,link,loader,for,a,script,using,the,link,compiler,s,specified,link,painless,lookup;public,loader,create,loader,class,loader,parent,return,new,loader,parent
Compiler -> Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup);1533063033;Standard constructor._@param scriptClass The class/interface the script will implement._@param factoryClass An optional class/interface to create the {@code scriptClass} instance._@param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance._@param painlessLookup The whitelist the script will use.;Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {_        this.scriptClass = scriptClass__        this.factoryClass = factoryClass__        this.statefulFactoryClass = statefulFactoryClass__        this.painlessLookup = painlessLookup__    };standard,constructor,param,script,class,the,class,interface,the,script,will,implement,param,factory,class,an,optional,class,interface,to,create,the,code,script,class,instance,param,stateful,factory,class,an,optional,class,interface,to,create,the,code,factory,class,instance,param,painless,lookup,the,whitelist,the,script,will,use;compiler,class,script,class,class,factory,class,class,stateful,factory,class,painless,lookup,painless,lookup,this,script,class,script,class,this,factory,class,factory,class,this,stateful,factory,class,stateful,factory,class,this,painless,lookup,painless,lookup
Compiler -> Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup);1533295538;Standard constructor._@param scriptClass The class/interface the script will implement._@param factoryClass An optional class/interface to create the {@code scriptClass} instance._@param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance._@param painlessLookup The whitelist the script will use.;Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {_        this.scriptClass = scriptClass__        this.factoryClass = factoryClass__        this.statefulFactoryClass = statefulFactoryClass__        this.painlessLookup = painlessLookup__    };standard,constructor,param,script,class,the,class,interface,the,script,will,implement,param,factory,class,an,optional,class,interface,to,create,the,code,script,class,instance,param,stateful,factory,class,an,optional,class,interface,to,create,the,code,factory,class,instance,param,painless,lookup,the,whitelist,the,script,will,use;compiler,class,script,class,class,factory,class,class,stateful,factory,class,painless,lookup,painless,lookup,this,script,class,script,class,this,factory,class,factory,class,this,stateful,factory,class,stateful,factory,class,this,painless,lookup,painless,lookup
Compiler -> Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup);1533547893;Standard constructor._@param scriptClass The class/interface the script will implement._@param factoryClass An optional class/interface to create the {@code scriptClass} instance._@param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance._@param painlessLookup The whitelist the script will use.;Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {_        this.scriptClass = scriptClass__        this.factoryClass = factoryClass__        this.statefulFactoryClass = statefulFactoryClass__        this.painlessLookup = painlessLookup__    };standard,constructor,param,script,class,the,class,interface,the,script,will,implement,param,factory,class,an,optional,class,interface,to,create,the,code,script,class,instance,param,stateful,factory,class,an,optional,class,interface,to,create,the,code,factory,class,instance,param,painless,lookup,the,whitelist,the,script,will,use;compiler,class,script,class,class,factory,class,class,stateful,factory,class,painless,lookup,painless,lookup,this,script,class,script,class,this,factory,class,factory,class,this,stateful,factory,class,stateful,factory,class,this,painless,lookup,painless,lookup
Compiler -> Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup);1538067637;Standard constructor._@param scriptClass The class/interface the script will implement._@param factoryClass An optional class/interface to create the {@code scriptClass} instance._@param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance._@param painlessLookup The whitelist the script will use.;Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {_        this.scriptClass = scriptClass__        this.painlessLookup = painlessLookup__        Map<String, Class<?>> additionalClasses = new HashMap<>()__        additionalClasses.put(scriptClass.getName(), scriptClass)__        addFactoryMethod(additionalClasses, factoryClass, "newInstance")__        addFactoryMethod(additionalClasses, statefulFactoryClass, "newFactory")__        addFactoryMethod(additionalClasses, statefulFactoryClass, "newInstance")__        this.additionalClasses = Collections.unmodifiableMap(additionalClasses)__    };standard,constructor,param,script,class,the,class,interface,the,script,will,implement,param,factory,class,an,optional,class,interface,to,create,the,code,script,class,instance,param,stateful,factory,class,an,optional,class,interface,to,create,the,code,factory,class,instance,param,painless,lookup,the,whitelist,the,script,will,use;compiler,class,script,class,class,factory,class,class,stateful,factory,class,painless,lookup,painless,lookup,this,script,class,script,class,this,painless,lookup,painless,lookup,map,string,class,additional,classes,new,hash,map,additional,classes,put,script,class,get,name,script,class,add,factory,method,additional,classes,factory,class,new,instance,add,factory,method,additional,classes,stateful,factory,class,new,factory,add,factory,method,additional,classes,stateful,factory,class,new,instance,this,additional,classes,collections,unmodifiable,map,additional,classes
Compiler -> Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup);1539615817;Standard constructor._@param scriptClass The class/interface the script will implement._@param factoryClass An optional class/interface to create the {@code scriptClass} instance._@param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance._@param painlessLookup The whitelist the script will use.;Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {_        this.scriptClass = scriptClass__        this.painlessLookup = painlessLookup__        Map<String, Class<?>> additionalClasses = new HashMap<>()__        additionalClasses.put(scriptClass.getName(), scriptClass)__        addFactoryMethod(additionalClasses, factoryClass, "newInstance")__        addFactoryMethod(additionalClasses, statefulFactoryClass, "newFactory")__        addFactoryMethod(additionalClasses, statefulFactoryClass, "newInstance")__        this.additionalClasses = Collections.unmodifiableMap(additionalClasses)__    };standard,constructor,param,script,class,the,class,interface,the,script,will,implement,param,factory,class,an,optional,class,interface,to,create,the,code,script,class,instance,param,stateful,factory,class,an,optional,class,interface,to,create,the,code,factory,class,instance,param,painless,lookup,the,whitelist,the,script,will,use;compiler,class,script,class,class,factory,class,class,stateful,factory,class,painless,lookup,painless,lookup,this,script,class,script,class,this,painless,lookup,painless,lookup,map,string,class,additional,classes,new,hash,map,additional,classes,put,script,class,get,name,script,class,add,factory,method,additional,classes,factory,class,new,instance,add,factory,method,additional,classes,stateful,factory,class,new,factory,add,factory,method,additional,classes,stateful,factory,class,new,instance,this,additional,classes,collections,unmodifiable,map,additional,classes
Compiler -> Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup);1540486836;Standard constructor._@param scriptClass The class/interface the script will implement._@param factoryClass An optional class/interface to create the {@code scriptClass} instance._@param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance._@param painlessLookup The whitelist the script will use.;Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {_        this.scriptClass = scriptClass__        this.painlessLookup = painlessLookup__        Map<String, Class<?>> additionalClasses = new HashMap<>()__        additionalClasses.put(scriptClass.getName(), scriptClass)__        addFactoryMethod(additionalClasses, factoryClass, "newInstance")__        addFactoryMethod(additionalClasses, statefulFactoryClass, "newFactory")__        addFactoryMethod(additionalClasses, statefulFactoryClass, "newInstance")__        this.additionalClasses = Collections.unmodifiableMap(additionalClasses)__    };standard,constructor,param,script,class,the,class,interface,the,script,will,implement,param,factory,class,an,optional,class,interface,to,create,the,code,script,class,instance,param,stateful,factory,class,an,optional,class,interface,to,create,the,code,factory,class,instance,param,painless,lookup,the,whitelist,the,script,will,use;compiler,class,script,class,class,factory,class,class,stateful,factory,class,painless,lookup,painless,lookup,this,script,class,script,class,this,painless,lookup,painless,lookup,map,string,class,additional,classes,new,hash,map,additional,classes,put,script,class,get,name,script,class,add,factory,method,additional,classes,factory,class,new,instance,add,factory,method,additional,classes,stateful,factory,class,new,factory,add,factory,method,additional,classes,stateful,factory,class,new,instance,this,additional,classes,collections,unmodifiable,map,additional,classes
Compiler -> Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup);1541200074;Standard constructor._@param scriptClass The class/interface the script will implement._@param factoryClass An optional class/interface to create the {@code scriptClass} instance._@param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance._@param painlessLookup The whitelist the script will use.;Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {_        this.scriptClass = scriptClass__        this.painlessLookup = painlessLookup__        Map<String, Class<?>> additionalClasses = new HashMap<>()__        additionalClasses.put(scriptClass.getName(), scriptClass)__        addFactoryMethod(additionalClasses, factoryClass, "newInstance")__        addFactoryMethod(additionalClasses, statefulFactoryClass, "newFactory")__        addFactoryMethod(additionalClasses, statefulFactoryClass, "newInstance")__        this.additionalClasses = Collections.unmodifiableMap(additionalClasses)__    };standard,constructor,param,script,class,the,class,interface,the,script,will,implement,param,factory,class,an,optional,class,interface,to,create,the,code,script,class,instance,param,stateful,factory,class,an,optional,class,interface,to,create,the,code,factory,class,instance,param,painless,lookup,the,whitelist,the,script,will,use;compiler,class,script,class,class,factory,class,class,stateful,factory,class,painless,lookup,painless,lookup,this,script,class,script,class,this,painless,lookup,painless,lookup,map,string,class,additional,classes,new,hash,map,additional,classes,put,script,class,get,name,script,class,add,factory,method,additional,classes,factory,class,new,instance,add,factory,method,additional,classes,stateful,factory,class,new,factory,add,factory,method,additional,classes,stateful,factory,class,new,instance,this,additional,classes,collections,unmodifiable,map,additional,classes
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1524684173;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1531179852;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1533063033;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1533295538;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1533547893;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1538067637;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1539615817;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1540486836;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> Class<?> defineLambda(String name, byte[] bytes);1541200074;Generates a Class object for a lambda method._@param name The name of the class._@param bytes The generated byte code._@return A Class object.;Class<?> defineLambda(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE)__        };generates,a,class,object,for,a,lambda,method,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object;class,define,lambda,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource
Compiler -> Loader -> int newLambdaIdentifier();1524684173;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Loader -> int newLambdaIdentifier();1531179852;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Loader -> int newLambdaIdentifier();1533063033;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Loader -> int newLambdaIdentifier();1533295538;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Loader -> int newLambdaIdentifier();1533547893;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Loader -> int newLambdaIdentifier();1538067637;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Loader -> int newLambdaIdentifier();1539615817;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Loader -> int newLambdaIdentifier();1540486836;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Loader -> int newLambdaIdentifier();1541200074;A counter used to generate a unique name for each lambda_function/reference class in this classloader.;int newLambdaIdentifier() {_            return lambdaCounter.getAndIncrement()__        };a,counter,used,to,generate,a,unique,name,for,each,lambda,function,reference,class,in,this,classloader;int,new,lambda,identifier,return,lambda,counter,get,and,increment
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1524684173;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, definition,_                null)__        root.analyze(definition)__        root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, definition)___            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,definition,base,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,definition,null,root,analyze,definition,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,definition,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1531179852;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, base)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, painlessLookup,_                null)__        root.analyze(painlessLookup)__        root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, painlessLookup)___            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,base,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,painless,lookup,null,root,analyze,painless,lookup,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,painless,lookup,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1533063033;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, painlessLookup,_                null)__        root.analyze(painlessLookup)__        root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, painlessLookup)___            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,painless,lookup,null,root,analyze,painless,lookup,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,painless,lookup,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1533295538;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, painlessLookup,_                null)__        root.analyze(painlessLookup)__        root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, painlessLookup)___            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,painless,lookup,null,root,analyze,painless,lookup,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,painless,lookup,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1533547893;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, painlessLookup,_                null)__        Map<String, LocalMethod> localMethods = root.analyze(painlessLookup)__        root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, painlessLookup)__            clazz.getField("$LOCALS").set(null, localMethods)___            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,painless,lookup,null,map,string,local,method,local,methods,root,analyze,painless,lookup,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,painless,lookup,clazz,get,field,locals,set,null,local,methods,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1538067637;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, painlessLookup,_                null)__        Map<String, LocalMethod> localMethods = root.analyze(painlessLookup)__        root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, painlessLookup)__            clazz.getField("$LOCALS").set(null, localMethods)___            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,painless,lookup,null,map,string,local,method,local,methods,root,analyze,painless,lookup,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,painless,lookup,clazz,get,field,locals,set,null,local,methods,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1539615817;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, painlessLookup,_                null)__        Map<String, LocalMethod> localMethods = root.analyze(painlessLookup)__        root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, painlessLookup)__            clazz.getField("$LOCALS").set(null, localMethods)___            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,painless,lookup,null,map,string,local,method,local,methods,root,analyze,painless,lookup,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,painless,lookup,clazz,get,field,locals,set,null,local,methods,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1540486836;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        if (source.length() > MAXIMUM_SOURCE_LENGTH) {_            throw new IllegalArgumentException("Scripts may be no longer than " + MAXIMUM_SOURCE_LENGTH +_                " characters.  The passed in script is " + source.length() + " characters.  Consider using a" +_                " plugin if a script longer than this length is a requirement.")__        }__        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, painlessLookup,_                null)__        root.analyze(painlessLookup)__        Map<String, Object> statics = root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, painlessLookup)___            for (Map.Entry<String, Object> statik : statics.entrySet()) {_                clazz.getField(statik.getKey()).set(null, statik.getValue())__            }__            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,if,source,length,throw,new,illegal,argument,exception,scripts,may,be,no,longer,than,characters,the,passed,in,script,is,source,length,characters,consider,using,a,plugin,if,a,script,longer,than,this,length,is,a,requirement,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,painless,lookup,null,root,analyze,painless,lookup,map,string,object,statics,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,painless,lookup,for,map,entry,string,object,statik,statics,entry,set,clazz,get,field,statik,get,key,set,null,statik,get,value,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings);1541200074;Runs the two-pass compiler to generate a Painless script._@param loader The ClassLoader used to define the script._@param name The name of the script._@param source The source code for the script._@param settings The CompilerSettings to be used during the compilation._@return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript};Constructor<?> compile(Loader loader, MainMethodReserved reserved, String name, String source, CompilerSettings settings) {_        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass)__        SSource root = Walker.buildPainlessTree(scriptClassInfo, reserved, name, source, settings, painlessLookup,_                null)__        root.analyze(painlessLookup)__        Map<String, Object> statics = root.write()___        try {_            Class<? extends PainlessScript> clazz = loader.defineScript(CLASS_NAME, root.getBytes())__            clazz.getField("$NAME").set(null, name)__            clazz.getField("$SOURCE").set(null, source)__            clazz.getField("$STATEMENTS").set(null, root.getStatements())__            clazz.getField("$DEFINITION").set(null, painlessLookup)___            for (Map.Entry<String, Object> statik : statics.entrySet()) {_                clazz.getField(statik.getKey()).set(null, statik.getValue())__            }__            return clazz.getConstructors()[0]__        } catch (Exception exception) { _            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception)__        }_    };runs,the,two,pass,compiler,to,generate,a,painless,script,param,loader,the,class,loader,used,to,define,the,script,param,name,the,name,of,the,script,param,source,the,source,code,for,the,script,param,settings,the,compiler,settings,to,be,used,during,the,compilation,return,an,executable,script,that,implements,both,a,specified,interface,and,is,a,subclass,of,link,painless,script;constructor,compile,loader,loader,main,method,reserved,reserved,string,name,string,source,compiler,settings,settings,script,class,info,script,class,info,new,script,class,info,painless,lookup,script,class,ssource,root,walker,build,painless,tree,script,class,info,reserved,name,source,settings,painless,lookup,null,root,analyze,painless,lookup,map,string,object,statics,root,write,try,class,extends,painless,script,clazz,loader,define,script,root,get,bytes,clazz,get,field,name,set,null,name,clazz,get,field,source,set,null,source,clazz,get,field,statements,set,null,root,get,statements,clazz,get,field,definition,set,null,painless,lookup,for,map,entry,string,object,statik,statics,entry,set,clazz,get,field,statik,get,key,set,null,statik,get,value,return,clazz,get,constructors,0,catch,exception,exception,throw,new,illegal,state,exception,an,internal,error,occurred,attempting,to,define,the,script,name,exception
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1524684173;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1531179852;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1533063033;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1533295538;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1533547893;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1538067637;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1539615817;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1540486836;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
Compiler -> Loader -> Class<? extends PainlessScript> defineScript(String name, byte[] bytes);1541200074;Generates a Class object from the generated byte code._@param name The name of the class._@param bytes The generated byte code._@return A Class object extending {@link PainlessScript}.;Class<? extends PainlessScript> defineScript(String name, byte[] bytes) {_            return defineClass(name, bytes, 0, bytes.length, CODESOURCE).asSubclass(PainlessScript.class)__        };generates,a,class,object,from,the,generated,byte,code,param,name,the,name,of,the,class,param,bytes,the,generated,byte,code,return,a,class,object,extending,link,painless,script;class,extends,painless,script,define,script,string,name,byte,bytes,return,define,class,name,bytes,0,bytes,length,codesource,as,subclass,painless,script,class
