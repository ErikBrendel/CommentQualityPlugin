commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     expression.extractVariables(variables). }
false;;1;21;;@Override void analyze(Locals locals) {     if (expression == null) {         if (locals.getReturnType() != void.class) {             throw location.createError(new ClassCastException("Cannot cast from " + "[" + PainlessLookupUtility.typeToCanonicalTypeName(locals.getReturnType()) + "] to " + "[" + PainlessLookupUtility.typeToCanonicalTypeName(void.class) + "].")).         }     } else {         expression.expected = locals.getReturnType().         expression.internal = true.         expression.analyze(locals).         expression = expression.cast(locals).     }     methodEscape = true.     loopEscape = true.     allEscape = true.     statementCount = 1. }
false;;2;10;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     if (expression != null) {         expression.write(writer, globals).     }     writer.returnValue(). }
false;public;0;4;;@Override public String toString() {     return expression == null ? singleLineToString() : singleLineToString(expression). }
