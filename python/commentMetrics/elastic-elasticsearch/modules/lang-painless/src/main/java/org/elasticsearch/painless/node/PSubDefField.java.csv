commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     throw createError(new IllegalStateException("Illegal tree structure.")). }
false;;1;4;;@Override void analyze(Locals locals) {     actual = expected == null || explicit ? def.class : expected. }
false;;2;8;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     org.objectweb.asm.Type methodType = org.objectweb.asm.Type.getMethodType(MethodWriter.getType(actual), org.objectweb.asm.Type.getType(Object.class)).     writer.invokeDefCall(value, methodType, DefBootstrap.LOAD). }
false;;0;4;;@Override int accessElementCount() {     return 1. }
false;;0;4;;@Override boolean isDefOptimized() {     return true. }
false;;1;4;;@Override void updateActual(Class<?> actual) {     this.actual = actual. }
false;;2;4;;@Override void setup(MethodWriter writer, Globals globals) { // Do nothing. }
false;;2;8;;@Override void load(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     org.objectweb.asm.Type methodType = org.objectweb.asm.Type.getMethodType(MethodWriter.getType(actual), org.objectweb.asm.Type.getType(Object.class)).     writer.invokeDefCall(value, methodType, DefBootstrap.LOAD). }
false;;2;8;;@Override void store(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     org.objectweb.asm.Type methodType = org.objectweb.asm.Type.getMethodType(org.objectweb.asm.Type.getType(void.class), org.objectweb.asm.Type.getType(Object.class), MethodWriter.getType(actual)).     writer.invokeDefCall(value, methodType, DefBootstrap.STORE). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(prefix, value). }
