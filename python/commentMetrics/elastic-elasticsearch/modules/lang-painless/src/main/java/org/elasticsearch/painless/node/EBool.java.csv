commented;modifiers;parameterAmount;loc;comment;code
false;;1;5;;@Override void extractVariables(Set<String> variables) {     left.extractVariables(variables).     right.extractVariables(variables). }
false;;1;22;;@Override void analyze(Locals locals) {     left.expected = boolean.class.     left.analyze(locals).     left = left.cast(locals).     right.expected = boolean.class.     right.analyze(locals).     right = right.cast(locals).     if (left.constant != null && right.constant != null) {         if (operation == Operation.AND) {             constant = (boolean) left.constant && (boolean) right.constant.         } else if (operation == Operation.OR) {             constant = (boolean) left.constant || (boolean) right.constant.         } else {             throw createError(new IllegalStateException("Illegal tree structure.")).         }     }     actual = boolean.class. }
false;;2;36;;@Override void write(MethodWriter writer, Globals globals) {     if (operation == Operation.AND) {         Label fals = new Label().         Label end = new Label().         left.write(writer, globals).         writer.ifZCmp(Opcodes.IFEQ, fals).         right.write(writer, globals).         writer.ifZCmp(Opcodes.IFEQ, fals).         writer.push(true).         writer.goTo(end).         writer.mark(fals).         writer.push(false).         writer.mark(end).     } else if (operation == Operation.OR) {         Label tru = new Label().         Label fals = new Label().         Label end = new Label().         left.write(writer, globals).         writer.ifZCmp(Opcodes.IFNE, tru).         right.write(writer, globals).         writer.ifZCmp(Opcodes.IFEQ, fals).         writer.mark(tru).         writer.push(true).         writer.goTo(end).         writer.mark(fals).         writer.push(false).         writer.mark(end).     } else {         throw createError(new IllegalStateException("Illegal tree structure.")).     } }
false;public;0;4;;@Override public String toString() {     return singleLineToString(left, operation.symbol, right). }
