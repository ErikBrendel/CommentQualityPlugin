# id;timestamp;commentText;codeText;commentWords;codeWords
MethodWriter -> public int writeNewStrings();1524684173;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1531179852;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1531910483;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1533143718;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1533738061;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1533921794;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1537806831;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1544203947;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1544565998;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public int writeNewStrings();1545072619;Starts a new string concat._@return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder);public int writeNewStrings() {_        if (INDY_STRING_CONCAT_BOOTSTRAP_HANDLE != null) {_            _            stringConcatArgs.push(new ArrayList<>())__            return 0_ _        } else {_            _            newInstance(STRINGBUILDER_TYPE)__            dup()__            invokeConstructor(STRINGBUILDER_TYPE, STRINGBUILDER_CONSTRUCTOR)__            return 1_ _        }_    };starts,a,new,string,concat,return,the,size,of,arguments,pushed,to,stack,the,object,that,does,string,concats,e,g,a,string,builder;public,int,write,new,strings,if,null,string,concat,args,push,new,array,list,return,0,else,new,instance,dup,invoke,constructor,return,1
MethodWriter -> public void writeDebugInfo(Location location);1524684173;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1531179852;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1531910483;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1533143718;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1533738061;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1533921794;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1537806831;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1544203947;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1544565998;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDebugInfo(Location location);1545072619;Encodes the offset into the line number table as {@code offset + 1}._<p>_This is invoked before instructions that can hit exceptions.;public void writeDebugInfo(Location location) {_        _        Label label = new Label()__        visitLabel(label)__        visitLineNumber(location.getOffset() + 1, label)__    };encodes,the,offset,into,the,line,number,table,as,code,offset,1,p,this,is,invoked,before,instructions,that,can,hit,exceptions;public,void,write,debug,info,location,location,label,label,new,label,visit,label,label,visit,line,number,location,get,offset,1,label
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1524684173;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1531179852;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1531910483;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1533143718;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1533738061;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1533921794;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1537806831;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1544203947;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1544565998;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,                                               Operation operation, int flags);1545072619;Writes a dynamic binary instruction: returnType, lhs, and rhs can be different;public void writeDynamicBinaryInstruction(Location location, Class<?> returnType, Class<?> lhs, Class<?> rhs,_                                              Operation operation, int flags) {_        Type methodType = Type.getMethodType(getType(returnType), getType(lhs), getType(rhs))___        switch (operation) {_            case MUL:_                invokeDefCall("mul", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case DIV:_                invokeDefCall("div", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case REM:_                invokeDefCall("rem", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case ADD:_                _                _                _                boolean hasPrimitiveArg = lhs.isPrimitive() || rhs.isPrimitive()__                if (!hasPrimitiveArg) {_                    flags |= DefBootstrap.OPERATOR_ALLOWS_NULL__                }_                invokeDefCall("add", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case SUB:_                invokeDefCall("sub", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case LSH:_                invokeDefCall("lsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case USH:_                invokeDefCall("ush", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case RSH:_                invokeDefCall("rsh", methodType, DefBootstrap.SHIFT_OPERATOR, flags)__                break__            case BWAND:_                invokeDefCall("and", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case XOR:_                invokeDefCall("xor", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            case BWOR:_                invokeDefCall("or", methodType, DefBootstrap.BINARY_OPERATOR, flags)__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,dynamic,binary,instruction,return,type,lhs,and,rhs,can,be,different;public,void,write,dynamic,binary,instruction,location,location,class,return,type,class,lhs,class,rhs,operation,operation,int,flags,type,method,type,type,get,method,type,get,type,return,type,get,type,lhs,get,type,rhs,switch,operation,case,mul,invoke,def,call,mul,method,type,def,bootstrap,flags,break,case,div,invoke,def,call,div,method,type,def,bootstrap,flags,break,case,rem,invoke,def,call,rem,method,type,def,bootstrap,flags,break,case,add,boolean,has,primitive,arg,lhs,is,primitive,rhs,is,primitive,if,has,primitive,arg,flags,def,bootstrap,invoke,def,call,add,method,type,def,bootstrap,flags,break,case,sub,invoke,def,call,sub,method,type,def,bootstrap,flags,break,case,lsh,invoke,def,call,lsh,method,type,def,bootstrap,flags,break,case,ush,invoke,def,call,ush,method,type,def,bootstrap,flags,break,case,rsh,invoke,def,call,rsh,method,type,def,bootstrap,flags,break,case,bwand,invoke,def,call,and,method,type,def,bootstrap,flags,break,case,xor,invoke,def,call,xor,method,type,def,bootstrap,flags,break,case,bwor,invoke,def,call,or,method,type,def,bootstrap,flags,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> @Override     public void box(Type type);1524684173;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1531179852;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1531910483;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1533143718;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1533738061;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1533921794;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1537806831;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1544203947;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1544565998;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> @Override     public void box(Type type);1545072619;Proxy the box method to use valueOf instead to ensure that the modern boxing methods are used.;@Override_    public void box(Type type) {_        valueOf(type)__    };proxy,the,box,method,to,use,value,of,instead,to,ensure,that,the,modern,boxing,methods,are,used;override,public,void,box,type,type,value,of,type
MethodWriter -> public void writeStatementOffset(Location location);1524684173;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1531179852;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1531910483;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1533143718;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1533738061;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1533921794;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1537806831;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1544203947;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1544565998;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void writeStatementOffset(Location location);1545072619;Marks a new statement boundary._<p>_This is invoked for each statement boundary (leaf {@code S*} nodes).;public void writeStatementOffset(Location location) {_        int offset = location.getOffset()__        _        _        assert statements.get(offset) == false__        statements.set(offset)__    };marks,a,new,statement,boundary,p,this,is,invoked,for,each,statement,boundary,leaf,code,s,nodes;public,void,write,statement,offset,location,location,int,offset,location,get,offset,assert,statements,get,offset,false,statements,set,offset
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1524684173;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1531179852;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1531910483;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1533143718;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1533738061;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1533921794;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1537806831;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1544203947;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1544565998;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void invokeDefCall(String name, Type methodType, int flavor, Object... params);1545072619;Writes a dynamic call for a def method._@param name method name_@param methodType callsite signature_@param flavor type of call_@param params flavor-specific parameters;public void invokeDefCall(String name, Type methodType, int flavor, Object... params) {_        Object[] args = new Object[params.length + 2]__        args[0] = settings.getInitialCallSiteDepth()__        args[1] = flavor__        System.arraycopy(params, 0, args, 2, params.length)__        invokeDynamic(name, methodType.getDescriptor(), DEF_BOOTSTRAP_HANDLE, args)__    };writes,a,dynamic,call,for,a,def,method,param,name,method,name,param,method,type,callsite,signature,param,flavor,type,of,call,param,params,flavor,specific,parameters;public,void,invoke,def,call,string,name,type,method,type,int,flavor,object,params,object,args,new,object,params,length,2,args,0,settings,get,initial,call,site,depth,args,1,flavor,system,arraycopy,params,0,args,2,params,length,invoke,dynamic,name,method,type,get,descriptor,args
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1524684173;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:   math(GeneratorAdapter.MUL,  getType(clazz))_ break__            case DIV:   math(GeneratorAdapter.DIV,  getType(clazz))_ break__            case REM:   math(GeneratorAdapter.REM,  getType(clazz))_ break__            case ADD:   math(GeneratorAdapter.ADD,  getType(clazz))_ break__            case SUB:   math(GeneratorAdapter.SUB,  getType(clazz))_ break__            case LSH:   math(GeneratorAdapter.SHL,  getType(clazz))_ break__            case USH:   math(GeneratorAdapter.USHR, getType(clazz))_ break__            case RSH:   math(GeneratorAdapter.SHR,  getType(clazz))_ break__            case BWAND: math(GeneratorAdapter.AND,  getType(clazz))_ break__            case XOR:   math(GeneratorAdapter.XOR,  getType(clazz))_ break__            case BWOR:  math(GeneratorAdapter.OR,   getType(clazz))_ break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1531179852;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:   math(GeneratorAdapter.MUL,  getType(clazz))_ break__            case DIV:   math(GeneratorAdapter.DIV,  getType(clazz))_ break__            case REM:   math(GeneratorAdapter.REM,  getType(clazz))_ break__            case ADD:   math(GeneratorAdapter.ADD,  getType(clazz))_ break__            case SUB:   math(GeneratorAdapter.SUB,  getType(clazz))_ break__            case LSH:   math(GeneratorAdapter.SHL,  getType(clazz))_ break__            case USH:   math(GeneratorAdapter.USHR, getType(clazz))_ break__            case RSH:   math(GeneratorAdapter.SHR,  getType(clazz))_ break__            case BWAND: math(GeneratorAdapter.AND,  getType(clazz))_ break__            case XOR:   math(GeneratorAdapter.XOR,  getType(clazz))_ break__            case BWOR:  math(GeneratorAdapter.OR,   getType(clazz))_ break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1531910483;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:   math(GeneratorAdapter.MUL,  getType(clazz))_ break__            case DIV:   math(GeneratorAdapter.DIV,  getType(clazz))_ break__            case REM:   math(GeneratorAdapter.REM,  getType(clazz))_ break__            case ADD:   math(GeneratorAdapter.ADD,  getType(clazz))_ break__            case SUB:   math(GeneratorAdapter.SUB,  getType(clazz))_ break__            case LSH:   math(GeneratorAdapter.SHL,  getType(clazz))_ break__            case USH:   math(GeneratorAdapter.USHR, getType(clazz))_ break__            case RSH:   math(GeneratorAdapter.SHR,  getType(clazz))_ break__            case BWAND: math(GeneratorAdapter.AND,  getType(clazz))_ break__            case XOR:   math(GeneratorAdapter.XOR,  getType(clazz))_ break__            case BWOR:  math(GeneratorAdapter.OR,   getType(clazz))_ break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1533143718;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:   math(GeneratorAdapter.MUL,  getType(clazz))_ break__            case DIV:   math(GeneratorAdapter.DIV,  getType(clazz))_ break__            case REM:   math(GeneratorAdapter.REM,  getType(clazz))_ break__            case ADD:   math(GeneratorAdapter.ADD,  getType(clazz))_ break__            case SUB:   math(GeneratorAdapter.SUB,  getType(clazz))_ break__            case LSH:   math(GeneratorAdapter.SHL,  getType(clazz))_ break__            case USH:   math(GeneratorAdapter.USHR, getType(clazz))_ break__            case RSH:   math(GeneratorAdapter.SHR,  getType(clazz))_ break__            case BWAND: math(GeneratorAdapter.AND,  getType(clazz))_ break__            case XOR:   math(GeneratorAdapter.XOR,  getType(clazz))_ break__            case BWOR:  math(GeneratorAdapter.OR,   getType(clazz))_ break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1533738061;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:   math(GeneratorAdapter.MUL,  getType(clazz))_ break__            case DIV:   math(GeneratorAdapter.DIV,  getType(clazz))_ break__            case REM:   math(GeneratorAdapter.REM,  getType(clazz))_ break__            case ADD:   math(GeneratorAdapter.ADD,  getType(clazz))_ break__            case SUB:   math(GeneratorAdapter.SUB,  getType(clazz))_ break__            case LSH:   math(GeneratorAdapter.SHL,  getType(clazz))_ break__            case USH:   math(GeneratorAdapter.USHR, getType(clazz))_ break__            case RSH:   math(GeneratorAdapter.SHR,  getType(clazz))_ break__            case BWAND: math(GeneratorAdapter.AND,  getType(clazz))_ break__            case XOR:   math(GeneratorAdapter.XOR,  getType(clazz))_ break__            case BWOR:  math(GeneratorAdapter.OR,   getType(clazz))_ break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1533921794;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:   math(GeneratorAdapter.MUL,  getType(clazz))_ break__            case DIV:   math(GeneratorAdapter.DIV,  getType(clazz))_ break__            case REM:   math(GeneratorAdapter.REM,  getType(clazz))_ break__            case ADD:   math(GeneratorAdapter.ADD,  getType(clazz))_ break__            case SUB:   math(GeneratorAdapter.SUB,  getType(clazz))_ break__            case LSH:   math(GeneratorAdapter.SHL,  getType(clazz))_ break__            case USH:   math(GeneratorAdapter.USHR, getType(clazz))_ break__            case RSH:   math(GeneratorAdapter.SHR,  getType(clazz))_ break__            case BWAND: math(GeneratorAdapter.AND,  getType(clazz))_ break__            case XOR:   math(GeneratorAdapter.XOR,  getType(clazz))_ break__            case BWOR:  math(GeneratorAdapter.OR,   getType(clazz))_ break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1537806831;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:_                math(GeneratorAdapter.MUL, getType(clazz))__                break__            case DIV:_                math(GeneratorAdapter.DIV, getType(clazz))__                break__            case REM:_                math(GeneratorAdapter.REM, getType(clazz))__                break__            case ADD:_                math(GeneratorAdapter.ADD, getType(clazz))__                break__            case SUB:_                math(GeneratorAdapter.SUB, getType(clazz))__                break__            case LSH:_                math(GeneratorAdapter.SHL, getType(clazz))__                break__            case USH:_                math(GeneratorAdapter.USHR, getType(clazz))__                break__            case RSH:_                math(GeneratorAdapter.SHR, getType(clazz))__                break__            case BWAND:_                math(GeneratorAdapter.AND, getType(clazz))__                break__            case XOR:_                math(GeneratorAdapter.XOR, getType(clazz))__                break__            case BWOR:_                math(GeneratorAdapter.OR, getType(clazz))__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1544203947;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:_                math(GeneratorAdapter.MUL, getType(clazz))__                break__            case DIV:_                math(GeneratorAdapter.DIV, getType(clazz))__                break__            case REM:_                math(GeneratorAdapter.REM, getType(clazz))__                break__            case ADD:_                math(GeneratorAdapter.ADD, getType(clazz))__                break__            case SUB:_                math(GeneratorAdapter.SUB, getType(clazz))__                break__            case LSH:_                math(GeneratorAdapter.SHL, getType(clazz))__                break__            case USH:_                math(GeneratorAdapter.USHR, getType(clazz))__                break__            case RSH:_                math(GeneratorAdapter.SHR, getType(clazz))__                break__            case BWAND:_                math(GeneratorAdapter.AND, getType(clazz))__                break__            case XOR:_                math(GeneratorAdapter.XOR, getType(clazz))__                break__            case BWOR:_                math(GeneratorAdapter.OR, getType(clazz))__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1544565998;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:_                math(GeneratorAdapter.MUL, getType(clazz))__                break__            case DIV:_                math(GeneratorAdapter.DIV, getType(clazz))__                break__            case REM:_                math(GeneratorAdapter.REM, getType(clazz))__                break__            case ADD:_                math(GeneratorAdapter.ADD, getType(clazz))__                break__            case SUB:_                math(GeneratorAdapter.SUB, getType(clazz))__                break__            case LSH:_                math(GeneratorAdapter.SHL, getType(clazz))__                break__            case USH:_                math(GeneratorAdapter.USHR, getType(clazz))__                break__            case RSH:_                math(GeneratorAdapter.SHR, getType(clazz))__                break__            case BWAND:_                math(GeneratorAdapter.AND, getType(clazz))__                break__            case XOR:_                math(GeneratorAdapter.XOR, getType(clazz))__                break__            case BWOR:_                math(GeneratorAdapter.OR, getType(clazz))__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
MethodWriter -> public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation);1545072619;Writes a static binary instruction;public void writeBinaryInstruction(Location location, Class<?> clazz, Operation operation) {_        if (    (clazz == float.class || clazz == double.class) &&_                (operation == Operation.LSH || operation == Operation.USH ||_                operation == Operation.RSH || operation == Operation.BWAND ||_                operation == Operation.XOR || operation == Operation.BWOR)) {_            throw location.createError(new IllegalStateException("Illegal tree structure."))__        }__        switch (operation) {_            case MUL:_                math(GeneratorAdapter.MUL, getType(clazz))__                break__            case DIV:_                math(GeneratorAdapter.DIV, getType(clazz))__                break__            case REM:_                math(GeneratorAdapter.REM, getType(clazz))__                break__            case ADD:_                math(GeneratorAdapter.ADD, getType(clazz))__                break__            case SUB:_                math(GeneratorAdapter.SUB, getType(clazz))__                break__            case LSH:_                math(GeneratorAdapter.SHL, getType(clazz))__                break__            case USH:_                math(GeneratorAdapter.USHR, getType(clazz))__                break__            case RSH:_                math(GeneratorAdapter.SHR, getType(clazz))__                break__            case BWAND:_                math(GeneratorAdapter.AND, getType(clazz))__                break__            case XOR:_                math(GeneratorAdapter.XOR, getType(clazz))__                break__            case BWOR:_                math(GeneratorAdapter.OR, getType(clazz))__                break__            default:_                throw location.createError(new IllegalStateException("Illegal tree structure."))__        }_    };writes,a,static,binary,instruction;public,void,write,binary,instruction,location,location,class,clazz,operation,operation,if,clazz,float,class,clazz,double,class,operation,operation,lsh,operation,operation,ush,operation,operation,rsh,operation,operation,bwand,operation,operation,xor,operation,operation,bwor,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure,switch,operation,case,mul,math,generator,adapter,mul,get,type,clazz,break,case,div,math,generator,adapter,div,get,type,clazz,break,case,rem,math,generator,adapter,rem,get,type,clazz,break,case,add,math,generator,adapter,add,get,type,clazz,break,case,sub,math,generator,adapter,sub,get,type,clazz,break,case,lsh,math,generator,adapter,shl,get,type,clazz,break,case,ush,math,generator,adapter,ushr,get,type,clazz,break,case,rsh,math,generator,adapter,shr,get,type,clazz,break,case,bwand,math,generator,adapter,and,get,type,clazz,break,case,xor,math,generator,adapter,xor,get,type,clazz,break,case,bwor,math,generator,adapter,or,get,type,clazz,break,default,throw,location,create,error,new,illegal,state,exception,illegal,tree,structure
