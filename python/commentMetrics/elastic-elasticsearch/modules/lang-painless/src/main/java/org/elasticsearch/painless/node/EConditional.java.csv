commented;modifiers;parameterAmount;loc;comment;code
false;;1;6;;@Override void extractVariables(Set<String> variables) {     condition.extractVariables(variables).     left.extractVariables(variables).     right.extractVariables(variables). }
false;;1;32;;@Override void analyze(Locals locals) {     condition.expected = boolean.class.     condition.analyze(locals).     condition = condition.cast(locals).     if (condition.constant != null) {         throw createError(new IllegalArgumentException("Extraneous conditional statement.")).     }     left.expected = expected.     left.explicit = explicit.     left.internal = internal.     right.expected = expected.     right.explicit = explicit.     right.internal = internal.     actual = expected.     left.analyze(locals).     right.analyze(locals).     if (expected == null) {         Class<?> promote = AnalyzerCaster.promoteConditional(left.actual, right.actual, left.constant, right.constant).         left.expected = promote.         right.expected = promote.         actual = promote.     }     left = left.cast(locals).     right = right.cast(locals). }
false;;2;16;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     Label fals = new Label().     Label end = new Label().     condition.write(writer, globals).     writer.ifZCmp(Opcodes.IFEQ, fals).     left.write(writer, globals).     writer.goTo(end).     writer.mark(fals).     right.write(writer, globals).     writer.mark(end). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(condition, left, right). }
