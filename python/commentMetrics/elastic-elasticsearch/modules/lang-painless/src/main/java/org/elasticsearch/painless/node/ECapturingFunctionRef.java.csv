commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     variables.add(variable). }
false;;1;22;;@Override void analyze(Locals locals) {     captured = locals.getVariable(location, variable).     if (expected == null) {         if (captured.clazz == def.class) {             // dynamic implementation             defPointer = "D" + variable + "." + call + ",1".         } else {             // typed implementation             defPointer = "S" + PainlessLookupUtility.typeToCanonicalTypeName(captured.clazz) + "." + call + ",1".         }         actual = String.class.     } else {         defPointer = null.         // static case         if (captured.clazz != def.class) {             ref = FunctionRef.create(locals.getPainlessLookup(), locals.getMethods(), location, expected, PainlessLookupUtility.typeToCanonicalTypeName(captured.clazz), call, 1).         }         actual = expected.     } }
false;;2;19;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     if (defPointer != null) {         // dynamic interface: push captured parameter on stack         // TODO: don't do this: its just to cutover :)         writer.push((String) null).         writer.visitVarInsn(MethodWriter.getType(captured.clazz).getOpcode(Opcodes.ILOAD), captured.getSlot()).     } else if (ref == null) {         // typed interface, dynamic implementation         writer.visitVarInsn(MethodWriter.getType(captured.clazz).getOpcode(Opcodes.ILOAD), captured.getSlot()).         Type methodType = Type.getMethodType(MethodWriter.getType(expected), MethodWriter.getType(captured.clazz)).         writer.invokeDefCall(call, methodType, DefBootstrap.REFERENCE, PainlessLookupUtility.typeToCanonicalTypeName(expected)).     } else {         // typed interface, typed implementation         writer.visitVarInsn(MethodWriter.getType(captured.clazz).getOpcode(Opcodes.ILOAD), captured.getSlot()).         writer.invokeLambdaCall(ref).     } }
false;public;0;4;;@Override public String getPointer() {     return defPointer. }
false;public;0;4;;@Override public Type[] getCaptures() {     return new Type[] { MethodWriter.getType(captured.clazz) }. }
false;public;0;4;;@Override public String toString() {     return singleLineToString(variable, call). }
