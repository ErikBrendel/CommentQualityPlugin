commented;modifiers;parameterAmount;loc;comment;code
false;;1;6;;@Override void extractVariables(Set<String> variables) {     for (AExpression value : values) {         value.extractVariables(variables).     } }
false;;1;30;;@Override void analyze(Locals locals) {     if (!read) {         throw createError(new IllegalArgumentException("Must read from list initializer.")).     }     actual = ArrayList.class.     constructor = locals.getPainlessLookup().lookupPainlessConstructor(actual, 0).     if (constructor == null) {         throw createError(new IllegalArgumentException("constructor [" + typeToCanonicalTypeName(actual) + ", <init>/0] not found")).     }     method = locals.getPainlessLookup().lookupPainlessMethod(actual, false, "add", 1).     if (method == null) {         throw createError(new IllegalArgumentException("method [" + typeToCanonicalTypeName(actual) + ", add/1] not found")).     }     for (int index = 0. index < values.size(). ++index) {         AExpression expression = values.get(index).         expression.expected = def.class.         expression.internal = true.         expression.analyze(locals).         values.set(index, expression.cast(locals)).     } }
false;;2;16;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.newInstance(MethodWriter.getType(actual)).     writer.dup().     writer.invokeConstructor(Type.getType(constructor.javaConstructor.getDeclaringClass()), Method.getMethod(constructor.javaConstructor)).     for (AExpression value : values) {         writer.dup().         value.write(writer, globals).         writer.invokeMethodCall(method).         writer.pop().     } }
false;public;0;4;;@Override public String toString() {     return singleLineToString(values). }
