# id;timestamp;commentText;codeText;commentWords;codeWords
PainlessLexer -> protected abstract boolean isSimpleType(String name)_;1524684173;Check against the current whitelist to determine whether a token is a type_or not. Called by the {@code TYPE} token defined in {@code PainlessLexer.g4}._See also_<a href="https://en.wikipedia.org/wiki/The_lexer_hack">The lexer hack</a>.;protected abstract boolean isSimpleType(String name)_;check,against,the,current,whitelist,to,determine,whether,a,token,is,a,type,or,not,called,by,the,code,type,token,defined,in,code,painless,lexer,g4,see,also,a,href,https,en,wikipedia,org,wiki,the,lexer,hack,a;protected,abstract,boolean,is,simple,type,string,name
PainlessLexer -> protected abstract boolean isSimpleType(String name)_;1528762805;Check against the current whitelist to determine whether a token is a type_or not. Called by the {@code TYPE} token defined in {@code PainlessLexer.g4}._See also_<a href="https://en.wikipedia.org/wiki/The_lexer_hack">The lexer hack</a>.;protected abstract boolean isSimpleType(String name)_;check,against,the,current,whitelist,to,determine,whether,a,token,is,a,type,or,not,called,by,the,code,type,token,defined,in,code,painless,lexer,g4,see,also,a,href,https,en,wikipedia,org,wiki,the,lexer,hack,a;protected,abstract,boolean,is,simple,type,string,name
PainlessLexer -> protected abstract boolean slashIsRegex()_;1524684173;Is the preceding {@code /} a the beginning of a regex (true) or a division_(false).;protected abstract boolean slashIsRegex()_;is,the,preceding,code,a,the,beginning,of,a,regex,true,or,a,division,false;protected,abstract,boolean,slash,is,regex
PainlessLexer -> protected abstract boolean slashIsRegex()_;1528762805;Is the preceding {@code /} a the beginning of a regex (true) or a division_(false).;protected abstract boolean slashIsRegex()_;is,the,preceding,code,a,the,beginning,of,a,regex,true,or,a,division,false;protected,abstract,boolean,slash,is,regex
PainlessLexer -> protected abstract boolean slashIsRegex()_;1531179852;Is the preceding {@code /} a the beginning of a regex (true) or a division_(false).;protected abstract boolean slashIsRegex()_;is,the,preceding,code,a,the,beginning,of,a,regex,true,or,a,division,false;protected,abstract,boolean,slash,is,regex
PainlessLexer -> protected abstract boolean slashIsRegex()_;1535552903;Is the preceding {@code /} a the beginning of a regex (true) or a division_(false).;protected abstract boolean slashIsRegex()_;is,the,preceding,code,a,the,beginning,of,a,regex,true,or,a,division,false;protected,abstract,boolean,slash,is,regex
PainlessLexer -> protected abstract boolean isType(String name)_;1531179852;Check against the current whitelist to determine whether a token is a type_or not. Called by the {@code TYPE} token defined in {@code PainlessLexer.g4}._See also_<a href="https://en.wikipedia.org/wiki/The_lexer_hack">The lexer hack</a>.;protected abstract boolean isType(String name)_;check,against,the,current,whitelist,to,determine,whether,a,token,is,a,type,or,not,called,by,the,code,type,token,defined,in,code,painless,lexer,g4,see,also,a,href,https,en,wikipedia,org,wiki,the,lexer,hack,a;protected,abstract,boolean,is,type,string,name
PainlessLexer -> protected abstract boolean isType(String name)_;1535552903;Check against the current whitelist to determine whether a token is a type_or not. Called by the {@code TYPE} token defined in {@code PainlessLexer.g4}._See also_<a href="https://en.wikipedia.org/wiki/The_lexer_hack">The lexer hack</a>.;protected abstract boolean isType(String name)_;check,against,the,current,whitelist,to,determine,whether,a,token,is,a,type,or,not,called,by,the,code,type,token,defined,in,code,painless,lexer,g4,see,also,a,href,https,en,wikipedia,org,wiki,the,lexer,hack,a;protected,abstract,boolean,is,type,string,name
