commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     throw createError(new IllegalStateException("Illegal tree structure.")). }
false;;1;9;;@Override void analyze(Locals locals) {     // We must store the array and index as variables for securing slots on the stack, and     // also add the location offset to make the names unique in case of nested for each loops.     array = locals.addVariable(location, expression.actual, "#array" + location.getOffset(), true).     index = locals.addVariable(location, int.class, "#index" + location.getOffset(), true).     indexed = expression.actual.getComponentType().     cast = AnalyzerCaster.getLegalCast(location, indexed, variable.clazz, true, true). }
false;;2;37;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     expression.write(writer, globals).     writer.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ISTORE), array.getSlot()).     writer.push(-1).     writer.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ISTORE), index.getSlot()).     Label begin = new Label().     Label end = new Label().     writer.mark(begin).     writer.visitIincInsn(index.getSlot(), 1).     writer.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ILOAD), index.getSlot()).     writer.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ILOAD), array.getSlot()).     writer.arrayLength().     writer.ifICmp(MethodWriter.GE, end).     writer.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ILOAD), array.getSlot()).     writer.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ILOAD), index.getSlot()).     writer.arrayLoad(MethodWriter.getType(indexed)).     writer.writeCast(cast).     writer.visitVarInsn(MethodWriter.getType(variable.clazz).getOpcode(Opcodes.ISTORE), variable.getSlot()).     if (loopCounter != null) {         writer.writeLoopCounter(loopCounter.getSlot(), statementCount, location).     }     block.continu = begin.     block.brake = end.     block.write(writer, globals).     writer.goTo(begin).     writer.mark(end). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(PainlessLookupUtility.typeToCanonicalTypeName(variable.clazz), variable.name, expression, block). }
