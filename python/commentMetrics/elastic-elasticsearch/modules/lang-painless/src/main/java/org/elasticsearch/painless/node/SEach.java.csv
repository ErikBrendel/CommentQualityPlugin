commented;modifiers;parameterAmount;loc;comment;code
false;;1;10;;@Override void extractVariables(Set<String> variables) {     variables.add(name).     expression.extractVariables(variables).     if (block != null) {         block.extractVariables(variables).     } }
false;;1;45;;@Override void analyze(Locals locals) {     expression.analyze(locals).     expression.expected = expression.actual.     expression = expression.cast(locals).     Class<?> clazz = locals.getPainlessLookup().canonicalTypeNameToType(this.type).     if (clazz == null) {         throw createError(new IllegalArgumentException("Not a type [" + this.type + "].")).     }     locals = Locals.newLocalScope(locals).     Variable variable = locals.addVariable(location, clazz, name, true).     if (expression.actual.isArray()) {         sub = new SSubEachArray(location, variable, expression, block).     } else if (expression.actual == def.class || Iterable.class.isAssignableFrom(expression.actual)) {         sub = new SSubEachIterable(location, variable, expression, block).     } else {         throw createError(new IllegalArgumentException("Illegal for each type " + "[" + PainlessLookupUtility.typeToCanonicalTypeName(expression.actual) + "].")).     }     sub.analyze(locals).     if (block == null) {         throw createError(new IllegalArgumentException("Extraneous for each loop.")).     }     block.beginLoop = true.     block.inLoop = true.     block.analyze(locals).     block.statementCount = Math.max(1, block.statementCount).     if (block.loopEscape && !block.anyContinue) {         throw createError(new IllegalArgumentException("Extraneous for loop.")).     }     statementCount = 1.     if (locals.hasVariable(Locals.LOOP)) {         sub.loopCounter = locals.getVariable(location, Locals.LOOP).     } }
false;;2;4;;@Override void write(MethodWriter writer, Globals globals) {     sub.write(writer, globals). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(type, name, expression, block). }
