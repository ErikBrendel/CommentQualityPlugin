# id;timestamp;commentText;codeText;commentWords;codeWords
AExpression -> AExpression(Location location);1524684173;Standard constructor with location used for error tracking.;AExpression(Location location) {_        super(location)___        prefix = null__    };standard,constructor,with,location,used,for,error,tracking;aexpression,location,location,super,location,prefix,null
AExpression -> AExpression(Location location);1531179852;Standard constructor with location used for error tracking.;AExpression(Location location) {_        super(location)___        prefix = null__    };standard,constructor,with,location,used,for,error,tracking;aexpression,location,location,super,location,prefix,null
AExpression -> AExpression(Location location);1531910483;Standard constructor with location used for error tracking.;AExpression(Location location) {_        super(location)___        prefix = null__    };standard,constructor,with,location,used,for,error,tracking;aexpression,location,location,super,location,prefix,null
AExpression -> AExpression(Location location);1532069817;Standard constructor with location used for error tracking.;AExpression(Location location) {_        super(location)___        prefix = null__    };standard,constructor,with,location,used,for,error,tracking;aexpression,location,location,super,location,prefix,null
AExpression -> AExpression(Location location, AExpression prefix);1524684173;This constructor is used by variable/method chains when postfixes are specified.;AExpression(Location location, AExpression prefix) {_        super(location)___        this.prefix = Objects.requireNonNull(prefix)__    };this,constructor,is,used,by,variable,method,chains,when,postfixes,are,specified;aexpression,location,location,aexpression,prefix,super,location,this,prefix,objects,require,non,null,prefix
AExpression -> AExpression(Location location, AExpression prefix);1531179852;This constructor is used by variable/method chains when postfixes are specified.;AExpression(Location location, AExpression prefix) {_        super(location)___        this.prefix = Objects.requireNonNull(prefix)__    };this,constructor,is,used,by,variable,method,chains,when,postfixes,are,specified;aexpression,location,location,aexpression,prefix,super,location,this,prefix,objects,require,non,null,prefix
AExpression -> AExpression(Location location, AExpression prefix);1531910483;This constructor is used by variable/method chains when postfixes are specified.;AExpression(Location location, AExpression prefix) {_        super(location)___        this.prefix = Objects.requireNonNull(prefix)__    };this,constructor,is,used,by,variable,method,chains,when,postfixes,are,specified;aexpression,location,location,aexpression,prefix,super,location,this,prefix,objects,require,non,null,prefix
AExpression -> AExpression(Location location, AExpression prefix);1532069817;This constructor is used by variable/method chains when postfixes are specified.;AExpression(Location location, AExpression prefix) {_        super(location)___        this.prefix = Objects.requireNonNull(prefix)__    };this,constructor,is,used,by,variable,method,chains,when,postfixes,are,specified;aexpression,location,location,aexpression,prefix,super,location,this,prefix,objects,require,non,null,prefix
AExpression -> AExpression cast(Locals locals);1524684173;Inserts {@link ECast} nodes into the tree for implicit casts.  Also replaces_nodes with the constant variable set to a non-null value with {@link EConstant}._@return The new child node for the parent node calling this method.;AExpression cast(Locals locals) {_        Cast cast = AnalyzerCaster.getLegalCast(location, actual, expected, explicit, internal)___        if (cast == null) {_            if (constant == null || this instanceof EConstant) {_                _                __                return this__            } else {_                _                _                _                _                _                __                EConstant econstant = new EConstant(location, constant)__                econstant.analyze(locals)___                if (!expected.equals(econstant.actual)) {_                    throw createError(new IllegalStateException("Illegal tree structure."))__                }__                return econstant__            }_        } else {_            if (constant == null) {_                _                _                _                __                ECast ecast = new ECast(location, this, cast)__                ecast.statement = statement__                ecast.actual = expected__                ecast.isNull = isNull___                return ecast__            } else {_                if (Definition.isConstantType(expected)) {_                    _                    _                    _                    _                    _                    _                    __                    constant = AnalyzerCaster.constCast(location, constant, cast)___                    EConstant econstant = new EConstant(location, constant)__                    econstant.analyze(locals)___                    if (!expected.equals(econstant.actual)) {_                        throw createError(new IllegalStateException("Illegal tree structure."))__                    }__                    return econstant__                } else if (this instanceof EConstant) {_                    _                    _                    _                    _                    _                    _                    __                    ECast ecast = new ECast(location, this, cast)__                    ecast.actual = expected___                    return ecast__                } else {_                    _                    _                    _                    _                    _                    _                    _                    __                    EConstant econstant = new EConstant(location, constant)__                    econstant.analyze(locals)___                    if (!actual.equals(econstant.actual)) {_                        throw createError(new IllegalStateException("Illegal tree structure."))__                    }__                    ECast ecast = new ECast(location, econstant, cast)__                    ecast.actual = expected___                    return ecast__                }_            }_        }_    };inserts,link,ecast,nodes,into,the,tree,for,implicit,casts,also,replaces,nodes,with,the,constant,variable,set,to,a,non,null,value,with,link,econstant,return,the,new,child,node,for,the,parent,node,calling,this,method;aexpression,cast,locals,locals,cast,cast,analyzer,caster,get,legal,cast,location,actual,expected,explicit,internal,if,cast,null,if,constant,null,this,instanceof,econstant,return,this,else,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,expected,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,return,econstant,else,if,constant,null,ecast,ecast,new,ecast,location,this,cast,ecast,statement,statement,ecast,actual,expected,ecast,is,null,is,null,return,ecast,else,if,definition,is,constant,type,expected,constant,analyzer,caster,const,cast,location,constant,cast,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,expected,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,return,econstant,else,if,this,instanceof,econstant,ecast,ecast,new,ecast,location,this,cast,ecast,actual,expected,return,ecast,else,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,actual,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,ecast,ecast,new,ecast,location,econstant,cast,ecast,actual,expected,return,ecast
AExpression -> AExpression cast(Locals locals);1531179852;Inserts {@link ECast} nodes into the tree for implicit casts.  Also replaces_nodes with the constant variable set to a non-null value with {@link EConstant}._@return The new child node for the parent node calling this method.;AExpression cast(Locals locals) {_        PainlessCast cast = AnalyzerCaster.getLegalCast(location, actual, expected, explicit, internal)___        if (cast == null) {_            if (constant == null || this instanceof EConstant) {_                _                __                return this__            } else {_                _                _                _                _                _                __                EConstant econstant = new EConstant(location, constant)__                econstant.analyze(locals)___                if (!expected.equals(econstant.actual)) {_                    throw createError(new IllegalStateException("Illegal tree structure."))__                }__                return econstant__            }_        } else {_            if (constant == null) {_                _                _                _                __                ECast ecast = new ECast(location, this, cast)__                ecast.statement = statement__                ecast.actual = expected__                ecast.isNull = isNull___                return ecast__            } else {_                if (PainlessLookup.isConstantType(expected)) {_                    _                    _                    _                    _                    _                    _                    __                    constant = AnalyzerCaster.constCast(location, constant, cast)___                    EConstant econstant = new EConstant(location, constant)__                    econstant.analyze(locals)___                    if (!expected.equals(econstant.actual)) {_                        throw createError(new IllegalStateException("Illegal tree structure."))__                    }__                    return econstant__                } else if (this instanceof EConstant) {_                    _                    _                    _                    _                    _                    _                    __                    ECast ecast = new ECast(location, this, cast)__                    ecast.actual = expected___                    return ecast__                } else {_                    _                    _                    _                    _                    _                    _                    _                    __                    EConstant econstant = new EConstant(location, constant)__                    econstant.analyze(locals)___                    if (!actual.equals(econstant.actual)) {_                        throw createError(new IllegalStateException("Illegal tree structure."))__                    }__                    ECast ecast = new ECast(location, econstant, cast)__                    ecast.actual = expected___                    return ecast__                }_            }_        }_    };inserts,link,ecast,nodes,into,the,tree,for,implicit,casts,also,replaces,nodes,with,the,constant,variable,set,to,a,non,null,value,with,link,econstant,return,the,new,child,node,for,the,parent,node,calling,this,method;aexpression,cast,locals,locals,painless,cast,cast,analyzer,caster,get,legal,cast,location,actual,expected,explicit,internal,if,cast,null,if,constant,null,this,instanceof,econstant,return,this,else,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,expected,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,return,econstant,else,if,constant,null,ecast,ecast,new,ecast,location,this,cast,ecast,statement,statement,ecast,actual,expected,ecast,is,null,is,null,return,ecast,else,if,painless,lookup,is,constant,type,expected,constant,analyzer,caster,const,cast,location,constant,cast,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,expected,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,return,econstant,else,if,this,instanceof,econstant,ecast,ecast,new,ecast,location,this,cast,ecast,actual,expected,return,ecast,else,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,actual,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,ecast,ecast,new,ecast,location,econstant,cast,ecast,actual,expected,return,ecast
AExpression -> AExpression cast(Locals locals);1531910483;Inserts {@link ECast} nodes into the tree for implicit casts.  Also replaces_nodes with the constant variable set to a non-null value with {@link EConstant}._@return The new child node for the parent node calling this method.;AExpression cast(Locals locals) {_        PainlessCast cast = AnalyzerCaster.getLegalCast(location, actual, expected, explicit, internal)___        if (cast == null) {_            if (constant == null || this instanceof EConstant) {_                _                __                return this__            } else {_                _                _                _                _                _                __                EConstant econstant = new EConstant(location, constant)__                econstant.analyze(locals)___                if (!expected.equals(econstant.actual)) {_                    throw createError(new IllegalStateException("Illegal tree structure."))__                }__                return econstant__            }_        } else {_            if (constant == null) {_                _                _                _                __                ECast ecast = new ECast(location, this, cast)__                ecast.statement = statement__                ecast.actual = expected__                ecast.isNull = isNull___                return ecast__            } else {_                if (PainlessLookupUtility.isAnyTypeConstant(expected)) {_                    _                    _                    _                    _                    _                    _                    __                    constant = AnalyzerCaster.constCast(location, constant, cast)___                    EConstant econstant = new EConstant(location, constant)__                    econstant.analyze(locals)___                    if (!expected.equals(econstant.actual)) {_                        throw createError(new IllegalStateException("Illegal tree structure."))__                    }__                    return econstant__                } else if (this instanceof EConstant) {_                    _                    _                    _                    _                    _                    _                    __                    ECast ecast = new ECast(location, this, cast)__                    ecast.actual = expected___                    return ecast__                } else {_                    _                    _                    _                    _                    _                    _                    _                    __                    EConstant econstant = new EConstant(location, constant)__                    econstant.analyze(locals)___                    if (!actual.equals(econstant.actual)) {_                        throw createError(new IllegalStateException("Illegal tree structure."))__                    }__                    ECast ecast = new ECast(location, econstant, cast)__                    ecast.actual = expected___                    return ecast__                }_            }_        }_    };inserts,link,ecast,nodes,into,the,tree,for,implicit,casts,also,replaces,nodes,with,the,constant,variable,set,to,a,non,null,value,with,link,econstant,return,the,new,child,node,for,the,parent,node,calling,this,method;aexpression,cast,locals,locals,painless,cast,cast,analyzer,caster,get,legal,cast,location,actual,expected,explicit,internal,if,cast,null,if,constant,null,this,instanceof,econstant,return,this,else,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,expected,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,return,econstant,else,if,constant,null,ecast,ecast,new,ecast,location,this,cast,ecast,statement,statement,ecast,actual,expected,ecast,is,null,is,null,return,ecast,else,if,painless,lookup,utility,is,any,type,constant,expected,constant,analyzer,caster,const,cast,location,constant,cast,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,expected,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,return,econstant,else,if,this,instanceof,econstant,ecast,ecast,new,ecast,location,this,cast,ecast,actual,expected,return,ecast,else,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,actual,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,ecast,ecast,new,ecast,location,econstant,cast,ecast,actual,expected,return,ecast
AExpression -> AExpression cast(Locals locals);1532069817;Inserts {@link ECast} nodes into the tree for implicit casts.  Also replaces_nodes with the constant variable set to a non-null value with {@link EConstant}._@return The new child node for the parent node calling this method.;AExpression cast(Locals locals) {_        PainlessCast cast = AnalyzerCaster.getLegalCast(location, actual, expected, explicit, internal)___        if (cast == null) {_            if (constant == null || this instanceof EConstant) {_                _                __                return this__            } else {_                _                _                _                _                _                __                EConstant econstant = new EConstant(location, constant)__                econstant.analyze(locals)___                if (!expected.equals(econstant.actual)) {_                    throw createError(new IllegalStateException("Illegal tree structure."))__                }__                return econstant__            }_        } else {_            if (constant == null) {_                _                _                _                __                ECast ecast = new ECast(location, this, cast)__                ecast.statement = statement__                ecast.actual = expected__                ecast.isNull = isNull___                return ecast__            } else {_                if (PainlessLookupUtility.isConstantType(expected)) {_                    _                    _                    _                    _                    _                    _                    __                    constant = AnalyzerCaster.constCast(location, constant, cast)___                    EConstant econstant = new EConstant(location, constant)__                    econstant.analyze(locals)___                    if (!expected.equals(econstant.actual)) {_                        throw createError(new IllegalStateException("Illegal tree structure."))__                    }__                    return econstant__                } else if (this instanceof EConstant) {_                    _                    _                    _                    _                    _                    _                    __                    ECast ecast = new ECast(location, this, cast)__                    ecast.actual = expected___                    return ecast__                } else {_                    _                    _                    _                    _                    _                    _                    _                    __                    EConstant econstant = new EConstant(location, constant)__                    econstant.analyze(locals)___                    if (!actual.equals(econstant.actual)) {_                        throw createError(new IllegalStateException("Illegal tree structure."))__                    }__                    ECast ecast = new ECast(location, econstant, cast)__                    ecast.actual = expected___                    return ecast__                }_            }_        }_    };inserts,link,ecast,nodes,into,the,tree,for,implicit,casts,also,replaces,nodes,with,the,constant,variable,set,to,a,non,null,value,with,link,econstant,return,the,new,child,node,for,the,parent,node,calling,this,method;aexpression,cast,locals,locals,painless,cast,cast,analyzer,caster,get,legal,cast,location,actual,expected,explicit,internal,if,cast,null,if,constant,null,this,instanceof,econstant,return,this,else,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,expected,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,return,econstant,else,if,constant,null,ecast,ecast,new,ecast,location,this,cast,ecast,statement,statement,ecast,actual,expected,ecast,is,null,is,null,return,ecast,else,if,painless,lookup,utility,is,constant,type,expected,constant,analyzer,caster,const,cast,location,constant,cast,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,expected,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,return,econstant,else,if,this,instanceof,econstant,ecast,ecast,new,ecast,location,this,cast,ecast,actual,expected,return,ecast,else,econstant,econstant,new,econstant,location,constant,econstant,analyze,locals,if,actual,equals,econstant,actual,throw,create,error,new,illegal,state,exception,illegal,tree,structure,ecast,ecast,new,ecast,location,econstant,cast,ecast,actual,expected,return,ecast
