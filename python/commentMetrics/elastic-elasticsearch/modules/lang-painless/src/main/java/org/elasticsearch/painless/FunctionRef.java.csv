# id;timestamp;commentText;codeText;commentWords;codeWords
FunctionRef -> private static Definition.Method lookup(Definition definition, Class<?> expected,                                             String type, String call, boolean receiverCaptured);1524684173;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static Definition.Method lookup(Definition definition, Class<?> expected,_                                            String type, String call, boolean receiverCaptured) {_        _        _        Method method = definition.ClassToType(expected).struct.functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                                               "to [" + Definition.ClassToName(expected) + "], not a functional interface")__        }__        _        Definition.Struct struct = definition.getType(type).struct__        final Definition.Method impl__        _        if ("new".equals(call)) {_            impl = struct.constructors.get(new Definition.MethodKey("<init>", method.arguments.size()))__        } else {_            _            Definition.Method staticImpl = struct.staticMethods.get(new Definition.MethodKey(call, method.arguments.size()))__            if (staticImpl == null) {_                _                final int arity__                if (receiverCaptured) {_                    _                    arity = method.arguments.size()__                } else {_                    _                    arity = method.arguments.size() - 1__                }_                impl = struct.methods.get(new Definition.MethodKey(call, arity))__            } else {_                impl = staticImpl__            }_        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,definition,method,lookup,definition,definition,class,expected,string,type,string,call,boolean,receiver,captured,method,method,definition,class,to,type,expected,struct,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,definition,class,to,name,expected,not,a,functional,interface,definition,struct,struct,definition,get,type,type,struct,final,definition,method,impl,if,new,equals,call,impl,struct,constructors,get,new,definition,method,key,init,method,arguments,size,else,definition,method,static,impl,struct,static,methods,get,new,definition,method,key,call,method,arguments,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,arguments,size,else,arity,method,arguments,size,1,impl,struct,methods,get,new,definition,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> private static Definition.Method lookup(Definition definition, Class<?> expected,                                             String type, String call, boolean receiverCaptured);1529076503;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static Definition.Method lookup(Definition definition, Class<?> expected,_                                            String type, String call, boolean receiverCaptured) {_        _        _        Method method = definition.ClassToType(expected).struct.functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                                               "to [" + Definition.ClassToName(expected) + "], not a functional interface")__        }__        _        Definition.Struct struct = definition.getType(type).struct__        final Definition.Method impl__        _        if ("new".equals(call)) {_            impl = struct.constructors.get(new Definition.MethodKey("<init>", method.arguments.size()))__        } else {_            _            Definition.Method staticImpl = struct.staticMethods.get(new Definition.MethodKey(call, method.arguments.size()))__            if (staticImpl == null) {_                _                final int arity__                if (receiverCaptured) {_                    _                    arity = method.arguments.size()__                } else {_                    _                    arity = method.arguments.size() - 1__                }_                impl = struct.methods.get(new Definition.MethodKey(call, arity))__            } else {_                impl = staticImpl__            }_        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,definition,method,lookup,definition,definition,class,expected,string,type,string,call,boolean,receiver,captured,method,method,definition,class,to,type,expected,struct,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,definition,class,to,name,expected,not,a,functional,interface,definition,struct,struct,definition,get,type,type,struct,final,definition,method,impl,if,new,equals,call,impl,struct,constructors,get,new,definition,method,key,init,method,arguments,size,else,definition,method,static,impl,struct,static,methods,get,new,definition,method,key,call,method,arguments,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,arguments,size,else,arity,method,arguments,size,1,impl,struct,methods,get,new,definition,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> public FunctionRef(Class<?> expected,                        PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1531179852;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        delegateClassName = CLASS_NAME__        delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)__        isDelegateInterface = false___        this.interfaceMethod = null__        delegateMethod = null___        factoryDescriptor = null__        interfaceType = null__        delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,painless,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,delegate,class,name,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,is,delegate,interface,false,this,interface,method,null,delegate,method,null,factory,descriptor,null,interface,type,null,delegate,type,null
FunctionRef -> public FunctionRef(Class<?> expected,                        PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1531910483;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        delegateClassName = CLASS_NAME__        delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)__        isDelegateInterface = false___        this.interfaceMethod = null__        delegateMethod = null___        factoryDescriptor = null__        interfaceType = null__        delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,painless,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,delegate,class,name,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,is,delegate,interface,false,this,interface,method,null,delegate,method,null,factory,descriptor,null,interface,type,null,delegate,type,null
FunctionRef -> public FunctionRef(Class<?> expected,                        PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1532069817;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        delegateClassName = CLASS_NAME__        delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)__        isDelegateInterface = false___        this.interfaceMethod = null__        delegateMethod = null___        factoryDescriptor = null__        interfaceType = null__        delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,painless,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,delegate,class,name,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,is,delegate,interface,false,this,interface,method,null,delegate,method,null,factory,descriptor,null,interface,type,null,delegate,type,null
FunctionRef -> public FunctionRef(Class<?> expected,                        PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1532947734;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        delegateClassName = CLASS_NAME__        delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)__        isDelegateInterface = false___        this.interfaceMethod = null__        delegateMethod = null___        factoryDescriptor = null__        interfaceType = null__        delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,painless,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,delegate,class,name,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,is,delegate,interface,false,this,interface,method,null,delegate,method,null,factory,descriptor,null,interface,type,null,delegate,type,null
FunctionRef -> public FunctionRef(Class<?> expected,                        PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1533063033;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        delegateClassName = CLASS_NAME__        delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)__        isDelegateInterface = false___        this.interfaceMethod = null__        delegateTypeParameters = null__        delegateReturnType = null___        factoryDescriptor = null__        interfaceType = null__        delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,painless,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,delegate,class,name,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,is,delegate,interface,false,this,interface,method,null,delegate,type,parameters,null,delegate,return,type,null,factory,descriptor,null,interface,type,null,delegate,type,null
FunctionRef -> public FunctionRef(Class<?> expected,                        PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1533143718;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        this.interfaceMethodName = interfaceMethod.javaMethod.getName()__        this.factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        this.interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        this.delegateClassName = CLASS_NAME__        this.delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)__        this.isDelegateInterface = false___        this.interfaceMethod = null__        this.delegateTypeParameters = null__        this.delegateReturnType = null___        this.factoryDescriptor = null__        this.interfaceType = null__        this.delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,painless,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,this,interface,method,name,interface,method,java,method,get,name,this,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,this,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,this,delegate,class,name,this,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,is,delegate,interface,false,this,interface,method,null,this,delegate,type,parameters,null,this,delegate,return,type,null,this,factory,descriptor,null,this,interface,type,null,this,delegate,type,null
FunctionRef -> public FunctionRef(Class<?> expected,                        PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1533295538;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       PainlessMethod interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        this.interfaceMethodName = interfaceMethod.javaMethod.getName()__        this.factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        this.interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        this.delegateClassName = CLASS_NAME__        this.delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)__        this.isDelegateInterface = false___        this.interfaceMethod = null__        this.delegateTypeParameters = null__        this.delegateReturnType = null___        this.factoryDescriptor = null__        this.interfaceType = null__        this.delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,painless,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,this,interface,method,name,interface,method,java,method,get,name,this,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,this,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,this,delegate,class,name,this,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,is,delegate,interface,false,this,interface,method,null,this,delegate,type,parameters,null,this,delegate,return,type,null,this,factory,descriptor,null,this,interface,type,null,this,delegate,type,null
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessConstructor delegateConstructor, int numCaptures);1533063033;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateConstructor implementation constructor_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessConstructor delegateConstructor, int numCaptures) {_        Constructor<?> javaConstructor = delegateConstructor.javaConstructor__        MethodType delegateMethodType = delegateConstructor.methodType___        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        delegateClassName = javaConstructor.getDeclaringClass().getName()__        isDelegateInterface = false__        delegateInvokeType = H_NEWINVOKESPECIAL__        delegateMethodName = PainlessLookupUtility.CONSTRUCTOR_NAME__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        delegateTypeParameters = delegateConstructor.typeParameters__        delegateReturnType = void.class___        factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,constructor,implementation,constructor,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,constructor,delegate,constructor,int,num,captures,constructor,java,constructor,delegate,constructor,java,constructor,method,type,delegate,method,type,delegate,constructor,method,type,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,delegate,class,name,java,constructor,get,declaring,class,get,name,is,delegate,interface,false,delegate,invoke,type,delegate,method,name,painless,lookup,utility,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,delegate,type,parameters,delegate,constructor,type,parameters,delegate,return,type,void,class,factory,descriptor,factory,method,type,to,method,descriptor,string,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessConstructor delegateConstructor, int numCaptures);1533143718;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateConstructor implementation constructor_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessConstructor delegateConstructor, int numCaptures) {_        Constructor<?> javaConstructor = delegateConstructor.javaConstructor__        MethodType delegateMethodType = delegateConstructor.methodType___        this.interfaceMethodName = interfaceMethod.javaMethod.getName()__        this.factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        this.interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        this.delegateClassName = javaConstructor.getDeclaringClass().getName()__        this.isDelegateInterface = false__        this.delegateInvokeType = H_NEWINVOKESPECIAL__        this.delegateMethodName = PainlessLookupUtility.CONSTRUCTOR_NAME__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateTypeParameters = delegateConstructor.typeParameters__        this.delegateReturnType = void.class___        this.factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        this.interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        this.delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,constructor,implementation,constructor,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,constructor,delegate,constructor,int,num,captures,constructor,java,constructor,delegate,constructor,java,constructor,method,type,delegate,method,type,delegate,constructor,method,type,this,interface,method,name,interface,method,java,method,get,name,this,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,this,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,this,delegate,class,name,java,constructor,get,declaring,class,get,name,this,is,delegate,interface,false,this,delegate,invoke,type,this,delegate,method,name,painless,lookup,utility,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,type,parameters,delegate,constructor,type,parameters,this,delegate,return,type,void,class,this,factory,descriptor,factory,method,type,to,method,descriptor,string,this,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,this,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessConstructor delegateConstructor, int numCaptures);1533295538;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateConstructor implementation constructor_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessConstructor delegateConstructor, int numCaptures) {_        Constructor<?> javaConstructor = delegateConstructor.javaConstructor__        MethodType delegateMethodType = delegateConstructor.methodType___        this.interfaceMethodName = interfaceMethod.javaMethod.getName()__        this.factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        this.interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        this.delegateClassName = javaConstructor.getDeclaringClass().getName()__        this.isDelegateInterface = false__        this.delegateInvokeType = H_NEWINVOKESPECIAL__        this.delegateMethodName = PainlessLookupUtility.CONSTRUCTOR_NAME__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateTypeParameters = delegateConstructor.typeParameters__        this.delegateReturnType = void.class___        this.factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        this.interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        this.delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,constructor,implementation,constructor,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,constructor,delegate,constructor,int,num,captures,constructor,java,constructor,delegate,constructor,java,constructor,method,type,delegate,method,type,delegate,constructor,method,type,this,interface,method,name,interface,method,java,method,get,name,this,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,this,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,this,delegate,class,name,java,constructor,get,declaring,class,get,name,this,is,delegate,interface,false,this,delegate,invoke,type,this,delegate,method,name,painless,lookup,utility,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,type,parameters,delegate,constructor,type,parameters,this,delegate,return,type,void,class,this,factory,descriptor,factory,method,type,to,method,descriptor,string,this,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,this,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> private static PainlessConstructor lookup(PainlessLookup painlessLookup, Class<?> expected, String type);1533063033;Looks up {@code type} from the whitelist, and returns a matching constructor.;private static PainlessConstructor lookup(PainlessLookup painlessLookup, Class<?> expected, String type) {_        _        _        PainlessMethod method = painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::new] " +_                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.getPainlessStructFromJavaClass(painlessLookup.getJavaClassFromPainlessType(type))__        PainlessConstructor impl = struct.constructors.get(PainlessLookupUtility.buildPainlessConstructorKey(method.arguments.size()))___        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::new] matching [" + expected + "]")__        }__        return impl__    };looks,up,code,type,from,the,whitelist,and,returns,a,matching,constructor;private,static,painless,constructor,lookup,painless,lookup,painless,lookup,class,expected,string,type,painless,method,method,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,new,to,painless,lookup,utility,type,to,canonical,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,get,painless,struct,from,java,class,painless,lookup,get,java,class,from,painless,type,type,painless,constructor,impl,struct,constructors,get,painless,lookup,utility,build,painless,constructor,key,method,arguments,size,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,new,matching,expected,return,impl
FunctionRef -> private static PainlessConstructor lookup(PainlessLookup painlessLookup, Class<?> expected, String type);1533143718;Looks up {@code type} from the whitelist, and returns a matching constructor.;private static PainlessConstructor lookup(PainlessLookup painlessLookup, Class<?> expected, String type) {_        _        _        PainlessMethod method = painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::new] " +_                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.getPainlessStructFromJavaClass(painlessLookup.getJavaClassFromPainlessType(type))__        PainlessConstructor impl = struct.constructors.get(PainlessLookupUtility.buildPainlessConstructorKey(method.typeParameters.size()))___        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::new] matching [" + expected + "]")__        }__        return impl__    };looks,up,code,type,from,the,whitelist,and,returns,a,matching,constructor;private,static,painless,constructor,lookup,painless,lookup,painless,lookup,class,expected,string,type,painless,method,method,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,new,to,painless,lookup,utility,type,to,canonical,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,get,painless,struct,from,java,class,painless,lookup,get,java,class,from,painless,type,type,painless,constructor,impl,struct,constructors,get,painless,lookup,utility,build,painless,constructor,key,method,type,parameters,size,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,new,matching,expected,return,impl
FunctionRef -> private static PainlessConstructor lookup(PainlessLookup painlessLookup, Class<?> expected, String type);1533295538;Looks up {@code type} from the whitelist, and returns a matching constructor.;private static PainlessConstructor lookup(PainlessLookup painlessLookup, Class<?> expected, String type) {_        _        _        PainlessMethod method = painlessLookup.lookupPainlessClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::new] " +_                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.lookupPainlessClass(painlessLookup.canonicalTypeNameToType(type))__        PainlessConstructor impl = struct.constructors.get(PainlessLookupUtility.buildPainlessConstructorKey(method.typeParameters.size()))___        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::new] matching [" + expected + "]")__        }__        return impl__    };looks,up,code,type,from,the,whitelist,and,returns,a,matching,constructor;private,static,painless,constructor,lookup,painless,lookup,painless,lookup,class,expected,string,type,painless,method,method,painless,lookup,lookup,painless,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,new,to,painless,lookup,utility,type,to,canonical,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,lookup,painless,class,painless,lookup,canonical,type,name,to,type,type,painless,constructor,impl,struct,constructors,get,painless,lookup,utility,build,painless,constructor,key,method,type,parameters,size,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,new,matching,expected,return,impl
FunctionRef -> public FunctionRef(Definition definition, Class<?> expected, String type, String call, int numCaptures);1524684173;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param definition the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public FunctionRef(Definition definition, Class<?> expected, String type, String call, int numCaptures) {_        this(expected, definition.ClassToType(expected).struct.functionalMethod,_                lookup(definition, expected, type, call, numCaptures > 0), numCaptures)__    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,definition,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,function,ref,definition,definition,class,expected,string,type,string,call,int,num,captures,this,expected,definition,class,to,type,expected,struct,functional,method,lookup,definition,expected,type,call,num,captures,0,num,captures
FunctionRef -> public FunctionRef(Definition definition, Class<?> expected, String type, String call, int numCaptures);1529076503;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param definition the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public FunctionRef(Definition definition, Class<?> expected, String type, String call, int numCaptures) {_        this(expected, definition.ClassToType(expected).struct.functionalMethod,_                lookup(definition, expected, type, call, numCaptures > 0), numCaptures)__    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,definition,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,function,ref,definition,definition,class,expected,string,type,string,call,int,num,captures,this,expected,definition,class,to,type,expected,struct,functional,method,lookup,definition,expected,type,call,num,captures,0,num,captures
FunctionRef -> public FunctionRef(Class<?> expected,                        Method interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1524684173;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       Method interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        delegateClassName = CLASS_NAME__        delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = null__        delegateMethod = null___        factoryDescriptor = null__        interfaceType = null__        delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,delegate,class,name,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,null,delegate,method,null,factory,descriptor,null,interface,type,null,delegate,type,null
FunctionRef -> public FunctionRef(Class<?> expected,                        Method interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures);1529076503;Creates a new FunctionRef (low level)._It is for runtime use only.;public FunctionRef(Class<?> expected,_                       Method interfaceMethod, String delegateMethodName, MethodType delegateMethodType, int numCaptures) {_        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_            delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        delegateClassName = CLASS_NAME__        delegateInvokeType = H_INVOKESTATIC__        this.delegateMethodName = delegateMethodName__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)__        isDelegateInterface = false___        this.interfaceMethod = null__        delegateMethod = null___        factoryDescriptor = null__        interfaceType = null__        delegateType = null__    };creates,a,new,function,ref,low,level,it,is,for,runtime,use,only;public,function,ref,class,expected,method,interface,method,string,delegate,method,name,method,type,delegate,method,type,int,num,captures,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,delegate,class,name,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,is,delegate,interface,false,this,interface,method,null,delegate,method,null,factory,descriptor,null,interface,type,null,delegate,type,null
FunctionRef -> private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,                                          String type, String call, boolean receiverCaptured);1531179852;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,_                                         String type, String call, boolean receiverCaptured) {_        _        _        PainlessMethod method = painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                                               "to [" + PainlessLookup.ClassToName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.getPainlessStructFromJavaClass(painlessLookup.getJavaClassFromPainlessType(type))__        final PainlessMethod impl__        _        if ("new".equals(call)) {_            impl = struct.constructors.get(new PainlessMethodKey("<init>", method.arguments.size()))__        } else {_            _            PainlessMethod staticImpl = struct.staticMethods.get(new PainlessMethodKey(call, method.arguments.size()))__            if (staticImpl == null) {_                _                final int arity__                if (receiverCaptured) {_                    _                    arity = method.arguments.size()__                } else {_                    _                    arity = method.arguments.size() - 1__                }_                impl = struct.methods.get(new PainlessMethodKey(call, arity))__            } else {_                impl = staticImpl__            }_        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,painless,method,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,boolean,receiver,captured,painless,method,method,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,painless,lookup,class,to,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,get,painless,struct,from,java,class,painless,lookup,get,java,class,from,painless,type,type,final,painless,method,impl,if,new,equals,call,impl,struct,constructors,get,new,painless,method,key,init,method,arguments,size,else,painless,method,static,impl,struct,static,methods,get,new,painless,method,key,call,method,arguments,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,arguments,size,else,arity,method,arguments,size,1,impl,struct,methods,get,new,painless,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,                                          String type, String call, boolean receiverCaptured);1531910483;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,_                                         String type, String call, boolean receiverCaptured) {_        _        _        PainlessMethod method = painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                    "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.getPainlessStructFromJavaClass(painlessLookup.getJavaClassFromPainlessType(type))__        final PainlessMethod impl__        _        if ("new".equals(call)) {_            impl = struct.constructors.get(PainlessLookupUtility.buildPainlessMethodKey("<init>", method.arguments.size()))__        } else {_            _            PainlessMethod staticImpl =_                    struct.staticMethods.get(PainlessLookupUtility.buildPainlessMethodKey(call, method.arguments.size()))__            if (staticImpl == null) {_                _                final int arity__                if (receiverCaptured) {_                    _                    arity = method.arguments.size()__                } else {_                    _                    arity = method.arguments.size() - 1__                }_                impl = struct.methods.get(PainlessLookupUtility.buildPainlessMethodKey(call, arity))__            } else {_                impl = staticImpl__            }_        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,painless,method,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,boolean,receiver,captured,painless,method,method,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,painless,lookup,utility,any,type,to,painless,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,get,painless,struct,from,java,class,painless,lookup,get,java,class,from,painless,type,type,final,painless,method,impl,if,new,equals,call,impl,struct,constructors,get,painless,lookup,utility,build,painless,method,key,init,method,arguments,size,else,painless,method,static,impl,struct,static,methods,get,painless,lookup,utility,build,painless,method,key,call,method,arguments,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,arguments,size,else,arity,method,arguments,size,1,impl,struct,methods,get,painless,lookup,utility,build,painless,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,                                          String type, String call, boolean receiverCaptured);1532069817;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,_                                         String type, String call, boolean receiverCaptured) {_        _        _        PainlessMethod method = painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.getPainlessStructFromJavaClass(painlessLookup.getJavaClassFromPainlessType(type))__        final PainlessMethod impl__        _        if ("new".equals(call)) {_            impl = struct.constructors.get(PainlessLookupUtility.buildPainlessMethodKey("<init>", method.arguments.size()))__        } else {_            _            PainlessMethod staticImpl =_                    struct.staticMethods.get(PainlessLookupUtility.buildPainlessMethodKey(call, method.arguments.size()))__            if (staticImpl == null) {_                _                final int arity__                if (receiverCaptured) {_                    _                    arity = method.arguments.size()__                } else {_                    _                    arity = method.arguments.size() - 1__                }_                impl = struct.methods.get(PainlessLookupUtility.buildPainlessMethodKey(call, arity))__            } else {_                impl = staticImpl__            }_        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,painless,method,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,boolean,receiver,captured,painless,method,method,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,painless,lookup,utility,type,to,canonical,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,get,painless,struct,from,java,class,painless,lookup,get,java,class,from,painless,type,type,final,painless,method,impl,if,new,equals,call,impl,struct,constructors,get,painless,lookup,utility,build,painless,method,key,init,method,arguments,size,else,painless,method,static,impl,struct,static,methods,get,painless,lookup,utility,build,painless,method,key,call,method,arguments,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,arguments,size,else,arity,method,arguments,size,1,impl,struct,methods,get,painless,lookup,utility,build,painless,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,                                          String type, String call, boolean receiverCaptured);1532947734;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,_                                         String type, String call, boolean receiverCaptured) {_        _        _        PainlessMethod method = painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.getPainlessStructFromJavaClass(painlessLookup.getJavaClassFromPainlessType(type))__        final PainlessMethod impl__        _        if ("new".equals(call)) {_            impl = struct.constructors.get(PainlessLookupUtility.buildPainlessMethodKey("<init>", method.arguments.size()))__        } else {_            _            PainlessMethod staticImpl =_                    struct.staticMethods.get(PainlessLookupUtility.buildPainlessMethodKey(call, method.arguments.size()))__            if (staticImpl == null) {_                _                final int arity__                if (receiverCaptured) {_                    _                    arity = method.arguments.size()__                } else {_                    _                    arity = method.arguments.size() - 1__                }_                impl = struct.methods.get(PainlessLookupUtility.buildPainlessMethodKey(call, arity))__            } else {_                impl = staticImpl__            }_        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,painless,method,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,boolean,receiver,captured,painless,method,method,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,painless,lookup,utility,type,to,canonical,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,get,painless,struct,from,java,class,painless,lookup,get,java,class,from,painless,type,type,final,painless,method,impl,if,new,equals,call,impl,struct,constructors,get,painless,lookup,utility,build,painless,method,key,init,method,arguments,size,else,painless,method,static,impl,struct,static,methods,get,painless,lookup,utility,build,painless,method,key,call,method,arguments,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,arguments,size,else,arity,method,arguments,size,1,impl,struct,methods,get,painless,lookup,utility,build,painless,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,                                          String type, String call, boolean receiverCaptured);1533063033;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,_                                         String type, String call, boolean receiverCaptured) {_        _        _        PainlessMethod method = painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.getPainlessStructFromJavaClass(painlessLookup.getJavaClassFromPainlessType(type))__        final PainlessMethod impl__        _        PainlessMethod staticImpl =_                struct.staticMethods.get(PainlessLookupUtility.buildPainlessMethodKey(call, method.arguments.size()))__        if (staticImpl == null) {_            _            final int arity__            if (receiverCaptured) {_                _                arity = method.arguments.size()__            } else {_                _                arity = method.arguments.size() - 1__            }_            impl = struct.methods.get(PainlessLookupUtility.buildPainlessMethodKey(call, arity))__        } else {_            impl = staticImpl__        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,painless,method,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,boolean,receiver,captured,painless,method,method,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,painless,lookup,utility,type,to,canonical,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,get,painless,struct,from,java,class,painless,lookup,get,java,class,from,painless,type,type,final,painless,method,impl,painless,method,static,impl,struct,static,methods,get,painless,lookup,utility,build,painless,method,key,call,method,arguments,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,arguments,size,else,arity,method,arguments,size,1,impl,struct,methods,get,painless,lookup,utility,build,painless,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,                                          String type, String call, boolean receiverCaptured);1533143718;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,_                                         String type, String call, boolean receiverCaptured) {_        _        _        PainlessMethod method = painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.getPainlessStructFromJavaClass(painlessLookup.getJavaClassFromPainlessType(type))__        final PainlessMethod impl__        _        PainlessMethod staticImpl =_                struct.staticMethods.get(PainlessLookupUtility.buildPainlessMethodKey(call, method.typeParameters.size()))__        if (staticImpl == null) {_            _            final int arity__            if (receiverCaptured) {_                _                arity = method.typeParameters.size()__            } else {_                _                arity = method.typeParameters.size() - 1__            }_            impl = struct.methods.get(PainlessLookupUtility.buildPainlessMethodKey(call, arity))__        } else {_            impl = staticImpl__        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,painless,method,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,boolean,receiver,captured,painless,method,method,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,painless,lookup,utility,type,to,canonical,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,get,painless,struct,from,java,class,painless,lookup,get,java,class,from,painless,type,type,final,painless,method,impl,painless,method,static,impl,struct,static,methods,get,painless,lookup,utility,build,painless,method,key,call,method,type,parameters,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,type,parameters,size,else,arity,method,type,parameters,size,1,impl,struct,methods,get,painless,lookup,utility,build,painless,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,                                          String type, String call, boolean receiverCaptured);1533295538;Looks up {@code type::call} from the whitelist, and returns a matching method.;private static PainlessMethod lookup(PainlessLookup painlessLookup, Class<?> expected,_                                         String type, String call, boolean receiverCaptured) {_        _        _        PainlessMethod method = painlessLookup.lookupPainlessClass(expected).functionalMethod__        if (method == null) {_            throw new IllegalArgumentException("Cannot convert function reference [" + type + "::" + call + "] " +_                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface")__        }__        _        PainlessClass struct = painlessLookup.lookupPainlessClass(painlessLookup.canonicalTypeNameToType(type))__        final PainlessMethod impl__        _        PainlessMethod staticImpl =_                struct.staticMethods.get(PainlessLookupUtility.buildPainlessMethodKey(call, method.typeParameters.size()))__        if (staticImpl == null) {_            _            final int arity__            if (receiverCaptured) {_                _                arity = method.typeParameters.size()__            } else {_                _                arity = method.typeParameters.size() - 1__            }_            impl = struct.methods.get(PainlessLookupUtility.buildPainlessMethodKey(call, arity))__        } else {_            impl = staticImpl__        }_        if (impl == null) {_            throw new IllegalArgumentException("Unknown reference [" + type + "::" + call + "] matching " +_                                               "[" + expected + "]")__        }_        return impl__    };looks,up,code,type,call,from,the,whitelist,and,returns,a,matching,method;private,static,painless,method,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,boolean,receiver,captured,painless,method,method,painless,lookup,lookup,painless,class,expected,functional,method,if,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,call,to,painless,lookup,utility,type,to,canonical,type,name,expected,not,a,functional,interface,painless,class,struct,painless,lookup,lookup,painless,class,painless,lookup,canonical,type,name,to,type,type,final,painless,method,impl,painless,method,static,impl,struct,static,methods,get,painless,lookup,utility,build,painless,method,key,call,method,type,parameters,size,if,static,impl,null,final,int,arity,if,receiver,captured,arity,method,type,parameters,size,else,arity,method,type,parameters,size,1,impl,struct,methods,get,painless,lookup,utility,build,painless,method,key,call,arity,else,impl,static,impl,if,impl,null,throw,new,illegal,argument,exception,unknown,reference,type,call,matching,expected,return,impl
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, LocalMethod delegateMethod, int numCaptures);1533143718;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, LocalMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.methodType___        this.interfaceMethodName = interfaceMethod.javaMethod.getName()__        this.factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        this.interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        this.delegateClassName = CLASS_NAME__        this.isDelegateInterface = false__        this.delegateInvokeType = H_INVOKESTATIC___        this.delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateTypeParameters = delegateMethod.typeParameters__        this.delegateReturnType = delegateMethod.returnType___        this.factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        this.interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        this.delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,local,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,method,type,this,interface,method,name,interface,method,java,method,get,name,this,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,this,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,this,delegate,class,name,this,is,delegate,interface,false,this,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,type,parameters,delegate,method,type,parameters,this,delegate,return,type,delegate,method,return,type,this,factory,descriptor,factory,method,type,to,method,descriptor,string,this,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,this,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, LocalMethod delegateMethod, int numCaptures);1533295538;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, LocalMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.methodType___        this.interfaceMethodName = interfaceMethod.javaMethod.getName()__        this.factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        this.interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        this.delegateClassName = CLASS_NAME__        this.isDelegateInterface = false__        this.delegateInvokeType = H_INVOKESTATIC___        this.delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateTypeParameters = delegateMethod.typeParameters__        this.delegateReturnType = delegateMethod.returnType___        this.factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        this.interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        this.delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,local,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,method,type,this,interface,method,name,interface,method,java,method,get,name,this,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,this,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,this,delegate,class,name,this,is,delegate,interface,false,this,delegate,invoke,type,this,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,type,parameters,delegate,method,type,parameters,this,delegate,return,type,delegate,method,return,type,this,factory,descriptor,factory,method,type,to,method,descriptor,string,this,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,this,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public static FunctionRef resolveFromLookup(             PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures);1533063033;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public static FunctionRef resolveFromLookup(_            PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures) {__        if ("new".equals(call)) {_            return new FunctionRef(expected, painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod,_                    lookup(painlessLookup, expected, type), numCaptures)__        } else {_            return new FunctionRef(expected, painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod,_                    lookup(painlessLookup, expected, type, call, numCaptures > 0), numCaptures)__        }_    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,static,function,ref,resolve,from,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,int,num,captures,if,new,equals,call,return,new,function,ref,expected,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,lookup,painless,lookup,expected,type,num,captures,else,return,new,function,ref,expected,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,lookup,painless,lookup,expected,type,call,num,captures,0,num,captures
FunctionRef -> public static FunctionRef resolveFromLookup(             PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures);1533143718;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public static FunctionRef resolveFromLookup(_            PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures) {__        if ("new".equals(call)) {_            return new FunctionRef(expected, painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod,_                    lookup(painlessLookup, expected, type), numCaptures)__        } else {_            return new FunctionRef(expected, painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod,_                    lookup(painlessLookup, expected, type, call, numCaptures > 0), numCaptures)__        }_    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,static,function,ref,resolve,from,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,int,num,captures,if,new,equals,call,return,new,function,ref,expected,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,lookup,painless,lookup,expected,type,num,captures,else,return,new,function,ref,expected,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,lookup,painless,lookup,expected,type,call,num,captures,0,num,captures
FunctionRef -> public static FunctionRef resolveFromLookup(             PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures);1533295538;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public static FunctionRef resolveFromLookup(_            PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures) {__        if ("new".equals(call)) {_            return new FunctionRef(expected, painlessLookup.lookupPainlessClass(expected).functionalMethod,_                    lookup(painlessLookup, expected, type), numCaptures)__        } else {_            return new FunctionRef(expected, painlessLookup.lookupPainlessClass(expected).functionalMethod,_                    lookup(painlessLookup, expected, type, call, numCaptures > 0), numCaptures)__        }_    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,static,function,ref,resolve,from,lookup,painless,lookup,painless,lookup,class,expected,string,type,string,call,int,num,captures,if,new,equals,call,return,new,function,ref,expected,painless,lookup,lookup,painless,class,expected,functional,method,lookup,painless,lookup,expected,type,num,captures,else,return,new,function,ref,expected,painless,lookup,lookup,painless,class,expected,functional,method,lookup,painless,lookup,expected,type,call,num,captures,0,num,captures
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures);1531179852;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.getMethodType()___        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        _        if (delegateMethod.owner == null) {_            delegateClassName = CLASS_NAME__            isDelegateInterface = false__        } else if (delegateMethod.augmentation != null) {_            delegateClassName = delegateMethod.augmentation.getName()__            isDelegateInterface = delegateMethod.augmentation.isInterface()__        } else {_            delegateClassName = delegateMethod.owner.clazz.getName()__            isDelegateInterface = delegateMethod.owner.clazz.isInterface()__        }__        if ("<init>".equals(delegateMethod.name)) {_            delegateInvokeType = H_NEWINVOKESPECIAL__        } else if (Modifier.isStatic(delegateMethod.modifiers)) {_            delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.owner.clazz.isInterface()) {_            delegateInvokeType = H_INVOKEINTERFACE__        } else {_            delegateInvokeType = H_INVOKEVIRTUAL__        }__        delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateMethod = delegateMethod___        factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,get,method,type,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,if,delegate,method,owner,null,delegate,class,name,is,delegate,interface,false,else,if,delegate,method,augmentation,null,delegate,class,name,delegate,method,augmentation,get,name,is,delegate,interface,delegate,method,augmentation,is,interface,else,delegate,class,name,delegate,method,owner,clazz,get,name,is,delegate,interface,delegate,method,owner,clazz,is,interface,if,init,equals,delegate,method,name,delegate,invoke,type,else,if,modifier,is,static,delegate,method,modifiers,delegate,invoke,type,else,if,delegate,method,owner,clazz,is,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,method,delegate,method,factory,descriptor,factory,method,type,to,method,descriptor,string,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures);1531910483;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.getMethodType()___        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        _        if (delegateMethod.target == null) {_            delegateClassName = CLASS_NAME__            isDelegateInterface = false__        } else if (delegateMethod.augmentation != null) {_            delegateClassName = delegateMethod.augmentation.getName()__            isDelegateInterface = delegateMethod.augmentation.isInterface()__        } else {_            delegateClassName = delegateMethod.target.getName()__            isDelegateInterface = delegateMethod.target.isInterface()__        }__        if ("<init>".equals(delegateMethod.name)) {_            delegateInvokeType = H_NEWINVOKESPECIAL__        } else if (Modifier.isStatic(delegateMethod.modifiers)) {_            delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.target.isInterface()) {_            delegateInvokeType = H_INVOKEINTERFACE__        } else {_            delegateInvokeType = H_INVOKEVIRTUAL__        }__        delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateMethod = delegateMethod___        factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,get,method,type,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,if,delegate,method,target,null,delegate,class,name,is,delegate,interface,false,else,if,delegate,method,augmentation,null,delegate,class,name,delegate,method,augmentation,get,name,is,delegate,interface,delegate,method,augmentation,is,interface,else,delegate,class,name,delegate,method,target,get,name,is,delegate,interface,delegate,method,target,is,interface,if,init,equals,delegate,method,name,delegate,invoke,type,else,if,modifier,is,static,delegate,method,modifiers,delegate,invoke,type,else,if,delegate,method,target,is,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,method,delegate,method,factory,descriptor,factory,method,type,to,method,descriptor,string,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures);1532069817;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.getMethodType()___        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        _        if (delegateMethod.target == null) {_            delegateClassName = CLASS_NAME__            isDelegateInterface = false__        } else if (delegateMethod.augmentation != null) {_            delegateClassName = delegateMethod.augmentation.getName()__            isDelegateInterface = delegateMethod.augmentation.isInterface()__        } else {_            delegateClassName = delegateMethod.target.getName()__            isDelegateInterface = delegateMethod.target.isInterface()__        }__        if ("<init>".equals(delegateMethod.name)) {_            delegateInvokeType = H_NEWINVOKESPECIAL__        } else if (Modifier.isStatic(delegateMethod.modifiers)) {_            delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.target.isInterface()) {_            delegateInvokeType = H_INVOKEINTERFACE__        } else {_            delegateInvokeType = H_INVOKEVIRTUAL__        }__        delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateMethod = delegateMethod___        factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,get,method,type,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,if,delegate,method,target,null,delegate,class,name,is,delegate,interface,false,else,if,delegate,method,augmentation,null,delegate,class,name,delegate,method,augmentation,get,name,is,delegate,interface,delegate,method,augmentation,is,interface,else,delegate,class,name,delegate,method,target,get,name,is,delegate,interface,delegate,method,target,is,interface,if,init,equals,delegate,method,name,delegate,invoke,type,else,if,modifier,is,static,delegate,method,modifiers,delegate,invoke,type,else,if,delegate,method,target,is,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,method,delegate,method,factory,descriptor,factory,method,type,to,method,descriptor,string,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures);1532947734;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.methodType___        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        _        if (delegateMethod.target == null) {_            delegateClassName = CLASS_NAME__            isDelegateInterface = false__        } else if (delegateMethod.augmentation != null) {_            delegateClassName = delegateMethod.augmentation.getName()__            isDelegateInterface = delegateMethod.augmentation.isInterface()__        } else {_            delegateClassName = delegateMethod.target.getName()__            isDelegateInterface = delegateMethod.target.isInterface()__        }__        if ("<init>".equals(delegateMethod.name)) {_            delegateInvokeType = H_NEWINVOKESPECIAL__        } else if (Modifier.isStatic(delegateMethod.modifiers)) {_            delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.target.isInterface()) {_            delegateInvokeType = H_INVOKEINTERFACE__        } else {_            delegateInvokeType = H_INVOKEVIRTUAL__        }__        delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateMethod = delegateMethod___        factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,method,type,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,if,delegate,method,target,null,delegate,class,name,is,delegate,interface,false,else,if,delegate,method,augmentation,null,delegate,class,name,delegate,method,augmentation,get,name,is,delegate,interface,delegate,method,augmentation,is,interface,else,delegate,class,name,delegate,method,target,get,name,is,delegate,interface,delegate,method,target,is,interface,if,init,equals,delegate,method,name,delegate,invoke,type,else,if,modifier,is,static,delegate,method,modifiers,delegate,invoke,type,else,if,delegate,method,target,is,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,method,delegate,method,factory,descriptor,factory,method,type,to,method,descriptor,string,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures);1533063033;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.methodType___        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        _        if (delegateMethod.target == null) {_            delegateClassName = CLASS_NAME__            isDelegateInterface = false__        } else if (delegateMethod.augmentation != null) {_            delegateClassName = delegateMethod.augmentation.getName()__            isDelegateInterface = delegateMethod.augmentation.isInterface()__        } else {_            delegateClassName = delegateMethod.target.getName()__            isDelegateInterface = delegateMethod.target.isInterface()__        }__        if (Modifier.isStatic(delegateMethod.modifiers)) {_            delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.target.isInterface()) {_            delegateInvokeType = H_INVOKEINTERFACE__        } else {_            delegateInvokeType = H_INVOKEVIRTUAL__        }__        delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        delegateTypeParameters = delegateMethod.arguments__        delegateReturnType = delegateMethod.rtn___        factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,method,type,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,if,delegate,method,target,null,delegate,class,name,is,delegate,interface,false,else,if,delegate,method,augmentation,null,delegate,class,name,delegate,method,augmentation,get,name,is,delegate,interface,delegate,method,augmentation,is,interface,else,delegate,class,name,delegate,method,target,get,name,is,delegate,interface,delegate,method,target,is,interface,if,modifier,is,static,delegate,method,modifiers,delegate,invoke,type,else,if,delegate,method,target,is,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,delegate,type,parameters,delegate,method,arguments,delegate,return,type,delegate,method,rtn,factory,descriptor,factory,method,type,to,method,descriptor,string,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures);1533143718;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.methodType___        this.interfaceMethodName = interfaceMethod.javaMethod.getName()__        this.factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        this.interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        this.delegateClassName = delegateMethod.javaMethod.getDeclaringClass().getName()__        this.isDelegateInterface = delegateMethod.javaMethod.getDeclaringClass().isInterface()___        if (Modifier.isStatic(delegateMethod.javaMethod.getModifiers())) {_            this.delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.javaMethod.getDeclaringClass().isInterface()) {_            this.delegateInvokeType = H_INVOKEINTERFACE__        } else {_            this.delegateInvokeType = H_INVOKEVIRTUAL__        }__        this.delegateMethodName = delegateMethod.javaMethod.getName()__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateTypeParameters = delegateMethod.typeParameters__        this.delegateReturnType = delegateMethod.returnType___        this.factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        this.interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        this.delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,method,type,this,interface,method,name,interface,method,java,method,get,name,this,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,this,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,this,delegate,class,name,delegate,method,java,method,get,declaring,class,get,name,this,is,delegate,interface,delegate,method,java,method,get,declaring,class,is,interface,if,modifier,is,static,delegate,method,java,method,get,modifiers,this,delegate,invoke,type,else,if,delegate,method,java,method,get,declaring,class,is,interface,this,delegate,invoke,type,else,this,delegate,invoke,type,this,delegate,method,name,delegate,method,java,method,get,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,type,parameters,delegate,method,type,parameters,this,delegate,return,type,delegate,method,return,type,this,factory,descriptor,factory,method,type,to,method,descriptor,string,this,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,this,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures);1533295538;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, PainlessMethod interfaceMethod, PainlessMethod delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.methodType___        this.interfaceMethodName = interfaceMethod.javaMethod.getName()__        this.factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        this.interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)___        this.delegateClassName = delegateMethod.javaMethod.getDeclaringClass().getName()__        this.isDelegateInterface = delegateMethod.javaMethod.getDeclaringClass().isInterface()___        if (Modifier.isStatic(delegateMethod.javaMethod.getModifiers())) {_            this.delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.javaMethod.getDeclaringClass().isInterface()) {_            this.delegateInvokeType = H_INVOKEINTERFACE__        } else {_            this.delegateInvokeType = H_INVOKEVIRTUAL__        }__        this.delegateMethodName = delegateMethod.javaMethod.getName()__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateTypeParameters = delegateMethod.typeParameters__        this.delegateReturnType = delegateMethod.returnType___        this.factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        this.interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        this.delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,painless,method,interface,method,painless,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,method,type,this,interface,method,name,interface,method,java,method,get,name,this,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,this,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,this,delegate,class,name,delegate,method,java,method,get,declaring,class,get,name,this,is,delegate,interface,delegate,method,java,method,get,declaring,class,is,interface,if,modifier,is,static,delegate,method,java,method,get,modifiers,this,delegate,invoke,type,else,if,delegate,method,java,method,get,declaring,class,is,interface,this,delegate,invoke,type,else,this,delegate,invoke,type,this,delegate,method,name,delegate,method,java,method,get,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,type,parameters,delegate,method,type,parameters,this,delegate,return,type,delegate,method,return,type,this,factory,descriptor,factory,method,type,to,method,descriptor,string,this,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,this,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public static FunctionRef create(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods, Location location,             Class<?> targetClass, String typeName, String methodName, int numberOfCaptures);1533738061;Creates a new FunctionRef which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param localMethods user-defined and synthetic methods generated directly on the script class_@param location the character number within the script at compile-time_@param targetClass functional interface type to implement._@param typeName the left hand side of a method reference expression_@param methodName the right hand side of a method reference expression_@param numberOfCaptures number of captured arguments;public static FunctionRef create(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods, Location location,_            Class<?> targetClass, String typeName, String methodName, int numberOfCaptures) {__        Objects.requireNonNull(painlessLookup)__        Objects.requireNonNull(targetClass)__        Objects.requireNonNull(typeName)__        Objects.requireNonNull(methodName)___        String targetClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass)__        PainlessMethod interfaceMethod___        try {_            try {_                interfaceMethod = painlessLookup.lookupFunctionalInterfacePainlessMethod(targetClass)__            } catch (IllegalArgumentException iae) {_                throw new IllegalArgumentException("cannot convert function reference [" + typeName + "::" + methodName + "] " +_                        "to a non-functional interface [" + targetClassName + "]", iae)__            }__            String interfaceMethodName = interfaceMethod.javaMethod.getName()__            MethodType interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)__            String delegateClassName__            boolean isDelegateInterface__            int delegateInvokeType__            String delegateMethodName__            MethodType delegateMethodType___            Class<?> delegateMethodReturnType__            List<Class<?>> delegateMethodParameters__            int interfaceTypeParametersSize = interfaceMethod.typeParameters.size()___            if ("this".equals(typeName)) {_                Objects.requireNonNull(localMethods)___                if (numberOfCaptures < 0) {_                    throw new IllegalStateException("internal error")__                }__                String localMethodKey = Locals.buildLocalMethodKey(methodName, numberOfCaptures + interfaceTypeParametersSize)__                LocalMethod localMethod = localMethods.get(localMethodKey)___                if (localMethod == null) {_                    throw new IllegalArgumentException("function reference [this::" + localMethodKey + "] " +_                            "matching [" + targetClassName + ", " + interfaceMethodName + "/" + interfaceTypeParametersSize + "] " +_                            "not found" + (localMethodKey.contains("$") ? " due to an incorrect number of arguments" : "")_                    )__                }__                delegateClassName = CLASS_NAME__                isDelegateInterface = false__                delegateInvokeType = H_INVOKESTATIC__                delegateMethodName = localMethod.name__                delegateMethodType = localMethod.methodType___                delegateMethodReturnType = localMethod.returnType__                delegateMethodParameters = localMethod.typeParameters__            } else if ("new".equals(methodName)) {_                if (numberOfCaptures != 0) {_                    throw new IllegalStateException("internal error")__                }__                PainlessConstructor painlessConstructor___                try {_                    painlessConstructor = painlessLookup.lookupPainlessConstructor(typeName, interfaceTypeParametersSize)__                } catch (IllegalArgumentException iae) {_                    throw new IllegalArgumentException("function reference [" + typeName + "::new/" + interfaceTypeParametersSize + "] " +_                            "matching [" + targetClassName + ", " + interfaceMethodName + "/" + interfaceTypeParametersSize + "] " +_                            "not found", iae)__                }__                delegateClassName = painlessConstructor.javaConstructor.getDeclaringClass().getName()__                isDelegateInterface = false__                delegateInvokeType = H_NEWINVOKESPECIAL__                delegateMethodName = PainlessLookupUtility.CONSTRUCTOR_NAME__                delegateMethodType = painlessConstructor.methodType___                delegateMethodReturnType = painlessConstructor.javaConstructor.getDeclaringClass()__                delegateMethodParameters = painlessConstructor.typeParameters__            } else {_                if (numberOfCaptures != 0 && numberOfCaptures != 1) {_                    throw new IllegalStateException("internal error")__                }__                boolean captured = numberOfCaptures == 1__                PainlessMethod painlessMethod___                try {_                    painlessMethod = painlessLookup.lookupPainlessMethod(typeName, true, methodName, interfaceTypeParametersSize)___                    if (captured) {_                        throw new IllegalStateException("internal error")__                    }_                } catch (IllegalArgumentException staticIAE) {_                    try {_                        painlessMethod = painlessLookup.lookupPainlessMethod(typeName, false, methodName,_                                captured ? interfaceTypeParametersSize : interfaceTypeParametersSize - 1)__                    } catch (IllegalArgumentException iae) {_                        throw new IllegalArgumentException(_                                "function reference " + "[" + typeName + "::" + methodName + "/" + interfaceTypeParametersSize + "] " +_                                "matching [" + targetClassName + ", " + interfaceMethodName + "/" + interfaceTypeParametersSize + "] " +_                                "not found", iae)__                    }_                }__                delegateClassName = painlessMethod.javaMethod.getDeclaringClass().getName()__                isDelegateInterface = painlessMethod.javaMethod.getDeclaringClass().isInterface()___                if (Modifier.isStatic(painlessMethod.javaMethod.getModifiers())) {_                    delegateInvokeType = H_INVOKESTATIC__                } else if (isDelegateInterface) {_                    delegateInvokeType = H_INVOKEINTERFACE__                } else {_                    delegateInvokeType = H_INVOKEVIRTUAL__                }__                delegateMethodName = painlessMethod.javaMethod.getName()__                delegateMethodType = painlessMethod.methodType___                delegateMethodReturnType = painlessMethod.returnType___                if (delegateMethodType.parameterList().size() > painlessMethod.typeParameters.size()) {_                    delegateMethodParameters = new ArrayList<>(painlessMethod.typeParameters)__                    delegateMethodParameters.add(0, delegateMethodType.parameterType(0))__                } else {_                    delegateMethodParameters = painlessMethod.typeParameters__                }_            }__            if (location != null) {_                for (int typeParameter = 0_ typeParameter < interfaceTypeParametersSize_ ++typeParameter) {_                    Class<?> from = interfaceMethod.typeParameters.get(typeParameter)__                    Class<?> to = delegateMethodParameters.get(numberOfCaptures + typeParameter)__                    AnalyzerCaster.getLegalCast(location, from, to, false, true)__                }__                if (interfaceMethod.returnType != void.class) {_                    AnalyzerCaster.getLegalCast(location, delegateMethodReturnType, interfaceMethod.returnType, false, true)__                }_            }__            MethodType factoryMethodType = MethodType.methodType(targetClass,_                    delegateMethodType.dropParameterTypes(numberOfCaptures, delegateMethodType.parameterCount()))__            delegateMethodType = delegateMethodType.dropParameterTypes(0, numberOfCaptures)___            return new FunctionRef(interfaceMethodName, interfaceMethodType,_                    delegateClassName, isDelegateInterface, delegateInvokeType, delegateMethodName, delegateMethodType,_                    factoryMethodType_            )__        } catch (IllegalArgumentException iae) {_            if (location != null) {_                throw location.createError(iae)__            }__            throw iae__        }_    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,local,methods,user,defined,and,synthetic,methods,generated,directly,on,the,script,class,param,location,the,character,number,within,the,script,at,compile,time,param,target,class,functional,interface,type,to,implement,param,type,name,the,left,hand,side,of,a,method,reference,expression,param,method,name,the,right,hand,side,of,a,method,reference,expression,param,number,of,captures,number,of,captured,arguments;public,static,function,ref,create,painless,lookup,painless,lookup,map,string,local,method,local,methods,location,location,class,target,class,string,type,name,string,method,name,int,number,of,captures,objects,require,non,null,painless,lookup,objects,require,non,null,target,class,objects,require,non,null,type,name,objects,require,non,null,method,name,string,target,class,name,painless,lookup,utility,type,to,canonical,type,name,target,class,painless,method,interface,method,try,try,interface,method,painless,lookup,lookup,functional,interface,painless,method,target,class,catch,illegal,argument,exception,iae,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,name,method,name,to,a,non,functional,interface,target,class,name,iae,string,interface,method,name,interface,method,java,method,get,name,method,type,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,string,delegate,class,name,boolean,is,delegate,interface,int,delegate,invoke,type,string,delegate,method,name,method,type,delegate,method,type,class,delegate,method,return,type,list,class,delegate,method,parameters,int,interface,type,parameters,size,interface,method,type,parameters,size,if,this,equals,type,name,objects,require,non,null,local,methods,if,number,of,captures,0,throw,new,illegal,state,exception,internal,error,string,local,method,key,locals,build,local,method,key,method,name,number,of,captures,interface,type,parameters,size,local,method,local,method,local,methods,get,local,method,key,if,local,method,null,throw,new,illegal,argument,exception,function,reference,this,local,method,key,matching,target,class,name,interface,method,name,interface,type,parameters,size,not,found,local,method,key,contains,due,to,an,incorrect,number,of,arguments,delegate,class,name,is,delegate,interface,false,delegate,invoke,type,delegate,method,name,local,method,name,delegate,method,type,local,method,method,type,delegate,method,return,type,local,method,return,type,delegate,method,parameters,local,method,type,parameters,else,if,new,equals,method,name,if,number,of,captures,0,throw,new,illegal,state,exception,internal,error,painless,constructor,painless,constructor,try,painless,constructor,painless,lookup,lookup,painless,constructor,type,name,interface,type,parameters,size,catch,illegal,argument,exception,iae,throw,new,illegal,argument,exception,function,reference,type,name,new,interface,type,parameters,size,matching,target,class,name,interface,method,name,interface,type,parameters,size,not,found,iae,delegate,class,name,painless,constructor,java,constructor,get,declaring,class,get,name,is,delegate,interface,false,delegate,invoke,type,delegate,method,name,painless,lookup,utility,delegate,method,type,painless,constructor,method,type,delegate,method,return,type,painless,constructor,java,constructor,get,declaring,class,delegate,method,parameters,painless,constructor,type,parameters,else,if,number,of,captures,0,number,of,captures,1,throw,new,illegal,state,exception,internal,error,boolean,captured,number,of,captures,1,painless,method,painless,method,try,painless,method,painless,lookup,lookup,painless,method,type,name,true,method,name,interface,type,parameters,size,if,captured,throw,new,illegal,state,exception,internal,error,catch,illegal,argument,exception,static,iae,try,painless,method,painless,lookup,lookup,painless,method,type,name,false,method,name,captured,interface,type,parameters,size,interface,type,parameters,size,1,catch,illegal,argument,exception,iae,throw,new,illegal,argument,exception,function,reference,type,name,method,name,interface,type,parameters,size,matching,target,class,name,interface,method,name,interface,type,parameters,size,not,found,iae,delegate,class,name,painless,method,java,method,get,declaring,class,get,name,is,delegate,interface,painless,method,java,method,get,declaring,class,is,interface,if,modifier,is,static,painless,method,java,method,get,modifiers,delegate,invoke,type,else,if,is,delegate,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,painless,method,java,method,get,name,delegate,method,type,painless,method,method,type,delegate,method,return,type,painless,method,return,type,if,delegate,method,type,parameter,list,size,painless,method,type,parameters,size,delegate,method,parameters,new,array,list,painless,method,type,parameters,delegate,method,parameters,add,0,delegate,method,type,parameter,type,0,else,delegate,method,parameters,painless,method,type,parameters,if,location,null,for,int,type,parameter,0,type,parameter,interface,type,parameters,size,type,parameter,class,from,interface,method,type,parameters,get,type,parameter,class,to,delegate,method,parameters,get,number,of,captures,type,parameter,analyzer,caster,get,legal,cast,location,from,to,false,true,if,interface,method,return,type,void,class,analyzer,caster,get,legal,cast,location,delegate,method,return,type,interface,method,return,type,false,true,method,type,factory,method,type,method,type,method,type,target,class,delegate,method,type,drop,parameter,types,number,of,captures,delegate,method,type,parameter,count,delegate,method,type,delegate,method,type,drop,parameter,types,0,number,of,captures,return,new,function,ref,interface,method,name,interface,method,type,delegate,class,name,is,delegate,interface,delegate,invoke,type,delegate,method,name,delegate,method,type,factory,method,type,catch,illegal,argument,exception,iae,if,location,null,throw,location,create,error,iae,throw,iae
FunctionRef -> public static FunctionRef create(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods, Location location,             Class<?> targetClass, String typeName, String methodName, int numberOfCaptures);1533815246;Creates a new FunctionRef which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param localMethods user-defined and synthetic methods generated directly on the script class_@param location the character number within the script at compile-time_@param targetClass functional interface type to implement._@param typeName the left hand side of a method reference expression_@param methodName the right hand side of a method reference expression_@param numberOfCaptures number of captured arguments;public static FunctionRef create(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods, Location location,_            Class<?> targetClass, String typeName, String methodName, int numberOfCaptures) {__        Objects.requireNonNull(painlessLookup)__        Objects.requireNonNull(targetClass)__        Objects.requireNonNull(typeName)__        Objects.requireNonNull(methodName)___        String targetClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass)__        PainlessMethod interfaceMethod___        try {_            interfaceMethod = painlessLookup.lookupFunctionalInterfacePainlessMethod(targetClass)___            if (interfaceMethod == null) {_                throw new IllegalArgumentException("cannot convert function reference [" + typeName + "::" + methodName + "] " +_                        "to a non-functional interface [" + targetClassName + "]")__            }__            String interfaceMethodName = interfaceMethod.javaMethod.getName()__            MethodType interfaceMethodType = interfaceMethod.methodType.dropParameterTypes(0, 1)__            String delegateClassName__            boolean isDelegateInterface__            int delegateInvokeType__            String delegateMethodName__            MethodType delegateMethodType___            Class<?> delegateMethodReturnType__            List<Class<?>> delegateMethodParameters__            int interfaceTypeParametersSize = interfaceMethod.typeParameters.size()___            if ("this".equals(typeName)) {_                Objects.requireNonNull(localMethods)___                if (numberOfCaptures < 0) {_                    throw new IllegalStateException("internal error")__                }__                String localMethodKey = Locals.buildLocalMethodKey(methodName, numberOfCaptures + interfaceTypeParametersSize)__                LocalMethod localMethod = localMethods.get(localMethodKey)___                if (localMethod == null) {_                    throw new IllegalArgumentException("function reference [this::" + localMethodKey + "] " +_                            "matching [" + targetClassName + ", " + interfaceMethodName + "/" + interfaceTypeParametersSize + "] " +_                            "not found" + (localMethodKey.contains("$") ? " due to an incorrect number of arguments" : "")_                    )__                }__                delegateClassName = CLASS_NAME__                isDelegateInterface = false__                delegateInvokeType = H_INVOKESTATIC__                delegateMethodName = localMethod.name__                delegateMethodType = localMethod.methodType___                delegateMethodReturnType = localMethod.returnType__                delegateMethodParameters = localMethod.typeParameters__            } else if ("new".equals(methodName)) {_                if (numberOfCaptures != 0) {_                    throw new IllegalStateException("internal error")__                }__                PainlessConstructor painlessConstructor = painlessLookup.lookupPainlessConstructor(typeName, interfaceTypeParametersSize)___                if (painlessConstructor == null) {_                    throw new IllegalArgumentException("function reference [" + typeName + "::new/" + interfaceTypeParametersSize + "] " +_                            "matching [" + targetClassName + ", " + interfaceMethodName + "/" + interfaceTypeParametersSize + "] " +_                            "not found")__                }__                delegateClassName = painlessConstructor.javaConstructor.getDeclaringClass().getName()__                isDelegateInterface = false__                delegateInvokeType = H_NEWINVOKESPECIAL__                delegateMethodName = PainlessLookupUtility.CONSTRUCTOR_NAME__                delegateMethodType = painlessConstructor.methodType___                delegateMethodReturnType = painlessConstructor.javaConstructor.getDeclaringClass()__                delegateMethodParameters = painlessConstructor.typeParameters__            } else {_                if (numberOfCaptures != 0 && numberOfCaptures != 1) {_                    throw new IllegalStateException("internal error")__                }__                boolean captured = numberOfCaptures == 1__                PainlessMethod painlessMethod =_                        painlessLookup.lookupPainlessMethod(typeName, true, methodName, interfaceTypeParametersSize)___                if (painlessMethod == null) {_                    painlessMethod = painlessLookup.lookupPainlessMethod(typeName, false, methodName,_                            captured ? interfaceTypeParametersSize : interfaceTypeParametersSize - 1)___                    if (painlessMethod == null) {_                        throw new IllegalArgumentException(_                                "function reference " + "[" + typeName + "::" + methodName + "/" + interfaceTypeParametersSize + "] " +_                                "matching [" + targetClassName + ", " + interfaceMethodName + "/" + interfaceTypeParametersSize + "] " +_                                "not found")__                    }_                } else if (captured) {_                    throw new IllegalStateException("internal error")__                }__                delegateClassName = painlessMethod.javaMethod.getDeclaringClass().getName()__                isDelegateInterface = painlessMethod.javaMethod.getDeclaringClass().isInterface()___                if (Modifier.isStatic(painlessMethod.javaMethod.getModifiers())) {_                    delegateInvokeType = H_INVOKESTATIC__                } else if (isDelegateInterface) {_                    delegateInvokeType = H_INVOKEINTERFACE__                } else {_                    delegateInvokeType = H_INVOKEVIRTUAL__                }__                delegateMethodName = painlessMethod.javaMethod.getName()__                delegateMethodType = painlessMethod.methodType___                delegateMethodReturnType = painlessMethod.returnType___                if (delegateMethodType.parameterList().size() > painlessMethod.typeParameters.size()) {_                    delegateMethodParameters = new ArrayList<>(painlessMethod.typeParameters)__                    delegateMethodParameters.add(0, delegateMethodType.parameterType(0))__                } else {_                    delegateMethodParameters = painlessMethod.typeParameters__                }_            }__            if (location != null) {_                for (int typeParameter = 0_ typeParameter < interfaceTypeParametersSize_ ++typeParameter) {_                    Class<?> from = interfaceMethod.typeParameters.get(typeParameter)__                    Class<?> to = delegateMethodParameters.get(numberOfCaptures + typeParameter)__                    AnalyzerCaster.getLegalCast(location, from, to, false, true)__                }__                if (interfaceMethod.returnType != void.class) {_                    AnalyzerCaster.getLegalCast(location, delegateMethodReturnType, interfaceMethod.returnType, false, true)__                }_            }__            MethodType factoryMethodType = MethodType.methodType(targetClass,_                    delegateMethodType.dropParameterTypes(numberOfCaptures, delegateMethodType.parameterCount()))__            delegateMethodType = delegateMethodType.dropParameterTypes(0, numberOfCaptures)___            return new FunctionRef(interfaceMethodName, interfaceMethodType,_                    delegateClassName, isDelegateInterface, delegateInvokeType, delegateMethodName, delegateMethodType,_                    factoryMethodType_            )__        } catch (IllegalArgumentException iae) {_            if (location != null) {_                throw location.createError(iae)__            }__            throw iae__        }_    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,local,methods,user,defined,and,synthetic,methods,generated,directly,on,the,script,class,param,location,the,character,number,within,the,script,at,compile,time,param,target,class,functional,interface,type,to,implement,param,type,name,the,left,hand,side,of,a,method,reference,expression,param,method,name,the,right,hand,side,of,a,method,reference,expression,param,number,of,captures,number,of,captured,arguments;public,static,function,ref,create,painless,lookup,painless,lookup,map,string,local,method,local,methods,location,location,class,target,class,string,type,name,string,method,name,int,number,of,captures,objects,require,non,null,painless,lookup,objects,require,non,null,target,class,objects,require,non,null,type,name,objects,require,non,null,method,name,string,target,class,name,painless,lookup,utility,type,to,canonical,type,name,target,class,painless,method,interface,method,try,interface,method,painless,lookup,lookup,functional,interface,painless,method,target,class,if,interface,method,null,throw,new,illegal,argument,exception,cannot,convert,function,reference,type,name,method,name,to,a,non,functional,interface,target,class,name,string,interface,method,name,interface,method,java,method,get,name,method,type,interface,method,type,interface,method,method,type,drop,parameter,types,0,1,string,delegate,class,name,boolean,is,delegate,interface,int,delegate,invoke,type,string,delegate,method,name,method,type,delegate,method,type,class,delegate,method,return,type,list,class,delegate,method,parameters,int,interface,type,parameters,size,interface,method,type,parameters,size,if,this,equals,type,name,objects,require,non,null,local,methods,if,number,of,captures,0,throw,new,illegal,state,exception,internal,error,string,local,method,key,locals,build,local,method,key,method,name,number,of,captures,interface,type,parameters,size,local,method,local,method,local,methods,get,local,method,key,if,local,method,null,throw,new,illegal,argument,exception,function,reference,this,local,method,key,matching,target,class,name,interface,method,name,interface,type,parameters,size,not,found,local,method,key,contains,due,to,an,incorrect,number,of,arguments,delegate,class,name,is,delegate,interface,false,delegate,invoke,type,delegate,method,name,local,method,name,delegate,method,type,local,method,method,type,delegate,method,return,type,local,method,return,type,delegate,method,parameters,local,method,type,parameters,else,if,new,equals,method,name,if,number,of,captures,0,throw,new,illegal,state,exception,internal,error,painless,constructor,painless,constructor,painless,lookup,lookup,painless,constructor,type,name,interface,type,parameters,size,if,painless,constructor,null,throw,new,illegal,argument,exception,function,reference,type,name,new,interface,type,parameters,size,matching,target,class,name,interface,method,name,interface,type,parameters,size,not,found,delegate,class,name,painless,constructor,java,constructor,get,declaring,class,get,name,is,delegate,interface,false,delegate,invoke,type,delegate,method,name,painless,lookup,utility,delegate,method,type,painless,constructor,method,type,delegate,method,return,type,painless,constructor,java,constructor,get,declaring,class,delegate,method,parameters,painless,constructor,type,parameters,else,if,number,of,captures,0,number,of,captures,1,throw,new,illegal,state,exception,internal,error,boolean,captured,number,of,captures,1,painless,method,painless,method,painless,lookup,lookup,painless,method,type,name,true,method,name,interface,type,parameters,size,if,painless,method,null,painless,method,painless,lookup,lookup,painless,method,type,name,false,method,name,captured,interface,type,parameters,size,interface,type,parameters,size,1,if,painless,method,null,throw,new,illegal,argument,exception,function,reference,type,name,method,name,interface,type,parameters,size,matching,target,class,name,interface,method,name,interface,type,parameters,size,not,found,else,if,captured,throw,new,illegal,state,exception,internal,error,delegate,class,name,painless,method,java,method,get,declaring,class,get,name,is,delegate,interface,painless,method,java,method,get,declaring,class,is,interface,if,modifier,is,static,painless,method,java,method,get,modifiers,delegate,invoke,type,else,if,is,delegate,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,painless,method,java,method,get,name,delegate,method,type,painless,method,method,type,delegate,method,return,type,painless,method,return,type,if,delegate,method,type,parameter,list,size,painless,method,type,parameters,size,delegate,method,parameters,new,array,list,painless,method,type,parameters,delegate,method,parameters,add,0,delegate,method,type,parameter,type,0,else,delegate,method,parameters,painless,method,type,parameters,if,location,null,for,int,type,parameter,0,type,parameter,interface,type,parameters,size,type,parameter,class,from,interface,method,type,parameters,get,type,parameter,class,to,delegate,method,parameters,get,number,of,captures,type,parameter,analyzer,caster,get,legal,cast,location,from,to,false,true,if,interface,method,return,type,void,class,analyzer,caster,get,legal,cast,location,delegate,method,return,type,interface,method,return,type,false,true,method,type,factory,method,type,method,type,method,type,target,class,delegate,method,type,drop,parameter,types,number,of,captures,delegate,method,type,parameter,count,delegate,method,type,delegate,method,type,drop,parameter,types,0,number,of,captures,return,new,function,ref,interface,method,name,interface,method,type,delegate,class,name,is,delegate,interface,delegate,invoke,type,delegate,method,name,delegate,method,type,factory,method,type,catch,illegal,argument,exception,iae,if,location,null,throw,location,create,error,iae,throw,iae
FunctionRef -> public FunctionRef(Class<?> expected, Method interfaceMethod, Method delegateMethod, int numCaptures);1524684173;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, Method interfaceMethod, Method delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.getMethodType()___        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        _        if (delegateMethod.owner == null) {_            delegateClassName = CLASS_NAME__        } else if (delegateMethod.augmentation != null) {_            delegateClassName = delegateMethod.augmentation.getName()__        } else {_            delegateClassName = delegateMethod.owner.clazz.getName()__        }__        if ("<init>".equals(delegateMethod.name)) {_            delegateInvokeType = H_NEWINVOKESPECIAL__        } else if (Modifier.isStatic(delegateMethod.modifiers)) {_            delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.owner.clazz.isInterface()) {_            delegateInvokeType = H_INVOKEINTERFACE__        } else {_            delegateInvokeType = H_INVOKEVIRTUAL__        }__        delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateMethod = delegateMethod___        factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,method,interface,method,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,get,method,type,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,if,delegate,method,owner,null,delegate,class,name,else,if,delegate,method,augmentation,null,delegate,class,name,delegate,method,augmentation,get,name,else,delegate,class,name,delegate,method,owner,clazz,get,name,if,init,equals,delegate,method,name,delegate,invoke,type,else,if,modifier,is,static,delegate,method,modifiers,delegate,invoke,type,else,if,delegate,method,owner,clazz,is,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,method,delegate,method,factory,descriptor,factory,method,type,to,method,descriptor,string,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(Class<?> expected, Method interfaceMethod, Method delegateMethod, int numCaptures);1529076503;Creates a new FunctionRef (already resolved)_@param expected functional interface type to implement_@param interfaceMethod functional interface method_@param delegateMethod implementation method_@param numCaptures number of captured arguments;public FunctionRef(Class<?> expected, Method interfaceMethod, Method delegateMethod, int numCaptures) {_        MethodType delegateMethodType = delegateMethod.getMethodType()___        interfaceMethodName = interfaceMethod.name__        factoryMethodType = MethodType.methodType(expected,_                delegateMethodType.dropParameterTypes(numCaptures, delegateMethodType.parameterCount()))__        interfaceMethodType = interfaceMethod.getMethodType().dropParameterTypes(0, 1)___        _        if (delegateMethod.owner == null) {_            delegateClassName = CLASS_NAME__            isDelegateInterface = false__        } else if (delegateMethod.augmentation != null) {_            delegateClassName = delegateMethod.augmentation.getName()__            isDelegateInterface = delegateMethod.augmentation.isInterface()__        } else {_            delegateClassName = delegateMethod.owner.clazz.getName()__            isDelegateInterface = delegateMethod.owner.clazz.isInterface()__        }__        if ("<init>".equals(delegateMethod.name)) {_            delegateInvokeType = H_NEWINVOKESPECIAL__        } else if (Modifier.isStatic(delegateMethod.modifiers)) {_            delegateInvokeType = H_INVOKESTATIC__        } else if (delegateMethod.owner.clazz.isInterface()) {_            delegateInvokeType = H_INVOKEINTERFACE__        } else {_            delegateInvokeType = H_INVOKEVIRTUAL__        }__        delegateMethodName = delegateMethod.name__        this.delegateMethodType = delegateMethodType.dropParameterTypes(0, numCaptures)___        this.interfaceMethod = interfaceMethod__        this.delegateMethod = delegateMethod___        factoryDescriptor = factoryMethodType.toMethodDescriptorString()__        interfaceType = Type.getMethodType(interfaceMethodType.toMethodDescriptorString())__        delegateType = Type.getMethodType(this.delegateMethodType.toMethodDescriptorString())__    };creates,a,new,function,ref,already,resolved,param,expected,functional,interface,type,to,implement,param,interface,method,functional,interface,method,param,delegate,method,implementation,method,param,num,captures,number,of,captured,arguments;public,function,ref,class,expected,method,interface,method,method,delegate,method,int,num,captures,method,type,delegate,method,type,delegate,method,get,method,type,interface,method,name,interface,method,name,factory,method,type,method,type,method,type,expected,delegate,method,type,drop,parameter,types,num,captures,delegate,method,type,parameter,count,interface,method,type,interface,method,get,method,type,drop,parameter,types,0,1,if,delegate,method,owner,null,delegate,class,name,is,delegate,interface,false,else,if,delegate,method,augmentation,null,delegate,class,name,delegate,method,augmentation,get,name,is,delegate,interface,delegate,method,augmentation,is,interface,else,delegate,class,name,delegate,method,owner,clazz,get,name,is,delegate,interface,delegate,method,owner,clazz,is,interface,if,init,equals,delegate,method,name,delegate,invoke,type,else,if,modifier,is,static,delegate,method,modifiers,delegate,invoke,type,else,if,delegate,method,owner,clazz,is,interface,delegate,invoke,type,else,delegate,invoke,type,delegate,method,name,delegate,method,name,this,delegate,method,type,delegate,method,type,drop,parameter,types,0,num,captures,this,interface,method,interface,method,this,delegate,method,delegate,method,factory,descriptor,factory,method,type,to,method,descriptor,string,interface,type,type,get,method,type,interface,method,type,to,method,descriptor,string,delegate,type,type,get,method,type,this,delegate,method,type,to,method,descriptor,string
FunctionRef -> public FunctionRef(PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures);1531179852;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public FunctionRef(PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures) {_        this(expected, painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod,_                lookup(painlessLookup, expected, type, call, numCaptures > 0), numCaptures)__    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,function,ref,painless,lookup,painless,lookup,class,expected,string,type,string,call,int,num,captures,this,expected,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,lookup,painless,lookup,expected,type,call,num,captures,0,num,captures
FunctionRef -> public FunctionRef(PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures);1531910483;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public FunctionRef(PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures) {_        this(expected, painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod,_                lookup(painlessLookup, expected, type, call, numCaptures > 0), numCaptures)__    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,function,ref,painless,lookup,painless,lookup,class,expected,string,type,string,call,int,num,captures,this,expected,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,lookup,painless,lookup,expected,type,call,num,captures,0,num,captures
FunctionRef -> public FunctionRef(PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures);1532069817;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public FunctionRef(PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures) {_        this(expected, painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod,_                lookup(painlessLookup, expected, type, call, numCaptures > 0), numCaptures)__    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,function,ref,painless,lookup,painless,lookup,class,expected,string,type,string,call,int,num,captures,this,expected,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,lookup,painless,lookup,expected,type,call,num,captures,0,num,captures
FunctionRef -> public FunctionRef(PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures);1532947734;Creates a new FunctionRef, which will resolve {@code type::call} from the whitelist._@param painlessLookup the whitelist against which this script is being compiled_@param expected functional interface type to implement._@param type the left hand side of a method reference expression_@param call the right hand side of a method reference expression_@param numCaptures number of captured arguments;public FunctionRef(PainlessLookup painlessLookup, Class<?> expected, String type, String call, int numCaptures) {_        this(expected, painlessLookup.getPainlessStructFromJavaClass(expected).functionalMethod,_                lookup(painlessLookup, expected, type, call, numCaptures > 0), numCaptures)__    };creates,a,new,function,ref,which,will,resolve,code,type,call,from,the,whitelist,param,painless,lookup,the,whitelist,against,which,this,script,is,being,compiled,param,expected,functional,interface,type,to,implement,param,type,the,left,hand,side,of,a,method,reference,expression,param,call,the,right,hand,side,of,a,method,reference,expression,param,num,captures,number,of,captured,arguments;public,function,ref,painless,lookup,painless,lookup,class,expected,string,type,string,call,int,num,captures,this,expected,painless,lookup,get,painless,struct,from,java,class,expected,functional,method,lookup,painless,lookup,expected,type,call,num,captures,0,num,captures
