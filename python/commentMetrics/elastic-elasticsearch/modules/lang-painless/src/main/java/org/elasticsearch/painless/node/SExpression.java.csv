commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     expression.extractVariables(variables). }
false;;1;23;;@Override void analyze(Locals locals) {     Class<?> rtnType = locals.getReturnType().     boolean isVoid = rtnType == void.class.     expression.read = lastSource && !isVoid.     expression.analyze(locals).     if (!lastSource && !expression.statement) {         throw createError(new IllegalArgumentException("Not a statement.")).     }     boolean rtn = lastSource && !isVoid && expression.actual != void.class.     expression.expected = rtn ? rtnType : expression.actual.     expression.internal = rtn.     expression = expression.cast(locals).     methodEscape = rtn.     loopEscape = rtn.     allEscape = rtn.     statementCount = 1. }
false;;2;11;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     expression.write(writer, globals).     if (methodEscape) {         writer.returnValue().     } else {         writer.writePop(MethodWriter.getType(expression.expected).getSize()).     } }
false;public;0;4;;@Override public String toString() {     return singleLineToString(expression). }
