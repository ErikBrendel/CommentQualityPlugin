# id;timestamp;commentText;codeText;commentWords;codeWords
Locals -> public boolean hasVariable(String name);1524684173;Checks if a variable exists or not, in this scope or any parents.;public boolean hasVariable(String name) {_        Variable variable = lookupVariable(null, name)__        if (variable != null) {_            return true__        }_        if (parent != null) {_            return parent.hasVariable(name)__        }_        return false__    };checks,if,a,variable,exists,or,not,in,this,scope,or,any,parents;public,boolean,has,variable,string,name,variable,variable,lookup,variable,null,name,if,variable,null,return,true,if,parent,null,return,parent,has,variable,name,return,false
Locals -> public boolean hasVariable(String name);1531179852;Checks if a variable exists or not, in this scope or any parents.;public boolean hasVariable(String name) {_        Variable variable = lookupVariable(null, name)__        if (variable != null) {_            return true__        }_        if (parent != null) {_            return parent.hasVariable(name)__        }_        return false__    };checks,if,a,variable,exists,or,not,in,this,scope,or,any,parents;public,boolean,has,variable,string,name,variable,variable,lookup,variable,null,name,if,variable,null,return,true,if,parent,null,return,parent,has,variable,name,return,false
Locals -> public boolean hasVariable(String name);1531910483;Checks if a variable exists or not, in this scope or any parents.;public boolean hasVariable(String name) {_        Variable variable = lookupVariable(null, name)__        if (variable != null) {_            return true__        }_        if (parent != null) {_            return parent.hasVariable(name)__        }_        return false__    };checks,if,a,variable,exists,or,not,in,this,scope,or,any,parents;public,boolean,has,variable,string,name,variable,variable,lookup,variable,null,name,if,variable,null,return,true,if,parent,null,return,parent,has,variable,name,return,false
Locals -> public boolean hasVariable(String name);1532069817;Checks if a variable exists or not, in this scope or any parents.;public boolean hasVariable(String name) {_        Variable variable = lookupVariable(null, name)__        if (variable != null) {_            return true__        }_        if (parent != null) {_            return parent.hasVariable(name)__        }_        return false__    };checks,if,a,variable,exists,or,not,in,this,scope,or,any,parents;public,boolean,has,variable,string,name,variable,variable,lookup,variable,null,name,if,variable,null,return,true,if,parent,null,return,parent,has,variable,name,return,false
Locals -> public boolean hasVariable(String name);1533143718;Checks if a variable exists or not, in this scope or any parents.;public boolean hasVariable(String name) {_        Variable variable = lookupVariable(null, name)__        if (variable != null) {_            return true__        }_        if (parent != null) {_            return parent.hasVariable(name)__        }_        return false__    };checks,if,a,variable,exists,or,not,in,this,scope,or,any,parents;public,boolean,has,variable,string,name,variable,variable,lookup,variable,null,name,if,variable,null,return,true,if,parent,null,return,parent,has,variable,name,return,false
Locals -> public boolean hasVariable(String name);1533547893;Checks if a variable exists or not, in this scope or any parents.;public boolean hasVariable(String name) {_        Variable variable = lookupVariable(null, name)__        if (variable != null) {_            return true__        }_        if (parent != null) {_            return parent.hasVariable(name)__        }_        return false__    };checks,if,a,variable,exists,or,not,in,this,scope,or,any,parents;public,boolean,has,variable,string,name,variable,variable,lookup,variable,null,name,if,variable,null,return,true,if,parent,null,return,parent,has,variable,name,return,false
Locals -> public boolean hasVariable(String name);1538067637;Checks if a variable exists or not, in this scope or any parents.;public boolean hasVariable(String name) {_        Variable variable = lookupVariable(null, name)__        if (variable != null) {_            return true__        }_        if (parent != null) {_            return parent.hasVariable(name)__        }_        return false__    };checks,if,a,variable,exists,or,not,in,this,scope,or,any,parents;public,boolean,has,variable,string,name,variable,variable,lookup,variable,null,name,if,variable,null,return,true,if,parent,null,return,parent,has,variable,name,return,false
Locals -> public PainlessLookup getPainlessLookup();1531179852;Whitelist against which this script is being compiled.;public PainlessLookup getPainlessLookup() {_        return painlessLookup__    };whitelist,against,which,this,script,is,being,compiled;public,painless,lookup,get,painless,lookup,return,painless,lookup
Locals -> public PainlessLookup getPainlessLookup();1531910483;Whitelist against which this script is being compiled.;public PainlessLookup getPainlessLookup() {_        return painlessLookup__    };whitelist,against,which,this,script,is,being,compiled;public,painless,lookup,get,painless,lookup,return,painless,lookup
Locals -> public PainlessLookup getPainlessLookup();1532069817;Whitelist against which this script is being compiled.;public PainlessLookup getPainlessLookup() {_        return painlessLookup__    };whitelist,against,which,this,script,is,being,compiled;public,painless,lookup,get,painless,lookup,return,painless,lookup
Locals -> public PainlessLookup getPainlessLookup();1533143718;Whitelist against which this script is being compiled.;public PainlessLookup getPainlessLookup() {_        return painlessLookup__    };whitelist,against,which,this,script,is,being,compiled;public,painless,lookup,get,painless,lookup,return,painless,lookup
Locals -> public PainlessLookup getPainlessLookup();1533547893;Whitelist against which this script is being compiled.;public PainlessLookup getPainlessLookup() {_        return painlessLookup__    };whitelist,against,which,this,script,is,being,compiled;public,painless,lookup,get,painless,lookup,return,painless,lookup
Locals -> public PainlessLookup getPainlessLookup();1538067637;Whitelist against which this script is being compiled.;public PainlessLookup getPainlessLookup() {_        return painlessLookup__    };whitelist,against,which,this,script,is,being,compiled;public,painless,lookup,get,painless,lookup,return,painless,lookup
Locals -> public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter);1524684173;Creates a new function scope inside the current scope;public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.definition, returnType, KEYWORDS)__        for (Parameter parameter : parameters) {_            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,function,scope,inside,the,current,scope;public,static,locals,new,function,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,definition,return,type,keywords,for,parameter,parameter,parameters,locals,add,variable,parameter,location,parameter,clazz,parameter,name,false,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter);1531179852;Creates a new function scope inside the current scope;public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        for (Parameter parameter : parameters) {_            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,function,scope,inside,the,current,scope;public,static,locals,new,function,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,for,parameter,parameter,parameters,locals,add,variable,parameter,location,parameter,clazz,parameter,name,false,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter);1531910483;Creates a new function scope inside the current scope;public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        for (Parameter parameter : parameters) {_            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,function,scope,inside,the,current,scope;public,static,locals,new,function,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,for,parameter,parameter,parameters,locals,add,variable,parameter,location,parameter,clazz,parameter,name,false,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter);1532069817;Creates a new function scope inside the current scope;public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        for (Parameter parameter : parameters) {_            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,function,scope,inside,the,current,scope;public,static,locals,new,function,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,for,parameter,parameter,parameters,locals,add,variable,parameter,location,parameter,clazz,parameter,name,false,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter);1533143718;Creates a new function scope inside the current scope;public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        for (Parameter parameter : parameters) {_            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,function,scope,inside,the,current,scope;public,static,locals,new,function,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,for,parameter,parameter,parameters,locals,add,variable,parameter,location,parameter,clazz,parameter,name,false,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter);1533547893;Creates a new function scope inside the current scope;public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        locals.methods = programScope.methods__        for (Parameter parameter : parameters) {_            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,function,scope,inside,the,current,scope;public,static,locals,new,function,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,locals,methods,program,scope,methods,for,parameter,parameter,parameters,locals,add,variable,parameter,location,parameter,clazz,parameter,name,false,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter);1538067637;Creates a new function scope inside the current scope;public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        locals.methods = programScope.methods__        for (Parameter parameter : parameters) {_            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,function,scope,inside,the,current,scope;public,static,locals,new,function,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,locals,methods,program,scope,methods,for,parameter,parameter,parameters,locals,add,variable,parameter,location,parameter,clazz,parameter,name,false,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly);1524684173;Defines a variable at this scope internally.;private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {_        if (variables == null) {_            variables = new HashMap<>()__        }_        Variable variable = new Variable(location, name, type, getNextSlot(), readonly)__        variables.put(name, variable)_ _        nextSlotNumber += MethodWriter.getType(type).getSize()__        return variable__    };defines,a,variable,at,this,scope,internally;private,variable,define,variable,location,location,class,type,string,name,boolean,readonly,if,variables,null,variables,new,hash,map,variable,variable,new,variable,location,name,type,get,next,slot,readonly,variables,put,name,variable,next,slot,number,method,writer,get,type,type,get,size,return,variable
Locals -> private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly);1531179852;Defines a variable at this scope internally.;private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {_        if (variables == null) {_            variables = new HashMap<>()__        }_        Variable variable = new Variable(location, name, type, getNextSlot(), readonly)__        variables.put(name, variable)_ _        nextSlotNumber += MethodWriter.getType(type).getSize()__        return variable__    };defines,a,variable,at,this,scope,internally;private,variable,define,variable,location,location,class,type,string,name,boolean,readonly,if,variables,null,variables,new,hash,map,variable,variable,new,variable,location,name,type,get,next,slot,readonly,variables,put,name,variable,next,slot,number,method,writer,get,type,type,get,size,return,variable
Locals -> private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly);1531910483;Defines a variable at this scope internally.;private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {_        if (variables == null) {_            variables = new HashMap<>()__        }_        Variable variable = new Variable(location, name, type, getNextSlot(), readonly)__        variables.put(name, variable)_ _        nextSlotNumber += MethodWriter.getType(type).getSize()__        return variable__    };defines,a,variable,at,this,scope,internally;private,variable,define,variable,location,location,class,type,string,name,boolean,readonly,if,variables,null,variables,new,hash,map,variable,variable,new,variable,location,name,type,get,next,slot,readonly,variables,put,name,variable,next,slot,number,method,writer,get,type,type,get,size,return,variable
Locals -> private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly);1532069817;Defines a variable at this scope internally.;private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {_        if (variables == null) {_            variables = new HashMap<>()__        }_        Variable variable = new Variable(location, name, type, getNextSlot(), readonly)__        variables.put(name, variable)_ _        nextSlotNumber += MethodWriter.getType(type).getSize()__        return variable__    };defines,a,variable,at,this,scope,internally;private,variable,define,variable,location,location,class,type,string,name,boolean,readonly,if,variables,null,variables,new,hash,map,variable,variable,new,variable,location,name,type,get,next,slot,readonly,variables,put,name,variable,next,slot,number,method,writer,get,type,type,get,size,return,variable
Locals -> private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly);1533143718;Defines a variable at this scope internally.;private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {_        if (variables == null) {_            variables = new HashMap<>()__        }_        Variable variable = new Variable(location, name, type, getNextSlot(), readonly)__        variables.put(name, variable)_ _        nextSlotNumber += MethodWriter.getType(type).getSize()__        return variable__    };defines,a,variable,at,this,scope,internally;private,variable,define,variable,location,location,class,type,string,name,boolean,readonly,if,variables,null,variables,new,hash,map,variable,variable,new,variable,location,name,type,get,next,slot,readonly,variables,put,name,variable,next,slot,number,method,writer,get,type,type,get,size,return,variable
Locals -> private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly);1533547893;Defines a variable at this scope internally.;private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {_        if (variables == null) {_            variables = new HashMap<>()__        }_        Variable variable = new Variable(location, name, type, getNextSlot(), readonly)__        variables.put(name, variable)_ _        nextSlotNumber += MethodWriter.getType(type).getSize()__        return variable__    };defines,a,variable,at,this,scope,internally;private,variable,define,variable,location,location,class,type,string,name,boolean,readonly,if,variables,null,variables,new,hash,map,variable,variable,new,variable,location,name,type,get,next,slot,readonly,variables,put,name,variable,next,slot,number,method,writer,get,type,type,get,size,return,variable
Locals -> private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly);1538067637;Defines a variable at this scope internally.;private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {_        if (variables == null) {_            variables = new HashMap<>()__        }_        Variable variable = new Variable(location, name, type, getNextSlot(), readonly)__        variables.put(name, variable)_ _        nextSlotNumber += MethodWriter.getType(type).getSize()__        return variable__    };defines,a,variable,at,this,scope,internally;private,variable,define,variable,location,location,class,type,string,name,boolean,readonly,if,variables,null,variables,new,hash,map,variable,variable,new,variable,location,name,type,get,next,slot,readonly,variables,put,name,variable,next,slot,number,method,writer,get,type,type,get,size,return,variable
Locals -> private Variable lookupVariable(Location location, String name);1524684173;Looks up a variable at this scope only. Returns null if the variable does not exist.;private Variable lookupVariable(Location location, String name) {_        if (variables == null) {_            return null__        }_        return variables.get(name)__    };looks,up,a,variable,at,this,scope,only,returns,null,if,the,variable,does,not,exist;private,variable,lookup,variable,location,location,string,name,if,variables,null,return,null,return,variables,get,name
Locals -> private Variable lookupVariable(Location location, String name);1531179852;Looks up a variable at this scope only. Returns null if the variable does not exist.;private Variable lookupVariable(Location location, String name) {_        if (variables == null) {_            return null__        }_        return variables.get(name)__    };looks,up,a,variable,at,this,scope,only,returns,null,if,the,variable,does,not,exist;private,variable,lookup,variable,location,location,string,name,if,variables,null,return,null,return,variables,get,name
Locals -> private Variable lookupVariable(Location location, String name);1531910483;Looks up a variable at this scope only. Returns null if the variable does not exist.;private Variable lookupVariable(Location location, String name) {_        if (variables == null) {_            return null__        }_        return variables.get(name)__    };looks,up,a,variable,at,this,scope,only,returns,null,if,the,variable,does,not,exist;private,variable,lookup,variable,location,location,string,name,if,variables,null,return,null,return,variables,get,name
Locals -> private Variable lookupVariable(Location location, String name);1532069817;Looks up a variable at this scope only. Returns null if the variable does not exist.;private Variable lookupVariable(Location location, String name) {_        if (variables == null) {_            return null__        }_        return variables.get(name)__    };looks,up,a,variable,at,this,scope,only,returns,null,if,the,variable,does,not,exist;private,variable,lookup,variable,location,location,string,name,if,variables,null,return,null,return,variables,get,name
Locals -> private Variable lookupVariable(Location location, String name);1533143718;Looks up a variable at this scope only. Returns null if the variable does not exist.;private Variable lookupVariable(Location location, String name) {_        if (variables == null) {_            return null__        }_        return variables.get(name)__    };looks,up,a,variable,at,this,scope,only,returns,null,if,the,variable,does,not,exist;private,variable,lookup,variable,location,location,string,name,if,variables,null,return,null,return,variables,get,name
Locals -> private Variable lookupVariable(Location location, String name);1533547893;Looks up a variable at this scope only. Returns null if the variable does not exist.;private Variable lookupVariable(Location location, String name) {_        if (variables == null) {_            return null__        }_        return variables.get(name)__    };looks,up,a,variable,at,this,scope,only,returns,null,if,the,variable,does,not,exist;private,variable,lookup,variable,location,location,string,name,if,variables,null,return,null,return,variables,get,name
Locals -> private Variable lookupVariable(Location location, String name);1538067637;Looks up a variable at this scope only. Returns null if the variable does not exist.;private Variable lookupVariable(Location location, String name) {_        if (variables == null) {_            return null__        }_        return variables.get(name)__    };looks,up,a,variable,at,this,scope,only,returns,null,if,the,variable,does,not,exist;private,variable,lookup,variable,location,location,string,name,if,variables,null,return,null,return,variables,get,name
Locals -> public LocalMethod getMethod(String methodName, int methodArity);1533547893;Looks up a method. Returns null if the method does not exist.;public LocalMethod getMethod(String methodName, int methodArity) {_        return methods.get(buildLocalMethodKey(methodName, methodArity))__    };looks,up,a,method,returns,null,if,the,method,does,not,exist;public,local,method,get,method,string,method,name,int,method,arity,return,methods,get,build,local,method,key,method,name,method,arity
Locals -> public LocalMethod getMethod(String methodName, int methodArity);1538067637;Looks up a method. Returns null if the method does not exist.;public LocalMethod getMethod(String methodName, int methodArity) {_        return methods.get(buildLocalMethodKey(methodName, methodArity))__    };looks,up,a,method,returns,null,if,the,method,does,not,exist;public,local,method,get,method,string,method,name,int,method,arity,return,methods,get,build,local,method,key,method,name,method,arity
Locals -> public Variable getVariable(Location location, String name);1524684173;Accesses a variable. This will throw IAE if the variable does not exist;public Variable getVariable(Location location, String name) {_        Variable variable = lookupVariable(location, name)__        if (variable != null) {_            return variable__        }_        if (parent != null) {_            return parent.getVariable(location, name)__        }_        throw location.createError(new IllegalArgumentException("Variable [" + name + "] is not defined."))__    };accesses,a,variable,this,will,throw,iae,if,the,variable,does,not,exist;public,variable,get,variable,location,location,string,name,variable,variable,lookup,variable,location,name,if,variable,null,return,variable,if,parent,null,return,parent,get,variable,location,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,not,defined
Locals -> public Variable getVariable(Location location, String name);1531179852;Accesses a variable. This will throw IAE if the variable does not exist;public Variable getVariable(Location location, String name) {_        Variable variable = lookupVariable(location, name)__        if (variable != null) {_            return variable__        }_        if (parent != null) {_            return parent.getVariable(location, name)__        }_        throw location.createError(new IllegalArgumentException("Variable [" + name + "] is not defined."))__    };accesses,a,variable,this,will,throw,iae,if,the,variable,does,not,exist;public,variable,get,variable,location,location,string,name,variable,variable,lookup,variable,location,name,if,variable,null,return,variable,if,parent,null,return,parent,get,variable,location,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,not,defined
Locals -> public Variable getVariable(Location location, String name);1531910483;Accesses a variable. This will throw IAE if the variable does not exist;public Variable getVariable(Location location, String name) {_        Variable variable = lookupVariable(location, name)__        if (variable != null) {_            return variable__        }_        if (parent != null) {_            return parent.getVariable(location, name)__        }_        throw location.createError(new IllegalArgumentException("Variable [" + name + "] is not defined."))__    };accesses,a,variable,this,will,throw,iae,if,the,variable,does,not,exist;public,variable,get,variable,location,location,string,name,variable,variable,lookup,variable,location,name,if,variable,null,return,variable,if,parent,null,return,parent,get,variable,location,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,not,defined
Locals -> public Variable getVariable(Location location, String name);1532069817;Accesses a variable. This will throw IAE if the variable does not exist;public Variable getVariable(Location location, String name) {_        Variable variable = lookupVariable(location, name)__        if (variable != null) {_            return variable__        }_        if (parent != null) {_            return parent.getVariable(location, name)__        }_        throw location.createError(new IllegalArgumentException("Variable [" + name + "] is not defined."))__    };accesses,a,variable,this,will,throw,iae,if,the,variable,does,not,exist;public,variable,get,variable,location,location,string,name,variable,variable,lookup,variable,location,name,if,variable,null,return,variable,if,parent,null,return,parent,get,variable,location,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,not,defined
Locals -> public Variable getVariable(Location location, String name);1533143718;Accesses a variable. This will throw IAE if the variable does not exist;public Variable getVariable(Location location, String name) {_        Variable variable = lookupVariable(location, name)__        if (variable != null) {_            return variable__        }_        if (parent != null) {_            return parent.getVariable(location, name)__        }_        throw location.createError(new IllegalArgumentException("Variable [" + name + "] is not defined."))__    };accesses,a,variable,this,will,throw,iae,if,the,variable,does,not,exist;public,variable,get,variable,location,location,string,name,variable,variable,lookup,variable,location,name,if,variable,null,return,variable,if,parent,null,return,parent,get,variable,location,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,not,defined
Locals -> public Variable getVariable(Location location, String name);1533547893;Accesses a variable. This will throw IAE if the variable does not exist;public Variable getVariable(Location location, String name) {_        Variable variable = lookupVariable(location, name)__        if (variable != null) {_            return variable__        }_        if (parent != null) {_            return parent.getVariable(location, name)__        }_        throw location.createError(new IllegalArgumentException("Variable [" + name + "] is not defined."))__    };accesses,a,variable,this,will,throw,iae,if,the,variable,does,not,exist;public,variable,get,variable,location,location,string,name,variable,variable,lookup,variable,location,name,if,variable,null,return,variable,if,parent,null,return,parent,get,variable,location,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,not,defined
Locals -> public Variable getVariable(Location location, String name);1538067637;Accesses a variable. This will throw IAE if the variable does not exist;public Variable getVariable(Location location, String name) {_        Variable variable = lookupVariable(location, name)__        if (variable != null) {_            return variable__        }_        if (parent != null) {_            return parent.getVariable(location, name)__        }_        throw location.createError(new IllegalArgumentException("Variable [" + name + "] is not defined."))__    };accesses,a,variable,this,will,throw,iae,if,the,variable,does,not,exist;public,variable,get,variable,location,location,string,name,variable,variable,lookup,variable,location,name,if,variable,null,return,variable,if,parent,null,return,parent,get,variable,location,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,not,defined
Locals -> public Locals getProgramScope();1524684173;Returns the top-level program scope.;public Locals getProgramScope() {_        Locals locals = this__        while (locals.getParent() != null) {_            locals = locals.getParent()__        }_        return locals__    };returns,the,top,level,program,scope;public,locals,get,program,scope,locals,locals,this,while,locals,get,parent,null,locals,locals,get,parent,return,locals
Locals -> public Locals getProgramScope();1531179852;Returns the top-level program scope.;public Locals getProgramScope() {_        Locals locals = this__        while (locals.getParent() != null) {_            locals = locals.getParent()__        }_        return locals__    };returns,the,top,level,program,scope;public,locals,get,program,scope,locals,locals,this,while,locals,get,parent,null,locals,locals,get,parent,return,locals
Locals -> public Locals getProgramScope();1531910483;Returns the top-level program scope.;public Locals getProgramScope() {_        Locals locals = this__        while (locals.getParent() != null) {_            locals = locals.getParent()__        }_        return locals__    };returns,the,top,level,program,scope;public,locals,get,program,scope,locals,locals,this,while,locals,get,parent,null,locals,locals,get,parent,return,locals
Locals -> public Locals getProgramScope();1532069817;Returns the top-level program scope.;public Locals getProgramScope() {_        Locals locals = this__        while (locals.getParent() != null) {_            locals = locals.getParent()__        }_        return locals__    };returns,the,top,level,program,scope;public,locals,get,program,scope,locals,locals,this,while,locals,get,parent,null,locals,locals,get,parent,return,locals
Locals -> public Locals getProgramScope();1533143718;Returns the top-level program scope.;public Locals getProgramScope() {_        Locals locals = this__        while (locals.getParent() != null) {_            locals = locals.getParent()__        }_        return locals__    };returns,the,top,level,program,scope;public,locals,get,program,scope,locals,locals,this,while,locals,get,parent,null,locals,locals,get,parent,return,locals
Locals -> public Locals getProgramScope();1533547893;Returns the top-level program scope.;public Locals getProgramScope() {_        Locals locals = this__        while (locals.getParent() != null) {_            locals = locals.getParent()__        }_        return locals__    };returns,the,top,level,program,scope;public,locals,get,program,scope,locals,locals,this,while,locals,get,parent,null,locals,locals,get,parent,return,locals
Locals -> public Locals getProgramScope();1538067637;Returns the top-level program scope.;public Locals getProgramScope() {_        Locals locals = this__        while (locals.getParent() != null) {_            locals = locals.getParent()__        }_        return locals__    };returns,the,top,level,program,scope;public,locals,get,program,scope,locals,locals,this,while,locals,get,parent,null,locals,locals,get,parent,return,locals
Locals -> public static Locals newLocalScope(Locals currentScope);1524684173;Creates a new local variable scope (e.g. loop) inside the current scope;public static Locals newLocalScope(Locals currentScope) {_        return new Locals(currentScope)__    };creates,a,new,local,variable,scope,e,g,loop,inside,the,current,scope;public,static,locals,new,local,scope,locals,current,scope,return,new,locals,current,scope
Locals -> public static Locals newLocalScope(Locals currentScope);1531179852;Creates a new local variable scope (e.g. loop) inside the current scope;public static Locals newLocalScope(Locals currentScope) {_        return new Locals(currentScope)__    };creates,a,new,local,variable,scope,e,g,loop,inside,the,current,scope;public,static,locals,new,local,scope,locals,current,scope,return,new,locals,current,scope
Locals -> public static Locals newLocalScope(Locals currentScope);1531910483;Creates a new local variable scope (e.g. loop) inside the current scope;public static Locals newLocalScope(Locals currentScope) {_        return new Locals(currentScope)__    };creates,a,new,local,variable,scope,e,g,loop,inside,the,current,scope;public,static,locals,new,local,scope,locals,current,scope,return,new,locals,current,scope
Locals -> public static Locals newLocalScope(Locals currentScope);1532069817;Creates a new local variable scope (e.g. loop) inside the current scope;public static Locals newLocalScope(Locals currentScope) {_        return new Locals(currentScope)__    };creates,a,new,local,variable,scope,e,g,loop,inside,the,current,scope;public,static,locals,new,local,scope,locals,current,scope,return,new,locals,current,scope
Locals -> public static Locals newLocalScope(Locals currentScope);1533143718;Creates a new local variable scope (e.g. loop) inside the current scope;public static Locals newLocalScope(Locals currentScope) {_        return new Locals(currentScope)__    };creates,a,new,local,variable,scope,e,g,loop,inside,the,current,scope;public,static,locals,new,local,scope,locals,current,scope,return,new,locals,current,scope
Locals -> public static Locals newLocalScope(Locals currentScope);1533547893;Creates a new local variable scope (e.g. loop) inside the current scope;public static Locals newLocalScope(Locals currentScope) {_        Locals locals = new Locals(currentScope)__        locals.methods = currentScope.methods___        return locals__    };creates,a,new,local,variable,scope,e,g,loop,inside,the,current,scope;public,static,locals,new,local,scope,locals,current,scope,locals,locals,new,locals,current,scope,locals,methods,current,scope,methods,return,locals
Locals -> public static Locals newLocalScope(Locals currentScope);1538067637;Creates a new local variable scope (e.g. loop) inside the current scope;public static Locals newLocalScope(Locals currentScope) {_        Locals locals = new Locals(currentScope)__        locals.methods = currentScope.methods___        return locals__    };creates,a,new,local,variable,scope,e,g,loop,inside,the,current,scope;public,static,locals,new,local,scope,locals,current,scope,locals,locals,new,locals,current,scope,locals,methods,current,scope,methods,return,locals
Locals -> private Locals getParent();1524684173;Returns the parent scope;private Locals getParent() {_        return parent__    };returns,the,parent,scope;private,locals,get,parent,return,parent
Locals -> private Locals getParent();1531179852;Returns the parent scope;private Locals getParent() {_        return parent__    };returns,the,parent,scope;private,locals,get,parent,return,parent
Locals -> private Locals getParent();1531910483;Returns the parent scope;private Locals getParent() {_        return parent__    };returns,the,parent,scope;private,locals,get,parent,return,parent
Locals -> private Locals getParent();1532069817;Returns the parent scope;private Locals getParent() {_        return parent__    };returns,the,parent,scope;private,locals,get,parent,return,parent
Locals -> private Locals getParent();1533143718;Returns the parent scope;private Locals getParent() {_        return parent__    };returns,the,parent,scope;private,locals,get,parent,return,parent
Locals -> private Locals getParent();1533547893;Returns the parent scope;private Locals getParent() {_        return parent__    };returns,the,parent,scope;private,locals,get,parent,return,parent
Locals -> private Locals getParent();1538067637;Returns the parent scope;private Locals getParent() {_        return parent__    };returns,the,parent,scope;private,locals,get,parent,return,parent
Locals -> public static Locals newLambdaScope(Locals programScope, String name, Class<?> returnType, List<Parameter> parameters,                                         int captureCount, int maxLoopCounter);1533547893;Creates a new lambda scope inside the current scope_<p>_This is just like {@link #newFunctionScope}, except the captured parameters are made read-only.;public static Locals newLambdaScope(Locals programScope, String name, Class<?> returnType, List<Parameter> parameters,_                                        int captureCount, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        locals.methods = programScope.methods__        List<Class<?>> typeParameters = parameters.stream().map(parameter -> typeToJavaType(parameter.clazz)).collect(Collectors.toList())__        locals.methods.put(buildLocalMethodKey(name, parameters.size()), new LocalMethod(name, returnType, typeParameters,_                MethodType.methodType(typeToJavaType(returnType), typeParameters)))__        for (int i = 0_ i < parameters.size()_ i++) {_            Parameter parameter = parameters.get(i)__            _            _            _            _            boolean isCapture = true__            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,lambda,scope,inside,the,current,scope,p,this,is,just,like,link,new,function,scope,except,the,captured,parameters,are,made,read,only;public,static,locals,new,lambda,scope,locals,program,scope,string,name,class,return,type,list,parameter,parameters,int,capture,count,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,locals,methods,program,scope,methods,list,class,type,parameters,parameters,stream,map,parameter,type,to,java,type,parameter,clazz,collect,collectors,to,list,locals,methods,put,build,local,method,key,name,parameters,size,new,local,method,name,return,type,type,parameters,method,type,method,type,type,to,java,type,return,type,type,parameters,for,int,i,0,i,parameters,size,i,parameter,parameter,parameters,get,i,boolean,is,capture,true,locals,add,variable,parameter,location,parameter,clazz,parameter,name,is,capture,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newLambdaScope(Locals programScope, String name, Class<?> returnType, List<Parameter> parameters,                                         int captureCount, int maxLoopCounter);1538067637;Creates a new lambda scope inside the current scope_<p>_This is just like {@link #newFunctionScope}, except the captured parameters are made read-only.;public static Locals newLambdaScope(Locals programScope, String name, Class<?> returnType, List<Parameter> parameters,_                                        int captureCount, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        locals.methods = programScope.methods__        List<Class<?>> typeParameters = parameters.stream().map(parameter -> typeToJavaType(parameter.clazz)).collect(Collectors.toList())__        locals.methods.put(buildLocalMethodKey(name, parameters.size()), new LocalMethod(name, returnType, typeParameters,_                MethodType.methodType(typeToJavaType(returnType), typeParameters)))__        for (int i = 0_ i < parameters.size()_ i++) {_            Parameter parameter = parameters.get(i)__            _            _            _            _            boolean isCapture = true__            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,lambda,scope,inside,the,current,scope,p,this,is,just,like,link,new,function,scope,except,the,captured,parameters,are,made,read,only;public,static,locals,new,lambda,scope,locals,program,scope,string,name,class,return,type,list,parameter,parameters,int,capture,count,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,locals,methods,program,scope,methods,list,class,type,parameters,parameters,stream,map,parameter,type,to,java,type,parameter,clazz,collect,collectors,to,list,locals,methods,put,build,local,method,key,name,parameters,size,new,local,method,name,return,type,type,parameters,method,type,method,type,type,to,java,type,return,type,type,parameters,for,int,i,0,i,parameters,size,i,parameter,parameter,parameters,get,i,boolean,is,capture,true,locals,add,variable,parameter,location,parameter,clazz,parameter,name,is,capture,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static String buildLocalMethodKey(String methodName, int methodArity);1533143718;Constructs a local method key used to lookup local methods from a painless class.;public static String buildLocalMethodKey(String methodName, int methodArity) {_        return methodName + "/" + methodArity__    };constructs,a,local,method,key,used,to,lookup,local,methods,from,a,painless,class;public,static,string,build,local,method,key,string,method,name,int,method,arity,return,method,name,method,arity
Locals -> public static String buildLocalMethodKey(String methodName, int methodArity);1533547893;Constructs a local method key used to lookup local methods from a painless class.;public static String buildLocalMethodKey(String methodName, int methodArity) {_        return methodName + "/" + methodArity__    };constructs,a,local,method,key,used,to,lookup,local,methods,from,a,painless,class;public,static,string,build,local,method,key,string,method,name,int,method,arity,return,method,name,method,arity
Locals -> public static String buildLocalMethodKey(String methodName, int methodArity);1538067637;Constructs a local method key used to lookup local methods from a painless class.;public static String buildLocalMethodKey(String methodName, int methodArity) {_        return methodName + "/" + methodArity__    };constructs,a,local,method,key,used,to,lookup,local,methods,from,a,painless,class;public,static,string,build,local,method,key,string,method,name,int,method,arity,return,method,name,method,arity
Locals -> public Class<?> getReturnType();1524684173;Return type of this scope (e.g. int, if inside a function that returns int);public Class<?> getReturnType() {_        return returnType__    };return,type,of,this,scope,e,g,int,if,inside,a,function,that,returns,int;public,class,get,return,type,return,return,type
Locals -> public Class<?> getReturnType();1531179852;Return type of this scope (e.g. int, if inside a function that returns int);public Class<?> getReturnType() {_        return returnType__    };return,type,of,this,scope,e,g,int,if,inside,a,function,that,returns,int;public,class,get,return,type,return,return,type
Locals -> public Class<?> getReturnType();1531910483;Return type of this scope (e.g. int, if inside a function that returns int);public Class<?> getReturnType() {_        return returnType__    };return,type,of,this,scope,e,g,int,if,inside,a,function,that,returns,int;public,class,get,return,type,return,return,type
Locals -> public Class<?> getReturnType();1532069817;Return type of this scope (e.g. int, if inside a function that returns int);public Class<?> getReturnType() {_        return returnType__    };return,type,of,this,scope,e,g,int,if,inside,a,function,that,returns,int;public,class,get,return,type,return,return,type
Locals -> public Class<?> getReturnType();1533143718;Return type of this scope (e.g. int, if inside a function that returns int);public Class<?> getReturnType() {_        return returnType__    };return,type,of,this,scope,e,g,int,if,inside,a,function,that,returns,int;public,class,get,return,type,return,return,type
Locals -> public Class<?> getReturnType();1533547893;Return type of this scope (e.g. int, if inside a function that returns int);public Class<?> getReturnType() {_        return returnType__    };return,type,of,this,scope,e,g,int,if,inside,a,function,that,returns,int;public,class,get,return,type,return,return,type
Locals -> public Class<?> getReturnType();1538067637;Return type of this scope (e.g. int, if inside a function that returns int);public Class<?> getReturnType() {_        return returnType__    };return,type,of,this,scope,e,g,int,if,inside,a,function,that,returns,int;public,class,get,return,type,return,return,type
Locals -> private PainlessMethod lookupMethod(String key);1531910483;Looks up a method at this scope only. Returns null if the method does not exist.;private PainlessMethod lookupMethod(String key) {_        if (methods == null) {_            return null__        }_        return methods.get(key)__    };looks,up,a,method,at,this,scope,only,returns,null,if,the,method,does,not,exist;private,painless,method,lookup,method,string,key,if,methods,null,return,null,return,methods,get,key
Locals -> private PainlessMethod lookupMethod(String key);1532069817;Looks up a method at this scope only. Returns null if the method does not exist.;private PainlessMethod lookupMethod(String key) {_        if (methods == null) {_            return null__        }_        return methods.get(key)__    };looks,up,a,method,at,this,scope,only,returns,null,if,the,method,does,not,exist;private,painless,method,lookup,method,string,key,if,methods,null,return,null,return,methods,get,key
Locals -> private Locals(Locals parent);1524684173;Create a new Locals;private Locals(Locals parent) {_        this(parent, parent.definition, parent.returnType, parent.keywords)__    };create,a,new,locals;private,locals,locals,parent,this,parent,parent,definition,parent,return,type,parent,keywords
Locals -> private Locals(Locals parent);1531179852;Create a new Locals;private Locals(Locals parent) {_        this(parent, parent.painlessLookup, parent.returnType, parent.keywords)__    };create,a,new,locals;private,locals,locals,parent,this,parent,parent,painless,lookup,parent,return,type,parent,keywords
Locals -> private Locals(Locals parent);1531910483;Create a new Locals;private Locals(Locals parent) {_        this(parent, parent.painlessLookup, parent.returnType, parent.keywords)__    };create,a,new,locals;private,locals,locals,parent,this,parent,parent,painless,lookup,parent,return,type,parent,keywords
Locals -> private Locals(Locals parent);1532069817;Create a new Locals;private Locals(Locals parent) {_        this(parent, parent.painlessLookup, parent.returnType, parent.keywords)__    };create,a,new,locals;private,locals,locals,parent,this,parent,parent,painless,lookup,parent,return,type,parent,keywords
Locals -> private Locals(Locals parent);1533143718;Create a new Locals;private Locals(Locals parent) {_        this(parent, parent.painlessLookup, parent.returnType, parent.keywords)__    };create,a,new,locals;private,locals,locals,parent,this,parent,parent,painless,lookup,parent,return,type,parent,keywords
Locals -> private Locals(Locals parent);1533547893;Create a new Locals;private Locals(Locals parent) {_        this(parent, parent.painlessLookup, parent.returnType, parent.keywords)__    };create,a,new,locals;private,locals,locals,parent,this,parent,parent,painless,lookup,parent,return,type,parent,keywords
Locals -> private Locals(Locals parent);1538067637;Create a new Locals;private Locals(Locals parent) {_        this(parent, parent.painlessLookup, parent.returnType, parent.keywords)__    };create,a,new,locals;private,locals,locals,parent,this,parent,parent,painless,lookup,parent,return,type,parent,keywords
Locals -> public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<PainlessMethod> methods);1531179852;Creates a new program scope: the list of methods. It is the parent for all methods;public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<PainlessMethod> methods) {_        Locals locals = new Locals(null, painlessLookup, null, null)__        for (PainlessMethod method : methods) {_            locals.addMethod(method)__        }_        return locals__    };creates,a,new,program,scope,the,list,of,methods,it,is,the,parent,for,all,methods;public,static,locals,new,program,scope,painless,lookup,painless,lookup,collection,painless,method,methods,locals,locals,new,locals,null,painless,lookup,null,null,for,painless,method,method,methods,locals,add,method,method,return,locals
Locals -> public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<PainlessMethod> methods);1531910483;Creates a new program scope: the list of methods. It is the parent for all methods;public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<PainlessMethod> methods) {_        Locals locals = new Locals(null, painlessLookup, null, null)__        for (PainlessMethod method : methods) {_            locals.addMethod(method)__        }_        return locals__    };creates,a,new,program,scope,the,list,of,methods,it,is,the,parent,for,all,methods;public,static,locals,new,program,scope,painless,lookup,painless,lookup,collection,painless,method,methods,locals,locals,new,locals,null,painless,lookup,null,null,for,painless,method,method,methods,locals,add,method,method,return,locals
Locals -> public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<PainlessMethod> methods);1532069817;Creates a new program scope: the list of methods. It is the parent for all methods;public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<PainlessMethod> methods) {_        Locals locals = new Locals(null, painlessLookup, null, null)__        for (PainlessMethod method : methods) {_            locals.addMethod(method)__        }_        return locals__    };creates,a,new,program,scope,the,list,of,methods,it,is,the,parent,for,all,methods;public,static,locals,new,program,scope,painless,lookup,painless,lookup,collection,painless,method,methods,locals,locals,new,locals,null,painless,lookup,null,null,for,painless,method,method,methods,locals,add,method,method,return,locals
Locals -> public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly);1524684173;Creates a new variable. Throws IAE if the variable has already been defined (even in a parent) or reserved.;public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {_        if (hasVariable(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is already defined."))__        }_        if (keywords.contains(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is reserved."))__        }_        return defineVariable(location, clazz, name, readonly)__    };creates,a,new,variable,throws,iae,if,the,variable,has,already,been,defined,even,in,a,parent,or,reserved;public,variable,add,variable,location,location,class,clazz,string,name,boolean,readonly,if,has,variable,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,already,defined,if,keywords,contains,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,reserved,return,define,variable,location,clazz,name,readonly
Locals -> public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly);1531179852;Creates a new variable. Throws IAE if the variable has already been defined (even in a parent) or reserved.;public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {_        if (hasVariable(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is already defined."))__        }_        if (keywords.contains(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is reserved."))__        }_        return defineVariable(location, clazz, name, readonly)__    };creates,a,new,variable,throws,iae,if,the,variable,has,already,been,defined,even,in,a,parent,or,reserved;public,variable,add,variable,location,location,class,clazz,string,name,boolean,readonly,if,has,variable,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,already,defined,if,keywords,contains,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,reserved,return,define,variable,location,clazz,name,readonly
Locals -> public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly);1531910483;Creates a new variable. Throws IAE if the variable has already been defined (even in a parent) or reserved.;public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {_        if (hasVariable(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is already defined."))__        }_        if (keywords.contains(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is reserved."))__        }_        return defineVariable(location, clazz, name, readonly)__    };creates,a,new,variable,throws,iae,if,the,variable,has,already,been,defined,even,in,a,parent,or,reserved;public,variable,add,variable,location,location,class,clazz,string,name,boolean,readonly,if,has,variable,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,already,defined,if,keywords,contains,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,reserved,return,define,variable,location,clazz,name,readonly
Locals -> public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly);1532069817;Creates a new variable. Throws IAE if the variable has already been defined (even in a parent) or reserved.;public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {_        if (hasVariable(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is already defined."))__        }_        if (keywords.contains(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is reserved."))__        }_        return defineVariable(location, clazz, name, readonly)__    };creates,a,new,variable,throws,iae,if,the,variable,has,already,been,defined,even,in,a,parent,or,reserved;public,variable,add,variable,location,location,class,clazz,string,name,boolean,readonly,if,has,variable,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,already,defined,if,keywords,contains,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,reserved,return,define,variable,location,clazz,name,readonly
Locals -> public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly);1533143718;Creates a new variable. Throws IAE if the variable has already been defined (even in a parent) or reserved.;public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {_        if (hasVariable(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is already defined."))__        }_        if (keywords.contains(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is reserved."))__        }_        return defineVariable(location, clazz, name, readonly)__    };creates,a,new,variable,throws,iae,if,the,variable,has,already,been,defined,even,in,a,parent,or,reserved;public,variable,add,variable,location,location,class,clazz,string,name,boolean,readonly,if,has,variable,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,already,defined,if,keywords,contains,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,reserved,return,define,variable,location,clazz,name,readonly
Locals -> public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly);1533547893;Creates a new variable. Throws IAE if the variable has already been defined (even in a parent) or reserved.;public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {_        if (hasVariable(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is already defined."))__        }_        if (keywords.contains(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is reserved."))__        }_        return defineVariable(location, clazz, name, readonly)__    };creates,a,new,variable,throws,iae,if,the,variable,has,already,been,defined,even,in,a,parent,or,reserved;public,variable,add,variable,location,location,class,clazz,string,name,boolean,readonly,if,has,variable,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,already,defined,if,keywords,contains,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,reserved,return,define,variable,location,clazz,name,readonly
Locals -> public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly);1538067637;Creates a new variable. Throws IAE if the variable has already been defined (even in a parent) or reserved.;public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {_        if (hasVariable(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is already defined."))__        }_        if (keywords.contains(name)) {_            throw location.createError(new IllegalArgumentException("Variable [" + name + "] is reserved."))__        }_        return defineVariable(location, clazz, name, readonly)__    };creates,a,new,variable,throws,iae,if,the,variable,has,already,been,defined,even,in,a,parent,or,reserved;public,variable,add,variable,location,location,class,clazz,string,name,boolean,readonly,if,has,variable,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,already,defined,if,keywords,contains,name,throw,location,create,error,new,illegal,argument,exception,variable,name,is,reserved,return,define,variable,location,clazz,name,readonly
Locals -> public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter);1524684173;Creates a new main method scope;public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {_        Locals locals = new Locals(_            programScope, programScope.definition, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS)__        _        locals.defineVariable(null, Object.class, THIS, true)___        _        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {_            locals.defineVariable(null, arg.getClazz(), arg.getName(), true)__        }__        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,main,method,scope;public,static,locals,new,main,method,scope,script,class,info,script,class,info,locals,program,scope,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,definition,script,class,info,get,execute,method,return,type,keywords,locals,define,variable,null,object,class,this,true,for,method,argument,arg,script,class,info,get,execute,arguments,locals,define,variable,null,arg,get,clazz,arg,get,name,true,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter);1531179852;Creates a new main method scope;public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {_        Locals locals = new Locals(_            programScope, programScope.painlessLookup, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS)__        _        locals.defineVariable(null, Object.class, THIS, true)___        _        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {_            locals.defineVariable(null, arg.getClazz(), arg.getName(), true)__        }__        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,main,method,scope;public,static,locals,new,main,method,scope,script,class,info,script,class,info,locals,program,scope,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,script,class,info,get,execute,method,return,type,keywords,locals,define,variable,null,object,class,this,true,for,method,argument,arg,script,class,info,get,execute,arguments,locals,define,variable,null,arg,get,clazz,arg,get,name,true,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter);1531910483;Creates a new main method scope;public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {_        Locals locals = new Locals(_            programScope, programScope.painlessLookup, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS)__        _        locals.defineVariable(null, Object.class, THIS, true)___        _        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {_            locals.defineVariable(null, arg.getClazz(), arg.getName(), true)__        }__        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,main,method,scope;public,static,locals,new,main,method,scope,script,class,info,script,class,info,locals,program,scope,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,script,class,info,get,execute,method,return,type,keywords,locals,define,variable,null,object,class,this,true,for,method,argument,arg,script,class,info,get,execute,arguments,locals,define,variable,null,arg,get,clazz,arg,get,name,true,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter);1532069817;Creates a new main method scope;public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {_        Locals locals = new Locals(_            programScope, programScope.painlessLookup, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS)__        _        locals.defineVariable(null, Object.class, THIS, true)___        _        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {_            locals.defineVariable(null, arg.getClazz(), arg.getName(), true)__        }__        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,main,method,scope;public,static,locals,new,main,method,scope,script,class,info,script,class,info,locals,program,scope,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,script,class,info,get,execute,method,return,type,keywords,locals,define,variable,null,object,class,this,true,for,method,argument,arg,script,class,info,get,execute,arguments,locals,define,variable,null,arg,get,clazz,arg,get,name,true,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter);1533143718;Creates a new main method scope;public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {_        Locals locals = new Locals(_            programScope, programScope.painlessLookup, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS)__        _        locals.defineVariable(null, Object.class, THIS, true)___        _        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {_            locals.defineVariable(null, arg.getClazz(), arg.getName(), true)__        }__        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,main,method,scope;public,static,locals,new,main,method,scope,script,class,info,script,class,info,locals,program,scope,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,script,class,info,get,execute,method,return,type,keywords,locals,define,variable,null,object,class,this,true,for,method,argument,arg,script,class,info,get,execute,arguments,locals,define,variable,null,arg,get,clazz,arg,get,name,true,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter);1533547893;Creates a new main method scope;public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {_        Locals locals = new Locals(_            programScope, programScope.painlessLookup, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS)__        locals.methods = programScope.methods__        _        locals.defineVariable(null, Object.class, THIS, true)___        _        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {_            locals.defineVariable(null, arg.getClazz(), arg.getName(), true)__        }__        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,main,method,scope;public,static,locals,new,main,method,scope,script,class,info,script,class,info,locals,program,scope,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,script,class,info,get,execute,method,return,type,keywords,locals,methods,program,scope,methods,locals,define,variable,null,object,class,this,true,for,method,argument,arg,script,class,info,get,execute,arguments,locals,define,variable,null,arg,get,clazz,arg,get,name,true,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter);1538067637;Creates a new main method scope;public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {_        Locals locals = new Locals(_            programScope, programScope.painlessLookup, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS)__        locals.methods = programScope.methods__        _        locals.defineVariable(null, Object.class, THIS, true)___        _        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {_            locals.defineVariable(null, arg.getClazz(), arg.getName(), true)__        }__        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,main,method,scope;public,static,locals,new,main,method,scope,script,class,info,script,class,info,locals,program,scope,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,script,class,info,get,execute,method,return,type,keywords,locals,methods,program,scope,methods,locals,define,variable,null,object,class,this,true,for,method,argument,arg,script,class,info,get,execute,arguments,locals,define,variable,null,arg,get,clazz,arg,get,name,true,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords);1531179852;Create a new Locals with specified return type;private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords) {_        this.parent = parent__        this.painlessLookup = painlessLookup__        this.returnType = returnType__        this.keywords = keywords__        if (parent == null) {_            this.nextSlotNumber = 0__        } else {_            this.nextSlotNumber = parent.getNextSlot()__        }_    };create,a,new,locals,with,specified,return,type;private,locals,locals,parent,painless,lookup,painless,lookup,class,return,type,set,string,keywords,this,parent,parent,this,painless,lookup,painless,lookup,this,return,type,return,type,this,keywords,keywords,if,parent,null,this,next,slot,number,0,else,this,next,slot,number,parent,get,next,slot
Locals -> private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords);1531910483;Create a new Locals with specified return type;private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords) {_        this.parent = parent__        this.painlessLookup = painlessLookup__        this.returnType = returnType__        this.keywords = keywords__        if (parent == null) {_            this.nextSlotNumber = 0__        } else {_            this.nextSlotNumber = parent.getNextSlot()__        }_    };create,a,new,locals,with,specified,return,type;private,locals,locals,parent,painless,lookup,painless,lookup,class,return,type,set,string,keywords,this,parent,parent,this,painless,lookup,painless,lookup,this,return,type,return,type,this,keywords,keywords,if,parent,null,this,next,slot,number,0,else,this,next,slot,number,parent,get,next,slot
Locals -> private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords);1532069817;Create a new Locals with specified return type;private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords) {_        this.parent = parent__        this.painlessLookup = painlessLookup__        this.returnType = returnType__        this.keywords = keywords__        if (parent == null) {_            this.nextSlotNumber = 0__        } else {_            this.nextSlotNumber = parent.getNextSlot()__        }_    };create,a,new,locals,with,specified,return,type;private,locals,locals,parent,painless,lookup,painless,lookup,class,return,type,set,string,keywords,this,parent,parent,this,painless,lookup,painless,lookup,this,return,type,return,type,this,keywords,keywords,if,parent,null,this,next,slot,number,0,else,this,next,slot,number,parent,get,next,slot
Locals -> private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords);1533143718;Create a new Locals with specified return type;private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords) {_        this.parent = parent__        this.painlessLookup = painlessLookup__        this.returnType = returnType__        this.keywords = keywords__        if (parent == null) {_            this.nextSlotNumber = 0__        } else {_            this.nextSlotNumber = parent.getNextSlot()__        }_    };create,a,new,locals,with,specified,return,type;private,locals,locals,parent,painless,lookup,painless,lookup,class,return,type,set,string,keywords,this,parent,parent,this,painless,lookup,painless,lookup,this,return,type,return,type,this,keywords,keywords,if,parent,null,this,next,slot,number,0,else,this,next,slot,number,parent,get,next,slot
Locals -> private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords);1533547893;Create a new Locals with specified return type;private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords) {_        this.parent = parent__        this.painlessLookup = painlessLookup__        this.returnType = returnType__        this.keywords = keywords__        if (parent == null) {_            this.nextSlotNumber = 0__        } else {_            this.nextSlotNumber = parent.getNextSlot()__        }_    };create,a,new,locals,with,specified,return,type;private,locals,locals,parent,painless,lookup,painless,lookup,class,return,type,set,string,keywords,this,parent,parent,this,painless,lookup,painless,lookup,this,return,type,return,type,this,keywords,keywords,if,parent,null,this,next,slot,number,0,else,this,next,slot,number,parent,get,next,slot
Locals -> private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords);1538067637;Create a new Locals with specified return type;private Locals(Locals parent, PainlessLookup painlessLookup, Class<?> returnType, Set<String> keywords) {_        this.parent = parent__        this.painlessLookup = painlessLookup__        this.returnType = returnType__        this.keywords = keywords__        if (parent == null) {_            this.nextSlotNumber = 0__        } else {_            this.nextSlotNumber = parent.getNextSlot()__        }_    };create,a,new,locals,with,specified,return,type;private,locals,locals,parent,painless,lookup,painless,lookup,class,return,type,set,string,keywords,this,parent,parent,this,painless,lookup,painless,lookup,this,return,type,return,type,this,keywords,keywords,if,parent,null,this,next,slot,number,0,else,this,next,slot,number,parent,get,next,slot
Locals -> public PainlessMethod getMethod(String key);1531910483;Looks up a method. Returns null if the method does not exist.;public PainlessMethod getMethod(String key) {_        PainlessMethod method = lookupMethod(key)__        if (method != null) {_            return method__        }_        if (parent != null) {_            return parent.getMethod(key)__        }_        return null__    };looks,up,a,method,returns,null,if,the,method,does,not,exist;public,painless,method,get,method,string,key,painless,method,method,lookup,method,key,if,method,null,return,method,if,parent,null,return,parent,get,method,key,return,null
Locals -> public PainlessMethod getMethod(String key);1532069817;Looks up a method. Returns null if the method does not exist.;public PainlessMethod getMethod(String key) {_        PainlessMethod method = lookupMethod(key)__        if (method != null) {_            return method__        }_        if (parent != null) {_            return parent.getMethod(key)__        }_        return null__    };looks,up,a,method,returns,null,if,the,method,does,not,exist;public,painless,method,get,method,string,key,painless,method,method,lookup,method,key,if,method,null,return,method,if,parent,null,return,parent,get,method,key,return,null
Locals -> public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<LocalMethod> methods);1533143718;Creates a new program scope: the list of methods. It is the parent for all methods;public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<LocalMethod> methods) {_        Locals locals = new Locals(null, painlessLookup, null, null)__        for (LocalMethod method : methods) {_            locals.addMethod(method)__        }_        return locals__    };creates,a,new,program,scope,the,list,of,methods,it,is,the,parent,for,all,methods;public,static,locals,new,program,scope,painless,lookup,painless,lookup,collection,local,method,methods,locals,locals,new,locals,null,painless,lookup,null,null,for,local,method,method,methods,locals,add,method,method,return,locals
Locals -> public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<LocalMethod> methods);1533547893;Creates a new program scope: the list of methods. It is the parent for all methods;public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<LocalMethod> methods) {_        Locals locals = new Locals(null, painlessLookup, null, null)__        locals.methods = new HashMap<>()__        for (LocalMethod method : methods) {_            locals.addMethod(method)__        }_        return locals__    };creates,a,new,program,scope,the,list,of,methods,it,is,the,parent,for,all,methods;public,static,locals,new,program,scope,painless,lookup,painless,lookup,collection,local,method,methods,locals,locals,new,locals,null,painless,lookup,null,null,locals,methods,new,hash,map,for,local,method,method,methods,locals,add,method,method,return,locals
Locals -> public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<LocalMethod> methods);1538067637;Creates a new program scope: the list of methods. It is the parent for all methods;public static Locals newProgramScope(PainlessLookup painlessLookup, Collection<LocalMethod> methods) {_        Locals locals = new Locals(null, painlessLookup, null, null)__        locals.methods = new HashMap<>()__        for (LocalMethod method : methods) {_            locals.addMethod(method)__        }_        return locals__    };creates,a,new,program,scope,the,list,of,methods,it,is,the,parent,for,all,methods;public,static,locals,new,program,scope,painless,lookup,painless,lookup,collection,local,method,methods,locals,locals,new,locals,null,painless,lookup,null,null,locals,methods,new,hash,map,for,local,method,method,methods,locals,add,method,method,return,locals
Locals -> public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,                                         int captureCount, int maxLoopCounter);1524684173;Creates a new lambda scope inside the current scope_<p>_This is just like {@link #newFunctionScope}, except the captured parameters are made read-only.;public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,_                                        int captureCount, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.definition, returnType, KEYWORDS)__        for (int i = 0_ i < parameters.size()_ i++) {_            Parameter parameter = parameters.get(i)__            _            _            _            _            boolean isCapture = true__            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,lambda,scope,inside,the,current,scope,p,this,is,just,like,link,new,function,scope,except,the,captured,parameters,are,made,read,only;public,static,locals,new,lambda,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,capture,count,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,definition,return,type,keywords,for,int,i,0,i,parameters,size,i,parameter,parameter,parameters,get,i,boolean,is,capture,true,locals,add,variable,parameter,location,parameter,clazz,parameter,name,is,capture,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,                                         int captureCount, int maxLoopCounter);1531179852;Creates a new lambda scope inside the current scope_<p>_This is just like {@link #newFunctionScope}, except the captured parameters are made read-only.;public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,_                                        int captureCount, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        for (int i = 0_ i < parameters.size()_ i++) {_            Parameter parameter = parameters.get(i)__            _            _            _            _            boolean isCapture = true__            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,lambda,scope,inside,the,current,scope,p,this,is,just,like,link,new,function,scope,except,the,captured,parameters,are,made,read,only;public,static,locals,new,lambda,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,capture,count,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,for,int,i,0,i,parameters,size,i,parameter,parameter,parameters,get,i,boolean,is,capture,true,locals,add,variable,parameter,location,parameter,clazz,parameter,name,is,capture,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,                                         int captureCount, int maxLoopCounter);1531910483;Creates a new lambda scope inside the current scope_<p>_This is just like {@link #newFunctionScope}, except the captured parameters are made read-only.;public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,_                                        int captureCount, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        for (int i = 0_ i < parameters.size()_ i++) {_            Parameter parameter = parameters.get(i)__            _            _            _            _            boolean isCapture = true__            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,lambda,scope,inside,the,current,scope,p,this,is,just,like,link,new,function,scope,except,the,captured,parameters,are,made,read,only;public,static,locals,new,lambda,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,capture,count,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,for,int,i,0,i,parameters,size,i,parameter,parameter,parameters,get,i,boolean,is,capture,true,locals,add,variable,parameter,location,parameter,clazz,parameter,name,is,capture,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,                                         int captureCount, int maxLoopCounter);1532069817;Creates a new lambda scope inside the current scope_<p>_This is just like {@link #newFunctionScope}, except the captured parameters are made read-only.;public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,_                                        int captureCount, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        for (int i = 0_ i < parameters.size()_ i++) {_            Parameter parameter = parameters.get(i)__            _            _            _            _            boolean isCapture = true__            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,lambda,scope,inside,the,current,scope,p,this,is,just,like,link,new,function,scope,except,the,captured,parameters,are,made,read,only;public,static,locals,new,lambda,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,capture,count,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,for,int,i,0,i,parameters,size,i,parameter,parameter,parameters,get,i,boolean,is,capture,true,locals,add,variable,parameter,location,parameter,clazz,parameter,name,is,capture,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
Locals -> public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,                                         int captureCount, int maxLoopCounter);1533143718;Creates a new lambda scope inside the current scope_<p>_This is just like {@link #newFunctionScope}, except the captured parameters are made read-only.;public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,_                                        int captureCount, int maxLoopCounter) {_        Locals locals = new Locals(programScope, programScope.painlessLookup, returnType, KEYWORDS)__        for (int i = 0_ i < parameters.size()_ i++) {_            Parameter parameter = parameters.get(i)__            _            _            _            _            boolean isCapture = true__            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture)__        }_        _        if (maxLoopCounter > 0) {_            locals.defineVariable(null, int.class, LOOP, true)__        }_        return locals__    };creates,a,new,lambda,scope,inside,the,current,scope,p,this,is,just,like,link,new,function,scope,except,the,captured,parameters,are,made,read,only;public,static,locals,new,lambda,scope,locals,program,scope,class,return,type,list,parameter,parameters,int,capture,count,int,max,loop,counter,locals,locals,new,locals,program,scope,program,scope,painless,lookup,return,type,keywords,for,int,i,0,i,parameters,size,i,parameter,parameter,parameters,get,i,boolean,is,capture,true,locals,add,variable,parameter,location,parameter,clazz,parameter,name,is,capture,if,max,loop,counter,0,locals,define,variable,null,int,class,loop,true,return,locals
