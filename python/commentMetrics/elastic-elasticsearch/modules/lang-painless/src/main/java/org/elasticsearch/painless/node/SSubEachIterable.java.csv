commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     throw createError(new IllegalStateException("Illegal tree structure.")). }
false;;1;19;;@Override void analyze(Locals locals) {     // We must store the iterator as a variable for securing a slot on the stack, and     // also add the location offset to make the name unique in case of nested for each loops.     iterator = locals.addVariable(location, Iterator.class, "#itr" + location.getOffset(), true).     if (expression.actual == def.class) {         method = null.     } else {         method = locals.getPainlessLookup().lookupPainlessMethod(expression.actual, false, "iterator", 0).         if (method == null) {             throw createError(new IllegalArgumentException("method [" + typeToCanonicalTypeName(expression.actual) + ", iterator/0] not found")).         }     }     cast = AnalyzerCaster.getLegalCast(location, def.class, variable.clazz, true, true). }
false;;2;41;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     expression.write(writer, globals).     if (method == null) {         org.objectweb.asm.Type methodType = org.objectweb.asm.Type.getMethodType(org.objectweb.asm.Type.getType(Iterator.class), org.objectweb.asm.Type.getType(Object.class)).         writer.invokeDefCall("iterator", methodType, DefBootstrap.ITERATOR).     } else {         writer.invokeMethodCall(method).     }     writer.visitVarInsn(MethodWriter.getType(iterator.clazz).getOpcode(Opcodes.ISTORE), iterator.getSlot()).     Label begin = new Label().     Label end = new Label().     writer.mark(begin).     writer.visitVarInsn(MethodWriter.getType(iterator.clazz).getOpcode(Opcodes.ILOAD), iterator.getSlot()).     writer.invokeInterface(ITERATOR_TYPE, ITERATOR_HASNEXT).     writer.ifZCmp(MethodWriter.EQ, end).     writer.visitVarInsn(MethodWriter.getType(iterator.clazz).getOpcode(Opcodes.ILOAD), iterator.getSlot()).     writer.invokeInterface(ITERATOR_TYPE, ITERATOR_NEXT).     writer.writeCast(cast).     writer.visitVarInsn(MethodWriter.getType(variable.clazz).getOpcode(Opcodes.ISTORE), variable.getSlot()).     if (loopCounter != null) {         writer.writeLoopCounter(loopCounter.getSlot(), statementCount, location).     }     block.continu = begin.     block.brake = end.     block.write(writer, globals).     writer.goTo(begin).     writer.mark(end). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(PainlessLookupUtility.typeToCanonicalTypeName(variable.clazz), variable.name, expression, block). }
