# id;timestamp;commentText;codeText;commentWords;codeWords
DefBootstrap -> PIC -> static boolean checkClass(Class<?> clazz, Object receiver);1524684173;guard method for inline caching: checks the receiver's class is the same_as the cached class;static boolean checkClass(Class<?> clazz, Object receiver) {_            return receiver.getClass() == clazz__        };guard,method,for,inline,caching,checks,the,receiver,s,class,is,the,same,as,the,cached,class;static,boolean,check,class,class,clazz,object,receiver,return,receiver,get,class,clazz
DefBootstrap -> PIC -> static boolean checkClass(Class<?> clazz, Object receiver);1531179852;guard method for inline caching: checks the receiver's class is the same_as the cached class;static boolean checkClass(Class<?> clazz, Object receiver) {_            return receiver.getClass() == clazz__        };guard,method,for,inline,caching,checks,the,receiver,s,class,is,the,same,as,the,cached,class;static,boolean,check,class,class,clazz,object,receiver,return,receiver,get,class,clazz
DefBootstrap -> PIC -> static boolean checkClass(Class<?> clazz, Object receiver);1533547893;guard method for inline caching: checks the receiver's class is the same_as the cached class;static boolean checkClass(Class<?> clazz, Object receiver) {_            return receiver.getClass() == clazz__        };guard,method,for,inline,caching,checks,the,receiver,s,class,is,the,same,as,the,cached,class;static,boolean,check,class,class,clazz,object,receiver,return,receiver,get,class,clazz
DefBootstrap -> MIC -> static boolean checkLHS(Class<?> clazz, Object leftObject);1524684173;guard method for inline caching: checks the receiver's class is the same_as the cached class;static boolean checkLHS(Class<?> clazz, Object leftObject) {_            return leftObject.getClass() == clazz__        };guard,method,for,inline,caching,checks,the,receiver,s,class,is,the,same,as,the,cached,class;static,boolean,check,lhs,class,clazz,object,left,object,return,left,object,get,class,clazz
DefBootstrap -> MIC -> static boolean checkLHS(Class<?> clazz, Object leftObject);1531179852;guard method for inline caching: checks the receiver's class is the same_as the cached class;static boolean checkLHS(Class<?> clazz, Object leftObject) {_            return leftObject.getClass() == clazz__        };guard,method,for,inline,caching,checks,the,receiver,s,class,is,the,same,as,the,cached,class;static,boolean,check,lhs,class,clazz,object,left,object,return,left,object,get,class,clazz
DefBootstrap -> MIC -> static boolean checkLHS(Class<?> clazz, Object leftObject);1533547893;guard method for inline caching: checks the receiver's class is the same_as the cached class;static boolean checkLHS(Class<?> clazz, Object leftObject) {_            return leftObject.getClass() == clazz__        };guard,method,for,inline,caching,checks,the,receiver,s,class,is,the,same,as,the,cached,class;static,boolean,check,lhs,class,clazz,object,left,object,return,left,object,get,class,clazz
DefBootstrap -> PIC -> @SuppressForbidden(reason = "slow path")         Object fallback(final Object[] callArgs) throws Throwable;1524684173;Called when a new type is encountered (or, when we have encountered more than {@code MAX_DEPTH}_types at this call site and given up on caching using this fallback and we switch to a_megamorphic cache using {@link ClassValue}).;@SuppressForbidden(reason = "slow path")_        Object fallback(final Object[] callArgs) throws Throwable {_            if (depth >= MAX_DEPTH) {_                _                final MethodHandle target = this.createMegamorphicHandle()__                _                setTarget(target)__                return target.invokeWithArguments(callArgs)_                    _            } else {_                final Class<?> receiver = callArgs[0].getClass()__                final MethodHandle target = lookup(flavor, name, receiver).asType(type())__    _                MethodHandle test = CHECK_CLASS.bindTo(receiver)__                MethodHandle guard = MethodHandles.guardWithTest(test, target, getTarget())__                _                depth++__    _                setTarget(guard)__                return target.invokeWithArguments(callArgs)__            }_        };called,when,a,new,type,is,encountered,or,when,we,have,encountered,more,than,code,types,at,this,call,site,and,given,up,on,caching,using,this,fallback,and,we,switch,to,a,megamorphic,cache,using,link,class,value;suppress,forbidden,reason,slow,path,object,fallback,final,object,call,args,throws,throwable,if,depth,final,method,handle,target,this,create,megamorphic,handle,set,target,target,return,target,invoke,with,arguments,call,args,else,final,class,receiver,call,args,0,get,class,final,method,handle,target,lookup,flavor,name,receiver,as,type,type,method,handle,test,bind,to,receiver,method,handle,guard,method,handles,guard,with,test,test,target,get,target,depth,set,target,guard,return,target,invoke,with,arguments,call,args
DefBootstrap -> PIC -> @SuppressForbidden(reason = "slow path")         Object fallback(final Object[] callArgs) throws Throwable;1531179852;Called when a new type is encountered (or, when we have encountered more than {@code MAX_DEPTH}_types at this call site and given up on caching using this fallback and we switch to a_megamorphic cache using {@link ClassValue}).;@SuppressForbidden(reason = "slow path")_        Object fallback(final Object[] callArgs) throws Throwable {_            if (depth >= MAX_DEPTH) {_                _                final MethodHandle target = this.createMegamorphicHandle()___                setTarget(target)__                return target.invokeWithArguments(callArgs)__            } else {_                final Class<?> receiver = callArgs[0].getClass()__                final MethodHandle target = lookup(flavor, name, receiver).asType(type())___                MethodHandle test = CHECK_CLASS.bindTo(receiver)__                MethodHandle guard = MethodHandles.guardWithTest(test, target, getTarget())___                depth++___                setTarget(guard)__                return target.invokeWithArguments(callArgs)__            }_        };called,when,a,new,type,is,encountered,or,when,we,have,encountered,more,than,code,types,at,this,call,site,and,given,up,on,caching,using,this,fallback,and,we,switch,to,a,megamorphic,cache,using,link,class,value;suppress,forbidden,reason,slow,path,object,fallback,final,object,call,args,throws,throwable,if,depth,final,method,handle,target,this,create,megamorphic,handle,set,target,target,return,target,invoke,with,arguments,call,args,else,final,class,receiver,call,args,0,get,class,final,method,handle,target,lookup,flavor,name,receiver,as,type,type,method,handle,test,bind,to,receiver,method,handle,guard,method,handles,guard,with,test,test,target,get,target,depth,set,target,guard,return,target,invoke,with,arguments,call,args
DefBootstrap -> PIC -> @SuppressForbidden(reason = "slow path")         Object fallback(final Object[] callArgs) throws Throwable;1533547893;Called when a new type is encountered (or, when we have encountered more than {@code MAX_DEPTH}_types at this call site and given up on caching using this fallback and we switch to a_megamorphic cache using {@link ClassValue}).;@SuppressForbidden(reason = "slow path")_        Object fallback(final Object[] callArgs) throws Throwable {_            if (depth >= MAX_DEPTH) {_                _                final MethodHandle target = this.createMegamorphicHandle()___                setTarget(target)__                return target.invokeWithArguments(callArgs)__            } else {_                final Class<?> receiver = callArgs[0].getClass()__                final MethodHandle target = lookup(flavor, name, receiver).asType(type())___                MethodHandle test = CHECK_CLASS.bindTo(receiver)__                MethodHandle guard = MethodHandles.guardWithTest(test, target, getTarget())___                depth++___                setTarget(guard)__                return target.invokeWithArguments(callArgs)__            }_        };called,when,a,new,type,is,encountered,or,when,we,have,encountered,more,than,code,types,at,this,call,site,and,given,up,on,caching,using,this,fallback,and,we,switch,to,a,megamorphic,cache,using,link,class,value;suppress,forbidden,reason,slow,path,object,fallback,final,object,call,args,throws,throwable,if,depth,final,method,handle,target,this,create,megamorphic,handle,set,target,target,return,target,invoke,with,arguments,call,args,else,final,class,receiver,call,args,0,get,class,final,method,handle,target,lookup,flavor,name,receiver,as,type,type,method,handle,test,bind,to,receiver,method,handle,guard,method,handles,guard,with,test,test,target,get,target,depth,set,target,guard,return,target,invoke,with,arguments,call,args
DefBootstrap -> MIC -> private MethodHandle lookup(Object[] args) throws Throwable;1524684173;Does a slow lookup for the operator;private MethodHandle lookup(Object[] args) throws Throwable {_            switch(flavor) {_                case UNARY_OPERATOR:_                case SHIFT_OPERATOR:_                    _                    MethodHandle unary = DefMath.lookupUnary(args[0].getClass(), name)__                    if ((flags & OPERATOR_EXPLICIT_CAST) != 0) {_                        unary = DefMath.cast(type().returnType(), unary)__                    } else if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {_                        unary = DefMath.cast(args[0].getClass(), unary)__                    }_                    return unary__                case BINARY_OPERATOR:_                    if (args[0] == null || args[1] == null) {_                        return lookupGeneric()_ _                    } else {_                        MethodHandle binary = DefMath.lookupBinary(args[0].getClass(), args[1].getClass(), name)__                        if ((flags & OPERATOR_EXPLICIT_CAST) != 0) {_                            binary = DefMath.cast(type().returnType(), binary)__                        } else if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {_                            binary = DefMath.cast(args[0].getClass(), binary)__                        }_                        return binary__                    }_                default: throw new AssertionError()__            }_        };does,a,slow,lookup,for,the,operator;private,method,handle,lookup,object,args,throws,throwable,switch,flavor,case,case,method,handle,unary,def,math,lookup,unary,args,0,get,class,name,if,flags,0,unary,def,math,cast,type,return,type,unary,else,if,flags,0,unary,def,math,cast,args,0,get,class,unary,return,unary,case,if,args,0,null,args,1,null,return,lookup,generic,else,method,handle,binary,def,math,lookup,binary,args,0,get,class,args,1,get,class,name,if,flags,0,binary,def,math,cast,type,return,type,binary,else,if,flags,0,binary,def,math,cast,args,0,get,class,binary,return,binary,default,throw,new,assertion,error
DefBootstrap -> MIC -> private MethodHandle lookup(Object[] args) throws Throwable;1531179852;Does a slow lookup for the operator;private MethodHandle lookup(Object[] args) throws Throwable {_            switch(flavor) {_                case UNARY_OPERATOR:_                case SHIFT_OPERATOR:_                    _                    MethodHandle unary = DefMath.lookupUnary(args[0].getClass(), name)__                    if ((flags & OPERATOR_EXPLICIT_CAST) != 0) {_                        unary = DefMath.cast(type().returnType(), unary)__                    } else if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {_                        unary = DefMath.cast(args[0].getClass(), unary)__                    }_                    return unary__                case BINARY_OPERATOR:_                    if (args[0] == null || args[1] == null) {_                        return lookupGeneric()_ _                    } else {_                        MethodHandle binary = DefMath.lookupBinary(args[0].getClass(), args[1].getClass(), name)__                        if ((flags & OPERATOR_EXPLICIT_CAST) != 0) {_                            binary = DefMath.cast(type().returnType(), binary)__                        } else if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {_                            binary = DefMath.cast(args[0].getClass(), binary)__                        }_                        return binary__                    }_                default: throw new AssertionError()__            }_        };does,a,slow,lookup,for,the,operator;private,method,handle,lookup,object,args,throws,throwable,switch,flavor,case,case,method,handle,unary,def,math,lookup,unary,args,0,get,class,name,if,flags,0,unary,def,math,cast,type,return,type,unary,else,if,flags,0,unary,def,math,cast,args,0,get,class,unary,return,unary,case,if,args,0,null,args,1,null,return,lookup,generic,else,method,handle,binary,def,math,lookup,binary,args,0,get,class,args,1,get,class,name,if,flags,0,binary,def,math,cast,type,return,type,binary,else,if,flags,0,binary,def,math,cast,args,0,get,class,binary,return,binary,default,throw,new,assertion,error
DefBootstrap -> MIC -> private MethodHandle lookup(Object[] args) throws Throwable;1533547893;Does a slow lookup for the operator;private MethodHandle lookup(Object[] args) throws Throwable {_            switch(flavor) {_                case UNARY_OPERATOR:_                case SHIFT_OPERATOR:_                    _                    MethodHandle unary = DefMath.lookupUnary(args[0].getClass(), name)__                    if ((flags & OPERATOR_EXPLICIT_CAST) != 0) {_                        unary = DefMath.cast(type().returnType(), unary)__                    } else if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {_                        unary = DefMath.cast(args[0].getClass(), unary)__                    }_                    return unary__                case BINARY_OPERATOR:_                    if (args[0] == null || args[1] == null) {_                        return lookupGeneric()_ _                    } else {_                        MethodHandle binary = DefMath.lookupBinary(args[0].getClass(), args[1].getClass(), name)__                        if ((flags & OPERATOR_EXPLICIT_CAST) != 0) {_                            binary = DefMath.cast(type().returnType(), binary)__                        } else if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {_                            binary = DefMath.cast(args[0].getClass(), binary)__                        }_                        return binary__                    }_                default: throw new AssertionError()__            }_        };does,a,slow,lookup,for,the,operator;private,method,handle,lookup,object,args,throws,throwable,switch,flavor,case,case,method,handle,unary,def,math,lookup,unary,args,0,get,class,name,if,flags,0,unary,def,math,cast,type,return,type,unary,else,if,flags,0,unary,def,math,cast,args,0,get,class,unary,return,unary,case,if,args,0,null,args,1,null,return,lookup,generic,else,method,handle,binary,def,math,lookup,binary,args,0,get,class,args,1,get,class,name,if,flags,0,binary,def,math,cast,type,return,type,binary,else,if,flags,0,binary,def,math,cast,args,0,get,class,binary,return,binary,default,throw,new,assertion,error
DefBootstrap -> PIC -> private MethodHandle lookup(int flavor, String name, Class<?> receiver) throws Throwable;1524684173;Does a slow lookup against the whitelist.;private MethodHandle lookup(int flavor, String name, Class<?> receiver) throws Throwable {_            switch(flavor) {_                case METHOD_CALL:_                    return Def.lookupMethod(definition, lookup, type(), receiver, name, args)__                case LOAD:_                    return Def.lookupGetter(definition, receiver, name)__                case STORE:_                    return Def.lookupSetter(definition, receiver, name)__                case ARRAY_LOAD:_                    return Def.lookupArrayLoad(receiver)__                case ARRAY_STORE:_                    return Def.lookupArrayStore(receiver)__                case ITERATOR:_                    return Def.lookupIterator(receiver)__                case REFERENCE:_                    return Def.lookupReference(definition, lookup, (String) args[0], receiver, name)__                case INDEX_NORMALIZE:_                    return Def.lookupIndexNormalize(receiver)__                default: throw new AssertionError()__            }_        };does,a,slow,lookup,against,the,whitelist;private,method,handle,lookup,int,flavor,string,name,class,receiver,throws,throwable,switch,flavor,case,return,def,lookup,method,definition,lookup,type,receiver,name,args,case,load,return,def,lookup,getter,definition,receiver,name,case,store,return,def,lookup,setter,definition,receiver,name,case,return,def,lookup,array,load,receiver,case,return,def,lookup,array,store,receiver,case,iterator,return,def,lookup,iterator,receiver,case,reference,return,def,lookup,reference,definition,lookup,string,args,0,receiver,name,case,return,def,lookup,index,normalize,receiver,default,throw,new,assertion,error
DefBootstrap -> PIC -> private MethodHandle lookup(int flavor, String name, Class<?> receiver) throws Throwable;1531179852;Does a slow lookup against the whitelist.;private MethodHandle lookup(int flavor, String name, Class<?> receiver) throws Throwable {_            switch(flavor) {_                case METHOD_CALL:_                    return Def.lookupMethod(painlessLookup, methodHandlesLookup, type(), receiver, name, args)__                case LOAD:_                    return Def.lookupGetter(painlessLookup, receiver, name)__                case STORE:_                    return Def.lookupSetter(painlessLookup, receiver, name)__                case ARRAY_LOAD:_                    return Def.lookupArrayLoad(receiver)__                case ARRAY_STORE:_                    return Def.lookupArrayStore(receiver)__                case ITERATOR:_                    return Def.lookupIterator(receiver)__                case REFERENCE:_                    return Def.lookupReference(painlessLookup, methodHandlesLookup, (String) args[0], receiver, name)__                case INDEX_NORMALIZE:_                    return Def.lookupIndexNormalize(receiver)__                default: throw new AssertionError()__            }_        };does,a,slow,lookup,against,the,whitelist;private,method,handle,lookup,int,flavor,string,name,class,receiver,throws,throwable,switch,flavor,case,return,def,lookup,method,painless,lookup,method,handles,lookup,type,receiver,name,args,case,load,return,def,lookup,getter,painless,lookup,receiver,name,case,store,return,def,lookup,setter,painless,lookup,receiver,name,case,return,def,lookup,array,load,receiver,case,return,def,lookup,array,store,receiver,case,iterator,return,def,lookup,iterator,receiver,case,reference,return,def,lookup,reference,painless,lookup,method,handles,lookup,string,args,0,receiver,name,case,return,def,lookup,index,normalize,receiver,default,throw,new,assertion,error
DefBootstrap -> PIC -> private MethodHandle lookup(int flavor, String name, Class<?> receiver) throws Throwable;1533547893;Does a slow lookup against the whitelist.;private MethodHandle lookup(int flavor, String name, Class<?> receiver) throws Throwable {_            switch(flavor) {_                case METHOD_CALL:_                    return Def.lookupMethod(painlessLookup, localMethods, methodHandlesLookup, type(), receiver, name, args)__                case LOAD:_                    return Def.lookupGetter(painlessLookup, receiver, name)__                case STORE:_                    return Def.lookupSetter(painlessLookup, receiver, name)__                case ARRAY_LOAD:_                    return Def.lookupArrayLoad(receiver)__                case ARRAY_STORE:_                    return Def.lookupArrayStore(receiver)__                case ITERATOR:_                    return Def.lookupIterator(receiver)__                case REFERENCE:_                    return Def.lookupReference(painlessLookup, localMethods, methodHandlesLookup, (String) args[0], receiver, name)__                case INDEX_NORMALIZE:_                    return Def.lookupIndexNormalize(receiver)__                default: throw new AssertionError()__            }_        };does,a,slow,lookup,against,the,whitelist;private,method,handle,lookup,int,flavor,string,name,class,receiver,throws,throwable,switch,flavor,case,return,def,lookup,method,painless,lookup,local,methods,method,handles,lookup,type,receiver,name,args,case,load,return,def,lookup,getter,painless,lookup,receiver,name,case,store,return,def,lookup,setter,painless,lookup,receiver,name,case,return,def,lookup,array,load,receiver,case,return,def,lookup,array,store,receiver,case,iterator,return,def,lookup,iterator,receiver,case,reference,return,def,lookup,reference,painless,lookup,local,methods,method,handles,lookup,string,args,0,receiver,name,case,return,def,lookup,index,normalize,receiver,default,throw,new,assertion,error
DefBootstrap -> MIC -> @SuppressForbidden(reason = "slow path")         Object fallback(Object[] args) throws Throwable;1524684173;Called when a new type is encountered or if cached type does not match._In that case we revert to a generic, but slower operator handling.;@SuppressForbidden(reason = "slow path")_        Object fallback(Object[] args) throws Throwable {_            if (initialized) {_                _                MethodHandle generic = lookupGeneric()__                setTarget(generic.asType(type()))__                return generic.invokeWithArguments(args)__            }_            _            final MethodType type = type()__            MethodHandle target = lookup(args)__            _            try {_                target = target.asType(type)__            } catch (WrongMethodTypeException e) {_                Exception exc = new ClassCastException("Cannot cast from: " + target.type().returnType() + " to " + type.returnType())__                exc.initCause(e)__                throw exc__            }__            final MethodHandle test__            if (flavor == BINARY_OPERATOR || flavor == SHIFT_OPERATOR) {_                _                Class<?> clazz0 = args[0] == null ? null : args[0].getClass()__                Class<?> clazz1 = args[1] == null ? null : args[1].getClass()__                if (type.parameterType(1) != Object.class) {_                    _                    MethodHandle unaryTest = CHECK_LHS.bindTo(clazz0)__                    test = unaryTest.asType(unaryTest.type()_                                            .changeParameterType(0, type.parameterType(0)))__                } else if (type.parameterType(0) != Object.class) {_                    _                    MethodHandle unaryTest = CHECK_RHS.bindTo(clazz0).bindTo(clazz1)__                    test = unaryTest.asType(unaryTest.type()_                                            .changeParameterType(0, type.parameterType(0))_                                            .changeParameterType(1, type.parameterType(1)))__                } else {_                    _                    MethodHandle binaryTest = CHECK_BOTH.bindTo(clazz0).bindTo(clazz1)__                    test = binaryTest.asType(binaryTest.type()_                                            .changeParameterType(0, type.parameterType(0))_                                            .changeParameterType(1, type.parameterType(1)))__                }_            } else {_                _                MethodHandle receiverTest = CHECK_LHS.bindTo(args[0].getClass())__                test = receiverTest.asType(receiverTest.type()_                                        .changeParameterType(0, type.parameterType(0)))__            }__            MethodHandle guard = MethodHandles.guardWithTest(test, target, getTarget())__            _            _            if (flavor == BINARY_OPERATOR && (flags & OPERATOR_ALLOWS_NULL) != 0) {_                MethodHandle handler = MethodHandles.dropArguments(lookupGeneric().asType(type()), _                                                                   0, _                                                                   NullPointerException.class)__                guard = MethodHandles.catchException(guard, NullPointerException.class, handler)__            }_            _            initialized = true___            setTarget(guard)__            return target.invokeWithArguments(args)__        };called,when,a,new,type,is,encountered,or,if,cached,type,does,not,match,in,that,case,we,revert,to,a,generic,but,slower,operator,handling;suppress,forbidden,reason,slow,path,object,fallback,object,args,throws,throwable,if,initialized,method,handle,generic,lookup,generic,set,target,generic,as,type,type,return,generic,invoke,with,arguments,args,final,method,type,type,type,method,handle,target,lookup,args,try,target,target,as,type,type,catch,wrong,method,type,exception,e,exception,exc,new,class,cast,exception,cannot,cast,from,target,type,return,type,to,type,return,type,exc,init,cause,e,throw,exc,final,method,handle,test,if,flavor,flavor,class,clazz0,args,0,null,null,args,0,get,class,class,clazz1,args,1,null,null,args,1,get,class,if,type,parameter,type,1,object,class,method,handle,unary,test,bind,to,clazz0,test,unary,test,as,type,unary,test,type,change,parameter,type,0,type,parameter,type,0,else,if,type,parameter,type,0,object,class,method,handle,unary,test,bind,to,clazz0,bind,to,clazz1,test,unary,test,as,type,unary,test,type,change,parameter,type,0,type,parameter,type,0,change,parameter,type,1,type,parameter,type,1,else,method,handle,binary,test,bind,to,clazz0,bind,to,clazz1,test,binary,test,as,type,binary,test,type,change,parameter,type,0,type,parameter,type,0,change,parameter,type,1,type,parameter,type,1,else,method,handle,receiver,test,bind,to,args,0,get,class,test,receiver,test,as,type,receiver,test,type,change,parameter,type,0,type,parameter,type,0,method,handle,guard,method,handles,guard,with,test,test,target,get,target,if,flavor,flags,0,method,handle,handler,method,handles,drop,arguments,lookup,generic,as,type,type,0,null,pointer,exception,class,guard,method,handles,catch,exception,guard,null,pointer,exception,class,handler,initialized,true,set,target,guard,return,target,invoke,with,arguments,args
DefBootstrap -> MIC -> @SuppressForbidden(reason = "slow path")         Object fallback(Object[] args) throws Throwable;1531179852;Called when a new type is encountered or if cached type does not match._In that case we revert to a generic, but slower operator handling.;@SuppressForbidden(reason = "slow path")_        Object fallback(Object[] args) throws Throwable {_            if (initialized) {_                _                MethodHandle generic = lookupGeneric()__                setTarget(generic.asType(type()))__                return generic.invokeWithArguments(args)__            }__            final MethodType type = type()__            MethodHandle target = lookup(args)__            _            try {_                target = target.asType(type)__            } catch (WrongMethodTypeException e) {_                Exception exc = new ClassCastException("Cannot cast from: " + target.type().returnType() + " to " + type.returnType())__                exc.initCause(e)__                throw exc__            }__            final MethodHandle test__            if (flavor == BINARY_OPERATOR || flavor == SHIFT_OPERATOR) {_                _                Class<?> clazz0 = args[0] == null ? null : args[0].getClass()__                Class<?> clazz1 = args[1] == null ? null : args[1].getClass()__                if (type.parameterType(1) != Object.class) {_                    _                    MethodHandle unaryTest = CHECK_LHS.bindTo(clazz0)__                    test = unaryTest.asType(unaryTest.type()_                                            .changeParameterType(0, type.parameterType(0)))__                } else if (type.parameterType(0) != Object.class) {_                    _                    MethodHandle unaryTest = CHECK_RHS.bindTo(clazz0).bindTo(clazz1)__                    test = unaryTest.asType(unaryTest.type()_                                            .changeParameterType(0, type.parameterType(0))_                                            .changeParameterType(1, type.parameterType(1)))__                } else {_                    _                    MethodHandle binaryTest = CHECK_BOTH.bindTo(clazz0).bindTo(clazz1)__                    test = binaryTest.asType(binaryTest.type()_                                            .changeParameterType(0, type.parameterType(0))_                                            .changeParameterType(1, type.parameterType(1)))__                }_            } else {_                _                MethodHandle receiverTest = CHECK_LHS.bindTo(args[0].getClass())__                test = receiverTest.asType(receiverTest.type()_                                        .changeParameterType(0, type.parameterType(0)))__            }__            MethodHandle guard = MethodHandles.guardWithTest(test, target, getTarget())__            _            _            if (flavor == BINARY_OPERATOR && (flags & OPERATOR_ALLOWS_NULL) != 0) {_                MethodHandle handler = MethodHandles.dropArguments(lookupGeneric().asType(type()),_                                                                   0,_                                                                   NullPointerException.class)__                guard = MethodHandles.catchException(guard, NullPointerException.class, handler)__            }__            initialized = true___            setTarget(guard)__            return target.invokeWithArguments(args)__        };called,when,a,new,type,is,encountered,or,if,cached,type,does,not,match,in,that,case,we,revert,to,a,generic,but,slower,operator,handling;suppress,forbidden,reason,slow,path,object,fallback,object,args,throws,throwable,if,initialized,method,handle,generic,lookup,generic,set,target,generic,as,type,type,return,generic,invoke,with,arguments,args,final,method,type,type,type,method,handle,target,lookup,args,try,target,target,as,type,type,catch,wrong,method,type,exception,e,exception,exc,new,class,cast,exception,cannot,cast,from,target,type,return,type,to,type,return,type,exc,init,cause,e,throw,exc,final,method,handle,test,if,flavor,flavor,class,clazz0,args,0,null,null,args,0,get,class,class,clazz1,args,1,null,null,args,1,get,class,if,type,parameter,type,1,object,class,method,handle,unary,test,bind,to,clazz0,test,unary,test,as,type,unary,test,type,change,parameter,type,0,type,parameter,type,0,else,if,type,parameter,type,0,object,class,method,handle,unary,test,bind,to,clazz0,bind,to,clazz1,test,unary,test,as,type,unary,test,type,change,parameter,type,0,type,parameter,type,0,change,parameter,type,1,type,parameter,type,1,else,method,handle,binary,test,bind,to,clazz0,bind,to,clazz1,test,binary,test,as,type,binary,test,type,change,parameter,type,0,type,parameter,type,0,change,parameter,type,1,type,parameter,type,1,else,method,handle,receiver,test,bind,to,args,0,get,class,test,receiver,test,as,type,receiver,test,type,change,parameter,type,0,type,parameter,type,0,method,handle,guard,method,handles,guard,with,test,test,target,get,target,if,flavor,flags,0,method,handle,handler,method,handles,drop,arguments,lookup,generic,as,type,type,0,null,pointer,exception,class,guard,method,handles,catch,exception,guard,null,pointer,exception,class,handler,initialized,true,set,target,guard,return,target,invoke,with,arguments,args
DefBootstrap -> MIC -> @SuppressForbidden(reason = "slow path")         Object fallback(Object[] args) throws Throwable;1533547893;Called when a new type is encountered or if cached type does not match._In that case we revert to a generic, but slower operator handling.;@SuppressForbidden(reason = "slow path")_        Object fallback(Object[] args) throws Throwable {_            if (initialized) {_                _                MethodHandle generic = lookupGeneric()__                setTarget(generic.asType(type()))__                return generic.invokeWithArguments(args)__            }__            final MethodType type = type()__            MethodHandle target = lookup(args)__            _            try {_                target = target.asType(type)__            } catch (WrongMethodTypeException e) {_                Exception exc = new ClassCastException("Cannot cast from: " + target.type().returnType() + " to " + type.returnType())__                exc.initCause(e)__                throw exc__            }__            final MethodHandle test__            if (flavor == BINARY_OPERATOR || flavor == SHIFT_OPERATOR) {_                _                Class<?> clazz0 = args[0] == null ? null : args[0].getClass()__                Class<?> clazz1 = args[1] == null ? null : args[1].getClass()__                if (type.parameterType(1) != Object.class) {_                    _                    MethodHandle unaryTest = CHECK_LHS.bindTo(clazz0)__                    test = unaryTest.asType(unaryTest.type()_                                            .changeParameterType(0, type.parameterType(0)))__                } else if (type.parameterType(0) != Object.class) {_                    _                    MethodHandle unaryTest = CHECK_RHS.bindTo(clazz0).bindTo(clazz1)__                    test = unaryTest.asType(unaryTest.type()_                                            .changeParameterType(0, type.parameterType(0))_                                            .changeParameterType(1, type.parameterType(1)))__                } else {_                    _                    MethodHandle binaryTest = CHECK_BOTH.bindTo(clazz0).bindTo(clazz1)__                    test = binaryTest.asType(binaryTest.type()_                                            .changeParameterType(0, type.parameterType(0))_                                            .changeParameterType(1, type.parameterType(1)))__                }_            } else {_                _                MethodHandle receiverTest = CHECK_LHS.bindTo(args[0].getClass())__                test = receiverTest.asType(receiverTest.type()_                                        .changeParameterType(0, type.parameterType(0)))__            }__            MethodHandle guard = MethodHandles.guardWithTest(test, target, getTarget())__            _            _            if (flavor == BINARY_OPERATOR && (flags & OPERATOR_ALLOWS_NULL) != 0) {_                MethodHandle handler = MethodHandles.dropArguments(lookupGeneric().asType(type()),_                                                                   0,_                                                                   NullPointerException.class)__                guard = MethodHandles.catchException(guard, NullPointerException.class, handler)__            }__            initialized = true___            setTarget(guard)__            return target.invokeWithArguments(args)__        };called,when,a,new,type,is,encountered,or,if,cached,type,does,not,match,in,that,case,we,revert,to,a,generic,but,slower,operator,handling;suppress,forbidden,reason,slow,path,object,fallback,object,args,throws,throwable,if,initialized,method,handle,generic,lookup,generic,set,target,generic,as,type,type,return,generic,invoke,with,arguments,args,final,method,type,type,type,method,handle,target,lookup,args,try,target,target,as,type,type,catch,wrong,method,type,exception,e,exception,exc,new,class,cast,exception,cannot,cast,from,target,type,return,type,to,type,return,type,exc,init,cause,e,throw,exc,final,method,handle,test,if,flavor,flavor,class,clazz0,args,0,null,null,args,0,get,class,class,clazz1,args,1,null,null,args,1,get,class,if,type,parameter,type,1,object,class,method,handle,unary,test,bind,to,clazz0,test,unary,test,as,type,unary,test,type,change,parameter,type,0,type,parameter,type,0,else,if,type,parameter,type,0,object,class,method,handle,unary,test,bind,to,clazz0,bind,to,clazz1,test,unary,test,as,type,unary,test,type,change,parameter,type,0,type,parameter,type,0,change,parameter,type,1,type,parameter,type,1,else,method,handle,binary,test,bind,to,clazz0,bind,to,clazz1,test,binary,test,as,type,binary,test,type,change,parameter,type,0,type,parameter,type,0,change,parameter,type,1,type,parameter,type,1,else,method,handle,receiver,test,bind,to,args,0,get,class,test,receiver,test,as,type,receiver,test,type,change,parameter,type,0,type,parameter,type,0,method,handle,guard,method,handles,guard,with,test,test,target,get,target,if,flavor,flags,0,method,handle,handler,method,handles,drop,arguments,lookup,generic,as,type,type,0,null,pointer,exception,class,guard,method,handles,catch,exception,guard,null,pointer,exception,class,handler,initialized,true,set,target,guard,return,target,invoke,with,arguments,args
DefBootstrap -> MIC -> static boolean checkRHS(Class<?> left, Class<?> right, Object leftObject, Object rightObject);1524684173;guard method for inline caching: checks the first argument is the same_as the cached first argument.;static boolean checkRHS(Class<?> left, Class<?> right, Object leftObject, Object rightObject) {_            return rightObject.getClass() == right__        };guard,method,for,inline,caching,checks,the,first,argument,is,the,same,as,the,cached,first,argument;static,boolean,check,rhs,class,left,class,right,object,left,object,object,right,object,return,right,object,get,class,right
DefBootstrap -> MIC -> static boolean checkRHS(Class<?> left, Class<?> right, Object leftObject, Object rightObject);1531179852;guard method for inline caching: checks the first argument is the same_as the cached first argument.;static boolean checkRHS(Class<?> left, Class<?> right, Object leftObject, Object rightObject) {_            return rightObject.getClass() == right__        };guard,method,for,inline,caching,checks,the,first,argument,is,the,same,as,the,cached,first,argument;static,boolean,check,rhs,class,left,class,right,object,left,object,object,right,object,return,right,object,get,class,right
DefBootstrap -> MIC -> static boolean checkRHS(Class<?> left, Class<?> right, Object leftObject, Object rightObject);1533547893;guard method for inline caching: checks the first argument is the same_as the cached first argument.;static boolean checkRHS(Class<?> left, Class<?> right, Object leftObject, Object rightObject) {_            return rightObject.getClass() == right__        };guard,method,for,inline,caching,checks,the,first,argument,is,the,same,as,the,cached,first,argument;static,boolean,check,rhs,class,left,class,right,object,left,object,object,right,object,return,right,object,get,class,right
DefBootstrap -> MIC -> static boolean checkBoth(Class<?> left, Class<?> right, Object leftObject, Object rightObject);1524684173;guard method for inline caching: checks the receiver's class and the first argument_are the same as the cached receiver and first argument.;static boolean checkBoth(Class<?> left, Class<?> right, Object leftObject, Object rightObject) {_            return leftObject.getClass() == left && rightObject.getClass() == right__        };guard,method,for,inline,caching,checks,the,receiver,s,class,and,the,first,argument,are,the,same,as,the,cached,receiver,and,first,argument;static,boolean,check,both,class,left,class,right,object,left,object,object,right,object,return,left,object,get,class,left,right,object,get,class,right
DefBootstrap -> MIC -> static boolean checkBoth(Class<?> left, Class<?> right, Object leftObject, Object rightObject);1531179852;guard method for inline caching: checks the receiver's class and the first argument_are the same as the cached receiver and first argument.;static boolean checkBoth(Class<?> left, Class<?> right, Object leftObject, Object rightObject) {_            return leftObject.getClass() == left && rightObject.getClass() == right__        };guard,method,for,inline,caching,checks,the,receiver,s,class,and,the,first,argument,are,the,same,as,the,cached,receiver,and,first,argument;static,boolean,check,both,class,left,class,right,object,left,object,object,right,object,return,left,object,get,class,left,right,object,get,class,right
DefBootstrap -> MIC -> static boolean checkBoth(Class<?> left, Class<?> right, Object leftObject, Object rightObject);1533547893;guard method for inline caching: checks the receiver's class and the first argument_are the same as the cached receiver and first argument.;static boolean checkBoth(Class<?> left, Class<?> right, Object leftObject, Object rightObject) {_            return leftObject.getClass() == left && rightObject.getClass() == right__        };guard,method,for,inline,caching,checks,the,receiver,s,class,and,the,first,argument,are,the,same,as,the,cached,receiver,and,first,argument;static,boolean,check,both,class,left,class,right,object,left,object,object,right,object,return,left,object,get,class,left,right,object,get,class,right
DefBootstrap -> PIC -> private MethodHandle createMegamorphicHandle();1524684173;Creates the {@link MethodHandle} for the megamorphic call site_using {@link ClassValue} and {@link MethodHandles#exactInvoker(MethodType)}:;private MethodHandle createMegamorphicHandle() {_            final MethodType type = type()__            final ClassValue<MethodHandle> megamorphicCache = new ClassValue<MethodHandle>() {_                @Override_                protected MethodHandle computeValue(Class<?> receiverType) {_                    _                    try {_                        return lookup(flavor, name, receiverType).asType(type)__                    } catch (Throwable t) {_                        Def.rethrow(t)__                        throw new AssertionError()__                    }_                }_            }__            return MethodHandles.foldArguments(MethodHandles.exactInvoker(type),_                    MEGAMORPHIC_LOOKUP.bindTo(megamorphicCache))_            _        };creates,the,link,method,handle,for,the,megamorphic,call,site,using,link,class,value,and,link,method,handles,exact,invoker,method,type;private,method,handle,create,megamorphic,handle,final,method,type,type,type,final,class,value,method,handle,megamorphic,cache,new,class,value,method,handle,override,protected,method,handle,compute,value,class,receiver,type,try,return,lookup,flavor,name,receiver,type,as,type,type,catch,throwable,t,def,rethrow,t,throw,new,assertion,error,return,method,handles,fold,arguments,method,handles,exact,invoker,type,bind,to,megamorphic,cache
DefBootstrap -> PIC -> private MethodHandle createMegamorphicHandle();1531179852;Creates the {@link MethodHandle} for the megamorphic call site_using {@link ClassValue} and {@link MethodHandles#exactInvoker(MethodType)}:;private MethodHandle createMegamorphicHandle() {_            final MethodType type = type()__            final ClassValue<MethodHandle> megamorphicCache = new ClassValue<MethodHandle>() {_                @Override_                protected MethodHandle computeValue(Class<?> receiverType) {_                    _                    try {_                        return lookup(flavor, name, receiverType).asType(type)__                    } catch (Throwable t) {_                        Def.rethrow(t)__                        throw new AssertionError()__                    }_                }_            }__            return MethodHandles.foldArguments(MethodHandles.exactInvoker(type),_                    MEGAMORPHIC_LOOKUP.bindTo(megamorphicCache))__        };creates,the,link,method,handle,for,the,megamorphic,call,site,using,link,class,value,and,link,method,handles,exact,invoker,method,type;private,method,handle,create,megamorphic,handle,final,method,type,type,type,final,class,value,method,handle,megamorphic,cache,new,class,value,method,handle,override,protected,method,handle,compute,value,class,receiver,type,try,return,lookup,flavor,name,receiver,type,as,type,type,catch,throwable,t,def,rethrow,t,throw,new,assertion,error,return,method,handles,fold,arguments,method,handles,exact,invoker,type,bind,to,megamorphic,cache
DefBootstrap -> PIC -> private MethodHandle createMegamorphicHandle();1533547893;Creates the {@link MethodHandle} for the megamorphic call site_using {@link ClassValue} and {@link MethodHandles#exactInvoker(MethodType)}:;private MethodHandle createMegamorphicHandle() {_            final MethodType type = type()__            final ClassValue<MethodHandle> megamorphicCache = new ClassValue<MethodHandle>() {_                @Override_                protected MethodHandle computeValue(Class<?> receiverType) {_                    _                    try {_                        return lookup(flavor, name, receiverType).asType(type)__                    } catch (Throwable t) {_                        Def.rethrow(t)__                        throw new AssertionError()__                    }_                }_            }__            return MethodHandles.foldArguments(MethodHandles.exactInvoker(type),_                    MEGAMORPHIC_LOOKUP.bindTo(megamorphicCache))__        };creates,the,link,method,handle,for,the,megamorphic,call,site,using,link,class,value,and,link,method,handles,exact,invoker,method,type;private,method,handle,create,megamorphic,handle,final,method,type,type,type,final,class,value,method,handle,megamorphic,cache,new,class,value,method,handle,override,protected,method,handle,compute,value,class,receiver,type,try,return,lookup,flavor,name,receiver,type,as,type,type,catch,throwable,t,def,rethrow,t,throw,new,assertion,error,return,method,handles,fold,arguments,method,handles,exact,invoker,type,bind,to,megamorphic,cache
