commented;modifiers;parameterAmount;loc;comment;code
false;;1;5;;@Override void extractVariables(Set<String> variables) {     lhs.extractVariables(variables).     rhs.extractVariables(variables). }
false;;1;39;;@Override void analyze(Locals locals) {     if (expected != null && expected.isPrimitive()) {         throw createError(new IllegalArgumentException("Elvis operator cannot return primitives")).     }     lhs.expected = expected.     lhs.explicit = explicit.     lhs.internal = internal.     rhs.expected = expected.     rhs.explicit = explicit.     rhs.internal = internal.     actual = expected.     lhs.analyze(locals).     rhs.analyze(locals).     if (lhs.isNull) {         throw createError(new IllegalArgumentException("Extraneous elvis operator. LHS is null.")).     }     if (lhs.constant != null) {         throw createError(new IllegalArgumentException("Extraneous elvis operator. LHS is a constant.")).     }     if (lhs.actual.isPrimitive()) {         throw createError(new IllegalArgumentException("Extraneous elvis operator. LHS is a primitive.")).     }     if (rhs.isNull) {         throw createError(new IllegalArgumentException("Extraneous elvis operator. RHS is null.")).     }     if (expected == null) {         Class<?> promote = AnalyzerCaster.promoteConditional(lhs.actual, rhs.actual, lhs.constant, rhs.constant).         lhs.expected = promote.         rhs.expected = promote.         actual = promote.     }     lhs = lhs.cast(locals).     rhs = rhs.cast(locals). }
false;;2;13;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     Label end = new Label().     lhs.write(writer, globals).     writer.dup().     writer.ifNonNull(end).     writer.pop().     rhs.write(writer, globals).     writer.mark(end). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(lhs, rhs). }
