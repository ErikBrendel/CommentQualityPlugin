commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     throw createError(new IllegalStateException("Illegal tree structure.")). }
false;;1;22;;@Override void analyze(Locals locals) {     if (getter != null && (getter.returnType == void.class || !getter.typeParameters.isEmpty())) {         throw createError(new IllegalArgumentException("Illegal get shortcut on field [" + value + "] for type [" + type + "].")).     }     if (setter != null && (setter.returnType != void.class || setter.typeParameters.size() != 1)) {         throw createError(new IllegalArgumentException("Illegal set shortcut on field [" + value + "] for type [" + type + "].")).     }     if (getter != null && setter != null && setter.typeParameters.get(0) != getter.returnType) {         throw createError(new IllegalArgumentException("Shortcut argument types must match.")).     }     if ((getter != null || setter != null) && (!read || getter != null) && (!write || setter != null)) {         actual = setter != null ? setter.typeParameters.get(0) : getter.returnType.     } else {         throw createError(new IllegalArgumentException("Illegal shortcut on field [" + value + "] for type [" + type + "].")).     } }
false;;2;10;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.invokeMethodCall(getter).     if (!getter.returnType.equals(getter.javaMethod.getReturnType())) {         writer.checkCast(MethodWriter.getType(getter.returnType)).     } }
false;;0;4;;@Override int accessElementCount() {     return 1. }
false;;0;4;;@Override boolean isDefOptimized() {     return false. }
false;;1;4;;@Override void updateActual(Class<?> actual) {     throw new IllegalArgumentException("Illegal tree structure."). }
false;;2;4;;@Override void setup(MethodWriter writer, Globals globals) { // Do nothing. }
false;;2;10;;@Override void load(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.invokeMethodCall(getter).     if (getter.returnType != getter.javaMethod.getReturnType()) {         writer.checkCast(MethodWriter.getType(getter.returnType)).     } }
false;;2;8;;@Override void store(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     writer.invokeMethodCall(setter).     writer.writePop(MethodWriter.getType(setter.returnType).getSize()). }
false;public;0;4;;@Override public String toString() {     return singleLineToString(prefix, value). }
