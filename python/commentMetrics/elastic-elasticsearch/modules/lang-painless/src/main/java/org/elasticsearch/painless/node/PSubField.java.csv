commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@Override void extractVariables(Set<String> variables) {     throw createError(new IllegalStateException("Illegal tree structure.")). }
false;;1;9;;@Override void analyze(Locals locals) {     if (write && Modifier.isFinal(field.javaField.getModifiers())) {         throw createError(new IllegalArgumentException("Cannot write to read-only field [" + field.javaField.getName() + "] " + "for type [" + PainlessLookupUtility.typeToCanonicalTypeName(field.javaField.getDeclaringClass()) + "].")).     }     actual = field.typeParameter. }
false;;2;12;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     if (java.lang.reflect.Modifier.isStatic(field.javaField.getModifiers())) {         writer.getStatic(Type.getType(field.javaField.getDeclaringClass()), field.javaField.getName(), MethodWriter.getType(field.typeParameter)).     } else {         writer.getField(Type.getType(field.javaField.getDeclaringClass()), field.javaField.getName(), MethodWriter.getType(field.typeParameter)).     } }
false;;0;4;;@Override int accessElementCount() {     return 1. }
false;;0;4;;@Override boolean isDefOptimized() {     return false. }
false;;1;4;;@Override void updateActual(Class<?> actual) {     throw new IllegalArgumentException("Illegal tree structure."). }
false;;2;4;;@Override void setup(MethodWriter writer, Globals globals) { // Do nothing. }
false;;2;12;;@Override void load(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     if (java.lang.reflect.Modifier.isStatic(field.javaField.getModifiers())) {         writer.getStatic(Type.getType(field.javaField.getDeclaringClass()), field.javaField.getName(), MethodWriter.getType(field.typeParameter)).     } else {         writer.getField(Type.getType(field.javaField.getDeclaringClass()), field.javaField.getName(), MethodWriter.getType(field.typeParameter)).     } }
false;;2;12;;@Override void store(MethodWriter writer, Globals globals) {     writer.writeDebugInfo(location).     if (java.lang.reflect.Modifier.isStatic(field.javaField.getModifiers())) {         writer.putStatic(Type.getType(field.javaField.getDeclaringClass()), field.javaField.getName(), MethodWriter.getType(field.typeParameter)).     } else {         writer.putField(Type.getType(field.javaField.getDeclaringClass()), field.javaField.getName(), MethodWriter.getType(field.typeParameter)).     } }
false;public;0;4;;@Override public String toString() {     return singleLineToString(prefix, field.javaField.getName()). }
