commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * static method that returns true  */ ;/**  * static method that returns true  */ public static boolean overloadedStatic() {     return true. }
true;public,static;1;3;/**  * static method that returns what you ask it  */ ;/**  * static method that returns what you ask it  */ public static boolean overloadedStatic(boolean whatToReturn) {     return whatToReturn. }
true;public,static;2;3;/**  * static method only whitelisted as a static  */ ;/**  * static method only whitelisted as a static  */ public static float staticAddFloatsTest(float x, float y) {     return x + y. }
true;public,static;1;3;/**  * static method with a type parameter Number  */ ;/**  * static method with a type parameter Number  */ public static int staticNumberTest(Number number) {     return number.intValue(). }
true;public;0;3;/**  * getter for x  */ ;/**  * getter for x  */ public int getX() {     return x. }
true;public;1;3;/**  * setter for x  */ ;/**  * setter for x  */ public void setX(int x) {     this.x = x. }
true;public;0;3;/**  * getter for y  */ ;/**  * getter for y  */ public int getY() {     return y. }
true;public;1;3;/**  * setter for y  */ ;/**  * setter for y  */ public void setY(int y) {     this.y = y. }
true;public;0;3;/**  * getter for i  */ ;/**  * getter for i  */ public Integer getI() {     return i. }
true;public;1;3;/**  * setter for y  */ ;/**  * setter for y  */ public void setI(Integer i) {     this.i = i. }
false;public;4;3;;public Double mixedAdd(int i, Byte b, char c, Float f) {     return (double) (i + b + c + f). }
true;public;2;3;/**  * method taking two functions!  */ ;/**  * method taking two functions!  */ public Object twoFunctionsOfX(Function<Object, Object> f, Function<Object, Object> g) {     return f.apply(g.apply(x)). }
true;public;1;3;/**  * method to take in a list  */ ;/**  * method to take in a list  */ public void listInput(List<Object> list) { }
