commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void markUsedVariable(String name) {     usedVariables.add(name). }
false;public;0;4;;@Override public Set<String> getUsedVariables() {     return unmodifiableSet(usedVariables). }
false;public;1;4;;@Override public void addUsedVariables(FunctionReserved reserved) {     usedVariables.addAll(reserved.getUsedVariables()). }
false;public;1;4;;@Override public void setMaxLoopCounter(int max) {     maxLoopCounter = max. }
false;public;0;4;;@Override public int getMaxLoopCounter() {     return maxLoopCounter. }
false;;1;5;;@Override void extractVariables(Set<String> variables) {     // we should never be extracting from a function, as functions are top-level!     throw new IllegalStateException("Illegal tree structure"). }
false;;1;32;;void generateSignature(PainlessLookup painlessLookup) {     returnType = painlessLookup.canonicalTypeNameToType(rtnTypeStr).     if (returnType == null) {         throw createError(new IllegalArgumentException("Illegal return type [" + rtnTypeStr + "] for function [" + name + "].")).     }     if (paramTypeStrs.size() != paramNameStrs.size()) {         throw createError(new IllegalStateException("Illegal tree structure.")).     }     Class<?>[] paramClasses = new Class<?>[this.paramTypeStrs.size()].     List<Class<?>> paramTypes = new ArrayList<>().     for (int param = 0. param < this.paramTypeStrs.size(). ++param) {         Class<?> paramType = painlessLookup.canonicalTypeNameToType(this.paramTypeStrs.get(param)).         if (paramType == null) {             throw createError(new IllegalArgumentException("Illegal parameter type [" + this.paramTypeStrs.get(param) + "] for function [" + name + "].")).         }         paramClasses[param] = PainlessLookupUtility.typeToJavaType(paramType).         paramTypes.add(paramType).         parameters.add(new Parameter(location, paramNameStrs.get(param), paramType)).     }     typeParameters = paramTypes.     methodType = MethodType.methodType(PainlessLookupUtility.typeToJavaType(returnType), paramClasses).     method = new org.objectweb.asm.commons.Method(name, MethodType.methodType(PainlessLookupUtility.typeToJavaType(returnType), paramClasses).toMethodDescriptorString()). }
false;;1;33;;@Override void analyze(Locals locals) {     if (statements == null || statements.isEmpty()) {         throw createError(new IllegalArgumentException("Cannot generate an empty function [" + name + "].")).     }     locals = Locals.newLocalScope(locals).     AStatement last = statements.get(statements.size() - 1).     for (AStatement statement : statements) {         // there is no statement that can be unreachable after the last.         if (allEscape) {             throw createError(new IllegalArgumentException("Unreachable statement.")).         }         statement.lastSource = statement == last.         statement.analyze(locals).         methodEscape = statement.methodEscape.         allEscape = statement.allEscape.     }     if (!methodEscape && returnType != void.class) {         throw createError(new IllegalArgumentException("Not all paths provide a return value for method [" + name + "].")).     }     if (reserved.getMaxLoopCounter() > 0) {         loop = locals.getVariable(null, Locals.LOOP).     } }
true;;3;10;/**  * Writes the function to given ClassVisitor.  */ ;/**  * Writes the function to given ClassVisitor.  */ void write(ClassVisitor writer, CompilerSettings settings, Globals globals) {     int access = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC.     if (synthetic) {         access |= Opcodes.ACC_SYNTHETIC.     }     final MethodWriter function = new MethodWriter(access, method, writer, globals.getStatements(), settings).     function.visitCode().     write(function, globals).     function.endMethod(). }
false;;2;21;;@Override void write(MethodWriter function, Globals globals) {     if (reserved.getMaxLoopCounter() > 0) {         // if there is infinite loop protection, we do this once:         // int #loop = settings.getMaxLoopCounter()         function.push(reserved.getMaxLoopCounter()).         function.visitVarInsn(Opcodes.ISTORE, loop.getSlot()).     }     for (AStatement statement : statements) {         statement.write(function, globals).     }     if (!methodEscape) {         if (returnType == void.class) {             function.returnValue().         } else {             throw createError(new IllegalStateException("Illegal tree structure.")).         }     } }
false;public;0;10;;@Override public String toString() {     List<Object> description = new ArrayList<>().     description.add(rtnTypeStr).     description.add(name).     if (false == (paramTypeStrs.isEmpty() && paramNameStrs.isEmpty())) {         description.add(joinWithName("Args", pairwiseToString(paramTypeStrs, paramNameStrs), emptyList())).     }     return multilineToString(description, statements). }
