commented;modifiers;parameterAmount;loc;comment;code
false;;1;8;;@Override void extractVariables(Set<String> variables) {     variables.add(name).     if (expression != null) {         expression.extractVariables(variables).     } }
false;;1;16;;@Override void analyze(Locals locals) {     Class<?> clazz = locals.getPainlessLookup().canonicalTypeNameToType(this.type).     if (clazz == null) {         throw createError(new IllegalArgumentException("Not a type [" + this.type + "].")).     }     if (expression != null) {         expression.expected = clazz.         expression.analyze(locals).         expression = expression.cast(locals).     }     variable = locals.addVariable(location, clazz, name, false). }
false;;2;25;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     if (expression == null) {         Class<?> sort = variable.clazz.         if (sort == void.class || sort == boolean.class || sort == byte.class || sort == short.class || sort == char.class || sort == int.class) {             writer.push(0).         } else if (sort == long.class) {             writer.push(0L).         } else if (sort == float.class) {             writer.push(0F).         } else if (sort == double.class) {             writer.push(0D).         } else {             writer.visitInsn(Opcodes.ACONST_NULL).         }     } else {         expression.write(writer, globals).     }     writer.visitVarInsn(MethodWriter.getType(variable.clazz).getOpcode(Opcodes.ISTORE), variable.getSlot()). }
false;public;0;7;;@Override public String toString() {     if (expression == null) {         return singleLineToString(type, name).     }     return singleLineToString(type, name, expression). }
