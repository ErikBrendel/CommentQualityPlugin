commented;modifiers;parameterAmount;loc;comment;code
false;;1;9;;@Override void extractVariables(Set<String> variables) {     if (block != null) {         block.extractVariables(variables).     }     for (SCatch expr : catches) {         expr.extractVariables(variables).     } }
false;;1;38;;@Override void analyze(Locals locals) {     if (block == null) {         throw createError(new IllegalArgumentException("Extraneous try statement.")).     }     block.lastSource = lastSource.     block.inLoop = inLoop.     block.lastLoop = lastLoop.     block.analyze(Locals.newLocalScope(locals)).     methodEscape = block.methodEscape.     loopEscape = block.loopEscape.     allEscape = block.allEscape.     anyContinue = block.anyContinue.     anyBreak = block.anyBreak.     int statementCount = 0.     for (SCatch catc : catches) {         catc.lastSource = lastSource.         catc.inLoop = inLoop.         catc.lastLoop = lastLoop.         catc.analyze(Locals.newLocalScope(locals)).         methodEscape &= catc.methodEscape.         loopEscape &= catc.loopEscape.         allEscape &= catc.allEscape.         anyContinue |= catc.anyContinue.         anyBreak |= catc.anyBreak.         statementCount = Math.max(statementCount, catc.statementCount).     }     this.statementCount = block.statementCount + statementCount. }
false;;2;31;;@Override void write(MethodWriter writer, Globals globals) {     writer.writeStatementOffset(location).     Label begin = new Label().     Label end = new Label().     Label exception = new Label().     writer.mark(begin).     block.continu = continu.     block.brake = brake.     block.write(writer, globals).     if (!block.allEscape) {         writer.goTo(exception).     }     writer.mark(end).     for (SCatch catc : catches) {         catc.begin = begin.         catc.end = end.         catc.exception = catches.size() > 1 ? exception : null.         catc.write(writer, globals).     }     if (!block.allEscape || catches.size() > 1) {         writer.mark(exception).     } }
false;public;0;4;;@Override public String toString() {     return multilineToString(singleton(block), catches). }
