commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getType() {     return MatrixStatsAggregationBuilder.NAME. }
false;private;1;3;;private void setDocCount(long docCount) {     this.docCount = docCount. }
false;public;0;4;;@Override public long getDocCount() {     return docCount. }
false;public;1;7;;@Override public long getFieldCount(String field) {     if (counts.containsKey(field) == false) {         return 0.     }     return counts.get(field). }
false;public;1;4;;@Override public double getMean(String field) {     return checkedGet(means, field). }
false;public;1;4;;@Override public double getVariance(String field) {     return checkedGet(variances, field). }
false;public;1;4;;@Override public double getSkewness(String field) {     return checkedGet(skewness, field). }
false;public;1;4;;@Override public double getKurtosis(String field) {     return checkedGet(kurtosis, field). }
false;public;2;7;;@Override public double getCovariance(String fieldX, String fieldY) {     if (fieldX.equals(fieldY)) {         return checkedGet(variances, fieldX).     }     return MatrixStatsResults.getValFromUpperTriangularMatrix(covariances, fieldX, fieldY). }
false;public;2;7;;@Override public double getCorrelation(String fieldX, String fieldY) {     if (fieldX.equals(fieldY)) {         return 1.0.     }     return MatrixStatsResults.getValFromUpperTriangularMatrix(correlations, fieldX, fieldY). }
false;protected;2;39;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(CommonFields.DOC_COUNT.getPreferredName(), getDocCount()).     if (counts != null && counts.isEmpty() == false) {         builder.startArray(InternalMatrixStats.Fields.FIELDS).         for (String fieldName : counts.keySet()) {             builder.startObject().             builder.field(InternalMatrixStats.Fields.NAME, fieldName).             builder.field(InternalMatrixStats.Fields.COUNT, getFieldCount(fieldName)).             builder.field(InternalMatrixStats.Fields.MEAN, getMean(fieldName)).             builder.field(InternalMatrixStats.Fields.VARIANCE, getVariance(fieldName)).             builder.field(InternalMatrixStats.Fields.SKEWNESS, getSkewness(fieldName)).             builder.field(InternalMatrixStats.Fields.KURTOSIS, getKurtosis(fieldName)).             {                 builder.startObject(InternalMatrixStats.Fields.COVARIANCE).                 Map<String, Double> covars = covariances.get(fieldName).                 if (covars != null) {                     for (Map.Entry<String, Double> covar : covars.entrySet()) {                         builder.field(covar.getKey(), covar.getValue()).                     }                 }                 builder.endObject().             }             {                 builder.startObject(InternalMatrixStats.Fields.CORRELATION).                 Map<String, Double> correls = correlations.get(fieldName).                 if (correls != null) {                     for (Map.Entry<String, Double> correl : correls.entrySet()) {                         builder.field(correl.getKey(), correl.getValue()).                     }                 }                 builder.endObject().             }             builder.endObject().         }         builder.endArray().     }     return builder. }
false;private,static;2;9;;private static <T> T checkedGet(final Map<String, T> values, final String fieldName) {     if (fieldName == null) {         throw new IllegalArgumentException("field name cannot be null").     }     if (values.containsKey(fieldName) == false) {         throw new IllegalArgumentException("field " + fieldName + " does not exist").     }     return values.get(fieldName). }
false;public,static;2;5;;public static ParsedMatrixStats fromXContent(XContentParser parser, String name) throws IOException {     ParsedMatrixStats aggregation = PARSER.parse(parser, null).     aggregation.setName(name).     return aggregation. }
false;private,static;1;6;;private static Double mapValueAsDouble(Object value) {     if (value instanceof Double) {         return (Double) value.     }     return Double.valueOf(Objects.toString(value)). }
false;static;1;3;;static ParsedMatrixStatsResult fromXContent(XContentParser parser) throws IOException {     return RESULT_PARSER.parse(parser, null). }
