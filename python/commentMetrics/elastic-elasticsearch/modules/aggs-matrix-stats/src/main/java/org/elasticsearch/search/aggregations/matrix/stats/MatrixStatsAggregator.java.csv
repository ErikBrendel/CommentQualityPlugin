commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ScoreMode scoreMode() {     return (valuesSources != null && valuesSources.needsScores()) ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES. }
false;public;2;15;;@Override public void collect(int doc, long bucket) throws IOException {     // get fields     if (includeDocument(doc) == true) {         stats = bigArrays.grow(stats, bucket + 1).         RunningStats stat = stats.get(bucket).         // add document fields to correlation stats         if (stat == null) {             stat = new RunningStats(fieldNames, fieldVals).             stats.set(bucket, stat).         } else {             stat.add(fieldNames, fieldVals).         }     } }
true;private;1;17;/**  * return a map of field names and data  */ ;/**  * return a map of field names and data  */ private boolean includeDocument(int doc) throws IOException {     // loop over fields     for (int i = 0. i < fieldVals.length. ++i) {         final NumericDoubleValues doubleValues = values[i].         if (doubleValues.advanceExact(doc)) {             final double value = doubleValues.doubleValue().             if (value == Double.NEGATIVE_INFINITY) {                 // TODO: Fix matrix stats to treat neg inf as any other value                 return false.             }             fieldVals[i] = value.         } else {             return false.         }     }     return true. }
false;public;2;54;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {     if (valuesSources == null) {         return LeafBucketCollector.NO_OP_COLLECTOR.     }     final BigArrays bigArrays = context.bigArrays().     final NumericDoubleValues[] values = new NumericDoubleValues[valuesSources.fieldNames().length].     for (int i = 0. i < values.length. ++i) {         values[i] = valuesSources.getField(i, ctx).     }     return new LeafBucketCollectorBase(sub, values) {          final String[] fieldNames = valuesSources.fieldNames().          final double[] fieldVals = new double[fieldNames.length].          @Override         public void collect(int doc, long bucket) throws IOException {             // get fields             if (includeDocument(doc) == true) {                 stats = bigArrays.grow(stats, bucket + 1).                 RunningStats stat = stats.get(bucket).                 // add document fields to correlation stats                 if (stat == null) {                     stat = new RunningStats(fieldNames, fieldVals).                     stats.set(bucket, stat).                 } else {                     stat.add(fieldNames, fieldVals).                 }             }         }          /**          * return a map of field names and data          */         private boolean includeDocument(int doc) throws IOException {             // loop over fields             for (int i = 0. i < fieldVals.length. ++i) {                 final NumericDoubleValues doubleValues = values[i].                 if (doubleValues.advanceExact(doc)) {                     final double value = doubleValues.doubleValue().                     if (value == Double.NEGATIVE_INFINITY) {                         // TODO: Fix matrix stats to treat neg inf as any other value                         return false.                     }                     fieldVals[i] = value.                 } else {                     return false.                 }             }             return true.         }     }. }
false;public;1;7;;@Override public InternalAggregation buildAggregation(long bucket) {     if (valuesSources == null || bucket >= stats.size()) {         return buildEmptyAggregation().     }     return new InternalMatrixStats(name, stats.size(), stats.get(bucket), null, pipelineAggregators(), metaData()). }
false;public;0;4;;@Override public InternalAggregation buildEmptyAggregation() {     return new InternalMatrixStats(name, 0, null, null, pipelineAggregators(), metaData()). }
false;public;0;4;;@Override public void doClose() {     Releasables.close(stats). }
