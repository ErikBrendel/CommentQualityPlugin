commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeOptionalWriteable(stats).     out.writeOptionalWriteable(results). }
false;public;0;4;;@Override public String getWriteableName() {     return MatrixStatsAggregationBuilder.NAME. }
true;public;0;7;/**  * get the number of documents  */ ;/**  * get the number of documents  */ @Override public long getDocCount() {     if (stats == null) {         return 0.     }     return stats.docCount. }
true;public;1;7;/**  * get the number of samples for the given field. == docCount - numMissing  */ ;/**  * get the number of samples for the given field. == docCount - numMissing  */ @Override public long getFieldCount(String field) {     if (results == null) {         return 0.     }     return results.getFieldCount(field). }
true;public;1;7;/**  * get the mean for the given field  */ ;/**  * get the mean for the given field  */ @Override public double getMean(String field) {     if (results == null) {         return Double.NaN.     }     return results.getMean(field). }
true;public;1;7;/**  * get the variance for the given field  */ ;/**  * get the variance for the given field  */ @Override public double getVariance(String field) {     if (results == null) {         return Double.NaN.     }     return results.getVariance(field). }
true;public;1;7;/**  * get the distribution skewness for the given field  */ ;/**  * get the distribution skewness for the given field  */ @Override public double getSkewness(String field) {     if (results == null) {         return Double.NaN.     }     return results.getSkewness(field). }
true;public;1;7;/**  * get the distribution shape for the given field  */ ;/**  * get the distribution shape for the given field  */ @Override public double getKurtosis(String field) {     if (results == null) {         return Double.NaN.     }     return results.getKurtosis(field). }
true;public;2;7;/**  * get the covariance between the two fields  */ ;/**  * get the covariance between the two fields  */ @Override public double getCovariance(String fieldX, String fieldY) {     if (results == null) {         return Double.NaN.     }     return results.getCovariance(fieldX, fieldY). }
true;public;2;7;/**  * get the correlation between the two fields  */ ;/**  * get the correlation between the two fields  */ @Override public double getCorrelation(String fieldX, String fieldY) {     if (results == null) {         return Double.NaN.     }     return results.getCorrelation(fieldX, fieldY). }
false;;0;3;;RunningStats getStats() {     return stats. }
false;;0;3;;MatrixStatsResults getResults() {     return results. }
false;public;2;37;;@Override public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(CommonFields.DOC_COUNT.getPreferredName(), getDocCount()).     if (results != null && results.getFieldCounts().keySet().isEmpty() == false) {         builder.startArray(Fields.FIELDS).         for (String fieldName : results.getFieldCounts().keySet()) {             builder.startObject().             // name             builder.field(Fields.NAME, fieldName).             // count             builder.field(Fields.COUNT, results.getFieldCount(fieldName)).             // mean             builder.field(Fields.MEAN, results.getMean(fieldName)).             // variance             builder.field(Fields.VARIANCE, results.getVariance(fieldName)).             // skewness             builder.field(Fields.SKEWNESS, results.getSkewness(fieldName)).             // kurtosis             builder.field(Fields.KURTOSIS, results.getKurtosis(fieldName)).             // covariance             builder.startObject(Fields.COVARIANCE).             for (String fieldB : results.getFieldCounts().keySet()) {                 builder.field(fieldB, results.getCovariance(fieldName, fieldB)).             }             builder.endObject().             // correlation             builder.startObject(Fields.CORRELATION).             for (String fieldB : results.getFieldCounts().keySet()) {                 builder.field(fieldB, results.getCorrelation(fieldName, fieldB)).             }             builder.endObject().             builder.endObject().         }         builder.endArray().     }     return builder. }
false;public;1;31;;@Override public Object getProperty(List<String> path) {     if (path.isEmpty()) {         return this.     } else if (path.size() == 1) {         String element = path.get(0).         if (results == null) {             return emptyMap().         }         switch(element) {             case "counts":                 return results.getFieldCounts().             case "means":                 return results.getMeans().             case "variances":                 return results.getVariances().             case "skewness":                 return results.getSkewness().             case "kurtosis":                 return results.getKurtosis().             case "covariance":                 return results.getCovariances().             case "correlation":                 return results.getCorrelations().             default:                 throw new IllegalArgumentException("Found unknown path element [" + element + "] in [" + getName() + "]").         }     } else {         throw new IllegalArgumentException("path not supported for [" + getName() + "]: " + path).     } }
false;public;2;22;;@Override public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {     // merge stats across all shards     List<InternalAggregation> aggs = new ArrayList<>(aggregations).     aggs.removeIf(p -> ((InternalMatrixStats) p).stats == null).     // return empty result iff all stats are null     if (aggs.isEmpty()) {         return new InternalMatrixStats(name, 0, null, new MatrixStatsResults(), pipelineAggregators(), getMetaData()).     }     RunningStats runningStats = new RunningStats().     for (InternalAggregation agg : aggs) {         runningStats.merge(((InternalMatrixStats) agg).stats).     }     if (reduceContext.isFinalReduce()) {         MatrixStatsResults results = new MatrixStatsResults(runningStats).         return new InternalMatrixStats(name, results.getDocCount(), runningStats, results, pipelineAggregators(), getMetaData()).     }     return new InternalMatrixStats(name, runningStats.docCount, runningStats, null, pipelineAggregators(), getMetaData()). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(stats, results). }
false;protected;1;6;;@Override protected boolean doEquals(Object obj) {     InternalMatrixStats other = (InternalMatrixStats) obj.     return Objects.equals(this.stats, other.stats) && Objects.equals(this.results, other.results). }
