commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public void setUp() throws Exception {     super.setUp().     hasMatrixStatsResults = frequently().     int numFields = hasMatrixStatsResults ? randomInt(128) : 0.     fields = new String[numFields].     for (int i = 0. i < numFields. i++) {         fields[i] = "field_" + i.     } }
false;protected;0;7;;@Override protected List<NamedXContentRegistry.Entry> getNamedXContents() {     List<NamedXContentRegistry.Entry> namedXContents = new ArrayList<>(getDefaultNamedXContents()).     ContextParser<Object, Aggregation> parser = (p, c) -> ParsedMatrixStats.fromXContent(p, (String) c).     namedXContents.add(new NamedXContentRegistry.Entry(Aggregation.class, new ParseField(MatrixStatsAggregationBuilder.NAME), parser)).     return namedXContents. }
false;protected;3;13;;@Override protected InternalMatrixStats createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     double[] values = new double[fields.length].     for (int i = 0. i < fields.length. i++) {         values[i] = randomDouble().     }     RunningStats runningStats = new RunningStats().     runningStats.add(fields, values).     MatrixStatsResults matrixStatsResults = hasMatrixStatsResults ? new MatrixStatsResults(runningStats) : null.     return new InternalMatrixStats(name, 1L, runningStats, matrixStatsResults, Collections.emptyList(), metaData). }
false;protected;0;4;;@Override protected Writeable.Reader<InternalMatrixStats> instanceReader() {     return InternalMatrixStats::new. }
false;protected;1;40;;@Override protected InternalMatrixStats mutateInstance(InternalMatrixStats instance) {     String name = instance.getName().     long docCount = instance.getDocCount().     RunningStats runningStats = instance.getStats().     MatrixStatsResults matrixStatsResults = instance.getResults().     Map<String, Object> metaData = instance.getMetaData().     switch(between(0, 3)) {         case 0:             name += randomAlphaOfLength(5).             break.         case 1:             String[] fields = Arrays.copyOf(this.fields, this.fields.length + 1).             fields[fields.length - 1] = "field_" + (fields.length - 1).             double[] values = new double[fields.length].             for (int i = 0. i < fields.length. i++) {                 values[i] = randomDouble() * 200.             }             runningStats = new RunningStats().             runningStats.add(fields, values).             break.         case 2:             if (matrixStatsResults == null) {                 matrixStatsResults = new MatrixStatsResults(runningStats).             } else {                 matrixStatsResults = null.             }             break.         case 3:         default:             if (metaData == null) {                 metaData = new HashMap<>(1).             } else {                 metaData = new HashMap<>(instance.getMetaData()).             }             metaData.put(randomAlphaOfLength(15), randomInt()).             break.     }     return new InternalMatrixStats(name, docCount, runningStats, matrixStatsResults, Collections.emptyList(), metaData). }
false;public;0;40;;@Override public void testReduceRandom() {     int numValues = 10000.     int numShards = randomIntBetween(1, 20).     int valuesPerShard = (int) Math.floor(numValues / numShards).     List<Double> aValues = new ArrayList<>().     List<Double> bValues = new ArrayList<>().     RunningStats runningStats = new RunningStats().     List<InternalAggregation> shardResults = new ArrayList<>().     int valuePerShardCounter = 0.     for (int i = 0. i < numValues. i++) {         double valueA = randomDouble().         aValues.add(valueA).         double valueB = randomDouble().         bValues.add(valueB).         runningStats.add(new String[] { "a", "b" }, new double[] { valueA, valueB }).         if (++valuePerShardCounter == valuesPerShard) {             shardResults.add(new InternalMatrixStats("_name", 1L, runningStats, null, Collections.emptyList(), Collections.emptyMap())).             runningStats = new RunningStats().             valuePerShardCounter = 0.         }     }     if (valuePerShardCounter != 0) {         shardResults.add(new InternalMatrixStats("_name", 1L, runningStats, null, Collections.emptyList(), Collections.emptyMap())).     }     MultiPassStats multiPassStats = new MultiPassStats("a", "b").     multiPassStats.computeStats(aValues, bValues).     ScriptService mockScriptService = mockScriptService().     MockBigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService()).     InternalAggregation.ReduceContext context = new InternalAggregation.ReduceContext(bigArrays, mockScriptService, true).     InternalMatrixStats reduced = (InternalMatrixStats) shardResults.get(0).reduce(shardResults, context).     multiPassStats.assertNearlyEqual(reduced.getResults()). }
false;protected;2;4;;@Override protected void assertReduced(InternalMatrixStats reduced, List<InternalMatrixStats> inputs) {     throw new UnsupportedOperationException(). }
false;protected;2;42;;@Override protected void assertFromXContent(InternalMatrixStats expected, ParsedAggregation parsedAggregation) throws IOException {     assertTrue(parsedAggregation instanceof ParsedMatrixStats).     ParsedMatrixStats actual = (ParsedMatrixStats) parsedAggregation.     assertEquals(expected.getDocCount(), actual.getDocCount()).     for (String field : fields) {         assertEquals(expected.getFieldCount(field), actual.getFieldCount(field)).         assertEquals(expected.getMean(field), actual.getMean(field), 0.0).         assertEquals(expected.getVariance(field), actual.getVariance(field), 0.0).         assertEquals(expected.getSkewness(field), actual.getSkewness(field), 0.0).         assertEquals(expected.getKurtosis(field), actual.getKurtosis(field), 0.0).         for (String other : fields) {             assertEquals(expected.getCovariance(field, other), actual.getCovariance(field, other), 0.0).             assertEquals(expected.getCorrelation(field, other), actual.getCorrelation(field, other), 0.0).         }     }     final String unknownField = randomAlphaOfLength(3).     final String other = randomValueOtherThan(unknownField, () -> randomAlphaOfLength(3)).     for (MatrixStats matrix : Arrays.asList(actual)) {         // getFieldCount returns 0 for unknown fields         assertEquals(0.0, matrix.getFieldCount(unknownField), 0.0).         expectThrows(IllegalArgumentException.class, () -> matrix.getMean(unknownField)).         expectThrows(IllegalArgumentException.class, () -> matrix.getVariance(unknownField)).         expectThrows(IllegalArgumentException.class, () -> matrix.getSkewness(unknownField)).         expectThrows(IllegalArgumentException.class, () -> matrix.getKurtosis(unknownField)).         expectThrows(IllegalArgumentException.class, () -> matrix.getCovariance(unknownField, unknownField)).         expectThrows(IllegalArgumentException.class, () -> matrix.getCovariance(unknownField, other)).         expectThrows(IllegalArgumentException.class, () -> matrix.getCovariance(other, unknownField)).         assertEquals(1.0, matrix.getCorrelation(unknownField, unknownField), 0.0).         expectThrows(IllegalArgumentException.class, () -> matrix.getCorrelation(unknownField, other)).         expectThrows(IllegalArgumentException.class, () -> matrix.getCorrelation(other, unknownField)).     } }
false;protected;0;4;;@Override protected Predicate<String> excludePathsFromXContentInsertion() {     return path -> path.endsWith(Fields.CORRELATION) || path.endsWith(Fields.COVARIANCE). }
