commented;modifiers;parameterAmount;loc;comment;code
false;public;0;34;;public void testReindexRequest() throws IOException {     ReindexRequest reindex = new ReindexRequest().     randomRequest(reindex).     reindex.getDestination().version(randomFrom(Versions.MATCH_ANY, Versions.MATCH_DELETED, 12L, 1L, 123124L, 12L)).     reindex.getDestination().index("test").     if (randomBoolean()) {         int port = between(1, Integer.MAX_VALUE).         BytesReference query = new BytesArray(randomAlphaOfLength(5)).         String username = randomBoolean() ? randomAlphaOfLength(5) : null.         String password = username != null && randomBoolean() ? randomAlphaOfLength(5) : null.         int headersCount = randomBoolean() ? 0 : between(1, 10).         Map<String, String> headers = new HashMap<>(headersCount).         while (headers.size() < headersCount) {             headers.put(randomAlphaOfLength(5), randomAlphaOfLength(5)).         }         TimeValue socketTimeout = parseTimeValue(randomPositiveTimeValue(), "socketTimeout").         TimeValue connectTimeout = parseTimeValue(randomPositiveTimeValue(), "connectTimeout").         reindex.setRemoteInfo(new RemoteInfo(randomAlphaOfLength(5), randomAlphaOfLength(5), port, null, query, username, password, headers, socketTimeout, connectTimeout)).     }     ReindexRequest tripped = new ReindexRequest(toInputByteStream(reindex)).     assertRequestEquals(reindex, tripped).     // Try slices=auto with a version that doesn't support it, which should fail     reindex.setSlices(AbstractBulkByScrollRequest.AUTO_SLICES).     Exception e = expectThrows(IllegalArgumentException.class, () -> toInputByteStream(Version.V_6_0_0_alpha1, reindex)).     assertEquals("Slices set as \"auto\" are not supported before version [6.1.0]. Found version [6.0.0-alpha1]", e.getMessage()).     // Try regular slices with a version that doesn't support slices=auto, which should succeed     reindex.setSlices(between(1, Integer.MAX_VALUE)).     tripped = new ReindexRequest(toInputByteStream(reindex)).     assertRequestEquals(Version.V_6_0_0_alpha1, reindex, tripped). }
false;public;0;21;;public void testUpdateByQueryRequest() throws IOException {     UpdateByQueryRequest update = new UpdateByQueryRequest().     randomRequest(update).     if (randomBoolean()) {         update.setPipeline(randomAlphaOfLength(5)).     }     UpdateByQueryRequest tripped = new UpdateByQueryRequest(toInputByteStream(update)).     assertRequestEquals(update, tripped).     assertEquals(update.getPipeline(), tripped.getPipeline()).     // Try slices=auto with a version that doesn't support it, which should fail     update.setSlices(AbstractBulkByScrollRequest.AUTO_SLICES).     Exception e = expectThrows(IllegalArgumentException.class, () -> toInputByteStream(Version.V_6_0_0_alpha1, update)).     assertEquals("Slices set as \"auto\" are not supported before version [6.1.0]. Found version [6.0.0-alpha1]", e.getMessage()).     // Try regular slices with a version that doesn't support slices=auto, which should succeed     update.setSlices(between(1, Integer.MAX_VALUE)).     tripped = new UpdateByQueryRequest(toInputByteStream(update)).     assertRequestEquals(update, tripped).     assertEquals(update.getPipeline(), tripped.getPipeline()). }
false;public;0;16;;public void testDeleteByQueryRequest() throws IOException {     DeleteByQueryRequest delete = new DeleteByQueryRequest().     randomRequest(delete).     DeleteByQueryRequest tripped = new DeleteByQueryRequest(toInputByteStream(delete)).     assertRequestEquals(delete, tripped).     // Try slices=auto with a version that doesn't support it, which should fail     delete.setSlices(AbstractBulkByScrollRequest.AUTO_SLICES).     Exception e = expectThrows(IllegalArgumentException.class, () -> toInputByteStream(Version.V_6_0_0_alpha1, delete)).     assertEquals("Slices set as \"auto\" are not supported before version [6.1.0]. Found version [6.0.0-alpha1]", e.getMessage()).     // Try regular slices with a version that doesn't support slices=auto, which should succeed     delete.setSlices(between(1, Integer.MAX_VALUE)).     tripped = new DeleteByQueryRequest(toInputByteStream(delete)).     assertRequestEquals(delete, tripped). }
false;private;1;15;;private void randomRequest(AbstractBulkByScrollRequest<?> request) {     request.getSearchRequest().indices("test").     request.getSearchRequest().source().size(between(1, 1000)).     if (randomBoolean()) {         request.setSize(between(1, Integer.MAX_VALUE)).     }     request.setAbortOnVersionConflict(random().nextBoolean()).     request.setRefresh(rarely()).     request.setTimeout(TimeValue.parseTimeValue(randomTimeValue(), null, "test")).     request.setWaitForActiveShards(randomIntBetween(0, 10)).     request.setRequestsPerSecond(between(0, Integer.MAX_VALUE)).     int slices = ReindexTestCase.randomSlices(1, Integer.MAX_VALUE).     request.setSlices(slices). }
false;private;1;4;;private void randomRequest(AbstractBulkIndexByScrollRequest<?> request) {     randomRequest((AbstractBulkByScrollRequest<?>) request).     request.setScript(random().nextBoolean() ? null : randomScript()). }
false;private;3;18;;private void assertRequestEquals(Version version, ReindexRequest request, ReindexRequest tripped) {     assertRequestEquals((AbstractBulkIndexByScrollRequest<?>) request, (AbstractBulkIndexByScrollRequest<?>) tripped).     assertEquals(request.getDestination().version(), tripped.getDestination().version()).     assertEquals(request.getDestination().index(), tripped.getDestination().index()).     if (request.getRemoteInfo() == null) {         assertNull(tripped.getRemoteInfo()).     } else {         assertNotNull(tripped.getRemoteInfo()).         assertEquals(request.getRemoteInfo().getScheme(), tripped.getRemoteInfo().getScheme()).         assertEquals(request.getRemoteInfo().getHost(), tripped.getRemoteInfo().getHost()).         assertEquals(request.getRemoteInfo().getQuery(), tripped.getRemoteInfo().getQuery()).         assertEquals(request.getRemoteInfo().getUsername(), tripped.getRemoteInfo().getUsername()).         assertEquals(request.getRemoteInfo().getPassword(), tripped.getRemoteInfo().getPassword()).         assertEquals(request.getRemoteInfo().getHeaders(), tripped.getRemoteInfo().getHeaders()).         assertEquals(request.getRemoteInfo().getSocketTimeout(), tripped.getRemoteInfo().getSocketTimeout()).         assertEquals(request.getRemoteInfo().getConnectTimeout(), tripped.getRemoteInfo().getConnectTimeout()).     } }
false;private;2;5;;private void assertRequestEquals(AbstractBulkIndexByScrollRequest<?> request, AbstractBulkIndexByScrollRequest<?> tripped) {     assertRequestEquals((AbstractBulkByScrollRequest<?>) request, (AbstractBulkByScrollRequest<?>) tripped).     assertEquals(request.getScript(), tripped.getScript()). }
false;private;2;11;;private void assertRequestEquals(AbstractBulkByScrollRequest<?> request, AbstractBulkByScrollRequest<?> tripped) {     assertArrayEquals(request.getSearchRequest().indices(), tripped.getSearchRequest().indices()).     assertEquals(request.getSearchRequest().source().size(), tripped.getSearchRequest().source().size()).     assertEquals(request.isAbortOnVersionConflict(), tripped.isAbortOnVersionConflict()).     assertEquals(request.isRefresh(), tripped.isRefresh()).     assertEquals(request.getTimeout(), tripped.getTimeout()).     assertEquals(request.getWaitForActiveShards(), tripped.getWaitForActiveShards()).     assertEquals(request.getRetryBackoffInitialTime(), tripped.getRetryBackoffInitialTime()).     assertEquals(request.getMaxRetries(), tripped.getMaxRetries()).     assertEquals(request.getRequestsPerSecond(), tripped.getRequestsPerSecond(), 0d). }
false;public;0;13;;public void testRethrottleRequest() throws IOException {     RethrottleRequest request = new RethrottleRequest().     request.setRequestsPerSecond((float) randomDoubleBetween(0, Float.POSITIVE_INFINITY, false)).     if (randomBoolean()) {         request.setActions(randomFrom(UpdateByQueryAction.NAME, ReindexAction.NAME)).     } else {         request.setTaskId(new TaskId(randomAlphaOfLength(5), randomLong())).     }     RethrottleRequest tripped = new RethrottleRequest(toInputByteStream(request)).     assertEquals(request.getRequestsPerSecond(), tripped.getRequestsPerSecond(), 0.00001).     assertArrayEquals(request.getActions(), tripped.getActions()).     assertEquals(request.getTaskId(), tripped.getTaskId()). }
false;private;1;3;;private StreamInput toInputByteStream(Streamable example) throws IOException {     return toInputByteStream(Version.CURRENT, example). }
false;private;2;8;;private StreamInput toInputByteStream(Version version, Streamable example) throws IOException {     BytesStreamOutput out = new BytesStreamOutput().     out.setVersion(version).     example.writeTo(out).     StreamInput in = out.bytes().streamInput().     in.setVersion(version).     return in. }
false;private;0;10;;private Script randomScript() {     ScriptType type = randomFrom(ScriptType.values()).     String lang = random().nextBoolean() ? Script.DEFAULT_SCRIPT_LANG : randomSimpleString(random()).     String idOrCode = randomSimpleString(random()).     Map<String, Object> params = Collections.emptyMap().     type = ScriptType.STORED.     return new Script(type, type == ScriptType.STORED ? null : lang, idOrCode, params). }
