# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1524684173;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1527840262;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1529433467;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1529600205;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1537806831;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1539615817;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controlled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controlled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1542213184;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controlled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controlled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1544035746;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controlled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controlled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1548775385;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controlled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controlled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1548918365;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controlled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controlled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> private void bulkRetryTestCase(boolean failWithRejection) throws Exception;1548953505;Execute a bulk retry test case. The total number of failures is random and the number of retries attempted is set to_testRequest.getMaxRetries and controlled by the failWithRejection parameter.;private void bulkRetryTestCase(boolean failWithRejection) throws Exception {_        int totalFailures = randomIntBetween(1, testRequest.getMaxRetries())__        int size = randomIntBetween(1, 100)__        testRequest.setMaxRetries(totalFailures - (failWithRejection ? 1 : 0))___        client.bulksToReject = client.bulksAttempts.get() + totalFailures__        _        CountDownLatch successLatch = new CountDownLatch(1)__        DummyAsyncBulkByScrollAction action = new DummyActionWithoutBackoff() {_            @Override_            void startNextScroll(TimeValue lastBatchStartTime, TimeValue now, int lastBatchSize) {_                successLatch.countDown()__            }_        }__        BulkRequest request = new BulkRequest()__        for (int i = 0_ i < size + 1_ i++) {_            request.add(new IndexRequest("index", "type", "id" + i))__        }_        action.sendBulkRequest(timeValueNanos(System.nanoTime()), request)__        if (failWithRejection) {_            BulkByScrollResponse response = listener.get()__            assertThat(response.getBulkFailures(), hasSize(1))__            assertEquals(response.getBulkFailures().get(0).getStatus(), RestStatus.TOO_MANY_REQUESTS)__            assertThat(response.getSearchFailures(), empty())__            assertNull(response.getReasonCancelled())__        } else {_            assertTrue(successLatch.await(10, TimeUnit.SECONDS))__        }_    };execute,a,bulk,retry,test,case,the,total,number,of,failures,is,random,and,the,number,of,retries,attempted,is,set,to,test,request,get,max,retries,and,controlled,by,the,fail,with,rejection,parameter;private,void,bulk,retry,test,case,boolean,fail,with,rejection,throws,exception,int,total,failures,random,int,between,1,test,request,get,max,retries,int,size,random,int,between,1,100,test,request,set,max,retries,total,failures,fail,with,rejection,1,0,client,bulks,to,reject,client,bulks,attempts,get,total,failures,count,down,latch,success,latch,new,count,down,latch,1,dummy,async,bulk,by,scroll,action,action,new,dummy,action,without,backoff,override,void,start,next,scroll,time,value,last,batch,start,time,time,value,now,int,last,batch,size,success,latch,count,down,bulk,request,request,new,bulk,request,for,int,i,0,i,size,1,i,request,add,new,index,request,index,type,id,i,action,send,bulk,request,time,value,nanos,system,nano,time,request,if,fail,with,rejection,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,has,size,1,assert,equals,response,get,bulk,failures,get,0,get,status,rest,status,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled,else,assert,true,success,latch,await,10,time,unit,seconds
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1524684173;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1527840262;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1529433467;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1529600205;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1537806831;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1539615817;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1542213184;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1544035746;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1548775385;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1548918365;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryWithEnoughRetries() throws Exception;1548953505;Mimicks bulk rejections. These should be retried and eventually succeed.;public void testBulkRejectionsRetryWithEnoughRetries() throws Exception {_        int bulksToTry = randomIntBetween(1, 10)__        long retryAttempts = 0__        for (int i = 0_ i < bulksToTry_ i++) {_            bulkRetryTestCase(false)__            retryAttempts += testRequest.getMaxRetries()__            assertEquals(retryAttempts, testTask.getStatus().getBulkRetries())__        }_    };mimicks,bulk,rejections,these,should,be,retried,and,eventually,succeed;public,void,test,bulk,rejections,retry,with,enough,retries,throws,exception,int,bulks,to,try,random,int,between,1,10,long,retry,attempts,0,for,int,i,0,i,bulks,to,try,i,bulk,retry,test,case,false,retry,attempts,test,request,get,max,retries,assert,equals,retry,attempts,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1524684173;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1527840262;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1529433467;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1529600205;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1537806831;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1539615817;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1542213184;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1544035746;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1548775385;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1548918365;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testShardFailuresAbortRequest() throws Exception;1548953505;Mimicks shard search failures usually caused by the data node serving the_scroll request going down.;public void testShardFailuresAbortRequest() throws Exception {_        SearchFailure shardFailure = new SearchFailure(new RuntimeException("test"))__        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(false, singletonList(shardFailure), 0,_                emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), contains(shardFailure))__        assertFalse(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,shard,search,failures,usually,caused,by,the,data,node,serving,the,scroll,request,going,down;public,void,test,shard,failures,abort,request,throws,exception,search,failure,shard,failure,new,search,failure,new,runtime,exception,test,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,false,singleton,list,shard,failure,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,contains,shard,failure,assert,false,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1524684173;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1527840262;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1529433467;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1529600205;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1537806831;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1539615817;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1542213184;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1544035746;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1548775385;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1548918365;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> public void testDefaultRetryTimes();1548953505;The default retry time matches what we say it is in the javadoc for the request.;public void testDefaultRetryTimes() {_        Iterator<TimeValue> policy = new DummyAsyncBulkByScrollAction().buildBackoffPolicy().iterator()__        long millis = 0__        while (policy.hasNext()) {_            millis += policy.next().millis()__        }_        _        int defaultBackoffBeforeFailing = 59460__        assertEquals(defaultBackoffBeforeFailing, millis)__    };the,default,retry,time,matches,what,we,say,it,is,in,the,javadoc,for,the,request;public,void,test,default,retry,times,iterator,time,value,policy,new,dummy,async,bulk,by,scroll,action,build,backoff,policy,iterator,long,millis,0,while,policy,has,next,millis,policy,next,millis,int,default,backoff,before,failing,59460,assert,equals,default,backoff,before,failing,millis
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1524684173;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1527840262;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1529433467;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1529600205;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1537806831;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1539615817;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1542213184;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1544035746;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1548775385;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1548918365;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,             ScrollableHitSource.Response response);1548953505;Simulate a scroll response by setting the scroll id and firing the onScrollResponse method.;private void simulateScrollResponse(DummyAsyncBulkByScrollAction action, TimeValue lastBatchTime, int lastBatchSize,_            ScrollableHitSource.Response response) {_        action.setScroll(scrollId())__        action.onScrollResponse(lastBatchTime, lastBatchSize, response)__    };simulate,a,scroll,response,by,setting,the,scroll,id,and,firing,the,on,scroll,response,method;private,void,simulate,scroll,response,dummy,async,bulk,by,scroll,action,action,time,value,last,batch,time,int,last,batch,size,scrollable,hit,source,response,response,action,set,scroll,scroll,id,action,on,scroll,response,last,batch,time,last,batch,size,response
AsyncBulkByScrollActionTests -> private String scrollId();1524684173;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1527840262;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1529433467;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1529600205;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1537806831;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1539615817;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1542213184;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1544035746;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1548775385;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1548918365;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> private String scrollId();1548953505;Generates a random scrollId and registers it so that when the test_finishes we check that it was cleared. Subsequent calls reregister a new_random scroll id so it is checked instead.;private String scrollId() {_        scrollId = randomSimpleString(random(), 1, 10)_ _        return scrollId__    };generates,a,random,scroll,id,and,registers,it,so,that,when,the,test,finishes,we,check,that,it,was,cleared,subsequent,calls,reregister,a,new,random,scroll,id,so,it,is,checked,instead;private,string,scroll,id,scroll,id,random,simple,string,random,1,10,return,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1524684173;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1527840262;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1529433467;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1529600205;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1537806831;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1539615817;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1542213184;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1544035746;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1548775385;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1548918365;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testSearchTimeoutsAbortRequest() throws Exception;1548953505;Mimicks search timeouts.;public void testSearchTimeoutsAbortRequest() throws Exception {_        ScrollableHitSource.Response scrollResponse = new ScrollableHitSource.Response(true, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 0, scrollResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), empty())__        assertThat(response.getSearchFailures(), empty())__        assertTrue(response.isTimedOut())__        assertNull(response.getReasonCancelled())__        assertThat(client.scrollsCleared, contains(scrollId))__    };mimicks,search,timeouts;public,void,test,search,timeouts,abort,request,throws,exception,scrollable,hit,source,response,scroll,response,new,scrollable,hit,source,response,true,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,0,scroll,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,empty,assert,that,response,get,search,failures,empty,assert,true,response,is,timed,out,assert,null,response,get,reason,cancelled,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1524684173;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1527840262;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1529433467;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1529600205;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1537806831;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1539615817;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1542213184;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1544035746;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1548775385;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1548918365;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testBulkRejectionsRetryAndFailAnyway() throws Exception;1548953505;Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.;public void testBulkRejectionsRetryAndFailAnyway() throws Exception {_        bulkRetryTestCase(true)__        assertEquals(testRequest.getMaxRetries(), testTask.getStatus().getBulkRetries())__    };mimicks,bulk,rejections,these,should,be,retried,but,we,fail,anyway,because,we,run,out,of,retries;public,void,test,bulk,rejections,retry,and,fail,anyway,throws,exception,bulk,retry,test,case,true,assert,equals,test,request,get,max,retries,test,task,get,status,get,bulk,retries
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1524684173;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                ((AbstractRunnable) command).onRejection(new EsRejectedExecutionException("test"))__                return null__            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,abstract,runnable,command,on,rejection,new,es,rejected,execution,exception,test,return,null,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1527840262;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                ((AbstractRunnable) command).onRejection(new EsRejectedExecutionException("test"))__                return null__            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,abstract,runnable,command,on,rejection,new,es,rejected,execution,exception,test,return,null,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1529433467;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                ((AbstractRunnable) command).onRejection(new EsRejectedExecutionException("test"))__                return null__            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,abstract,runnable,command,on,rejection,new,es,rejected,execution,exception,test,return,null,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1529600205;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                ((AbstractRunnable) command).onRejection(new EsRejectedExecutionException("test"))__                return null__            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,abstract,runnable,command,on,rejection,new,es,rejected,execution,exception,test,return,null,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1537806831;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                ((AbstractRunnable) command).onRejection(new EsRejectedExecutionException("test"))__                return null__            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,abstract,runnable,command,on,rejection,new,es,rejected,execution,exception,test,return,null,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1539615817;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                ((AbstractRunnable) command).onRejection(new EsRejectedExecutionException("test"))__                return null__            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,abstract,runnable,command,on,rejection,new,es,rejected,execution,exception,test,return,null,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1542213184;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                final EsRejectedExecutionException exception = new EsRejectedExecutionException("test")__                if (command instanceof AbstractRunnable) {_                    ((AbstractRunnable) command).onRejection(exception)__                    return null__                } else {_                    throw exception__                }_            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,final,es,rejected,execution,exception,exception,new,es,rejected,execution,exception,test,if,command,instanceof,abstract,runnable,abstract,runnable,command,on,rejection,exception,return,null,else,throw,exception,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1544035746;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                final EsRejectedExecutionException exception = new EsRejectedExecutionException("test")__                if (command instanceof AbstractRunnable) {_                    ((AbstractRunnable) command).onRejection(exception)__                    return null__                } else {_                    throw exception__                }_            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,final,es,rejected,execution,exception,exception,new,es,rejected,execution,exception,test,if,command,instanceof,abstract,runnable,abstract,runnable,command,on,rejection,exception,return,null,else,throw,exception,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1548775385;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                final EsRejectedExecutionException exception = new EsRejectedExecutionException("test")__                if (command instanceof AbstractRunnable) {_                    ((AbstractRunnable) command).onRejection(exception)__                    return null__                } else {_                    throw exception__                }_            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,final,es,rejected,execution,exception,exception,new,es,rejected,execution,exception,test,if,command,instanceof,abstract,runnable,abstract,runnable,command,on,rejection,exception,return,null,else,throw,exception,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1548918365;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                final EsRejectedExecutionException exception = new EsRejectedExecutionException("test")__                if (command instanceof AbstractRunnable) {_                    ((AbstractRunnable) command).onRejection(exception)__                    return null__                } else {_                    throw exception__                }_            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,final,es,rejected,execution,exception,exception,new,es,rejected,execution,exception,test,if,command,instanceof,abstract,runnable,abstract,runnable,command,on,rejection,exception,return,null,else,throw,exception,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testThreadPoolRejectionsAbortRequest() throws Exception;1548953505;Mimicks a ThreadPool rejecting execution of the task.;public void testThreadPoolRejectionsAbortRequest() throws Exception {_        worker.rethrottle(1)__        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String name) {_                _                assertThat(delay.nanos(), greaterThan(0L))__                assertThat(delay.seconds(), lessThanOrEqualTo(10L))__                final EsRejectedExecutionException exception = new EsRejectedExecutionException("test")__                if (command instanceof AbstractRunnable) {_                    ((AbstractRunnable) command).onRejection(exception)__                    return null__                } else {_                    throw exception__                }_            }_        })__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 0, emptyList(), null)__        simulateScrollResponse(new DummyAsyncBulkByScrollAction(), timeValueNanos(System.nanoTime()), 10, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class))__        assertThat(e.getCause(), hasToString(containsString("test")))__        assertThat(client.scrollsCleared, contains(scrollId))___        _        assertEquals(timeValueMillis(0), testTask.getStatus().getThrottled())__    };mimicks,a,thread,pool,rejecting,execution,of,the,task;public,void,test,thread,pool,rejections,abort,request,throws,exception,worker,rethrottle,1,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,cancellable,schedule,runnable,command,time,value,delay,string,name,assert,that,delay,nanos,greater,than,0l,assert,that,delay,seconds,less,than,or,equal,to,10l,final,es,rejected,execution,exception,exception,new,es,rejected,execution,exception,test,if,command,instanceof,abstract,runnable,abstract,runnable,command,on,rejection,exception,return,null,else,throw,exception,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,0,empty,list,null,simulate,scroll,response,new,dummy,async,bulk,by,scroll,action,time,value,nanos,system,nano,time,10,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,es,rejected,execution,exception,class,assert,that,e,get,cause,has,to,string,contains,string,test,assert,that,client,scrolls,cleared,contains,scroll,id,assert,equals,time,value,millis,0,test,task,get,status,get,throttled
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1524684173;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1527840262;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1529433467;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1529600205;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1537806831;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1539615817;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1542213184;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1544035746;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1548775385;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1548918365;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String name, Runnable command) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(delay, name, command)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,future,schedule,time,value,delay,string,name,runnable,command,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,delay,name,command,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testCancelWhileDelayedAfterScrollResponse() throws Exception;1548953505;Tests that we can cancel the request during its throttling delay. This can't use {@link #cancelTaskCase(Consumer)} because it needs_to send the request un-canceled and cancel it at a specific time.;public void testCancelWhileDelayedAfterScrollResponse() throws Exception {_        String reason = randomSimpleString(random())___        _        setupClient(new TestThreadPool(getTestName()) {_            @Override_            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String name) {_                _                if (delay.nanos() > 0) {_                    generic().execute(() -> taskManager.cancel(testTask, reason, () -> {}))__                }_                return super.schedule(command, delay, name)__            }_        })___        _        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        boolean previousScrollSet = usually()__        if (previousScrollSet) {_            action.setScroll(scrollId())__        }_        long total = randomIntBetween(0, Integer.MAX_VALUE)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), total, emptyList(), null)__        _        worker.rethrottle(1)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 1000, response)___        _        assertEquals(reason, listener.get(10, TimeUnit.SECONDS).getReasonCancelled())__        if (previousScrollSet) {_            _            assertThat(client.scrollsCleared, contains(scrollId))__        }_    };tests,that,we,can,cancel,the,request,during,its,throttling,delay,this,can,t,use,link,cancel,task,case,consumer,because,it,needs,to,send,the,request,un,canceled,and,cancel,it,at,a,specific,time;public,void,test,cancel,while,delayed,after,scroll,response,throws,exception,string,reason,random,simple,string,random,setup,client,new,test,thread,pool,get,test,name,override,public,scheduled,cancellable,schedule,runnable,command,time,value,delay,string,name,if,delay,nanos,0,generic,execute,task,manager,cancel,test,task,reason,return,super,schedule,command,delay,name,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,boolean,previous,scroll,set,usually,if,previous,scroll,set,action,set,scroll,scroll,id,long,total,random,int,between,0,integer,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,total,empty,list,null,worker,rethrottle,1,simulate,scroll,response,action,time,value,nanos,system,nano,time,1000,response,assert,equals,reason,listener,get,10,time,unit,seconds,get,reason,cancelled,if,previous,scroll,set,assert,that,client,scrolls,cleared,contains,scroll,id
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1524684173;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1527840262;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1529433467;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1529600205;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1537806831;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1539615817;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1542213184;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1544035746;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1548775385;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1548918365;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testBulkFailuresAbortRequest() throws Exception;1548953505;Mimicks bulk indexing failures.;public void testBulkFailuresAbortRequest() throws Exception {_        Failure failure = new Failure("index", "type", "id", new RuntimeException("test"))__        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__        BulkResponse bulkResponse = new BulkResponse(new BulkItemResponse[]_            {new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, failure)}, randomLong())__        action.onBulkResponse(timeValueNanos(System.nanoTime()), bulkResponse)__        BulkByScrollResponse response = listener.get()__        assertThat(response.getBulkFailures(), contains(failure))__        assertThat(response.getSearchFailures(), empty())__        assertNull(response.getReasonCancelled())__    };mimicks,bulk,indexing,failures;public,void,test,bulk,failures,abort,request,throws,exception,failure,failure,new,failure,index,type,id,new,runtime,exception,test,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,bulk,response,bulk,response,new,bulk,response,new,bulk,item,response,new,bulk,item,response,0,doc,write,request,op,type,create,failure,random,long,action,on,bulk,response,time,value,nanos,system,nano,time,bulk,response,bulk,by,scroll,response,response,listener,get,assert,that,response,get,bulk,failures,contains,failure,assert,that,response,get,search,failures,empty,assert,null,response,get,reason,cancelled
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1524684173;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1527840262;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1529433467;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1529600205;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1537806831;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1539615817;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1542213184;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1544035746;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1548775385;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1548918365;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testScrollResponseBatchingBehavior() throws Exception;1548953505;Tests that each scroll response is a batch and that the batch is launched properly.;public void testScrollResponseBatchingBehavior() throws Exception {_        int maxBatches = randomIntBetween(0, 100)__        for (int batches = 1_ batches < maxBatches_ batches++) {_            Hit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__            ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__            DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction()__            simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)___            _            final int expectedBatches = batches__            assertBusy(() -> assertEquals(expectedBatches, testTask.getStatus().getBatches()))__        }_    };tests,that,each,scroll,response,is,a,batch,and,that,the,batch,is,launched,properly;public,void,test,scroll,response,batching,behavior,throws,exception,int,max,batches,random,int,between,0,100,for,int,batches,1,batches,max,batches,batches,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,final,int,expected,batches,batches,assert,busy,assert,equals,expected,batches,test,task,get,status,get,batches
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1524684173;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1527840262;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1529433467;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1529600205;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1537806831;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1539615817;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1542213184;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1544035746;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1548775385;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1548918365;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
AsyncBulkByScrollActionTests -> public void testBuildRequestThrowsException() throws Exception;1548953505;Mimicks script failures or general wrongness by implementers.;public void testBuildRequestThrowsException() throws Exception {_        DummyAsyncBulkByScrollAction action = new DummyAsyncBulkByScrollAction() {_            @Override_            protected AbstractAsyncBulkByScrollAction.RequestWrapper<?> buildRequest(Hit doc) {_                throw new RuntimeException("surprise")__            }_        }__        ScrollableHitSource.BasicHit hit = new ScrollableHitSource.BasicHit("index", "type", "id", 0)__        hit.setSource(new BytesArray("{}"), XContentType.JSON)__        ScrollableHitSource.Response response = new ScrollableHitSource.Response(false, emptyList(), 1, singletonList(hit), null)__        simulateScrollResponse(action, timeValueNanos(System.nanoTime()), 0, response)__        ExecutionException e = expectThrows(ExecutionException.class, () -> listener.get())__        assertThat(e.getCause(), instanceOf(RuntimeException.class))__        assertThat(e.getCause().getMessage(), equalTo("surprise"))__    };mimicks,script,failures,or,general,wrongness,by,implementers;public,void,test,build,request,throws,exception,throws,exception,dummy,async,bulk,by,scroll,action,action,new,dummy,async,bulk,by,scroll,action,override,protected,abstract,async,bulk,by,scroll,action,request,wrapper,build,request,hit,doc,throw,new,runtime,exception,surprise,scrollable,hit,source,basic,hit,hit,new,scrollable,hit,source,basic,hit,index,type,id,0,hit,set,source,new,bytes,array,xcontent,type,json,scrollable,hit,source,response,response,new,scrollable,hit,source,response,false,empty,list,1,singleton,list,hit,null,simulate,scroll,response,action,time,value,nanos,system,nano,time,0,response,execution,exception,e,expect,throws,execution,exception,class,listener,get,assert,that,e,get,cause,instance,of,runtime,exception,class,assert,that,e,get,cause,get,message,equal,to,surprise
