# id;timestamp;commentText;codeText;commentWords;codeWords
ReindexFailureTests -> public void testResponseOnSearchFailure() throws Exception;1524684173;Make sure that search failures get pushed back to the user as failures of_the whole process. We do lose some information about how far along the_process got, but its important that they see these failures.;public void testResponseOnSearchFailure() throws Exception {_        _        int attempt = 1__        while (attempt < 5) {_            indexDocs(100)__            ReindexRequestBuilder copy = reindex().source("source").destination("dest")__            copy.source().setSize(10)__            Future<BulkByScrollResponse> response = copy.execute()__            client().admin().indices().prepareDelete("source").get()___            try {_                response.get()__                logger.info("Didn't trigger a reindex failure on the {} attempt", attempt)__                attempt++__                _                assertBusy(() -> assertFalse(client().admin().indices().prepareExists("source").get().isExists()))__            } catch (ExecutionException e) {_                logger.info("Triggered a reindex failure on the {} attempt: {}", attempt, e.getMessage())__                assertThat(e.getMessage(),_                        either(containsString("all shards failed"))_                        .or(containsString("No search context found"))_                        .or(containsString("no such index"))_                        )__                return__            }_        }_        assumeFalse("Wasn't able to trigger a reindex failure in " + attempt + " attempts.", true)__    };make,sure,that,search,failures,get,pushed,back,to,the,user,as,failures,of,the,whole,process,we,do,lose,some,information,about,how,far,along,the,process,got,but,its,important,that,they,see,these,failures;public,void,test,response,on,search,failure,throws,exception,int,attempt,1,while,attempt,5,index,docs,100,reindex,request,builder,copy,reindex,source,source,destination,dest,copy,source,set,size,10,future,bulk,by,scroll,response,response,copy,execute,client,admin,indices,prepare,delete,source,get,try,response,get,logger,info,didn,t,trigger,a,reindex,failure,on,the,attempt,attempt,attempt,assert,busy,assert,false,client,admin,indices,prepare,exists,source,get,is,exists,catch,execution,exception,e,logger,info,triggered,a,reindex,failure,on,the,attempt,attempt,e,get,message,assert,that,e,get,message,either,contains,string,all,shards,failed,or,contains,string,no,search,context,found,or,contains,string,no,such,index,return,assume,false,wasn,t,able,to,trigger,a,reindex,failure,in,attempt,attempts,true
ReindexFailureTests -> public void testResponseOnSearchFailure() throws Exception;1540486836;Make sure that search failures get pushed back to the user as failures of_the whole process. We do lose some information about how far along the_process got, but its important that they see these failures.;public void testResponseOnSearchFailure() throws Exception {_        _        int attempt = 1__        while (attempt < 5) {_            indexDocs(100)__            ReindexRequestBuilder copy = reindex().source("source").destination("dest")__            copy.source().setSize(10)__            Future<BulkByScrollResponse> response = copy.execute()__            client().admin().indices().prepareDelete("source").get()___            try {_                response.get()__                logger.info("Didn't trigger a reindex failure on the {} attempt", attempt)__                attempt++__                _                assertBusy(() -> assertFalse(client().admin().indices().prepareExists("source").get().isExists()))__            } catch (ExecutionException e) {_                logger.info("Triggered a reindex failure on the {} attempt: {}", attempt, e.getMessage())__                assertThat(e.getMessage(),_                        either(containsString("all shards failed"))_                        .or(containsString("No search context found"))_                        .or(containsString("no such index [source]"))_                        )__                return__            }_        }_        assumeFalse("Wasn't able to trigger a reindex failure in " + attempt + " attempts.", true)__    };make,sure,that,search,failures,get,pushed,back,to,the,user,as,failures,of,the,whole,process,we,do,lose,some,information,about,how,far,along,the,process,got,but,its,important,that,they,see,these,failures;public,void,test,response,on,search,failure,throws,exception,int,attempt,1,while,attempt,5,index,docs,100,reindex,request,builder,copy,reindex,source,source,destination,dest,copy,source,set,size,10,future,bulk,by,scroll,response,response,copy,execute,client,admin,indices,prepare,delete,source,get,try,response,get,logger,info,didn,t,trigger,a,reindex,failure,on,the,attempt,attempt,attempt,assert,busy,assert,false,client,admin,indices,prepare,exists,source,get,is,exists,catch,execution,exception,e,logger,info,triggered,a,reindex,failure,on,the,attempt,attempt,e,get,message,assert,that,e,get,message,either,contains,string,all,shards,failed,or,contains,string,no,search,context,found,or,contains,string,no,such,index,source,return,assume,false,wasn,t,able,to,trigger,a,reindex,failure,in,attempt,attempts,true
ReindexFailureTests -> public void testResponseOnSearchFailure() throws Exception;1545141229;Make sure that search failures get pushed back to the user as failures of_the whole process. We do lose some information about how far along the_process got, but its important that they see these failures.;public void testResponseOnSearchFailure() throws Exception {_        _        int attempt = 1__        while (attempt < 5) {_            indexDocs(100)__            ReindexRequestBuilder copy = reindex().source("source").destination("dest")__            copy.source().setSize(10)__            Future<BulkByScrollResponse> response = copy.execute()__            client().admin().indices().prepareDelete("source").get()___            try {_                response.get()__                logger.info("Didn't trigger a reindex failure on the {} attempt", attempt)__                attempt++__                _                assertBusy(() -> assertFalse(client().admin().indices().prepareExists("source").get().isExists()))__            } catch (ExecutionException e) {_                logger.info("Triggered a reindex failure on the {} attempt: {}", attempt, e.getMessage())__                assertThat(e.getMessage(),_                        either(containsString("all shards failed"))_                        .or(containsString("No search context found"))_                        .or(containsString("no such index [source]"))_                        )__                return__            }_        }_        assumeFalse("Wasn't able to trigger a reindex failure in " + attempt + " attempts.", true)__    };make,sure,that,search,failures,get,pushed,back,to,the,user,as,failures,of,the,whole,process,we,do,lose,some,information,about,how,far,along,the,process,got,but,its,important,that,they,see,these,failures;public,void,test,response,on,search,failure,throws,exception,int,attempt,1,while,attempt,5,index,docs,100,reindex,request,builder,copy,reindex,source,source,destination,dest,copy,source,set,size,10,future,bulk,by,scroll,response,response,copy,execute,client,admin,indices,prepare,delete,source,get,try,response,get,logger,info,didn,t,trigger,a,reindex,failure,on,the,attempt,attempt,attempt,assert,busy,assert,false,client,admin,indices,prepare,exists,source,get,is,exists,catch,execution,exception,e,logger,info,triggered,a,reindex,failure,on,the,attempt,attempt,e,get,message,assert,that,e,get,message,either,contains,string,all,shards,failed,or,contains,string,no,search,context,found,or,contains,string,no,such,index,source,return,assume,false,wasn,t,able,to,trigger,a,reindex,failure,in,attempt,attempts,true
