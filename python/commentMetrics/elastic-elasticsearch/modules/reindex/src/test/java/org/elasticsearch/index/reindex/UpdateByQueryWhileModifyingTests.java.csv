commented;modifiers;parameterAmount;loc;comment;code
false;public;0;56;;public void testUpdateWhileReindexing() throws Exception {     AtomicReference<String> value = new AtomicReference<>(randomSimpleString(random())).     indexRandom(true, client().prepareIndex("test", "test", "test").setSource("test", value.get())).     AtomicReference<Exception> failure = new AtomicReference<>().     AtomicBoolean keepUpdating = new AtomicBoolean(true).     Thread updater = new Thread(() -> {         while (keepUpdating.get()) {             try {                 BulkByScrollResponse response = updateByQuery().source("test").refresh(true).abortOnVersionConflict(false).get().                 assertThat(response, matcher().updated(either(equalTo(0L)).or(equalTo(1L))).versionConflicts(either(equalTo(0L)).or(equalTo(1L)))).             } catch (Exception e) {                 failure.set(e).             }         }     }).     updater.start().     try {         for (int i = 0. i < MAX_MUTATIONS. i++) {             GetResponse get = client().prepareGet("test", "test", "test").get().             assertEquals(value.get(), get.getSource().get("test")).             value.set(randomSimpleString(random())).             IndexRequestBuilder index = client().prepareIndex("test", "test", "test").setSource("test", value.get()).setRefreshPolicy(IMMEDIATE).             /*                  * Update by query changes the document so concurrent                  * indexes might get version conflict exceptions so we just                  * blindly retry.                  */             int attempts = 0.             while (true) {                 attempts++.                 try {                     index.setIfSeqNo(get.getSeqNo()).setIfPrimaryTerm(get.getPrimaryTerm()).get().                     break.                 } catch (VersionConflictEngineException e) {                     if (attempts >= MAX_ATTEMPTS) {                         throw new RuntimeException("Failed to index after [" + MAX_ATTEMPTS + "] attempts. Too many version conflicts!").                     }                     logger.info("Caught expected version conflict trying to perform mutation number [{}] with version [{}] " + "on attempt [{}]. Retrying.", i, get.getVersion(), attempts).                     get = client().prepareGet("test", "test", "test").get().                 }             }         }     } finally {         keepUpdating.set(false).         updater.join(TimeUnit.SECONDS.toMillis(10)).         if (failure.get() != null) {             throw new RuntimeException(failure.get()).         }     } }
