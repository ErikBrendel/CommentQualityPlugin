commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setupScriptService() {     scriptService = mock(ScriptService.class). }
false;public;0;4;;@Override public void execute() {     scriptBody.accept(getCtx()). }
false;protected;1;15;;@SuppressWarnings("unchecked") protected <T extends ActionRequest> T applyScript(Consumer<Map<String, Object>> scriptBody) {     IndexRequest index = new IndexRequest("index", "type", "1").source(singletonMap("foo", "bar")).     ScrollableHitSource.Hit doc = new ScrollableHitSource.BasicHit("test", "type", "id", 0).     UpdateScript.Factory factory = (params, ctx) -> new UpdateScript(Collections.emptyMap(), ctx) {          @Override         public void execute() {             scriptBody.accept(getCtx()).         }     }.     when(scriptService.compile(any(), eq(UpdateScript.CONTEXT))).thenReturn(factory).     AbstractAsyncBulkByScrollAction<Request, ?> action = action(scriptService, request().setScript(mockScript(""))).     RequestWrapper<?> result = action.buildScriptApplier().apply(AbstractAsyncBulkByScrollAction.wrap(index), doc).     return (result != null) ? (T) result.self() : null. }
false;public;0;4;;public void testTypeDeprecation() {     applyScript((Map<String, Object> ctx) -> ctx.get("_type")).     assertWarnings("[types removal] Looking up doc types [_type] in scripts is deprecated."). }
false;public;0;8;;public void testScriptAddingJunkToCtxIsError() {     try {         applyScript((Map<String, Object> ctx) -> ctx.put("junk", "junk")).         fail("Expected error").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("Invalid fields added to context [junk]")).     } }
false;public;0;8;;public void testChangeSource() {     IndexRequest index = applyScript((Map<String, Object> ctx) -> {         @SuppressWarnings("unchecked")         Map<String, Object> source = (Map<String, Object>) ctx.get("_source").         source.put("bar", "cat").     }).     assertEquals("cat", index.sourceAsMap().get("bar")). }
false;public;0;5;;public void testSetOpTypeNoop() throws Exception {     assertThat(task.getStatus().getNoops(), equalTo(0L)).     assertNull(applyScript((Map<String, Object> ctx) -> ctx.put("op", OpType.NOOP.toString()))).     assertThat(task.getStatus().getNoops(), equalTo(1L)). }
false;public;0;6;;public void testSetOpTypeDelete() throws Exception {     DeleteRequest delete = applyScript((Map<String, Object> ctx) -> ctx.put("op", OpType.DELETE.toString())).     assertThat(delete.index(), equalTo("index")).     assertThat(delete.type(), equalTo("type")).     assertThat(delete.id(), equalTo("1")). }
false;public;0;5;;public void testSetOpTypeUnknown() throws Exception {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> applyScript((Map<String, Object> ctx) -> ctx.put("op", "unknown"))).     assertThat(e.getMessage(), equalTo("Operation type [unknown] not allowed, only [noop, index, delete] are allowed")). }
false;protected,abstract;2;1;;protected abstract AbstractAsyncBulkByScrollAction<Request, ?> action(ScriptService scriptService, Request request).
